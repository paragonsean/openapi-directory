/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_rate_limit_bucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_rate_limit_bucket::OAIVerify_v2_service_rate_limit_bucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_rate_limit_bucket::OAIVerify_v2_service_rate_limit_bucket() {
    this->initializeModel();
}

OAIVerify_v2_service_rate_limit_bucket::~OAIVerify_v2_service_rate_limit_bucket() {}

void OAIVerify_v2_service_rate_limit_bucket::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_rate_limit_sid_isSet = false;
    m_rate_limit_sid_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVerify_v2_service_rate_limit_bucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_rate_limit_bucket::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_rate_limit_sid_isValid = ::OpenAPI::fromJsonValue(m_rate_limit_sid, json[QString("rate_limit_sid")]);
    m_rate_limit_sid_isSet = !json[QString("rate_limit_sid")].isNull() && m_rate_limit_sid_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVerify_v2_service_rate_limit_bucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_rate_limit_bucket::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_rate_limit_sid_isSet) {
        obj.insert(QString("rate_limit_sid"), ::OpenAPI::toJsonValue(m_rate_limit_sid));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVerify_v2_service_rate_limit_bucket::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_rate_limit_bucket::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIVerify_v2_service_rate_limit_bucket::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_rate_limit_bucket::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service_rate_limit_bucket::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service_rate_limit_bucket::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIVerify_v2_service_rate_limit_bucket::getInterval() const {
    return m_interval;
}
void OAIVerify_v2_service_rate_limit_bucket::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIVerify_v2_service_rate_limit_bucket::getMax() const {
    return m_max;
}
void OAIVerify_v2_service_rate_limit_bucket::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_max_Set() const{
    return m_max_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_max_Valid() const{
    return m_max_isValid;
}

QString OAIVerify_v2_service_rate_limit_bucket::getRateLimitSid() const {
    return m_rate_limit_sid;
}
void OAIVerify_v2_service_rate_limit_bucket::setRateLimitSid(const QString &rate_limit_sid) {
    m_rate_limit_sid = rate_limit_sid;
    m_rate_limit_sid_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_rate_limit_sid_Set() const{
    return m_rate_limit_sid_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_rate_limit_sid_Valid() const{
    return m_rate_limit_sid_isValid;
}

QString OAIVerify_v2_service_rate_limit_bucket::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_rate_limit_bucket::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_rate_limit_bucket::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service_rate_limit_bucket::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIVerify_v2_service_rate_limit_bucket::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service_rate_limit_bucket::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service_rate_limit_bucket::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_service_rate_limit_bucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_rate_limit_bucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
