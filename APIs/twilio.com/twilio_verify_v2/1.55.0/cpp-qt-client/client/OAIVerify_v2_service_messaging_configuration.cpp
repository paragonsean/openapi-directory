/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_messaging_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_messaging_configuration::OAIVerify_v2_service_messaging_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_messaging_configuration::OAIVerify_v2_service_messaging_configuration() {
    this->initializeModel();
}

OAIVerify_v2_service_messaging_configuration::~OAIVerify_v2_service_messaging_configuration() {}

void OAIVerify_v2_service_messaging_configuration::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVerify_v2_service_messaging_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_messaging_configuration::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVerify_v2_service_messaging_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_messaging_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVerify_v2_service_messaging_configuration::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_messaging_configuration::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIVerify_v2_service_messaging_configuration::getCountry() const {
    return m_country;
}
void OAIVerify_v2_service_messaging_configuration::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_country_Set() const{
    return m_country_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIVerify_v2_service_messaging_configuration::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_messaging_configuration::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service_messaging_configuration::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service_messaging_configuration::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIVerify_v2_service_messaging_configuration::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAIVerify_v2_service_messaging_configuration::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

QString OAIVerify_v2_service_messaging_configuration::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_messaging_configuration::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_messaging_configuration::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service_messaging_configuration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service_messaging_configuration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service_messaging_configuration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_service_messaging_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_messaging_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
