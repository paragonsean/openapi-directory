/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_verification_attempts_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_verification_attempts_summary::OAIVerify_v2_verification_attempts_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_verification_attempts_summary::OAIVerify_v2_verification_attempts_summary() {
    this->initializeModel();
}

OAIVerify_v2_verification_attempts_summary::~OAIVerify_v2_verification_attempts_summary() {}

void OAIVerify_v2_verification_attempts_summary::initializeModel() {

    m_conversion_rate_percentage_isSet = false;
    m_conversion_rate_percentage_isValid = false;

    m_total_attempts_isSet = false;
    m_total_attempts_isValid = false;

    m_total_converted_isSet = false;
    m_total_converted_isValid = false;

    m_total_unconverted_isSet = false;
    m_total_unconverted_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVerify_v2_verification_attempts_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_verification_attempts_summary::fromJsonObject(QJsonObject json) {

    m_conversion_rate_percentage_isValid = ::OpenAPI::fromJsonValue(m_conversion_rate_percentage, json[QString("conversion_rate_percentage")]);
    m_conversion_rate_percentage_isSet = !json[QString("conversion_rate_percentage")].isNull() && m_conversion_rate_percentage_isValid;

    m_total_attempts_isValid = ::OpenAPI::fromJsonValue(m_total_attempts, json[QString("total_attempts")]);
    m_total_attempts_isSet = !json[QString("total_attempts")].isNull() && m_total_attempts_isValid;

    m_total_converted_isValid = ::OpenAPI::fromJsonValue(m_total_converted, json[QString("total_converted")]);
    m_total_converted_isSet = !json[QString("total_converted")].isNull() && m_total_converted_isValid;

    m_total_unconverted_isValid = ::OpenAPI::fromJsonValue(m_total_unconverted, json[QString("total_unconverted")]);
    m_total_unconverted_isSet = !json[QString("total_unconverted")].isNull() && m_total_unconverted_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVerify_v2_verification_attempts_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_verification_attempts_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_rate_percentage_isSet) {
        obj.insert(QString("conversion_rate_percentage"), ::OpenAPI::toJsonValue(m_conversion_rate_percentage));
    }
    if (m_total_attempts_isSet) {
        obj.insert(QString("total_attempts"), ::OpenAPI::toJsonValue(m_total_attempts));
    }
    if (m_total_converted_isSet) {
        obj.insert(QString("total_converted"), ::OpenAPI::toJsonValue(m_total_converted));
    }
    if (m_total_unconverted_isSet) {
        obj.insert(QString("total_unconverted"), ::OpenAPI::toJsonValue(m_total_unconverted));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

double OAIVerify_v2_verification_attempts_summary::getConversionRatePercentage() const {
    return m_conversion_rate_percentage;
}
void OAIVerify_v2_verification_attempts_summary::setConversionRatePercentage(const double &conversion_rate_percentage) {
    m_conversion_rate_percentage = conversion_rate_percentage;
    m_conversion_rate_percentage_isSet = true;
}

bool OAIVerify_v2_verification_attempts_summary::is_conversion_rate_percentage_Set() const{
    return m_conversion_rate_percentage_isSet;
}

bool OAIVerify_v2_verification_attempts_summary::is_conversion_rate_percentage_Valid() const{
    return m_conversion_rate_percentage_isValid;
}

qint32 OAIVerify_v2_verification_attempts_summary::getTotalAttempts() const {
    return m_total_attempts;
}
void OAIVerify_v2_verification_attempts_summary::setTotalAttempts(const qint32 &total_attempts) {
    m_total_attempts = total_attempts;
    m_total_attempts_isSet = true;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_attempts_Set() const{
    return m_total_attempts_isSet;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_attempts_Valid() const{
    return m_total_attempts_isValid;
}

qint32 OAIVerify_v2_verification_attempts_summary::getTotalConverted() const {
    return m_total_converted;
}
void OAIVerify_v2_verification_attempts_summary::setTotalConverted(const qint32 &total_converted) {
    m_total_converted = total_converted;
    m_total_converted_isSet = true;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_converted_Set() const{
    return m_total_converted_isSet;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_converted_Valid() const{
    return m_total_converted_isValid;
}

qint32 OAIVerify_v2_verification_attempts_summary::getTotalUnconverted() const {
    return m_total_unconverted;
}
void OAIVerify_v2_verification_attempts_summary::setTotalUnconverted(const qint32 &total_unconverted) {
    m_total_unconverted = total_unconverted;
    m_total_unconverted_isSet = true;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_unconverted_Set() const{
    return m_total_unconverted_isSet;
}

bool OAIVerify_v2_verification_attempts_summary::is_total_unconverted_Valid() const{
    return m_total_unconverted_isValid;
}

QString OAIVerify_v2_verification_attempts_summary::getUrl() const {
    return m_url;
}
void OAIVerify_v2_verification_attempts_summary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_verification_attempts_summary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_verification_attempts_summary::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_verification_attempts_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_rate_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_converted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unconverted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_verification_attempts_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
