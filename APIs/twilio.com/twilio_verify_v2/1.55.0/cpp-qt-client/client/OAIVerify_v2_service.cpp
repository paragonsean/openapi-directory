/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service::OAIVerify_v2_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service::OAIVerify_v2_service() {
    this->initializeModel();
}

OAIVerify_v2_service::~OAIVerify_v2_service() {}

void OAIVerify_v2_service::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_code_length_isSet = false;
    m_code_length_isValid = false;

    m_custom_code_enabled_isSet = false;
    m_custom_code_enabled_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_template_sid_isSet = false;
    m_default_template_sid_isValid = false;

    m_do_not_share_warning_enabled_isSet = false;
    m_do_not_share_warning_enabled_isValid = false;

    m_dtmf_input_required_isSet = false;
    m_dtmf_input_required_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_lookup_enabled_isSet = false;
    m_lookup_enabled_isValid = false;

    m_psd2_enabled_isSet = false;
    m_psd2_enabled_isValid = false;

    m_push_isSet = false;
    m_push_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_skip_sms_to_landlines_isSet = false;
    m_skip_sms_to_landlines_isValid = false;

    m_totp_isSet = false;
    m_totp_isValid = false;

    m_tts_name_isSet = false;
    m_tts_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verify_event_subscription_enabled_isSet = false;
    m_verify_event_subscription_enabled_isValid = false;
}

void OAIVerify_v2_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_code_length_isValid = ::OpenAPI::fromJsonValue(m_code_length, json[QString("code_length")]);
    m_code_length_isSet = !json[QString("code_length")].isNull() && m_code_length_isValid;

    m_custom_code_enabled_isValid = ::OpenAPI::fromJsonValue(m_custom_code_enabled, json[QString("custom_code_enabled")]);
    m_custom_code_enabled_isSet = !json[QString("custom_code_enabled")].isNull() && m_custom_code_enabled_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_default_template_sid_isValid = ::OpenAPI::fromJsonValue(m_default_template_sid, json[QString("default_template_sid")]);
    m_default_template_sid_isSet = !json[QString("default_template_sid")].isNull() && m_default_template_sid_isValid;

    m_do_not_share_warning_enabled_isValid = ::OpenAPI::fromJsonValue(m_do_not_share_warning_enabled, json[QString("do_not_share_warning_enabled")]);
    m_do_not_share_warning_enabled_isSet = !json[QString("do_not_share_warning_enabled")].isNull() && m_do_not_share_warning_enabled_isValid;

    m_dtmf_input_required_isValid = ::OpenAPI::fromJsonValue(m_dtmf_input_required, json[QString("dtmf_input_required")]);
    m_dtmf_input_required_isSet = !json[QString("dtmf_input_required")].isNull() && m_dtmf_input_required_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_lookup_enabled_isValid = ::OpenAPI::fromJsonValue(m_lookup_enabled, json[QString("lookup_enabled")]);
    m_lookup_enabled_isSet = !json[QString("lookup_enabled")].isNull() && m_lookup_enabled_isValid;

    m_psd2_enabled_isValid = ::OpenAPI::fromJsonValue(m_psd2_enabled, json[QString("psd2_enabled")]);
    m_psd2_enabled_isSet = !json[QString("psd2_enabled")].isNull() && m_psd2_enabled_isValid;

    m_push_isValid = ::OpenAPI::fromJsonValue(m_push, json[QString("push")]);
    m_push_isSet = !json[QString("push")].isNull() && m_push_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_skip_sms_to_landlines_isValid = ::OpenAPI::fromJsonValue(m_skip_sms_to_landlines, json[QString("skip_sms_to_landlines")]);
    m_skip_sms_to_landlines_isSet = !json[QString("skip_sms_to_landlines")].isNull() && m_skip_sms_to_landlines_isValid;

    m_totp_isValid = ::OpenAPI::fromJsonValue(m_totp, json[QString("totp")]);
    m_totp_isSet = !json[QString("totp")].isNull() && m_totp_isValid;

    m_tts_name_isValid = ::OpenAPI::fromJsonValue(m_tts_name, json[QString("tts_name")]);
    m_tts_name_isSet = !json[QString("tts_name")].isNull() && m_tts_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verify_event_subscription_enabled_isValid = ::OpenAPI::fromJsonValue(m_verify_event_subscription_enabled, json[QString("verify_event_subscription_enabled")]);
    m_verify_event_subscription_enabled_isSet = !json[QString("verify_event_subscription_enabled")].isNull() && m_verify_event_subscription_enabled_isValid;
}

QString OAIVerify_v2_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_code_length_isSet) {
        obj.insert(QString("code_length"), ::OpenAPI::toJsonValue(m_code_length));
    }
    if (m_custom_code_enabled_isSet) {
        obj.insert(QString("custom_code_enabled"), ::OpenAPI::toJsonValue(m_custom_code_enabled));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_template_sid_isSet) {
        obj.insert(QString("default_template_sid"), ::OpenAPI::toJsonValue(m_default_template_sid));
    }
    if (m_do_not_share_warning_enabled_isSet) {
        obj.insert(QString("do_not_share_warning_enabled"), ::OpenAPI::toJsonValue(m_do_not_share_warning_enabled));
    }
    if (m_dtmf_input_required_isSet) {
        obj.insert(QString("dtmf_input_required"), ::OpenAPI::toJsonValue(m_dtmf_input_required));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_lookup_enabled_isSet) {
        obj.insert(QString("lookup_enabled"), ::OpenAPI::toJsonValue(m_lookup_enabled));
    }
    if (m_psd2_enabled_isSet) {
        obj.insert(QString("psd2_enabled"), ::OpenAPI::toJsonValue(m_psd2_enabled));
    }
    if (m_push_isSet) {
        obj.insert(QString("push"), ::OpenAPI::toJsonValue(m_push));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_skip_sms_to_landlines_isSet) {
        obj.insert(QString("skip_sms_to_landlines"), ::OpenAPI::toJsonValue(m_skip_sms_to_landlines));
    }
    if (m_totp_isSet) {
        obj.insert(QString("totp"), ::OpenAPI::toJsonValue(m_totp));
    }
    if (m_tts_name_isSet) {
        obj.insert(QString("tts_name"), ::OpenAPI::toJsonValue(m_tts_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verify_event_subscription_enabled_isSet) {
        obj.insert(QString("verify_event_subscription_enabled"), ::OpenAPI::toJsonValue(m_verify_event_subscription_enabled));
    }
    return obj;
}

QString OAIVerify_v2_service::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

qint32 OAIVerify_v2_service::getCodeLength() const {
    return m_code_length;
}
void OAIVerify_v2_service::setCodeLength(const qint32 &code_length) {
    m_code_length = code_length;
    m_code_length_isSet = true;
}

bool OAIVerify_v2_service::is_code_length_Set() const{
    return m_code_length_isSet;
}

bool OAIVerify_v2_service::is_code_length_Valid() const{
    return m_code_length_isValid;
}

bool OAIVerify_v2_service::isCustomCodeEnabled() const {
    return m_custom_code_enabled;
}
void OAIVerify_v2_service::setCustomCodeEnabled(const bool &custom_code_enabled) {
    m_custom_code_enabled = custom_code_enabled;
    m_custom_code_enabled_isSet = true;
}

bool OAIVerify_v2_service::is_custom_code_enabled_Set() const{
    return m_custom_code_enabled_isSet;
}

bool OAIVerify_v2_service::is_custom_code_enabled_Valid() const{
    return m_custom_code_enabled_isValid;
}

QDateTime OAIVerify_v2_service::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIVerify_v2_service::getDefaultTemplateSid() const {
    return m_default_template_sid;
}
void OAIVerify_v2_service::setDefaultTemplateSid(const QString &default_template_sid) {
    m_default_template_sid = default_template_sid;
    m_default_template_sid_isSet = true;
}

bool OAIVerify_v2_service::is_default_template_sid_Set() const{
    return m_default_template_sid_isSet;
}

bool OAIVerify_v2_service::is_default_template_sid_Valid() const{
    return m_default_template_sid_isValid;
}

bool OAIVerify_v2_service::isDoNotShareWarningEnabled() const {
    return m_do_not_share_warning_enabled;
}
void OAIVerify_v2_service::setDoNotShareWarningEnabled(const bool &do_not_share_warning_enabled) {
    m_do_not_share_warning_enabled = do_not_share_warning_enabled;
    m_do_not_share_warning_enabled_isSet = true;
}

bool OAIVerify_v2_service::is_do_not_share_warning_enabled_Set() const{
    return m_do_not_share_warning_enabled_isSet;
}

bool OAIVerify_v2_service::is_do_not_share_warning_enabled_Valid() const{
    return m_do_not_share_warning_enabled_isValid;
}

bool OAIVerify_v2_service::isDtmfInputRequired() const {
    return m_dtmf_input_required;
}
void OAIVerify_v2_service::setDtmfInputRequired(const bool &dtmf_input_required) {
    m_dtmf_input_required = dtmf_input_required;
    m_dtmf_input_required_isSet = true;
}

bool OAIVerify_v2_service::is_dtmf_input_required_Set() const{
    return m_dtmf_input_required_isSet;
}

bool OAIVerify_v2_service::is_dtmf_input_required_Valid() const{
    return m_dtmf_input_required_isValid;
}

QString OAIVerify_v2_service::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVerify_v2_service::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVerify_v2_service::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVerify_v2_service::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIObject OAIVerify_v2_service::getLinks() const {
    return m_links;
}
void OAIVerify_v2_service::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVerify_v2_service::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVerify_v2_service::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIVerify_v2_service::isLookupEnabled() const {
    return m_lookup_enabled;
}
void OAIVerify_v2_service::setLookupEnabled(const bool &lookup_enabled) {
    m_lookup_enabled = lookup_enabled;
    m_lookup_enabled_isSet = true;
}

bool OAIVerify_v2_service::is_lookup_enabled_Set() const{
    return m_lookup_enabled_isSet;
}

bool OAIVerify_v2_service::is_lookup_enabled_Valid() const{
    return m_lookup_enabled_isValid;
}

bool OAIVerify_v2_service::isPsd2Enabled() const {
    return m_psd2_enabled;
}
void OAIVerify_v2_service::setPsd2Enabled(const bool &psd2_enabled) {
    m_psd2_enabled = psd2_enabled;
    m_psd2_enabled_isSet = true;
}

bool OAIVerify_v2_service::is_psd2_enabled_Set() const{
    return m_psd2_enabled_isSet;
}

bool OAIVerify_v2_service::is_psd2_enabled_Valid() const{
    return m_psd2_enabled_isValid;
}

QJsonValue OAIVerify_v2_service::getPush() const {
    return m_push;
}
void OAIVerify_v2_service::setPush(const QJsonValue &push) {
    m_push = push;
    m_push_isSet = true;
}

bool OAIVerify_v2_service::is_push_Set() const{
    return m_push_isSet;
}

bool OAIVerify_v2_service::is_push_Valid() const{
    return m_push_isValid;
}

QString OAIVerify_v2_service::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIVerify_v2_service::isSkipSmsToLandlines() const {
    return m_skip_sms_to_landlines;
}
void OAIVerify_v2_service::setSkipSmsToLandlines(const bool &skip_sms_to_landlines) {
    m_skip_sms_to_landlines = skip_sms_to_landlines;
    m_skip_sms_to_landlines_isSet = true;
}

bool OAIVerify_v2_service::is_skip_sms_to_landlines_Set() const{
    return m_skip_sms_to_landlines_isSet;
}

bool OAIVerify_v2_service::is_skip_sms_to_landlines_Valid() const{
    return m_skip_sms_to_landlines_isValid;
}

QJsonValue OAIVerify_v2_service::getTotp() const {
    return m_totp;
}
void OAIVerify_v2_service::setTotp(const QJsonValue &totp) {
    m_totp = totp;
    m_totp_isSet = true;
}

bool OAIVerify_v2_service::is_totp_Set() const{
    return m_totp_isSet;
}

bool OAIVerify_v2_service::is_totp_Valid() const{
    return m_totp_isValid;
}

QString OAIVerify_v2_service::getTtsName() const {
    return m_tts_name;
}
void OAIVerify_v2_service::setTtsName(const QString &tts_name) {
    m_tts_name = tts_name;
    m_tts_name_isSet = true;
}

bool OAIVerify_v2_service::is_tts_name_Set() const{
    return m_tts_name_isSet;
}

bool OAIVerify_v2_service::is_tts_name_Valid() const{
    return m_tts_name_isValid;
}

QString OAIVerify_v2_service::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_service::isVerifyEventSubscriptionEnabled() const {
    return m_verify_event_subscription_enabled;
}
void OAIVerify_v2_service::setVerifyEventSubscriptionEnabled(const bool &verify_event_subscription_enabled) {
    m_verify_event_subscription_enabled = verify_event_subscription_enabled;
    m_verify_event_subscription_enabled_isSet = true;
}

bool OAIVerify_v2_service::is_verify_event_subscription_enabled_Set() const{
    return m_verify_event_subscription_enabled_isSet;
}

bool OAIVerify_v2_service::is_verify_event_subscription_enabled_Valid() const{
    return m_verify_event_subscription_enabled_isValid;
}

bool OAIVerify_v2_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_code_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_template_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_share_warning_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtmf_input_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psd2_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_sms_to_landlines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tts_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_event_subscription_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
