/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2VerificationAttemptApi_H
#define OAI_OAIVerifyV2VerificationAttemptApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListVerificationAttemptResponse.h"
#include "OAIVerification_attempt_enum_channels.h"
#include "OAIVerification_attempt_enum_conversion_status.h"
#include "OAIVerify_v2_verification_attempt.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2VerificationAttemptApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2VerificationAttemptApi(const int timeOut = 0);
    ~OAIVerifyV2VerificationAttemptApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchVerificationAttempt(const QString &sid);

    /**
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  date_created_before QDateTime [optional]
    * @param[in]  channel_data_to QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  channel OAIVerification_attempt_enum_channels [optional]
    * @param[in]  verify_service_sid QString [optional]
    * @param[in]  verification_sid QString [optional]
    * @param[in]  status OAIVerification_attempt_enum_conversion_status [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listVerificationAttempt(const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &channel_data_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerification_attempt_enum_channels> &channel = ::OpenAPI::OptionalParam<OAIVerification_attempt_enum_channels>(), const ::OpenAPI::OptionalParam<QString> &verify_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &verification_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerification_attempt_enum_conversion_status> &status = ::OpenAPI::OptionalParam<OAIVerification_attempt_enum_conversion_status>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchVerificationAttemptCallback(OAIHttpRequestWorker *worker);
    void listVerificationAttemptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchVerificationAttemptSignal(OAIVerify_v2_verification_attempt summary);
    void listVerificationAttemptSignal(OAIListVerificationAttemptResponse summary);


    void fetchVerificationAttemptSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_verification_attempt summary);
    void listVerificationAttemptSignalFull(OAIHttpRequestWorker *worker, OAIListVerificationAttemptResponse summary);

    Q_DECL_DEPRECATED_X("Use fetchVerificationAttemptSignalError() instead")
    void fetchVerificationAttemptSignalE(OAIVerify_v2_verification_attempt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVerificationAttemptSignalError(OAIVerify_v2_verification_attempt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVerificationAttemptSignalError() instead")
    void listVerificationAttemptSignalE(OAIListVerificationAttemptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVerificationAttemptSignalError(OAIListVerificationAttemptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchVerificationAttemptSignalErrorFull() instead")
    void fetchVerificationAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVerificationAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVerificationAttemptSignalErrorFull() instead")
    void listVerificationAttemptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVerificationAttemptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
