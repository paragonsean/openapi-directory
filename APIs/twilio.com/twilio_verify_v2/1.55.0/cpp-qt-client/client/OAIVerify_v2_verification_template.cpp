/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_verification_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_verification_template::OAIVerify_v2_verification_template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_verification_template::OAIVerify_v2_verification_template() {
    this->initializeModel();
}

OAIVerify_v2_verification_template::~OAIVerify_v2_verification_template() {}

void OAIVerify_v2_verification_template::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;
}

void OAIVerify_v2_verification_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_verification_template::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;
}

QString OAIVerify_v2_verification_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_verification_template::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_translations_isSet) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    return obj;
}

QString OAIVerify_v2_verification_template::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_verification_template::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_verification_template::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_verification_template::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QString> OAIVerify_v2_verification_template::getChannels() const {
    return m_channels;
}
void OAIVerify_v2_verification_template::setChannels(const QList<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIVerify_v2_verification_template::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIVerify_v2_verification_template::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIVerify_v2_verification_template::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVerify_v2_verification_template::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVerify_v2_verification_template::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVerify_v2_verification_template::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIVerify_v2_verification_template::getSid() const {
    return m_sid;
}
void OAIVerify_v2_verification_template::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_verification_template::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_verification_template::is_sid_Valid() const{
    return m_sid_isValid;
}

QJsonValue OAIVerify_v2_verification_template::getTranslations() const {
    return m_translations;
}
void OAIVerify_v2_verification_template::setTranslations(const QJsonValue &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIVerify_v2_verification_template::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIVerify_v2_verification_template::is_translations_Valid() const{
    return m_translations_isValid;
}

bool OAIVerify_v2_verification_template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_verification_template::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
