/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_verification_attempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_verification_attempt::OAIVerify_v2_verification_attempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_verification_attempt::OAIVerify_v2_verification_attempt() {
    this->initializeModel();
}

OAIVerify_v2_verification_attempt::~OAIVerify_v2_verification_attempt() {}

void OAIVerify_v2_verification_attempt::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_channel_data_isSet = false;
    m_channel_data_isValid = false;

    m_conversion_status_isSet = false;
    m_conversion_status_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verification_sid_isSet = false;
    m_verification_sid_isValid = false;
}

void OAIVerify_v2_verification_attempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_verification_attempt::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_channel_data_isValid = ::OpenAPI::fromJsonValue(m_channel_data, json[QString("channel_data")]);
    m_channel_data_isSet = !json[QString("channel_data")].isNull() && m_channel_data_isValid;

    m_conversion_status_isValid = ::OpenAPI::fromJsonValue(m_conversion_status, json[QString("conversion_status")]);
    m_conversion_status_isSet = !json[QString("conversion_status")].isNull() && m_conversion_status_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verification_sid_isValid = ::OpenAPI::fromJsonValue(m_verification_sid, json[QString("verification_sid")]);
    m_verification_sid_isSet = !json[QString("verification_sid")].isNull() && m_verification_sid_isValid;
}

QString OAIVerify_v2_verification_attempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_verification_attempt::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_channel_data_isSet) {
        obj.insert(QString("channel_data"), ::OpenAPI::toJsonValue(m_channel_data));
    }
    if (m_conversion_status.isSet()) {
        obj.insert(QString("conversion_status"), ::OpenAPI::toJsonValue(m_conversion_status));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verification_sid_isSet) {
        obj.insert(QString("verification_sid"), ::OpenAPI::toJsonValue(m_verification_sid));
    }
    return obj;
}

QString OAIVerify_v2_verification_attempt::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_verification_attempt::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_verification_attempt::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIVerification_attempt_enum_channels OAIVerify_v2_verification_attempt::getChannel() const {
    return m_channel;
}
void OAIVerify_v2_verification_attempt::setChannel(const OAIVerification_attempt_enum_channels &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIVerify_v2_verification_attempt::is_channel_Valid() const{
    return m_channel_isValid;
}

QJsonValue OAIVerify_v2_verification_attempt::getChannelData() const {
    return m_channel_data;
}
void OAIVerify_v2_verification_attempt::setChannelData(const QJsonValue &channel_data) {
    m_channel_data = channel_data;
    m_channel_data_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_channel_data_Set() const{
    return m_channel_data_isSet;
}

bool OAIVerify_v2_verification_attempt::is_channel_data_Valid() const{
    return m_channel_data_isValid;
}

OAIVerification_attempt_enum_conversion_status OAIVerify_v2_verification_attempt::getConversionStatus() const {
    return m_conversion_status;
}
void OAIVerify_v2_verification_attempt::setConversionStatus(const OAIVerification_attempt_enum_conversion_status &conversion_status) {
    m_conversion_status = conversion_status;
    m_conversion_status_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_conversion_status_Set() const{
    return m_conversion_status_isSet;
}

bool OAIVerify_v2_verification_attempt::is_conversion_status_Valid() const{
    return m_conversion_status_isValid;
}

QDateTime OAIVerify_v2_verification_attempt::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_verification_attempt::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_verification_attempt::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_verification_attempt::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_verification_attempt::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_verification_attempt::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QJsonValue OAIVerify_v2_verification_attempt::getPrice() const {
    return m_price;
}
void OAIVerify_v2_verification_attempt::setPrice(const QJsonValue &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_price_Set() const{
    return m_price_isSet;
}

bool OAIVerify_v2_verification_attempt::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIVerify_v2_verification_attempt::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_verification_attempt::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_verification_attempt::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_verification_attempt::getSid() const {
    return m_sid;
}
void OAIVerify_v2_verification_attempt::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_verification_attempt::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIVerify_v2_verification_attempt::getUrl() const {
    return m_url;
}
void OAIVerify_v2_verification_attempt::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_verification_attempt::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIVerify_v2_verification_attempt::getVerificationSid() const {
    return m_verification_sid;
}
void OAIVerify_v2_verification_attempt::setVerificationSid(const QString &verification_sid) {
    m_verification_sid = verification_sid;
    m_verification_sid_isSet = true;
}

bool OAIVerify_v2_verification_attempt::is_verification_sid_Set() const{
    return m_verification_sid_isSet;
}

bool OAIVerify_v2_verification_attempt::is_verification_sid_Valid() const{
    return m_verification_sid_isValid;
}

bool OAIVerify_v2_verification_attempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_verification_attempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
