/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2WebhookApi_H
#define OAI_OAIVerifyV2WebhookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWebhookResponse.h"
#include "OAIVerify_v2_service_webhook.h"
#include "OAIWebhook_enum_status.h"
#include "OAIWebhook_enum_version.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2WebhookApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2WebhookApi(const int timeOut = 0);
    ~OAIVerifyV2WebhookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  event_types QList<QString> [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  webhook_url QString [required]
    * @param[in]  status OAIWebhook_enum_status [optional]
    * @param[in]  version OAIWebhook_enum_version [optional]
    */
    virtual void createWebhook(const QString &service_sid, const QList<QString> &event_types, const QString &friendly_name, const QString &webhook_url, const ::OpenAPI::OptionalParam<OAIWebhook_enum_status> &status = ::OpenAPI::OptionalParam<OAIWebhook_enum_status>(), const ::OpenAPI::OptionalParam<OAIWebhook_enum_version> &version = ::OpenAPI::OptionalParam<OAIWebhook_enum_version>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteWebhook(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchWebhook(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWebhook(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  status OAIWebhook_enum_status [optional]
    * @param[in]  version OAIWebhook_enum_version [optional]
    * @param[in]  webhook_url QString [optional]
    */
    virtual void updateWebhook(const QString &service_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIWebhook_enum_status> &status = ::OpenAPI::OptionalParam<OAIWebhook_enum_status>(), const ::OpenAPI::OptionalParam<OAIWebhook_enum_version> &version = ::OpenAPI::OptionalParam<OAIWebhook_enum_version>(), const ::OpenAPI::OptionalParam<QString> &webhook_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchWebhookCallback(OAIHttpRequestWorker *worker);
    void listWebhookCallback(OAIHttpRequestWorker *worker);
    void updateWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWebhookSignal(OAIVerify_v2_service_webhook summary);
    void deleteWebhookSignal();
    void fetchWebhookSignal(OAIVerify_v2_service_webhook summary);
    void listWebhookSignal(OAIListWebhookResponse summary);
    void updateWebhookSignal(OAIVerify_v2_service_webhook summary);


    void createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_webhook summary);
    void deleteWebhookSignalFull(OAIHttpRequestWorker *worker);
    void fetchWebhookSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_webhook summary);
    void listWebhookSignalFull(OAIHttpRequestWorker *worker, OAIListWebhookResponse summary);
    void updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_webhook summary);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalError() instead")
    void createWebhookSignalE(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalError(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalError() instead")
    void deleteWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWebhookSignalError() instead")
    void fetchWebhookSignalE(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWebhookSignalError(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebhookSignalError() instead")
    void listWebhookSignalE(OAIListWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebhookSignalError(OAIListWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalError() instead")
    void updateWebhookSignalE(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalError(OAIVerify_v2_service_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalErrorFull() instead")
    void createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalErrorFull() instead")
    void deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWebhookSignalErrorFull() instead")
    void fetchWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebhookSignalErrorFull() instead")
    void listWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalErrorFull() instead")
    void updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
