/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVerify_v2_service_entity_challenge.h
 *
 * 
 */

#ifndef OAIVerify_v2_service_entity_challenge_H
#define OAIVerify_v2_service_entity_challenge_H

#include <QJsonObject>

#include "OAIChallenge_enum_challenge_reasons.h"
#include "OAIChallenge_enum_challenge_statuses.h"
#include "OAIChallenge_enum_factor_types.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVerify_v2_service_entity_challenge : public OAIObject {
public:
    OAIVerify_v2_service_entity_challenge();
    OAIVerify_v2_service_entity_challenge(QString json);
    ~OAIVerify_v2_service_entity_challenge() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateResponded() const;
    void setDateResponded(const QDateTime &date_responded);
    bool is_date_responded_Set() const;
    bool is_date_responded_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QJsonValue getDetails() const;
    void setDetails(const QJsonValue &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getEntitySid() const;
    void setEntitySid(const QString &entity_sid);
    bool is_entity_sid_Set() const;
    bool is_entity_sid_Valid() const;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getFactorSid() const;
    void setFactorSid(const QString &factor_sid);
    bool is_factor_sid_Set() const;
    bool is_factor_sid_Valid() const;

    OAIChallenge_enum_factor_types getFactorType() const;
    void setFactorType(const OAIChallenge_enum_factor_types &factor_type);
    bool is_factor_type_Set() const;
    bool is_factor_type_Valid() const;

    QJsonValue getHiddenDetails() const;
    void setHiddenDetails(const QJsonValue &hidden_details);
    bool is_hidden_details_Set() const;
    bool is_hidden_details_Valid() const;

    QString getIdentity() const;
    void setIdentity(const QString &identity);
    bool is_identity_Set() const;
    bool is_identity_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QJsonValue getMetadata() const;
    void setMetadata(const QJsonValue &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAIChallenge_enum_challenge_reasons getRespondedReason() const;
    void setRespondedReason(const OAIChallenge_enum_challenge_reasons &responded_reason);
    bool is_responded_reason_Set() const;
    bool is_responded_reason_Valid() const;

    QString getServiceSid() const;
    void setServiceSid(const QString &service_sid);
    bool is_service_sid_Set() const;
    bool is_service_sid_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    OAIChallenge_enum_challenge_statuses getStatus() const;
    void setStatus(const OAIChallenge_enum_challenge_statuses &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_responded;
    bool m_date_responded_isSet;
    bool m_date_responded_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QJsonValue m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_entity_sid;
    bool m_entity_sid_isSet;
    bool m_entity_sid_isValid;

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_factor_sid;
    bool m_factor_sid_isSet;
    bool m_factor_sid_isValid;

    OAIChallenge_enum_factor_types m_factor_type;
    bool m_factor_type_isSet;
    bool m_factor_type_isValid;

    QJsonValue m_hidden_details;
    bool m_hidden_details_isSet;
    bool m_hidden_details_isValid;

    QString m_identity;
    bool m_identity_isSet;
    bool m_identity_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QJsonValue m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAIChallenge_enum_challenge_reasons m_responded_reason;
    bool m_responded_reason_isSet;
    bool m_responded_reason_isValid;

    QString m_service_sid;
    bool m_service_sid_isSet;
    bool m_service_sid_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    OAIChallenge_enum_challenge_statuses m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVerify_v2_service_entity_challenge)

#endif // OAIVerify_v2_service_entity_challenge_H
