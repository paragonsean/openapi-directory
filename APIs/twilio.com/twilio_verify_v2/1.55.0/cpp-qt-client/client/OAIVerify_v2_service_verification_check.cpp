/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_verification_check.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_verification_check::OAIVerify_v2_service_verification_check(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_verification_check::OAIVerify_v2_service_verification_check() {
    this->initializeModel();
}

OAIVerify_v2_service_verification_check::~OAIVerify_v2_service_verification_check() {}

void OAIVerify_v2_service_verification_check::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_payee_isSet = false;
    m_payee_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_sna_attempts_error_codes_isSet = false;
    m_sna_attempts_error_codes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIVerify_v2_service_verification_check::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_verification_check::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_payee_isValid = ::OpenAPI::fromJsonValue(m_payee, json[QString("payee")]);
    m_payee_isSet = !json[QString("payee")].isNull() && m_payee_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_sna_attempts_error_codes_isValid = ::OpenAPI::fromJsonValue(m_sna_attempts_error_codes, json[QString("sna_attempts_error_codes")]);
    m_sna_attempts_error_codes_isSet = !json[QString("sna_attempts_error_codes")].isNull() && m_sna_attempts_error_codes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIVerify_v2_service_verification_check::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_verification_check::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_payee_isSet) {
        obj.insert(QString("payee"), ::OpenAPI::toJsonValue(m_payee));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_sna_attempts_error_codes.size() > 0) {
        obj.insert(QString("sna_attempts_error_codes"), ::OpenAPI::toJsonValue(m_sna_attempts_error_codes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIVerify_v2_service_verification_check::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_verification_check::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_verification_check::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIVerify_v2_service_verification_check::getAmount() const {
    return m_amount;
}
void OAIVerify_v2_service_verification_check::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIVerify_v2_service_verification_check::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIVerification_check_enum_channel OAIVerify_v2_service_verification_check::getChannel() const {
    return m_channel;
}
void OAIVerify_v2_service_verification_check::setChannel(const OAIVerification_check_enum_channel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIVerify_v2_service_verification_check::is_channel_Valid() const{
    return m_channel_isValid;
}

QDateTime OAIVerify_v2_service_verification_check::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_verification_check::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_verification_check::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service_verification_check::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service_verification_check::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service_verification_check::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIVerify_v2_service_verification_check::getPayee() const {
    return m_payee;
}
void OAIVerify_v2_service_verification_check::setPayee(const QString &payee) {
    m_payee = payee;
    m_payee_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_payee_Set() const{
    return m_payee_isSet;
}

bool OAIVerify_v2_service_verification_check::is_payee_Valid() const{
    return m_payee_isValid;
}

QString OAIVerify_v2_service_verification_check::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_verification_check::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_verification_check::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_verification_check::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service_verification_check::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service_verification_check::is_sid_Valid() const{
    return m_sid_isValid;
}

QList<QJsonValue> OAIVerify_v2_service_verification_check::getSnaAttemptsErrorCodes() const {
    return m_sna_attempts_error_codes;
}
void OAIVerify_v2_service_verification_check::setSnaAttemptsErrorCodes(const QList<QJsonValue> &sna_attempts_error_codes) {
    m_sna_attempts_error_codes = sna_attempts_error_codes;
    m_sna_attempts_error_codes_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_sna_attempts_error_codes_Set() const{
    return m_sna_attempts_error_codes_isSet;
}

bool OAIVerify_v2_service_verification_check::is_sna_attempts_error_codes_Valid() const{
    return m_sna_attempts_error_codes_isValid;
}

QString OAIVerify_v2_service_verification_check::getStatus() const {
    return m_status;
}
void OAIVerify_v2_service_verification_check::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVerify_v2_service_verification_check::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVerify_v2_service_verification_check::getTo() const {
    return m_to;
}
void OAIVerify_v2_service_verification_check::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_to_Set() const{
    return m_to_isSet;
}

bool OAIVerify_v2_service_verification_check::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIVerify_v2_service_verification_check::isRValid() const {
    return m_r_valid;
}
void OAIVerify_v2_service_verification_check::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIVerify_v2_service_verification_check::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIVerify_v2_service_verification_check::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIVerify_v2_service_verification_check::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sna_attempts_error_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_verification_check::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
