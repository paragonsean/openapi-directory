/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2ChallengeApi_H
#define OAI_OAIVerifyV2ChallengeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChallenge_enum_challenge_statuses.h"
#include "OAIChallenge_enum_list_orders.h"
#include "OAIListChallengeResponse.h"
#include "OAIVerify_v2_service_entity_challenge.h"
#include <QJsonValue>
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2ChallengeApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2ChallengeApi(const int timeOut = 0);
    ~OAIVerifyV2ChallengeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  factor_sid QString [required]
    * @param[in]  auth_payload QString [optional]
    * @param[in]  details_fields QList<QJsonValue> [optional]
    * @param[in]  details_message QString [optional]
    * @param[in]  expiration_date QDateTime [optional]
    * @param[in]  hidden_details QJsonValue [optional]
    */
    virtual void createChallenge(const QString &service_sid, const QString &identity, const QString &factor_sid, const ::OpenAPI::OptionalParam<QString> &auth_payload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QJsonValue>> &details_fields = ::OpenAPI::OptionalParam<QList<QJsonValue>>(), const ::OpenAPI::OptionalParam<QString> &details_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expiration_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QJsonValue> &hidden_details = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchChallenge(const QString &service_sid, const QString &identity, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  factor_sid QString [optional]
    * @param[in]  status OAIChallenge_enum_challenge_statuses [optional]
    * @param[in]  order OAIChallenge_enum_list_orders [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listChallenge(const QString &service_sid, const QString &identity, const ::OpenAPI::OptionalParam<QString> &factor_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChallenge_enum_challenge_statuses> &status = ::OpenAPI::OptionalParam<OAIChallenge_enum_challenge_statuses>(), const ::OpenAPI::OptionalParam<OAIChallenge_enum_list_orders> &order = ::OpenAPI::OptionalParam<OAIChallenge_enum_list_orders>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  auth_payload QString [optional]
    * @param[in]  metadata QJsonValue [optional]
    */
    virtual void updateChallenge(const QString &service_sid, const QString &identity, const QString &sid, const ::OpenAPI::OptionalParam<QString> &auth_payload = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QJsonValue> &metadata = ::OpenAPI::OptionalParam<QJsonValue>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createChallengeCallback(OAIHttpRequestWorker *worker);
    void fetchChallengeCallback(OAIHttpRequestWorker *worker);
    void listChallengeCallback(OAIHttpRequestWorker *worker);
    void updateChallengeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createChallengeSignal(OAIVerify_v2_service_entity_challenge summary);
    void fetchChallengeSignal(OAIVerify_v2_service_entity_challenge summary);
    void listChallengeSignal(OAIListChallengeResponse summary);
    void updateChallengeSignal(OAIVerify_v2_service_entity_challenge summary);


    void createChallengeSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_entity_challenge summary);
    void fetchChallengeSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_entity_challenge summary);
    void listChallengeSignalFull(OAIHttpRequestWorker *worker, OAIListChallengeResponse summary);
    void updateChallengeSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_entity_challenge summary);

    Q_DECL_DEPRECATED_X("Use createChallengeSignalError() instead")
    void createChallengeSignalE(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChallengeSignalError(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchChallengeSignalError() instead")
    void fetchChallengeSignalE(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchChallengeSignalError(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChallengeSignalError() instead")
    void listChallengeSignalE(OAIListChallengeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChallengeSignalError(OAIListChallengeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChallengeSignalError() instead")
    void updateChallengeSignalE(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChallengeSignalError(OAIVerify_v2_service_entity_challenge summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createChallengeSignalErrorFull() instead")
    void createChallengeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChallengeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchChallengeSignalErrorFull() instead")
    void fetchChallengeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchChallengeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChallengeSignalErrorFull() instead")
    void listChallengeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChallengeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChallengeSignalErrorFull() instead")
    void updateChallengeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChallengeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
