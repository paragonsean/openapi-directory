/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2VerificationApi_H
#define OAI_OAIVerifyV2VerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVerification_enum_risk_check.h"
#include "OAIVerification_enum_status.h"
#include "OAIVerify_v2_service_verification.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2VerificationApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2VerificationApi(const int timeOut = 0);
    ~OAIVerifyV2VerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  to QString [required]
    * @param[in]  amount QString [optional]
    * @param[in]  app_hash QString [optional]
    * @param[in]  channel_configuration QJsonValue [optional]
    * @param[in]  custom_code QString [optional]
    * @param[in]  custom_friendly_name QString [optional]
    * @param[in]  custom_message QString [optional]
    * @param[in]  device_ip QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  payee QString [optional]
    * @param[in]  rate_limits QJsonValue [optional]
    * @param[in]  risk_check OAIVerification_enum_risk_check [optional]
    * @param[in]  send_digits QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  template_custom_substitutions QString [optional]
    * @param[in]  template_sid QString [optional]
    */
    virtual void createVerification(const QString &service_sid, const QString &channel, const QString &to, const ::OpenAPI::OptionalParam<QString> &amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QJsonValue> &channel_configuration = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &custom_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QJsonValue> &rate_limits = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<OAIVerification_enum_risk_check> &risk_check = ::OpenAPI::OptionalParam<OAIVerification_enum_risk_check>(), const ::OpenAPI::OptionalParam<QString> &send_digits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_custom_substitutions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchVerification(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  status OAIVerification_enum_status [required]
    */
    virtual void updateVerification(const QString &service_sid, const QString &sid, const OAIVerification_enum_status &status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVerificationCallback(OAIHttpRequestWorker *worker);
    void fetchVerificationCallback(OAIHttpRequestWorker *worker);
    void updateVerificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVerificationSignal(OAIVerify_v2_service_verification summary);
    void fetchVerificationSignal(OAIVerify_v2_service_verification summary);
    void updateVerificationSignal(OAIVerify_v2_service_verification summary);


    void createVerificationSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_verification summary);
    void fetchVerificationSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_verification summary);
    void updateVerificationSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_verification summary);

    Q_DECL_DEPRECATED_X("Use createVerificationSignalError() instead")
    void createVerificationSignalE(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVerificationSignalError(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVerificationSignalError() instead")
    void fetchVerificationSignalE(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVerificationSignalError(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVerificationSignalError() instead")
    void updateVerificationSignalE(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVerificationSignalError(OAIVerify_v2_service_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVerificationSignalErrorFull() instead")
    void createVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVerificationSignalErrorFull() instead")
    void fetchVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVerificationSignalErrorFull() instead")
    void updateVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
