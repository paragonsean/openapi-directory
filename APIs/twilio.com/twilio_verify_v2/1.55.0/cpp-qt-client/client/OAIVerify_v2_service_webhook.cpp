/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_webhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_webhook::OAIVerify_v2_service_webhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_webhook::OAIVerify_v2_service_webhook() {
    this->initializeModel();
}

OAIVerify_v2_service_webhook::~OAIVerify_v2_service_webhook() {}

void OAIVerify_v2_service_webhook::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_webhook_method_isSet = false;
    m_webhook_method_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIVerify_v2_service_webhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_webhook::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("event_types")]);
    m_event_types_isSet = !json[QString("event_types")].isNull() && m_event_types_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_webhook_method_isValid = ::OpenAPI::fromJsonValue(m_webhook_method, json[QString("webhook_method")]);
    m_webhook_method_isSet = !json[QString("webhook_method")].isNull() && m_webhook_method_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIVerify_v2_service_webhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_webhook::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_event_types.size() > 0) {
        obj.insert(QString("event_types"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_webhook_method.isSet()) {
        obj.insert(QString("webhook_method"), ::OpenAPI::toJsonValue(m_webhook_method));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

QString OAIVerify_v2_service_webhook::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_webhook::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_webhook::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIVerify_v2_service_webhook::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_webhook::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_webhook::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service_webhook::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service_webhook::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service_webhook::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QList<QString> OAIVerify_v2_service_webhook::getEventTypes() const {
    return m_event_types;
}
void OAIVerify_v2_service_webhook::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAIVerify_v2_service_webhook::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAIVerify_v2_service_webhook::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVerify_v2_service_webhook::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVerify_v2_service_webhook::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIVerify_v2_service_webhook::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_webhook::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_webhook::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_webhook::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service_webhook::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service_webhook::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIWebhook_enum_status OAIVerify_v2_service_webhook::getStatus() const {
    return m_status;
}
void OAIVerify_v2_service_webhook::setStatus(const OAIWebhook_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVerify_v2_service_webhook::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVerify_v2_service_webhook::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service_webhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service_webhook::is_url_Valid() const{
    return m_url_isValid;
}

OAIWebhook_enum_version OAIVerify_v2_service_webhook::getVersion() const {
    return m_version;
}
void OAIVerify_v2_service_webhook::setVersion(const OAIWebhook_enum_version &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVerify_v2_service_webhook::is_version_Valid() const{
    return m_version_isValid;
}

OAIWebhook_enum_methods OAIVerify_v2_service_webhook::getWebhookMethod() const {
    return m_webhook_method;
}
void OAIVerify_v2_service_webhook::setWebhookMethod(const OAIWebhook_enum_methods &webhook_method) {
    m_webhook_method = webhook_method;
    m_webhook_method_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_webhook_method_Set() const{
    return m_webhook_method_isSet;
}

bool OAIVerify_v2_service_webhook::is_webhook_method_Valid() const{
    return m_webhook_method_isValid;
}

QString OAIVerify_v2_service_webhook::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIVerify_v2_service_webhook::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIVerify_v2_service_webhook::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIVerify_v2_service_webhook::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIVerify_v2_service_webhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_webhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
