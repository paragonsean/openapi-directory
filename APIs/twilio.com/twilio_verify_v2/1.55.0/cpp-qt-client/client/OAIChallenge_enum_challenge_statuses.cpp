/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChallenge_enum_challenge_statuses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChallenge_enum_challenge_statuses::OAIChallenge_enum_challenge_statuses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChallenge_enum_challenge_statuses::OAIChallenge_enum_challenge_statuses() {
    this->initializeModel();
}

OAIChallenge_enum_challenge_statuses::~OAIChallenge_enum_challenge_statuses() {}

void OAIChallenge_enum_challenge_statuses::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChallenge_enum_challenge_statuses::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChallenge_enum_challenge_statuses::fromJson(QString jsonString) {
    
    if ( jsonString.compare("pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChallenge_enum_challenge_statuses::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChallenge_enum_challenge_statuses::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChallenge_enum_challenge_statuses::APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("denied", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChallenge_enum_challenge_statuses::DENIED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChallenge_enum_challenge_statuses::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChallenge_enum_challenge_statuses::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChallenge_enum_challenge_statuses::PENDING:
            val = "pending";
            break;
        case eOAIChallenge_enum_challenge_statuses::EXPIRED:
            val = "expired";
            break;
        case eOAIChallenge_enum_challenge_statuses::APPROVED:
            val = "approved";
            break;
        case eOAIChallenge_enum_challenge_statuses::DENIED:
            val = "denied";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChallenge_enum_challenge_statuses::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChallenge_enum_challenge_statuses::eOAIChallenge_enum_challenge_statuses OAIChallenge_enum_challenge_statuses::getValue() const {
    return m_value;
}

void OAIChallenge_enum_challenge_statuses::setValue(const OAIChallenge_enum_challenge_statuses::eOAIChallenge_enum_challenge_statuses& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChallenge_enum_challenge_statuses::isSet() const {
    
    return m_value_isSet;
}

bool OAIChallenge_enum_challenge_statuses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
