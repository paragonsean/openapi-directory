/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_entity_challenge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_entity_challenge::OAIVerify_v2_service_entity_challenge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_entity_challenge::OAIVerify_v2_service_entity_challenge() {
    this->initializeModel();
}

OAIVerify_v2_service_entity_challenge::~OAIVerify_v2_service_entity_challenge() {}

void OAIVerify_v2_service_entity_challenge::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_responded_isSet = false;
    m_date_responded_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_entity_sid_isSet = false;
    m_entity_sid_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_factor_sid_isSet = false;
    m_factor_sid_isValid = false;

    m_factor_type_isSet = false;
    m_factor_type_isValid = false;

    m_hidden_details_isSet = false;
    m_hidden_details_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_responded_reason_isSet = false;
    m_responded_reason_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVerify_v2_service_entity_challenge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_entity_challenge::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_responded_isValid = ::OpenAPI::fromJsonValue(m_date_responded, json[QString("date_responded")]);
    m_date_responded_isSet = !json[QString("date_responded")].isNull() && m_date_responded_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_entity_sid_isValid = ::OpenAPI::fromJsonValue(m_entity_sid, json[QString("entity_sid")]);
    m_entity_sid_isSet = !json[QString("entity_sid")].isNull() && m_entity_sid_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_factor_sid_isValid = ::OpenAPI::fromJsonValue(m_factor_sid, json[QString("factor_sid")]);
    m_factor_sid_isSet = !json[QString("factor_sid")].isNull() && m_factor_sid_isValid;

    m_factor_type_isValid = ::OpenAPI::fromJsonValue(m_factor_type, json[QString("factor_type")]);
    m_factor_type_isSet = !json[QString("factor_type")].isNull() && m_factor_type_isValid;

    m_hidden_details_isValid = ::OpenAPI::fromJsonValue(m_hidden_details, json[QString("hidden_details")]);
    m_hidden_details_isSet = !json[QString("hidden_details")].isNull() && m_hidden_details_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_responded_reason_isValid = ::OpenAPI::fromJsonValue(m_responded_reason, json[QString("responded_reason")]);
    m_responded_reason_isSet = !json[QString("responded_reason")].isNull() && m_responded_reason_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVerify_v2_service_entity_challenge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_entity_challenge::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_responded_isSet) {
        obj.insert(QString("date_responded"), ::OpenAPI::toJsonValue(m_date_responded));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_entity_sid_isSet) {
        obj.insert(QString("entity_sid"), ::OpenAPI::toJsonValue(m_entity_sid));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_factor_sid_isSet) {
        obj.insert(QString("factor_sid"), ::OpenAPI::toJsonValue(m_factor_sid));
    }
    if (m_factor_type.isSet()) {
        obj.insert(QString("factor_type"), ::OpenAPI::toJsonValue(m_factor_type));
    }
    if (m_hidden_details_isSet) {
        obj.insert(QString("hidden_details"), ::OpenAPI::toJsonValue(m_hidden_details));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_responded_reason.isSet()) {
        obj.insert(QString("responded_reason"), ::OpenAPI::toJsonValue(m_responded_reason));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVerify_v2_service_entity_challenge::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_entity_challenge::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIVerify_v2_service_entity_challenge::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_entity_challenge::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVerify_v2_service_entity_challenge::getDateResponded() const {
    return m_date_responded;
}
void OAIVerify_v2_service_entity_challenge::setDateResponded(const QDateTime &date_responded) {
    m_date_responded = date_responded;
    m_date_responded_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_date_responded_Set() const{
    return m_date_responded_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_date_responded_Valid() const{
    return m_date_responded_isValid;
}

QDateTime OAIVerify_v2_service_entity_challenge::getDateUpdated() const {
    return m_date_updated;
}
void OAIVerify_v2_service_entity_challenge::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QJsonValue OAIVerify_v2_service_entity_challenge::getDetails() const {
    return m_details;
}
void OAIVerify_v2_service_entity_challenge::setDetails(const QJsonValue &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_details_Set() const{
    return m_details_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getEntitySid() const {
    return m_entity_sid;
}
void OAIVerify_v2_service_entity_challenge::setEntitySid(const QString &entity_sid) {
    m_entity_sid = entity_sid;
    m_entity_sid_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_entity_sid_Set() const{
    return m_entity_sid_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_entity_sid_Valid() const{
    return m_entity_sid_isValid;
}

QDateTime OAIVerify_v2_service_entity_challenge::getExpirationDate() const {
    return m_expiration_date;
}
void OAIVerify_v2_service_entity_challenge::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getFactorSid() const {
    return m_factor_sid;
}
void OAIVerify_v2_service_entity_challenge::setFactorSid(const QString &factor_sid) {
    m_factor_sid = factor_sid;
    m_factor_sid_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_factor_sid_Set() const{
    return m_factor_sid_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_factor_sid_Valid() const{
    return m_factor_sid_isValid;
}

OAIChallenge_enum_factor_types OAIVerify_v2_service_entity_challenge::getFactorType() const {
    return m_factor_type;
}
void OAIVerify_v2_service_entity_challenge::setFactorType(const OAIChallenge_enum_factor_types &factor_type) {
    m_factor_type = factor_type;
    m_factor_type_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_factor_type_Set() const{
    return m_factor_type_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_factor_type_Valid() const{
    return m_factor_type_isValid;
}

QJsonValue OAIVerify_v2_service_entity_challenge::getHiddenDetails() const {
    return m_hidden_details;
}
void OAIVerify_v2_service_entity_challenge::setHiddenDetails(const QJsonValue &hidden_details) {
    m_hidden_details = hidden_details;
    m_hidden_details_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_hidden_details_Set() const{
    return m_hidden_details_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_hidden_details_Valid() const{
    return m_hidden_details_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getIdentity() const {
    return m_identity;
}
void OAIVerify_v2_service_entity_challenge::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIObject OAIVerify_v2_service_entity_challenge::getLinks() const {
    return m_links;
}
void OAIVerify_v2_service_entity_challenge::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_links_Valid() const{
    return m_links_isValid;
}

QJsonValue OAIVerify_v2_service_entity_challenge::getMetadata() const {
    return m_metadata;
}
void OAIVerify_v2_service_entity_challenge::setMetadata(const QJsonValue &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIChallenge_enum_challenge_reasons OAIVerify_v2_service_entity_challenge::getRespondedReason() const {
    return m_responded_reason;
}
void OAIVerify_v2_service_entity_challenge::setRespondedReason(const OAIChallenge_enum_challenge_reasons &responded_reason) {
    m_responded_reason = responded_reason;
    m_responded_reason_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_responded_reason_Set() const{
    return m_responded_reason_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_responded_reason_Valid() const{
    return m_responded_reason_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_entity_challenge::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service_entity_challenge::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIChallenge_enum_challenge_statuses OAIVerify_v2_service_entity_challenge::getStatus() const {
    return m_status;
}
void OAIVerify_v2_service_entity_challenge::setStatus(const OAIChallenge_enum_challenge_statuses &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVerify_v2_service_entity_challenge::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service_entity_challenge::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service_entity_challenge::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service_entity_challenge::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_service_entity_challenge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_responded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factor_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factor_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responded_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_entity_challenge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
