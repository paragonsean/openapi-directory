/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2NewFactorApi_H
#define OAI_OAIVerifyV2NewFactorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINew_factor_enum_factor_types.h"
#include "OAINew_factor_enum_notification_platforms.h"
#include "OAINew_factor_enum_totp_algorithms.h"
#include "OAIVerify_v2_service_entity_new_factor.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2NewFactorApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2NewFactorApi(const int timeOut = 0);
    ~OAIVerifyV2NewFactorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  factor_type OAINew_factor_enum_factor_types [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  binding_alg QString [optional]
    * @param[in]  binding_public_key QString [optional]
    * @param[in]  binding_secret QString [optional]
    * @param[in]  config_alg OAINew_factor_enum_totp_algorithms [optional]
    * @param[in]  config_app_id QString [optional]
    * @param[in]  config_code_length qint32 [optional]
    * @param[in]  config_notification_platform OAINew_factor_enum_notification_platforms [optional]
    * @param[in]  config_notification_token QString [optional]
    * @param[in]  config_sdk_version QString [optional]
    * @param[in]  config_skew qint32 [optional]
    * @param[in]  config_time_step qint32 [optional]
    * @param[in]  metadata QJsonValue [optional]
    */
    virtual void createNewFactor(const QString &service_sid, const QString &identity, const OAINew_factor_enum_factor_types &factor_type, const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &binding_alg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &binding_public_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &binding_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINew_factor_enum_totp_algorithms> &config_alg = ::OpenAPI::OptionalParam<OAINew_factor_enum_totp_algorithms>(), const ::OpenAPI::OptionalParam<QString> &config_app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &config_code_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAINew_factor_enum_notification_platforms> &config_notification_platform = ::OpenAPI::OptionalParam<OAINew_factor_enum_notification_platforms>(), const ::OpenAPI::OptionalParam<QString> &config_notification_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &config_sdk_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &config_skew = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &config_time_step = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QJsonValue> &metadata = ::OpenAPI::OptionalParam<QJsonValue>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNewFactorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNewFactorSignal(OAIVerify_v2_service_entity_new_factor summary);


    void createNewFactorSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_entity_new_factor summary);

    Q_DECL_DEPRECATED_X("Use createNewFactorSignalError() instead")
    void createNewFactorSignalE(OAIVerify_v2_service_entity_new_factor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewFactorSignalError(OAIVerify_v2_service_entity_new_factor summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNewFactorSignalErrorFull() instead")
    void createNewFactorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewFactorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
