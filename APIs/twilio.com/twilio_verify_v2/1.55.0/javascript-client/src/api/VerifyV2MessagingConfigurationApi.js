/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMessagingConfigurationResponse from '../model/ListMessagingConfigurationResponse';
import VerifyV2ServiceMessagingConfiguration from '../model/VerifyV2ServiceMessagingConfiguration';

/**
* VerifyV2MessagingConfiguration service.
* @module api/VerifyV2MessagingConfigurationApi
* @version 1.55.0
*/
export default class VerifyV2MessagingConfigurationApi {

    /**
    * Constructs a new VerifyV2MessagingConfigurationApi. 
    * @alias module:api/VerifyV2MessagingConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessagingConfiguration operation.
     * @callback module:api/VerifyV2MessagingConfigurationApi~createMessagingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceMessagingConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new MessagingConfiguration for a service.
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
     * @param {String} country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to be used to send SMS to the country of this configuration.
     * @param {module:api/VerifyV2MessagingConfigurationApi~createMessagingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceMessagingConfiguration}
     */
    createMessagingConfiguration(serviceSid, country, messagingServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createMessagingConfiguration");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling createMessagingConfiguration");
      }
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling createMessagingConfiguration");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Country': country,
        'MessagingServiceSid': messagingServiceSid
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceMessagingConfiguration;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/MessagingConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessagingConfiguration operation.
     * @callback module:api/VerifyV2MessagingConfigurationApi~deleteMessagingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific MessagingConfiguration.
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
     * @param {String} country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
     * @param {module:api/VerifyV2MessagingConfigurationApi~deleteMessagingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessagingConfiguration(serviceSid, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteMessagingConfiguration");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling deleteMessagingConfiguration");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMessagingConfiguration operation.
     * @callback module:api/VerifyV2MessagingConfigurationApi~fetchMessagingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceMessagingConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific MessagingConfiguration.
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
     * @param {String} country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
     * @param {module:api/VerifyV2MessagingConfigurationApi~fetchMessagingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceMessagingConfiguration}
     */
    fetchMessagingConfiguration(serviceSid, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchMessagingConfiguration");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling fetchMessagingConfiguration");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceMessagingConfiguration;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessagingConfiguration operation.
     * @callback module:api/VerifyV2MessagingConfigurationApi~listMessagingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessagingConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Messaging Configurations for a Service.
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VerifyV2MessagingConfigurationApi~listMessagingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessagingConfigurationResponse}
     */
    listMessagingConfiguration(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listMessagingConfiguration");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessagingConfigurationResponse;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/MessagingConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessagingConfiguration operation.
     * @callback module:api/VerifyV2MessagingConfigurationApi~updateMessagingConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceMessagingConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific MessagingConfiguration
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
     * @param {String} country The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to be used to send SMS to the country of this configuration.
     * @param {module:api/VerifyV2MessagingConfigurationApi~updateMessagingConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceMessagingConfiguration}
     */
    updateMessagingConfiguration(serviceSid, country, messagingServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateMessagingConfiguration");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling updateMessagingConfiguration");
      }
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling updateMessagingConfiguration");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Country': country
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'MessagingServiceSid': messagingServiceSid
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceMessagingConfiguration;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
