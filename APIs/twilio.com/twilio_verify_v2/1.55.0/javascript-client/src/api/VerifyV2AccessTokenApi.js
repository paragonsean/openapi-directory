/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessTokenEnumFactorTypes from '../model/AccessTokenEnumFactorTypes';
import VerifyV2ServiceAccessToken from '../model/VerifyV2ServiceAccessToken';

/**
* VerifyV2AccessToken service.
* @module api/VerifyV2AccessTokenApi
* @version 1.55.0
*/
export default class VerifyV2AccessTokenApi {

    /**
    * Constructs a new VerifyV2AccessTokenApi. 
    * @alias module:api/VerifyV2AccessTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccessToken operation.
     * @callback module:api/VerifyV2AccessTokenApi~createAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceAccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new enrollment Access Token for the Entity
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {module:model/AccessTokenEnumFactorTypes} factorType 
     * @param {String} identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
     * @param {Object} opts Optional parameters
     * @param {String} [factorFriendlyName] The friendly name of the factor that is going to be created with this access token
     * @param {Number} [ttl] How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60.
     * @param {module:api/VerifyV2AccessTokenApi~createAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceAccessToken}
     */
    createAccessToken(serviceSid, factorType, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createAccessToken");
      }
      // verify the required parameter 'factorType' is set
      if (factorType === undefined || factorType === null) {
        throw new Error("Missing the required parameter 'factorType' when calling createAccessToken");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createAccessToken");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'FactorFriendlyName': opts['factorFriendlyName'],
        'FactorType': factorType,
        'Identity': identity,
        'Ttl': opts['ttl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceAccessToken;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/AccessTokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchAccessToken operation.
     * @callback module:api/VerifyV2AccessTokenApi~fetchAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceAccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an Access Token for the Entity
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} sid A 34 character string that uniquely identifies this Access Token.
     * @param {module:api/VerifyV2AccessTokenApi~fetchAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceAccessToken}
     */
    fetchAccessToken(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchAccessToken");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchAccessToken");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceAccessToken;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/AccessTokens/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
