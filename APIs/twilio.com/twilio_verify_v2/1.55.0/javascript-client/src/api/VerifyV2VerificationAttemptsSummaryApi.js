/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VerificationAttemptsSummaryEnumChannels from '../model/VerificationAttemptsSummaryEnumChannels';
import VerifyV2VerificationAttemptsSummary from '../model/VerifyV2VerificationAttemptsSummary';

/**
* VerifyV2VerificationAttemptsSummary service.
* @module api/VerifyV2VerificationAttemptsSummaryApi
* @version 1.55.0
*/
export default class VerifyV2VerificationAttemptsSummaryApi {

    /**
    * Constructs a new VerifyV2VerificationAttemptsSummaryApi. 
    * @alias module:api/VerifyV2VerificationAttemptsSummaryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchVerificationAttemptsSummary operation.
     * @callback module:api/VerifyV2VerificationAttemptsSummaryApi~fetchVerificationAttemptsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2VerificationAttemptsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of how many attempts were made and how many were converted.
     * @param {Object} opts Optional parameters
     * @param {String} [verifyServiceSid] Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
     * @param {Date} [dateCreatedAfter] Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
     * @param {Date} [dateCreatedBefore] Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
     * @param {String} [country] Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
     * @param {module:model/VerificationAttemptsSummaryEnumChannels} [channel] Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are `SMS`, `CALL` and `WHATSAPP`
     * @param {String} [destinationPrefix] Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.
     * @param {module:api/VerifyV2VerificationAttemptsSummaryApi~fetchVerificationAttemptsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2VerificationAttemptsSummary}
     */
    fetchVerificationAttemptsSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'VerifyServiceSid': opts['verifyServiceSid'],
        'DateCreatedAfter': opts['dateCreatedAfter'],
        'DateCreatedBefore': opts['dateCreatedBefore'],
        'Country': opts['country'],
        'Channel': opts['channel'],
        'DestinationPrefix': opts['destinationPrefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2VerificationAttemptsSummary;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Attempts/Summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
