/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChallengeEnumChallengeStatuses from '../model/ChallengeEnumChallengeStatuses';
import ChallengeEnumListOrders from '../model/ChallengeEnumListOrders';
import ListChallengeResponse from '../model/ListChallengeResponse';
import VerifyV2ServiceEntityChallenge from '../model/VerifyV2ServiceEntityChallenge';

/**
* VerifyV2Challenge service.
* @module api/VerifyV2ChallengeApi
* @version 1.55.0
*/
export default class VerifyV2ChallengeApi {

    /**
    * Constructs a new VerifyV2ChallengeApi. 
    * @alias module:api/VerifyV2ChallengeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChallenge operation.
     * @callback module:api/VerifyV2ChallengeApi~createChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityChallenge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Challenge for the Factor
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} factorSid The unique SID identifier of the Factor.
     * @param {Object} opts Optional parameters
     * @param {String} [authPayload] Optional payload used to verify the Challenge upon creation. Only used with a Factor of type `totp` to carry the TOTP code that needs to be verified. For `TOTP` this value must be between 3 and 8 characters long.
     * @param {Array.<Object>} [detailsFields] A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when `factor_type` is `push`. There can be up to 20 details fields.
     * @param {String} [detailsMessage] Shown to the user when the push notification arrives. Required when `factor_type` is `push`. Can be up to 256 characters in length
     * @param {Date} [expirationDate] The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.
     * @param {Object} [hiddenDetails] Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. `{\\\"ip\\\": \\\"172.168.1.234\\\"}`. Can be up to 1024 characters in length
     * @param {module:api/VerifyV2ChallengeApi~createChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityChallenge}
     */
    createChallenge(serviceSid, identity, factorSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createChallenge");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createChallenge");
      }
      // verify the required parameter 'factorSid' is set
      if (factorSid === undefined || factorSid === null) {
        throw new Error("Missing the required parameter 'factorSid' when calling createChallenge");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AuthPayload': opts['authPayload'],
        'Details.Fields': this.apiClient.buildCollectionParam(opts['detailsFields'], 'csv'),
        'Details.Message': opts['detailsMessage'],
        'ExpirationDate': opts['expirationDate'],
        'FactorSid': factorSid,
        'HiddenDetails': opts['hiddenDetails']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityChallenge;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchChallenge operation.
     * @callback module:api/VerifyV2ChallengeApi~fetchChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityChallenge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Challenge.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} sid A 34 character string that uniquely identifies this Challenge.
     * @param {module:api/VerifyV2ChallengeApi~fetchChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityChallenge}
     */
    fetchChallenge(serviceSid, identity, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchChallenge");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling fetchChallenge");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchChallenge");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityChallenge;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listChallenge operation.
     * @callback module:api/VerifyV2ChallengeApi~listChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChallengeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Challenges for a Factor.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {Object} opts Optional parameters
     * @param {String} [factorSid] The unique SID identifier of the Factor.
     * @param {module:model/ChallengeEnumChallengeStatuses} [status] The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
     * @param {module:model/ChallengeEnumListOrders} [order] The desired sort order of the Challenges list. One of `asc` or `desc` for ascending and descending respectively. Defaults to `asc`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VerifyV2ChallengeApi~listChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChallengeResponse}
     */
    listChallenge(serviceSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listChallenge");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling listChallenge");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
        'FactorSid': opts['factorSid'],
        'Status': opts['status'],
        'Order': opts['order'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChallengeResponse;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallenge operation.
     * @callback module:api/VerifyV2ChallengeApi~updateChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityChallenge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a specific Challenge.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} sid A 34 character string that uniquely identifies this Challenge.
     * @param {Object} opts Optional parameters
     * @param {String} [authPayload] The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For `TOTP` this value must be between 3 and 8 characters long. For `Push` this value can be up to 5456 characters in length
     * @param {Object} [metadata] Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\\\"os\\\": \\\"Android\\\"}`. Can be up to 1024 characters in length.
     * @param {module:api/VerifyV2ChallengeApi~updateChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityChallenge}
     */
    updateChallenge(serviceSid, identity, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateChallenge");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling updateChallenge");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateChallenge");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AuthPayload': opts['authPayload'],
        'Metadata': opts['metadata']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityChallenge;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
