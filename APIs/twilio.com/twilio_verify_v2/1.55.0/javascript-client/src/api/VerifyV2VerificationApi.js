/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VerificationEnumRiskCheck from '../model/VerificationEnumRiskCheck';
import VerificationEnumStatus from '../model/VerificationEnumStatus';
import VerifyV2ServiceVerification from '../model/VerifyV2ServiceVerification';

/**
* VerifyV2Verification service.
* @module api/VerifyV2VerificationApi
* @version 1.55.0
*/
export default class VerifyV2VerificationApi {

    /**
    * Constructs a new VerifyV2VerificationApi. 
    * @alias module:api/VerifyV2VerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVerification operation.
     * @callback module:api/VerifyV2VerificationApi~createVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Verification using a Service
     * @param {String} serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under.
     * @param {String} channel The verification method to use. One of: [`email`](https://www.twilio.com/docs/verify/email), `sms`, `whatsapp`, `call`, `sna` or `auto`.
     * @param {String} to The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
     * @param {Object} opts Optional parameters
     * @param {String} [amount] The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
     * @param {String} [appHash] Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: `<#> Your AppName verification code is: 1234 He42w354ol9`.
     * @param {Object} [channelConfiguration] [`email`](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields 'from' and 'from_name' are optional but if included the 'from' field must have a valid email address.
     * @param {String} [customCode] A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive.
     * @param {String} [customFriendlyName] A custom user defined friendly name that overwrites the existing one in the verification message
     * @param {String} [customMessage] The text of a custom message to use for the verification.
     * @param {String} [deviceIp] Strongly encouraged if using the auto channel. The IP address of the client's device. If provided, it has to be a valid IPv4 or IPv6 address.
     * @param {String} [locale] Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages).
     * @param {String} [payee] The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
     * @param {Object} [rateLimits] The custom key-value pairs of Programmable Rate Limits. Keys correspond to `unique_name` fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request.
     * @param {module:model/VerificationEnumRiskCheck} [riskCheck] 
     * @param {String} [sendDigits] The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits).
     * @param {String} [tags] A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length.
     * @param {String} [templateCustomSubstitutions] A stringified JSON object in which the keys are the template's special variables and the values are the variables substitutions.
     * @param {String} [templateSid] The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only.
     * @param {module:api/VerifyV2VerificationApi~createVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceVerification}
     */
    createVerification(serviceSid, channel, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createVerification");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling createVerification");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createVerification");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Amount': opts['amount'],
        'AppHash': opts['appHash'],
        'Channel': channel,
        'ChannelConfiguration': opts['channelConfiguration'],
        'CustomCode': opts['customCode'],
        'CustomFriendlyName': opts['customFriendlyName'],
        'CustomMessage': opts['customMessage'],
        'DeviceIp': opts['deviceIp'],
        'Locale': opts['locale'],
        'Payee': opts['payee'],
        'RateLimits': opts['rateLimits'],
        'RiskCheck': opts['riskCheck'],
        'SendDigits': opts['sendDigits'],
        'Tags': opts['tags'],
        'TemplateCustomSubstitutions': opts['templateCustomSubstitutions'],
        'TemplateSid': opts['templateSid'],
        'To': to
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceVerification;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchVerification operation.
     * @callback module:api/VerifyV2VerificationApi~fetchVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Verification
     * @param {String} serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Verification resource to fetch.
     * @param {module:api/VerifyV2VerificationApi~fetchVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceVerification}
     */
    fetchVerification(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchVerification");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchVerification");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceVerification;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Verifications/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVerification operation.
     * @callback module:api/VerifyV2VerificationApi~updateVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Verification status
     * @param {String} serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Verification resource to update.
     * @param {module:model/VerificationEnumStatus} status 
     * @param {module:api/VerifyV2VerificationApi~updateVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceVerification}
     */
    updateVerification(serviceSid, sid, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateVerification");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateVerification");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateVerification");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Status': status
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceVerification;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Verifications/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
