/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListWebhookResponse from '../model/ListWebhookResponse';
import VerifyV2ServiceWebhook from '../model/VerifyV2ServiceWebhook';
import WebhookEnumStatus from '../model/WebhookEnumStatus';
import WebhookEnumVersion from '../model/WebhookEnumVersion';

/**
* VerifyV2Webhook service.
* @module api/VerifyV2WebhookApi
* @version 1.55.0
*/
export default class VerifyV2WebhookApi {

    /**
    * Constructs a new VerifyV2WebhookApi. 
    * @alias module:api/VerifyV2WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/VerifyV2WebhookApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Webhook for the Service
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {Array.<String>} eventTypes The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
     * @param {String} friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.**
     * @param {String} webhookUrl The URL associated with this Webhook.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEnumStatus} [status] 
     * @param {module:model/WebhookEnumVersion} [version] 
     * @param {module:api/VerifyV2WebhookApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceWebhook}
     */
    createWebhook(serviceSid, eventTypes, friendlyName, webhookUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createWebhook");
      }
      // verify the required parameter 'eventTypes' is set
      if (eventTypes === undefined || eventTypes === null) {
        throw new Error("Missing the required parameter 'eventTypes' when calling createWebhook");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createWebhook");
      }
      // verify the required parameter 'webhookUrl' is set
      if (webhookUrl === undefined || webhookUrl === null) {
        throw new Error("Missing the required parameter 'webhookUrl' when calling createWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'EventTypes': this.apiClient.buildCollectionParam(eventTypes, 'csv'),
        'FriendlyName': friendlyName,
        'Status': opts['status'],
        'Version': opts['version'],
        'WebhookUrl': webhookUrl
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceWebhook;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhook operation.
     * @callback module:api/VerifyV2WebhookApi~deleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Webhook.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to delete.
     * @param {module:api/VerifyV2WebhookApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhook(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Webhooks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchWebhook operation.
     * @callback module:api/VerifyV2WebhookApi~fetchWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Webhook.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
     * @param {module:api/VerifyV2WebhookApi~fetchWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceWebhook}
     */
    fetchWebhook(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceWebhook;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Webhooks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWebhook operation.
     * @callback module:api/VerifyV2WebhookApi~listWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Webhooks for a Service.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VerifyV2WebhookApi~listWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWebhookResponse}
     */
    listWebhook(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWebhookResponse;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/VerifyV2WebhookApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to update.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [eventTypes] The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
     * @param {String} [friendlyName] The string that you assigned to describe the webhook. **This value should not contain PII.**
     * @param {module:model/WebhookEnumStatus} [status] 
     * @param {module:model/WebhookEnumVersion} [version] 
     * @param {String} [webhookUrl] The URL associated with this Webhook.
     * @param {module:api/VerifyV2WebhookApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceWebhook}
     */
    updateWebhook(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'EventTypes': this.apiClient.buildCollectionParam(opts['eventTypes'], 'csv'),
        'FriendlyName': opts['friendlyName'],
        'Status': opts['status'],
        'Version': opts['version'],
        'WebhookUrl': opts['webhookUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceWebhook;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Webhooks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
