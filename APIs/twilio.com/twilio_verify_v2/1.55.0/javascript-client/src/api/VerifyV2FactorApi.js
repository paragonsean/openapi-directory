/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FactorEnumTotpAlgorithms from '../model/FactorEnumTotpAlgorithms';
import ListFactorResponse from '../model/ListFactorResponse';
import VerifyV2ServiceEntityFactor from '../model/VerifyV2ServiceEntityFactor';

/**
* VerifyV2Factor service.
* @module api/VerifyV2FactorApi
* @version 1.55.0
*/
export default class VerifyV2FactorApi {

    /**
    * Constructs a new VerifyV2FactorApi. 
    * @alias module:api/VerifyV2FactorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFactor operation.
     * @callback module:api/VerifyV2FactorApi~deleteFactorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Factor.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} sid A 34 character string that uniquely identifies this Factor.
     * @param {module:api/VerifyV2FactorApi~deleteFactorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFactor(serviceSid, identity, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteFactor");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling deleteFactor");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteFactor");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchFactor operation.
     * @callback module:api/VerifyV2FactorApi~fetchFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityFactor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Factor.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} sid A 34 character string that uniquely identifies this Factor.
     * @param {module:api/VerifyV2FactorApi~fetchFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityFactor}
     */
    fetchFactor(serviceSid, identity, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchFactor");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling fetchFactor");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchFactor");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityFactor;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listFactor operation.
     * @callback module:api/VerifyV2FactorApi~listFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFactorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Factors for an Entity.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Factors. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VerifyV2FactorApi~listFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFactorResponse}
     */
    listFactor(serviceSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listFactor");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling listFactor");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFactorResponse;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFactor operation.
     * @callback module:api/VerifyV2FactorApi~updateFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityFactor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Factor. This endpoint can be used to Verify a Factor if passed an `AuthPayload` param.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} sid A 34 character string that uniquely identifies this Factor.
     * @param {Object} opts Optional parameters
     * @param {String} [authPayload] The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
     * @param {module:model/FactorEnumTotpAlgorithms} [configAlg] 
     * @param {Number} [configCodeLength] Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
     * @param {String} [configNotificationPlatform] The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.  Required when `factor_type` is `push`.
     * @param {String} [configNotificationToken] For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long.
     * @param {String} [configSdkVersion] The Verify Push SDK version used to configure the factor
     * @param {Number} [configSkew] The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
     * @param {Number} [configTimeStep] Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
     * @param {String} [friendlyName] The new friendly name of this Factor. It can be up to 64 characters.
     * @param {module:api/VerifyV2FactorApi~updateFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityFactor}
     */
    updateFactor(serviceSid, identity, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateFactor");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling updateFactor");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateFactor");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AuthPayload': opts['authPayload'],
        'Config.Alg': opts['configAlg'],
        'Config.CodeLength': opts['configCodeLength'],
        'Config.NotificationPlatform': opts['configNotificationPlatform'],
        'Config.NotificationToken': opts['configNotificationToken'],
        'Config.SdkVersion': opts['configSdkVersion'],
        'Config.Skew': opts['configSkew'],
        'Config.TimeStep': opts['configTimeStep'],
        'FriendlyName': opts['friendlyName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityFactor;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
