/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VerifyV2ServiceEntityChallengeNotification from '../model/VerifyV2ServiceEntityChallengeNotification';

/**
* VerifyV2Notification service.
* @module api/VerifyV2NotificationApi
* @version 1.55.0
*/
export default class VerifyV2NotificationApi {

    /**
    * Constructs a new VerifyV2NotificationApi. 
    * @alias module:api/VerifyV2NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNotification operation.
     * @callback module:api/VerifyV2NotificationApi~createNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityChallengeNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Notification for the corresponding Challenge
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {String} challengeSid The unique SID identifier of the Challenge.
     * @param {Object} opts Optional parameters
     * @param {Number} [ttl] How long, in seconds, the notification is valid. Can be an integer between 0 and 300. Default is 300. Delivery is attempted until the TTL elapses, even if the device is offline. 0 means that the notification delivery is attempted immediately, only once, and is not stored for future delivery.
     * @param {module:api/VerifyV2NotificationApi~createNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityChallengeNotification}
     */
    createNotification(serviceSid, identity, challengeSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createNotification");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createNotification");
      }
      // verify the required parameter 'challengeSid' is set
      if (challengeSid === undefined || challengeSid === null) {
        throw new Error("Missing the required parameter 'challengeSid' when calling createNotification");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity,
        'ChallengeSid': challengeSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Ttl': opts['ttl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityChallengeNotification;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
