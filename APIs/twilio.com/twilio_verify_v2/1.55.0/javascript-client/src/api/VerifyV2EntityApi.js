/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListEntityResponse from '../model/ListEntityResponse';
import VerifyV2ServiceEntity from '../model/VerifyV2ServiceEntity';

/**
* VerifyV2Entity service.
* @module api/VerifyV2EntityApi
* @version 1.55.0
*/
export default class VerifyV2EntityApi {

    /**
    * Constructs a new VerifyV2EntityApi. 
    * @alias module:api/VerifyV2EntityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEntity operation.
     * @callback module:api/VerifyV2EntityApi~createEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Entity for the Service
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {module:api/VerifyV2EntityApi~createEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntity}
     */
    createEntity(serviceSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createEntity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createEntity");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Identity': identity
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntity;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntity operation.
     * @callback module:api/VerifyV2EntityApi~deleteEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Entity.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {module:api/VerifyV2EntityApi~deleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntity(serviceSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteEntity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling deleteEntity");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchEntity operation.
     * @callback module:api/VerifyV2EntityApi~fetchEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Entity.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {module:api/VerifyV2EntityApi~fetchEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntity}
     */
    fetchEntity(serviceSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchEntity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling fetchEntity");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntity;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntity operation.
     * @callback module:api/VerifyV2EntityApi~listEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEntityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Entities for a Service.
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VerifyV2EntityApi~listEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEntityResponse}
     */
    listEntity(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listEntity");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEntityResponse;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
