/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewFactorEnumFactorTypes from '../model/NewFactorEnumFactorTypes';
import NewFactorEnumNotificationPlatforms from '../model/NewFactorEnumNotificationPlatforms';
import NewFactorEnumTotpAlgorithms from '../model/NewFactorEnumTotpAlgorithms';
import VerifyV2ServiceEntityNewFactor from '../model/VerifyV2ServiceEntityNewFactor';

/**
* VerifyV2NewFactor service.
* @module api/VerifyV2NewFactorApi
* @version 1.55.0
*/
export default class VerifyV2NewFactorApi {

    /**
    * Constructs a new VerifyV2NewFactorApi. 
    * @alias module:api/VerifyV2NewFactorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewFactor operation.
     * @callback module:api/VerifyV2NewFactorApi~createNewFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyV2ServiceEntityNewFactor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Factor for the Entity
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {String} identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * @param {module:model/NewFactorEnumFactorTypes} factorType 
     * @param {String} friendlyName The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For `factor_type` `push`, this could be a device name. For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property. At the same time, we recommend avoiding providing PII.
     * @param {Object} opts Optional parameters
     * @param {String} [bindingAlg] The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
     * @param {String} [bindingPublicKey] The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when `factor_type` is `push`
     * @param {String} [bindingSecret] The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when `factor_type` is `totp`
     * @param {module:model/NewFactorEnumTotpAlgorithms} [configAlg] 
     * @param {String} [configAppId] The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.  Required when `factor_type` is `push`.
     * @param {Number} [configCodeLength] Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.  Used when `factor_type` is `totp`
     * @param {module:model/NewFactorEnumNotificationPlatforms} [configNotificationPlatform] 
     * @param {String} [configNotificationToken] For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when `factor_type` is `push`.
     * @param {String} [configSdkVersion] The Verify Push SDK version used to configure the factor  Required when `factor_type` is `push`
     * @param {Number} [configSkew] The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.  Used when `factor_type` is `totp`
     * @param {Number} [configTimeStep] Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.  Used when `factor_type` is `totp`
     * @param {Object} [metadata] Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\\\"os\\\": \\\"Android\\\"}`. Can be up to 1024 characters in length.
     * @param {module:api/VerifyV2NewFactorApi~createNewFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyV2ServiceEntityNewFactor}
     */
    createNewFactor(serviceSid, identity, factorType, friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createNewFactor");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createNewFactor");
      }
      // verify the required parameter 'factorType' is set
      if (factorType === undefined || factorType === null) {
        throw new Error("Missing the required parameter 'factorType' when calling createNewFactor");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createNewFactor");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Binding.Alg': opts['bindingAlg'],
        'Binding.PublicKey': opts['bindingPublicKey'],
        'Binding.Secret': opts['bindingSecret'],
        'Config.Alg': opts['configAlg'],
        'Config.AppId': opts['configAppId'],
        'Config.CodeLength': opts['configCodeLength'],
        'Config.NotificationPlatform': opts['configNotificationPlatform'],
        'Config.NotificationToken': opts['configNotificationToken'],
        'Config.SdkVersion': opts['configSdkVersion'],
        'Config.Skew': opts['configSkew'],
        'Config.TimeStep': opts['configTimeStep'],
        'FactorType': factorType,
        'FriendlyName': friendlyName,
        'Metadata': opts['metadata']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerifyV2ServiceEntityNewFactor;
      let basePaths = ['https://verify.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Entities/{Identity}/Factors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
