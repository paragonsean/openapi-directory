/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerifyV2ServiceEntityChallengeNotification model module.
 * @module model/VerifyV2ServiceEntityChallengeNotification
 * @version 1.55.0
 */
class VerifyV2ServiceEntityChallengeNotification {
    /**
     * Constructs a new <code>VerifyV2ServiceEntityChallengeNotification</code>.
     * @alias module:model/VerifyV2ServiceEntityChallengeNotification
     */
    constructor() { 
        
        VerifyV2ServiceEntityChallengeNotification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerifyV2ServiceEntityChallengeNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyV2ServiceEntityChallengeNotification} obj Optional instance to populate.
     * @return {module:model/VerifyV2ServiceEntityChallengeNotification} The populated <code>VerifyV2ServiceEntityChallengeNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyV2ServiceEntityChallengeNotification();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('challenge_sid')) {
                obj['challenge_sid'] = ApiClient.convertToType(data['challenge_sid'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('entity_sid')) {
                obj['entity_sid'] = ApiClient.convertToType(data['entity_sid'], 'String');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('service_sid')) {
                obj['service_sid'] = ApiClient.convertToType(data['service_sid'], 'String');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyV2ServiceEntityChallengeNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyV2ServiceEntityChallengeNotification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['challenge_sid'] && !(typeof data['challenge_sid'] === 'string' || data['challenge_sid'] instanceof String)) {
            throw new Error("Expected the field `challenge_sid` to be a primitive type in the JSON string but got " + data['challenge_sid']);
        }
        // ensure the json data is a string
        if (data['entity_sid'] && !(typeof data['entity_sid'] === 'string' || data['entity_sid'] instanceof String)) {
            throw new Error("Expected the field `entity_sid` to be a primitive type in the JSON string but got " + data['entity_sid']);
        }
        // ensure the json data is a string
        if (data['identity'] && !(typeof data['identity'] === 'string' || data['identity'] instanceof String)) {
            throw new Error("Expected the field `identity` to be a primitive type in the JSON string but got " + data['identity']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['service_sid'] && !(typeof data['service_sid'] === 'string' || data['service_sid'] instanceof String)) {
            throw new Error("Expected the field `service_sid` to be a primitive type in the JSON string but got " + data['service_sid']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }

        return true;
    }


}



/**
 * The unique SID identifier of the Account.
 * @member {String} account_sid
 */
VerifyV2ServiceEntityChallengeNotification.prototype['account_sid'] = undefined;

/**
 * The unique SID identifier of the Challenge.
 * @member {String} challenge_sid
 */
VerifyV2ServiceEntityChallengeNotification.prototype['challenge_sid'] = undefined;

/**
 * The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
VerifyV2ServiceEntityChallengeNotification.prototype['date_created'] = undefined;

/**
 * The unique SID identifier of the Entity.
 * @member {String} entity_sid
 */
VerifyV2ServiceEntityChallengeNotification.prototype['entity_sid'] = undefined;

/**
 * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
 * @member {String} identity
 */
VerifyV2ServiceEntityChallengeNotification.prototype['identity'] = undefined;

/**
 * The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.
 * @member {String} priority
 */
VerifyV2ServiceEntityChallengeNotification.prototype['priority'] = undefined;

/**
 * The unique SID identifier of the Service.
 * @member {String} service_sid
 */
VerifyV2ServiceEntityChallengeNotification.prototype['service_sid'] = undefined;

/**
 * A 34 character string that uniquely identifies this Notification.
 * @member {String} sid
 */
VerifyV2ServiceEntityChallengeNotification.prototype['sid'] = undefined;

/**
 * How long, in seconds, the notification is valid. Max: 5 minutes
 * @member {Number} ttl
 */
VerifyV2ServiceEntityChallengeNotification.prototype['ttl'] = undefined;






export default VerifyV2ServiceEntityChallengeNotification;

