/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.VerificationAttemptsSummaryEnumChannels;
import org.openapitools.client.model.VerifyV2VerificationAttemptsSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2VerificationAttemptsSummaryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2VerificationAttemptsSummaryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2VerificationAttemptsSummaryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchVerificationAttemptsSummary
     * @param verifyServiceSid Filter used to consider only Verification Attempts of the given verify service on the summary aggregation. (optional)
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param country Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation. (optional)
     * @param channel Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are &#x60;SMS&#x60;, &#x60;CALL&#x60; and &#x60;WHATSAPP&#x60; (optional)
     * @param destinationPrefix Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationAttemptsSummaryCall(String verifyServiceSid, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String country, VerificationAttemptsSummaryEnumChannels channel, String destinationPrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Attempts/Summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (verifyServiceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VerifyServiceSid", verifyServiceSid));
        }

        if (dateCreatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedAfter", dateCreatedAfter));
        }

        if (dateCreatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedBefore", dateCreatedBefore));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Country", country));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Channel", channel));
        }

        if (destinationPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DestinationPrefix", destinationPrefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVerificationAttemptsSummaryValidateBeforeCall(String verifyServiceSid, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String country, VerificationAttemptsSummaryEnumChannels channel, String destinationPrefix, final ApiCallback _callback) throws ApiException {
        return fetchVerificationAttemptsSummaryCall(verifyServiceSid, dateCreatedAfter, dateCreatedBefore, country, channel, destinationPrefix, _callback);

    }

    /**
     * 
     * Get a summary of how many attempts were made and how many were converted.
     * @param verifyServiceSid Filter used to consider only Verification Attempts of the given verify service on the summary aggregation. (optional)
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param country Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation. (optional)
     * @param channel Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are &#x60;SMS&#x60;, &#x60;CALL&#x60; and &#x60;WHATSAPP&#x60; (optional)
     * @param destinationPrefix Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format. (optional)
     * @return VerifyV2VerificationAttemptsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2VerificationAttemptsSummary fetchVerificationAttemptsSummary(String verifyServiceSid, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String country, VerificationAttemptsSummaryEnumChannels channel, String destinationPrefix) throws ApiException {
        ApiResponse<VerifyV2VerificationAttemptsSummary> localVarResp = fetchVerificationAttemptsSummaryWithHttpInfo(verifyServiceSid, dateCreatedAfter, dateCreatedBefore, country, channel, destinationPrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a summary of how many attempts were made and how many were converted.
     * @param verifyServiceSid Filter used to consider only Verification Attempts of the given verify service on the summary aggregation. (optional)
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param country Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation. (optional)
     * @param channel Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are &#x60;SMS&#x60;, &#x60;CALL&#x60; and &#x60;WHATSAPP&#x60; (optional)
     * @param destinationPrefix Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format. (optional)
     * @return ApiResponse&lt;VerifyV2VerificationAttemptsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2VerificationAttemptsSummary> fetchVerificationAttemptsSummaryWithHttpInfo(String verifyServiceSid, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String country, VerificationAttemptsSummaryEnumChannels channel, String destinationPrefix) throws ApiException {
        okhttp3.Call localVarCall = fetchVerificationAttemptsSummaryValidateBeforeCall(verifyServiceSid, dateCreatedAfter, dateCreatedBefore, country, channel, destinationPrefix, null);
        Type localVarReturnType = new TypeToken<VerifyV2VerificationAttemptsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a summary of how many attempts were made and how many were converted.
     * @param verifyServiceSid Filter used to consider only Verification Attempts of the given verify service on the summary aggregation. (optional)
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param country Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation. (optional)
     * @param channel Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are &#x60;SMS&#x60;, &#x60;CALL&#x60; and &#x60;WHATSAPP&#x60; (optional)
     * @param destinationPrefix Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationAttemptsSummaryAsync(String verifyServiceSid, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String country, VerificationAttemptsSummaryEnumChannels channel, String destinationPrefix, final ApiCallback<VerifyV2VerificationAttemptsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVerificationAttemptsSummaryValidateBeforeCall(verifyServiceSid, dateCreatedAfter, dateCreatedBefore, country, channel, destinationPrefix, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2VerificationAttemptsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
