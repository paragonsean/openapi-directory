/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NewFactorEnumFactorTypes;
import org.openapitools.client.model.NewFactorEnumNotificationPlatforms;
import org.openapitools.client.model.NewFactorEnumTotpAlgorithms;
import org.openapitools.client.model.VerifyV2ServiceEntityNewFactor;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2NewFactorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2NewFactorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2NewFactorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNewFactor
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorType  (required)
     * @param friendlyName The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For &#x60;factor_type&#x60; &#x60;push&#x60;, this could be a device name. For &#x60;factor_type&#x60; &#x60;totp&#x60;, this value is used as the “account name” in constructing the &#x60;binding.uri&#x60; property. At the same time, we recommend avoiding providing PII. (required)
     * @param bindingAlg The algorithm used when &#x60;factor_type&#x60; is &#x60;push&#x60;. Algorithm supported: &#x60;ES256&#x60; (optional)
     * @param bindingPublicKey The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param bindingSecret The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configAlg  (optional)
     * @param configAppId The ID that uniquely identifies your app in the Google or Apple store, such as &#x60;com.example.myapp&#x60;. It can be up to 100 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configCodeLength Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property &#x60;totp.code_length&#x60;. If not configured defaults to 6.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configNotificationPlatform  (optional)
     * @param configNotificationToken For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configSdkVersion The Verify Push SDK version used to configure the factor  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param configSkew The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property &#x60;totp.skew&#x60;. If not configured defaults to 1.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configTimeStep Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property &#x60;totp.time_step&#x60;. Defaults to 30 seconds if not configured.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param metadata Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewFactorCall(String serviceSid, String identity, NewFactorEnumFactorTypes factorType, String friendlyName, String bindingAlg, String bindingPublicKey, String bindingSecret, NewFactorEnumTotpAlgorithms configAlg, String configAppId, Integer configCodeLength, NewFactorEnumNotificationPlatforms configNotificationPlatform, String configNotificationToken, String configSdkVersion, Integer configSkew, Integer configTimeStep, Object metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bindingAlg != null) {
            localVarFormParams.put("Binding.Alg", bindingAlg);
        }

        if (bindingPublicKey != null) {
            localVarFormParams.put("Binding.PublicKey", bindingPublicKey);
        }

        if (bindingSecret != null) {
            localVarFormParams.put("Binding.Secret", bindingSecret);
        }

        if (configAlg != null) {
            localVarFormParams.put("Config.Alg", configAlg);
        }

        if (configAppId != null) {
            localVarFormParams.put("Config.AppId", configAppId);
        }

        if (configCodeLength != null) {
            localVarFormParams.put("Config.CodeLength", configCodeLength);
        }

        if (configNotificationPlatform != null) {
            localVarFormParams.put("Config.NotificationPlatform", configNotificationPlatform);
        }

        if (configNotificationToken != null) {
            localVarFormParams.put("Config.NotificationToken", configNotificationToken);
        }

        if (configSdkVersion != null) {
            localVarFormParams.put("Config.SdkVersion", configSdkVersion);
        }

        if (configSkew != null) {
            localVarFormParams.put("Config.Skew", configSkew);
        }

        if (configTimeStep != null) {
            localVarFormParams.put("Config.TimeStep", configTimeStep);
        }

        if (factorType != null) {
            localVarFormParams.put("FactorType", factorType);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (metadata != null) {
            localVarFormParams.put("Metadata", metadata);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFactorValidateBeforeCall(String serviceSid, String identity, NewFactorEnumFactorTypes factorType, String friendlyName, String bindingAlg, String bindingPublicKey, String bindingSecret, NewFactorEnumTotpAlgorithms configAlg, String configAppId, Integer configCodeLength, NewFactorEnumNotificationPlatforms configNotificationPlatform, String configNotificationToken, String configSdkVersion, Integer configSkew, Integer configTimeStep, Object metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createNewFactor(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createNewFactor(Async)");
        }

        // verify the required parameter 'factorType' is set
        if (factorType == null) {
            throw new ApiException("Missing the required parameter 'factorType' when calling createNewFactor(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createNewFactor(Async)");
        }

        return createNewFactorCall(serviceSid, identity, factorType, friendlyName, bindingAlg, bindingPublicKey, bindingSecret, configAlg, configAppId, configCodeLength, configNotificationPlatform, configNotificationToken, configSdkVersion, configSkew, configTimeStep, metadata, _callback);

    }

    /**
     * 
     * Create a new Factor for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorType  (required)
     * @param friendlyName The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For &#x60;factor_type&#x60; &#x60;push&#x60;, this could be a device name. For &#x60;factor_type&#x60; &#x60;totp&#x60;, this value is used as the “account name” in constructing the &#x60;binding.uri&#x60; property. At the same time, we recommend avoiding providing PII. (required)
     * @param bindingAlg The algorithm used when &#x60;factor_type&#x60; is &#x60;push&#x60;. Algorithm supported: &#x60;ES256&#x60; (optional)
     * @param bindingPublicKey The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param bindingSecret The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configAlg  (optional)
     * @param configAppId The ID that uniquely identifies your app in the Google or Apple store, such as &#x60;com.example.myapp&#x60;. It can be up to 100 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configCodeLength Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property &#x60;totp.code_length&#x60;. If not configured defaults to 6.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configNotificationPlatform  (optional)
     * @param configNotificationToken For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configSdkVersion The Verify Push SDK version used to configure the factor  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param configSkew The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property &#x60;totp.skew&#x60;. If not configured defaults to 1.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configTimeStep Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property &#x60;totp.time_step&#x60;. Defaults to 30 seconds if not configured.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param metadata Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @return VerifyV2ServiceEntityNewFactor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceEntityNewFactor createNewFactor(String serviceSid, String identity, NewFactorEnumFactorTypes factorType, String friendlyName, String bindingAlg, String bindingPublicKey, String bindingSecret, NewFactorEnumTotpAlgorithms configAlg, String configAppId, Integer configCodeLength, NewFactorEnumNotificationPlatforms configNotificationPlatform, String configNotificationToken, String configSdkVersion, Integer configSkew, Integer configTimeStep, Object metadata) throws ApiException {
        ApiResponse<VerifyV2ServiceEntityNewFactor> localVarResp = createNewFactorWithHttpInfo(serviceSid, identity, factorType, friendlyName, bindingAlg, bindingPublicKey, bindingSecret, configAlg, configAppId, configCodeLength, configNotificationPlatform, configNotificationToken, configSdkVersion, configSkew, configTimeStep, metadata);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Factor for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorType  (required)
     * @param friendlyName The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For &#x60;factor_type&#x60; &#x60;push&#x60;, this could be a device name. For &#x60;factor_type&#x60; &#x60;totp&#x60;, this value is used as the “account name” in constructing the &#x60;binding.uri&#x60; property. At the same time, we recommend avoiding providing PII. (required)
     * @param bindingAlg The algorithm used when &#x60;factor_type&#x60; is &#x60;push&#x60;. Algorithm supported: &#x60;ES256&#x60; (optional)
     * @param bindingPublicKey The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param bindingSecret The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configAlg  (optional)
     * @param configAppId The ID that uniquely identifies your app in the Google or Apple store, such as &#x60;com.example.myapp&#x60;. It can be up to 100 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configCodeLength Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property &#x60;totp.code_length&#x60;. If not configured defaults to 6.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configNotificationPlatform  (optional)
     * @param configNotificationToken For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configSdkVersion The Verify Push SDK version used to configure the factor  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param configSkew The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property &#x60;totp.skew&#x60;. If not configured defaults to 1.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configTimeStep Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property &#x60;totp.time_step&#x60;. Defaults to 30 seconds if not configured.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param metadata Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @return ApiResponse&lt;VerifyV2ServiceEntityNewFactor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceEntityNewFactor> createNewFactorWithHttpInfo(String serviceSid, String identity, NewFactorEnumFactorTypes factorType, String friendlyName, String bindingAlg, String bindingPublicKey, String bindingSecret, NewFactorEnumTotpAlgorithms configAlg, String configAppId, Integer configCodeLength, NewFactorEnumNotificationPlatforms configNotificationPlatform, String configNotificationToken, String configSdkVersion, Integer configSkew, Integer configTimeStep, Object metadata) throws ApiException {
        okhttp3.Call localVarCall = createNewFactorValidateBeforeCall(serviceSid, identity, factorType, friendlyName, bindingAlg, bindingPublicKey, bindingSecret, configAlg, configAppId, configCodeLength, configNotificationPlatform, configNotificationToken, configSdkVersion, configSkew, configTimeStep, metadata, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityNewFactor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Factor for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorType  (required)
     * @param friendlyName The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For &#x60;factor_type&#x60; &#x60;push&#x60;, this could be a device name. For &#x60;factor_type&#x60; &#x60;totp&#x60;, this value is used as the “account name” in constructing the &#x60;binding.uri&#x60; property. At the same time, we recommend avoiding providing PII. (required)
     * @param bindingAlg The algorithm used when &#x60;factor_type&#x60; is &#x60;push&#x60;. Algorithm supported: &#x60;ES256&#x60; (optional)
     * @param bindingPublicKey The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param bindingSecret The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configAlg  (optional)
     * @param configAppId The ID that uniquely identifies your app in the Google or Apple store, such as &#x60;com.example.myapp&#x60;. It can be up to 100 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configCodeLength Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property &#x60;totp.code_length&#x60;. If not configured defaults to 6.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configNotificationPlatform  (optional)
     * @param configNotificationToken For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. (optional)
     * @param configSdkVersion The Verify Push SDK version used to configure the factor  Required when &#x60;factor_type&#x60; is &#x60;push&#x60; (optional)
     * @param configSkew The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property &#x60;totp.skew&#x60;. If not configured defaults to 1.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param configTimeStep Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property &#x60;totp.time_step&#x60;. Defaults to 30 seconds if not configured.  Used when &#x60;factor_type&#x60; is &#x60;totp&#x60; (optional)
     * @param metadata Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewFactorAsync(String serviceSid, String identity, NewFactorEnumFactorTypes factorType, String friendlyName, String bindingAlg, String bindingPublicKey, String bindingSecret, NewFactorEnumTotpAlgorithms configAlg, String configAppId, Integer configCodeLength, NewFactorEnumNotificationPlatforms configNotificationPlatform, String configNotificationToken, String configSdkVersion, Integer configSkew, Integer configTimeStep, Object metadata, final ApiCallback<VerifyV2ServiceEntityNewFactor> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFactorValidateBeforeCall(serviceSid, identity, factorType, friendlyName, bindingAlg, bindingPublicKey, bindingSecret, configAlg, configAppId, configCodeLength, configNotificationPlatform, configNotificationToken, configSdkVersion, configSkew, configTimeStep, metadata, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityNewFactor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
