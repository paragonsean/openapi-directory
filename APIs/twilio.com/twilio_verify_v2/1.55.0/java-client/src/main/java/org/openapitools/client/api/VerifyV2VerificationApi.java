/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VerificationEnumRiskCheck;
import org.openapitools.client.model.VerificationEnumStatus;
import org.openapitools.client.model.VerifyV2ServiceVerification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2VerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2VerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2VerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVerification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under. (required)
     * @param channel The verification method to use. One of: [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email), &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;call&#x60;, &#x60;sna&#x60; or &#x60;auto&#x60;. (required)
     * @param to The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164). (required)
     * @param amount The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param appHash Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: &#x60;&lt;#&gt; Your AppName verification code is: 1234 He42w354ol9&#x60;. (optional)
     * @param channelConfiguration [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields &#39;from&#39; and &#39;from_name&#39; are optional but if included the &#39;from&#39; field must have a valid email address. (optional)
     * @param customCode A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive. (optional)
     * @param customFriendlyName A custom user defined friendly name that overwrites the existing one in the verification message (optional)
     * @param customMessage The text of a custom message to use for the verification. (optional)
     * @param deviceIp Strongly encouraged if using the auto channel. The IP address of the client&#39;s device. If provided, it has to be a valid IPv4 or IPv6 address. (optional)
     * @param locale Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages). (optional)
     * @param payee The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param rateLimits The custom key-value pairs of Programmable Rate Limits. Keys correspond to &#x60;unique_name&#x60; fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request. (optional)
     * @param riskCheck  (optional)
     * @param sendDigits The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits). (optional)
     * @param tags A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length. (optional)
     * @param templateCustomSubstitutions A stringified JSON object in which the keys are the template&#39;s special variables and the values are the variables substitutions. (optional)
     * @param templateSid The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVerificationCall(String serviceSid, String channel, String to, String amount, String appHash, Object channelConfiguration, String customCode, String customFriendlyName, String customMessage, String deviceIp, String locale, String payee, Object rateLimits, VerificationEnumRiskCheck riskCheck, String sendDigits, String tags, String templateCustomSubstitutions, String templateSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Verifications"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarFormParams.put("Amount", amount);
        }

        if (appHash != null) {
            localVarFormParams.put("AppHash", appHash);
        }

        if (channel != null) {
            localVarFormParams.put("Channel", channel);
        }

        if (channelConfiguration != null) {
            localVarFormParams.put("ChannelConfiguration", channelConfiguration);
        }

        if (customCode != null) {
            localVarFormParams.put("CustomCode", customCode);
        }

        if (customFriendlyName != null) {
            localVarFormParams.put("CustomFriendlyName", customFriendlyName);
        }

        if (customMessage != null) {
            localVarFormParams.put("CustomMessage", customMessage);
        }

        if (deviceIp != null) {
            localVarFormParams.put("DeviceIp", deviceIp);
        }

        if (locale != null) {
            localVarFormParams.put("Locale", locale);
        }

        if (payee != null) {
            localVarFormParams.put("Payee", payee);
        }

        if (rateLimits != null) {
            localVarFormParams.put("RateLimits", rateLimits);
        }

        if (riskCheck != null) {
            localVarFormParams.put("RiskCheck", riskCheck);
        }

        if (sendDigits != null) {
            localVarFormParams.put("SendDigits", sendDigits);
        }

        if (tags != null) {
            localVarFormParams.put("Tags", tags);
        }

        if (templateCustomSubstitutions != null) {
            localVarFormParams.put("TemplateCustomSubstitutions", templateCustomSubstitutions);
        }

        if (templateSid != null) {
            localVarFormParams.put("TemplateSid", templateSid);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVerificationValidateBeforeCall(String serviceSid, String channel, String to, String amount, String appHash, Object channelConfiguration, String customCode, String customFriendlyName, String customMessage, String deviceIp, String locale, String payee, Object rateLimits, VerificationEnumRiskCheck riskCheck, String sendDigits, String tags, String templateCustomSubstitutions, String templateSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createVerification(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling createVerification(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling createVerification(Async)");
        }

        return createVerificationCall(serviceSid, channel, to, amount, appHash, channelConfiguration, customCode, customFriendlyName, customMessage, deviceIp, locale, payee, rateLimits, riskCheck, sendDigits, tags, templateCustomSubstitutions, templateSid, _callback);

    }

    /**
     * 
     * Create a new Verification using a Service
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under. (required)
     * @param channel The verification method to use. One of: [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email), &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;call&#x60;, &#x60;sna&#x60; or &#x60;auto&#x60;. (required)
     * @param to The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164). (required)
     * @param amount The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param appHash Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: &#x60;&lt;#&gt; Your AppName verification code is: 1234 He42w354ol9&#x60;. (optional)
     * @param channelConfiguration [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields &#39;from&#39; and &#39;from_name&#39; are optional but if included the &#39;from&#39; field must have a valid email address. (optional)
     * @param customCode A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive. (optional)
     * @param customFriendlyName A custom user defined friendly name that overwrites the existing one in the verification message (optional)
     * @param customMessage The text of a custom message to use for the verification. (optional)
     * @param deviceIp Strongly encouraged if using the auto channel. The IP address of the client&#39;s device. If provided, it has to be a valid IPv4 or IPv6 address. (optional)
     * @param locale Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages). (optional)
     * @param payee The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param rateLimits The custom key-value pairs of Programmable Rate Limits. Keys correspond to &#x60;unique_name&#x60; fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request. (optional)
     * @param riskCheck  (optional)
     * @param sendDigits The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits). (optional)
     * @param tags A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length. (optional)
     * @param templateCustomSubstitutions A stringified JSON object in which the keys are the template&#39;s special variables and the values are the variables substitutions. (optional)
     * @param templateSid The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only. (optional)
     * @return VerifyV2ServiceVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceVerification createVerification(String serviceSid, String channel, String to, String amount, String appHash, Object channelConfiguration, String customCode, String customFriendlyName, String customMessage, String deviceIp, String locale, String payee, Object rateLimits, VerificationEnumRiskCheck riskCheck, String sendDigits, String tags, String templateCustomSubstitutions, String templateSid) throws ApiException {
        ApiResponse<VerifyV2ServiceVerification> localVarResp = createVerificationWithHttpInfo(serviceSid, channel, to, amount, appHash, channelConfiguration, customCode, customFriendlyName, customMessage, deviceIp, locale, payee, rateLimits, riskCheck, sendDigits, tags, templateCustomSubstitutions, templateSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Verification using a Service
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under. (required)
     * @param channel The verification method to use. One of: [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email), &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;call&#x60;, &#x60;sna&#x60; or &#x60;auto&#x60;. (required)
     * @param to The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164). (required)
     * @param amount The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param appHash Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: &#x60;&lt;#&gt; Your AppName verification code is: 1234 He42w354ol9&#x60;. (optional)
     * @param channelConfiguration [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields &#39;from&#39; and &#39;from_name&#39; are optional but if included the &#39;from&#39; field must have a valid email address. (optional)
     * @param customCode A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive. (optional)
     * @param customFriendlyName A custom user defined friendly name that overwrites the existing one in the verification message (optional)
     * @param customMessage The text of a custom message to use for the verification. (optional)
     * @param deviceIp Strongly encouraged if using the auto channel. The IP address of the client&#39;s device. If provided, it has to be a valid IPv4 or IPv6 address. (optional)
     * @param locale Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages). (optional)
     * @param payee The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param rateLimits The custom key-value pairs of Programmable Rate Limits. Keys correspond to &#x60;unique_name&#x60; fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request. (optional)
     * @param riskCheck  (optional)
     * @param sendDigits The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits). (optional)
     * @param tags A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length. (optional)
     * @param templateCustomSubstitutions A stringified JSON object in which the keys are the template&#39;s special variables and the values are the variables substitutions. (optional)
     * @param templateSid The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only. (optional)
     * @return ApiResponse&lt;VerifyV2ServiceVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceVerification> createVerificationWithHttpInfo(String serviceSid, String channel, String to, String amount, String appHash, Object channelConfiguration, String customCode, String customFriendlyName, String customMessage, String deviceIp, String locale, String payee, Object rateLimits, VerificationEnumRiskCheck riskCheck, String sendDigits, String tags, String templateCustomSubstitutions, String templateSid) throws ApiException {
        okhttp3.Call localVarCall = createVerificationValidateBeforeCall(serviceSid, channel, to, amount, appHash, channelConfiguration, customCode, customFriendlyName, customMessage, deviceIp, locale, payee, rateLimits, riskCheck, sendDigits, tags, templateCustomSubstitutions, templateSid, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Verification using a Service
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under. (required)
     * @param channel The verification method to use. One of: [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email), &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;call&#x60;, &#x60;sna&#x60; or &#x60;auto&#x60;. (required)
     * @param to The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164). (required)
     * @param amount The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param appHash Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: &#x60;&lt;#&gt; Your AppName verification code is: 1234 He42w354ol9&#x60;. (optional)
     * @param channelConfiguration [&#x60;email&#x60;](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields &#39;from&#39; and &#39;from_name&#39; are optional but if included the &#39;from&#39; field must have a valid email address. (optional)
     * @param customCode A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive. (optional)
     * @param customFriendlyName A custom user defined friendly name that overwrites the existing one in the verification message (optional)
     * @param customMessage The text of a custom message to use for the verification. (optional)
     * @param deviceIp Strongly encouraged if using the auto channel. The IP address of the client&#39;s device. If provided, it has to be a valid IPv4 or IPv6 address. (optional)
     * @param locale Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages). (optional)
     * @param payee The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled. (optional)
     * @param rateLimits The custom key-value pairs of Programmable Rate Limits. Keys correspond to &#x60;unique_name&#x60; fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request. (optional)
     * @param riskCheck  (optional)
     * @param sendDigits The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits). (optional)
     * @param tags A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length. (optional)
     * @param templateCustomSubstitutions A stringified JSON object in which the keys are the template&#39;s special variables and the values are the variables substitutions. (optional)
     * @param templateSid The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVerificationAsync(String serviceSid, String channel, String to, String amount, String appHash, Object channelConfiguration, String customCode, String customFriendlyName, String customMessage, String deviceIp, String locale, String payee, Object rateLimits, VerificationEnumRiskCheck riskCheck, String sendDigits, String tags, String templateCustomSubstitutions, String templateSid, final ApiCallback<VerifyV2ServiceVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVerificationValidateBeforeCall(serviceSid, channel, to, amount, appHash, channelConfiguration, customCode, customFriendlyName, customMessage, deviceIp, locale, payee, rateLimits, riskCheck, sendDigits, tags, templateCustomSubstitutions, templateSid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVerification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Verifications/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVerificationValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchVerification(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchVerification(Async)");
        }

        return fetchVerificationCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * Fetch a specific Verification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to fetch. (required)
     * @return VerifyV2ServiceVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceVerification fetchVerification(String serviceSid, String sid) throws ApiException {
        ApiResponse<VerifyV2ServiceVerification> localVarResp = fetchVerificationWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Verification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to fetch. (required)
     * @return ApiResponse&lt;VerifyV2ServiceVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceVerification> fetchVerificationWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchVerificationValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Verification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationAsync(String serviceSid, String sid, final ApiCallback<VerifyV2ServiceVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVerificationValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVerification
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to update. (required)
     * @param status  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVerificationCall(String serviceSid, String sid, VerificationEnumStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Verifications/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVerificationValidateBeforeCall(String serviceSid, String sid, VerificationEnumStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateVerification(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateVerification(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateVerification(Async)");
        }

        return updateVerificationCall(serviceSid, sid, status, _callback);

    }

    /**
     * 
     * Update a Verification status
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to update. (required)
     * @param status  (required)
     * @return VerifyV2ServiceVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceVerification updateVerification(String serviceSid, String sid, VerificationEnumStatus status) throws ApiException {
        ApiResponse<VerifyV2ServiceVerification> localVarResp = updateVerificationWithHttpInfo(serviceSid, sid, status);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a Verification status
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to update. (required)
     * @param status  (required)
     * @return ApiResponse&lt;VerifyV2ServiceVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceVerification> updateVerificationWithHttpInfo(String serviceSid, String sid, VerificationEnumStatus status) throws ApiException {
        okhttp3.Call localVarCall = updateVerificationValidateBeforeCall(serviceSid, sid, status, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a Verification status
     * @param serviceSid The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Verification resource to update. (required)
     * @param status  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVerificationAsync(String serviceSid, String sid, VerificationEnumStatus status, final ApiCallback<VerifyV2ServiceVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVerificationValidateBeforeCall(serviceSid, sid, status, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
