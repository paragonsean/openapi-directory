/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessTokenEnumFactorTypes;
import org.openapitools.client.model.VerifyV2ServiceAccessToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2AccessTokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2AccessTokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2AccessTokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAccessToken
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param factorType  (required)
     * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. (required)
     * @param factorFriendlyName The friendly name of the factor that is going to be created with this access token (optional)
     * @param ttl How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessTokenCall(String serviceSid, AccessTokenEnumFactorTypes factorType, String identity, String factorFriendlyName, Integer ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/AccessTokens"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factorFriendlyName != null) {
            localVarFormParams.put("FactorFriendlyName", factorFriendlyName);
        }

        if (factorType != null) {
            localVarFormParams.put("FactorType", factorType);
        }

        if (identity != null) {
            localVarFormParams.put("Identity", identity);
        }

        if (ttl != null) {
            localVarFormParams.put("Ttl", ttl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccessTokenValidateBeforeCall(String serviceSid, AccessTokenEnumFactorTypes factorType, String identity, String factorFriendlyName, Integer ttl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createAccessToken(Async)");
        }

        // verify the required parameter 'factorType' is set
        if (factorType == null) {
            throw new ApiException("Missing the required parameter 'factorType' when calling createAccessToken(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createAccessToken(Async)");
        }

        return createAccessTokenCall(serviceSid, factorType, identity, factorFriendlyName, ttl, _callback);

    }

    /**
     * 
     * Create a new enrollment Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param factorType  (required)
     * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. (required)
     * @param factorFriendlyName The friendly name of the factor that is going to be created with this access token (optional)
     * @param ttl How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60. (optional)
     * @return VerifyV2ServiceAccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceAccessToken createAccessToken(String serviceSid, AccessTokenEnumFactorTypes factorType, String identity, String factorFriendlyName, Integer ttl) throws ApiException {
        ApiResponse<VerifyV2ServiceAccessToken> localVarResp = createAccessTokenWithHttpInfo(serviceSid, factorType, identity, factorFriendlyName, ttl);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new enrollment Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param factorType  (required)
     * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. (required)
     * @param factorFriendlyName The friendly name of the factor that is going to be created with this access token (optional)
     * @param ttl How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60. (optional)
     * @return ApiResponse&lt;VerifyV2ServiceAccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceAccessToken> createAccessTokenWithHttpInfo(String serviceSid, AccessTokenEnumFactorTypes factorType, String identity, String factorFriendlyName, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(serviceSid, factorType, identity, factorFriendlyName, ttl, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceAccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new enrollment Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param factorType  (required)
     * @param identity The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. (required)
     * @param factorFriendlyName The friendly name of the factor that is going to be created with this access token (optional)
     * @param ttl How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessTokenAsync(String serviceSid, AccessTokenEnumFactorTypes factorType, String identity, String factorFriendlyName, Integer ttl, final ApiCallback<VerifyV2ServiceAccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(serviceSid, factorType, identity, factorFriendlyName, ttl, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceAccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchAccessToken
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid A 34 character string that uniquely identifies this Access Token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAccessTokenCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/AccessTokens/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAccessTokenValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchAccessToken(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchAccessToken(Async)");
        }

        return fetchAccessTokenCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * Fetch an Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid A 34 character string that uniquely identifies this Access Token. (required)
     * @return VerifyV2ServiceAccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceAccessToken fetchAccessToken(String serviceSid, String sid) throws ApiException {
        ApiResponse<VerifyV2ServiceAccessToken> localVarResp = fetchAccessTokenWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid A 34 character string that uniquely identifies this Access Token. (required)
     * @return ApiResponse&lt;VerifyV2ServiceAccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceAccessToken> fetchAccessTokenWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchAccessTokenValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceAccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an Access Token for the Entity
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid A 34 character string that uniquely identifies this Access Token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAccessTokenAsync(String serviceSid, String sid, final ApiCallback<VerifyV2ServiceAccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchAccessTokenValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceAccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
