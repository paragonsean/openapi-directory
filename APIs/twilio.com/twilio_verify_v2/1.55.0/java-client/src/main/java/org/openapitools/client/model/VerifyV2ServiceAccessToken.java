/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AccessTokenEnumFactorTypes;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifyV2ServiceAccessToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:27.328026-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyV2ServiceAccessToken {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_ENTITY_IDENTITY = "entity_identity";
  @SerializedName(SERIALIZED_NAME_ENTITY_IDENTITY)
  private String entityIdentity;

  public static final String SERIALIZED_NAME_FACTOR_FRIENDLY_NAME = "factor_friendly_name";
  @SerializedName(SERIALIZED_NAME_FACTOR_FRIENDLY_NAME)
  private String factorFriendlyName;

  public static final String SERIALIZED_NAME_FACTOR_TYPE = "factor_type";
  @SerializedName(SERIALIZED_NAME_FACTOR_TYPE)
  private AccessTokenEnumFactorTypes factorType;

  public static final String SERIALIZED_NAME_SERVICE_SID = "service_sid";
  @SerializedName(SERIALIZED_NAME_SERVICE_SID)
  private String serviceSid;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public VerifyV2ServiceAccessToken() {
  }

  public VerifyV2ServiceAccessToken accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique SID identifier of the Account.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VerifyV2ServiceAccessToken dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date that this access token was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VerifyV2ServiceAccessToken entityIdentity(String entityIdentity) {
    this.entityIdentity = entityIdentity;
    return this;
  }

  /**
   * The unique external identifier for the Entity of the Service.
   * @return entityIdentity
   */
  @javax.annotation.Nullable
  public String getEntityIdentity() {
    return entityIdentity;
  }

  public void setEntityIdentity(String entityIdentity) {
    this.entityIdentity = entityIdentity;
  }


  public VerifyV2ServiceAccessToken factorFriendlyName(String factorFriendlyName) {
    this.factorFriendlyName = factorFriendlyName;
    return this;
  }

  /**
   * A human readable description of this factor, up to 64 characters. For a push factor, this can be the device&#39;s name.
   * @return factorFriendlyName
   */
  @javax.annotation.Nullable
  public String getFactorFriendlyName() {
    return factorFriendlyName;
  }

  public void setFactorFriendlyName(String factorFriendlyName) {
    this.factorFriendlyName = factorFriendlyName;
  }


  public VerifyV2ServiceAccessToken factorType(AccessTokenEnumFactorTypes factorType) {
    this.factorType = factorType;
    return this;
  }

  /**
   * Get factorType
   * @return factorType
   */
  @javax.annotation.Nullable
  public AccessTokenEnumFactorTypes getFactorType() {
    return factorType;
  }

  public void setFactorType(AccessTokenEnumFactorTypes factorType) {
    this.factorType = factorType;
  }


  public VerifyV2ServiceAccessToken serviceSid(String serviceSid) {
    this.serviceSid = serviceSid;
    return this;
  }

  /**
   * The unique SID identifier of the Verify Service.
   * @return serviceSid
   */
  @javax.annotation.Nullable
  public String getServiceSid() {
    return serviceSid;
  }

  public void setServiceSid(String serviceSid) {
    this.serviceSid = serviceSid;
  }


  public VerifyV2ServiceAccessToken sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * A 34 character string that uniquely identifies this Access Token.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VerifyV2ServiceAccessToken token(String token) {
    this.token = token;
    return this;
  }

  /**
   * The access token generated for enrollment, this is an encrypted json web token.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public VerifyV2ServiceAccessToken ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * How long, in seconds, the access token is valid. Max: 5 minutes
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public VerifyV2ServiceAccessToken url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyV2ServiceAccessToken verifyV2ServiceAccessToken = (VerifyV2ServiceAccessToken) o;
    return Objects.equals(this.accountSid, verifyV2ServiceAccessToken.accountSid) &&
        Objects.equals(this.dateCreated, verifyV2ServiceAccessToken.dateCreated) &&
        Objects.equals(this.entityIdentity, verifyV2ServiceAccessToken.entityIdentity) &&
        Objects.equals(this.factorFriendlyName, verifyV2ServiceAccessToken.factorFriendlyName) &&
        Objects.equals(this.factorType, verifyV2ServiceAccessToken.factorType) &&
        Objects.equals(this.serviceSid, verifyV2ServiceAccessToken.serviceSid) &&
        Objects.equals(this.sid, verifyV2ServiceAccessToken.sid) &&
        Objects.equals(this.token, verifyV2ServiceAccessToken.token) &&
        Objects.equals(this.ttl, verifyV2ServiceAccessToken.ttl) &&
        Objects.equals(this.url, verifyV2ServiceAccessToken.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, dateCreated, entityIdentity, factorFriendlyName, factorType, serviceSid, sid, token, ttl, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyV2ServiceAccessToken {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    entityIdentity: ").append(toIndentedString(entityIdentity)).append("\n");
    sb.append("    factorFriendlyName: ").append(toIndentedString(factorFriendlyName)).append("\n");
    sb.append("    factorType: ").append(toIndentedString(factorType)).append("\n");
    sb.append("    serviceSid: ").append(toIndentedString(serviceSid)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("date_created");
    openapiFields.add("entity_identity");
    openapiFields.add("factor_friendly_name");
    openapiFields.add("factor_type");
    openapiFields.add("service_sid");
    openapiFields.add("sid");
    openapiFields.add("token");
    openapiFields.add("ttl");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyV2ServiceAccessToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyV2ServiceAccessToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyV2ServiceAccessToken is not found in the empty JSON string", VerifyV2ServiceAccessToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyV2ServiceAccessToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyV2ServiceAccessToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("entity_identity") != null && !jsonObj.get("entity_identity").isJsonNull()) && !jsonObj.get("entity_identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_identity").toString()));
      }
      if ((jsonObj.get("factor_friendly_name") != null && !jsonObj.get("factor_friendly_name").isJsonNull()) && !jsonObj.get("factor_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factor_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factor_friendly_name").toString()));
      }
      if ((jsonObj.get("factor_type") != null && !jsonObj.get("factor_type").isJsonNull()) && !jsonObj.get("factor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factor_type").toString()));
      }
      // validate the optional field `factor_type`
      if (jsonObj.get("factor_type") != null && !jsonObj.get("factor_type").isJsonNull()) {
        AccessTokenEnumFactorTypes.validateJsonElement(jsonObj.get("factor_type"));
      }
      if ((jsonObj.get("service_sid") != null && !jsonObj.get("service_sid").isJsonNull()) && !jsonObj.get("service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_sid").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyV2ServiceAccessToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyV2ServiceAccessToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyV2ServiceAccessToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyV2ServiceAccessToken.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyV2ServiceAccessToken>() {
           @Override
           public void write(JsonWriter out, VerifyV2ServiceAccessToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyV2ServiceAccessToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyV2ServiceAccessToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyV2ServiceAccessToken
   * @throws IOException if the JSON string is invalid with respect to VerifyV2ServiceAccessToken
   */
  public static VerifyV2ServiceAccessToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyV2ServiceAccessToken.class);
  }

  /**
   * Convert an instance of VerifyV2ServiceAccessToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

