/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VerificationEnumChannel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifyV2ServiceVerification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:27.328026-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyV2ServiceVerification {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private VerificationEnumChannel channel;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_LOOKUP = "lookup";
  @SerializedName(SERIALIZED_NAME_LOOKUP)
  private Object lookup = null;

  public static final String SERIALIZED_NAME_PAYEE = "payee";
  @SerializedName(SERIALIZED_NAME_PAYEE)
  private String payee;

  public static final String SERIALIZED_NAME_SEND_CODE_ATTEMPTS = "send_code_attempts";
  @SerializedName(SERIALIZED_NAME_SEND_CODE_ATTEMPTS)
  private List<Object> sendCodeAttempts;

  public static final String SERIALIZED_NAME_SERVICE_SID = "service_sid";
  @SerializedName(SERIALIZED_NAME_SERVICE_SID)
  private String serviceSid;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SNA = "sna";
  @SerializedName(SERIALIZED_NAME_SNA)
  private Object sna = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public VerifyV2ServiceVerification() {
  }

  public VerifyV2ServiceVerification accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Verification resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VerifyV2ServiceVerification amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public VerifyV2ServiceVerification channel(VerificationEnumChannel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public VerificationEnumChannel getChannel() {
    return channel;
  }

  public void setChannel(VerificationEnumChannel channel) {
    this.channel = channel;
  }


  public VerifyV2ServiceVerification dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VerifyV2ServiceVerification dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public VerifyV2ServiceVerification lookup(Object lookup) {
    this.lookup = lookup;
    return this;
  }

  /**
   * Information about the phone number being verified.
   * @return lookup
   */
  @javax.annotation.Nullable
  public Object getLookup() {
    return lookup;
  }

  public void setLookup(Object lookup) {
    this.lookup = lookup;
  }


  public VerifyV2ServiceVerification payee(String payee) {
    this.payee = payee;
    return this;
  }

  /**
   * The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
   * @return payee
   */
  @javax.annotation.Nullable
  public String getPayee() {
    return payee;
  }

  public void setPayee(String payee) {
    this.payee = payee;
  }


  public VerifyV2ServiceVerification sendCodeAttempts(List<Object> sendCodeAttempts) {
    this.sendCodeAttempts = sendCodeAttempts;
    return this;
  }

  public VerifyV2ServiceVerification addSendCodeAttemptsItem(Object sendCodeAttemptsItem) {
    if (this.sendCodeAttempts == null) {
      this.sendCodeAttempts = new ArrayList<>();
    }
    this.sendCodeAttempts.add(sendCodeAttemptsItem);
    return this;
  }

  /**
   * An array of verification attempt objects containing the channel attempted and the channel-specific transaction SID.
   * @return sendCodeAttempts
   */
  @javax.annotation.Nullable
  public List<Object> getSendCodeAttempts() {
    return sendCodeAttempts;
  }

  public void setSendCodeAttempts(List<Object> sendCodeAttempts) {
    this.sendCodeAttempts = sendCodeAttempts;
  }


  public VerifyV2ServiceVerification serviceSid(String serviceSid) {
    this.serviceSid = serviceSid;
    return this;
  }

  /**
   * The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
   * @return serviceSid
   */
  @javax.annotation.Nullable
  public String getServiceSid() {
    return serviceSid;
  }

  public void setServiceSid(String serviceSid) {
    this.serviceSid = serviceSid;
  }


  public VerifyV2ServiceVerification sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Verification resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VerifyV2ServiceVerification sna(Object sna) {
    this.sna = sna;
    return this;
  }

  /**
   * The set of fields used for a silent network auth (&#x60;sna&#x60;) verification. Contains a single field with the URL to be invoked to verify the phone number.
   * @return sna
   */
  @javax.annotation.Nullable
  public Object getSna() {
    return sna;
  }

  public void setSna(Object sna) {
    this.sna = sna;
  }


  public VerifyV2ServiceVerification status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the verification. One of: &#x60;pending&#x60;, &#x60;approved&#x60;, or &#x60;canceled&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public VerifyV2ServiceVerification to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The phone number or [email](https://www.twilio.com/docs/verify/email) being verified. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public VerifyV2ServiceVerification url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Verification resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public VerifyV2ServiceVerification valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Use \&quot;status\&quot; instead. Legacy property indicating whether the verification was successful.
   * @return valid
   */
  @javax.annotation.Nullable
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyV2ServiceVerification verifyV2ServiceVerification = (VerifyV2ServiceVerification) o;
    return Objects.equals(this.accountSid, verifyV2ServiceVerification.accountSid) &&
        Objects.equals(this.amount, verifyV2ServiceVerification.amount) &&
        Objects.equals(this.channel, verifyV2ServiceVerification.channel) &&
        Objects.equals(this.dateCreated, verifyV2ServiceVerification.dateCreated) &&
        Objects.equals(this.dateUpdated, verifyV2ServiceVerification.dateUpdated) &&
        Objects.equals(this.lookup, verifyV2ServiceVerification.lookup) &&
        Objects.equals(this.payee, verifyV2ServiceVerification.payee) &&
        Objects.equals(this.sendCodeAttempts, verifyV2ServiceVerification.sendCodeAttempts) &&
        Objects.equals(this.serviceSid, verifyV2ServiceVerification.serviceSid) &&
        Objects.equals(this.sid, verifyV2ServiceVerification.sid) &&
        Objects.equals(this.sna, verifyV2ServiceVerification.sna) &&
        Objects.equals(this.status, verifyV2ServiceVerification.status) &&
        Objects.equals(this.to, verifyV2ServiceVerification.to) &&
        Objects.equals(this.url, verifyV2ServiceVerification.url) &&
        Objects.equals(this.valid, verifyV2ServiceVerification.valid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, amount, channel, dateCreated, dateUpdated, lookup, payee, sendCodeAttempts, serviceSid, sid, sna, status, to, url, valid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyV2ServiceVerification {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    lookup: ").append(toIndentedString(lookup)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    sendCodeAttempts: ").append(toIndentedString(sendCodeAttempts)).append("\n");
    sb.append("    serviceSid: ").append(toIndentedString(serviceSid)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    sna: ").append(toIndentedString(sna)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("amount");
    openapiFields.add("channel");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("lookup");
    openapiFields.add("payee");
    openapiFields.add("send_code_attempts");
    openapiFields.add("service_sid");
    openapiFields.add("sid");
    openapiFields.add("sna");
    openapiFields.add("status");
    openapiFields.add("to");
    openapiFields.add("url");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyV2ServiceVerification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyV2ServiceVerification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyV2ServiceVerification is not found in the empty JSON string", VerifyV2ServiceVerification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyV2ServiceVerification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyV2ServiceVerification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        VerificationEnumChannel.validateJsonElement(jsonObj.get("channel"));
      }
      if ((jsonObj.get("payee") != null && !jsonObj.get("payee").isJsonNull()) && !jsonObj.get("payee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("send_code_attempts") != null && !jsonObj.get("send_code_attempts").isJsonNull() && !jsonObj.get("send_code_attempts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_code_attempts` to be an array in the JSON string but got `%s`", jsonObj.get("send_code_attempts").toString()));
      }
      if ((jsonObj.get("service_sid") != null && !jsonObj.get("service_sid").isJsonNull()) && !jsonObj.get("service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_sid").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyV2ServiceVerification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyV2ServiceVerification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyV2ServiceVerification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyV2ServiceVerification.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyV2ServiceVerification>() {
           @Override
           public void write(JsonWriter out, VerifyV2ServiceVerification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyV2ServiceVerification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyV2ServiceVerification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyV2ServiceVerification
   * @throws IOException if the JSON string is invalid with respect to VerifyV2ServiceVerification
   */
  public static VerifyV2ServiceVerification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyV2ServiceVerification.class);
  }

  /**
   * Convert an instance of VerifyV2ServiceVerification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

