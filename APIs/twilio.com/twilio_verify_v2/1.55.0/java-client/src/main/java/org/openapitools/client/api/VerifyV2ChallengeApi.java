/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChallengeEnumChallengeStatuses;
import org.openapitools.client.model.ChallengeEnumListOrders;
import org.openapitools.client.model.ListChallengeResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.VerifyV2ServiceEntityChallenge;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2ChallengeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2ChallengeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2ChallengeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChallenge
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (required)
     * @param authPayload Optional payload used to verify the Challenge upon creation. Only used with a Factor of type &#x60;totp&#x60; to carry the TOTP code that needs to be verified. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. (optional)
     * @param detailsFields A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when &#x60;factor_type&#x60; is &#x60;push&#x60;. There can be up to 20 details fields. (optional)
     * @param detailsMessage Shown to the user when the push notification arrives. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. Can be up to 256 characters in length (optional)
     * @param expirationDate The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation. (optional)
     * @param hiddenDetails Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;ip\\\&quot;: \\\&quot;172.168.1.234\\\&quot;}&#x60;. Can be up to 1024 characters in length (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChallengeCall(String serviceSid, String identity, String factorSid, String authPayload, List<Object> detailsFields, String detailsMessage, OffsetDateTime expirationDate, Object hiddenDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authPayload != null) {
            localVarFormParams.put("AuthPayload", authPayload);
        }

        if (detailsFields != null) {
            localVarFormParams.put("Details.Fields", detailsFields);
        }

        if (detailsMessage != null) {
            localVarFormParams.put("Details.Message", detailsMessage);
        }

        if (expirationDate != null) {
            localVarFormParams.put("ExpirationDate", expirationDate);
        }

        if (factorSid != null) {
            localVarFormParams.put("FactorSid", factorSid);
        }

        if (hiddenDetails != null) {
            localVarFormParams.put("HiddenDetails", hiddenDetails);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChallengeValidateBeforeCall(String serviceSid, String identity, String factorSid, String authPayload, List<Object> detailsFields, String detailsMessage, OffsetDateTime expirationDate, Object hiddenDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createChallenge(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createChallenge(Async)");
        }

        // verify the required parameter 'factorSid' is set
        if (factorSid == null) {
            throw new ApiException("Missing the required parameter 'factorSid' when calling createChallenge(Async)");
        }

        return createChallengeCall(serviceSid, identity, factorSid, authPayload, detailsFields, detailsMessage, expirationDate, hiddenDetails, _callback);

    }

    /**
     * 
     * Create a new Challenge for the Factor
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (required)
     * @param authPayload Optional payload used to verify the Challenge upon creation. Only used with a Factor of type &#x60;totp&#x60; to carry the TOTP code that needs to be verified. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. (optional)
     * @param detailsFields A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when &#x60;factor_type&#x60; is &#x60;push&#x60;. There can be up to 20 details fields. (optional)
     * @param detailsMessage Shown to the user when the push notification arrives. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. Can be up to 256 characters in length (optional)
     * @param expirationDate The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation. (optional)
     * @param hiddenDetails Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;ip\\\&quot;: \\\&quot;172.168.1.234\\\&quot;}&#x60;. Can be up to 1024 characters in length (optional)
     * @return VerifyV2ServiceEntityChallenge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceEntityChallenge createChallenge(String serviceSid, String identity, String factorSid, String authPayload, List<Object> detailsFields, String detailsMessage, OffsetDateTime expirationDate, Object hiddenDetails) throws ApiException {
        ApiResponse<VerifyV2ServiceEntityChallenge> localVarResp = createChallengeWithHttpInfo(serviceSid, identity, factorSid, authPayload, detailsFields, detailsMessage, expirationDate, hiddenDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Challenge for the Factor
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (required)
     * @param authPayload Optional payload used to verify the Challenge upon creation. Only used with a Factor of type &#x60;totp&#x60; to carry the TOTP code that needs to be verified. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. (optional)
     * @param detailsFields A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when &#x60;factor_type&#x60; is &#x60;push&#x60;. There can be up to 20 details fields. (optional)
     * @param detailsMessage Shown to the user when the push notification arrives. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. Can be up to 256 characters in length (optional)
     * @param expirationDate The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation. (optional)
     * @param hiddenDetails Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;ip\\\&quot;: \\\&quot;172.168.1.234\\\&quot;}&#x60;. Can be up to 1024 characters in length (optional)
     * @return ApiResponse&lt;VerifyV2ServiceEntityChallenge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceEntityChallenge> createChallengeWithHttpInfo(String serviceSid, String identity, String factorSid, String authPayload, List<Object> detailsFields, String detailsMessage, OffsetDateTime expirationDate, Object hiddenDetails) throws ApiException {
        okhttp3.Call localVarCall = createChallengeValidateBeforeCall(serviceSid, identity, factorSid, authPayload, detailsFields, detailsMessage, expirationDate, hiddenDetails, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Challenge for the Factor
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (required)
     * @param authPayload Optional payload used to verify the Challenge upon creation. Only used with a Factor of type &#x60;totp&#x60; to carry the TOTP code that needs to be verified. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. (optional)
     * @param detailsFields A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when &#x60;factor_type&#x60; is &#x60;push&#x60;. There can be up to 20 details fields. (optional)
     * @param detailsMessage Shown to the user when the push notification arrives. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. Can be up to 256 characters in length (optional)
     * @param expirationDate The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation. (optional)
     * @param hiddenDetails Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;ip\\\&quot;: \\\&quot;172.168.1.234\\\&quot;}&#x60;. Can be up to 1024 characters in length (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChallengeAsync(String serviceSid, String identity, String factorSid, String authPayload, List<Object> detailsFields, String detailsMessage, OffsetDateTime expirationDate, Object hiddenDetails, final ApiCallback<VerifyV2ServiceEntityChallenge> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChallengeValidateBeforeCall(serviceSid, identity, factorSid, authPayload, detailsFields, detailsMessage, expirationDate, hiddenDetails, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchChallenge
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChallengeCall(String serviceSid, String identity, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchChallengeValidateBeforeCall(String serviceSid, String identity, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchChallenge(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling fetchChallenge(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchChallenge(Async)");
        }

        return fetchChallengeCall(serviceSid, identity, sid, _callback);

    }

    /**
     * 
     * Fetch a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @return VerifyV2ServiceEntityChallenge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceEntityChallenge fetchChallenge(String serviceSid, String identity, String sid) throws ApiException {
        ApiResponse<VerifyV2ServiceEntityChallenge> localVarResp = fetchChallengeWithHttpInfo(serviceSid, identity, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @return ApiResponse&lt;VerifyV2ServiceEntityChallenge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceEntityChallenge> fetchChallengeWithHttpInfo(String serviceSid, String identity, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchChallengeValidateBeforeCall(serviceSid, identity, sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChallengeAsync(String serviceSid, String identity, String sid, final ApiCallback<VerifyV2ServiceEntityChallenge> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchChallengeValidateBeforeCall(serviceSid, identity, sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChallenge
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (optional)
     * @param status The Status of the Challenges to fetch. One of &#x60;pending&#x60;, &#x60;expired&#x60;, &#x60;approved&#x60; or &#x60;denied&#x60;. (optional)
     * @param order The desired sort order of the Challenges list. One of &#x60;asc&#x60; or &#x60;desc&#x60; for ascending and descending respectively. Defaults to &#x60;asc&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChallengeCall(String serviceSid, String identity, String factorSid, ChallengeEnumChallengeStatuses status, ChallengeEnumListOrders order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (factorSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FactorSid", factorSid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChallengeValidateBeforeCall(String serviceSid, String identity, String factorSid, ChallengeEnumChallengeStatuses status, ChallengeEnumListOrders order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listChallenge(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling listChallenge(Async)");
        }

        return listChallengeCall(serviceSid, identity, factorSid, status, order, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Challenges for a Factor.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (optional)
     * @param status The Status of the Challenges to fetch. One of &#x60;pending&#x60;, &#x60;expired&#x60;, &#x60;approved&#x60; or &#x60;denied&#x60;. (optional)
     * @param order The desired sort order of the Challenges list. One of &#x60;asc&#x60; or &#x60;desc&#x60; for ascending and descending respectively. Defaults to &#x60;asc&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListChallengeResponse listChallenge(String serviceSid, String identity, String factorSid, ChallengeEnumChallengeStatuses status, ChallengeEnumListOrders order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListChallengeResponse> localVarResp = listChallengeWithHttpInfo(serviceSid, identity, factorSid, status, order, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Challenges for a Factor.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (optional)
     * @param status The Status of the Challenges to fetch. One of &#x60;pending&#x60;, &#x60;expired&#x60;, &#x60;approved&#x60; or &#x60;denied&#x60;. (optional)
     * @param order The desired sort order of the Challenges list. One of &#x60;asc&#x60; or &#x60;desc&#x60; for ascending and descending respectively. Defaults to &#x60;asc&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChallengeResponse> listChallengeWithHttpInfo(String serviceSid, String identity, String factorSid, ChallengeEnumChallengeStatuses status, ChallengeEnumListOrders order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listChallengeValidateBeforeCall(serviceSid, identity, factorSid, status, order, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListChallengeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Challenges for a Factor.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param factorSid The unique SID identifier of the Factor. (optional)
     * @param status The Status of the Challenges to fetch. One of &#x60;pending&#x60;, &#x60;expired&#x60;, &#x60;approved&#x60; or &#x60;denied&#x60;. (optional)
     * @param order The desired sort order of the Challenges list. One of &#x60;asc&#x60; or &#x60;desc&#x60; for ascending and descending respectively. Defaults to &#x60;asc&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChallengeAsync(String serviceSid, String identity, String factorSid, ChallengeEnumChallengeStatuses status, ChallengeEnumListOrders order, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListChallengeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChallengeValidateBeforeCall(serviceSid, identity, factorSid, status, order, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListChallengeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChallenge
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param authPayload The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. For &#x60;Push&#x60; this value can be up to 5456 characters in length (optional)
     * @param metadata Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChallengeCall(String serviceSid, String identity, String sid, String authPayload, Object metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authPayload != null) {
            localVarFormParams.put("AuthPayload", authPayload);
        }

        if (metadata != null) {
            localVarFormParams.put("Metadata", metadata);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChallengeValidateBeforeCall(String serviceSid, String identity, String sid, String authPayload, Object metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateChallenge(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling updateChallenge(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateChallenge(Async)");
        }

        return updateChallengeCall(serviceSid, identity, sid, authPayload, metadata, _callback);

    }

    /**
     * 
     * Verify a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param authPayload The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. For &#x60;Push&#x60; this value can be up to 5456 characters in length (optional)
     * @param metadata Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @return VerifyV2ServiceEntityChallenge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceEntityChallenge updateChallenge(String serviceSid, String identity, String sid, String authPayload, Object metadata) throws ApiException {
        ApiResponse<VerifyV2ServiceEntityChallenge> localVarResp = updateChallengeWithHttpInfo(serviceSid, identity, sid, authPayload, metadata);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param authPayload The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. For &#x60;Push&#x60; this value can be up to 5456 characters in length (optional)
     * @param metadata Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @return ApiResponse&lt;VerifyV2ServiceEntityChallenge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceEntityChallenge> updateChallengeWithHttpInfo(String serviceSid, String identity, String sid, String authPayload, Object metadata) throws ApiException {
        okhttp3.Call localVarCall = updateChallengeValidateBeforeCall(serviceSid, identity, sid, authPayload, metadata, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify a specific Challenge.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param identity Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters. (required)
     * @param sid A 34 character string that uniquely identifies this Challenge. (required)
     * @param authPayload The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. For &#x60;Push&#x60; this value can be up to 5456 characters in length (optional)
     * @param metadata Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChallengeAsync(String serviceSid, String identity, String sid, String authPayload, Object metadata, final ApiCallback<VerifyV2ServiceEntityChallenge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChallengeValidateBeforeCall(serviceSid, identity, sid, authPayload, metadata, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceEntityChallenge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
