/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListServiceResponse;
import org.openapitools.client.model.VerifyV2Service;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createService
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: &#x60;Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code&#x60; (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in &#x60;date_created&#x60;, please use that one instead. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String friendlyName, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeLength != null) {
            localVarFormParams.put("CodeLength", codeLength);
        }

        if (customCodeEnabled != null) {
            localVarFormParams.put("CustomCodeEnabled", customCodeEnabled);
        }

        if (defaultTemplateSid != null) {
            localVarFormParams.put("DefaultTemplateSid", defaultTemplateSid);
        }

        if (doNotShareWarningEnabled != null) {
            localVarFormParams.put("DoNotShareWarningEnabled", doNotShareWarningEnabled);
        }

        if (dtmfInputRequired != null) {
            localVarFormParams.put("DtmfInputRequired", dtmfInputRequired);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (lookupEnabled != null) {
            localVarFormParams.put("LookupEnabled", lookupEnabled);
        }

        if (psd2Enabled != null) {
            localVarFormParams.put("Psd2Enabled", psd2Enabled);
        }

        if (pushApnCredentialSid != null) {
            localVarFormParams.put("Push.ApnCredentialSid", pushApnCredentialSid);
        }

        if (pushFcmCredentialSid != null) {
            localVarFormParams.put("Push.FcmCredentialSid", pushFcmCredentialSid);
        }

        if (pushIncludeDate != null) {
            localVarFormParams.put("Push.IncludeDate", pushIncludeDate);
        }

        if (skipSmsToLandlines != null) {
            localVarFormParams.put("SkipSmsToLandlines", skipSmsToLandlines);
        }

        if (totpCodeLength != null) {
            localVarFormParams.put("Totp.CodeLength", totpCodeLength);
        }

        if (totpIssuer != null) {
            localVarFormParams.put("Totp.Issuer", totpIssuer);
        }

        if (totpSkew != null) {
            localVarFormParams.put("Totp.Skew", totpSkew);
        }

        if (totpTimeStep != null) {
            localVarFormParams.put("Totp.TimeStep", totpTimeStep);
        }

        if (ttsName != null) {
            localVarFormParams.put("TtsName", ttsName);
        }

        if (verifyEventSubscriptionEnabled != null) {
            localVarFormParams.put("VerifyEventSubscriptionEnabled", verifyEventSubscriptionEnabled);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String friendlyName, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createService(Async)");
        }

        return createServiceCall(friendlyName, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, _callback);

    }

    /**
     * 
     * Create a new Verification Service.
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: &#x60;Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code&#x60; (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in &#x60;date_created&#x60;, please use that one instead. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @return VerifyV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2Service createService(String friendlyName, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled) throws ApiException {
        ApiResponse<VerifyV2Service> localVarResp = createServiceWithHttpInfo(friendlyName, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Verification Service.
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: &#x60;Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code&#x60; (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in &#x60;date_created&#x60;, please use that one instead. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @return ApiResponse&lt;VerifyV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2Service> createServiceWithHttpInfo(String friendlyName, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, null);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Verification Service.
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: &#x60;Your AppName verification code is: 1234. Don’t share this code with anyone; our employees will never ask for the code&#x60; (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in &#x60;date_created&#x60;, please use that one instead. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String friendlyName, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback<VerifyV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteService(Async)");
        }

        return deleteServiceCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String sid) throws ApiException {
        deleteServiceWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchService
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchService(Async)");
        }

        return fetchServiceCall(sid, _callback);

    }

    /**
     * 
     * Fetch specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. (required)
     * @return VerifyV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2Service fetchService(String sid) throws ApiException {
        ApiResponse<VerifyV2Service> localVarResp = fetchServiceWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. (required)
     * @return ApiResponse&lt;VerifyV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2Service> fetchServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Verification Service Instance.
     * @param sid The Twilio-provided string that uniquely identifies the Verification Service resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceAsync(String sid, final ApiCallback<VerifyV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listService
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listServiceCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Verification Services for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceResponse listService(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceResponse> localVarResp = listServiceWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Verification Services for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceResponse> listServiceWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Verification Services for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String sid, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, String friendlyName, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeLength != null) {
            localVarFormParams.put("CodeLength", codeLength);
        }

        if (customCodeEnabled != null) {
            localVarFormParams.put("CustomCodeEnabled", customCodeEnabled);
        }

        if (defaultTemplateSid != null) {
            localVarFormParams.put("DefaultTemplateSid", defaultTemplateSid);
        }

        if (doNotShareWarningEnabled != null) {
            localVarFormParams.put("DoNotShareWarningEnabled", doNotShareWarningEnabled);
        }

        if (dtmfInputRequired != null) {
            localVarFormParams.put("DtmfInputRequired", dtmfInputRequired);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (lookupEnabled != null) {
            localVarFormParams.put("LookupEnabled", lookupEnabled);
        }

        if (psd2Enabled != null) {
            localVarFormParams.put("Psd2Enabled", psd2Enabled);
        }

        if (pushApnCredentialSid != null) {
            localVarFormParams.put("Push.ApnCredentialSid", pushApnCredentialSid);
        }

        if (pushFcmCredentialSid != null) {
            localVarFormParams.put("Push.FcmCredentialSid", pushFcmCredentialSid);
        }

        if (pushIncludeDate != null) {
            localVarFormParams.put("Push.IncludeDate", pushIncludeDate);
        }

        if (skipSmsToLandlines != null) {
            localVarFormParams.put("SkipSmsToLandlines", skipSmsToLandlines);
        }

        if (totpCodeLength != null) {
            localVarFormParams.put("Totp.CodeLength", totpCodeLength);
        }

        if (totpIssuer != null) {
            localVarFormParams.put("Totp.Issuer", totpIssuer);
        }

        if (totpSkew != null) {
            localVarFormParams.put("Totp.Skew", totpSkew);
        }

        if (totpTimeStep != null) {
            localVarFormParams.put("Totp.TimeStep", totpTimeStep);
        }

        if (ttsName != null) {
            localVarFormParams.put("TtsName", ttsName);
        }

        if (verifyEventSubscriptionEnabled != null) {
            localVarFormParams.put("VerifyEventSubscriptionEnabled", verifyEventSubscriptionEnabled);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String sid, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, String friendlyName, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateService(Async)");
        }

        return updateServiceCall(sid, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, friendlyName, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, _callback);

    }

    /**
     * 
     * Update a specific Verification Service.
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @return VerifyV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2Service updateService(String sid, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, String friendlyName, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled) throws ApiException {
        ApiResponse<VerifyV2Service> localVarResp = updateServiceWithHttpInfo(sid, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, friendlyName, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a specific Verification Service.
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @return ApiResponse&lt;VerifyV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2Service> updateServiceWithHttpInfo(String sid, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, String friendlyName, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, friendlyName, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, null);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a specific Verification Service.
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param codeLength The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive. (optional)
     * @param customCodeEnabled Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers. (optional)
     * @param defaultTemplateSid The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only. (optional)
     * @param doNotShareWarningEnabled Whether to add a privacy warning at the end of an SMS. **Disabled by default and applies only for SMS.** (optional)
     * @param dtmfInputRequired Whether to ask the user to press a number before delivering the verify code in a phone call. (optional)
     * @param friendlyName A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.** (optional)
     * @param lookupEnabled Whether to perform a lookup with each verification started and return info about the phone number. (optional)
     * @param psd2Enabled Whether to pass PSD2 transaction parameters when starting a verification. (optional)
     * @param pushApnCredentialSid Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushFcmCredentialSid Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource) (optional)
     * @param pushIncludeDate Optional configuration for the Push factors. If true, include the date in the Challenge&#39;s response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource’s details parameter for more info. Default: false. **Deprecated** do not use this parameter. (optional)
     * @param skipSmsToLandlines Whether to skip sending SMS verifications to landlines. Requires &#x60;lookup_enabled&#x60;. (optional)
     * @param totpCodeLength Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6 (optional)
     * @param totpIssuer Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. (optional)
     * @param totpSkew Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1 (optional)
     * @param totpTimeStep Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds (optional)
     * @param ttsName The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages. (optional)
     * @param verifyEventSubscriptionEnabled Whether to allow verifications from the service to reach the stream-events sinks if configured (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String sid, Integer codeLength, Boolean customCodeEnabled, String defaultTemplateSid, Boolean doNotShareWarningEnabled, Boolean dtmfInputRequired, String friendlyName, Boolean lookupEnabled, Boolean psd2Enabled, String pushApnCredentialSid, String pushFcmCredentialSid, Boolean pushIncludeDate, Boolean skipSmsToLandlines, Integer totpCodeLength, String totpIssuer, Integer totpSkew, Integer totpTimeStep, String ttsName, Boolean verifyEventSubscriptionEnabled, final ApiCallback<VerifyV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, codeLength, customCodeEnabled, defaultTemplateSid, doNotShareWarningEnabled, dtmfInputRequired, friendlyName, lookupEnabled, psd2Enabled, pushApnCredentialSid, pushFcmCredentialSid, pushIncludeDate, skipSmsToLandlines, totpCodeLength, totpIssuer, totpSkew, totpTimeStep, ttsName, verifyEventSubscriptionEnabled, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
