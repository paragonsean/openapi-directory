/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListVerificationAttemptResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.VerificationAttemptEnumChannels;
import org.openapitools.client.model.VerificationAttemptEnumConversionStatus;
import org.openapitools.client.model.VerifyV2VerificationAttempt;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2VerificationAttemptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2VerificationAttemptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2VerificationAttemptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchVerificationAttempt
     * @param sid The unique SID identifier of a Verification Attempt (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationAttemptCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Attempts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVerificationAttemptValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchVerificationAttempt(Async)");
        }

        return fetchVerificationAttemptCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific verification attempt.
     * @param sid The unique SID identifier of a Verification Attempt (required)
     * @return VerifyV2VerificationAttempt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2VerificationAttempt fetchVerificationAttempt(String sid) throws ApiException {
        ApiResponse<VerifyV2VerificationAttempt> localVarResp = fetchVerificationAttemptWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific verification attempt.
     * @param sid The unique SID identifier of a Verification Attempt (required)
     * @return ApiResponse&lt;VerifyV2VerificationAttempt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2VerificationAttempt> fetchVerificationAttemptWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchVerificationAttemptValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2VerificationAttempt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific verification attempt.
     * @param sid The unique SID identifier of a Verification Attempt (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVerificationAttemptAsync(String sid, final ApiCallback<VerifyV2VerificationAttempt> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVerificationAttemptValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2VerificationAttempt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVerificationAttempt
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param channelDataTo Destination of a verification. It is phone number in E.164 format. (optional)
     * @param country Filter used to query Verification Attempts sent to the specified destination country. (optional)
     * @param channel Filter used to query Verification Attempts by communication channel. Valid values are &#x60;SMS&#x60; and &#x60;CALL&#x60; (optional)
     * @param verifyServiceSid Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned. (optional)
     * @param verificationSid Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned. (optional)
     * @param status Filter used to query Verification Attempts by conversion status. Valid values are &#x60;UNCONVERTED&#x60;, for attempts that were not converted, and &#x60;CONVERTED&#x60;, for attempts that were confirmed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVerificationAttemptCall(OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String channelDataTo, String country, VerificationAttemptEnumChannels channel, String verifyServiceSid, String verificationSid, VerificationAttemptEnumConversionStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Attempts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateCreatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedAfter", dateCreatedAfter));
        }

        if (dateCreatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedBefore", dateCreatedBefore));
        }

        if (channelDataTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChannelData.To", channelDataTo));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Country", country));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Channel", channel));
        }

        if (verifyServiceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VerifyServiceSid", verifyServiceSid));
        }

        if (verificationSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VerificationSid", verificationSid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVerificationAttemptValidateBeforeCall(OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String channelDataTo, String country, VerificationAttemptEnumChannels channel, String verifyServiceSid, String verificationSid, VerificationAttemptEnumConversionStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listVerificationAttemptCall(dateCreatedAfter, dateCreatedBefore, channelDataTo, country, channel, verifyServiceSid, verificationSid, status, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * List all the verification attempts for a given Account.
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param channelDataTo Destination of a verification. It is phone number in E.164 format. (optional)
     * @param country Filter used to query Verification Attempts sent to the specified destination country. (optional)
     * @param channel Filter used to query Verification Attempts by communication channel. Valid values are &#x60;SMS&#x60; and &#x60;CALL&#x60; (optional)
     * @param verifyServiceSid Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned. (optional)
     * @param verificationSid Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned. (optional)
     * @param status Filter used to query Verification Attempts by conversion status. Valid values are &#x60;UNCONVERTED&#x60;, for attempts that were not converted, and &#x60;CONVERTED&#x60;, for attempts that were confirmed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListVerificationAttemptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVerificationAttemptResponse listVerificationAttempt(OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String channelDataTo, String country, VerificationAttemptEnumChannels channel, String verifyServiceSid, String verificationSid, VerificationAttemptEnumConversionStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListVerificationAttemptResponse> localVarResp = listVerificationAttemptWithHttpInfo(dateCreatedAfter, dateCreatedBefore, channelDataTo, country, channel, verifyServiceSid, verificationSid, status, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the verification attempts for a given Account.
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param channelDataTo Destination of a verification. It is phone number in E.164 format. (optional)
     * @param country Filter used to query Verification Attempts sent to the specified destination country. (optional)
     * @param channel Filter used to query Verification Attempts by communication channel. Valid values are &#x60;SMS&#x60; and &#x60;CALL&#x60; (optional)
     * @param verifyServiceSid Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned. (optional)
     * @param verificationSid Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned. (optional)
     * @param status Filter used to query Verification Attempts by conversion status. Valid values are &#x60;UNCONVERTED&#x60;, for attempts that were not converted, and &#x60;CONVERTED&#x60;, for attempts that were confirmed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListVerificationAttemptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVerificationAttemptResponse> listVerificationAttemptWithHttpInfo(OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String channelDataTo, String country, VerificationAttemptEnumChannels channel, String verifyServiceSid, String verificationSid, VerificationAttemptEnumConversionStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listVerificationAttemptValidateBeforeCall(dateCreatedAfter, dateCreatedBefore, channelDataTo, country, channel, verifyServiceSid, verificationSid, status, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListVerificationAttemptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the verification attempts for a given Account.
     * @param dateCreatedAfter Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param dateCreatedBefore Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z. (optional)
     * @param channelDataTo Destination of a verification. It is phone number in E.164 format. (optional)
     * @param country Filter used to query Verification Attempts sent to the specified destination country. (optional)
     * @param channel Filter used to query Verification Attempts by communication channel. Valid values are &#x60;SMS&#x60; and &#x60;CALL&#x60; (optional)
     * @param verifyServiceSid Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned. (optional)
     * @param verificationSid Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned. (optional)
     * @param status Filter used to query Verification Attempts by conversion status. Valid values are &#x60;UNCONVERTED&#x60;, for attempts that were not converted, and &#x60;CONVERTED&#x60;, for attempts that were confirmed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVerificationAttemptAsync(OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, String channelDataTo, String country, VerificationAttemptEnumChannels channel, String verifyServiceSid, String verificationSid, VerificationAttemptEnumConversionStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListVerificationAttemptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVerificationAttemptValidateBeforeCall(dateCreatedAfter, dateCreatedBefore, channelDataTo, country, channel, verifyServiceSid, verificationSid, status, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListVerificationAttemptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
