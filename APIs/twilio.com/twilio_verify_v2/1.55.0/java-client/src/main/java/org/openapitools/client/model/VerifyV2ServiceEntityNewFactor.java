/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NewFactorEnumFactorStatuses;
import org.openapitools.client.model.NewFactorEnumFactorTypes;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifyV2ServiceEntityNewFactor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:27.328026-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyV2ServiceEntityNewFactor {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_BINDING = "binding";
  @SerializedName(SERIALIZED_NAME_BINDING)
  private Object binding = null;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Object config = null;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_ENTITY_SID = "entity_sid";
  @SerializedName(SERIALIZED_NAME_ENTITY_SID)
  private String entitySid;

  public static final String SERIALIZED_NAME_FACTOR_TYPE = "factor_type";
  @SerializedName(SERIALIZED_NAME_FACTOR_TYPE)
  private NewFactorEnumFactorTypes factorType;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private String identity;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_SERVICE_SID = "service_sid";
  @SerializedName(SERIALIZED_NAME_SERVICE_SID)
  private String serviceSid;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NewFactorEnumFactorStatuses status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public VerifyV2ServiceEntityNewFactor() {
  }

  public VerifyV2ServiceEntityNewFactor accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique SID identifier of the Account.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VerifyV2ServiceEntityNewFactor binding(Object binding) {
    this.binding = binding;
    return this;
  }

  /**
   * Contains the &#x60;factor_type&#x60; specific secret and metadata. For push, this is &#x60;binding.public_key&#x60; and &#x60;binding.alg&#x60;. For totp, this is &#x60;binding.secret&#x60; and &#x60;binding.uri&#x60;. The &#x60;binding.uri&#x60; property is generated following the [google authenticator key URI format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format), and &#x60;Factor.friendly_name&#x60; is used for the “accountname” value and &#x60;Service.friendly_name&#x60; or &#x60;Service.totp.issuer&#x60; is used for the &#x60;issuer&#x60; value.   The Binding property is ONLY returned upon Factor creation.
   * @return binding
   */
  @javax.annotation.Nullable
  public Object getBinding() {
    return binding;
  }

  public void setBinding(Object binding) {
    this.binding = binding;
  }


  public VerifyV2ServiceEntityNewFactor config(Object config) {
    this.config = config;
    return this;
  }

  /**
   * An object that contains configurations specific to a &#x60;factor_type&#x60;.
   * @return config
   */
  @javax.annotation.Nullable
  public Object getConfig() {
    return config;
  }

  public void setConfig(Object config) {
    this.config = config;
  }


  public VerifyV2ServiceEntityNewFactor dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VerifyV2ServiceEntityNewFactor dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public VerifyV2ServiceEntityNewFactor entitySid(String entitySid) {
    this.entitySid = entitySid;
    return this;
  }

  /**
   * The unique SID identifier of the Entity.
   * @return entitySid
   */
  @javax.annotation.Nullable
  public String getEntitySid() {
    return entitySid;
  }

  public void setEntitySid(String entitySid) {
    this.entitySid = entitySid;
  }


  public VerifyV2ServiceEntityNewFactor factorType(NewFactorEnumFactorTypes factorType) {
    this.factorType = factorType;
    return this;
  }

  /**
   * Get factorType
   * @return factorType
   */
  @javax.annotation.Nullable
  public NewFactorEnumFactorTypes getFactorType() {
    return factorType;
  }

  public void setFactorType(NewFactorEnumFactorTypes factorType) {
    this.factorType = factorType;
  }


  public VerifyV2ServiceEntityNewFactor friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For &#x60;factor_type&#x60; &#x60;push&#x60;, this could be a device name. For &#x60;factor_type&#x60; &#x60;totp&#x60;, this value is used as the “account name” in constructing the &#x60;binding.uri&#x60; property. At the same time, we recommend avoiding providing PII.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public VerifyV2ServiceEntityNewFactor identity(String identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   * @return identity
   */
  @javax.annotation.Nullable
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }


  public VerifyV2ServiceEntityNewFactor metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\&quot;os\&quot;: \&quot;Android\&quot;}&#x60;. Can be up to 1024 characters in length.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public VerifyV2ServiceEntityNewFactor serviceSid(String serviceSid) {
    this.serviceSid = serviceSid;
    return this;
  }

  /**
   * The unique SID identifier of the Service.
   * @return serviceSid
   */
  @javax.annotation.Nullable
  public String getServiceSid() {
    return serviceSid;
  }

  public void setServiceSid(String serviceSid) {
    this.serviceSid = serviceSid;
  }


  public VerifyV2ServiceEntityNewFactor sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * A 34 character string that uniquely identifies this Factor.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VerifyV2ServiceEntityNewFactor status(NewFactorEnumFactorStatuses status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public NewFactorEnumFactorStatuses getStatus() {
    return status;
  }

  public void setStatus(NewFactorEnumFactorStatuses status) {
    this.status = status;
  }


  public VerifyV2ServiceEntityNewFactor url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyV2ServiceEntityNewFactor verifyV2ServiceEntityNewFactor = (VerifyV2ServiceEntityNewFactor) o;
    return Objects.equals(this.accountSid, verifyV2ServiceEntityNewFactor.accountSid) &&
        Objects.equals(this.binding, verifyV2ServiceEntityNewFactor.binding) &&
        Objects.equals(this.config, verifyV2ServiceEntityNewFactor.config) &&
        Objects.equals(this.dateCreated, verifyV2ServiceEntityNewFactor.dateCreated) &&
        Objects.equals(this.dateUpdated, verifyV2ServiceEntityNewFactor.dateUpdated) &&
        Objects.equals(this.entitySid, verifyV2ServiceEntityNewFactor.entitySid) &&
        Objects.equals(this.factorType, verifyV2ServiceEntityNewFactor.factorType) &&
        Objects.equals(this.friendlyName, verifyV2ServiceEntityNewFactor.friendlyName) &&
        Objects.equals(this.identity, verifyV2ServiceEntityNewFactor.identity) &&
        Objects.equals(this.metadata, verifyV2ServiceEntityNewFactor.metadata) &&
        Objects.equals(this.serviceSid, verifyV2ServiceEntityNewFactor.serviceSid) &&
        Objects.equals(this.sid, verifyV2ServiceEntityNewFactor.sid) &&
        Objects.equals(this.status, verifyV2ServiceEntityNewFactor.status) &&
        Objects.equals(this.url, verifyV2ServiceEntityNewFactor.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, binding, config, dateCreated, dateUpdated, entitySid, factorType, friendlyName, identity, metadata, serviceSid, sid, status, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyV2ServiceEntityNewFactor {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    binding: ").append(toIndentedString(binding)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    entitySid: ").append(toIndentedString(entitySid)).append("\n");
    sb.append("    factorType: ").append(toIndentedString(factorType)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    serviceSid: ").append(toIndentedString(serviceSid)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("binding");
    openapiFields.add("config");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("entity_sid");
    openapiFields.add("factor_type");
    openapiFields.add("friendly_name");
    openapiFields.add("identity");
    openapiFields.add("metadata");
    openapiFields.add("service_sid");
    openapiFields.add("sid");
    openapiFields.add("status");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyV2ServiceEntityNewFactor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyV2ServiceEntityNewFactor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyV2ServiceEntityNewFactor is not found in the empty JSON string", VerifyV2ServiceEntityNewFactor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyV2ServiceEntityNewFactor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyV2ServiceEntityNewFactor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("entity_sid") != null && !jsonObj.get("entity_sid").isJsonNull()) && !jsonObj.get("entity_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_sid").toString()));
      }
      if ((jsonObj.get("factor_type") != null && !jsonObj.get("factor_type").isJsonNull()) && !jsonObj.get("factor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factor_type").toString()));
      }
      // validate the optional field `factor_type`
      if (jsonObj.get("factor_type") != null && !jsonObj.get("factor_type").isJsonNull()) {
        NewFactorEnumFactorTypes.validateJsonElement(jsonObj.get("factor_type"));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("identity") != null && !jsonObj.get("identity").isJsonNull()) && !jsonObj.get("identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity").toString()));
      }
      if ((jsonObj.get("service_sid") != null && !jsonObj.get("service_sid").isJsonNull()) && !jsonObj.get("service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_sid").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        NewFactorEnumFactorStatuses.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyV2ServiceEntityNewFactor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyV2ServiceEntityNewFactor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyV2ServiceEntityNewFactor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyV2ServiceEntityNewFactor.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyV2ServiceEntityNewFactor>() {
           @Override
           public void write(JsonWriter out, VerifyV2ServiceEntityNewFactor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyV2ServiceEntityNewFactor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyV2ServiceEntityNewFactor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyV2ServiceEntityNewFactor
   * @throws IOException if the JSON string is invalid with respect to VerifyV2ServiceEntityNewFactor
   */
  public static VerifyV2ServiceEntityNewFactor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyV2ServiceEntityNewFactor.class);
  }

  /**
   * Convert an instance of VerifyV2ServiceEntityNewFactor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

