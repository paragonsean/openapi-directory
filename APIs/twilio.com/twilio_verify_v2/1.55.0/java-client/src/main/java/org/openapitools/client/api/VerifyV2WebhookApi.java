/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListWebhookResponse;
import org.openapitools.client.model.VerifyV2ServiceWebhook;
import org.openapitools.client.model.WebhookEnumStatus;
import org.openapitools.client.model.WebhookEnumVersion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyV2WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyV2WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyV2WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWebhook
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (required)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param status  (optional)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookCall(String serviceSid, List<String> eventTypes, String friendlyName, String webhookUrl, WebhookEnumStatus status, WebhookEnumVersion version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Webhooks"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarFormParams.put("EventTypes", eventTypes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (version != null) {
            localVarFormParams.put("Version", version);
        }

        if (webhookUrl != null) {
            localVarFormParams.put("WebhookUrl", webhookUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(String serviceSid, List<String> eventTypes, String friendlyName, String webhookUrl, WebhookEnumStatus status, WebhookEnumVersion version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createWebhook(Async)");
        }

        // verify the required parameter 'eventTypes' is set
        if (eventTypes == null) {
            throw new ApiException("Missing the required parameter 'eventTypes' when calling createWebhook(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createWebhook(Async)");
        }

        // verify the required parameter 'webhookUrl' is set
        if (webhookUrl == null) {
            throw new ApiException("Missing the required parameter 'webhookUrl' when calling createWebhook(Async)");
        }

        return createWebhookCall(serviceSid, eventTypes, friendlyName, webhookUrl, status, version, _callback);

    }

    /**
     * 
     * Create a new Webhook for the Service
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (required)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param status  (optional)
     * @param version  (optional)
     * @return VerifyV2ServiceWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceWebhook createWebhook(String serviceSid, List<String> eventTypes, String friendlyName, String webhookUrl, WebhookEnumStatus status, WebhookEnumVersion version) throws ApiException {
        ApiResponse<VerifyV2ServiceWebhook> localVarResp = createWebhookWithHttpInfo(serviceSid, eventTypes, friendlyName, webhookUrl, status, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Webhook for the Service
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (required)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param status  (optional)
     * @param version  (optional)
     * @return ApiResponse&lt;VerifyV2ServiceWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceWebhook> createWebhookWithHttpInfo(String serviceSid, List<String> eventTypes, String friendlyName, String webhookUrl, WebhookEnumStatus status, WebhookEnumVersion version) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(serviceSid, eventTypes, friendlyName, webhookUrl, status, version, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Webhook for the Service
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (required)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param status  (optional)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookAsync(String serviceSid, List<String> eventTypes, String friendlyName, String webhookUrl, WebhookEnumStatus status, WebhookEnumVersion version, final ApiCallback<VerifyV2ServiceWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(serviceSid, eventTypes, friendlyName, webhookUrl, status, version, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhook
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * Delete a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebhook(String serviceSid, String sid) throws ApiException {
        deleteWebhookWithHttpInfo(serviceSid, sid);
    }

    /**
     * 
     * Delete a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(serviceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookAsync(String serviceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(serviceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchWebhook
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWebhookCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWebhookValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWebhook(Async)");
        }

        return fetchWebhookCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * Fetch a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @return VerifyV2ServiceWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceWebhook fetchWebhook(String serviceSid, String sid) throws ApiException {
        ApiResponse<VerifyV2ServiceWebhook> localVarResp = fetchWebhookWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @return ApiResponse&lt;VerifyV2ServiceWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceWebhook> fetchWebhookWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWebhookValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Webhook.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWebhookAsync(String serviceSid, String sid, final ApiCallback<VerifyV2ServiceWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWebhookValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhook
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Webhooks"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhookValidateBeforeCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listWebhook(Async)");
        }

        return listWebhookCall(serviceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Webhooks for a Service.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWebhookResponse listWebhook(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWebhookResponse> localVarResp = listWebhookWithHttpInfo(serviceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Webhooks for a Service.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWebhookResponse> listWebhookWithHttpInfo(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWebhookValidateBeforeCall(serviceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Webhooks for a Service.
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookAsync(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhookValidateBeforeCall(serviceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebhook
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (optional)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (optional)
     * @param status  (optional)
     * @param version  (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookCall(String serviceSid, String sid, List<String> eventTypes, String friendlyName, WebhookEnumStatus status, WebhookEnumVersion version, String webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://verify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarFormParams.put("EventTypes", eventTypes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (version != null) {
            localVarFormParams.put("Version", version);
        }

        if (webhookUrl != null) {
            localVarFormParams.put("WebhookUrl", webhookUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(String serviceSid, String sid, List<String> eventTypes, String friendlyName, WebhookEnumStatus status, WebhookEnumVersion version, String webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(serviceSid, sid, eventTypes, friendlyName, status, version, webhookUrl, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (optional)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (optional)
     * @param status  (optional)
     * @param version  (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @return VerifyV2ServiceWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyV2ServiceWebhook updateWebhook(String serviceSid, String sid, List<String> eventTypes, String friendlyName, WebhookEnumStatus status, WebhookEnumVersion version, String webhookUrl) throws ApiException {
        ApiResponse<VerifyV2ServiceWebhook> localVarResp = updateWebhookWithHttpInfo(serviceSid, sid, eventTypes, friendlyName, status, version, webhookUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (optional)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (optional)
     * @param status  (optional)
     * @param version  (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @return ApiResponse&lt;VerifyV2ServiceWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyV2ServiceWebhook> updateWebhookWithHttpInfo(String serviceSid, String sid, List<String> eventTypes, String friendlyName, WebhookEnumStatus status, WebhookEnumVersion version, String webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(serviceSid, sid, eventTypes, friendlyName, status, version, webhookUrl, null);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param eventTypes The array of events that this Webhook is subscribed to. Possible event types: &#x60;*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied&#x60; (optional)
     * @param friendlyName The string that you assigned to describe the webhook. **This value should not contain PII.** (optional)
     * @param status  (optional)
     * @param version  (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookAsync(String serviceSid, String sid, List<String> eventTypes, String friendlyName, WebhookEnumStatus status, WebhookEnumVersion version, String webhookUrl, final ApiCallback<VerifyV2ServiceWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(serviceSid, sid, eventTypes, friendlyName, status, version, webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<VerifyV2ServiceWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
