/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChallengeEnumChallengeStatuses;
import org.openapitools.client.model.ChallengeEnumListOrders;
import org.openapitools.client.model.ListChallengeResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.VerifyV2ServiceEntityChallenge;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VerifyV2ChallengeApi
 */
@Disabled
public class VerifyV2ChallengeApiTest {

    private final VerifyV2ChallengeApi api = new VerifyV2ChallengeApi();

    /**
     * Create a new Challenge for the Factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChallengeTest() throws ApiException {
        String serviceSid = null;
        String identity = null;
        String factorSid = null;
        String authPayload = null;
        List<Object> detailsFields = null;
        String detailsMessage = null;
        OffsetDateTime expirationDate = null;
        Object hiddenDetails = null;
        VerifyV2ServiceEntityChallenge response = api.createChallenge(serviceSid, identity, factorSid, authPayload, detailsFields, detailsMessage, expirationDate, hiddenDetails);
        // TODO: test validations
    }

    /**
     * Fetch a specific Challenge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchChallengeTest() throws ApiException {
        String serviceSid = null;
        String identity = null;
        String sid = null;
        VerifyV2ServiceEntityChallenge response = api.fetchChallenge(serviceSid, identity, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Challenges for a Factor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChallengeTest() throws ApiException {
        String serviceSid = null;
        String identity = null;
        String factorSid = null;
        ChallengeEnumChallengeStatuses status = null;
        ChallengeEnumListOrders order = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListChallengeResponse response = api.listChallenge(serviceSid, identity, factorSid, status, order, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Verify a specific Challenge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChallengeTest() throws ApiException {
        String serviceSid = null;
        String identity = null;
        String sid = null;
        String authPayload = null;
        Object metadata = null;
        VerifyV2ServiceEntityChallenge response = api.updateChallenge(serviceSid, identity, sid, authPayload, metadata);
        // TODO: test validations
    }

}
