/*
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListBucketResponse;
import org.openapitools.client.model.VerifyV2ServiceRateLimitBucket;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VerifyV2BucketApi
 */
@Disabled
public class VerifyV2BucketApiTest {

    private final VerifyV2BucketApi api = new VerifyV2BucketApi();

    /**
     * Create a new Bucket for a Rate Limit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBucketTest() throws ApiException {
        String serviceSid = null;
        String rateLimitSid = null;
        Integer interval = null;
        Integer max = null;
        VerifyV2ServiceRateLimitBucket response = api.createBucket(serviceSid, rateLimitSid, interval, max);
        // TODO: test validations
    }

    /**
     * Delete a specific Bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketTest() throws ApiException {
        String serviceSid = null;
        String rateLimitSid = null;
        String sid = null;
        api.deleteBucket(serviceSid, rateLimitSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific Bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchBucketTest() throws ApiException {
        String serviceSid = null;
        String rateLimitSid = null;
        String sid = null;
        VerifyV2ServiceRateLimitBucket response = api.fetchBucket(serviceSid, rateLimitSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Buckets for a Rate Limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBucketTest() throws ApiException {
        String serviceSid = null;
        String rateLimitSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListBucketResponse response = api.listBucket(serviceSid, rateLimitSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update a specific Bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBucketTest() throws ApiException {
        String serviceSid = null;
        String rateLimitSid = null;
        String sid = null;
        Integer interval = null;
        Integer max = null;
        VerifyV2ServiceRateLimitBucket response = api.updateBucket(serviceSid, rateLimitSid, sid, interval, max);
        // TODO: test validations
    }

}
