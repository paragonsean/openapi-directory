# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.challenge_enum_challenge_reasons import ChallengeEnumChallengeReasons
from openapi_server.models.challenge_enum_challenge_statuses import ChallengeEnumChallengeStatuses
from openapi_server.models.challenge_enum_factor_types import ChallengeEnumFactorTypes
import re
from openapi_server import util


class VerifyV2ServiceEntityChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_responded: datetime=None, date_updated: datetime=None, details: object=None, entity_sid: str=None, expiration_date: datetime=None, factor_sid: str=None, factor_type: ChallengeEnumFactorTypes=None, hidden_details: object=None, identity: str=None, links: object=None, metadata: object=None, responded_reason: ChallengeEnumChallengeReasons=None, service_sid: str=None, sid: str=None, status: ChallengeEnumChallengeStatuses=None, url: str=None):
        """VerifyV2ServiceEntityChallenge - a model defined in OpenAPI

        :param account_sid: The account_sid of this VerifyV2ServiceEntityChallenge.
        :param date_created: The date_created of this VerifyV2ServiceEntityChallenge.
        :param date_responded: The date_responded of this VerifyV2ServiceEntityChallenge.
        :param date_updated: The date_updated of this VerifyV2ServiceEntityChallenge.
        :param details: The details of this VerifyV2ServiceEntityChallenge.
        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityChallenge.
        :param expiration_date: The expiration_date of this VerifyV2ServiceEntityChallenge.
        :param factor_sid: The factor_sid of this VerifyV2ServiceEntityChallenge.
        :param factor_type: The factor_type of this VerifyV2ServiceEntityChallenge.
        :param hidden_details: The hidden_details of this VerifyV2ServiceEntityChallenge.
        :param identity: The identity of this VerifyV2ServiceEntityChallenge.
        :param links: The links of this VerifyV2ServiceEntityChallenge.
        :param metadata: The metadata of this VerifyV2ServiceEntityChallenge.
        :param responded_reason: The responded_reason of this VerifyV2ServiceEntityChallenge.
        :param service_sid: The service_sid of this VerifyV2ServiceEntityChallenge.
        :param sid: The sid of this VerifyV2ServiceEntityChallenge.
        :param status: The status of this VerifyV2ServiceEntityChallenge.
        :param url: The url of this VerifyV2ServiceEntityChallenge.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_responded': datetime,
            'date_updated': datetime,
            'details': object,
            'entity_sid': str,
            'expiration_date': datetime,
            'factor_sid': str,
            'factor_type': ChallengeEnumFactorTypes,
            'hidden_details': object,
            'identity': str,
            'links': object,
            'metadata': object,
            'responded_reason': ChallengeEnumChallengeReasons,
            'service_sid': str,
            'sid': str,
            'status': ChallengeEnumChallengeStatuses,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_responded': 'date_responded',
            'date_updated': 'date_updated',
            'details': 'details',
            'entity_sid': 'entity_sid',
            'expiration_date': 'expiration_date',
            'factor_sid': 'factor_sid',
            'factor_type': 'factor_type',
            'hidden_details': 'hidden_details',
            'identity': 'identity',
            'links': 'links',
            'metadata': 'metadata',
            'responded_reason': 'responded_reason',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_responded = date_responded
        self._date_updated = date_updated
        self._details = details
        self._entity_sid = entity_sid
        self._expiration_date = expiration_date
        self._factor_sid = factor_sid
        self._factor_type = factor_type
        self._hidden_details = hidden_details
        self._identity = identity
        self._links = links
        self._metadata = metadata
        self._responded_reason = responded_reason
        self._service_sid = service_sid
        self._sid = sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyV2ServiceEntityChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify.v2.service.entity.challenge of this VerifyV2ServiceEntityChallenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Account.

        :return: The account_sid of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this VerifyV2ServiceEntityChallenge.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VerifyV2ServiceEntityChallenge.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VerifyV2ServiceEntityChallenge.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_responded(self):
        """Gets the date_responded of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_responded of this VerifyV2ServiceEntityChallenge.
        :rtype: datetime
        """
        return self._date_responded

    @date_responded.setter
    def date_responded(self, date_responded):
        """Sets the date_responded of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_responded: The date_responded of this VerifyV2ServiceEntityChallenge.
        :type date_responded: datetime
        """

        self._date_responded = date_responded

    @property
    def date_updated(self):
        """Gets the date_updated of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VerifyV2ServiceEntityChallenge.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VerifyV2ServiceEntityChallenge.

        The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VerifyV2ServiceEntityChallenge.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def details(self):
        """Gets the details of this VerifyV2ServiceEntityChallenge.

        Details provided to give context about the Challenge. Intended to be shown to the end user.

        :return: The details of this VerifyV2ServiceEntityChallenge.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this VerifyV2ServiceEntityChallenge.

        Details provided to give context about the Challenge. Intended to be shown to the end user.

        :param details: The details of this VerifyV2ServiceEntityChallenge.
        :type details: object
        """

        self._details = details

    @property
    def entity_sid(self):
        """Gets the entity_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Entity.

        :return: The entity_sid of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._entity_sid

    @entity_sid.setter
    def entity_sid(self, entity_sid):
        """Sets the entity_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Entity.

        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityChallenge.
        :type entity_sid: str
        """
        if entity_sid is not None and len(entity_sid) > 34:
            raise ValueError("Invalid value for `entity_sid`, length must be less than or equal to `34`")
        if entity_sid is not None and len(entity_sid) < 34:
            raise ValueError("Invalid value for `entity_sid`, length must be greater than or equal to `34`")
        if entity_sid is not None and not re.search(r'^YE[0-9a-fA-F]{32}$', entity_sid):
            raise ValueError("Invalid value for `entity_sid`, must be a follow pattern or equal to `/^YE[0-9a-fA-F]{32}$/`")

        self._entity_sid = entity_sid

    @property
    def expiration_date(self):
        """Gets the expiration_date of this VerifyV2ServiceEntityChallenge.

        The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.

        :return: The expiration_date of this VerifyV2ServiceEntityChallenge.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this VerifyV2ServiceEntityChallenge.

        The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.

        :param expiration_date: The expiration_date of this VerifyV2ServiceEntityChallenge.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def factor_sid(self):
        """Gets the factor_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Factor.

        :return: The factor_sid of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._factor_sid

    @factor_sid.setter
    def factor_sid(self, factor_sid):
        """Sets the factor_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Factor.

        :param factor_sid: The factor_sid of this VerifyV2ServiceEntityChallenge.
        :type factor_sid: str
        """
        if factor_sid is not None and len(factor_sid) > 34:
            raise ValueError("Invalid value for `factor_sid`, length must be less than or equal to `34`")
        if factor_sid is not None and len(factor_sid) < 34:
            raise ValueError("Invalid value for `factor_sid`, length must be greater than or equal to `34`")
        if factor_sid is not None and not re.search(r'^YF[0-9a-fA-F]{32}$', factor_sid):
            raise ValueError("Invalid value for `factor_sid`, must be a follow pattern or equal to `/^YF[0-9a-fA-F]{32}$/`")

        self._factor_sid = factor_sid

    @property
    def factor_type(self):
        """Gets the factor_type of this VerifyV2ServiceEntityChallenge.


        :return: The factor_type of this VerifyV2ServiceEntityChallenge.
        :rtype: ChallengeEnumFactorTypes
        """
        return self._factor_type

    @factor_type.setter
    def factor_type(self, factor_type):
        """Sets the factor_type of this VerifyV2ServiceEntityChallenge.


        :param factor_type: The factor_type of this VerifyV2ServiceEntityChallenge.
        :type factor_type: ChallengeEnumFactorTypes
        """

        self._factor_type = factor_type

    @property
    def hidden_details(self):
        """Gets the hidden_details of this VerifyV2ServiceEntityChallenge.

        Details provided to give context about the Challenge. Intended to be hidden from the end user. It must be a stringified JSON with only strings values eg. `{\"ip\": \"172.168.1.234\"}`

        :return: The hidden_details of this VerifyV2ServiceEntityChallenge.
        :rtype: object
        """
        return self._hidden_details

    @hidden_details.setter
    def hidden_details(self, hidden_details):
        """Sets the hidden_details of this VerifyV2ServiceEntityChallenge.

        Details provided to give context about the Challenge. Intended to be hidden from the end user. It must be a stringified JSON with only strings values eg. `{\"ip\": \"172.168.1.234\"}`

        :param hidden_details: The hidden_details of this VerifyV2ServiceEntityChallenge.
        :type hidden_details: object
        """

        self._hidden_details = hidden_details

    @property
    def identity(self):
        """Gets the identity of this VerifyV2ServiceEntityChallenge.

        Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :return: The identity of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this VerifyV2ServiceEntityChallenge.

        Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :param identity: The identity of this VerifyV2ServiceEntityChallenge.
        :type identity: str
        """

        self._identity = identity

    @property
    def links(self):
        """Gets the links of this VerifyV2ServiceEntityChallenge.

        Contains a dictionary of URL links to nested resources of this Challenge.

        :return: The links of this VerifyV2ServiceEntityChallenge.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VerifyV2ServiceEntityChallenge.

        Contains a dictionary of URL links to nested resources of this Challenge.

        :param links: The links of this VerifyV2ServiceEntityChallenge.
        :type links: object
        """

        self._links = links

    @property
    def metadata(self):
        """Gets the metadata of this VerifyV2ServiceEntityChallenge.

        Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.

        :return: The metadata of this VerifyV2ServiceEntityChallenge.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VerifyV2ServiceEntityChallenge.

        Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.

        :param metadata: The metadata of this VerifyV2ServiceEntityChallenge.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def responded_reason(self):
        """Gets the responded_reason of this VerifyV2ServiceEntityChallenge.


        :return: The responded_reason of this VerifyV2ServiceEntityChallenge.
        :rtype: ChallengeEnumChallengeReasons
        """
        return self._responded_reason

    @responded_reason.setter
    def responded_reason(self, responded_reason):
        """Sets the responded_reason of this VerifyV2ServiceEntityChallenge.


        :param responded_reason: The responded_reason of this VerifyV2ServiceEntityChallenge.
        :type responded_reason: ChallengeEnumChallengeReasons
        """

        self._responded_reason = responded_reason

    @property
    def service_sid(self):
        """Gets the service_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Service.

        :return: The service_sid of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this VerifyV2ServiceEntityChallenge.

        The unique SID identifier of the Service.

        :param service_sid: The service_sid of this VerifyV2ServiceEntityChallenge.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^VA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^VA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this VerifyV2ServiceEntityChallenge.

        A 34 character string that uniquely identifies this Challenge.

        :return: The sid of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VerifyV2ServiceEntityChallenge.

        A 34 character string that uniquely identifies this Challenge.

        :param sid: The sid of this VerifyV2ServiceEntityChallenge.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^YC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^YC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this VerifyV2ServiceEntityChallenge.


        :return: The status of this VerifyV2ServiceEntityChallenge.
        :rtype: ChallengeEnumChallengeStatuses
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VerifyV2ServiceEntityChallenge.


        :param status: The status of this VerifyV2ServiceEntityChallenge.
        :type status: ChallengeEnumChallengeStatuses
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this VerifyV2ServiceEntityChallenge.

        The URL of this resource.

        :return: The url of this VerifyV2ServiceEntityChallenge.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VerifyV2ServiceEntityChallenge.

        The URL of this resource.

        :param url: The url of this VerifyV2ServiceEntityChallenge.
        :type url: str
        """

        self._url = url
