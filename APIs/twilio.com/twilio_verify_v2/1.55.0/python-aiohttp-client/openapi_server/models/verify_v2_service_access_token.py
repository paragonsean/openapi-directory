# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_token_enum_factor_types import AccessTokenEnumFactorTypes
import re
from openapi_server import util


class VerifyV2ServiceAccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, entity_identity: str=None, factor_friendly_name: str=None, factor_type: AccessTokenEnumFactorTypes=None, service_sid: str=None, sid: str=None, token: str=None, ttl: int=None, url: str=None):
        """VerifyV2ServiceAccessToken - a model defined in OpenAPI

        :param account_sid: The account_sid of this VerifyV2ServiceAccessToken.
        :param date_created: The date_created of this VerifyV2ServiceAccessToken.
        :param entity_identity: The entity_identity of this VerifyV2ServiceAccessToken.
        :param factor_friendly_name: The factor_friendly_name of this VerifyV2ServiceAccessToken.
        :param factor_type: The factor_type of this VerifyV2ServiceAccessToken.
        :param service_sid: The service_sid of this VerifyV2ServiceAccessToken.
        :param sid: The sid of this VerifyV2ServiceAccessToken.
        :param token: The token of this VerifyV2ServiceAccessToken.
        :param ttl: The ttl of this VerifyV2ServiceAccessToken.
        :param url: The url of this VerifyV2ServiceAccessToken.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'entity_identity': str,
            'factor_friendly_name': str,
            'factor_type': AccessTokenEnumFactorTypes,
            'service_sid': str,
            'sid': str,
            'token': str,
            'ttl': int,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'entity_identity': 'entity_identity',
            'factor_friendly_name': 'factor_friendly_name',
            'factor_type': 'factor_type',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'token': 'token',
            'ttl': 'ttl',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._entity_identity = entity_identity
        self._factor_friendly_name = factor_friendly_name
        self._factor_type = factor_type
        self._service_sid = service_sid
        self._sid = sid
        self._token = token
        self._ttl = ttl
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyV2ServiceAccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify.v2.service.access_token of this VerifyV2ServiceAccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VerifyV2ServiceAccessToken.

        The unique SID identifier of the Account.

        :return: The account_sid of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VerifyV2ServiceAccessToken.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this VerifyV2ServiceAccessToken.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this VerifyV2ServiceAccessToken.

        The date that this access token was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VerifyV2ServiceAccessToken.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VerifyV2ServiceAccessToken.

        The date that this access token was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VerifyV2ServiceAccessToken.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def entity_identity(self):
        """Gets the entity_identity of this VerifyV2ServiceAccessToken.

        The unique external identifier for the Entity of the Service.

        :return: The entity_identity of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._entity_identity

    @entity_identity.setter
    def entity_identity(self, entity_identity):
        """Sets the entity_identity of this VerifyV2ServiceAccessToken.

        The unique external identifier for the Entity of the Service.

        :param entity_identity: The entity_identity of this VerifyV2ServiceAccessToken.
        :type entity_identity: str
        """

        self._entity_identity = entity_identity

    @property
    def factor_friendly_name(self):
        """Gets the factor_friendly_name of this VerifyV2ServiceAccessToken.

        A human readable description of this factor, up to 64 characters. For a push factor, this can be the device's name.

        :return: The factor_friendly_name of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._factor_friendly_name

    @factor_friendly_name.setter
    def factor_friendly_name(self, factor_friendly_name):
        """Sets the factor_friendly_name of this VerifyV2ServiceAccessToken.

        A human readable description of this factor, up to 64 characters. For a push factor, this can be the device's name.

        :param factor_friendly_name: The factor_friendly_name of this VerifyV2ServiceAccessToken.
        :type factor_friendly_name: str
        """

        self._factor_friendly_name = factor_friendly_name

    @property
    def factor_type(self):
        """Gets the factor_type of this VerifyV2ServiceAccessToken.


        :return: The factor_type of this VerifyV2ServiceAccessToken.
        :rtype: AccessTokenEnumFactorTypes
        """
        return self._factor_type

    @factor_type.setter
    def factor_type(self, factor_type):
        """Sets the factor_type of this VerifyV2ServiceAccessToken.


        :param factor_type: The factor_type of this VerifyV2ServiceAccessToken.
        :type factor_type: AccessTokenEnumFactorTypes
        """

        self._factor_type = factor_type

    @property
    def service_sid(self):
        """Gets the service_sid of this VerifyV2ServiceAccessToken.

        The unique SID identifier of the Verify Service.

        :return: The service_sid of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this VerifyV2ServiceAccessToken.

        The unique SID identifier of the Verify Service.

        :param service_sid: The service_sid of this VerifyV2ServiceAccessToken.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^VA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^VA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this VerifyV2ServiceAccessToken.

        A 34 character string that uniquely identifies this Access Token.

        :return: The sid of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VerifyV2ServiceAccessToken.

        A 34 character string that uniquely identifies this Access Token.

        :param sid: The sid of this VerifyV2ServiceAccessToken.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^YK[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^YK[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def token(self):
        """Gets the token of this VerifyV2ServiceAccessToken.

        The access token generated for enrollment, this is an encrypted json web token.

        :return: The token of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this VerifyV2ServiceAccessToken.

        The access token generated for enrollment, this is an encrypted json web token.

        :param token: The token of this VerifyV2ServiceAccessToken.
        :type token: str
        """

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this VerifyV2ServiceAccessToken.

        How long, in seconds, the access token is valid. Max: 5 minutes

        :return: The ttl of this VerifyV2ServiceAccessToken.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this VerifyV2ServiceAccessToken.

        How long, in seconds, the access token is valid. Max: 5 minutes

        :param ttl: The ttl of this VerifyV2ServiceAccessToken.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def url(self):
        """Gets the url of this VerifyV2ServiceAccessToken.

        The URL of this resource.

        :return: The url of this VerifyV2ServiceAccessToken.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VerifyV2ServiceAccessToken.

        The URL of this resource.

        :param url: The url of this VerifyV2ServiceAccessToken.
        :type url: str
        """

        self._url = url
