# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VerifyV2ServiceEntityChallengeNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, challenge_sid: str=None, date_created: datetime=None, entity_sid: str=None, identity: str=None, priority: str=None, service_sid: str=None, sid: str=None, ttl: int=None):
        """VerifyV2ServiceEntityChallengeNotification - a model defined in OpenAPI

        :param account_sid: The account_sid of this VerifyV2ServiceEntityChallengeNotification.
        :param challenge_sid: The challenge_sid of this VerifyV2ServiceEntityChallengeNotification.
        :param date_created: The date_created of this VerifyV2ServiceEntityChallengeNotification.
        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityChallengeNotification.
        :param identity: The identity of this VerifyV2ServiceEntityChallengeNotification.
        :param priority: The priority of this VerifyV2ServiceEntityChallengeNotification.
        :param service_sid: The service_sid of this VerifyV2ServiceEntityChallengeNotification.
        :param sid: The sid of this VerifyV2ServiceEntityChallengeNotification.
        :param ttl: The ttl of this VerifyV2ServiceEntityChallengeNotification.
        """
        self.openapi_types = {
            'account_sid': str,
            'challenge_sid': str,
            'date_created': datetime,
            'entity_sid': str,
            'identity': str,
            'priority': str,
            'service_sid': str,
            'sid': str,
            'ttl': int
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'challenge_sid': 'challenge_sid',
            'date_created': 'date_created',
            'entity_sid': 'entity_sid',
            'identity': 'identity',
            'priority': 'priority',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'ttl': 'ttl'
        }

        self._account_sid = account_sid
        self._challenge_sid = challenge_sid
        self._date_created = date_created
        self._entity_sid = entity_sid
        self._identity = identity
        self._priority = priority
        self._service_sid = service_sid
        self._sid = sid
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyV2ServiceEntityChallengeNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify.v2.service.entity.challenge.notification of this VerifyV2ServiceEntityChallengeNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Account.

        :return: The account_sid of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this VerifyV2ServiceEntityChallengeNotification.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def challenge_sid(self):
        """Gets the challenge_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Challenge.

        :return: The challenge_sid of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._challenge_sid

    @challenge_sid.setter
    def challenge_sid(self, challenge_sid):
        """Sets the challenge_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Challenge.

        :param challenge_sid: The challenge_sid of this VerifyV2ServiceEntityChallengeNotification.
        :type challenge_sid: str
        """
        if challenge_sid is not None and len(challenge_sid) > 34:
            raise ValueError("Invalid value for `challenge_sid`, length must be less than or equal to `34`")
        if challenge_sid is not None and len(challenge_sid) < 34:
            raise ValueError("Invalid value for `challenge_sid`, length must be greater than or equal to `34`")
        if challenge_sid is not None and not re.search(r'^YC[0-9a-fA-F]{32}$', challenge_sid):
            raise ValueError("Invalid value for `challenge_sid`, must be a follow pattern or equal to `/^YC[0-9a-fA-F]{32}$/`")

        self._challenge_sid = challenge_sid

    @property
    def date_created(self):
        """Gets the date_created of this VerifyV2ServiceEntityChallengeNotification.

        The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VerifyV2ServiceEntityChallengeNotification.

        The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VerifyV2ServiceEntityChallengeNotification.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def entity_sid(self):
        """Gets the entity_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Entity.

        :return: The entity_sid of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._entity_sid

    @entity_sid.setter
    def entity_sid(self, entity_sid):
        """Sets the entity_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Entity.

        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityChallengeNotification.
        :type entity_sid: str
        """
        if entity_sid is not None and len(entity_sid) > 34:
            raise ValueError("Invalid value for `entity_sid`, length must be less than or equal to `34`")
        if entity_sid is not None and len(entity_sid) < 34:
            raise ValueError("Invalid value for `entity_sid`, length must be greater than or equal to `34`")
        if entity_sid is not None and not re.search(r'^YE[0-9a-fA-F]{32}$', entity_sid):
            raise ValueError("Invalid value for `entity_sid`, must be a follow pattern or equal to `/^YE[0-9a-fA-F]{32}$/`")

        self._entity_sid = entity_sid

    @property
    def identity(self):
        """Gets the identity of this VerifyV2ServiceEntityChallengeNotification.

        Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :return: The identity of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this VerifyV2ServiceEntityChallengeNotification.

        Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :param identity: The identity of this VerifyV2ServiceEntityChallengeNotification.
        :type identity: str
        """

        self._identity = identity

    @property
    def priority(self):
        """Gets the priority of this VerifyV2ServiceEntityChallengeNotification.

        The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.

        :return: The priority of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this VerifyV2ServiceEntityChallengeNotification.

        The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.

        :param priority: The priority of this VerifyV2ServiceEntityChallengeNotification.
        :type priority: str
        """

        self._priority = priority

    @property
    def service_sid(self):
        """Gets the service_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Service.

        :return: The service_sid of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this VerifyV2ServiceEntityChallengeNotification.

        The unique SID identifier of the Service.

        :param service_sid: The service_sid of this VerifyV2ServiceEntityChallengeNotification.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^VA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^VA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this VerifyV2ServiceEntityChallengeNotification.

        A 34 character string that uniquely identifies this Notification.

        :return: The sid of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VerifyV2ServiceEntityChallengeNotification.

        A 34 character string that uniquely identifies this Notification.

        :param sid: The sid of this VerifyV2ServiceEntityChallengeNotification.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^NT[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^NT[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def ttl(self):
        """Gets the ttl of this VerifyV2ServiceEntityChallengeNotification.

        How long, in seconds, the notification is valid. Max: 5 minutes

        :return: The ttl of this VerifyV2ServiceEntityChallengeNotification.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this VerifyV2ServiceEntityChallengeNotification.

        How long, in seconds, the notification is valid. Max: 5 minutes

        :param ttl: The ttl of this VerifyV2ServiceEntityChallengeNotification.
        :type ttl: int
        """

        self._ttl = ttl
