# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_factor_enum_factor_statuses import NewFactorEnumFactorStatuses
from openapi_server.models.new_factor_enum_factor_types import NewFactorEnumFactorTypes
import re
from openapi_server import util


class VerifyV2ServiceEntityNewFactor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, binding: object=None, config: object=None, date_created: datetime=None, date_updated: datetime=None, entity_sid: str=None, factor_type: NewFactorEnumFactorTypes=None, friendly_name: str=None, identity: str=None, metadata: object=None, service_sid: str=None, sid: str=None, status: NewFactorEnumFactorStatuses=None, url: str=None):
        """VerifyV2ServiceEntityNewFactor - a model defined in OpenAPI

        :param account_sid: The account_sid of this VerifyV2ServiceEntityNewFactor.
        :param binding: The binding of this VerifyV2ServiceEntityNewFactor.
        :param config: The config of this VerifyV2ServiceEntityNewFactor.
        :param date_created: The date_created of this VerifyV2ServiceEntityNewFactor.
        :param date_updated: The date_updated of this VerifyV2ServiceEntityNewFactor.
        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityNewFactor.
        :param factor_type: The factor_type of this VerifyV2ServiceEntityNewFactor.
        :param friendly_name: The friendly_name of this VerifyV2ServiceEntityNewFactor.
        :param identity: The identity of this VerifyV2ServiceEntityNewFactor.
        :param metadata: The metadata of this VerifyV2ServiceEntityNewFactor.
        :param service_sid: The service_sid of this VerifyV2ServiceEntityNewFactor.
        :param sid: The sid of this VerifyV2ServiceEntityNewFactor.
        :param status: The status of this VerifyV2ServiceEntityNewFactor.
        :param url: The url of this VerifyV2ServiceEntityNewFactor.
        """
        self.openapi_types = {
            'account_sid': str,
            'binding': object,
            'config': object,
            'date_created': datetime,
            'date_updated': datetime,
            'entity_sid': str,
            'factor_type': NewFactorEnumFactorTypes,
            'friendly_name': str,
            'identity': str,
            'metadata': object,
            'service_sid': str,
            'sid': str,
            'status': NewFactorEnumFactorStatuses,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'binding': 'binding',
            'config': 'config',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'entity_sid': 'entity_sid',
            'factor_type': 'factor_type',
            'friendly_name': 'friendly_name',
            'identity': 'identity',
            'metadata': 'metadata',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._binding = binding
        self._config = config
        self._date_created = date_created
        self._date_updated = date_updated
        self._entity_sid = entity_sid
        self._factor_type = factor_type
        self._friendly_name = friendly_name
        self._identity = identity
        self._metadata = metadata
        self._service_sid = service_sid
        self._sid = sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyV2ServiceEntityNewFactor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify.v2.service.entity.new_factor of this VerifyV2ServiceEntityNewFactor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Account.

        :return: The account_sid of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this VerifyV2ServiceEntityNewFactor.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def binding(self):
        """Gets the binding of this VerifyV2ServiceEntityNewFactor.

        Contains the `factor_type` specific secret and metadata. For push, this is `binding.public_key` and `binding.alg`. For totp, this is `binding.secret` and `binding.uri`. The `binding.uri` property is generated following the [google authenticator key URI format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format), and `Factor.friendly_name` is used for the “accountname” value and `Service.friendly_name` or `Service.totp.issuer` is used for the `issuer` value.   The Binding property is ONLY returned upon Factor creation.

        :return: The binding of this VerifyV2ServiceEntityNewFactor.
        :rtype: object
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this VerifyV2ServiceEntityNewFactor.

        Contains the `factor_type` specific secret and metadata. For push, this is `binding.public_key` and `binding.alg`. For totp, this is `binding.secret` and `binding.uri`. The `binding.uri` property is generated following the [google authenticator key URI format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format), and `Factor.friendly_name` is used for the “accountname” value and `Service.friendly_name` or `Service.totp.issuer` is used for the `issuer` value.   The Binding property is ONLY returned upon Factor creation.

        :param binding: The binding of this VerifyV2ServiceEntityNewFactor.
        :type binding: object
        """

        self._binding = binding

    @property
    def config(self):
        """Gets the config of this VerifyV2ServiceEntityNewFactor.

        An object that contains configurations specific to a `factor_type`.

        :return: The config of this VerifyV2ServiceEntityNewFactor.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this VerifyV2ServiceEntityNewFactor.

        An object that contains configurations specific to a `factor_type`.

        :param config: The config of this VerifyV2ServiceEntityNewFactor.
        :type config: object
        """

        self._config = config

    @property
    def date_created(self):
        """Gets the date_created of this VerifyV2ServiceEntityNewFactor.

        The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VerifyV2ServiceEntityNewFactor.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VerifyV2ServiceEntityNewFactor.

        The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VerifyV2ServiceEntityNewFactor.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this VerifyV2ServiceEntityNewFactor.

        The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VerifyV2ServiceEntityNewFactor.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VerifyV2ServiceEntityNewFactor.

        The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VerifyV2ServiceEntityNewFactor.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def entity_sid(self):
        """Gets the entity_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Entity.

        :return: The entity_sid of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._entity_sid

    @entity_sid.setter
    def entity_sid(self, entity_sid):
        """Sets the entity_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Entity.

        :param entity_sid: The entity_sid of this VerifyV2ServiceEntityNewFactor.
        :type entity_sid: str
        """
        if entity_sid is not None and len(entity_sid) > 34:
            raise ValueError("Invalid value for `entity_sid`, length must be less than or equal to `34`")
        if entity_sid is not None and len(entity_sid) < 34:
            raise ValueError("Invalid value for `entity_sid`, length must be greater than or equal to `34`")
        if entity_sid is not None and not re.search(r'^YE[0-9a-fA-F]{32}$', entity_sid):
            raise ValueError("Invalid value for `entity_sid`, must be a follow pattern or equal to `/^YE[0-9a-fA-F]{32}$/`")

        self._entity_sid = entity_sid

    @property
    def factor_type(self):
        """Gets the factor_type of this VerifyV2ServiceEntityNewFactor.


        :return: The factor_type of this VerifyV2ServiceEntityNewFactor.
        :rtype: NewFactorEnumFactorTypes
        """
        return self._factor_type

    @factor_type.setter
    def factor_type(self, factor_type):
        """Sets the factor_type of this VerifyV2ServiceEntityNewFactor.


        :param factor_type: The factor_type of this VerifyV2ServiceEntityNewFactor.
        :type factor_type: NewFactorEnumFactorTypes
        """

        self._factor_type = factor_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this VerifyV2ServiceEntityNewFactor.

        The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For `factor_type` `push`, this could be a device name. For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property. At the same time, we recommend avoiding providing PII.

        :return: The friendly_name of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this VerifyV2ServiceEntityNewFactor.

        The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For `factor_type` `push`, this could be a device name. For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property. At the same time, we recommend avoiding providing PII.

        :param friendly_name: The friendly_name of this VerifyV2ServiceEntityNewFactor.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def identity(self):
        """Gets the identity of this VerifyV2ServiceEntityNewFactor.

        Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :return: The identity of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this VerifyV2ServiceEntityNewFactor.

        Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.

        :param identity: The identity of this VerifyV2ServiceEntityNewFactor.
        :type identity: str
        """

        self._identity = identity

    @property
    def metadata(self):
        """Gets the metadata of this VerifyV2ServiceEntityNewFactor.

        Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.

        :return: The metadata of this VerifyV2ServiceEntityNewFactor.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VerifyV2ServiceEntityNewFactor.

        Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.

        :param metadata: The metadata of this VerifyV2ServiceEntityNewFactor.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def service_sid(self):
        """Gets the service_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Service.

        :return: The service_sid of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this VerifyV2ServiceEntityNewFactor.

        The unique SID identifier of the Service.

        :param service_sid: The service_sid of this VerifyV2ServiceEntityNewFactor.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^VA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^VA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this VerifyV2ServiceEntityNewFactor.

        A 34 character string that uniquely identifies this Factor.

        :return: The sid of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VerifyV2ServiceEntityNewFactor.

        A 34 character string that uniquely identifies this Factor.

        :param sid: The sid of this VerifyV2ServiceEntityNewFactor.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^YF[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^YF[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this VerifyV2ServiceEntityNewFactor.


        :return: The status of this VerifyV2ServiceEntityNewFactor.
        :rtype: NewFactorEnumFactorStatuses
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VerifyV2ServiceEntityNewFactor.


        :param status: The status of this VerifyV2ServiceEntityNewFactor.
        :type status: NewFactorEnumFactorStatuses
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this VerifyV2ServiceEntityNewFactor.

        The URL of this resource.

        :return: The url of this VerifyV2ServiceEntityNewFactor.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VerifyV2ServiceEntityNewFactor.

        The URL of this resource.

        :param url: The url of this VerifyV2ServiceEntityNewFactor.
        :type url: str
        """

        self._url = url
