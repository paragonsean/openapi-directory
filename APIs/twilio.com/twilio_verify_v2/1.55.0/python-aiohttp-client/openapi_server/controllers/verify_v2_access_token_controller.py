from typing import List, Dict
from aiohttp import web

from openapi_server.models.access_token_enum_factor_types import AccessTokenEnumFactorTypes
from openapi_server.models.verify_v2_service_access_token import VerifyV2ServiceAccessToken
from openapi_server import util


async def create_access_token(request: web.Request, service_sid, factor_type, identity, factor_friendly_name=None, ttl=None) -> web.Response:
    """create_access_token

    Create a new enrollment Access Token for the Entity

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param factor_type: 
    :type factor_type: str
    :param identity: The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user&#39;s UUID, GUID, or SID.
    :type identity: str
    :param factor_friendly_name: The friendly name of the factor that is going to be created with this access token
    :type factor_friendly_name: str
    :param ttl: How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60.
    :type ttl: int

    """
    return web.Response(status=200)


async def fetch_access_token(request: web.Request, service_sid, sid) -> web.Response:
    """fetch_access_token

    Fetch an Access Token for the Entity

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param sid: A 34 character string that uniquely identifies this Access Token.
    :type sid: str

    """
    return web.Response(status=200)
