from typing import List, Dict
from aiohttp import web

from openapi_server.models.challenge_enum_challenge_statuses import ChallengeEnumChallengeStatuses
from openapi_server.models.challenge_enum_list_orders import ChallengeEnumListOrders
from openapi_server.models.list_challenge_response import ListChallengeResponse
from openapi_server.models.verify_v2_service_entity_challenge import VerifyV2ServiceEntityChallenge
from openapi_server import util


async def create_challenge(request: web.Request, service_sid, identity, factor_sid, auth_payload=None, details_fields=None, details_message=None, expiration_date=None, hidden_details=None) -> web.Response:
    """create_challenge

    Create a new Challenge for the Factor

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param factor_sid: The unique SID identifier of the Factor.
    :type factor_sid: str
    :param auth_payload: Optional payload used to verify the Challenge upon creation. Only used with a Factor of type &#x60;totp&#x60; to carry the TOTP code that needs to be verified. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long.
    :type auth_payload: str
    :param details_fields: A list of objects that describe the Fields included in the Challenge. Each object contains the label and value of the field, the label can be up to 36 characters in length and the value can be up to 128 characters in length. Used when &#x60;factor_type&#x60; is &#x60;push&#x60;. There can be up to 20 details fields.
    :type details_fields: List[]
    :param details_message: Shown to the user when the push notification arrives. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. Can be up to 256 characters in length
    :type details_message: str
    :param expiration_date: The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.
    :type expiration_date: str
    :param hidden_details: Details provided to give context about the Challenge. Not shown to the end user. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;ip\\\&quot;: \\\&quot;172.168.1.234\\\&quot;}&#x60;. Can be up to 1024 characters in length
    :type hidden_details: dict | bytes

    """
    expiration_date = util.deserialize_datetime(expiration_date)
    hidden_details = object.from_dict(hidden_details)
    return web.Response(status=200)


async def fetch_challenge(request: web.Request, service_sid, identity, sid) -> web.Response:
    """fetch_challenge

    Fetch a specific Challenge.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Challenges. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param sid: A 34 character string that uniquely identifies this Challenge.
    :type sid: str

    """
    return web.Response(status=200)


async def list_challenge(request: web.Request, service_sid, identity, factor_sid=None, status=None, order=None, page_size=None, page=None, page_token=None) -> web.Response:
    """list_challenge

    Retrieve a list of all Challenges for a Factor.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param factor_sid: The unique SID identifier of the Factor.
    :type factor_sid: str
    :param status: The Status of the Challenges to fetch. One of &#x60;pending&#x60;, &#x60;expired&#x60;, &#x60;approved&#x60; or &#x60;denied&#x60;.
    :type status: str
    :param order: The desired sort order of the Challenges list. One of &#x60;asc&#x60; or &#x60;desc&#x60; for ascending and descending respectively. Defaults to &#x60;asc&#x60;.
    :type order: str
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    return web.Response(status=200)


async def update_challenge(request: web.Request, service_sid, identity, sid, auth_payload=None, metadata=None) -> web.Response:
    """update_challenge

    Verify a specific Challenge.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param sid: A 34 character string that uniquely identifies this Challenge.
    :type sid: str
    :param auth_payload: The optional payload needed to verify the Challenge. E.g., a TOTP would use the numeric code. For &#x60;TOTP&#x60; this value must be between 3 and 8 characters long. For &#x60;Push&#x60; this value can be up to 5456 characters in length
    :type auth_payload: str
    :param metadata: Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. &#x60;{\\\&quot;os\\\&quot;: \\\&quot;Android\\\&quot;}&#x60;. Can be up to 1024 characters in length.
    :type metadata: dict | bytes

    """
    metadata = object.from_dict(metadata)
    return web.Response(status=200)
