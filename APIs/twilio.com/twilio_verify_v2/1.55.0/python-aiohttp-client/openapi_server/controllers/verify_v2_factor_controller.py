from typing import List, Dict
from aiohttp import web

from openapi_server.models.factor_enum_totp_algorithms import FactorEnumTotpAlgorithms
from openapi_server.models.list_factor_response import ListFactorResponse
from openapi_server.models.verify_v2_service_entity_factor import VerifyV2ServiceEntityFactor
from openapi_server import util


async def delete_factor(request: web.Request, service_sid, identity, sid) -> web.Response:
    """delete_factor

    Delete a specific Factor.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param sid: A 34 character string that uniquely identifies this Factor.
    :type sid: str

    """
    return web.Response(status=200)


async def fetch_factor(request: web.Request, service_sid, identity, sid) -> web.Response:
    """fetch_factor

    Fetch a specific Factor.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param sid: A 34 character string that uniquely identifies this Factor.
    :type sid: str

    """
    return web.Response(status=200)


async def list_factor(request: web.Request, service_sid, identity, page_size=None, page=None, page_token=None) -> web.Response:
    """list_factor

    Retrieve a list of all Factors for an Entity.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Factors. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    return web.Response(status=200)


async def update_factor(request: web.Request, service_sid, identity, sid, auth_payload=None, config_alg=None, config_code_length=None, config_notification_platform=None, config_notification_token=None, config_sdk_version=None, config_skew=None, config_time_step=None, friendly_name=None) -> web.Response:
    """update_factor

    Update a specific Factor. This endpoint can be used to Verify a Factor if passed an &#x60;AuthPayload&#x60; param.

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param sid: A 34 character string that uniquely identifies this Factor.
    :type sid: str
    :param auth_payload: The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
    :type auth_payload: str
    :param config_alg: 
    :type config_alg: str
    :param config_code_length: Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
    :type config_code_length: int
    :param config_notification_platform: The transport technology used to generate the Notification Token. Can be &#x60;apn&#x60;, &#x60;fcm&#x60; or &#x60;none&#x60;.  Required when &#x60;factor_type&#x60; is &#x60;push&#x60;.
    :type config_notification_platform: str
    :param config_notification_token: For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when &#x60;factor_type&#x60; is &#x60;push&#x60;. If specified, this value must be between 32 and 255 characters long.
    :type config_notification_token: str
    :param config_sdk_version: The Verify Push SDK version used to configure the factor
    :type config_sdk_version: str
    :param config_skew: The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
    :type config_skew: int
    :param config_time_step: Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
    :type config_time_step: int
    :param friendly_name: The new friendly name of this Factor. It can be up to 64 characters.
    :type friendly_name: str

    """
    return web.Response(status=200)
