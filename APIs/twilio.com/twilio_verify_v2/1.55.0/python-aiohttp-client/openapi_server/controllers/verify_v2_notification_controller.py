from typing import List, Dict
from aiohttp import web

from openapi_server.models.verify_v2_service_entity_challenge_notification import VerifyV2ServiceEntityChallengeNotification
from openapi_server import util


async def create_notification(request: web.Request, service_sid, identity, challenge_sid, ttl=None) -> web.Response:
    """create_notification

    Create a new Notification for the corresponding Challenge

    :param service_sid: The unique SID identifier of the Service.
    :type service_sid: str
    :param identity: Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user&#39;s UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    :type identity: str
    :param challenge_sid: The unique SID identifier of the Challenge.
    :type challenge_sid: str
    :param ttl: How long, in seconds, the notification is valid. Can be an integer between 0 and 300. Default is 300. Delivery is attempted until the TTL elapses, even if the device is offline. 0 means that the notification delivery is attempted immediately, only once, and is not stored for future delivery.
    :type ttl: int

    """
    return web.Response(status=200)
