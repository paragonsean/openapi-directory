/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSimResponse from '../model/ListSimResponse';
import SimEnumResetStatus from '../model/SimEnumResetStatus';
import SimEnumStatus from '../model/SimEnumStatus';
import WirelessV1Sim from '../model/WirelessV1Sim';

/**
* WirelessV1Sim service.
* @module api/WirelessV1SimApi
* @version 1.55.0
*/
export default class WirelessV1SimApi {

    /**
    * Constructs a new WirelessV1SimApi. 
    * @alias module:api/WirelessV1SimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSim operation.
     * @callback module:api/WirelessV1SimApi~deleteSimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Sim resource on your Account.
     * @param {String} sid The SID or the `unique_name` of the Sim resource to delete.
     * @param {module:api/WirelessV1SimApi~deleteSimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSim operation.
     * @callback module:api/WirelessV1SimApi~fetchSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WirelessV1Sim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a Sim resource on your Account.
     * @param {String} sid The SID or the `unique_name` of the Sim resource to fetch.
     * @param {module:api/WirelessV1SimApi~fetchSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WirelessV1Sim}
     */
    fetchSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WirelessV1Sim;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSim operation.
     * @callback module:api/WirelessV1SimApi~listSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSimResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Sim resources on your Account.
     * @param {Object} opts Optional parameters
     * @param {module:model/SimEnumStatus} [status] Only return Sim resources with this status.
     * @param {String} [iccid] Only return Sim resources with this ICCID. This will return a list with a maximum size of 1.
     * @param {String} [ratePlan] The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource.
     * @param {String} [eId] Deprecated.
     * @param {String} [simRegistrationCode] Only return Sim resources with this registration code. This will return a list with a maximum size of 1.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/WirelessV1SimApi~listSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSimResponse}
     */
    listSim(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'Iccid': opts['iccid'],
        'RatePlan': opts['ratePlan'],
        'EId': opts['eId'],
        'SimRegistrationCode': opts['simRegistrationCode'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSimResponse;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSim operation.
     * @callback module:api/WirelessV1SimApi~updateSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WirelessV1Sim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the given properties of a Sim resource on your Account.
     * @param {String} sid The SID or the `unique_name` of the Sim resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [accountSid] The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource's status is `new`. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/iot/wireless/api/sim-resource#move-sims-between-subaccounts).
     * @param {module:model/String} [callbackMethod] The HTTP method we should use to call `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
     * @param {String} [callbackUrl] The URL we should call using the `callback_url` when the SIM has finished updating. When the SIM transitions from `new` to `ready` or from any status to `deactivated`, we call this URL when the status changes to an intermediate status (`ready` or `deactivated`) and again when the status changes to its final status (`active` or `canceled`).
     * @param {module:model/String} [commandsCallbackMethod] The HTTP method we should use to call `commands_callback_url`. Can be: `POST` or `GET`. The default is `POST`.
     * @param {String} [commandsCallbackUrl] The URL we should call using the `commands_callback_method` when the SIM sends a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored.
     * @param {String} [friendlyName] A descriptive string that you create to describe the Sim resource. It does not need to be unique.
     * @param {String} [ratePlan] The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource) to which the Sim resource should be assigned.
     * @param {module:model/SimEnumResetStatus} [resetStatus] 
     * @param {module:model/String} [smsFallbackMethod] The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
     * @param {String} [smsFallbackUrl] The URL we should call using the `sms_fallback_method` when an error occurs while retrieving or executing the TwiML requested from `sms_url`.
     * @param {module:model/String} [smsMethod] The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`. Default is `POST`.
     * @param {String} [smsUrl] The URL we should call using the `sms_method` when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource).
     * @param {module:model/SimEnumStatus} [status] 
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used in place of the `sid` in the URL path to address the resource.
     * @param {module:model/String} [voiceFallbackMethod] Deprecated.
     * @param {String} [voiceFallbackUrl] Deprecated.
     * @param {module:model/String} [voiceMethod] Deprecated.
     * @param {String} [voiceUrl] Deprecated.
     * @param {module:api/WirelessV1SimApi~updateSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WirelessV1Sim}
     */
    updateSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AccountSid': opts['accountSid'],
        'CallbackMethod': opts['callbackMethod'],
        'CallbackUrl': opts['callbackUrl'],
        'CommandsCallbackMethod': opts['commandsCallbackMethod'],
        'CommandsCallbackUrl': opts['commandsCallbackUrl'],
        'FriendlyName': opts['friendlyName'],
        'RatePlan': opts['ratePlan'],
        'ResetStatus': opts['resetStatus'],
        'SmsFallbackMethod': opts['smsFallbackMethod'],
        'SmsFallbackUrl': opts['smsFallbackUrl'],
        'SmsMethod': opts['smsMethod'],
        'SmsUrl': opts['smsUrl'],
        'Status': opts['status'],
        'UniqueName': opts['uniqueName'],
        'VoiceFallbackMethod': opts['voiceFallbackMethod'],
        'VoiceFallbackUrl': opts['voiceFallbackUrl'],
        'VoiceMethod': opts['voiceMethod'],
        'VoiceUrl': opts['voiceUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = WirelessV1Sim;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
