/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommandEnumCommandMode from '../model/CommandEnumCommandMode';
import CommandEnumDirection from '../model/CommandEnumDirection';
import CommandEnumStatus from '../model/CommandEnumStatus';
import CommandEnumTransport from '../model/CommandEnumTransport';
import ListCommandResponse from '../model/ListCommandResponse';
import WirelessV1Command from '../model/WirelessV1Command';

/**
* WirelessV1Command service.
* @module api/WirelessV1CommandApi
* @version 1.55.0
*/
export default class WirelessV1CommandApi {

    /**
    * Constructs a new WirelessV1CommandApi. 
    * @alias module:api/WirelessV1CommandApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCommand operation.
     * @callback module:api/WirelessV1CommandApi~createCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WirelessV1Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a Command to a Sim.
     * @param {String} command The message body of the Command. Can be plain text in text mode or a Base64 encoded byte string in binary mode.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [callbackMethod] The HTTP method we use to call `callback_url`. Can be: `POST` or `GET`, and the default is `POST`.
     * @param {String} [callbackUrl] The URL we call using the `callback_url` when the Command has finished sending, whether the command was delivered or it failed.
     * @param {module:model/CommandEnumCommandMode} [commandMode] 
     * @param {Boolean} [deliveryReceiptRequested] Whether to request delivery receipt from the recipient. For Commands that request delivery receipt, the Command state transitions to 'delivered' once the server has received a delivery receipt from the device. The default value is `true`.
     * @param {String} [includeSid] Whether to include the SID of the command in the message body. Can be: `none`, `start`, or `end`, and the default behavior is `none`. When sending a Command to a SIM in text mode, we can automatically include the SID of the Command in the message body, which could be used to ensure that the device does not process the same Command more than once.  A value of `start` will prepend the message with the Command SID, and `end` will append it to the end, separating the Command SID from the message body with a space. The length of the Command SID is included in the 160 character limit so the SMS body must be 128 characters or less before the Command SID is included.
     * @param {String} [sim] The `sid` or `unique_name` of the [SIM](https://www.twilio.com/docs/iot/wireless/api/sim-resource) to send the Command to.
     * @param {module:api/WirelessV1CommandApi~createCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WirelessV1Command}
     */
    createCommand(command, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling createCommand");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallbackMethod': opts['callbackMethod'],
        'CallbackUrl': opts['callbackUrl'],
        'Command': command,
        'CommandMode': opts['commandMode'],
        'DeliveryReceiptRequested': opts['deliveryReceiptRequested'],
        'IncludeSid': opts['includeSid'],
        'Sim': opts['sim']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = WirelessV1Command;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommand operation.
     * @callback module:api/WirelessV1CommandApi~deleteCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Command instance from your account.
     * @param {String} sid The SID of the Command resource to delete.
     * @param {module:api/WirelessV1CommandApi~deleteCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCommand(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteCommand");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Commands/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchCommand operation.
     * @callback module:api/WirelessV1CommandApi~fetchCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WirelessV1Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a Command instance from your account.
     * @param {String} sid The SID of the Command resource to fetch.
     * @param {module:api/WirelessV1CommandApi~fetchCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WirelessV1Command}
     */
    fetchCommand(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchCommand");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WirelessV1Command;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Commands/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listCommand operation.
     * @callback module:api/WirelessV1CommandApi~listCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Commands from your account.
     * @param {Object} opts Optional parameters
     * @param {String} [sim] The `sid` or `unique_name` of the [Sim resources](https://www.twilio.com/docs/iot/wireless/api/sim-resource) to read.
     * @param {module:model/CommandEnumStatus} [status] The status of the resources to read. Can be: `queued`, `sent`, `delivered`, `received`, or `failed`.
     * @param {module:model/CommandEnumDirection} [direction] Only return Commands with this direction value.
     * @param {module:model/CommandEnumTransport} [transport] Only return Commands with this transport value. Can be: `sms` or `ip`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/WirelessV1CommandApi~listCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCommandResponse}
     */
    listCommand(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Sim': opts['sim'],
        'Status': opts['status'],
        'Direction': opts['direction'],
        'Transport': opts['transport'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCommandResponse;
      let basePaths = ['https://wireless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
