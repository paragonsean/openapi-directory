/*
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WirelessV1SimDataSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:26.208682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WirelessV1SimDataSession {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CELL_ID = "cell_id";
  @SerializedName(SERIALIZED_NAME_CELL_ID)
  private String cellId;

  public static final String SERIALIZED_NAME_CELL_LOCATION_ESTIMATE = "cell_location_estimate";
  @SerializedName(SERIALIZED_NAME_CELL_LOCATION_ESTIMATE)
  private Object cellLocationEstimate = null;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_OPERATOR_COUNTRY = "operator_country";
  @SerializedName(SERIALIZED_NAME_OPERATOR_COUNTRY)
  private String operatorCountry;

  public static final String SERIALIZED_NAME_OPERATOR_MCC = "operator_mcc";
  @SerializedName(SERIALIZED_NAME_OPERATOR_MCC)
  private String operatorMcc;

  public static final String SERIALIZED_NAME_OPERATOR_MNC = "operator_mnc";
  @SerializedName(SERIALIZED_NAME_OPERATOR_MNC)
  private String operatorMnc;

  public static final String SERIALIZED_NAME_OPERATOR_NAME = "operator_name";
  @SerializedName(SERIALIZED_NAME_OPERATOR_NAME)
  private String operatorName;

  public static final String SERIALIZED_NAME_PACKETS_DOWNLOADED = "packets_downloaded";
  @SerializedName(SERIALIZED_NAME_PACKETS_DOWNLOADED)
  private Integer packetsDownloaded;

  public static final String SERIALIZED_NAME_PACKETS_UPLOADED = "packets_uploaded";
  @SerializedName(SERIALIZED_NAME_PACKETS_UPLOADED)
  private Integer packetsUploaded;

  public static final String SERIALIZED_NAME_RADIO_LINK = "radio_link";
  @SerializedName(SERIALIZED_NAME_RADIO_LINK)
  private String radioLink;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SIM_SID = "sim_sid";
  @SerializedName(SERIALIZED_NAME_SIM_SID)
  private String simSid;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public WirelessV1SimDataSession() {
  }

  public WirelessV1SimDataSession accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the DataSession resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public WirelessV1SimDataSession cellId(String cellId) {
    this.cellId = cellId;
    return this;
  }

  /**
   * The unique ID of the cellular tower that the device was attached to at the moment when the Data Session was last updated.
   * @return cellId
   */
  @javax.annotation.Nullable
  public String getCellId() {
    return cellId;
  }

  public void setCellId(String cellId) {
    this.cellId = cellId;
  }


  public WirelessV1SimDataSession cellLocationEstimate(Object cellLocationEstimate) {
    this.cellLocationEstimate = cellLocationEstimate;
    return this;
  }

  /**
   * An object that describes the estimated location in latitude and longitude where the device&#39;s Data Session took place. The location is derived from the &#x60;cell_id&#x60; when the Data Session was last updated. See [Cell Location Estimate Object](https://www.twilio.com/docs/iot/wireless/api/datasession-resource#cell-location-estimate-object). 
   * @return cellLocationEstimate
   */
  @javax.annotation.Nullable
  public Object getCellLocationEstimate() {
    return cellLocationEstimate;
  }

  public void setCellLocationEstimate(Object cellLocationEstimate) {
    this.cellLocationEstimate = cellLocationEstimate;
  }


  public WirelessV1SimDataSession end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * The date that the record ended, given as GMT in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
   * @return end
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnd() {
    return end;
  }

  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  public WirelessV1SimDataSession imei(String imei) {
    this.imei = imei;
    return this;
  }

  /**
   * The &#39;international mobile equipment identity&#39; is the unique ID of the device using the SIM to connect. An IMEI is a 15-digit string: 14 digits for the device identifier plus a check digit calculated using the Luhn formula.
   * @return imei
   */
  @javax.annotation.Nullable
  public String getImei() {
    return imei;
  }

  public void setImei(String imei) {
    this.imei = imei;
  }


  public WirelessV1SimDataSession lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date that the resource was last updated, given as GMT in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public WirelessV1SimDataSession operatorCountry(String operatorCountry) {
    this.operatorCountry = operatorCountry;
    return this;
  }

  /**
   * The three letter country code representing where the device&#39;s Data Session took place. This is determined by looking up the &#x60;operator_mcc&#x60;.
   * @return operatorCountry
   */
  @javax.annotation.Nullable
  public String getOperatorCountry() {
    return operatorCountry;
  }

  public void setOperatorCountry(String operatorCountry) {
    this.operatorCountry = operatorCountry;
  }


  public WirelessV1SimDataSession operatorMcc(String operatorMcc) {
    this.operatorMcc = operatorMcc;
    return this;
  }

  /**
   * The &#39;mobile country code&#39; is the unique ID of the home country where the Data Session took place. See: [MCC/MNC lookup](http://mcc-mnc.com/).
   * @return operatorMcc
   */
  @javax.annotation.Nullable
  public String getOperatorMcc() {
    return operatorMcc;
  }

  public void setOperatorMcc(String operatorMcc) {
    this.operatorMcc = operatorMcc;
  }


  public WirelessV1SimDataSession operatorMnc(String operatorMnc) {
    this.operatorMnc = operatorMnc;
    return this;
  }

  /**
   * The &#39;mobile network code&#39; is the unique ID specific to the mobile operator network where the Data Session took place.
   * @return operatorMnc
   */
  @javax.annotation.Nullable
  public String getOperatorMnc() {
    return operatorMnc;
  }

  public void setOperatorMnc(String operatorMnc) {
    this.operatorMnc = operatorMnc;
  }


  public WirelessV1SimDataSession operatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * The friendly name of the mobile operator network that the [SIM](https://www.twilio.com/docs/iot/wireless/api/sim-resource)-connected device is attached to. This is determined by looking up the &#x60;operator_mnc&#x60;.
   * @return operatorName
   */
  @javax.annotation.Nullable
  public String getOperatorName() {
    return operatorName;
  }

  public void setOperatorName(String operatorName) {
    this.operatorName = operatorName;
  }


  public WirelessV1SimDataSession packetsDownloaded(Integer packetsDownloaded) {
    this.packetsDownloaded = packetsDownloaded;
    return this;
  }

  /**
   * The number of packets downloaded by the device between the &#x60;start&#x60; time and when the Data Session was last updated.
   * @return packetsDownloaded
   */
  @javax.annotation.Nullable
  public Integer getPacketsDownloaded() {
    return packetsDownloaded;
  }

  public void setPacketsDownloaded(Integer packetsDownloaded) {
    this.packetsDownloaded = packetsDownloaded;
  }


  public WirelessV1SimDataSession packetsUploaded(Integer packetsUploaded) {
    this.packetsUploaded = packetsUploaded;
    return this;
  }

  /**
   * The number of packets uploaded by the device between the &#x60;start&#x60; time and when the Data Session was last updated.
   * @return packetsUploaded
   */
  @javax.annotation.Nullable
  public Integer getPacketsUploaded() {
    return packetsUploaded;
  }

  public void setPacketsUploaded(Integer packetsUploaded) {
    this.packetsUploaded = packetsUploaded;
  }


  public WirelessV1SimDataSession radioLink(String radioLink) {
    this.radioLink = radioLink;
    return this;
  }

  /**
   * The generation of wireless technology that the device was using.
   * @return radioLink
   */
  @javax.annotation.Nullable
  public String getRadioLink() {
    return radioLink;
  }

  public void setRadioLink(String radioLink) {
    this.radioLink = radioLink;
  }


  public WirelessV1SimDataSession sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the DataSession resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public WirelessV1SimDataSession simSid(String simSid) {
    this.simSid = simSid;
    return this;
  }

  /**
   * The SID of the [Sim resource](https://www.twilio.com/docs/iot/wireless/api/sim-resource) that the Data Session is for.
   * @return simSid
   */
  @javax.annotation.Nullable
  public String getSimSid() {
    return simSid;
  }

  public void setSimSid(String simSid) {
    this.simSid = simSid;
  }


  public WirelessV1SimDataSession start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * The date that the Data Session started, given as GMT in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
   * @return start
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WirelessV1SimDataSession wirelessV1SimDataSession = (WirelessV1SimDataSession) o;
    return Objects.equals(this.accountSid, wirelessV1SimDataSession.accountSid) &&
        Objects.equals(this.cellId, wirelessV1SimDataSession.cellId) &&
        Objects.equals(this.cellLocationEstimate, wirelessV1SimDataSession.cellLocationEstimate) &&
        Objects.equals(this.end, wirelessV1SimDataSession.end) &&
        Objects.equals(this.imei, wirelessV1SimDataSession.imei) &&
        Objects.equals(this.lastUpdated, wirelessV1SimDataSession.lastUpdated) &&
        Objects.equals(this.operatorCountry, wirelessV1SimDataSession.operatorCountry) &&
        Objects.equals(this.operatorMcc, wirelessV1SimDataSession.operatorMcc) &&
        Objects.equals(this.operatorMnc, wirelessV1SimDataSession.operatorMnc) &&
        Objects.equals(this.operatorName, wirelessV1SimDataSession.operatorName) &&
        Objects.equals(this.packetsDownloaded, wirelessV1SimDataSession.packetsDownloaded) &&
        Objects.equals(this.packetsUploaded, wirelessV1SimDataSession.packetsUploaded) &&
        Objects.equals(this.radioLink, wirelessV1SimDataSession.radioLink) &&
        Objects.equals(this.sid, wirelessV1SimDataSession.sid) &&
        Objects.equals(this.simSid, wirelessV1SimDataSession.simSid) &&
        Objects.equals(this.start, wirelessV1SimDataSession.start);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, cellId, cellLocationEstimate, end, imei, lastUpdated, operatorCountry, operatorMcc, operatorMnc, operatorName, packetsDownloaded, packetsUploaded, radioLink, sid, simSid, start);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WirelessV1SimDataSession {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    cellId: ").append(toIndentedString(cellId)).append("\n");
    sb.append("    cellLocationEstimate: ").append(toIndentedString(cellLocationEstimate)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    operatorCountry: ").append(toIndentedString(operatorCountry)).append("\n");
    sb.append("    operatorMcc: ").append(toIndentedString(operatorMcc)).append("\n");
    sb.append("    operatorMnc: ").append(toIndentedString(operatorMnc)).append("\n");
    sb.append("    operatorName: ").append(toIndentedString(operatorName)).append("\n");
    sb.append("    packetsDownloaded: ").append(toIndentedString(packetsDownloaded)).append("\n");
    sb.append("    packetsUploaded: ").append(toIndentedString(packetsUploaded)).append("\n");
    sb.append("    radioLink: ").append(toIndentedString(radioLink)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    simSid: ").append(toIndentedString(simSid)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("cell_id");
    openapiFields.add("cell_location_estimate");
    openapiFields.add("end");
    openapiFields.add("imei");
    openapiFields.add("last_updated");
    openapiFields.add("operator_country");
    openapiFields.add("operator_mcc");
    openapiFields.add("operator_mnc");
    openapiFields.add("operator_name");
    openapiFields.add("packets_downloaded");
    openapiFields.add("packets_uploaded");
    openapiFields.add("radio_link");
    openapiFields.add("sid");
    openapiFields.add("sim_sid");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WirelessV1SimDataSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WirelessV1SimDataSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WirelessV1SimDataSession is not found in the empty JSON string", WirelessV1SimDataSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WirelessV1SimDataSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WirelessV1SimDataSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("cell_id") != null && !jsonObj.get("cell_id").isJsonNull()) && !jsonObj.get("cell_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cell_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cell_id").toString()));
      }
      if ((jsonObj.get("imei") != null && !jsonObj.get("imei").isJsonNull()) && !jsonObj.get("imei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imei").toString()));
      }
      if ((jsonObj.get("operator_country") != null && !jsonObj.get("operator_country").isJsonNull()) && !jsonObj.get("operator_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_country").toString()));
      }
      if ((jsonObj.get("operator_mcc") != null && !jsonObj.get("operator_mcc").isJsonNull()) && !jsonObj.get("operator_mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_mcc").toString()));
      }
      if ((jsonObj.get("operator_mnc") != null && !jsonObj.get("operator_mnc").isJsonNull()) && !jsonObj.get("operator_mnc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_mnc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_mnc").toString()));
      }
      if ((jsonObj.get("operator_name") != null && !jsonObj.get("operator_name").isJsonNull()) && !jsonObj.get("operator_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_name").toString()));
      }
      if ((jsonObj.get("radio_link") != null && !jsonObj.get("radio_link").isJsonNull()) && !jsonObj.get("radio_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radio_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radio_link").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("sim_sid") != null && !jsonObj.get("sim_sid").isJsonNull()) && !jsonObj.get("sim_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sim_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sim_sid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WirelessV1SimDataSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WirelessV1SimDataSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WirelessV1SimDataSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WirelessV1SimDataSession.class));

       return (TypeAdapter<T>) new TypeAdapter<WirelessV1SimDataSession>() {
           @Override
           public void write(JsonWriter out, WirelessV1SimDataSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WirelessV1SimDataSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WirelessV1SimDataSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WirelessV1SimDataSession
   * @throws IOException if the JSON string is invalid with respect to WirelessV1SimDataSession
   */
  public static WirelessV1SimDataSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WirelessV1SimDataSession.class);
  }

  /**
   * Convert an instance of WirelessV1SimDataSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

