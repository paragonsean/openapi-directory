/*
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListSimResponse;
import org.openapitools.client.model.SimEnumResetStatus;
import org.openapitools.client.model.SimEnumStatus;
import java.net.URI;
import org.openapitools.client.model.WirelessV1Sim;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WirelessV1SimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WirelessV1SimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WirelessV1SimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSim
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSimCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://wireless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSimValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSim(Async)");
        }

        return deleteSimCall(sid, _callback);

    }

    /**
     * 
     * Delete a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSim(String sid) throws ApiException {
        deleteSimWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSimWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteSimValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSimAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSimValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSim
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://wireless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSimValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSim(Async)");
        }

        return fetchSimCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to fetch. (required)
     * @return WirelessV1Sim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WirelessV1Sim fetchSim(String sid) throws ApiException {
        ApiResponse<WirelessV1Sim> localVarResp = fetchSimWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to fetch. (required)
     * @return ApiResponse&lt;WirelessV1Sim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessV1Sim> fetchSimWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSimValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<WirelessV1Sim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimAsync(String sid, final ApiCallback<WirelessV1Sim> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSimValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<WirelessV1Sim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSim
     * @param status Only return Sim resources with this status. (optional)
     * @param iccid Only return Sim resources with this ICCID. This will return a list with a maximum size of 1. (optional)
     * @param ratePlan The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource. (optional)
     * @param eid Deprecated. (optional)
     * @param simRegistrationCode Only return Sim resources with this registration code. This will return a list with a maximum size of 1. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimCall(SimEnumStatus status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://wireless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (iccid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iccid", iccid));
        }

        if (ratePlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RatePlan", ratePlan));
        }

        if (eid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EId", eid));
        }

        if (simRegistrationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SimRegistrationCode", simRegistrationCode));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimValidateBeforeCall(SimEnumStatus status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSimCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Sim resources on your Account.
     * @param status Only return Sim resources with this status. (optional)
     * @param iccid Only return Sim resources with this ICCID. This will return a list with a maximum size of 1. (optional)
     * @param ratePlan The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource. (optional)
     * @param eid Deprecated. (optional)
     * @param simRegistrationCode Only return Sim resources with this registration code. This will return a list with a maximum size of 1. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSimResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSimResponse listSim(SimEnumStatus status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSimResponse> localVarResp = listSimWithHttpInfo(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Sim resources on your Account.
     * @param status Only return Sim resources with this status. (optional)
     * @param iccid Only return Sim resources with this ICCID. This will return a list with a maximum size of 1. (optional)
     * @param ratePlan The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource. (optional)
     * @param eid Deprecated. (optional)
     * @param simRegistrationCode Only return Sim resources with this registration code. This will return a list with a maximum size of 1. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSimResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSimResponse> listSimWithHttpInfo(SimEnumStatus status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSimValidateBeforeCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Sim resources on your Account.
     * @param status Only return Sim resources with this status. (optional)
     * @param iccid Only return Sim resources with this ICCID. This will return a list with a maximum size of 1. (optional)
     * @param ratePlan The SID or unique name of a [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource). Only return Sim resources assigned to this RatePlan resource. (optional)
     * @param eid Deprecated. (optional)
     * @param simRegistrationCode Only return Sim resources with this registration code. This will return a list with a maximum size of 1. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimAsync(SimEnumStatus status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimValidateBeforeCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSim
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to update. (required)
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource&#39;s status is &#x60;new&#x60;. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/iot/wireless/api/sim-resource#move-sims-between-subaccounts). (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_url&#x60; when the SIM has finished updating. When the SIM transitions from &#x60;new&#x60; to &#x60;ready&#x60; or from any status to &#x60;deactivated&#x60;, we call this URL when the status changes to an intermediate status (&#x60;ready&#x60; or &#x60;deactivated&#x60;) and again when the status changes to its final status (&#x60;active&#x60; or &#x60;canceled&#x60;). (optional)
     * @param commandsCallbackMethod The HTTP method we should use to call &#x60;commands_callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param commandsCallbackUrl The URL we should call using the &#x60;commands_callback_method&#x60; when the SIM sends a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored. (optional)
     * @param friendlyName A descriptive string that you create to describe the Sim resource. It does not need to be unique. (optional)
     * @param ratePlan The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource) to which the Sim resource should be assigned. (optional)
     * @param resetStatus  (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL we should call using the &#x60;sms_fallback_method&#x60; when an error occurs while retrieving or executing the TwiML requested from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call using the &#x60;sms_method&#x60; when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the &#x60;sid&#x60; in the URL path to address the resource. (optional)
     * @param voiceFallbackMethod Deprecated. (optional)
     * @param voiceFallbackUrl Deprecated. (optional)
     * @param voiceMethod Deprecated. (optional)
     * @param voiceUrl Deprecated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimCall(String sid, String accountSid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, SimEnumResetStatus resetStatus, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, SimEnumStatus status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://wireless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid != null) {
            localVarFormParams.put("AccountSid", accountSid);
        }

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (commandsCallbackMethod != null) {
            localVarFormParams.put("CommandsCallbackMethod", commandsCallbackMethod);
        }

        if (commandsCallbackUrl != null) {
            localVarFormParams.put("CommandsCallbackUrl", commandsCallbackUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (ratePlan != null) {
            localVarFormParams.put("RatePlan", ratePlan);
        }

        if (resetStatus != null) {
            localVarFormParams.put("ResetStatus", resetStatus);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSimValidateBeforeCall(String sid, String accountSid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, SimEnumResetStatus resetStatus, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, SimEnumStatus status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSim(Async)");
        }

        return updateSimCall(sid, accountSid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, resetStatus, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * Updates the given properties of a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to update. (required)
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource&#39;s status is &#x60;new&#x60;. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/iot/wireless/api/sim-resource#move-sims-between-subaccounts). (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_url&#x60; when the SIM has finished updating. When the SIM transitions from &#x60;new&#x60; to &#x60;ready&#x60; or from any status to &#x60;deactivated&#x60;, we call this URL when the status changes to an intermediate status (&#x60;ready&#x60; or &#x60;deactivated&#x60;) and again when the status changes to its final status (&#x60;active&#x60; or &#x60;canceled&#x60;). (optional)
     * @param commandsCallbackMethod The HTTP method we should use to call &#x60;commands_callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param commandsCallbackUrl The URL we should call using the &#x60;commands_callback_method&#x60; when the SIM sends a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored. (optional)
     * @param friendlyName A descriptive string that you create to describe the Sim resource. It does not need to be unique. (optional)
     * @param ratePlan The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource) to which the Sim resource should be assigned. (optional)
     * @param resetStatus  (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL we should call using the &#x60;sms_fallback_method&#x60; when an error occurs while retrieving or executing the TwiML requested from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call using the &#x60;sms_method&#x60; when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the &#x60;sid&#x60; in the URL path to address the resource. (optional)
     * @param voiceFallbackMethod Deprecated. (optional)
     * @param voiceFallbackUrl Deprecated. (optional)
     * @param voiceMethod Deprecated. (optional)
     * @param voiceUrl Deprecated. (optional)
     * @return WirelessV1Sim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WirelessV1Sim updateSim(String sid, String accountSid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, SimEnumResetStatus resetStatus, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, SimEnumStatus status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<WirelessV1Sim> localVarResp = updateSimWithHttpInfo(sid, accountSid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, resetStatus, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given properties of a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to update. (required)
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource&#39;s status is &#x60;new&#x60;. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/iot/wireless/api/sim-resource#move-sims-between-subaccounts). (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_url&#x60; when the SIM has finished updating. When the SIM transitions from &#x60;new&#x60; to &#x60;ready&#x60; or from any status to &#x60;deactivated&#x60;, we call this URL when the status changes to an intermediate status (&#x60;ready&#x60; or &#x60;deactivated&#x60;) and again when the status changes to its final status (&#x60;active&#x60; or &#x60;canceled&#x60;). (optional)
     * @param commandsCallbackMethod The HTTP method we should use to call &#x60;commands_callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param commandsCallbackUrl The URL we should call using the &#x60;commands_callback_method&#x60; when the SIM sends a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored. (optional)
     * @param friendlyName A descriptive string that you create to describe the Sim resource. It does not need to be unique. (optional)
     * @param ratePlan The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource) to which the Sim resource should be assigned. (optional)
     * @param resetStatus  (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL we should call using the &#x60;sms_fallback_method&#x60; when an error occurs while retrieving or executing the TwiML requested from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call using the &#x60;sms_method&#x60; when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the &#x60;sid&#x60; in the URL path to address the resource. (optional)
     * @param voiceFallbackMethod Deprecated. (optional)
     * @param voiceFallbackUrl Deprecated. (optional)
     * @param voiceMethod Deprecated. (optional)
     * @param voiceUrl Deprecated. (optional)
     * @return ApiResponse&lt;WirelessV1Sim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessV1Sim> updateSimWithHttpInfo(String sid, String accountSid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, SimEnumResetStatus resetStatus, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, SimEnumStatus status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateSimValidateBeforeCall(sid, accountSid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, resetStatus, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<WirelessV1Sim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given properties of a Sim resource on your Account.
     * @param sid The SID or the &#x60;unique_name&#x60; of the Sim resource to update. (required)
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts) of the requesting Account. Only valid when the Sim resource&#39;s status is &#x60;new&#x60;. For more information, see the [Move SIMs between Subaccounts documentation](https://www.twilio.com/docs/iot/wireless/api/sim-resource#move-sims-between-subaccounts). (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_url&#x60; when the SIM has finished updating. When the SIM transitions from &#x60;new&#x60; to &#x60;ready&#x60; or from any status to &#x60;deactivated&#x60;, we call this URL when the status changes to an intermediate status (&#x60;ready&#x60; or &#x60;deactivated&#x60;) and again when the status changes to its final status (&#x60;active&#x60; or &#x60;canceled&#x60;). (optional)
     * @param commandsCallbackMethod The HTTP method we should use to call &#x60;commands_callback_url&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;. The default is &#x60;POST&#x60;. (optional)
     * @param commandsCallbackUrl The URL we should call using the &#x60;commands_callback_method&#x60; when the SIM sends a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). Your server should respond with an HTTP status code in the 200 range; any response body is ignored. (optional)
     * @param friendlyName A descriptive string that you create to describe the Sim resource. It does not need to be unique. (optional)
     * @param ratePlan The SID or unique name of the [RatePlan resource](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource) to which the Sim resource should be assigned. (optional)
     * @param resetStatus  (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL we should call using the &#x60;sms_fallback_method&#x60; when an error occurs while retrieving or executing the TwiML requested from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. Default is &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call using the &#x60;sms_method&#x60; when the SIM-connected device sends an SMS message that is not a [Command](https://www.twilio.com/docs/iot/wireless/api/command-resource). (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the &#x60;sid&#x60; in the URL path to address the resource. (optional)
     * @param voiceFallbackMethod Deprecated. (optional)
     * @param voiceFallbackUrl Deprecated. (optional)
     * @param voiceMethod Deprecated. (optional)
     * @param voiceUrl Deprecated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimAsync(String sid, String accountSid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, SimEnumResetStatus resetStatus, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, SimEnumStatus status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<WirelessV1Sim> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSimValidateBeforeCall(sid, accountSid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, resetStatus, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<WirelessV1Sim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
