/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWirelessV1RatePlanApi_H
#define OAI_OAIWirelessV1RatePlanApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListRatePlanResponse.h"
#include "OAIWireless_v1_rate_plan.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWirelessV1RatePlanApi : public QObject {
    Q_OBJECT

public:
    OAIWirelessV1RatePlanApi(const int timeOut = 0);
    ~OAIWirelessV1RatePlanApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  data_enabled bool [optional]
    * @param[in]  data_limit qint32 [optional]
    * @param[in]  data_metering QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  international_roaming QList<QString> [optional]
    * @param[in]  international_roaming_data_limit qint32 [optional]
    * @param[in]  messaging_enabled bool [optional]
    * @param[in]  national_roaming_data_limit qint32 [optional]
    * @param[in]  national_roaming_enabled bool [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  voice_enabled bool [optional]
    */
    virtual void createRatePlan(const ::OpenAPI::OptionalParam<bool> &data_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &data_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_metering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &international_roaming = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &international_roaming_data_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &messaging_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &national_roaming_data_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &national_roaming_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &voice_enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteRatePlan(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchRatePlan(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRatePlan(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateRatePlan(const QString &sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRatePlanCallback(OAIHttpRequestWorker *worker);
    void deleteRatePlanCallback(OAIHttpRequestWorker *worker);
    void fetchRatePlanCallback(OAIHttpRequestWorker *worker);
    void listRatePlanCallback(OAIHttpRequestWorker *worker);
    void updateRatePlanCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRatePlanSignal(OAIWireless_v1_rate_plan summary);
    void deleteRatePlanSignal();
    void fetchRatePlanSignal(OAIWireless_v1_rate_plan summary);
    void listRatePlanSignal(OAIListRatePlanResponse summary);
    void updateRatePlanSignal(OAIWireless_v1_rate_plan summary);


    void createRatePlanSignalFull(OAIHttpRequestWorker *worker, OAIWireless_v1_rate_plan summary);
    void deleteRatePlanSignalFull(OAIHttpRequestWorker *worker);
    void fetchRatePlanSignalFull(OAIHttpRequestWorker *worker, OAIWireless_v1_rate_plan summary);
    void listRatePlanSignalFull(OAIHttpRequestWorker *worker, OAIListRatePlanResponse summary);
    void updateRatePlanSignalFull(OAIHttpRequestWorker *worker, OAIWireless_v1_rate_plan summary);

    Q_DECL_DEPRECATED_X("Use createRatePlanSignalError() instead")
    void createRatePlanSignalE(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRatePlanSignalError(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRatePlanSignalError() instead")
    void deleteRatePlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRatePlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRatePlanSignalError() instead")
    void fetchRatePlanSignalE(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRatePlanSignalError(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRatePlanSignalError() instead")
    void listRatePlanSignalE(OAIListRatePlanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlanSignalError(OAIListRatePlanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRatePlanSignalError() instead")
    void updateRatePlanSignalE(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRatePlanSignalError(OAIWireless_v1_rate_plan summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRatePlanSignalErrorFull() instead")
    void createRatePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRatePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRatePlanSignalErrorFull() instead")
    void deleteRatePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRatePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRatePlanSignalErrorFull() instead")
    void fetchRatePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRatePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRatePlanSignalErrorFull() instead")
    void listRatePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRatePlanSignalErrorFull() instead")
    void updateRatePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRatePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
