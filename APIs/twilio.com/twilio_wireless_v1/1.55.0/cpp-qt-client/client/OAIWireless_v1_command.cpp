/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWireless_v1_command.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWireless_v1_command::OAIWireless_v1_command(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWireless_v1_command::OAIWireless_v1_command() {
    this->initializeModel();
}

OAIWireless_v1_command::~OAIWireless_v1_command() {}

void OAIWireless_v1_command::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_command_mode_isSet = false;
    m_command_mode_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_delivery_receipt_requested_isSet = false;
    m_delivery_receipt_requested_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWireless_v1_command::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWireless_v1_command::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_command_mode_isValid = ::OpenAPI::fromJsonValue(m_command_mode, json[QString("command_mode")]);
    m_command_mode_isSet = !json[QString("command_mode")].isNull() && m_command_mode_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_delivery_receipt_requested_isValid = ::OpenAPI::fromJsonValue(m_delivery_receipt_requested, json[QString("delivery_receipt_requested")]);
    m_delivery_receipt_requested_isSet = !json[QString("delivery_receipt_requested")].isNull() && m_delivery_receipt_requested_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWireless_v1_command::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWireless_v1_command::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_command_mode.isSet()) {
        obj.insert(QString("command_mode"), ::OpenAPI::toJsonValue(m_command_mode));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_delivery_receipt_requested_isSet) {
        obj.insert(QString("delivery_receipt_requested"), ::OpenAPI::toJsonValue(m_delivery_receipt_requested));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWireless_v1_command::getAccountSid() const {
    return m_account_sid;
}
void OAIWireless_v1_command::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIWireless_v1_command::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIWireless_v1_command::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIWireless_v1_command::getCommand() const {
    return m_command;
}
void OAIWireless_v1_command::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIWireless_v1_command::is_command_Set() const{
    return m_command_isSet;
}

bool OAIWireless_v1_command::is_command_Valid() const{
    return m_command_isValid;
}

OAICommand_enum_command_mode OAIWireless_v1_command::getCommandMode() const {
    return m_command_mode;
}
void OAIWireless_v1_command::setCommandMode(const OAICommand_enum_command_mode &command_mode) {
    m_command_mode = command_mode;
    m_command_mode_isSet = true;
}

bool OAIWireless_v1_command::is_command_mode_Set() const{
    return m_command_mode_isSet;
}

bool OAIWireless_v1_command::is_command_mode_Valid() const{
    return m_command_mode_isValid;
}

QDateTime OAIWireless_v1_command::getDateCreated() const {
    return m_date_created;
}
void OAIWireless_v1_command::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIWireless_v1_command::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIWireless_v1_command::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIWireless_v1_command::getDateUpdated() const {
    return m_date_updated;
}
void OAIWireless_v1_command::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIWireless_v1_command::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIWireless_v1_command::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIWireless_v1_command::isDeliveryReceiptRequested() const {
    return m_delivery_receipt_requested;
}
void OAIWireless_v1_command::setDeliveryReceiptRequested(const bool &delivery_receipt_requested) {
    m_delivery_receipt_requested = delivery_receipt_requested;
    m_delivery_receipt_requested_isSet = true;
}

bool OAIWireless_v1_command::is_delivery_receipt_requested_Set() const{
    return m_delivery_receipt_requested_isSet;
}

bool OAIWireless_v1_command::is_delivery_receipt_requested_Valid() const{
    return m_delivery_receipt_requested_isValid;
}

OAICommand_enum_direction OAIWireless_v1_command::getDirection() const {
    return m_direction;
}
void OAIWireless_v1_command::setDirection(const OAICommand_enum_direction &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIWireless_v1_command::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIWireless_v1_command::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIWireless_v1_command::getSid() const {
    return m_sid;
}
void OAIWireless_v1_command::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIWireless_v1_command::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIWireless_v1_command::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIWireless_v1_command::getSimSid() const {
    return m_sim_sid;
}
void OAIWireless_v1_command::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAIWireless_v1_command::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAIWireless_v1_command::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

OAICommand_enum_status OAIWireless_v1_command::getStatus() const {
    return m_status;
}
void OAIWireless_v1_command::setStatus(const OAICommand_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWireless_v1_command::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWireless_v1_command::is_status_Valid() const{
    return m_status_isValid;
}

OAICommand_enum_transport OAIWireless_v1_command::getTransport() const {
    return m_transport;
}
void OAIWireless_v1_command::setTransport(const OAICommand_enum_transport &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIWireless_v1_command::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIWireless_v1_command::is_transport_Valid() const{
    return m_transport_isValid;
}

QString OAIWireless_v1_command::getUrl() const {
    return m_url;
}
void OAIWireless_v1_command::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWireless_v1_command::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWireless_v1_command::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWireless_v1_command::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_receipt_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWireless_v1_command::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
