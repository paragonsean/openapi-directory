/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWirelessV1CommandApi_H
#define OAI_OAIWirelessV1CommandApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommand_enum_command_mode.h"
#include "OAICommand_enum_direction.h"
#include "OAICommand_enum_status.h"
#include "OAICommand_enum_transport.h"
#include "OAIListCommandResponse.h"
#include "OAIWireless_v1_command.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWirelessV1CommandApi : public QObject {
    Q_OBJECT

public:
    OAIWirelessV1CommandApi(const int timeOut = 0);
    ~OAIWirelessV1CommandApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  command QString [required]
    * @param[in]  callback_method QString [optional]
    * @param[in]  callback_url QString [optional]
    * @param[in]  command_mode OAICommand_enum_command_mode [optional]
    * @param[in]  delivery_receipt_requested bool [optional]
    * @param[in]  include_sid QString [optional]
    * @param[in]  sim QString [optional]
    */
    virtual void createCommand(const QString &command, const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICommand_enum_command_mode> &command_mode = ::OpenAPI::OptionalParam<OAICommand_enum_command_mode>(), const ::OpenAPI::OptionalParam<bool> &delivery_receipt_requested = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteCommand(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchCommand(const QString &sid);

    /**
    * @param[in]  sim QString [optional]
    * @param[in]  status OAICommand_enum_status [optional]
    * @param[in]  direction OAICommand_enum_direction [optional]
    * @param[in]  transport OAICommand_enum_transport [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCommand(const ::OpenAPI::OptionalParam<QString> &sim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICommand_enum_status> &status = ::OpenAPI::OptionalParam<OAICommand_enum_status>(), const ::OpenAPI::OptionalParam<OAICommand_enum_direction> &direction = ::OpenAPI::OptionalParam<OAICommand_enum_direction>(), const ::OpenAPI::OptionalParam<OAICommand_enum_transport> &transport = ::OpenAPI::OptionalParam<OAICommand_enum_transport>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCommandCallback(OAIHttpRequestWorker *worker);
    void deleteCommandCallback(OAIHttpRequestWorker *worker);
    void fetchCommandCallback(OAIHttpRequestWorker *worker);
    void listCommandCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCommandSignal(OAIWireless_v1_command summary);
    void deleteCommandSignal();
    void fetchCommandSignal(OAIWireless_v1_command summary);
    void listCommandSignal(OAIListCommandResponse summary);


    void createCommandSignalFull(OAIHttpRequestWorker *worker, OAIWireless_v1_command summary);
    void deleteCommandSignalFull(OAIHttpRequestWorker *worker);
    void fetchCommandSignalFull(OAIHttpRequestWorker *worker, OAIWireless_v1_command summary);
    void listCommandSignalFull(OAIHttpRequestWorker *worker, OAIListCommandResponse summary);

    Q_DECL_DEPRECATED_X("Use createCommandSignalError() instead")
    void createCommandSignalE(OAIWireless_v1_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommandSignalError(OAIWireless_v1_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommandSignalError() instead")
    void deleteCommandSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommandSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCommandSignalError() instead")
    void fetchCommandSignalE(OAIWireless_v1_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCommandSignalError(OAIWireless_v1_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCommandSignalError() instead")
    void listCommandSignalE(OAIListCommandResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCommandSignalError(OAIListCommandResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCommandSignalErrorFull() instead")
    void createCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommandSignalErrorFull() instead")
    void deleteCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCommandSignalErrorFull() instead")
    void fetchCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCommandSignalErrorFull() instead")
    void listCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
