/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWireless_v1_sim_usage_record.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWireless_v1_sim_usage_record::OAIWireless_v1_sim_usage_record(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWireless_v1_sim_usage_record::OAIWireless_v1_sim_usage_record() {
    this->initializeModel();
}

OAIWireless_v1_sim_usage_record::~OAIWireless_v1_sim_usage_record() {}

void OAIWireless_v1_sim_usage_record::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;
}

void OAIWireless_v1_sim_usage_record::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWireless_v1_sim_usage_record::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;
}

QString OAIWireless_v1_sim_usage_record::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWireless_v1_sim_usage_record::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_commands_isSet) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    return obj;
}

QString OAIWireless_v1_sim_usage_record::getAccountSid() const {
    return m_account_sid;
}
void OAIWireless_v1_sim_usage_record::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIWireless_v1_sim_usage_record::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIWireless_v1_sim_usage_record::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIWireless_v1_sim_usage_record::getCommands() const {
    return m_commands;
}
void OAIWireless_v1_sim_usage_record::setCommands(const QJsonValue &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIWireless_v1_sim_usage_record::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIWireless_v1_sim_usage_record::is_commands_Valid() const{
    return m_commands_isValid;
}

QJsonValue OAIWireless_v1_sim_usage_record::getData() const {
    return m_data;
}
void OAIWireless_v1_sim_usage_record::setData(const QJsonValue &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWireless_v1_sim_usage_record::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWireless_v1_sim_usage_record::is_data_Valid() const{
    return m_data_isValid;
}

QJsonValue OAIWireless_v1_sim_usage_record::getPeriod() const {
    return m_period;
}
void OAIWireless_v1_sim_usage_record::setPeriod(const QJsonValue &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIWireless_v1_sim_usage_record::is_period_Set() const{
    return m_period_isSet;
}

bool OAIWireless_v1_sim_usage_record::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIWireless_v1_sim_usage_record::getSimSid() const {
    return m_sim_sid;
}
void OAIWireless_v1_sim_usage_record::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAIWireless_v1_sim_usage_record::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAIWireless_v1_sim_usage_record::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

bool OAIWireless_v1_sim_usage_record::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWireless_v1_sim_usage_record::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
