/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWireless_v1_rate_plan.h
 *
 * 
 */

#ifndef OAIWireless_v1_rate_plan_H
#define OAIWireless_v1_rate_plan_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWireless_v1_rate_plan : public OAIObject {
public:
    OAIWireless_v1_rate_plan();
    OAIWireless_v1_rate_plan(QString json);
    ~OAIWireless_v1_rate_plan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    bool isDataEnabled() const;
    void setDataEnabled(const bool &data_enabled);
    bool is_data_enabled_Set() const;
    bool is_data_enabled_Valid() const;

    qint32 getDataLimit() const;
    void setDataLimit(const qint32 &data_limit);
    bool is_data_limit_Set() const;
    bool is_data_limit_Valid() const;

    QString getDataMetering() const;
    void setDataMetering(const QString &data_metering);
    bool is_data_metering_Set() const;
    bool is_data_metering_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QList<QString> getInternationalRoaming() const;
    void setInternationalRoaming(const QList<QString> &international_roaming);
    bool is_international_roaming_Set() const;
    bool is_international_roaming_Valid() const;

    qint32 getInternationalRoamingDataLimit() const;
    void setInternationalRoamingDataLimit(const qint32 &international_roaming_data_limit);
    bool is_international_roaming_data_limit_Set() const;
    bool is_international_roaming_data_limit_Valid() const;

    bool isMessagingEnabled() const;
    void setMessagingEnabled(const bool &messaging_enabled);
    bool is_messaging_enabled_Set() const;
    bool is_messaging_enabled_Valid() const;

    qint32 getNationalRoamingDataLimit() const;
    void setNationalRoamingDataLimit(const qint32 &national_roaming_data_limit);
    bool is_national_roaming_data_limit_Set() const;
    bool is_national_roaming_data_limit_Valid() const;

    bool isNationalRoamingEnabled() const;
    void setNationalRoamingEnabled(const bool &national_roaming_enabled);
    bool is_national_roaming_enabled_Set() const;
    bool is_national_roaming_enabled_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    QString getUniqueName() const;
    void setUniqueName(const QString &unique_name);
    bool is_unique_name_Set() const;
    bool is_unique_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    bool isVoiceEnabled() const;
    void setVoiceEnabled(const bool &voice_enabled);
    bool is_voice_enabled_Set() const;
    bool is_voice_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    bool m_data_enabled;
    bool m_data_enabled_isSet;
    bool m_data_enabled_isValid;

    qint32 m_data_limit;
    bool m_data_limit_isSet;
    bool m_data_limit_isValid;

    QString m_data_metering;
    bool m_data_metering_isSet;
    bool m_data_metering_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QList<QString> m_international_roaming;
    bool m_international_roaming_isSet;
    bool m_international_roaming_isValid;

    qint32 m_international_roaming_data_limit;
    bool m_international_roaming_data_limit_isSet;
    bool m_international_roaming_data_limit_isValid;

    bool m_messaging_enabled;
    bool m_messaging_enabled_isSet;
    bool m_messaging_enabled_isValid;

    qint32 m_national_roaming_data_limit;
    bool m_national_roaming_data_limit_isSet;
    bool m_national_roaming_data_limit_isValid;

    bool m_national_roaming_enabled;
    bool m_national_roaming_enabled_isSet;
    bool m_national_roaming_enabled_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    QString m_unique_name;
    bool m_unique_name_isSet;
    bool m_unique_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    bool m_voice_enabled;
    bool m_voice_enabled_isSet;
    bool m_voice_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWireless_v1_rate_plan)

#endif // OAIWireless_v1_rate_plan_H
