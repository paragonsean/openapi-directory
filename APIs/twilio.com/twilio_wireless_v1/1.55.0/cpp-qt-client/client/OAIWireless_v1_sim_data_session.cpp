/**
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWireless_v1_sim_data_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWireless_v1_sim_data_session::OAIWireless_v1_sim_data_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWireless_v1_sim_data_session::OAIWireless_v1_sim_data_session() {
    this->initializeModel();
}

OAIWireless_v1_sim_data_session::~OAIWireless_v1_sim_data_session() {}

void OAIWireless_v1_sim_data_session::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_cell_id_isSet = false;
    m_cell_id_isValid = false;

    m_cell_location_estimate_isSet = false;
    m_cell_location_estimate_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_operator_country_isSet = false;
    m_operator_country_isValid = false;

    m_operator_mcc_isSet = false;
    m_operator_mcc_isValid = false;

    m_operator_mnc_isSet = false;
    m_operator_mnc_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;

    m_packets_downloaded_isSet = false;
    m_packets_downloaded_isValid = false;

    m_packets_uploaded_isSet = false;
    m_packets_uploaded_isValid = false;

    m_radio_link_isSet = false;
    m_radio_link_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIWireless_v1_sim_data_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWireless_v1_sim_data_session::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_cell_id_isValid = ::OpenAPI::fromJsonValue(m_cell_id, json[QString("cell_id")]);
    m_cell_id_isSet = !json[QString("cell_id")].isNull() && m_cell_id_isValid;

    m_cell_location_estimate_isValid = ::OpenAPI::fromJsonValue(m_cell_location_estimate, json[QString("cell_location_estimate")]);
    m_cell_location_estimate_isSet = !json[QString("cell_location_estimate")].isNull() && m_cell_location_estimate_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_operator_country_isValid = ::OpenAPI::fromJsonValue(m_operator_country, json[QString("operator_country")]);
    m_operator_country_isSet = !json[QString("operator_country")].isNull() && m_operator_country_isValid;

    m_operator_mcc_isValid = ::OpenAPI::fromJsonValue(m_operator_mcc, json[QString("operator_mcc")]);
    m_operator_mcc_isSet = !json[QString("operator_mcc")].isNull() && m_operator_mcc_isValid;

    m_operator_mnc_isValid = ::OpenAPI::fromJsonValue(m_operator_mnc, json[QString("operator_mnc")]);
    m_operator_mnc_isSet = !json[QString("operator_mnc")].isNull() && m_operator_mnc_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("operator_name")]);
    m_operator_name_isSet = !json[QString("operator_name")].isNull() && m_operator_name_isValid;

    m_packets_downloaded_isValid = ::OpenAPI::fromJsonValue(m_packets_downloaded, json[QString("packets_downloaded")]);
    m_packets_downloaded_isSet = !json[QString("packets_downloaded")].isNull() && m_packets_downloaded_isValid;

    m_packets_uploaded_isValid = ::OpenAPI::fromJsonValue(m_packets_uploaded, json[QString("packets_uploaded")]);
    m_packets_uploaded_isSet = !json[QString("packets_uploaded")].isNull() && m_packets_uploaded_isValid;

    m_radio_link_isValid = ::OpenAPI::fromJsonValue(m_radio_link, json[QString("radio_link")]);
    m_radio_link_isSet = !json[QString("radio_link")].isNull() && m_radio_link_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIWireless_v1_sim_data_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWireless_v1_sim_data_session::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_cell_id_isSet) {
        obj.insert(QString("cell_id"), ::OpenAPI::toJsonValue(m_cell_id));
    }
    if (m_cell_location_estimate_isSet) {
        obj.insert(QString("cell_location_estimate"), ::OpenAPI::toJsonValue(m_cell_location_estimate));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_operator_country_isSet) {
        obj.insert(QString("operator_country"), ::OpenAPI::toJsonValue(m_operator_country));
    }
    if (m_operator_mcc_isSet) {
        obj.insert(QString("operator_mcc"), ::OpenAPI::toJsonValue(m_operator_mcc));
    }
    if (m_operator_mnc_isSet) {
        obj.insert(QString("operator_mnc"), ::OpenAPI::toJsonValue(m_operator_mnc));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("operator_name"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    if (m_packets_downloaded_isSet) {
        obj.insert(QString("packets_downloaded"), ::OpenAPI::toJsonValue(m_packets_downloaded));
    }
    if (m_packets_uploaded_isSet) {
        obj.insert(QString("packets_uploaded"), ::OpenAPI::toJsonValue(m_packets_uploaded));
    }
    if (m_radio_link_isSet) {
        obj.insert(QString("radio_link"), ::OpenAPI::toJsonValue(m_radio_link));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIWireless_v1_sim_data_session::getAccountSid() const {
    return m_account_sid;
}
void OAIWireless_v1_sim_data_session::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIWireless_v1_sim_data_session::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIWireless_v1_sim_data_session::getCellId() const {
    return m_cell_id;
}
void OAIWireless_v1_sim_data_session::setCellId(const QString &cell_id) {
    m_cell_id = cell_id;
    m_cell_id_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_cell_id_Set() const{
    return m_cell_id_isSet;
}

bool OAIWireless_v1_sim_data_session::is_cell_id_Valid() const{
    return m_cell_id_isValid;
}

QJsonValue OAIWireless_v1_sim_data_session::getCellLocationEstimate() const {
    return m_cell_location_estimate;
}
void OAIWireless_v1_sim_data_session::setCellLocationEstimate(const QJsonValue &cell_location_estimate) {
    m_cell_location_estimate = cell_location_estimate;
    m_cell_location_estimate_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_cell_location_estimate_Set() const{
    return m_cell_location_estimate_isSet;
}

bool OAIWireless_v1_sim_data_session::is_cell_location_estimate_Valid() const{
    return m_cell_location_estimate_isValid;
}

QDateTime OAIWireless_v1_sim_data_session::getEnd() const {
    return m_end;
}
void OAIWireless_v1_sim_data_session::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_end_Set() const{
    return m_end_isSet;
}

bool OAIWireless_v1_sim_data_session::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIWireless_v1_sim_data_session::getImei() const {
    return m_imei;
}
void OAIWireless_v1_sim_data_session::setImei(const QString &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIWireless_v1_sim_data_session::is_imei_Valid() const{
    return m_imei_isValid;
}

QDateTime OAIWireless_v1_sim_data_session::getLastUpdated() const {
    return m_last_updated;
}
void OAIWireless_v1_sim_data_session::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWireless_v1_sim_data_session::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWireless_v1_sim_data_session::getOperatorCountry() const {
    return m_operator_country;
}
void OAIWireless_v1_sim_data_session::setOperatorCountry(const QString &operator_country) {
    m_operator_country = operator_country;
    m_operator_country_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_operator_country_Set() const{
    return m_operator_country_isSet;
}

bool OAIWireless_v1_sim_data_session::is_operator_country_Valid() const{
    return m_operator_country_isValid;
}

QString OAIWireless_v1_sim_data_session::getOperatorMcc() const {
    return m_operator_mcc;
}
void OAIWireless_v1_sim_data_session::setOperatorMcc(const QString &operator_mcc) {
    m_operator_mcc = operator_mcc;
    m_operator_mcc_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_operator_mcc_Set() const{
    return m_operator_mcc_isSet;
}

bool OAIWireless_v1_sim_data_session::is_operator_mcc_Valid() const{
    return m_operator_mcc_isValid;
}

QString OAIWireless_v1_sim_data_session::getOperatorMnc() const {
    return m_operator_mnc;
}
void OAIWireless_v1_sim_data_session::setOperatorMnc(const QString &operator_mnc) {
    m_operator_mnc = operator_mnc;
    m_operator_mnc_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_operator_mnc_Set() const{
    return m_operator_mnc_isSet;
}

bool OAIWireless_v1_sim_data_session::is_operator_mnc_Valid() const{
    return m_operator_mnc_isValid;
}

QString OAIWireless_v1_sim_data_session::getOperatorName() const {
    return m_operator_name;
}
void OAIWireless_v1_sim_data_session::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAIWireless_v1_sim_data_session::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

qint32 OAIWireless_v1_sim_data_session::getPacketsDownloaded() const {
    return m_packets_downloaded;
}
void OAIWireless_v1_sim_data_session::setPacketsDownloaded(const qint32 &packets_downloaded) {
    m_packets_downloaded = packets_downloaded;
    m_packets_downloaded_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_packets_downloaded_Set() const{
    return m_packets_downloaded_isSet;
}

bool OAIWireless_v1_sim_data_session::is_packets_downloaded_Valid() const{
    return m_packets_downloaded_isValid;
}

qint32 OAIWireless_v1_sim_data_session::getPacketsUploaded() const {
    return m_packets_uploaded;
}
void OAIWireless_v1_sim_data_session::setPacketsUploaded(const qint32 &packets_uploaded) {
    m_packets_uploaded = packets_uploaded;
    m_packets_uploaded_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_packets_uploaded_Set() const{
    return m_packets_uploaded_isSet;
}

bool OAIWireless_v1_sim_data_session::is_packets_uploaded_Valid() const{
    return m_packets_uploaded_isValid;
}

QString OAIWireless_v1_sim_data_session::getRadioLink() const {
    return m_radio_link;
}
void OAIWireless_v1_sim_data_session::setRadioLink(const QString &radio_link) {
    m_radio_link = radio_link;
    m_radio_link_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_radio_link_Set() const{
    return m_radio_link_isSet;
}

bool OAIWireless_v1_sim_data_session::is_radio_link_Valid() const{
    return m_radio_link_isValid;
}

QString OAIWireless_v1_sim_data_session::getSid() const {
    return m_sid;
}
void OAIWireless_v1_sim_data_session::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIWireless_v1_sim_data_session::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIWireless_v1_sim_data_session::getSimSid() const {
    return m_sim_sid;
}
void OAIWireless_v1_sim_data_session::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAIWireless_v1_sim_data_session::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

QDateTime OAIWireless_v1_sim_data_session::getStart() const {
    return m_start;
}
void OAIWireless_v1_sim_data_session::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIWireless_v1_sim_data_session::is_start_Set() const{
    return m_start_isSet;
}

bool OAIWireless_v1_sim_data_session::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIWireless_v1_sim_data_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_location_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packets_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packets_uploaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radio_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWireless_v1_sim_data_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
