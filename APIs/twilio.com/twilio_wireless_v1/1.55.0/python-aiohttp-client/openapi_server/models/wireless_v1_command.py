# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.command_enum_command_mode import CommandEnumCommandMode
from openapi_server.models.command_enum_direction import CommandEnumDirection
from openapi_server.models.command_enum_status import CommandEnumStatus
from openapi_server.models.command_enum_transport import CommandEnumTransport
import re
from openapi_server import util


class WirelessV1Command(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, command: str=None, command_mode: CommandEnumCommandMode=None, date_created: datetime=None, date_updated: datetime=None, delivery_receipt_requested: bool=None, direction: CommandEnumDirection=None, sid: str=None, sim_sid: str=None, status: CommandEnumStatus=None, transport: CommandEnumTransport=None, url: str=None):
        """WirelessV1Command - a model defined in OpenAPI

        :param account_sid: The account_sid of this WirelessV1Command.
        :param command: The command of this WirelessV1Command.
        :param command_mode: The command_mode of this WirelessV1Command.
        :param date_created: The date_created of this WirelessV1Command.
        :param date_updated: The date_updated of this WirelessV1Command.
        :param delivery_receipt_requested: The delivery_receipt_requested of this WirelessV1Command.
        :param direction: The direction of this WirelessV1Command.
        :param sid: The sid of this WirelessV1Command.
        :param sim_sid: The sim_sid of this WirelessV1Command.
        :param status: The status of this WirelessV1Command.
        :param transport: The transport of this WirelessV1Command.
        :param url: The url of this WirelessV1Command.
        """
        self.openapi_types = {
            'account_sid': str,
            'command': str,
            'command_mode': CommandEnumCommandMode,
            'date_created': datetime,
            'date_updated': datetime,
            'delivery_receipt_requested': bool,
            'direction': CommandEnumDirection,
            'sid': str,
            'sim_sid': str,
            'status': CommandEnumStatus,
            'transport': CommandEnumTransport,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'command': 'command',
            'command_mode': 'command_mode',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'delivery_receipt_requested': 'delivery_receipt_requested',
            'direction': 'direction',
            'sid': 'sid',
            'sim_sid': 'sim_sid',
            'status': 'status',
            'transport': 'transport',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._command = command
        self._command_mode = command_mode
        self._date_created = date_created
        self._date_updated = date_updated
        self._delivery_receipt_requested = delivery_receipt_requested
        self._direction = direction
        self._sid = sid
        self._sim_sid = sim_sid
        self._status = status
        self._transport = transport
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirelessV1Command':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The wireless.v1.command of this WirelessV1Command.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this WirelessV1Command.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Command resource.

        :return: The account_sid of this WirelessV1Command.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this WirelessV1Command.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Command resource.

        :param account_sid: The account_sid of this WirelessV1Command.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def command(self):
        """Gets the command of this WirelessV1Command.

        The message being sent to or from the SIM. For text mode messages, this can be up to 160 characters. For binary mode messages, this is a series of up to 140 bytes of data encoded using base64.

        :return: The command of this WirelessV1Command.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this WirelessV1Command.

        The message being sent to or from the SIM. For text mode messages, this can be up to 160 characters. For binary mode messages, this is a series of up to 140 bytes of data encoded using base64.

        :param command: The command of this WirelessV1Command.
        :type command: str
        """

        self._command = command

    @property
    def command_mode(self):
        """Gets the command_mode of this WirelessV1Command.


        :return: The command_mode of this WirelessV1Command.
        :rtype: CommandEnumCommandMode
        """
        return self._command_mode

    @command_mode.setter
    def command_mode(self, command_mode):
        """Sets the command_mode of this WirelessV1Command.


        :param command_mode: The command_mode of this WirelessV1Command.
        :type command_mode: CommandEnumCommandMode
        """

        self._command_mode = command_mode

    @property
    def date_created(self):
        """Gets the date_created of this WirelessV1Command.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :return: The date_created of this WirelessV1Command.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WirelessV1Command.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :param date_created: The date_created of this WirelessV1Command.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this WirelessV1Command.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :return: The date_updated of this WirelessV1Command.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this WirelessV1Command.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :param date_updated: The date_updated of this WirelessV1Command.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def delivery_receipt_requested(self):
        """Gets the delivery_receipt_requested of this WirelessV1Command.

        Whether to request a delivery receipt.

        :return: The delivery_receipt_requested of this WirelessV1Command.
        :rtype: bool
        """
        return self._delivery_receipt_requested

    @delivery_receipt_requested.setter
    def delivery_receipt_requested(self, delivery_receipt_requested):
        """Sets the delivery_receipt_requested of this WirelessV1Command.

        Whether to request a delivery receipt.

        :param delivery_receipt_requested: The delivery_receipt_requested of this WirelessV1Command.
        :type delivery_receipt_requested: bool
        """

        self._delivery_receipt_requested = delivery_receipt_requested

    @property
    def direction(self):
        """Gets the direction of this WirelessV1Command.


        :return: The direction of this WirelessV1Command.
        :rtype: CommandEnumDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this WirelessV1Command.


        :param direction: The direction of this WirelessV1Command.
        :type direction: CommandEnumDirection
        """

        self._direction = direction

    @property
    def sid(self):
        """Gets the sid of this WirelessV1Command.

        The unique string that we created to identify the Command resource.

        :return: The sid of this WirelessV1Command.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this WirelessV1Command.

        The unique string that we created to identify the Command resource.

        :param sid: The sid of this WirelessV1Command.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^DC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^DC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sim_sid(self):
        """Gets the sim_sid of this WirelessV1Command.

        The SID of the [Sim resource](https://www.twilio.com/docs/iot/wireless/api/sim-resource) that the Command was sent to or from.

        :return: The sim_sid of this WirelessV1Command.
        :rtype: str
        """
        return self._sim_sid

    @sim_sid.setter
    def sim_sid(self, sim_sid):
        """Sets the sim_sid of this WirelessV1Command.

        The SID of the [Sim resource](https://www.twilio.com/docs/iot/wireless/api/sim-resource) that the Command was sent to or from.

        :param sim_sid: The sim_sid of this WirelessV1Command.
        :type sim_sid: str
        """
        if sim_sid is not None and len(sim_sid) > 34:
            raise ValueError("Invalid value for `sim_sid`, length must be less than or equal to `34`")
        if sim_sid is not None and len(sim_sid) < 34:
            raise ValueError("Invalid value for `sim_sid`, length must be greater than or equal to `34`")
        if sim_sid is not None and not re.search(r'^DE[0-9a-fA-F]{32}$', sim_sid):
            raise ValueError("Invalid value for `sim_sid`, must be a follow pattern or equal to `/^DE[0-9a-fA-F]{32}$/`")

        self._sim_sid = sim_sid

    @property
    def status(self):
        """Gets the status of this WirelessV1Command.


        :return: The status of this WirelessV1Command.
        :rtype: CommandEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WirelessV1Command.


        :param status: The status of this WirelessV1Command.
        :type status: CommandEnumStatus
        """

        self._status = status

    @property
    def transport(self):
        """Gets the transport of this WirelessV1Command.


        :return: The transport of this WirelessV1Command.
        :rtype: CommandEnumTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this WirelessV1Command.


        :param transport: The transport of this WirelessV1Command.
        :type transport: CommandEnumTransport
        """

        self._transport = transport

    @property
    def url(self):
        """Gets the url of this WirelessV1Command.

        The absolute URL of the resource.

        :return: The url of this WirelessV1Command.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WirelessV1Command.

        The absolute URL of the resource.

        :param url: The url of this WirelessV1Command.
        :type url: str
        """

        self._url = url
