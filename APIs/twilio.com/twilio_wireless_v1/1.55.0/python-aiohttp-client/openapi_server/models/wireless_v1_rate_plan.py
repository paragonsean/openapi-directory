# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WirelessV1RatePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, data_enabled: bool=None, data_limit: int=None, data_metering: str=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, international_roaming: List[str]=None, international_roaming_data_limit: int=None, messaging_enabled: bool=None, national_roaming_data_limit: int=None, national_roaming_enabled: bool=None, sid: str=None, unique_name: str=None, url: str=None, voice_enabled: bool=None):
        """WirelessV1RatePlan - a model defined in OpenAPI

        :param account_sid: The account_sid of this WirelessV1RatePlan.
        :param data_enabled: The data_enabled of this WirelessV1RatePlan.
        :param data_limit: The data_limit of this WirelessV1RatePlan.
        :param data_metering: The data_metering of this WirelessV1RatePlan.
        :param date_created: The date_created of this WirelessV1RatePlan.
        :param date_updated: The date_updated of this WirelessV1RatePlan.
        :param friendly_name: The friendly_name of this WirelessV1RatePlan.
        :param international_roaming: The international_roaming of this WirelessV1RatePlan.
        :param international_roaming_data_limit: The international_roaming_data_limit of this WirelessV1RatePlan.
        :param messaging_enabled: The messaging_enabled of this WirelessV1RatePlan.
        :param national_roaming_data_limit: The national_roaming_data_limit of this WirelessV1RatePlan.
        :param national_roaming_enabled: The national_roaming_enabled of this WirelessV1RatePlan.
        :param sid: The sid of this WirelessV1RatePlan.
        :param unique_name: The unique_name of this WirelessV1RatePlan.
        :param url: The url of this WirelessV1RatePlan.
        :param voice_enabled: The voice_enabled of this WirelessV1RatePlan.
        """
        self.openapi_types = {
            'account_sid': str,
            'data_enabled': bool,
            'data_limit': int,
            'data_metering': str,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'international_roaming': List[str],
            'international_roaming_data_limit': int,
            'messaging_enabled': bool,
            'national_roaming_data_limit': int,
            'national_roaming_enabled': bool,
            'sid': str,
            'unique_name': str,
            'url': str,
            'voice_enabled': bool
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'data_enabled': 'data_enabled',
            'data_limit': 'data_limit',
            'data_metering': 'data_metering',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'international_roaming': 'international_roaming',
            'international_roaming_data_limit': 'international_roaming_data_limit',
            'messaging_enabled': 'messaging_enabled',
            'national_roaming_data_limit': 'national_roaming_data_limit',
            'national_roaming_enabled': 'national_roaming_enabled',
            'sid': 'sid',
            'unique_name': 'unique_name',
            'url': 'url',
            'voice_enabled': 'voice_enabled'
        }

        self._account_sid = account_sid
        self._data_enabled = data_enabled
        self._data_limit = data_limit
        self._data_metering = data_metering
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._international_roaming = international_roaming
        self._international_roaming_data_limit = international_roaming_data_limit
        self._messaging_enabled = messaging_enabled
        self._national_roaming_data_limit = national_roaming_data_limit
        self._national_roaming_enabled = national_roaming_enabled
        self._sid = sid
        self._unique_name = unique_name
        self._url = url
        self._voice_enabled = voice_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirelessV1RatePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The wireless.v1.rate_plan of this WirelessV1RatePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this WirelessV1RatePlan.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RatePlan resource.

        :return: The account_sid of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this WirelessV1RatePlan.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RatePlan resource.

        :param account_sid: The account_sid of this WirelessV1RatePlan.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def data_enabled(self):
        """Gets the data_enabled of this WirelessV1RatePlan.

        Whether SIMs can use GPRS/3G/4G/LTE data connectivity.

        :return: The data_enabled of this WirelessV1RatePlan.
        :rtype: bool
        """
        return self._data_enabled

    @data_enabled.setter
    def data_enabled(self, data_enabled):
        """Sets the data_enabled of this WirelessV1RatePlan.

        Whether SIMs can use GPRS/3G/4G/LTE data connectivity.

        :param data_enabled: The data_enabled of this WirelessV1RatePlan.
        :type data_enabled: bool
        """

        self._data_enabled = data_enabled

    @property
    def data_limit(self):
        """Gets the data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month on the home network (T-Mobile USA). The metering period begins the day of activation and ends on the same day in the following month. Can be up to 2TB.

        :return: The data_limit of this WirelessV1RatePlan.
        :rtype: int
        """
        return self._data_limit

    @data_limit.setter
    def data_limit(self, data_limit):
        """Sets the data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month on the home network (T-Mobile USA). The metering period begins the day of activation and ends on the same day in the following month. Can be up to 2TB.

        :param data_limit: The data_limit of this WirelessV1RatePlan.
        :type data_limit: int
        """

        self._data_limit = data_limit

    @property
    def data_metering(self):
        """Gets the data_metering of this WirelessV1RatePlan.

        The model used to meter data usage. Can be: `payg` and `quota-1`, `quota-10`, and `quota-50`. Learn more about the available [data metering models](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource#payg-vs-quota-data-plans).

        :return: The data_metering of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._data_metering

    @data_metering.setter
    def data_metering(self, data_metering):
        """Sets the data_metering of this WirelessV1RatePlan.

        The model used to meter data usage. Can be: `payg` and `quota-1`, `quota-10`, and `quota-50`. Learn more about the available [data metering models](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource#payg-vs-quota-data-plans).

        :param data_metering: The data_metering of this WirelessV1RatePlan.
        :type data_metering: str
        """

        self._data_metering = data_metering

    @property
    def date_created(self):
        """Gets the date_created of this WirelessV1RatePlan.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :return: The date_created of this WirelessV1RatePlan.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WirelessV1RatePlan.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :param date_created: The date_created of this WirelessV1RatePlan.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this WirelessV1RatePlan.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :return: The date_updated of this WirelessV1RatePlan.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this WirelessV1RatePlan.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.

        :param date_updated: The date_updated of this WirelessV1RatePlan.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this WirelessV1RatePlan.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this WirelessV1RatePlan.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this WirelessV1RatePlan.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def international_roaming(self):
        """Gets the international_roaming of this WirelessV1RatePlan.

        The list of services that SIMs capable of using GPRS/3G/4G/LTE data connectivity can use outside of the United States. Can contain: `data` and `messaging`.

        :return: The international_roaming of this WirelessV1RatePlan.
        :rtype: List[str]
        """
        return self._international_roaming

    @international_roaming.setter
    def international_roaming(self, international_roaming):
        """Sets the international_roaming of this WirelessV1RatePlan.

        The list of services that SIMs capable of using GPRS/3G/4G/LTE data connectivity can use outside of the United States. Can contain: `data` and `messaging`.

        :param international_roaming: The international_roaming of this WirelessV1RatePlan.
        :type international_roaming: List[str]
        """

        self._international_roaming = international_roaming

    @property
    def international_roaming_data_limit(self):
        """Gets the international_roaming_data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month when roaming outside the United States. Can be up to 2TB.

        :return: The international_roaming_data_limit of this WirelessV1RatePlan.
        :rtype: int
        """
        return self._international_roaming_data_limit

    @international_roaming_data_limit.setter
    def international_roaming_data_limit(self, international_roaming_data_limit):
        """Sets the international_roaming_data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month when roaming outside the United States. Can be up to 2TB.

        :param international_roaming_data_limit: The international_roaming_data_limit of this WirelessV1RatePlan.
        :type international_roaming_data_limit: int
        """

        self._international_roaming_data_limit = international_roaming_data_limit

    @property
    def messaging_enabled(self):
        """Gets the messaging_enabled of this WirelessV1RatePlan.

        Whether SIMs can make, send, and receive SMS using [Commands](https://www.twilio.com/docs/iot/wireless/api/command-resource).

        :return: The messaging_enabled of this WirelessV1RatePlan.
        :rtype: bool
        """
        return self._messaging_enabled

    @messaging_enabled.setter
    def messaging_enabled(self, messaging_enabled):
        """Sets the messaging_enabled of this WirelessV1RatePlan.

        Whether SIMs can make, send, and receive SMS using [Commands](https://www.twilio.com/docs/iot/wireless/api/command-resource).

        :param messaging_enabled: The messaging_enabled of this WirelessV1RatePlan.
        :type messaging_enabled: bool
        """

        self._messaging_enabled = messaging_enabled

    @property
    def national_roaming_data_limit(self):
        """Gets the national_roaming_data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month on non-home networks in the United States. The metering period begins the day of activation and ends on the same day in the following month. Can be up to 2TB.

        :return: The national_roaming_data_limit of this WirelessV1RatePlan.
        :rtype: int
        """
        return self._national_roaming_data_limit

    @national_roaming_data_limit.setter
    def national_roaming_data_limit(self, national_roaming_data_limit):
        """Sets the national_roaming_data_limit of this WirelessV1RatePlan.

        The total data usage (download and upload combined) in Megabytes that the Network allows during one month on non-home networks in the United States. The metering period begins the day of activation and ends on the same day in the following month. Can be up to 2TB.

        :param national_roaming_data_limit: The national_roaming_data_limit of this WirelessV1RatePlan.
        :type national_roaming_data_limit: int
        """

        self._national_roaming_data_limit = national_roaming_data_limit

    @property
    def national_roaming_enabled(self):
        """Gets the national_roaming_enabled of this WirelessV1RatePlan.

        Whether SIMs can roam on networks other than the home network (T-Mobile USA) in the United States. See [national roaming](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource#national-roaming).

        :return: The national_roaming_enabled of this WirelessV1RatePlan.
        :rtype: bool
        """
        return self._national_roaming_enabled

    @national_roaming_enabled.setter
    def national_roaming_enabled(self, national_roaming_enabled):
        """Sets the national_roaming_enabled of this WirelessV1RatePlan.

        Whether SIMs can roam on networks other than the home network (T-Mobile USA) in the United States. See [national roaming](https://www.twilio.com/docs/iot/wireless/api/rateplan-resource#national-roaming).

        :param national_roaming_enabled: The national_roaming_enabled of this WirelessV1RatePlan.
        :type national_roaming_enabled: bool
        """

        self._national_roaming_enabled = national_roaming_enabled

    @property
    def sid(self):
        """Gets the sid of this WirelessV1RatePlan.

        The unique string that we created to identify the RatePlan resource.

        :return: The sid of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this WirelessV1RatePlan.

        The unique string that we created to identify the RatePlan resource.

        :param sid: The sid of this WirelessV1RatePlan.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^WP[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^WP[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def unique_name(self):
        """Gets the unique_name of this WirelessV1RatePlan.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :return: The unique_name of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this WirelessV1RatePlan.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :param unique_name: The unique_name of this WirelessV1RatePlan.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this WirelessV1RatePlan.

        The absolute URL of the resource.

        :return: The url of this WirelessV1RatePlan.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WirelessV1RatePlan.

        The absolute URL of the resource.

        :param url: The url of this WirelessV1RatePlan.
        :type url: str
        """

        self._url = url

    @property
    def voice_enabled(self):
        """Gets the voice_enabled of this WirelessV1RatePlan.

        Deprecated. Whether SIMs can make and receive voice calls.

        :return: The voice_enabled of this WirelessV1RatePlan.
        :rtype: bool
        """
        return self._voice_enabled

    @voice_enabled.setter
    def voice_enabled(self, voice_enabled):
        """Sets the voice_enabled of this WirelessV1RatePlan.

        Deprecated. Whether SIMs can make and receive voice calls.

        :param voice_enabled: The voice_enabled of this WirelessV1RatePlan.
        :type voice_enabled: bool
        """

        self._voice_enabled = voice_enabled
