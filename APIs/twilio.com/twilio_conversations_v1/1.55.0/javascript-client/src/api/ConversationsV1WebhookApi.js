/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationWebhookEnumTarget from '../model/ConfigurationWebhookEnumTarget';
import ConversationScopedWebhookEnumMethod from '../model/ConversationScopedWebhookEnumMethod';
import ConversationScopedWebhookEnumTarget from '../model/ConversationScopedWebhookEnumTarget';
import ConversationsV1ConfigurationConfigurationWebhook from '../model/ConversationsV1ConfigurationConfigurationWebhook';
import ConversationsV1ConversationConversationScopedWebhook from '../model/ConversationsV1ConversationConversationScopedWebhook';
import ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration from '../model/ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration';
import ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook from '../model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook';
import ListConversationScopedWebhookResponse from '../model/ListConversationScopedWebhookResponse';
import ListServiceConversationScopedWebhookResponse from '../model/ListServiceConversationScopedWebhookResponse';
import ServiceConversationScopedWebhookEnumMethod from '../model/ServiceConversationScopedWebhookEnumMethod';
import ServiceConversationScopedWebhookEnumTarget from '../model/ServiceConversationScopedWebhookEnumTarget';

/**
* ConversationsV1Webhook service.
* @module api/ConversationsV1WebhookApi
* @version 1.55.0
*/
export default class ConversationsV1WebhookApi {

    /**
    * Constructs a new ConversationsV1WebhookApi. 
    * @alias module:api/ConversationsV1WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~createConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new webhook scoped to the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {module:model/ConversationScopedWebhookEnumTarget} target 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] The list of events, firing webhook event for this Conversation.
     * @param {String} [configurationFlowSid] The studio flow SID, where the webhook should be sent to.
     * @param {module:model/ConversationScopedWebhookEnumMethod} [configurationMethod] 
     * @param {Number} [configurationReplayAfter] The message index for which and it's successors the webhook will be replayed. Not set by default
     * @param {Array.<String>} [configurationTriggers] The list of keywords, firing webhook event for this Conversation.
     * @param {String} [configurationUrl] The absolute url the webhook request should be sent to.
     * @param {module:api/ConversationsV1WebhookApi~createConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationScopedWebhook}
     */
    createConversationScopedWebhook(conversationSid, target, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createConversationScopedWebhook");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling createConversationScopedWebhook");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.ReplayAfter': opts['configurationReplayAfter'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl'],
        'Target': target
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~createServiceConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new webhook scoped to the conversation in a specific service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {module:model/ServiceConversationScopedWebhookEnumTarget} target 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] The list of events, firing webhook event for this Conversation.
     * @param {String} [configurationFlowSid] The studio flow SID, where the webhook should be sent to.
     * @param {module:model/ServiceConversationScopedWebhookEnumMethod} [configurationMethod] 
     * @param {Number} [configurationReplayAfter] The message index for which and it's successors the webhook will be replayed. Not set by default
     * @param {Array.<String>} [configurationTriggers] The list of keywords, firing webhook event for this Conversation.
     * @param {String} [configurationUrl] The absolute url the webhook request should be sent to.
     * @param {module:api/ConversationsV1WebhookApi~createServiceConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook}
     */
    createServiceConversationScopedWebhook(chatServiceSid, conversationSid, target, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling createServiceConversationScopedWebhook");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createServiceConversationScopedWebhook");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling createServiceConversationScopedWebhook");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.ReplayAfter': opts['configurationReplayAfter'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl'],
        'Target': target
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~deleteConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing webhook scoped to the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1WebhookApi~deleteConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConversationScopedWebhook(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteConversationScopedWebhook");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~deleteServiceConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing webhook scoped to the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1WebhookApi~deleteServiceConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversationScopedWebhook");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteServiceConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteServiceConversationScopedWebhook");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConfigurationWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~fetchConfigurationWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConfigurationConfigurationWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ConversationsV1WebhookApi~fetchConfigurationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConfigurationConfigurationWebhook}
     */
    fetchConfigurationWebhook(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConfigurationConfigurationWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~fetchConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1WebhookApi~fetchConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationScopedWebhook}
     */
    fetchConversationScopedWebhook(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConversationScopedWebhook");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~fetchServiceConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1WebhookApi~fetchServiceConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook}
     */
    fetchServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationScopedWebhook");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchServiceConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceConversationScopedWebhook");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceWebhookConfiguration operation.
     * @callback module:api/ConversationsV1WebhookApi~fetchServiceWebhookConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific service webhook configuration.
     * @param {String} chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
     * @param {module:api/ConversationsV1WebhookApi~fetchServiceWebhookConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration}
     */
    fetchServiceWebhookConfiguration(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceWebhookConfiguration");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~listConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversationScopedWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1WebhookApi~listConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversationScopedWebhookResponse}
     */
    listConversationScopedWebhook(conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listConversationScopedWebhook");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversationScopedWebhookResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~listServiceConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceConversationScopedWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1WebhookApi~listServiceConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceConversationScopedWebhookResponse}
     */
    listServiceConversationScopedWebhook(chatServiceSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceConversationScopedWebhook");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listServiceConversationScopedWebhook");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceConversationScopedWebhookResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurationWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~updateConfigurationWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConfigurationConfigurationWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
     * @param {String} [method] The HTTP method to be used when sending a webhook request.
     * @param {String} [postWebhookUrl] The absolute url the post-event webhook request should be sent to.
     * @param {String} [preWebhookUrl] The absolute url the pre-event webhook request should be sent to.
     * @param {module:model/ConfigurationWebhookEnumTarget} [target] 
     * @param {module:api/ConversationsV1WebhookApi~updateConfigurationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConfigurationConfigurationWebhook}
     */
    updateConfigurationWebhook(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'Method': opts['method'],
        'PostWebhookUrl': opts['postWebhookUrl'],
        'PreWebhookUrl': opts['preWebhookUrl'],
        'Target': opts['target']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConfigurationConfigurationWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~updateConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing conversation-scoped webhook
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] The list of events, firing webhook event for this Conversation.
     * @param {String} [configurationFlowSid] The studio flow SID, where the webhook should be sent to.
     * @param {module:model/ConversationScopedWebhookEnumMethod} [configurationMethod] 
     * @param {Array.<String>} [configurationTriggers] The list of keywords, firing webhook event for this Conversation.
     * @param {String} [configurationUrl] The absolute url the webhook request should be sent to.
     * @param {module:api/ConversationsV1WebhookApi~updateConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationScopedWebhook}
     */
    updateConversationScopedWebhook(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConversationScopedWebhook");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Webhooks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceConversationScopedWebhook operation.
     * @callback module:api/ConversationsV1WebhookApi~updateServiceConversationScopedWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing conversation-scoped webhook
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] The list of events, firing webhook event for this Conversation.
     * @param {String} [configurationFlowSid] The studio flow SID, where the webhook should be sent to.
     * @param {module:model/ServiceConversationScopedWebhookEnumMethod} [configurationMethod] 
     * @param {Array.<String>} [configurationTriggers] The list of keywords, firing webhook event for this Conversation.
     * @param {String} [configurationUrl] The absolute url the webhook request should be sent to.
     * @param {module:api/ConversationsV1WebhookApi~updateServiceConversationScopedWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook}
     */
    updateServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceConversationScopedWebhook");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateServiceConversationScopedWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateServiceConversationScopedWebhook");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceWebhookConfiguration operation.
     * @callback module:api/ConversationsV1WebhookApi~updateServiceWebhookConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Webhook.
     * @param {String} chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are `onParticipantAdd`, `onParticipantAdded`, `onDeliveryUpdated`, `onConversationUpdated`, `onConversationRemove`, `onParticipantRemove`, `onConversationUpdate`, `onMessageAdd`, `onMessageRemoved`, `onParticipantUpdated`, `onConversationAdded`, `onMessageAdded`, `onConversationAdd`, `onConversationRemoved`, `onParticipantUpdate`, `onMessageRemove`, `onMessageUpdated`, `onParticipantRemoved`, `onMessageUpdate` or `onConversationStateUpdated`.
     * @param {String} [method] The HTTP method to be used when sending a webhook request. One of `GET` or `POST`.
     * @param {String} [postWebhookUrl] The absolute url the post-event webhook request should be sent to.
     * @param {String} [preWebhookUrl] The absolute url the pre-event webhook request should be sent to.
     * @param {module:api/ConversationsV1WebhookApi~updateServiceWebhookConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration}
     */
    updateServiceWebhookConfiguration(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceWebhookConfiguration");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'Method': opts['method'],
        'PostWebhookUrl': opts['postWebhookUrl'],
        'PreWebhookUrl': opts['preWebhookUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
