/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsV1ServiceServiceConfigurationServiceNotification from '../model/ConversationsV1ServiceServiceConfigurationServiceNotification';

/**
* ConversationsV1Notification service.
* @module api/ConversationsV1NotificationApi
* @version 1.55.0
*/
export default class ConversationsV1NotificationApi {

    /**
    * Constructs a new ConversationsV1NotificationApi. 
    * @alias module:api/ConversationsV1NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchServiceNotification operation.
     * @callback module:api/ConversationsV1NotificationApi~fetchServiceNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfigurationServiceNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch push notification service settings
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to.
     * @param {module:api/ConversationsV1NotificationApi~fetchServiceNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfigurationServiceNotification}
     */
    fetchServiceNotification(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceNotification");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfigurationServiceNotification;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration/Notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceNotification operation.
     * @callback module:api/ConversationsV1NotificationApi~updateServiceNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfigurationServiceNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update push notification service settings
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [addedToConversationEnabled] Whether to send a notification when a participant is added to a conversation. The default is `false`.
     * @param {String} [addedToConversationSound] The name of the sound to play when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
     * @param {String} [addedToConversationTemplate] The template to use to create the notification text displayed when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
     * @param {Boolean} [logEnabled] Weather the notification logging is enabled.
     * @param {Boolean} [newMessageBadgeCountEnabled] Whether the new message badge is enabled. The default is `false`.
     * @param {Boolean} [newMessageEnabled] Whether to send a notification when a new message is added to a conversation. The default is `false`.
     * @param {String} [newMessageSound] The name of the sound to play when a new message is added to a conversation and `new_message.enabled` is `true`.
     * @param {String} [newMessageTemplate] The template to use to create the notification text displayed when a new message is added to a conversation and `new_message.enabled` is `true`.
     * @param {Boolean} [newMessageWithMediaEnabled] Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is `false`.
     * @param {String} [newMessageWithMediaTemplate] The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and `new_message.attachments.enabled` is `true`.
     * @param {Boolean} [removedFromConversationEnabled] Whether to send a notification to a user when they are removed from a conversation. The default is `false`.
     * @param {String} [removedFromConversationSound] The name of the sound to play to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
     * @param {String} [removedFromConversationTemplate] The template to use to create the notification text displayed to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
     * @param {module:api/ConversationsV1NotificationApi~updateServiceNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfigurationServiceNotification}
     */
    updateServiceNotification(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceNotification");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AddedToConversation.Enabled': opts['addedToConversationEnabled'],
        'AddedToConversation.Sound': opts['addedToConversationSound'],
        'AddedToConversation.Template': opts['addedToConversationTemplate'],
        'LogEnabled': opts['logEnabled'],
        'NewMessage.BadgeCountEnabled': opts['newMessageBadgeCountEnabled'],
        'NewMessage.Enabled': opts['newMessageEnabled'],
        'NewMessage.Sound': opts['newMessageSound'],
        'NewMessage.Template': opts['newMessageTemplate'],
        'NewMessage.WithMedia.Enabled': opts['newMessageWithMediaEnabled'],
        'NewMessage.WithMedia.Template': opts['newMessageWithMediaTemplate'],
        'RemovedFromConversation.Enabled': opts['removedFromConversationEnabled'],
        'RemovedFromConversation.Sound': opts['removedFromConversationSound'],
        'RemovedFromConversation.Template': opts['removedFromConversationTemplate']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfigurationServiceNotification;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration/Notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
