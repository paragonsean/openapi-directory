/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsV1ConversationConversationMessageConversationMessageReceipt from '../model/ConversationsV1ConversationConversationMessageConversationMessageReceipt';
import ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt from '../model/ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt';
import ListConversationMessageReceiptResponse from '../model/ListConversationMessageReceiptResponse';
import ListServiceConversationMessageReceiptResponse from '../model/ListServiceConversationMessageReceiptResponse';

/**
* ConversationsV1DeliveryReceipt service.
* @module api/ConversationsV1DeliveryReceiptApi
* @version 1.55.0
*/
export default class ConversationsV1DeliveryReceiptApi {

    /**
    * Constructs a new ConversationsV1DeliveryReceiptApi. 
    * @alias module:api/ConversationsV1DeliveryReceiptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchConversationMessageReceipt operation.
     * @callback module:api/ConversationsV1DeliveryReceiptApi~fetchConversationMessageReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationMessageConversationMessageReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1DeliveryReceiptApi~fetchConversationMessageReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationMessageConversationMessageReceipt}
     */
    fetchConversationMessageReceipt(conversationSid, messageSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchConversationMessageReceipt");
      }
      // verify the required parameter 'messageSid' is set
      if (messageSid === undefined || messageSid === null) {
        throw new Error("Missing the required parameter 'messageSid' when calling fetchConversationMessageReceipt");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConversationMessageReceipt");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'MessageSid': messageSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationMessageConversationMessageReceipt;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConversationMessageReceipt operation.
     * @callback module:api/ConversationsV1DeliveryReceiptApi~fetchServiceConversationMessageReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Message resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1DeliveryReceiptApi~fetchServiceConversationMessageReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt}
     */
    fetchServiceConversationMessageReceipt(chatServiceSid, conversationSid, messageSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationMessageReceipt");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchServiceConversationMessageReceipt");
      }
      // verify the required parameter 'messageSid' is set
      if (messageSid === undefined || messageSid === null) {
        throw new Error("Missing the required parameter 'messageSid' when calling fetchServiceConversationMessageReceipt");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceConversationMessageReceipt");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'MessageSid': messageSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversationMessageReceipt operation.
     * @callback module:api/ConversationsV1DeliveryReceiptApi~listConversationMessageReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversationMessageReceiptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1DeliveryReceiptApi~listConversationMessageReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversationMessageReceiptResponse}
     */
    listConversationMessageReceipt(conversationSid, messageSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listConversationMessageReceipt");
      }
      // verify the required parameter 'messageSid' is set
      if (messageSid === undefined || messageSid === null) {
        throw new Error("Missing the required parameter 'messageSid' when calling listConversationMessageReceipt");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'MessageSid': messageSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversationMessageReceiptResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceConversationMessageReceipt operation.
     * @callback module:api/ConversationsV1DeliveryReceiptApi~listServiceConversationMessageReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceConversationMessageReceiptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Message resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} messageSid The SID of the message within a [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) the delivery receipt belongs to.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1DeliveryReceiptApi~listServiceConversationMessageReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceConversationMessageReceiptResponse}
     */
    listServiceConversationMessageReceipt(chatServiceSid, conversationSid, messageSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceConversationMessageReceipt");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listServiceConversationMessageReceipt");
      }
      // verify the required parameter 'messageSid' is set
      if (messageSid === undefined || messageSid === null) {
        throw new Error("Missing the required parameter 'messageSid' when calling listServiceConversationMessageReceipt");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'MessageSid': messageSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceConversationMessageReceiptResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
