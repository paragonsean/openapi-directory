/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationMessageEnumOrderType from '../model/ConversationMessageEnumOrderType';
import ConversationMessageEnumWebhookEnabledType from '../model/ConversationMessageEnumWebhookEnabledType';
import ConversationsV1ConversationConversationMessage from '../model/ConversationsV1ConversationConversationMessage';
import ConversationsV1ServiceServiceConversationServiceConversationMessage from '../model/ConversationsV1ServiceServiceConversationServiceConversationMessage';
import ListConversationMessageResponse from '../model/ListConversationMessageResponse';
import ListServiceConversationMessageResponse from '../model/ListServiceConversationMessageResponse';
import ServiceConversationMessageEnumOrderType from '../model/ServiceConversationMessageEnumOrderType';
import ServiceConversationMessageEnumWebhookEnabledType from '../model/ServiceConversationMessageEnumWebhookEnabledType';

/**
* ConversationsV1Message service.
* @module api/ConversationsV1MessageApi
* @version 1.55.0
*/
export default class ConversationsV1MessageApi {

    /**
    * Constructs a new ConversationsV1MessageApi. 
    * @alias module:api/ConversationsV1MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~createConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new message to the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [author] The channel specific identifier of the message's author. Defaults to `system`.
     * @param {String} [body] The content of the message, can be up to 1,600 characters long.
     * @param {String} [contentSid] The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, `Body` and `MediaSid` parameters are ignored.
     * @param {String} [contentVariables] A structurally valid JSON string that contains values to resolve Rich Content template variables.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated. `null` if the message has not been edited.
     * @param {String} [mediaSid] The Media SID to be attached to the new Message.
     * @param {String} [subject] The subject of the message, can be up to 256 characters long.
     * @param {module:api/ConversationsV1MessageApi~createConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationMessage}
     */
    createConversationMessage(conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createConversationMessage");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Author': opts['author'],
        'Body': opts['body'],
        'ContentSid': opts['contentSid'],
        'ContentVariables': opts['contentVariables'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'MediaSid': opts['mediaSid'],
        'Subject': opts['subject']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~createServiceConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new message to the conversation in a specific service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [author] The channel specific identifier of the message's author. Defaults to `system`.
     * @param {String} [body] The content of the message, can be up to 1,600 characters long.
     * @param {String} [contentSid] The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, `Body` and `MediaSid` parameters are ignored.
     * @param {String} [contentVariables] A structurally valid JSON string that contains values to resolve Rich Content template variables.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated. `null` if the message has not been edited.
     * @param {String} [mediaSid] The Media SID to be attached to the new Message.
     * @param {String} [subject] The subject of the message, can be up to 256 characters long.
     * @param {module:api/ConversationsV1MessageApi~createServiceConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage}
     */
    createServiceConversationMessage(chatServiceSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling createServiceConversationMessage");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createServiceConversationMessage");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Author': opts['author'],
        'Body': opts['body'],
        'ContentSid': opts['contentSid'],
        'ContentVariables': opts['contentVariables'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'MediaSid': opts['mediaSid'],
        'Subject': opts['subject']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~deleteConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a message from the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1MessageApi~deleteConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConversationMessage(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteConversationMessage");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~deleteServiceConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a message from the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1MessageApi~deleteServiceConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceConversationMessage(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversationMessage");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteServiceConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteServiceConversationMessage");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~fetchConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a message from the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1MessageApi~fetchConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationMessage}
     */
    fetchConversationMessage(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConversationMessage");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~fetchServiceConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a message from the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1MessageApi~fetchServiceConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage}
     */
    fetchServiceConversationMessage(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationMessage");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchServiceConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceConversationMessage");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~listConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversationMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all messages in the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationMessageEnumOrderType} [order] The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending), with `asc` as the default.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1MessageApi~listConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversationMessageResponse}
     */
    listConversationMessage(conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listConversationMessage");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'Order': opts['order'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversationMessageResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~listServiceConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceConversationMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all messages in the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationMessageEnumOrderType} [order] The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending), with `asc` as the default.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1MessageApi~listServiceConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceConversationMessageResponse}
     */
    listServiceConversationMessage(chatServiceSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceConversationMessage");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listServiceConversationMessage");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'Order': opts['order'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceConversationMessageResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~updateConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing message in the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [author] The channel specific identifier of the message's author. Defaults to `system`.
     * @param {String} [body] The content of the message, can be up to 1,600 characters long.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated. `null` if the message has not been edited.
     * @param {String} [subject] The subject of the message, can be up to 256 characters long.
     * @param {module:api/ConversationsV1MessageApi~updateConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationMessage}
     */
    updateConversationMessage(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConversationMessage");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Author': opts['author'],
        'Body': opts['body'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Subject': opts['subject']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Messages/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceConversationMessage operation.
     * @callback module:api/ConversationsV1MessageApi~updateServiceConversationMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing message in the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationMessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [author] The channel specific identifier of the message's author. Defaults to `system`.
     * @param {String} [body] The content of the message, can be up to 1,600 characters long.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated. `null` if the message has not been edited.
     * @param {String} [subject] The subject of the message, can be up to 256 characters long.
     * @param {module:api/ConversationsV1MessageApi~updateServiceConversationMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationMessage}
     */
    updateServiceConversationMessage(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceConversationMessage");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateServiceConversationMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateServiceConversationMessage");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Author': opts['author'],
        'Body': opts['body'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Subject': opts['subject']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationMessage;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
