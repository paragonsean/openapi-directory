/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationAddressEnumAutoCreationType from '../model/ConfigurationAddressEnumAutoCreationType';
import ConfigurationAddressEnumMethod from '../model/ConfigurationAddressEnumMethod';
import ConfigurationAddressEnumType from '../model/ConfigurationAddressEnumType';
import ConversationsV1ConfigurationAddress from '../model/ConversationsV1ConfigurationAddress';
import ListConfigurationAddressResponse from '../model/ListConfigurationAddressResponse';

/**
* ConversationsV1AddressConfiguration service.
* @module api/ConversationsV1AddressConfigurationApi
* @version 1.55.0
*/
export default class ConversationsV1AddressConfigurationApi {

    /**
    * Constructs a new ConversationsV1AddressConfigurationApi. 
    * @alias module:api/ConversationsV1AddressConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConfigurationAddress operation.
     * @callback module:api/ConversationsV1AddressConfigurationApi~createConfigurationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConfigurationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new address configuration
     * @param {String} address The unique address to be configured. The address can be a whatsapp address or phone number
     * @param {module:model/ConfigurationAddressEnumType} type 
     * @param {Object} opts Optional parameters
     * @param {String} [addressCountry] An ISO 3166-1 alpha-2n country code which the address belongs to. This is currently only applicable to short code addresses.
     * @param {String} [autoCreationConversationServiceSid] Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service.
     * @param {Boolean} [autoCreationEnabled] Enable/Disable auto-creating conversations for messages to this address
     * @param {String} [autoCreationStudioFlowSid] For type `studio`, the studio flow SID where the webhook should be sent to.
     * @param {Number} [autoCreationStudioRetryCount] For type `studio`, number of times to retry the webhook request
     * @param {module:model/ConfigurationAddressEnumAutoCreationType} [autoCreationType] 
     * @param {Array.<String>} [autoCreationWebhookFilters] The list of events, firing webhook event for this Conversation. Values can be any of the following: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationStateUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`, `onDeliveryUpdated`
     * @param {module:model/ConfigurationAddressEnumMethod} [autoCreationWebhookMethod] 
     * @param {String} [autoCreationWebhookUrl] For type `webhook`, the url for the webhook request.
     * @param {String} [friendlyName] The human-readable name of this configuration, limited to 256 characters. Optional.
     * @param {module:api/ConversationsV1AddressConfigurationApi~createConfigurationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConfigurationAddress}
     */
    createConfigurationAddress(address, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createConfigurationAddress");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createConfigurationAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Address': address,
        'AddressCountry': opts['addressCountry'],
        'AutoCreation.ConversationServiceSid': opts['autoCreationConversationServiceSid'],
        'AutoCreation.Enabled': opts['autoCreationEnabled'],
        'AutoCreation.StudioFlowSid': opts['autoCreationStudioFlowSid'],
        'AutoCreation.StudioRetryCount': opts['autoCreationStudioRetryCount'],
        'AutoCreation.Type': opts['autoCreationType'],
        'AutoCreation.WebhookFilters': this.apiClient.buildCollectionParam(opts['autoCreationWebhookFilters'], 'csv'),
        'AutoCreation.WebhookMethod': opts['autoCreationWebhookMethod'],
        'AutoCreation.WebhookUrl': opts['autoCreationWebhookUrl'],
        'FriendlyName': opts['friendlyName'],
        'Type': type
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConfigurationAddress;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationAddress operation.
     * @callback module:api/ConversationsV1AddressConfigurationApi~deleteConfigurationAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing address configuration
     * @param {String} sid The SID of the Address Configuration resource. This value can be either the `sid` or the `address` of the configuration
     * @param {module:api/ConversationsV1AddressConfigurationApi~deleteConfigurationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConfigurationAddress(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteConfigurationAddress");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Addresses/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConfigurationAddress operation.
     * @callback module:api/ConversationsV1AddressConfigurationApi~fetchConfigurationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConfigurationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an address configuration 
     * @param {String} sid The SID of the Address Configuration resource. This value can be either the `sid` or the `address` of the configuration
     * @param {module:api/ConversationsV1AddressConfigurationApi~fetchConfigurationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConfigurationAddress}
     */
    fetchConfigurationAddress(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConfigurationAddress");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConfigurationAddress;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Addresses/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationAddress operation.
     * @callback module:api/ConversationsV1AddressConfigurationApi~listConfigurationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of address configurations for an account
     * @param {Object} opts Optional parameters
     * @param {String} [type] Filter the address configurations by its type. This value can be one of: `whatsapp`, `sms`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1AddressConfigurationApi~listConfigurationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationAddressResponse}
     */
    listConfigurationAddress(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Type': opts['type'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationAddressResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurationAddress operation.
     * @callback module:api/ConversationsV1AddressConfigurationApi~updateConfigurationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConfigurationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing address configuration
     * @param {String} sid The SID of the Address Configuration resource. This value can be either the `sid` or the `address` of the configuration
     * @param {Object} opts Optional parameters
     * @param {String} [autoCreationConversationServiceSid] Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service.
     * @param {Boolean} [autoCreationEnabled] Enable/Disable auto-creating conversations for messages to this address
     * @param {String} [autoCreationStudioFlowSid] For type `studio`, the studio flow SID where the webhook should be sent to.
     * @param {Number} [autoCreationStudioRetryCount] For type `studio`, number of times to retry the webhook request
     * @param {module:model/ConfigurationAddressEnumAutoCreationType} [autoCreationType] 
     * @param {Array.<String>} [autoCreationWebhookFilters] The list of events, firing webhook event for this Conversation. Values can be any of the following: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationStateUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`, `onDeliveryUpdated`
     * @param {module:model/ConfigurationAddressEnumMethod} [autoCreationWebhookMethod] 
     * @param {String} [autoCreationWebhookUrl] For type `webhook`, the url for the webhook request.
     * @param {String} [friendlyName] The human-readable name of this configuration, limited to 256 characters. Optional.
     * @param {module:api/ConversationsV1AddressConfigurationApi~updateConfigurationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConfigurationAddress}
     */
    updateConfigurationAddress(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConfigurationAddress");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AutoCreation.ConversationServiceSid': opts['autoCreationConversationServiceSid'],
        'AutoCreation.Enabled': opts['autoCreationEnabled'],
        'AutoCreation.StudioFlowSid': opts['autoCreationStudioFlowSid'],
        'AutoCreation.StudioRetryCount': opts['autoCreationStudioRetryCount'],
        'AutoCreation.Type': opts['autoCreationType'],
        'AutoCreation.WebhookFilters': this.apiClient.buildCollectionParam(opts['autoCreationWebhookFilters'], 'csv'),
        'AutoCreation.WebhookMethod': opts['autoCreationWebhookMethod'],
        'AutoCreation.WebhookUrl': opts['autoCreationWebhookUrl'],
        'FriendlyName': opts['friendlyName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConfigurationAddress;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration/Addresses/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
