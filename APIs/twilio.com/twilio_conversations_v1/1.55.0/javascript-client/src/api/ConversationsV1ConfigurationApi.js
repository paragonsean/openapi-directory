/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsV1Configuration from '../model/ConversationsV1Configuration';
import ConversationsV1ServiceServiceConfiguration from '../model/ConversationsV1ServiceServiceConfiguration';

/**
* ConversationsV1Configuration service.
* @module api/ConversationsV1ConfigurationApi
* @version 1.55.0
*/
export default class ConversationsV1ConfigurationApi {

    /**
    * Constructs a new ConversationsV1ConfigurationApi. 
    * @alias module:api/ConversationsV1ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchConfiguration operation.
     * @callback module:api/ConversationsV1ConfigurationApi~fetchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the global configuration of conversations on your account
     * @param {module:api/ConversationsV1ConfigurationApi~fetchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1Configuration}
     */
    fetchConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1Configuration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConfiguration operation.
     * @callback module:api/ConversationsV1ConfigurationApi~fetchServiceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the configuration of a conversation service
     * @param {String} chatServiceSid The SID of the Service configuration resource to fetch.
     * @param {module:api/ConversationsV1ConfigurationApi~fetchServiceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfiguration}
     */
    fetchServiceConfiguration(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConfiguration");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfiguration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:api/ConversationsV1ConfigurationApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the global configuration of conversations on your account
     * @param {Object} opts Optional parameters
     * @param {String} [defaultChatServiceSid] The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
     * @param {String} [defaultClosedTimer] Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
     * @param {String} [defaultInactiveTimer] Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
     * @param {String} [defaultMessagingServiceSid] The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to use when creating a conversation.
     * @param {module:api/ConversationsV1ConfigurationApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1Configuration}
     */
    updateConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'DefaultChatServiceSid': opts['defaultChatServiceSid'],
        'DefaultClosedTimer': opts['defaultClosedTimer'],
        'DefaultInactiveTimer': opts['defaultInactiveTimer'],
        'DefaultMessagingServiceSid': opts['defaultMessagingServiceSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1Configuration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceConfiguration operation.
     * @callback module:api/ConversationsV1ConfigurationApi~updateServiceConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration settings of a conversation service
     * @param {String} chatServiceSid The SID of the Service configuration resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [defaultChatServiceRoleSid] The service-level role assigned to users when they are added to the service. See [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
     * @param {String} [defaultConversationCreatorRoleSid] The conversation-level role assigned to a conversation creator when they join a new conversation. See [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
     * @param {String} [defaultConversationRoleSid] The conversation-level role assigned to users when they are added to a conversation. See [Conversation Role](https://www.twilio.com/docs/conversations/api/role-resource) for more info about roles.
     * @param {Boolean} [reachabilityEnabled] Whether the [Reachability Indicator](https://www.twilio.com/docs/conversations/reachability) is enabled for this Conversations Service. The default is `false`.
     * @param {module:api/ConversationsV1ConfigurationApi~updateServiceConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConfiguration}
     */
    updateServiceConfiguration(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceConfiguration");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'DefaultChatServiceRoleSid': opts['defaultChatServiceRoleSid'],
        'DefaultConversationCreatorRoleSid': opts['defaultConversationCreatorRoleSid'],
        'DefaultConversationRoleSid': opts['defaultConversationRoleSid'],
        'ReachabilityEnabled': opts['reachabilityEnabled']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConfiguration;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
