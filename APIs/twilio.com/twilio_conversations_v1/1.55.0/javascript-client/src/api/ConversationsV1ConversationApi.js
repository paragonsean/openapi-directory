/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationEnumState from '../model/ConversationEnumState';
import ConversationEnumWebhookEnabledType from '../model/ConversationEnumWebhookEnabledType';
import ConversationsV1Conversation from '../model/ConversationsV1Conversation';
import ConversationsV1ServiceServiceConversation from '../model/ConversationsV1ServiceServiceConversation';
import ListConversationResponse from '../model/ListConversationResponse';
import ListServiceConversationResponse from '../model/ListServiceConversationResponse';
import ServiceConversationEnumState from '../model/ServiceConversationEnumState';
import ServiceConversationEnumWebhookEnabledType from '../model/ServiceConversationEnumWebhookEnabledType';

/**
* ConversationsV1Conversation service.
* @module api/ConversationsV1ConversationApi
* @version 1.55.0
*/
export default class ConversationsV1ConversationApi {

    /**
    * Constructs a new ConversationsV1ConversationApi. 
    * @alias module:api/ConversationsV1ConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~createConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new conversation in your account's default service
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [bindingsEmailAddress] The default email address that will be used when sending outbound emails in this conversation.
     * @param {String} [bindingsEmailName] The default name that will be used when sending outbound emails in this conversation.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [friendlyName] The human-readable name of this conversation, limited to 256 characters. Optional.
     * @param {String} [messagingServiceSid] The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.
     * @param {module:model/ConversationEnumState} [state] 
     * @param {String} [timersClosed] ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
     * @param {String} [timersInactive] ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
     * @param {module:api/ConversationsV1ConversationApi~createConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1Conversation}
     */
    createConversation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Bindings.Email.Address': opts['bindingsEmailAddress'],
        'Bindings.Email.Name': opts['bindingsEmailName'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'MessagingServiceSid': opts['messagingServiceSid'],
        'State': opts['state'],
        'Timers.Closed': opts['timersClosed'],
        'Timers.Inactive': opts['timersInactive'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1Conversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~createServiceConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new conversation in your service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [bindingsEmailAddress] The default email address that will be used when sending outbound emails in this conversation.
     * @param {String} [bindingsEmailName] The default name that will be used when sending outbound emails in this conversation.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [friendlyName] The human-readable name of this conversation, limited to 256 characters. Optional.
     * @param {String} [messagingServiceSid] The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.
     * @param {module:model/ServiceConversationEnumState} [state] 
     * @param {String} [timersClosed] ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
     * @param {String} [timersInactive] ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
     * @param {module:api/ConversationsV1ConversationApi~createServiceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversation}
     */
    createServiceConversation(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling createServiceConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Bindings.Email.Address': opts['bindingsEmailAddress'],
        'Bindings.Email.Name': opts['bindingsEmailName'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'MessagingServiceSid': opts['messagingServiceSid'],
        'State': opts['state'],
        'Timers.Closed': opts['timersClosed'],
        'Timers.Inactive': opts['timersInactive'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~deleteConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a conversation from your account's default service
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1ConversationApi~deleteConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConversation(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteConversation");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~deleteServiceConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a conversation from your service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1ConversationApi~deleteServiceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceConversation(chatServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteServiceConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~fetchConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a conversation from your account's default service
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {module:api/ConversationsV1ConversationApi~fetchConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1Conversation}
     */
    fetchConversation(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConversation");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1Conversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~fetchServiceConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a conversation from your service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {module:api/ConversationsV1ConversationApi~fetchServiceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversation}
     */
    fetchServiceConversation(chatServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~listConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conversations in your account's default service
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters.
     * @param {String} [endDate] End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters.
     * @param {module:model/ConversationEnumState} [state] State for sorting and filtering list of Conversations. Can be `active`, `inactive` or `closed`
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1ConversationApi~listConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversationResponse}
     */
    listConversation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'State': opts['state'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversationResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~listServiceConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conversations in your service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters.
     * @param {String} [endDate] End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters.
     * @param {module:model/ServiceConversationEnumState} [state] State for sorting and filtering list of Conversations. Can be `active`, `inactive` or `closed`
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1ConversationApi~listServiceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceConversationResponse}
     */
    listServiceConversation(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'State': opts['state'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceConversationResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~updateConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing conversation in your account's default service
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [bindingsEmailAddress] The default email address that will be used when sending outbound emails in this conversation.
     * @param {String} [bindingsEmailName] The default name that will be used when sending outbound emails in this conversation.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [friendlyName] The human-readable name of this conversation, limited to 256 characters. Optional.
     * @param {String} [messagingServiceSid] The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.
     * @param {module:model/ConversationEnumState} [state] 
     * @param {String} [timersClosed] ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
     * @param {String} [timersInactive] ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
     * @param {module:api/ConversationsV1ConversationApi~updateConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1Conversation}
     */
    updateConversation(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConversation");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Bindings.Email.Address': opts['bindingsEmailAddress'],
        'Bindings.Email.Name': opts['bindingsEmailName'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'MessagingServiceSid': opts['messagingServiceSid'],
        'State': opts['state'],
        'Timers.Closed': opts['timersClosed'],
        'Timers.Inactive': opts['timersInactive'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1Conversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceConversation operation.
     * @callback module:api/ConversationsV1ConversationApi~updateServiceConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing conversation in your service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} sid A 34 character string that uniquely identifies this resource. Can also be the `unique_name` of the Conversation.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {String} [bindingsEmailAddress] The default email address that will be used when sending outbound emails in this conversation.
     * @param {String} [bindingsEmailName] The default name that will be used when sending outbound emails in this conversation.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [friendlyName] The human-readable name of this conversation, limited to 256 characters. Optional.
     * @param {String} [messagingServiceSid] The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.
     * @param {module:model/ServiceConversationEnumState} [state] 
     * @param {String} [timersClosed] ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
     * @param {String} [timersInactive] ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
     * @param {module:api/ConversationsV1ConversationApi~updateServiceConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversation}
     */
    updateServiceConversation(chatServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceConversation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateServiceConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Bindings.Email.Address': opts['bindingsEmailAddress'],
        'Bindings.Email.Name': opts['bindingsEmailName'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'MessagingServiceSid': opts['messagingServiceSid'],
        'State': opts['state'],
        'Timers.Closed': opts['timersClosed'],
        'Timers.Inactive': opts['timersInactive'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
