/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsV1ServiceServiceBinding from '../model/ConversationsV1ServiceServiceBinding';
import ListServiceBindingResponse from '../model/ListServiceBindingResponse';
import ServiceBindingEnumBindingType from '../model/ServiceBindingEnumBindingType';

/**
* ConversationsV1Binding service.
* @module api/ConversationsV1BindingApi
* @version 1.55.0
*/
export default class ConversationsV1BindingApi {

    /**
    * Constructs a new ConversationsV1BindingApi. 
    * @alias module:api/ConversationsV1BindingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteServiceBinding operation.
     * @callback module:api/ConversationsV1BindingApi~deleteServiceBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a push notification binding from the conversation service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to delete the Binding resource from.
     * @param {String} sid The SID of the Binding resource to delete.
     * @param {module:api/ConversationsV1BindingApi~deleteServiceBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceBinding(chatServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceBinding");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteServiceBinding");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Bindings/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceBinding operation.
     * @callback module:api/ConversationsV1BindingApi~fetchServiceBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a push notification binding from the conversation service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Binding resource is associated with.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {module:api/ConversationsV1BindingApi~fetchServiceBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceBinding}
     */
    fetchServiceBinding(chatServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceBinding");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceBinding");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceBinding;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Bindings/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceBinding operation.
     * @callback module:api/ConversationsV1BindingApi~listServiceBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceBindingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all push notification bindings in the conversation service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Binding resource is associated with.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ServiceBindingEnumBindingType>} [bindingType] The push technology used by the Binding resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push notification configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
     * @param {Array.<String>} [identity] The identity of a [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource) this binding belongs to. See [access tokens](https://www.twilio.com/docs/conversations/create-tokens) for more details.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1BindingApi~listServiceBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceBindingResponse}
     */
    listServiceBinding(chatServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceBinding");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid
      };
      let queryParams = {
        'BindingType': this.apiClient.buildCollectionParam(opts['bindingType'], 'multi'),
        'Identity': this.apiClient.buildCollectionParam(opts['identity'], 'multi'),
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceBindingResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Bindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
