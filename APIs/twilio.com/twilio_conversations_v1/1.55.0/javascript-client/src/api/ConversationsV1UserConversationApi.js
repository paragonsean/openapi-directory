/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsV1ServiceServiceUserServiceUserConversation from '../model/ConversationsV1ServiceServiceUserServiceUserConversation';
import ConversationsV1UserUserConversation from '../model/ConversationsV1UserUserConversation';
import ListServiceUserConversationResponse from '../model/ListServiceUserConversationResponse';
import ListUserConversationResponse from '../model/ListUserConversationResponse';
import ServiceUserConversationEnumNotificationLevel from '../model/ServiceUserConversationEnumNotificationLevel';
import UserConversationEnumNotificationLevel from '../model/UserConversationEnumNotificationLevel';

/**
* ConversationsV1UserConversation service.
* @module api/ConversationsV1UserConversationApi
* @version 1.55.0
*/
export default class ConversationsV1UserConversationApi {

    /**
    * Constructs a new ConversationsV1UserConversationApi. 
    * @alias module:api/ConversationsV1UserConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteServiceUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~deleteServiceUserConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific User Conversation.
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {module:api/ConversationsV1UserConversationApi~deleteServiceUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceUserConversation(chatServiceSid, userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceUserConversation");
      }
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling deleteServiceUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteServiceUserConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~deleteUserConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific User Conversation.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {module:api/ConversationsV1UserConversationApi~deleteUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserConversation(userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling deleteUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteUserConversation");
      }

      let pathParams = {
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Users/{UserSid}/Conversations/{ConversationSid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~fetchServiceUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceUserServiceUserConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific User Conversation.
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {module:api/ConversationsV1UserConversationApi~fetchServiceUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceUserServiceUserConversation}
     */
    fetchServiceUserConversation(chatServiceSid, userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceUserConversation");
      }
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling fetchServiceUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchServiceUserConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceUserServiceUserConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~fetchUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1UserUserConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific User Conversation.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {module:api/ConversationsV1UserConversationApi~fetchUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1UserUserConversation}
     */
    fetchUserConversation(userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling fetchUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchUserConversation");
      }

      let pathParams = {
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1UserUserConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Users/{UserSid}/Conversations/{ConversationSid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~listServiceUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceUserConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1UserConversationApi~listServiceUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceUserConversationResponse}
     */
    listServiceUserConversation(chatServiceSid, userSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceUserConversation");
      }
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling listServiceUserConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'UserSid': userSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceUserConversationResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~listUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1UserConversationApi~listUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserConversationResponse}
     */
    listUserConversation(userSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling listUserConversation");
      }

      let pathParams = {
        'UserSid': userSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUserConversationResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Users/{UserSid}/Conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~updateServiceUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceUserServiceUserConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific User Conversation.
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {Object} opts Optional parameters
     * @param {Number} [lastReadMessageIndex] The index of the last Message in the Conversation that the Participant has read.
     * @param {Date} [lastReadTimestamp] The date of the last message read in conversation by the user, given in ISO 8601 format.
     * @param {module:model/ServiceUserConversationEnumNotificationLevel} [notificationLevel] 
     * @param {module:api/ConversationsV1UserConversationApi~updateServiceUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceUserServiceUserConversation}
     */
    updateServiceUserConversation(chatServiceSid, userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceUserConversation");
      }
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling updateServiceUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateServiceUserConversation");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'LastReadMessageIndex': opts['lastReadMessageIndex'],
        'LastReadTimestamp': opts['lastReadTimestamp'],
        'NotificationLevel': opts['notificationLevel']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceUserServiceUserConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserConversation operation.
     * @callback module:api/ConversationsV1UserConversationApi~updateUserConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1UserUserConversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific User Conversation.
     * @param {String} userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the `sid` or the `identity` of the User resource.
     * @param {String} conversationSid The unique SID identifier of the Conversation. This value can be either the `sid` or the `unique_name` of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource).
     * @param {Object} opts Optional parameters
     * @param {Number} [lastReadMessageIndex] The index of the last Message in the Conversation that the Participant has read.
     * @param {Date} [lastReadTimestamp] The date of the last message read in conversation by the user, given in ISO 8601 format.
     * @param {module:model/UserConversationEnumNotificationLevel} [notificationLevel] 
     * @param {module:api/ConversationsV1UserConversationApi~updateUserConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1UserUserConversation}
     */
    updateUserConversation(userSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userSid' is set
      if (userSid === undefined || userSid === null) {
        throw new Error("Missing the required parameter 'userSid' when calling updateUserConversation");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateUserConversation");
      }

      let pathParams = {
        'UserSid': userSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'LastReadMessageIndex': opts['lastReadMessageIndex'],
        'LastReadTimestamp': opts['lastReadTimestamp'],
        'NotificationLevel': opts['notificationLevel']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1UserUserConversation;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Users/{UserSid}/Conversations/{ConversationSid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
