/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationParticipantEnumWebhookEnabledType from '../model/ConversationParticipantEnumWebhookEnabledType';
import ConversationsV1ConversationConversationParticipant from '../model/ConversationsV1ConversationConversationParticipant';
import ConversationsV1ServiceServiceConversationServiceConversationParticipant from '../model/ConversationsV1ServiceServiceConversationServiceConversationParticipant';
import ListConversationParticipantResponse from '../model/ListConversationParticipantResponse';
import ListServiceConversationParticipantResponse from '../model/ListServiceConversationParticipantResponse';
import ServiceConversationParticipantEnumWebhookEnabledType from '../model/ServiceConversationParticipantEnumWebhookEnabledType';

/**
* ConversationsV1Participant service.
* @module api/ConversationsV1ParticipantApi
* @version 1.55.0
*/
export default class ConversationsV1ParticipantApi {

    /**
    * Constructs a new ConversationsV1ParticipantApi. 
    * @alias module:api/ConversationsV1ParticipantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~createConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new participant to the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [identity] A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
     * @param {String} [messagingBindingAddress] The address of the participant's device, e.g. a phone or WhatsApp number. Together with the Proxy address, this determines a participant uniquely. This field (with proxy_address) is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
     * @param {String} [messagingBindingProjectedAddress] The address of the Twilio phone number that is used in Group MMS. Communication mask for the Conversation participant with Identity.
     * @param {String} [messagingBindingProxyAddress] The address of the Twilio phone number (or WhatsApp number) that the participant is in contact with. This field, together with participant address, is only null when the participant is interacting from an SDK endpoint (see the 'identity' field).
     * @param {String} [roleSid] The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
     * @param {module:api/ConversationsV1ParticipantApi~createConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationParticipant}
     */
    createConversationParticipant(conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createConversationParticipant");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Identity': opts['identity'],
        'MessagingBinding.Address': opts['messagingBindingAddress'],
        'MessagingBinding.ProjectedAddress': opts['messagingBindingProjectedAddress'],
        'MessagingBinding.ProxyAddress': opts['messagingBindingProxyAddress'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~createServiceConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new participant to the conversation in a specific service
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set `{}` will be returned.
     * @param {Date} [dateCreated] The date on which this resource was created.
     * @param {Date} [dateUpdated] The date on which this resource was last updated.
     * @param {String} [identity] A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the [Conversation SDK](https://www.twilio.com/docs/conversations/sdk-overview) to communicate. Limited to 256 characters.
     * @param {String} [messagingBindingAddress] The address of the participant's device, e.g. a phone or WhatsApp number. Together with the Proxy address, this determines a participant uniquely. This field (with `proxy_address`) is only null when the participant is interacting from an SDK endpoint (see the `identity` field).
     * @param {String} [messagingBindingProjectedAddress] The address of the Twilio phone number that is used in Group MMS.
     * @param {String} [messagingBindingProxyAddress] The address of the Twilio phone number (or WhatsApp number) that the participant is in contact with. This field, together with participant address, is only null when the participant is interacting from an SDK endpoint (see the `identity` field).
     * @param {String} [roleSid] The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
     * @param {module:api/ConversationsV1ParticipantApi~createServiceConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant}
     */
    createServiceConversationParticipant(chatServiceSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling createServiceConversationParticipant");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling createServiceConversationParticipant");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Identity': opts['identity'],
        'MessagingBinding.Address': opts['messagingBindingAddress'],
        'MessagingBinding.ProjectedAddress': opts['messagingBindingProjectedAddress'],
        'MessagingBinding.ProxyAddress': opts['messagingBindingProxyAddress'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~deleteConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a participant from the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1ParticipantApi~deleteConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConversationParticipant(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteConversationParticipant");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Participants/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~deleteServiceConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a participant from the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ConversationsV1ParticipantApi~deleteServiceConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServiceConversationParticipant(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversationParticipant");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling deleteServiceConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteServiceConversationParticipant");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~fetchConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a participant of the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource. Alternatively, you can pass a Participant's `identity` rather than the SID.
     * @param {module:api/ConversationsV1ParticipantApi~fetchConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationParticipant}
     */
    fetchConversationParticipant(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConversationParticipant");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Participants/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchServiceConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~fetchServiceConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a participant of the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource. Alternatively, you can pass a Participant's `identity` rather than the SID.
     * @param {module:api/ConversationsV1ParticipantApi~fetchServiceConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant}
     */
    fetchServiceConversationParticipant(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationParticipant");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling fetchServiceConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchServiceConversationParticipant");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~listConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConversationParticipantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all participants of the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for participants.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1ParticipantApi~listConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConversationParticipantResponse}
     */
    listConversationParticipant(conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listConversationParticipant");
      }

      let pathParams = {
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConversationParticipantResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~listServiceConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceConversationParticipantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all participants of the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for participants.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ConversationsV1ParticipantApi~listServiceConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceConversationParticipantResponse}
     */
    listServiceConversationParticipant(chatServiceSid, conversationSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling listServiceConversationParticipant");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling listServiceConversationParticipant");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceConversationParticipantResponse;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~updateConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ConversationConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing participant in the conversation
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\"{}\\\" will be returned.
     * @param {Date} [dateCreated] The date that this resource was created.
     * @param {Date} [dateUpdated] The date that this resource was last updated.
     * @param {String} [identity] A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
     * @param {Number} [lastReadMessageIndex] Index of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
     * @param {String} [lastReadTimestamp] Timestamp of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
     * @param {String} [messagingBindingProjectedAddress] The address of the Twilio phone number that is used in Group MMS. 'null' value will remove it.
     * @param {String} [messagingBindingProxyAddress] The address of the Twilio phone number that the participant is in contact with. 'null' value will remove it.
     * @param {String} [roleSid] The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
     * @param {module:api/ConversationsV1ParticipantApi~updateConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ConversationConversationParticipant}
     */
    updateConversationParticipant(conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConversationParticipant");
      }

      let pathParams = {
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Identity': opts['identity'],
        'LastReadMessageIndex': opts['lastReadMessageIndex'],
        'LastReadTimestamp': opts['lastReadTimestamp'],
        'MessagingBinding.ProjectedAddress': opts['messagingBindingProjectedAddress'],
        'MessagingBinding.ProxyAddress': opts['messagingBindingProxyAddress'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ConversationConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conversations/{ConversationSid}/Participants/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceConversationParticipant operation.
     * @callback module:api/ConversationsV1ParticipantApi~updateServiceConversationParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing participant in the conversation
     * @param {String} chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with.
     * @param {String} conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this participant.
     * @param {String} sid A 34 character string that uniquely identifies this resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceConversationParticipantEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set `{}` will be returned.
     * @param {Date} [dateCreated] The date on which this resource was created.
     * @param {Date} [dateUpdated] The date on which this resource was last updated.
     * @param {String} [identity] A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the [Conversation SDK](https://www.twilio.com/docs/conversations/sdk-overview) to communicate. Limited to 256 characters.
     * @param {Number} [lastReadMessageIndex] Index of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
     * @param {String} [lastReadTimestamp] Timestamp of last “read” message in the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for the Participant.
     * @param {String} [messagingBindingProjectedAddress] The address of the Twilio phone number that is used in Group MMS. 'null' value will remove it.
     * @param {String} [messagingBindingProxyAddress] The address of the Twilio phone number that the participant is in contact with. 'null' value will remove it.
     * @param {String} [roleSid] The SID of a conversation-level [Role](https://www.twilio.com/docs/conversations/api/role-resource) to assign to the participant.
     * @param {module:api/ConversationsV1ParticipantApi~updateServiceConversationParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsV1ServiceServiceConversationServiceConversationParticipant}
     */
    updateServiceConversationParticipant(chatServiceSid, conversationSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling updateServiceConversationParticipant");
      }
      // verify the required parameter 'conversationSid' is set
      if (conversationSid === undefined || conversationSid === null) {
        throw new Error("Missing the required parameter 'conversationSid' when calling updateServiceConversationParticipant");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateServiceConversationParticipant");
      }

      let pathParams = {
        'ChatServiceSid': chatServiceSid,
        'ConversationSid': conversationSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Identity': opts['identity'],
        'LastReadMessageIndex': opts['lastReadMessageIndex'],
        'LastReadTimestamp': opts['lastReadTimestamp'],
        'MessagingBinding.ProjectedAddress': opts['messagingBindingProjectedAddress'],
        'MessagingBinding.ProxyAddress': opts['messagingBindingProxyAddress'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsV1ServiceServiceConversationServiceConversationParticipant;
      let basePaths = ['https://conversations.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
