/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TwilioConversations);
  }
}(this, function(expect, TwilioConversations) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TwilioConversations.ConversationsV1ParticipantApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversationsV1ParticipantApi', function() {
    describe('createConversationParticipant', function() {
      it('should call createConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test createConversationParticipant
        //instance.createConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceConversationParticipant', function() {
      it('should call createServiceConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test createServiceConversationParticipant
        //instance.createServiceConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConversationParticipant', function() {
      it('should call deleteConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test deleteConversationParticipant
        //instance.deleteConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServiceConversationParticipant', function() {
      it('should call deleteServiceConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test deleteServiceConversationParticipant
        //instance.deleteServiceConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchConversationParticipant', function() {
      it('should call fetchConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test fetchConversationParticipant
        //instance.fetchConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchServiceConversationParticipant', function() {
      it('should call fetchServiceConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test fetchServiceConversationParticipant
        //instance.fetchServiceConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConversationParticipant', function() {
      it('should call listConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test listConversationParticipant
        //instance.listConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceConversationParticipant', function() {
      it('should call listServiceConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test listServiceConversationParticipant
        //instance.listServiceConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConversationParticipant', function() {
      it('should call updateConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test updateConversationParticipant
        //instance.updateConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServiceConversationParticipant', function() {
      it('should call updateServiceConversationParticipant successfully', function(done) {
        //uncomment below and update the code to test updateServiceConversationParticipant
        //instance.updateServiceConversationParticipant(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
