/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationMessageEnumOrderType;
import org.openapitools.client.model.ConversationMessageEnumWebhookEnabledType;
import org.openapitools.client.model.ConversationsV1ConversationConversationMessage;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversationServiceConversationMessage;
import org.openapitools.client.model.ListConversationMessageResponse;
import org.openapitools.client.model.ListServiceConversationMessageResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ServiceConversationMessageEnumOrderType;
import org.openapitools.client.model.ServiceConversationMessageEnumWebhookEnabledType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsV1MessageApi
 */
@Disabled
public class ConversationsV1MessageApiTest {

    private final ConversationsV1MessageApi api = new ConversationsV1MessageApi();

    /**
     * Add a new message to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConversationMessageTest() throws ApiException {
        String conversationSid = null;
        ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String author = null;
        String body = null;
        String contentSid = null;
        String contentVariables = null;
        OffsetDateTime dateCreated = null;
        OffsetDateTime dateUpdated = null;
        String mediaSid = null;
        String subject = null;
        ConversationsV1ConversationConversationMessage response = api.createConversationMessage(conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject);
        // TODO: test validations
    }

    /**
     * Add a new message to the conversation in a specific service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceConversationMessageTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String author = null;
        String body = null;
        String contentSid = null;
        String contentVariables = null;
        OffsetDateTime dateCreated = null;
        OffsetDateTime dateUpdated = null;
        String mediaSid = null;
        String subject = null;
        ConversationsV1ServiceServiceConversationServiceConversationMessage response = api.createServiceConversationMessage(chatServiceSid, conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject);
        // TODO: test validations
    }

    /**
     * Remove a message from the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConversationMessageTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        api.deleteConversationMessage(conversationSid, sid, xTwilioWebhookEnabled);
        // TODO: test validations
    }

    /**
     * Remove a message from the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceConversationMessageTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        api.deleteServiceConversationMessage(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled);
        // TODO: test validations
    }

    /**
     * Fetch a message from the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchConversationMessageTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        ConversationsV1ConversationConversationMessage response = api.fetchConversationMessage(conversationSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a message from the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceConversationMessageTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        ConversationsV1ServiceServiceConversationServiceConversationMessage response = api.fetchServiceConversationMessage(chatServiceSid, conversationSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all messages in the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationMessageTest() throws ApiException {
        String conversationSid = null;
        ConversationMessageEnumOrderType order = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListConversationMessageResponse response = api.listConversationMessage(conversationSid, order, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all messages in the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceConversationMessageTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        ServiceConversationMessageEnumOrderType order = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceConversationMessageResponse response = api.listServiceConversationMessage(chatServiceSid, conversationSid, order, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update an existing message in the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConversationMessageTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String author = null;
        String body = null;
        OffsetDateTime dateCreated = null;
        OffsetDateTime dateUpdated = null;
        String subject = null;
        ConversationsV1ConversationConversationMessage response = api.updateConversationMessage(conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject);
        // TODO: test validations
    }

    /**
     * Update an existing message in the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceConversationMessageTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String author = null;
        String body = null;
        OffsetDateTime dateCreated = null;
        OffsetDateTime dateUpdated = null;
        String subject = null;
        ConversationsV1ServiceServiceConversationServiceConversationMessage response = api.updateServiceConversationMessage(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject);
        // TODO: test validations
    }

}
