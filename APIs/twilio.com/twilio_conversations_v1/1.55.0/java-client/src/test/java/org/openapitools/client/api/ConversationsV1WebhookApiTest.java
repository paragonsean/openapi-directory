/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigurationWebhookEnumTarget;
import org.openapitools.client.model.ConversationScopedWebhookEnumMethod;
import org.openapitools.client.model.ConversationScopedWebhookEnumTarget;
import org.openapitools.client.model.ConversationsV1ConfigurationConfigurationWebhook;
import org.openapitools.client.model.ConversationsV1ConversationConversationScopedWebhook;
import org.openapitools.client.model.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook;
import org.openapitools.client.model.ListConversationScopedWebhookResponse;
import org.openapitools.client.model.ListServiceConversationScopedWebhookResponse;
import org.openapitools.client.model.ServiceConversationScopedWebhookEnumMethod;
import org.openapitools.client.model.ServiceConversationScopedWebhookEnumTarget;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsV1WebhookApi
 */
@Disabled
public class ConversationsV1WebhookApiTest {

    private final ConversationsV1WebhookApi api = new ConversationsV1WebhookApi();

    /**
     * Create a new webhook scoped to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConversationScopedWebhookTest() throws ApiException {
        String conversationSid = null;
        ConversationScopedWebhookEnumTarget target = null;
        List<String> configurationFilters = null;
        String configurationFlowSid = null;
        ConversationScopedWebhookEnumMethod configurationMethod = null;
        Integer configurationReplayAfter = null;
        List<String> configurationTriggers = null;
        String configurationUrl = null;
        ConversationsV1ConversationConversationScopedWebhook response = api.createConversationScopedWebhook(conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl);
        // TODO: test validations
    }

    /**
     * Create a new webhook scoped to the conversation in a specific service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceConversationScopedWebhookTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        ServiceConversationScopedWebhookEnumTarget target = null;
        List<String> configurationFilters = null;
        String configurationFlowSid = null;
        ServiceConversationScopedWebhookEnumMethod configurationMethod = null;
        Integer configurationReplayAfter = null;
        List<String> configurationTriggers = null;
        String configurationUrl = null;
        ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook response = api.createServiceConversationScopedWebhook(chatServiceSid, conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl);
        // TODO: test validations
    }

    /**
     * Remove an existing webhook scoped to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConversationScopedWebhookTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        api.deleteConversationScopedWebhook(conversationSid, sid);
        // TODO: test validations
    }

    /**
     * Remove an existing webhook scoped to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceConversationScopedWebhookTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        api.deleteServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchConfigurationWebhookTest() throws ApiException {
        ConversationsV1ConfigurationConfigurationWebhook response = api.fetchConfigurationWebhook();
        // TODO: test validations
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchConversationScopedWebhookTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        ConversationsV1ConversationConversationScopedWebhook response = api.fetchConversationScopedWebhook(conversationSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceConversationScopedWebhookTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook response = api.fetchServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific service webhook configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceWebhookConfigurationTest() throws ApiException {
        String chatServiceSid = null;
        ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration response = api.fetchServiceWebhookConfiguration(chatServiceSid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationScopedWebhookTest() throws ApiException {
        String conversationSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListConversationScopedWebhookResponse response = api.listConversationScopedWebhook(conversationSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceConversationScopedWebhookTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceConversationScopedWebhookResponse response = api.listServiceConversationScopedWebhook(chatServiceSid, conversationSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationWebhookTest() throws ApiException {
        List<String> filters = null;
        String method = null;
        String postWebhookUrl = null;
        String preWebhookUrl = null;
        ConfigurationWebhookEnumTarget target = null;
        ConversationsV1ConfigurationConfigurationWebhook response = api.updateConfigurationWebhook(filters, method, postWebhookUrl, preWebhookUrl, target);
        // TODO: test validations
    }

    /**
     * Update an existing conversation-scoped webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConversationScopedWebhookTest() throws ApiException {
        String conversationSid = null;
        String sid = null;
        List<String> configurationFilters = null;
        String configurationFlowSid = null;
        ConversationScopedWebhookEnumMethod configurationMethod = null;
        List<String> configurationTriggers = null;
        String configurationUrl = null;
        ConversationsV1ConversationConversationScopedWebhook response = api.updateConversationScopedWebhook(conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl);
        // TODO: test validations
    }

    /**
     * Update an existing conversation-scoped webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceConversationScopedWebhookTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String sid = null;
        List<String> configurationFilters = null;
        String configurationFlowSid = null;
        ServiceConversationScopedWebhookEnumMethod configurationMethod = null;
        List<String> configurationTriggers = null;
        String configurationUrl = null;
        ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook response = api.updateServiceConversationScopedWebhook(chatServiceSid, conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl);
        // TODO: test validations
    }

    /**
     * Update a specific Webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceWebhookConfigurationTest() throws ApiException {
        String chatServiceSid = null;
        List<String> filters = null;
        String method = null;
        URI postWebhookUrl = null;
        URI preWebhookUrl = null;
        ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration response = api.updateServiceWebhookConfiguration(chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl);
        // TODO: test validations
    }

}
