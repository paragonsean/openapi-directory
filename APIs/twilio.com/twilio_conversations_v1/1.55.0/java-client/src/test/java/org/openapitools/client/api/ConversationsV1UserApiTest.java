/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationsV1ServiceServiceUser;
import org.openapitools.client.model.ConversationsV1User;
import org.openapitools.client.model.ListServiceUserResponse;
import org.openapitools.client.model.ListUserResponse;
import org.openapitools.client.model.ServiceUserEnumWebhookEnabledType;
import org.openapitools.client.model.UserEnumWebhookEnabledType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsV1UserApi
 */
@Disabled
public class ConversationsV1UserApiTest {

    private final ConversationsV1UserApi api = new ConversationsV1UserApi();

    /**
     * Add a new conversation user to your service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceUserTest() throws ApiException {
        String chatServiceSid = null;
        String identity = null;
        ServiceUserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        ConversationsV1ServiceServiceUser response = api.createServiceUser(chatServiceSid, identity, xTwilioWebhookEnabled, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

    /**
     * Add a new conversation user to your account&#39;s default service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String identity = null;
        UserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        ConversationsV1User response = api.createUser(identity, xTwilioWebhookEnabled, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

    /**
     * Remove a conversation user from your service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceUserTest() throws ApiException {
        String chatServiceSid = null;
        String sid = null;
        ServiceUserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        api.deleteServiceUser(chatServiceSid, sid, xTwilioWebhookEnabled);
        // TODO: test validations
    }

    /**
     * Remove a conversation user from your account&#39;s default service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String sid = null;
        UserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        api.deleteUser(sid, xTwilioWebhookEnabled);
        // TODO: test validations
    }

    /**
     * Fetch a conversation user from your service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceUserTest() throws ApiException {
        String chatServiceSid = null;
        String sid = null;
        ConversationsV1ServiceServiceUser response = api.fetchServiceUser(chatServiceSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a conversation user from your account&#39;s default service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchUserTest() throws ApiException {
        String sid = null;
        ConversationsV1User response = api.fetchUser(sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all conversation users in your service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceUserTest() throws ApiException {
        String chatServiceSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceUserResponse response = api.listServiceUser(chatServiceSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all conversation users in your account&#39;s default service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUserResponse response = api.listUser(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update an existing conversation user in your service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceUserTest() throws ApiException {
        String chatServiceSid = null;
        String sid = null;
        ServiceUserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        ConversationsV1ServiceServiceUser response = api.updateServiceUser(chatServiceSid, sid, xTwilioWebhookEnabled, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

    /**
     * Update an existing conversation user in your account&#39;s default service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String sid = null;
        UserEnumWebhookEnabledType xTwilioWebhookEnabled = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        ConversationsV1User response = api.updateUser(sid, xTwilioWebhookEnabled, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

}
