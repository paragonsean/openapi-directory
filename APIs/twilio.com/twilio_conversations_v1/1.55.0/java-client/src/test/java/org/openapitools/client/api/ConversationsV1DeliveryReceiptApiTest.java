/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationsV1ConversationConversationMessageConversationMessageReceipt;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt;
import org.openapitools.client.model.ListConversationMessageReceiptResponse;
import org.openapitools.client.model.ListServiceConversationMessageReceiptResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsV1DeliveryReceiptApi
 */
@Disabled
public class ConversationsV1DeliveryReceiptApiTest {

    private final ConversationsV1DeliveryReceiptApi api = new ConversationsV1DeliveryReceiptApi();

    /**
     * Fetch the delivery and read receipts of the conversation message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchConversationMessageReceiptTest() throws ApiException {
        String conversationSid = null;
        String messageSid = null;
        String sid = null;
        ConversationsV1ConversationConversationMessageConversationMessageReceipt response = api.fetchConversationMessageReceipt(conversationSid, messageSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceConversationMessageReceiptTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String messageSid = null;
        String sid = null;
        ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt response = api.fetchServiceConversationMessageReceipt(chatServiceSid, conversationSid, messageSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationMessageReceiptTest() throws ApiException {
        String conversationSid = null;
        String messageSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListConversationMessageReceiptResponse response = api.listConversationMessageReceipt(conversationSid, messageSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceConversationMessageReceiptTest() throws ApiException {
        String chatServiceSid = null;
        String conversationSid = null;
        String messageSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceConversationMessageReceiptResponse response = api.listServiceConversationMessageReceipt(chatServiceSid, conversationSid, messageSid, pageSize, page, pageToken);
        // TODO: test validations
    }

}
