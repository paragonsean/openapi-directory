/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationsV1ServiceServiceUserServiceUserConversation;
import org.openapitools.client.model.ConversationsV1UserUserConversation;
import org.openapitools.client.model.ListServiceUserConversationResponse;
import org.openapitools.client.model.ListUserConversationResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ServiceUserConversationEnumNotificationLevel;
import org.openapitools.client.model.UserConversationEnumNotificationLevel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsV1UserConversationApi
 */
@Disabled
public class ConversationsV1UserConversationApiTest {

    private final ConversationsV1UserConversationApi api = new ConversationsV1UserConversationApi();

    /**
     * Delete a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceUserConversationTest() throws ApiException {
        String chatServiceSid = null;
        String userSid = null;
        String conversationSid = null;
        api.deleteServiceUserConversation(chatServiceSid, userSid, conversationSid);
        // TODO: test validations
    }

    /**
     * Delete a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserConversationTest() throws ApiException {
        String userSid = null;
        String conversationSid = null;
        api.deleteUserConversation(userSid, conversationSid);
        // TODO: test validations
    }

    /**
     * Fetch a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceUserConversationTest() throws ApiException {
        String chatServiceSid = null;
        String userSid = null;
        String conversationSid = null;
        ConversationsV1ServiceServiceUserServiceUserConversation response = api.fetchServiceUserConversation(chatServiceSid, userSid, conversationSid);
        // TODO: test validations
    }

    /**
     * Fetch a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchUserConversationTest() throws ApiException {
        String userSid = null;
        String conversationSid = null;
        ConversationsV1UserUserConversation response = api.fetchUserConversation(userSid, conversationSid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceUserConversationTest() throws ApiException {
        String chatServiceSid = null;
        String userSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceUserConversationResponse response = api.listServiceUserConversation(chatServiceSid, userSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserConversationTest() throws ApiException {
        String userSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUserConversationResponse response = api.listUserConversation(userSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceUserConversationTest() throws ApiException {
        String chatServiceSid = null;
        String userSid = null;
        String conversationSid = null;
        Integer lastReadMessageIndex = null;
        OffsetDateTime lastReadTimestamp = null;
        ServiceUserConversationEnumNotificationLevel notificationLevel = null;
        ConversationsV1ServiceServiceUserServiceUserConversation response = api.updateServiceUserConversation(chatServiceSid, userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel);
        // TODO: test validations
    }

    /**
     * Update a specific User Conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserConversationTest() throws ApiException {
        String userSid = null;
        String conversationSid = null;
        Integer lastReadMessageIndex = null;
        OffsetDateTime lastReadTimestamp = null;
        UserConversationEnumNotificationLevel notificationLevel = null;
        ConversationsV1UserUserConversation response = api.updateUserConversation(userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel);
        // TODO: test validations
    }

}
