/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceParticipantConversationEnumState;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationsV1ServiceServiceParticipantConversation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:18.448958-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationsV1ServiceServiceParticipantConversation {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CHAT_SERVICE_SID = "chat_service_sid";
  @SerializedName(SERIALIZED_NAME_CHAT_SERVICE_SID)
  private String chatServiceSid;

  public static final String SERIALIZED_NAME_CONVERSATION_ATTRIBUTES = "conversation_attributes";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ATTRIBUTES)
  private String conversationAttributes;

  public static final String SERIALIZED_NAME_CONVERSATION_CREATED_BY = "conversation_created_by";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_CREATED_BY)
  private String conversationCreatedBy;

  public static final String SERIALIZED_NAME_CONVERSATION_DATE_CREATED = "conversation_date_created";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_DATE_CREATED)
  private OffsetDateTime conversationDateCreated;

  public static final String SERIALIZED_NAME_CONVERSATION_DATE_UPDATED = "conversation_date_updated";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_DATE_UPDATED)
  private OffsetDateTime conversationDateUpdated;

  public static final String SERIALIZED_NAME_CONVERSATION_FRIENDLY_NAME = "conversation_friendly_name";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_FRIENDLY_NAME)
  private String conversationFriendlyName;

  public static final String SERIALIZED_NAME_CONVERSATION_SID = "conversation_sid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_SID)
  private String conversationSid;

  public static final String SERIALIZED_NAME_CONVERSATION_STATE = "conversation_state";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_STATE)
  private ServiceParticipantConversationEnumState conversationState;

  public static final String SERIALIZED_NAME_CONVERSATION_TIMERS = "conversation_timers";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_TIMERS)
  private Object conversationTimers = null;

  public static final String SERIALIZED_NAME_CONVERSATION_UNIQUE_NAME = "conversation_unique_name";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_UNIQUE_NAME)
  private String conversationUniqueName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_PARTICIPANT_IDENTITY = "participant_identity";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_IDENTITY)
  private String participantIdentity;

  public static final String SERIALIZED_NAME_PARTICIPANT_MESSAGING_BINDING = "participant_messaging_binding";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_MESSAGING_BINDING)
  private Object participantMessagingBinding = null;

  public static final String SERIALIZED_NAME_PARTICIPANT_SID = "participant_sid";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_SID)
  private String participantSid;

  public static final String SERIALIZED_NAME_PARTICIPANT_USER_SID = "participant_user_sid";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_USER_SID)
  private String participantUserSid;

  public ConversationsV1ServiceServiceParticipantConversation() {
  }

  public ConversationsV1ServiceServiceParticipantConversation accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ConversationsV1ServiceServiceParticipantConversation chatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
    return this;
  }

  /**
   * The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
   * @return chatServiceSid
   */
  @javax.annotation.Nullable
  public String getChatServiceSid() {
    return chatServiceSid;
  }

  public void setChatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationAttributes(String conversationAttributes) {
    this.conversationAttributes = conversationAttributes;
    return this;
  }

  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \&quot;{}\&quot; will be returned.
   * @return conversationAttributes
   */
  @javax.annotation.Nullable
  public String getConversationAttributes() {
    return conversationAttributes;
  }

  public void setConversationAttributes(String conversationAttributes) {
    this.conversationAttributes = conversationAttributes;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationCreatedBy(String conversationCreatedBy) {
    this.conversationCreatedBy = conversationCreatedBy;
    return this;
  }

  /**
   * Identity of the creator of this Conversation.
   * @return conversationCreatedBy
   */
  @javax.annotation.Nullable
  public String getConversationCreatedBy() {
    return conversationCreatedBy;
  }

  public void setConversationCreatedBy(String conversationCreatedBy) {
    this.conversationCreatedBy = conversationCreatedBy;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationDateCreated(OffsetDateTime conversationDateCreated) {
    this.conversationDateCreated = conversationDateCreated;
    return this;
  }

  /**
   * The date that this conversation was created, given in ISO 8601 format.
   * @return conversationDateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConversationDateCreated() {
    return conversationDateCreated;
  }

  public void setConversationDateCreated(OffsetDateTime conversationDateCreated) {
    this.conversationDateCreated = conversationDateCreated;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationDateUpdated(OffsetDateTime conversationDateUpdated) {
    this.conversationDateUpdated = conversationDateUpdated;
    return this;
  }

  /**
   * The date that this conversation was last updated, given in ISO 8601 format.
   * @return conversationDateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConversationDateUpdated() {
    return conversationDateUpdated;
  }

  public void setConversationDateUpdated(OffsetDateTime conversationDateUpdated) {
    this.conversationDateUpdated = conversationDateUpdated;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationFriendlyName(String conversationFriendlyName) {
    this.conversationFriendlyName = conversationFriendlyName;
    return this;
  }

  /**
   * The human-readable name of this conversation, limited to 256 characters. Optional.
   * @return conversationFriendlyName
   */
  @javax.annotation.Nullable
  public String getConversationFriendlyName() {
    return conversationFriendlyName;
  }

  public void setConversationFriendlyName(String conversationFriendlyName) {
    this.conversationFriendlyName = conversationFriendlyName;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationSid(String conversationSid) {
    this.conversationSid = conversationSid;
    return this;
  }

  /**
   * The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) this Participant belongs to.
   * @return conversationSid
   */
  @javax.annotation.Nullable
  public String getConversationSid() {
    return conversationSid;
  }

  public void setConversationSid(String conversationSid) {
    this.conversationSid = conversationSid;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationState(ServiceParticipantConversationEnumState conversationState) {
    this.conversationState = conversationState;
    return this;
  }

  /**
   * Get conversationState
   * @return conversationState
   */
  @javax.annotation.Nullable
  public ServiceParticipantConversationEnumState getConversationState() {
    return conversationState;
  }

  public void setConversationState(ServiceParticipantConversationEnumState conversationState) {
    this.conversationState = conversationState;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationTimers(Object conversationTimers) {
    this.conversationTimers = conversationTimers;
    return this;
  }

  /**
   * Timer date values representing state update for this conversation.
   * @return conversationTimers
   */
  @javax.annotation.Nullable
  public Object getConversationTimers() {
    return conversationTimers;
  }

  public void setConversationTimers(Object conversationTimers) {
    this.conversationTimers = conversationTimers;
  }


  public ConversationsV1ServiceServiceParticipantConversation conversationUniqueName(String conversationUniqueName) {
    this.conversationUniqueName = conversationUniqueName;
    return this;
  }

  /**
   * An application-defined string that uniquely identifies the Conversation resource.
   * @return conversationUniqueName
   */
  @javax.annotation.Nullable
  public String getConversationUniqueName() {
    return conversationUniqueName;
  }

  public void setConversationUniqueName(String conversationUniqueName) {
    this.conversationUniqueName = conversationUniqueName;
  }


  public ConversationsV1ServiceServiceParticipantConversation links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Contains absolute URLs to access the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) and [conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) of this conversation.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public ConversationsV1ServiceServiceParticipantConversation participantIdentity(String participantIdentity) {
    this.participantIdentity = participantIdentity;
    return this;
  }

  /**
   * A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
   * @return participantIdentity
   */
  @javax.annotation.Nullable
  public String getParticipantIdentity() {
    return participantIdentity;
  }

  public void setParticipantIdentity(String participantIdentity) {
    this.participantIdentity = participantIdentity;
  }


  public ConversationsV1ServiceServiceParticipantConversation participantMessagingBinding(Object participantMessagingBinding) {
    this.participantMessagingBinding = participantMessagingBinding;
    return this;
  }

  /**
   * Information about how this participant exchanges messages with the conversation. A JSON parameter consisting of type and address fields of the participant.
   * @return participantMessagingBinding
   */
  @javax.annotation.Nullable
  public Object getParticipantMessagingBinding() {
    return participantMessagingBinding;
  }

  public void setParticipantMessagingBinding(Object participantMessagingBinding) {
    this.participantMessagingBinding = participantMessagingBinding;
  }


  public ConversationsV1ServiceServiceParticipantConversation participantSid(String participantSid) {
    this.participantSid = participantSid;
    return this;
  }

  /**
   * The unique ID of the [Participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource).
   * @return participantSid
   */
  @javax.annotation.Nullable
  public String getParticipantSid() {
    return participantSid;
  }

  public void setParticipantSid(String participantSid) {
    this.participantSid = participantSid;
  }


  public ConversationsV1ServiceServiceParticipantConversation participantUserSid(String participantUserSid) {
    this.participantUserSid = participantUserSid;
    return this;
  }

  /**
   * The unique string that identifies the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource).
   * @return participantUserSid
   */
  @javax.annotation.Nullable
  public String getParticipantUserSid() {
    return participantUserSid;
  }

  public void setParticipantUserSid(String participantUserSid) {
    this.participantUserSid = participantUserSid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsV1ServiceServiceParticipantConversation conversationsV1ServiceServiceParticipantConversation = (ConversationsV1ServiceServiceParticipantConversation) o;
    return Objects.equals(this.accountSid, conversationsV1ServiceServiceParticipantConversation.accountSid) &&
        Objects.equals(this.chatServiceSid, conversationsV1ServiceServiceParticipantConversation.chatServiceSid) &&
        Objects.equals(this.conversationAttributes, conversationsV1ServiceServiceParticipantConversation.conversationAttributes) &&
        Objects.equals(this.conversationCreatedBy, conversationsV1ServiceServiceParticipantConversation.conversationCreatedBy) &&
        Objects.equals(this.conversationDateCreated, conversationsV1ServiceServiceParticipantConversation.conversationDateCreated) &&
        Objects.equals(this.conversationDateUpdated, conversationsV1ServiceServiceParticipantConversation.conversationDateUpdated) &&
        Objects.equals(this.conversationFriendlyName, conversationsV1ServiceServiceParticipantConversation.conversationFriendlyName) &&
        Objects.equals(this.conversationSid, conversationsV1ServiceServiceParticipantConversation.conversationSid) &&
        Objects.equals(this.conversationState, conversationsV1ServiceServiceParticipantConversation.conversationState) &&
        Objects.equals(this.conversationTimers, conversationsV1ServiceServiceParticipantConversation.conversationTimers) &&
        Objects.equals(this.conversationUniqueName, conversationsV1ServiceServiceParticipantConversation.conversationUniqueName) &&
        Objects.equals(this.links, conversationsV1ServiceServiceParticipantConversation.links) &&
        Objects.equals(this.participantIdentity, conversationsV1ServiceServiceParticipantConversation.participantIdentity) &&
        Objects.equals(this.participantMessagingBinding, conversationsV1ServiceServiceParticipantConversation.participantMessagingBinding) &&
        Objects.equals(this.participantSid, conversationsV1ServiceServiceParticipantConversation.participantSid) &&
        Objects.equals(this.participantUserSid, conversationsV1ServiceServiceParticipantConversation.participantUserSid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, chatServiceSid, conversationAttributes, conversationCreatedBy, conversationDateCreated, conversationDateUpdated, conversationFriendlyName, conversationSid, conversationState, conversationTimers, conversationUniqueName, links, participantIdentity, participantMessagingBinding, participantSid, participantUserSid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsV1ServiceServiceParticipantConversation {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    chatServiceSid: ").append(toIndentedString(chatServiceSid)).append("\n");
    sb.append("    conversationAttributes: ").append(toIndentedString(conversationAttributes)).append("\n");
    sb.append("    conversationCreatedBy: ").append(toIndentedString(conversationCreatedBy)).append("\n");
    sb.append("    conversationDateCreated: ").append(toIndentedString(conversationDateCreated)).append("\n");
    sb.append("    conversationDateUpdated: ").append(toIndentedString(conversationDateUpdated)).append("\n");
    sb.append("    conversationFriendlyName: ").append(toIndentedString(conversationFriendlyName)).append("\n");
    sb.append("    conversationSid: ").append(toIndentedString(conversationSid)).append("\n");
    sb.append("    conversationState: ").append(toIndentedString(conversationState)).append("\n");
    sb.append("    conversationTimers: ").append(toIndentedString(conversationTimers)).append("\n");
    sb.append("    conversationUniqueName: ").append(toIndentedString(conversationUniqueName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    participantIdentity: ").append(toIndentedString(participantIdentity)).append("\n");
    sb.append("    participantMessagingBinding: ").append(toIndentedString(participantMessagingBinding)).append("\n");
    sb.append("    participantSid: ").append(toIndentedString(participantSid)).append("\n");
    sb.append("    participantUserSid: ").append(toIndentedString(participantUserSid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("chat_service_sid");
    openapiFields.add("conversation_attributes");
    openapiFields.add("conversation_created_by");
    openapiFields.add("conversation_date_created");
    openapiFields.add("conversation_date_updated");
    openapiFields.add("conversation_friendly_name");
    openapiFields.add("conversation_sid");
    openapiFields.add("conversation_state");
    openapiFields.add("conversation_timers");
    openapiFields.add("conversation_unique_name");
    openapiFields.add("links");
    openapiFields.add("participant_identity");
    openapiFields.add("participant_messaging_binding");
    openapiFields.add("participant_sid");
    openapiFields.add("participant_user_sid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationsV1ServiceServiceParticipantConversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationsV1ServiceServiceParticipantConversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsV1ServiceServiceParticipantConversation is not found in the empty JSON string", ConversationsV1ServiceServiceParticipantConversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationsV1ServiceServiceParticipantConversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationsV1ServiceServiceParticipantConversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("chat_service_sid") != null && !jsonObj.get("chat_service_sid").isJsonNull()) && !jsonObj.get("chat_service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_service_sid").toString()));
      }
      if ((jsonObj.get("conversation_attributes") != null && !jsonObj.get("conversation_attributes").isJsonNull()) && !jsonObj.get("conversation_attributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_attributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_attributes").toString()));
      }
      if ((jsonObj.get("conversation_created_by") != null && !jsonObj.get("conversation_created_by").isJsonNull()) && !jsonObj.get("conversation_created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_created_by").toString()));
      }
      if ((jsonObj.get("conversation_friendly_name") != null && !jsonObj.get("conversation_friendly_name").isJsonNull()) && !jsonObj.get("conversation_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_friendly_name").toString()));
      }
      if ((jsonObj.get("conversation_sid") != null && !jsonObj.get("conversation_sid").isJsonNull()) && !jsonObj.get("conversation_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_sid").toString()));
      }
      if ((jsonObj.get("conversation_state") != null && !jsonObj.get("conversation_state").isJsonNull()) && !jsonObj.get("conversation_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_state").toString()));
      }
      // validate the optional field `conversation_state`
      if (jsonObj.get("conversation_state") != null && !jsonObj.get("conversation_state").isJsonNull()) {
        ServiceParticipantConversationEnumState.validateJsonElement(jsonObj.get("conversation_state"));
      }
      if ((jsonObj.get("conversation_unique_name") != null && !jsonObj.get("conversation_unique_name").isJsonNull()) && !jsonObj.get("conversation_unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_unique_name").toString()));
      }
      if ((jsonObj.get("participant_identity") != null && !jsonObj.get("participant_identity").isJsonNull()) && !jsonObj.get("participant_identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_identity").toString()));
      }
      if ((jsonObj.get("participant_sid") != null && !jsonObj.get("participant_sid").isJsonNull()) && !jsonObj.get("participant_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_sid").toString()));
      }
      if ((jsonObj.get("participant_user_sid") != null && !jsonObj.get("participant_user_sid").isJsonNull()) && !jsonObj.get("participant_user_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_user_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_user_sid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsV1ServiceServiceParticipantConversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsV1ServiceServiceParticipantConversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsV1ServiceServiceParticipantConversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsV1ServiceServiceParticipantConversation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsV1ServiceServiceParticipantConversation>() {
           @Override
           public void write(JsonWriter out, ConversationsV1ServiceServiceParticipantConversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsV1ServiceServiceParticipantConversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationsV1ServiceServiceParticipantConversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationsV1ServiceServiceParticipantConversation
   * @throws IOException if the JSON string is invalid with respect to ConversationsV1ServiceServiceParticipantConversation
   */
  public static ConversationsV1ServiceServiceParticipantConversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsV1ServiceServiceParticipantConversation.class);
  }

  /**
   * Convert an instance of ConversationsV1ServiceServiceParticipantConversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

