/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationsV1ServiceServiceUserServiceUserConversation;
import org.openapitools.client.model.ConversationsV1UserUserConversation;
import org.openapitools.client.model.ListServiceUserConversationResponse;
import org.openapitools.client.model.ListUserConversationResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ServiceUserConversationEnumNotificationLevel;
import org.openapitools.client.model.UserConversationEnumNotificationLevel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1UserConversationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1UserConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1UserConversationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteServiceUserConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceUserConversationCall(String chatServiceSid, String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceUserConversationValidateBeforeCall(String chatServiceSid, String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling deleteServiceUserConversation(Async)");
        }

        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling deleteServiceUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteServiceUserConversation(Async)");
        }

        return deleteServiceUserConversationCall(chatServiceSid, userSid, conversationSid, _callback);

    }

    /**
     * 
     * Delete a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServiceUserConversation(String chatServiceSid, String userSid, String conversationSid) throws ApiException {
        deleteServiceUserConversationWithHttpInfo(chatServiceSid, userSid, conversationSid);
    }

    /**
     * 
     * Delete a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceUserConversationWithHttpInfo(String chatServiceSid, String userSid, String conversationSid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceUserConversationAsync(String chatServiceSid, String userSid, String conversationSid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserConversation
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserConversationCall(String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserConversationValidateBeforeCall(String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling deleteUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteUserConversation(Async)");
        }

        return deleteUserConversationCall(userSid, conversationSid, _callback);

    }

    /**
     * 
     * Delete a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserConversation(String userSid, String conversationSid) throws ApiException {
        deleteUserConversationWithHttpInfo(userSid, conversationSid);
    }

    /**
     * 
     * Delete a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserConversationWithHttpInfo(String userSid, String conversationSid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserConversationValidateBeforeCall(userSid, conversationSid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserConversationAsync(String userSid, String conversationSid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserConversationValidateBeforeCall(userSid, conversationSid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchServiceUserConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceUserConversationCall(String chatServiceSid, String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceUserConversationValidateBeforeCall(String chatServiceSid, String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceUserConversation(Async)");
        }

        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling fetchServiceUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchServiceUserConversation(Async)");
        }

        return fetchServiceUserConversationCall(chatServiceSid, userSid, conversationSid, _callback);

    }

    /**
     * 
     * Fetch a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ConversationsV1ServiceServiceUserServiceUserConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceUserServiceUserConversation fetchServiceUserConversation(String chatServiceSid, String userSid, String conversationSid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceUserServiceUserConversation> localVarResp = fetchServiceUserConversationWithHttpInfo(chatServiceSid, userSid, conversationSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceUserServiceUserConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceUserServiceUserConversation> fetchServiceUserConversationWithHttpInfo(String chatServiceSid, String userSid, String conversationSid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceUserServiceUserConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceUserConversationAsync(String chatServiceSid, String userSid, String conversationSid, final ApiCallback<ConversationsV1ServiceServiceUserServiceUserConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceUserServiceUserConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserConversation
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserConversationCall(String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserConversationValidateBeforeCall(String userSid, String conversationSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling fetchUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchUserConversation(Async)");
        }

        return fetchUserConversationCall(userSid, conversationSid, _callback);

    }

    /**
     * 
     * Fetch a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ConversationsV1UserUserConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1UserUserConversation fetchUserConversation(String userSid, String conversationSid) throws ApiException {
        ApiResponse<ConversationsV1UserUserConversation> localVarResp = fetchUserConversationWithHttpInfo(userSid, conversationSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @return ApiResponse&lt;ConversationsV1UserUserConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1UserUserConversation> fetchUserConversationWithHttpInfo(String userSid, String conversationSid) throws ApiException {
        okhttp3.Call localVarCall = fetchUserConversationValidateBeforeCall(userSid, conversationSid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1UserUserConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserConversationAsync(String userSid, String conversationSid, final ApiCallback<ConversationsV1UserUserConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserConversationValidateBeforeCall(userSid, conversationSid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1UserUserConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceUserConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceUserConversationCall(String chatServiceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceUserConversationValidateBeforeCall(String chatServiceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling listServiceUserConversation(Async)");
        }

        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling listServiceUserConversation(Async)");
        }

        return listServiceUserConversationCall(chatServiceSid, userSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all User Conversations for the User.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceUserConversationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceUserConversationResponse listServiceUserConversation(String chatServiceSid, String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceUserConversationResponse> localVarResp = listServiceUserConversationWithHttpInfo(chatServiceSid, userSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all User Conversations for the User.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceUserConversationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceUserConversationResponse> listServiceUserConversationWithHttpInfo(String chatServiceSid, String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceUserConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all User Conversations for the User.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceUserConversationAsync(String chatServiceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceUserConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceUserConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserConversation
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserConversationCall(String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Users/{UserSid}/Conversations"
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserConversationValidateBeforeCall(String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling listUserConversation(Async)");
        }

        return listUserConversationCall(userSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all User Conversations for the User.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUserConversationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUserConversationResponse listUserConversation(String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUserConversationResponse> localVarResp = listUserConversationWithHttpInfo(userSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all User Conversations for the User.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUserConversationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserConversationResponse> listUserConversationWithHttpInfo(String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUserConversationValidateBeforeCall(userSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUserConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all User Conversations for the User.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserConversationAsync(String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUserConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserConversationValidateBeforeCall(userSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUserConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceUserConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceUserConversationCall(String chatServiceSid, String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, ServiceUserConversationEnumNotificationLevel notificationLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastReadMessageIndex != null) {
            localVarFormParams.put("LastReadMessageIndex", lastReadMessageIndex);
        }

        if (lastReadTimestamp != null) {
            localVarFormParams.put("LastReadTimestamp", lastReadTimestamp);
        }

        if (notificationLevel != null) {
            localVarFormParams.put("NotificationLevel", notificationLevel);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceUserConversationValidateBeforeCall(String chatServiceSid, String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, ServiceUserConversationEnumNotificationLevel notificationLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceUserConversation(Async)");
        }

        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling updateServiceUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateServiceUserConversation(Async)");
        }

        return updateServiceUserConversationCall(chatServiceSid, userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, _callback);

    }

    /**
     * 
     * Update a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @return ConversationsV1ServiceServiceUserServiceUserConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceUserServiceUserConversation updateServiceUserConversation(String chatServiceSid, String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, ServiceUserConversationEnumNotificationLevel notificationLevel) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceUserServiceUserConversation> localVarResp = updateServiceUserConversationWithHttpInfo(chatServiceSid, userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceUserServiceUserConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceUserServiceUserConversation> updateServiceUserConversationWithHttpInfo(String chatServiceSid, String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, ServiceUserConversationEnumNotificationLevel notificationLevel) throws ApiException {
        okhttp3.Call localVarCall = updateServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceUserServiceUserConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a specific User Conversation.
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceUserConversationAsync(String chatServiceSid, String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, ServiceUserConversationEnumNotificationLevel notificationLevel, final ApiCallback<ConversationsV1ServiceServiceUserServiceUserConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceUserConversationValidateBeforeCall(chatServiceSid, userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceUserServiceUserConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserConversation
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserConversationCall(String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, UserConversationEnumNotificationLevel notificationLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Users/{UserSid}/Conversations/{ConversationSid}"
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastReadMessageIndex != null) {
            localVarFormParams.put("LastReadMessageIndex", lastReadMessageIndex);
        }

        if (lastReadTimestamp != null) {
            localVarFormParams.put("LastReadTimestamp", lastReadTimestamp);
        }

        if (notificationLevel != null) {
            localVarFormParams.put("NotificationLevel", notificationLevel);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserConversationValidateBeforeCall(String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, UserConversationEnumNotificationLevel notificationLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling updateUserConversation(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateUserConversation(Async)");
        }

        return updateUserConversationCall(userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, _callback);

    }

    /**
     * 
     * Update a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @return ConversationsV1UserUserConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1UserUserConversation updateUserConversation(String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, UserConversationEnumNotificationLevel notificationLevel) throws ApiException {
        ApiResponse<ConversationsV1UserUserConversation> localVarResp = updateUserConversationWithHttpInfo(userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @return ApiResponse&lt;ConversationsV1UserUserConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1UserUserConversation> updateUserConversationWithHttpInfo(String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, UserConversationEnumNotificationLevel notificationLevel) throws ApiException {
        okhttp3.Call localVarCall = updateUserConversationValidateBeforeCall(userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, null);
        Type localVarReturnType = new TypeToken<ConversationsV1UserUserConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a specific User Conversation.
     * @param userSid The unique SID identifier of the [User resource](https://www.twilio.com/docs/conversations/api/user-resource). This value can be either the &#x60;sid&#x60; or the &#x60;identity&#x60; of the User resource. (required)
     * @param conversationSid The unique SID identifier of the Conversation. This value can be either the &#x60;sid&#x60; or the &#x60;unique_name&#x60; of the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource). (required)
     * @param lastReadMessageIndex The index of the last Message in the Conversation that the Participant has read. (optional)
     * @param lastReadTimestamp The date of the last message read in conversation by the user, given in ISO 8601 format. (optional)
     * @param notificationLevel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserConversationAsync(String userSid, String conversationSid, Integer lastReadMessageIndex, OffsetDateTime lastReadTimestamp, UserConversationEnumNotificationLevel notificationLevel, final ApiCallback<ConversationsV1UserUserConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserConversationValidateBeforeCall(userSid, conversationSid, lastReadMessageIndex, lastReadTimestamp, notificationLevel, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1UserUserConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
