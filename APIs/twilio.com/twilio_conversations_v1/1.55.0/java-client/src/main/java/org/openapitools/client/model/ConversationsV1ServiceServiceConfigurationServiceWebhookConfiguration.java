/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceWebhookConfigurationEnumMethod;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:18.448958-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CHAT_SERVICE_SID = "chat_service_sid";
  @SerializedName(SERIALIZED_NAME_CHAT_SERVICE_SID)
  private String chatServiceSid;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<String> filters;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private ServiceWebhookConfigurationEnumMethod method;

  public static final String SERIALIZED_NAME_POST_WEBHOOK_URL = "post_webhook_url";
  @SerializedName(SERIALIZED_NAME_POST_WEBHOOK_URL)
  private URI postWebhookUrl;

  public static final String SERIALIZED_NAME_PRE_WEBHOOK_URL = "pre_webhook_url";
  @SerializedName(SERIALIZED_NAME_PRE_WEBHOOK_URL)
  private URI preWebhookUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration() {
  }

  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this service.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration chatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
    return this;
  }

  /**
   * The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
   * @return chatServiceSid
   */
  @javax.annotation.Nullable
  public String getChatServiceSid() {
    return chatServiceSid;
  }

  public void setChatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration filters(List<String> filters) {
    this.filters = filters;
    return this;
  }

  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are &#x60;onParticipantAdd&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onDeliveryUpdated&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemove&#x60;, &#x60;onParticipantRemove&#x60;, &#x60;onConversationUpdate&#x60;, &#x60;onMessageAdd&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onConversationAdded&#x60;, &#x60;onMessageAdded&#x60;, &#x60;onConversationAdd&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantUpdate&#x60;, &#x60;onMessageRemove&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onMessageUpdate&#x60; or &#x60;onConversationStateUpdated&#x60;.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(List<String> filters) {
    this.filters = filters;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration method(ServiceWebhookConfigurationEnumMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public ServiceWebhookConfigurationEnumMethod getMethod() {
    return method;
  }

  public void setMethod(ServiceWebhookConfigurationEnumMethod method) {
    this.method = method;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration postWebhookUrl(URI postWebhookUrl) {
    this.postWebhookUrl = postWebhookUrl;
    return this;
  }

  /**
   * The absolute url the post-event webhook request should be sent to.
   * @return postWebhookUrl
   */
  @javax.annotation.Nullable
  public URI getPostWebhookUrl() {
    return postWebhookUrl;
  }

  public void setPostWebhookUrl(URI postWebhookUrl) {
    this.postWebhookUrl = postWebhookUrl;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration preWebhookUrl(URI preWebhookUrl) {
    this.preWebhookUrl = preWebhookUrl;
    return this;
  }

  /**
   * The absolute url the pre-event webhook request should be sent to.
   * @return preWebhookUrl
   */
  @javax.annotation.Nullable
  public URI getPreWebhookUrl() {
    return preWebhookUrl;
  }

  public void setPreWebhookUrl(URI preWebhookUrl) {
    this.preWebhookUrl = preWebhookUrl;
  }


  public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * An absolute API resource URL for this webhook.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = (ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration) o;
    return Objects.equals(this.accountSid, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.accountSid) &&
        Objects.equals(this.chatServiceSid, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.chatServiceSid) &&
        Objects.equals(this.filters, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.filters) &&
        Objects.equals(this.method, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.method) &&
        Objects.equals(this.postWebhookUrl, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.postWebhookUrl) &&
        Objects.equals(this.preWebhookUrl, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.preWebhookUrl) &&
        Objects.equals(this.url, conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    chatServiceSid: ").append(toIndentedString(chatServiceSid)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    postWebhookUrl: ").append(toIndentedString(postWebhookUrl)).append("\n");
    sb.append("    preWebhookUrl: ").append(toIndentedString(preWebhookUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("chat_service_sid");
    openapiFields.add("filters");
    openapiFields.add("method");
    openapiFields.add("post_webhook_url");
    openapiFields.add("pre_webhook_url");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration is not found in the empty JSON string", ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("chat_service_sid") != null && !jsonObj.get("chat_service_sid").isJsonNull()) && !jsonObj.get("chat_service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_service_sid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        ServiceWebhookConfigurationEnumMethod.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("post_webhook_url") != null && !jsonObj.get("post_webhook_url").isJsonNull()) && !jsonObj.get("post_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_webhook_url").toString()));
      }
      if ((jsonObj.get("pre_webhook_url") != null && !jsonObj.get("pre_webhook_url").isJsonNull()) && !jsonObj.get("pre_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_webhook_url").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration>() {
           @Override
           public void write(JsonWriter out, ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
   * @throws IOException if the JSON string is invalid with respect to ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
   */
  public static ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class);
  }

  /**
   * Convert an instance of ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

