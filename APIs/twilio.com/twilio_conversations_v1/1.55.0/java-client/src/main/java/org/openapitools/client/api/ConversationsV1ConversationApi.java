/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationEnumState;
import org.openapitools.client.model.ConversationEnumWebhookEnabledType;
import org.openapitools.client.model.ConversationsV1Conversation;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversation;
import org.openapitools.client.model.ListConversationResponse;
import org.openapitools.client.model.ListServiceConversationResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ServiceConversationEnumState;
import org.openapitools.client.model.ServiceConversationEnumWebhookEnabledType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1ConversationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1ConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1ConversationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConversation
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationCall(ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (bindingsEmailAddress != null) {
            localVarFormParams.put("Bindings.Email.Address", bindingsEmailAddress);
        }

        if (bindingsEmailName != null) {
            localVarFormParams.put("Bindings.Email.Name", bindingsEmailName);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        if (state != null) {
            localVarFormParams.put("State", state);
        }

        if (timersClosed != null) {
            localVarFormParams.put("Timers.Closed", timersClosed);
        }

        if (timersInactive != null) {
            localVarFormParams.put("Timers.Inactive", timersInactive);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConversationValidateBeforeCall(ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        return createConversationCall(xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);

    }

    /**
     * 
     * Create a new conversation in your account&#39;s default service
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ConversationsV1Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1Conversation createConversation(ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        ApiResponse<ConversationsV1Conversation> localVarResp = createConversationWithHttpInfo(xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new conversation in your account&#39;s default service
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ApiResponse&lt;ConversationsV1Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1Conversation> createConversationWithHttpInfo(ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createConversationValidateBeforeCall(xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new conversation in your account&#39;s default service
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationAsync(ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback<ConversationsV1Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConversationValidateBeforeCall(xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createServiceConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationCall(String chatServiceSid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (bindingsEmailAddress != null) {
            localVarFormParams.put("Bindings.Email.Address", bindingsEmailAddress);
        }

        if (bindingsEmailName != null) {
            localVarFormParams.put("Bindings.Email.Name", bindingsEmailName);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        if (state != null) {
            localVarFormParams.put("State", state);
        }

        if (timersClosed != null) {
            localVarFormParams.put("Timers.Closed", timersClosed);
        }

        if (timersInactive != null) {
            localVarFormParams.put("Timers.Inactive", timersInactive);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceConversationValidateBeforeCall(String chatServiceSid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling createServiceConversation(Async)");
        }

        return createServiceConversationCall(chatServiceSid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);

    }

    /**
     * 
     * Create a new conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ConversationsV1ServiceServiceConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversation createServiceConversation(String chatServiceSid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversation> localVarResp = createServiceConversationWithHttpInfo(chatServiceSid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversation> createServiceConversationWithHttpInfo(String chatServiceSid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createServiceConversationValidateBeforeCall(chatServiceSid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationAsync(String chatServiceSid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback<ConversationsV1ServiceServiceConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceConversationValidateBeforeCall(chatServiceSid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConversation
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationCall(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConversationValidateBeforeCall(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConversation(Async)");
        }

        return deleteConversationCall(sid, xTwilioWebhookEnabled, _callback);

    }

    /**
     * 
     * Remove a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConversation(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        deleteConversationWithHttpInfo(sid, xTwilioWebhookEnabled);
    }

    /**
     * 
     * Remove a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConversationWithHttpInfo(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        okhttp3.Call localVarCall = deleteConversationValidateBeforeCall(sid, xTwilioWebhookEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationAsync(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConversationValidateBeforeCall(sid, xTwilioWebhookEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServiceConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationCall(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceConversationValidateBeforeCall(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteServiceConversation(Async)");
        }

        return deleteServiceConversationCall(chatServiceSid, sid, xTwilioWebhookEnabled, _callback);

    }

    /**
     * 
     * Remove a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServiceConversation(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        deleteServiceConversationWithHttpInfo(chatServiceSid, sid, xTwilioWebhookEnabled);
    }

    /**
     * 
     * Remove a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceConversationWithHttpInfo(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceConversationValidateBeforeCall(chatServiceSid, sid, xTwilioWebhookEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationAsync(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceConversationValidateBeforeCall(chatServiceSid, sid, xTwilioWebhookEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConversation
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConversationValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConversation(Async)");
        }

        return fetchConversationCall(sid, _callback);

    }

    /**
     * 
     * Fetch a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @return ConversationsV1Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1Conversation fetchConversation(String sid) throws ApiException {
        ApiResponse<ConversationsV1Conversation> localVarResp = fetchConversationWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @return ApiResponse&lt;ConversationsV1Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1Conversation> fetchConversationWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConversationValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a conversation from your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationAsync(String sid, final ApiCallback<ConversationsV1Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConversationValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchServiceConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationCall(String chatServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceConversationValidateBeforeCall(String chatServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchServiceConversation(Async)");
        }

        return fetchServiceConversationCall(chatServiceSid, sid, _callback);

    }

    /**
     * 
     * Fetch a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @return ConversationsV1ServiceServiceConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversation fetchServiceConversation(String chatServiceSid, String sid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversation> localVarResp = fetchServiceConversationWithHttpInfo(chatServiceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversation> fetchServiceConversationWithHttpInfo(String chatServiceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceConversationValidateBeforeCall(chatServiceSid, sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a conversation from your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationAsync(String chatServiceSid, String sid, final ApiCallback<ConversationsV1ServiceServiceConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceConversationValidateBeforeCall(chatServiceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConversation
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationCall(String startDate, String endDate, ConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("State", state));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationValidateBeforeCall(String startDate, String endDate, ConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listConversationCall(startDate, endDate, state, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of conversations in your account&#39;s default service
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConversationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationResponse listConversation(String startDate, String endDate, ConversationEnumState state, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConversationResponse> localVarResp = listConversationWithHttpInfo(startDate, endDate, state, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of conversations in your account&#39;s default service
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConversationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConversationResponse> listConversationWithHttpInfo(String startDate, String endDate, ConversationEnumState state, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConversationValidateBeforeCall(startDate, endDate, state, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of conversations in your account&#39;s default service
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationAsync(String startDate, String endDate, ConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationValidateBeforeCall(startDate, endDate, state, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationCall(String chatServiceSid, String startDate, String endDate, ServiceConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("State", state));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceConversationValidateBeforeCall(String chatServiceSid, String startDate, String endDate, ServiceConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling listServiceConversation(Async)");
        }

        return listServiceConversationCall(chatServiceSid, startDate, endDate, state, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of conversations in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceConversationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceConversationResponse listServiceConversation(String chatServiceSid, String startDate, String endDate, ServiceConversationEnumState state, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceConversationResponse> localVarResp = listServiceConversationWithHttpInfo(chatServiceSid, startDate, endDate, state, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of conversations in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceConversationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceConversationResponse> listServiceConversationWithHttpInfo(String chatServiceSid, String startDate, String endDate, ServiceConversationEnumState state, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceConversationValidateBeforeCall(chatServiceSid, startDate, endDate, state, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of conversations in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param startDate Start date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the start time of the date is used (YYYY-MM-DDT00:00:00Z). Can be combined with other filters. (optional)
     * @param endDate End date or time in ISO8601 format for filtering list of Conversations. If a date is provided, the end time of the date is used (YYYY-MM-DDT23:59:59Z). Can be combined with other filters. (optional)
     * @param state State for sorting and filtering list of Conversations. Can be &#x60;active&#x60;, &#x60;inactive&#x60; or &#x60;closed&#x60; (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationAsync(String chatServiceSid, String startDate, String endDate, ServiceConversationEnumState state, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceConversationValidateBeforeCall(chatServiceSid, startDate, endDate, state, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConversation
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationCall(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (bindingsEmailAddress != null) {
            localVarFormParams.put("Bindings.Email.Address", bindingsEmailAddress);
        }

        if (bindingsEmailName != null) {
            localVarFormParams.put("Bindings.Email.Name", bindingsEmailName);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        if (state != null) {
            localVarFormParams.put("State", state);
        }

        if (timersClosed != null) {
            localVarFormParams.put("Timers.Closed", timersClosed);
        }

        if (timersInactive != null) {
            localVarFormParams.put("Timers.Inactive", timersInactive);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationValidateBeforeCall(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConversation(Async)");
        }

        return updateConversationCall(sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);

    }

    /**
     * 
     * Update an existing conversation in your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ConversationsV1Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1Conversation updateConversation(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        ApiResponse<ConversationsV1Conversation> localVarResp = updateConversationWithHttpInfo(sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing conversation in your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ApiResponse&lt;ConversationsV1Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1Conversation> updateConversationWithHttpInfo(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateConversationValidateBeforeCall(sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing conversation in your account&#39;s default service
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationAsync(String sid, ConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback<ConversationsV1Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationValidateBeforeCall(sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceConversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationCall(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (bindingsEmailAddress != null) {
            localVarFormParams.put("Bindings.Email.Address", bindingsEmailAddress);
        }

        if (bindingsEmailName != null) {
            localVarFormParams.put("Bindings.Email.Name", bindingsEmailName);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        if (state != null) {
            localVarFormParams.put("State", state);
        }

        if (timersClosed != null) {
            localVarFormParams.put("Timers.Closed", timersClosed);
        }

        if (timersInactive != null) {
            localVarFormParams.put("Timers.Inactive", timersInactive);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceConversationValidateBeforeCall(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceConversation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateServiceConversation(Async)");
        }

        return updateServiceConversationCall(chatServiceSid, sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);

    }

    /**
     * 
     * Update an existing conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ConversationsV1ServiceServiceConversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversation updateServiceConversation(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversation> localVarResp = updateServiceConversationWithHttpInfo(chatServiceSid, sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversation> updateServiceConversationWithHttpInfo(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateServiceConversationValidateBeforeCall(chatServiceSid, sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing conversation in your service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Conversation resource is associated with. (required)
     * @param sid A 34 character string that uniquely identifies this resource. Can also be the &#x60;unique_name&#x60; of the Conversation. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param bindingsEmailAddress The default email address that will be used when sending outbound emails in this conversation. (optional)
     * @param bindingsEmailName The default name that will be used when sending outbound emails in this conversation. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. (optional)
     * @param friendlyName The human-readable name of this conversation, limited to 256 characters. Optional. (optional)
     * @param messagingServiceSid The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to. (optional)
     * @param state  (optional)
     * @param timersClosed ISO8601 duration when conversation will be switched to &#x60;closed&#x60; state. Minimum value for this timer is 10 minutes. (optional)
     * @param timersInactive ISO8601 duration when conversation will be switched to &#x60;inactive&#x60; state. Minimum value for this timer is 1 minute. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource&#39;s &#x60;sid&#x60; in the URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationAsync(String chatServiceSid, String sid, ServiceConversationEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String bindingsEmailAddress, String bindingsEmailName, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String friendlyName, String messagingServiceSid, ServiceConversationEnumState state, String timersClosed, String timersInactive, String uniqueName, final ApiCallback<ConversationsV1ServiceServiceConversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceConversationValidateBeforeCall(chatServiceSid, sid, xTwilioWebhookEnabled, attributes, bindingsEmailAddress, bindingsEmailName, dateCreated, dateUpdated, friendlyName, messagingServiceSid, state, timersClosed, timersInactive, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
