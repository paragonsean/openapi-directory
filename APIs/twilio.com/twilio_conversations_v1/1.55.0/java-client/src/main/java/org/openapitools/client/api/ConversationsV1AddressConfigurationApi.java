/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigurationAddressEnumAutoCreationType;
import org.openapitools.client.model.ConfigurationAddressEnumMethod;
import org.openapitools.client.model.ConfigurationAddressEnumType;
import org.openapitools.client.model.ConversationsV1ConfigurationAddress;
import org.openapitools.client.model.ListConfigurationAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1AddressConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1AddressConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1AddressConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConfigurationAddress
     * @param address The unique address to be configured. The address can be a whatsapp address or phone number (required)
     * @param type  (required)
     * @param addressCountry An ISO 3166-1 alpha-2n country code which the address belongs to. This is currently only applicable to short code addresses. (optional)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConfigurationAddressCall(String address, ConfigurationAddressEnumType type, String addressCountry, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarFormParams.put("Address", address);
        }

        if (addressCountry != null) {
            localVarFormParams.put("AddressCountry", addressCountry);
        }

        if (autoCreationConversationServiceSid != null) {
            localVarFormParams.put("AutoCreation.ConversationServiceSid", autoCreationConversationServiceSid);
        }

        if (autoCreationEnabled != null) {
            localVarFormParams.put("AutoCreation.Enabled", autoCreationEnabled);
        }

        if (autoCreationStudioFlowSid != null) {
            localVarFormParams.put("AutoCreation.StudioFlowSid", autoCreationStudioFlowSid);
        }

        if (autoCreationStudioRetryCount != null) {
            localVarFormParams.put("AutoCreation.StudioRetryCount", autoCreationStudioRetryCount);
        }

        if (autoCreationType != null) {
            localVarFormParams.put("AutoCreation.Type", autoCreationType);
        }

        if (autoCreationWebhookFilters != null) {
            localVarFormParams.put("AutoCreation.WebhookFilters", autoCreationWebhookFilters);
        }

        if (autoCreationWebhookMethod != null) {
            localVarFormParams.put("AutoCreation.WebhookMethod", autoCreationWebhookMethod);
        }

        if (autoCreationWebhookUrl != null) {
            localVarFormParams.put("AutoCreation.WebhookUrl", autoCreationWebhookUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConfigurationAddressValidateBeforeCall(String address, ConfigurationAddressEnumType type, String addressCountry, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling createConfigurationAddress(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createConfigurationAddress(Async)");
        }

        return createConfigurationAddressCall(address, type, addressCountry, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, _callback);

    }

    /**
     * 
     * Create a new address configuration
     * @param address The unique address to be configured. The address can be a whatsapp address or phone number (required)
     * @param type  (required)
     * @param addressCountry An ISO 3166-1 alpha-2n country code which the address belongs to. This is currently only applicable to short code addresses. (optional)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @return ConversationsV1ConfigurationAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConfigurationAddress createConfigurationAddress(String address, ConfigurationAddressEnumType type, String addressCountry, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName) throws ApiException {
        ApiResponse<ConversationsV1ConfigurationAddress> localVarResp = createConfigurationAddressWithHttpInfo(address, type, addressCountry, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new address configuration
     * @param address The unique address to be configured. The address can be a whatsapp address or phone number (required)
     * @param type  (required)
     * @param addressCountry An ISO 3166-1 alpha-2n country code which the address belongs to. This is currently only applicable to short code addresses. (optional)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @return ApiResponse&lt;ConversationsV1ConfigurationAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConfigurationAddress> createConfigurationAddressWithHttpInfo(String address, ConfigurationAddressEnumType type, String addressCountry, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationAddressValidateBeforeCall(address, type, addressCountry, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new address configuration
     * @param address The unique address to be configured. The address can be a whatsapp address or phone number (required)
     * @param type  (required)
     * @param addressCountry An ISO 3166-1 alpha-2n country code which the address belongs to. This is currently only applicable to short code addresses. (optional)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConfigurationAddressAsync(String address, ConfigurationAddressEnumType type, String addressCountry, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback<ConversationsV1ConfigurationAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConfigurationAddressValidateBeforeCall(address, type, addressCountry, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConfigurationAddress
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationAddressCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Addresses/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationAddressValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConfigurationAddress(Async)");
        }

        return deleteConfigurationAddressCall(sid, _callback);

    }

    /**
     * 
     * Remove an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConfigurationAddress(String sid) throws ApiException {
        deleteConfigurationAddressWithHttpInfo(sid);
    }

    /**
     * 
     * Remove an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConfigurationAddressWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationAddressValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationAddressAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationAddressValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConfigurationAddress
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConfigurationAddressCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Addresses/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConfigurationAddressValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConfigurationAddress(Async)");
        }

        return fetchConfigurationAddressCall(sid, _callback);

    }

    /**
     * 
     * Fetch an address configuration 
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @return ConversationsV1ConfigurationAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConfigurationAddress fetchConfigurationAddress(String sid) throws ApiException {
        ApiResponse<ConversationsV1ConfigurationAddress> localVarResp = fetchConfigurationAddressWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an address configuration 
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @return ApiResponse&lt;ConversationsV1ConfigurationAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConfigurationAddress> fetchConfigurationAddressWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConfigurationAddressValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an address configuration 
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConfigurationAddressAsync(String sid, final ApiCallback<ConversationsV1ConfigurationAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConfigurationAddressValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConfigurationAddress
     * @param type Filter the address configurations by its type. This value can be one of: &#x60;whatsapp&#x60;, &#x60;sms&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigurationAddressCall(String type, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigurationAddressValidateBeforeCall(String type, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listConfigurationAddressCall(type, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of address configurations for an account
     * @param type Filter the address configurations by its type. This value can be one of: &#x60;whatsapp&#x60;, &#x60;sms&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConfigurationAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConfigurationAddressResponse listConfigurationAddress(String type, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConfigurationAddressResponse> localVarResp = listConfigurationAddressWithHttpInfo(type, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of address configurations for an account
     * @param type Filter the address configurations by its type. This value can be one of: &#x60;whatsapp&#x60;, &#x60;sms&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConfigurationAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConfigurationAddressResponse> listConfigurationAddressWithHttpInfo(String type, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationAddressValidateBeforeCall(type, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConfigurationAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of address configurations for an account
     * @param type Filter the address configurations by its type. This value can be one of: &#x60;whatsapp&#x60;, &#x60;sms&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigurationAddressAsync(String type, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConfigurationAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationAddressValidateBeforeCall(type, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConfigurationAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigurationAddress
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationAddressCall(String sid, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Addresses/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoCreationConversationServiceSid != null) {
            localVarFormParams.put("AutoCreation.ConversationServiceSid", autoCreationConversationServiceSid);
        }

        if (autoCreationEnabled != null) {
            localVarFormParams.put("AutoCreation.Enabled", autoCreationEnabled);
        }

        if (autoCreationStudioFlowSid != null) {
            localVarFormParams.put("AutoCreation.StudioFlowSid", autoCreationStudioFlowSid);
        }

        if (autoCreationStudioRetryCount != null) {
            localVarFormParams.put("AutoCreation.StudioRetryCount", autoCreationStudioRetryCount);
        }

        if (autoCreationType != null) {
            localVarFormParams.put("AutoCreation.Type", autoCreationType);
        }

        if (autoCreationWebhookFilters != null) {
            localVarFormParams.put("AutoCreation.WebhookFilters", autoCreationWebhookFilters);
        }

        if (autoCreationWebhookMethod != null) {
            localVarFormParams.put("AutoCreation.WebhookMethod", autoCreationWebhookMethod);
        }

        if (autoCreationWebhookUrl != null) {
            localVarFormParams.put("AutoCreation.WebhookUrl", autoCreationWebhookUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationAddressValidateBeforeCall(String sid, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConfigurationAddress(Async)");
        }

        return updateConfigurationAddressCall(sid, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, _callback);

    }

    /**
     * 
     * Update an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @return ConversationsV1ConfigurationAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConfigurationAddress updateConfigurationAddress(String sid, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName) throws ApiException {
        ApiResponse<ConversationsV1ConfigurationAddress> localVarResp = updateConfigurationAddressWithHttpInfo(sid, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @return ApiResponse&lt;ConversationsV1ConfigurationAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConfigurationAddress> updateConfigurationAddressWithHttpInfo(String sid, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationAddressValidateBeforeCall(sid, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing address configuration
     * @param sid The SID of the Address Configuration resource. This value can be either the &#x60;sid&#x60; or the &#x60;address&#x60; of the configuration (required)
     * @param autoCreationConversationServiceSid Conversation Service for the auto-created conversation. If not set, the conversation is created in the default service. (optional)
     * @param autoCreationEnabled Enable/Disable auto-creating conversations for messages to this address (optional)
     * @param autoCreationStudioFlowSid For type &#x60;studio&#x60;, the studio flow SID where the webhook should be sent to. (optional)
     * @param autoCreationStudioRetryCount For type &#x60;studio&#x60;, number of times to retry the webhook request (optional)
     * @param autoCreationType  (optional)
     * @param autoCreationWebhookFilters The list of events, firing webhook event for this Conversation. Values can be any of the following: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationStateUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onDeliveryUpdated&#x60; (optional)
     * @param autoCreationWebhookMethod  (optional)
     * @param autoCreationWebhookUrl For type &#x60;webhook&#x60;, the url for the webhook request. (optional)
     * @param friendlyName The human-readable name of this configuration, limited to 256 characters. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationAddressAsync(String sid, String autoCreationConversationServiceSid, Boolean autoCreationEnabled, String autoCreationStudioFlowSid, Integer autoCreationStudioRetryCount, ConfigurationAddressEnumAutoCreationType autoCreationType, List<String> autoCreationWebhookFilters, ConfigurationAddressEnumMethod autoCreationWebhookMethod, String autoCreationWebhookUrl, String friendlyName, final ApiCallback<ConversationsV1ConfigurationAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationAddressValidateBeforeCall(sid, autoCreationConversationServiceSid, autoCreationEnabled, autoCreationStudioFlowSid, autoCreationStudioRetryCount, autoCreationType, autoCreationWebhookFilters, autoCreationWebhookMethod, autoCreationWebhookUrl, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
