/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigurationWebhookEnumTarget;
import org.openapitools.client.model.ConversationScopedWebhookEnumMethod;
import org.openapitools.client.model.ConversationScopedWebhookEnumTarget;
import org.openapitools.client.model.ConversationsV1ConfigurationConfigurationWebhook;
import org.openapitools.client.model.ConversationsV1ConversationConversationScopedWebhook;
import org.openapitools.client.model.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook;
import org.openapitools.client.model.ListConversationScopedWebhookResponse;
import org.openapitools.client.model.ListServiceConversationScopedWebhookResponse;
import org.openapitools.client.model.ServiceConversationScopedWebhookEnumMethod;
import org.openapitools.client.model.ServiceConversationScopedWebhookEnumTarget;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConversationScopedWebhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationScopedWebhookCall(String conversationSid, ConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Webhooks"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationReplayAfter != null) {
            localVarFormParams.put("Configuration.ReplayAfter", configurationReplayAfter);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConversationScopedWebhookValidateBeforeCall(String conversationSid, ConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling createConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling createConversationScopedWebhook(Async)");
        }

        return createConversationScopedWebhookCall(conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * Create a new webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ConversationsV1ConversationConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationScopedWebhook createConversationScopedWebhook(String conversationSid, ConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationScopedWebhook> localVarResp = createConversationScopedWebhookWithHttpInfo(conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationScopedWebhook> createConversationScopedWebhookWithHttpInfo(String conversationSid, ConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = createConversationScopedWebhookValidateBeforeCall(conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationScopedWebhookAsync(String conversationSid, ConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback<ConversationsV1ConversationConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConversationScopedWebhookValidateBeforeCall(conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createServiceConversationScopedWebhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationScopedWebhookCall(String chatServiceSid, String conversationSid, ServiceConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationReplayAfter != null) {
            localVarFormParams.put("Configuration.ReplayAfter", configurationReplayAfter);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceConversationScopedWebhookValidateBeforeCall(String chatServiceSid, String conversationSid, ServiceConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling createServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling createServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling createServiceConversationScopedWebhook(Async)");
        }

        return createServiceConversationScopedWebhookCall(chatServiceSid, conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * Create a new webhook scoped to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook createServiceConversationScopedWebhook(String chatServiceSid, String conversationSid, ServiceConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> localVarResp = createServiceConversationScopedWebhookWithHttpInfo(chatServiceSid, conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new webhook scoped to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> createServiceConversationScopedWebhookWithHttpInfo(String chatServiceSid, String conversationSid, ServiceConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = createServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new webhook scoped to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param target  (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationReplayAfter The message index for which and it&#39;s successors the webhook will be replayed. Not set by default (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationScopedWebhookAsync(String chatServiceSid, String conversationSid, ServiceConversationScopedWebhookEnumTarget target, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, Integer configurationReplayAfter, List<String> configurationTriggers, String configurationUrl, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, target, configurationFilters, configurationFlowSid, configurationMethod, configurationReplayAfter, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConversationScopedWebhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationScopedWebhookCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConversationScopedWebhookValidateBeforeCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConversationScopedWebhook(Async)");
        }

        return deleteConversationScopedWebhookCall(conversationSid, sid, _callback);

    }

    /**
     * 
     * Remove an existing webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConversationScopedWebhook(String conversationSid, String sid) throws ApiException {
        deleteConversationScopedWebhookWithHttpInfo(conversationSid, sid);
    }

    /**
     * 
     * Remove an existing webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConversationScopedWebhookWithHttpInfo(String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteConversationScopedWebhookValidateBeforeCall(conversationSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an existing webhook scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationScopedWebhookAsync(String conversationSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConversationScopedWebhookValidateBeforeCall(conversationSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServiceConversationScopedWebhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationScopedWebhookCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceConversationScopedWebhookValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteServiceConversationScopedWebhook(Async)");
        }

        return deleteServiceConversationScopedWebhookCall(chatServiceSid, conversationSid, sid, _callback);

    }

    /**
     * 
     * Remove an existing webhook scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServiceConversationScopedWebhook(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        deleteServiceConversationScopedWebhookWithHttpInfo(chatServiceSid, conversationSid, sid);
    }

    /**
     * 
     * Remove an existing webhook scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceConversationScopedWebhookWithHttpInfo(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an existing webhook scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationScopedWebhookAsync(String chatServiceSid, String conversationSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConfigurationWebhook
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConfigurationWebhookCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConfigurationWebhookValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return fetchConfigurationWebhookCall(_callback);

    }

    /**
     * 
     * 
     * @return ConversationsV1ConfigurationConfigurationWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConfigurationConfigurationWebhook fetchConfigurationWebhook() throws ApiException {
        ApiResponse<ConversationsV1ConfigurationConfigurationWebhook> localVarResp = fetchConfigurationWebhookWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ConversationsV1ConfigurationConfigurationWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConfigurationConfigurationWebhook> fetchConfigurationWebhookWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = fetchConfigurationWebhookValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationConfigurationWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConfigurationWebhookAsync(final ApiCallback<ConversationsV1ConfigurationConfigurationWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConfigurationWebhookValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationConfigurationWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConversationScopedWebhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationScopedWebhookCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConversationScopedWebhookValidateBeforeCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConversationScopedWebhook(Async)");
        }

        return fetchConversationScopedWebhookCall(conversationSid, sid, _callback);

    }

    /**
     * 
     * Fetch the configuration of a conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ConversationsV1ConversationConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationScopedWebhook fetchConversationScopedWebhook(String conversationSid, String sid) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationScopedWebhook> localVarResp = fetchConversationScopedWebhookWithHttpInfo(conversationSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the configuration of a conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationScopedWebhook> fetchConversationScopedWebhookWithHttpInfo(String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConversationScopedWebhookValidateBeforeCall(conversationSid, sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the configuration of a conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationScopedWebhookAsync(String conversationSid, String sid, final ApiCallback<ConversationsV1ConversationConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConversationScopedWebhookValidateBeforeCall(conversationSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchServiceConversationScopedWebhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationScopedWebhookCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceConversationScopedWebhookValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchServiceConversationScopedWebhook(Async)");
        }

        return fetchServiceConversationScopedWebhookCall(chatServiceSid, conversationSid, sid, _callback);

    }

    /**
     * 
     * Fetch the configuration of a conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook fetchServiceConversationScopedWebhook(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> localVarResp = fetchServiceConversationScopedWebhookWithHttpInfo(chatServiceSid, conversationSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the configuration of a conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> fetchServiceConversationScopedWebhookWithHttpInfo(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the configuration of a conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationScopedWebhookAsync(String chatServiceSid, String conversationSid, String sid, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchServiceWebhookConfiguration
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceWebhookConfigurationCall(String chatServiceSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Configuration/Webhooks"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceWebhookConfigurationValidateBeforeCall(String chatServiceSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceWebhookConfiguration(Async)");
        }

        return fetchServiceWebhookConfigurationCall(chatServiceSid, _callback);

    }

    /**
     * 
     * Fetch a specific service webhook configuration.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @return ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration fetchServiceWebhookConfiguration(String chatServiceSid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> localVarResp = fetchServiceWebhookConfigurationWithHttpInfo(chatServiceSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific service webhook configuration.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> fetchServiceWebhookConfigurationWithHttpInfo(String chatServiceSid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceWebhookConfigurationValidateBeforeCall(chatServiceSid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific service webhook configuration.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceWebhookConfigurationAsync(String chatServiceSid, final ApiCallback<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceWebhookConfigurationValidateBeforeCall(chatServiceSid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConversationScopedWebhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationScopedWebhookCall(String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Webhooks"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationScopedWebhookValidateBeforeCall(String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling listConversationScopedWebhook(Async)");
        }

        return listConversationScopedWebhookCall(conversationSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all webhooks scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConversationScopedWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationScopedWebhookResponse listConversationScopedWebhook(String conversationSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConversationScopedWebhookResponse> localVarResp = listConversationScopedWebhookWithHttpInfo(conversationSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all webhooks scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConversationScopedWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConversationScopedWebhookResponse> listConversationScopedWebhookWithHttpInfo(String conversationSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConversationScopedWebhookValidateBeforeCall(conversationSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConversationScopedWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all webhooks scoped to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationScopedWebhookAsync(String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConversationScopedWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationScopedWebhookValidateBeforeCall(conversationSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConversationScopedWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceConversationScopedWebhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationScopedWebhookCall(String chatServiceSid, String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceConversationScopedWebhookValidateBeforeCall(String chatServiceSid, String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling listServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling listServiceConversationScopedWebhook(Async)");
        }

        return listServiceConversationScopedWebhookCall(chatServiceSid, conversationSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all webhooks scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceConversationScopedWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceConversationScopedWebhookResponse listServiceConversationScopedWebhook(String chatServiceSid, String conversationSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceConversationScopedWebhookResponse> localVarResp = listServiceConversationScopedWebhookWithHttpInfo(chatServiceSid, conversationSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all webhooks scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceConversationScopedWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceConversationScopedWebhookResponse> listServiceConversationScopedWebhookWithHttpInfo(String chatServiceSid, String conversationSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceConversationScopedWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all webhooks scoped to the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationScopedWebhookAsync(String chatServiceSid, String conversationSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceConversationScopedWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceConversationScopedWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigurationWebhook
     * @param filters The list of webhook event triggers that are enabled for this Service: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60; (optional)
     * @param method The HTTP method to be used when sending a webhook request. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param target  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationWebhookCall(List<String> filters, String method, String postWebhookUrl, String preWebhookUrl, ConfigurationWebhookEnumTarget target, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Configuration/Webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarFormParams.put("Filters", filters);
        }

        if (method != null) {
            localVarFormParams.put("Method", method);
        }

        if (postWebhookUrl != null) {
            localVarFormParams.put("PostWebhookUrl", postWebhookUrl);
        }

        if (preWebhookUrl != null) {
            localVarFormParams.put("PreWebhookUrl", preWebhookUrl);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationWebhookValidateBeforeCall(List<String> filters, String method, String postWebhookUrl, String preWebhookUrl, ConfigurationWebhookEnumTarget target, final ApiCallback _callback) throws ApiException {
        return updateConfigurationWebhookCall(filters, method, postWebhookUrl, preWebhookUrl, target, _callback);

    }

    /**
     * 
     * 
     * @param filters The list of webhook event triggers that are enabled for this Service: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60; (optional)
     * @param method The HTTP method to be used when sending a webhook request. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param target  (optional)
     * @return ConversationsV1ConfigurationConfigurationWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConfigurationConfigurationWebhook updateConfigurationWebhook(List<String> filters, String method, String postWebhookUrl, String preWebhookUrl, ConfigurationWebhookEnumTarget target) throws ApiException {
        ApiResponse<ConversationsV1ConfigurationConfigurationWebhook> localVarResp = updateConfigurationWebhookWithHttpInfo(filters, method, postWebhookUrl, preWebhookUrl, target);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param filters The list of webhook event triggers that are enabled for this Service: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60; (optional)
     * @param method The HTTP method to be used when sending a webhook request. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param target  (optional)
     * @return ApiResponse&lt;ConversationsV1ConfigurationConfigurationWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConfigurationConfigurationWebhook> updateConfigurationWebhookWithHttpInfo(List<String> filters, String method, String postWebhookUrl, String preWebhookUrl, ConfigurationWebhookEnumTarget target) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationWebhookValidateBeforeCall(filters, method, postWebhookUrl, preWebhookUrl, target, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationConfigurationWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param filters The list of webhook event triggers that are enabled for this Service: &#x60;onMessageAdded&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onParticipantRemoved&#x60; (optional)
     * @param method The HTTP method to be used when sending a webhook request. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param target  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationWebhookAsync(List<String> filters, String method, String postWebhookUrl, String preWebhookUrl, ConfigurationWebhookEnumTarget target, final ApiCallback<ConversationsV1ConfigurationConfigurationWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationWebhookValidateBeforeCall(filters, method, postWebhookUrl, preWebhookUrl, target, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConfigurationConfigurationWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConversationScopedWebhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationScopedWebhookCall(String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationScopedWebhookValidateBeforeCall(String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConversationScopedWebhook(Async)");
        }

        return updateConversationScopedWebhookCall(conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * Update an existing conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ConversationsV1ConversationConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationScopedWebhook updateConversationScopedWebhook(String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationScopedWebhook> localVarResp = updateConversationScopedWebhookWithHttpInfo(conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationScopedWebhook> updateConversationScopedWebhookWithHttpInfo(String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = updateConversationScopedWebhookValidateBeforeCall(conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing conversation-scoped webhook
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationScopedWebhookAsync(String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback<ConversationsV1ConversationConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationScopedWebhookValidateBeforeCall(conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceConversationScopedWebhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationScopedWebhookCall(String chatServiceSid, String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceConversationScopedWebhookValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateServiceConversationScopedWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateServiceConversationScopedWebhook(Async)");
        }

        return updateServiceConversationScopedWebhookCall(chatServiceSid, conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * Update an existing conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook updateServiceConversationScopedWebhook(String chatServiceSid, String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> localVarResp = updateServiceConversationScopedWebhookWithHttpInfo(chatServiceSid, conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> updateServiceConversationScopedWebhookWithHttpInfo(String chatServiceSid, String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = updateServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing conversation-scoped webhook
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this webhook. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param configurationFilters The list of events, firing webhook event for this Conversation. (optional)
     * @param configurationFlowSid The studio flow SID, where the webhook should be sent to. (optional)
     * @param configurationMethod  (optional)
     * @param configurationTriggers The list of keywords, firing webhook event for this Conversation. (optional)
     * @param configurationUrl The absolute url the webhook request should be sent to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationScopedWebhookAsync(String chatServiceSid, String conversationSid, String sid, List<String> configurationFilters, String configurationFlowSid, ServiceConversationScopedWebhookEnumMethod configurationMethod, List<String> configurationTriggers, String configurationUrl, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceConversationScopedWebhookValidateBeforeCall(chatServiceSid, conversationSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceWebhookConfiguration
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param filters The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are &#x60;onParticipantAdd&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onDeliveryUpdated&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemove&#x60;, &#x60;onParticipantRemove&#x60;, &#x60;onConversationUpdate&#x60;, &#x60;onMessageAdd&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onConversationAdded&#x60;, &#x60;onMessageAdded&#x60;, &#x60;onConversationAdd&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantUpdate&#x60;, &#x60;onMessageRemove&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onMessageUpdate&#x60; or &#x60;onConversationStateUpdated&#x60;. (optional)
     * @param method The HTTP method to be used when sending a webhook request. One of &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceWebhookConfigurationCall(String chatServiceSid, List<String> filters, String method, URI postWebhookUrl, URI preWebhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Configuration/Webhooks"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarFormParams.put("Filters", filters);
        }

        if (method != null) {
            localVarFormParams.put("Method", method);
        }

        if (postWebhookUrl != null) {
            localVarFormParams.put("PostWebhookUrl", postWebhookUrl);
        }

        if (preWebhookUrl != null) {
            localVarFormParams.put("PreWebhookUrl", preWebhookUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceWebhookConfigurationValidateBeforeCall(String chatServiceSid, List<String> filters, String method, URI postWebhookUrl, URI preWebhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceWebhookConfiguration(Async)");
        }

        return updateServiceWebhookConfigurationCall(chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl, _callback);

    }

    /**
     * 
     * Update a specific Webhook.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param filters The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are &#x60;onParticipantAdd&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onDeliveryUpdated&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemove&#x60;, &#x60;onParticipantRemove&#x60;, &#x60;onConversationUpdate&#x60;, &#x60;onMessageAdd&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onConversationAdded&#x60;, &#x60;onMessageAdded&#x60;, &#x60;onConversationAdd&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantUpdate&#x60;, &#x60;onMessageRemove&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onMessageUpdate&#x60; or &#x60;onConversationStateUpdated&#x60;. (optional)
     * @param method The HTTP method to be used when sending a webhook request. One of &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @return ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration updateServiceWebhookConfiguration(String chatServiceSid, List<String> filters, String method, URI postWebhookUrl, URI preWebhookUrl) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> localVarResp = updateServiceWebhookConfigurationWithHttpInfo(chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a specific Webhook.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param filters The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are &#x60;onParticipantAdd&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onDeliveryUpdated&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemove&#x60;, &#x60;onParticipantRemove&#x60;, &#x60;onConversationUpdate&#x60;, &#x60;onMessageAdd&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onConversationAdded&#x60;, &#x60;onMessageAdded&#x60;, &#x60;onConversationAdd&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantUpdate&#x60;, &#x60;onMessageRemove&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onMessageUpdate&#x60; or &#x60;onConversationStateUpdated&#x60;. (optional)
     * @param method The HTTP method to be used when sending a webhook request. One of &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> updateServiceWebhookConfigurationWithHttpInfo(String chatServiceSid, List<String> filters, String method, URI postWebhookUrl, URI preWebhookUrl) throws ApiException {
        okhttp3.Call localVarCall = updateServiceWebhookConfigurationValidateBeforeCall(chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a specific Webhook.
     * @param chatServiceSid The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to. (required)
     * @param filters The list of events that your configured webhook targets will receive. Events not configured here will not fire. Possible values are &#x60;onParticipantAdd&#x60;, &#x60;onParticipantAdded&#x60;, &#x60;onDeliveryUpdated&#x60;, &#x60;onConversationUpdated&#x60;, &#x60;onConversationRemove&#x60;, &#x60;onParticipantRemove&#x60;, &#x60;onConversationUpdate&#x60;, &#x60;onMessageAdd&#x60;, &#x60;onMessageRemoved&#x60;, &#x60;onParticipantUpdated&#x60;, &#x60;onConversationAdded&#x60;, &#x60;onMessageAdded&#x60;, &#x60;onConversationAdd&#x60;, &#x60;onConversationRemoved&#x60;, &#x60;onParticipantUpdate&#x60;, &#x60;onMessageRemove&#x60;, &#x60;onMessageUpdated&#x60;, &#x60;onParticipantRemoved&#x60;, &#x60;onMessageUpdate&#x60; or &#x60;onConversationStateUpdated&#x60;. (optional)
     * @param method The HTTP method to be used when sending a webhook request. One of &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param postWebhookUrl The absolute url the post-event webhook request should be sent to. (optional)
     * @param preWebhookUrl The absolute url the pre-event webhook request should be sent to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceWebhookConfigurationAsync(String chatServiceSid, List<String> filters, String method, URI postWebhookUrl, URI preWebhookUrl, final ApiCallback<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceWebhookConfigurationValidateBeforeCall(chatServiceSid, filters, method, postWebhookUrl, preWebhookUrl, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
