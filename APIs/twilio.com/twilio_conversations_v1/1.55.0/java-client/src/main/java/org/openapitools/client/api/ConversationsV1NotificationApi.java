/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationsV1ServiceServiceConfigurationServiceNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1NotificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1NotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchServiceNotification
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceNotificationCall(String chatServiceSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Configuration/Notifications"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceNotificationValidateBeforeCall(String chatServiceSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceNotification(Async)");
        }

        return fetchServiceNotificationCall(chatServiceSid, _callback);

    }

    /**
     * 
     * Fetch push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @return ConversationsV1ServiceServiceConfigurationServiceNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConfigurationServiceNotification fetchServiceNotification(String chatServiceSid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConfigurationServiceNotification> localVarResp = fetchServiceNotificationWithHttpInfo(chatServiceSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConfigurationServiceNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConfigurationServiceNotification> fetchServiceNotificationWithHttpInfo(String chatServiceSid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceNotificationValidateBeforeCall(chatServiceSid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceNotificationAsync(String chatServiceSid, final ApiCallback<ConversationsV1ServiceServiceConfigurationServiceNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceNotificationValidateBeforeCall(chatServiceSid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceNotification
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param addedToConversationEnabled Whether to send a notification when a participant is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param addedToConversationSound The name of the sound to play when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param addedToConversationTemplate The template to use to create the notification text displayed when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param logEnabled Weather the notification logging is enabled. (optional)
     * @param newMessageBadgeCountEnabled Whether the new message badge is enabled. The default is &#x60;false&#x60;. (optional)
     * @param newMessageEnabled Whether to send a notification when a new message is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageSound The name of the sound to play when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageTemplate The template to use to create the notification text displayed when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageWithMediaEnabled Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageWithMediaTemplate The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and &#x60;new_message.attachments.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationEnabled Whether to send a notification to a user when they are removed from a conversation. The default is &#x60;false&#x60;. (optional)
     * @param removedFromConversationSound The name of the sound to play to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationTemplate The template to use to create the notification text displayed to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceNotificationCall(String chatServiceSid, Boolean addedToConversationEnabled, String addedToConversationSound, String addedToConversationTemplate, Boolean logEnabled, Boolean newMessageBadgeCountEnabled, Boolean newMessageEnabled, String newMessageSound, String newMessageTemplate, Boolean newMessageWithMediaEnabled, String newMessageWithMediaTemplate, Boolean removedFromConversationEnabled, String removedFromConversationSound, String removedFromConversationTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Configuration/Notifications"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedToConversationEnabled != null) {
            localVarFormParams.put("AddedToConversation.Enabled", addedToConversationEnabled);
        }

        if (addedToConversationSound != null) {
            localVarFormParams.put("AddedToConversation.Sound", addedToConversationSound);
        }

        if (addedToConversationTemplate != null) {
            localVarFormParams.put("AddedToConversation.Template", addedToConversationTemplate);
        }

        if (logEnabled != null) {
            localVarFormParams.put("LogEnabled", logEnabled);
        }

        if (newMessageBadgeCountEnabled != null) {
            localVarFormParams.put("NewMessage.BadgeCountEnabled", newMessageBadgeCountEnabled);
        }

        if (newMessageEnabled != null) {
            localVarFormParams.put("NewMessage.Enabled", newMessageEnabled);
        }

        if (newMessageSound != null) {
            localVarFormParams.put("NewMessage.Sound", newMessageSound);
        }

        if (newMessageTemplate != null) {
            localVarFormParams.put("NewMessage.Template", newMessageTemplate);
        }

        if (newMessageWithMediaEnabled != null) {
            localVarFormParams.put("NewMessage.WithMedia.Enabled", newMessageWithMediaEnabled);
        }

        if (newMessageWithMediaTemplate != null) {
            localVarFormParams.put("NewMessage.WithMedia.Template", newMessageWithMediaTemplate);
        }

        if (removedFromConversationEnabled != null) {
            localVarFormParams.put("RemovedFromConversation.Enabled", removedFromConversationEnabled);
        }

        if (removedFromConversationSound != null) {
            localVarFormParams.put("RemovedFromConversation.Sound", removedFromConversationSound);
        }

        if (removedFromConversationTemplate != null) {
            localVarFormParams.put("RemovedFromConversation.Template", removedFromConversationTemplate);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceNotificationValidateBeforeCall(String chatServiceSid, Boolean addedToConversationEnabled, String addedToConversationSound, String addedToConversationTemplate, Boolean logEnabled, Boolean newMessageBadgeCountEnabled, Boolean newMessageEnabled, String newMessageSound, String newMessageTemplate, Boolean newMessageWithMediaEnabled, String newMessageWithMediaTemplate, Boolean removedFromConversationEnabled, String removedFromConversationSound, String removedFromConversationTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceNotification(Async)");
        }

        return updateServiceNotificationCall(chatServiceSid, addedToConversationEnabled, addedToConversationSound, addedToConversationTemplate, logEnabled, newMessageBadgeCountEnabled, newMessageEnabled, newMessageSound, newMessageTemplate, newMessageWithMediaEnabled, newMessageWithMediaTemplate, removedFromConversationEnabled, removedFromConversationSound, removedFromConversationTemplate, _callback);

    }

    /**
     * 
     * Update push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param addedToConversationEnabled Whether to send a notification when a participant is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param addedToConversationSound The name of the sound to play when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param addedToConversationTemplate The template to use to create the notification text displayed when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param logEnabled Weather the notification logging is enabled. (optional)
     * @param newMessageBadgeCountEnabled Whether the new message badge is enabled. The default is &#x60;false&#x60;. (optional)
     * @param newMessageEnabled Whether to send a notification when a new message is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageSound The name of the sound to play when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageTemplate The template to use to create the notification text displayed when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageWithMediaEnabled Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageWithMediaTemplate The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and &#x60;new_message.attachments.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationEnabled Whether to send a notification to a user when they are removed from a conversation. The default is &#x60;false&#x60;. (optional)
     * @param removedFromConversationSound The name of the sound to play to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationTemplate The template to use to create the notification text displayed to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @return ConversationsV1ServiceServiceConfigurationServiceNotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConfigurationServiceNotification updateServiceNotification(String chatServiceSid, Boolean addedToConversationEnabled, String addedToConversationSound, String addedToConversationTemplate, Boolean logEnabled, Boolean newMessageBadgeCountEnabled, Boolean newMessageEnabled, String newMessageSound, String newMessageTemplate, Boolean newMessageWithMediaEnabled, String newMessageWithMediaTemplate, Boolean removedFromConversationEnabled, String removedFromConversationSound, String removedFromConversationTemplate) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConfigurationServiceNotification> localVarResp = updateServiceNotificationWithHttpInfo(chatServiceSid, addedToConversationEnabled, addedToConversationSound, addedToConversationTemplate, logEnabled, newMessageBadgeCountEnabled, newMessageEnabled, newMessageSound, newMessageTemplate, newMessageWithMediaEnabled, newMessageWithMediaTemplate, removedFromConversationEnabled, removedFromConversationSound, removedFromConversationTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param addedToConversationEnabled Whether to send a notification when a participant is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param addedToConversationSound The name of the sound to play when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param addedToConversationTemplate The template to use to create the notification text displayed when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param logEnabled Weather the notification logging is enabled. (optional)
     * @param newMessageBadgeCountEnabled Whether the new message badge is enabled. The default is &#x60;false&#x60;. (optional)
     * @param newMessageEnabled Whether to send a notification when a new message is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageSound The name of the sound to play when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageTemplate The template to use to create the notification text displayed when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageWithMediaEnabled Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageWithMediaTemplate The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and &#x60;new_message.attachments.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationEnabled Whether to send a notification to a user when they are removed from a conversation. The default is &#x60;false&#x60;. (optional)
     * @param removedFromConversationSound The name of the sound to play to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationTemplate The template to use to create the notification text displayed to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConfigurationServiceNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConfigurationServiceNotification> updateServiceNotificationWithHttpInfo(String chatServiceSid, Boolean addedToConversationEnabled, String addedToConversationSound, String addedToConversationTemplate, Boolean logEnabled, Boolean newMessageBadgeCountEnabled, Boolean newMessageEnabled, String newMessageSound, String newMessageTemplate, Boolean newMessageWithMediaEnabled, String newMessageWithMediaTemplate, Boolean removedFromConversationEnabled, String removedFromConversationSound, String removedFromConversationTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateServiceNotificationValidateBeforeCall(chatServiceSid, addedToConversationEnabled, addedToConversationSound, addedToConversationTemplate, logEnabled, newMessageBadgeCountEnabled, newMessageEnabled, newMessageSound, newMessageTemplate, newMessageWithMediaEnabled, newMessageWithMediaTemplate, removedFromConversationEnabled, removedFromConversationSound, removedFromConversationTemplate, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceNotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update push notification service settings
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to. (required)
     * @param addedToConversationEnabled Whether to send a notification when a participant is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param addedToConversationSound The name of the sound to play when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param addedToConversationTemplate The template to use to create the notification text displayed when a participant is added to a conversation and &#x60;added_to_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param logEnabled Weather the notification logging is enabled. (optional)
     * @param newMessageBadgeCountEnabled Whether the new message badge is enabled. The default is &#x60;false&#x60;. (optional)
     * @param newMessageEnabled Whether to send a notification when a new message is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageSound The name of the sound to play when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageTemplate The template to use to create the notification text displayed when a new message is added to a conversation and &#x60;new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param newMessageWithMediaEnabled Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is &#x60;false&#x60;. (optional)
     * @param newMessageWithMediaTemplate The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and &#x60;new_message.attachments.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationEnabled Whether to send a notification to a user when they are removed from a conversation. The default is &#x60;false&#x60;. (optional)
     * @param removedFromConversationSound The name of the sound to play to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param removedFromConversationTemplate The template to use to create the notification text displayed to a user when they are removed from a conversation and &#x60;removed_from_conversation.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceNotificationAsync(String chatServiceSid, Boolean addedToConversationEnabled, String addedToConversationSound, String addedToConversationTemplate, Boolean logEnabled, Boolean newMessageBadgeCountEnabled, Boolean newMessageEnabled, String newMessageSound, String newMessageTemplate, Boolean newMessageWithMediaEnabled, String newMessageWithMediaTemplate, Boolean removedFromConversationEnabled, String removedFromConversationSound, String removedFromConversationTemplate, final ApiCallback<ConversationsV1ServiceServiceConfigurationServiceNotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceNotificationValidateBeforeCall(chatServiceSid, addedToConversationEnabled, addedToConversationSound, addedToConversationTemplate, logEnabled, newMessageBadgeCountEnabled, newMessageEnabled, newMessageSound, newMessageTemplate, newMessageWithMediaEnabled, newMessageWithMediaTemplate, removedFromConversationEnabled, removedFromConversationSound, removedFromConversationTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConfigurationServiceNotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
