/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationMessageEnumOrderType;
import org.openapitools.client.model.ConversationMessageEnumWebhookEnabledType;
import org.openapitools.client.model.ConversationsV1ConversationConversationMessage;
import org.openapitools.client.model.ConversationsV1ServiceServiceConversationServiceConversationMessage;
import org.openapitools.client.model.ListConversationMessageResponse;
import org.openapitools.client.model.ListServiceConversationMessageResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ServiceConversationMessageEnumOrderType;
import org.openapitools.client.model.ServiceConversationMessageEnumWebhookEnabledType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsV1MessageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsV1MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsV1MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConversationMessage
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationMessageCall(String conversationSid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Messages"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (author != null) {
            localVarFormParams.put("Author", author);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        if (contentSid != null) {
            localVarFormParams.put("ContentSid", contentSid);
        }

        if (contentVariables != null) {
            localVarFormParams.put("ContentVariables", contentVariables);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (mediaSid != null) {
            localVarFormParams.put("MediaSid", mediaSid);
        }

        if (subject != null) {
            localVarFormParams.put("Subject", subject);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConversationMessageValidateBeforeCall(String conversationSid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling createConversationMessage(Async)");
        }

        return createConversationMessageCall(conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, _callback);

    }

    /**
     * 
     * Add a new message to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ConversationsV1ConversationConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationMessage createConversationMessage(String conversationSid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationMessage> localVarResp = createConversationMessageWithHttpInfo(conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new message to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationMessage> createConversationMessageWithHttpInfo(String conversationSid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject) throws ApiException {
        okhttp3.Call localVarCall = createConversationMessageValidateBeforeCall(conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new message to the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConversationMessageAsync(String conversationSid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback<ConversationsV1ConversationConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConversationMessageValidateBeforeCall(conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createServiceConversationMessage
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationMessageCall(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (author != null) {
            localVarFormParams.put("Author", author);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        if (contentSid != null) {
            localVarFormParams.put("ContentSid", contentSid);
        }

        if (contentVariables != null) {
            localVarFormParams.put("ContentVariables", contentVariables);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (mediaSid != null) {
            localVarFormParams.put("MediaSid", mediaSid);
        }

        if (subject != null) {
            localVarFormParams.put("Subject", subject);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceConversationMessageValidateBeforeCall(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling createServiceConversationMessage(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling createServiceConversationMessage(Async)");
        }

        return createServiceConversationMessageCall(chatServiceSid, conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, _callback);

    }

    /**
     * 
     * Add a new message to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ConversationsV1ServiceServiceConversationServiceConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationMessage createServiceConversationMessage(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> localVarResp = createServiceConversationMessageWithHttpInfo(chatServiceSid, conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new message to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> createServiceConversationMessageWithHttpInfo(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject) throws ApiException {
        okhttp3.Call localVarCall = createServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new message to the conversation in a specific service
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param contentSid The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template, required for template-generated messages.  **Note** that if this field is set, &#x60;Body&#x60; and &#x60;MediaSid&#x60; parameters are ignored. (optional)
     * @param contentVariables A structurally valid JSON string that contains values to resolve Rich Content template variables. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param mediaSid The Media SID to be attached to the new Message. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceConversationMessageAsync(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, String contentSid, String contentVariables, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String mediaSid, String subject, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, xTwilioWebhookEnabled, attributes, author, body, contentSid, contentVariables, dateCreated, dateUpdated, mediaSid, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConversationMessage
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationMessageCall(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConversationMessageValidateBeforeCall(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConversationMessage(Async)");
        }

        return deleteConversationMessageCall(conversationSid, sid, xTwilioWebhookEnabled, _callback);

    }

    /**
     * 
     * Remove a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConversationMessage(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        deleteConversationMessageWithHttpInfo(conversationSid, sid, xTwilioWebhookEnabled);
    }

    /**
     * 
     * Remove a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConversationMessageWithHttpInfo(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        okhttp3.Call localVarCall = deleteConversationMessageValidateBeforeCall(conversationSid, sid, xTwilioWebhookEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConversationMessageAsync(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConversationMessageValidateBeforeCall(conversationSid, sid, xTwilioWebhookEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServiceConversationMessage
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationMessageCall(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceConversationMessageValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling deleteServiceConversationMessage(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling deleteServiceConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteServiceConversationMessage(Async)");
        }

        return deleteServiceConversationMessageCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, _callback);

    }

    /**
     * 
     * Remove a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServiceConversationMessage(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        deleteServiceConversationMessageWithHttpInfo(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled);
    }

    /**
     * 
     * Remove a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceConversationMessageWithHttpInfo(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceConversationMessageAsync(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConversationMessage
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationMessageCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConversationMessageValidateBeforeCall(String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConversationMessage(Async)");
        }

        return fetchConversationMessageCall(conversationSid, sid, _callback);

    }

    /**
     * 
     * Fetch a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ConversationsV1ConversationConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationMessage fetchConversationMessage(String conversationSid, String sid) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationMessage> localVarResp = fetchConversationMessageWithHttpInfo(conversationSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationMessage> fetchConversationMessageWithHttpInfo(String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConversationMessageValidateBeforeCall(conversationSid, sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a message from the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConversationMessageAsync(String conversationSid, String sid, final ApiCallback<ConversationsV1ConversationConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConversationMessageValidateBeforeCall(conversationSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchServiceConversationMessage
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationMessageCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceConversationMessageValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling fetchServiceConversationMessage(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling fetchServiceConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchServiceConversationMessage(Async)");
        }

        return fetchServiceConversationMessageCall(chatServiceSid, conversationSid, sid, _callback);

    }

    /**
     * 
     * Fetch a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ConversationsV1ServiceServiceConversationServiceConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationMessage fetchServiceConversationMessage(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> localVarResp = fetchServiceConversationMessageWithHttpInfo(chatServiceSid, conversationSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> fetchServiceConversationMessageWithHttpInfo(String chatServiceSid, String conversationSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a message from the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceConversationMessageAsync(String chatServiceSid, String conversationSid, String sid, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConversationMessage
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationMessageCall(String conversationSid, ConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Messages"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationMessageValidateBeforeCall(String conversationSid, ConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling listConversationMessage(Async)");
        }

        return listConversationMessageCall(conversationSid, order, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all messages in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConversationMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationMessageResponse listConversationMessage(String conversationSid, ConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConversationMessageResponse> localVarResp = listConversationMessageWithHttpInfo(conversationSid, order, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all messages in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConversationMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConversationMessageResponse> listConversationMessageWithHttpInfo(String conversationSid, ConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConversationMessageValidateBeforeCall(conversationSid, order, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConversationMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all messages in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConversationMessageAsync(String conversationSid, ConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConversationMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationMessageValidateBeforeCall(conversationSid, order, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConversationMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServiceConversationMessage
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationMessageCall(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceConversationMessageValidateBeforeCall(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling listServiceConversationMessage(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling listServiceConversationMessage(Async)");
        }

        return listServiceConversationMessageCall(chatServiceSid, conversationSid, order, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all messages in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceConversationMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceConversationMessageResponse listServiceConversationMessage(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceConversationMessageResponse> localVarResp = listServiceConversationMessageWithHttpInfo(chatServiceSid, conversationSid, order, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all messages in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceConversationMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceConversationMessageResponse> listServiceConversationMessageWithHttpInfo(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, order, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceConversationMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all messages in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for messages. (required)
     * @param order The sort order of the returned messages. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending), with &#x60;asc&#x60; as the default. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceConversationMessageAsync(String chatServiceSid, String conversationSid, ServiceConversationMessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceConversationMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, order, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceConversationMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConversationMessage
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationMessageCall(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (author != null) {
            localVarFormParams.put("Author", author);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (subject != null) {
            localVarFormParams.put("Subject", subject);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationMessageValidateBeforeCall(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConversationMessage(Async)");
        }

        return updateConversationMessageCall(conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, _callback);

    }

    /**
     * 
     * Update an existing message in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ConversationsV1ConversationConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ConversationConversationMessage updateConversationMessage(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject) throws ApiException {
        ApiResponse<ConversationsV1ConversationConversationMessage> localVarResp = updateConversationMessageWithHttpInfo(conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing message in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ApiResponse&lt;ConversationsV1ConversationConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ConversationConversationMessage> updateConversationMessageWithHttpInfo(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject) throws ApiException {
        okhttp3.Call localVarCall = updateConversationMessageValidateBeforeCall(conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing message in the conversation
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationMessageAsync(String conversationSid, String sid, ConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback<ConversationsV1ConversationConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationMessageValidateBeforeCall(conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ConversationConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServiceConversationMessage
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationMessageCall(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://conversations.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}"
            .replace("{" + "ChatServiceSid" + "}", localVarApiClient.escapeString(chatServiceSid.toString()))
            .replace("{" + "ConversationSid" + "}", localVarApiClient.escapeString(conversationSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (author != null) {
            localVarFormParams.put("Author", author);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        if (dateCreated != null) {
            localVarFormParams.put("DateCreated", dateCreated);
        }

        if (dateUpdated != null) {
            localVarFormParams.put("DateUpdated", dateUpdated);
        }

        if (subject != null) {
            localVarFormParams.put("Subject", subject);
        }

        if (xTwilioWebhookEnabled != null) {
            localVarHeaderParams.put("X-Twilio-Webhook-Enabled", localVarApiClient.parameterToString(xTwilioWebhookEnabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceConversationMessageValidateBeforeCall(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling updateServiceConversationMessage(Async)");
        }

        // verify the required parameter 'conversationSid' is set
        if (conversationSid == null) {
            throw new ApiException("Missing the required parameter 'conversationSid' when calling updateServiceConversationMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateServiceConversationMessage(Async)");
        }

        return updateServiceConversationMessageCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, _callback);

    }

    /**
     * 
     * Update an existing message in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ConversationsV1ServiceServiceConversationServiceConversationMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsV1ServiceServiceConversationServiceConversationMessage updateServiceConversationMessage(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject) throws ApiException {
        ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> localVarResp = updateServiceConversationMessageWithHttpInfo(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing message in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @return ApiResponse&lt;ConversationsV1ServiceServiceConversationServiceConversationMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsV1ServiceServiceConversationServiceConversationMessage> updateServiceConversationMessageWithHttpInfo(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject) throws ApiException {
        okhttp3.Call localVarCall = updateServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, null);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing message in the conversation
     * @param chatServiceSid The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Participant resource is associated with. (required)
     * @param conversationSid The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message. (required)
     * @param sid A 34 character string that uniquely identifies this resource. (required)
     * @param xTwilioWebhookEnabled The X-Twilio-Webhook-Enabled HTTP request header (optional)
     * @param attributes A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \\\&quot;{}\\\&quot; will be returned. (optional)
     * @param author The channel specific identifier of the message&#39;s author. Defaults to &#x60;system&#x60;. (optional)
     * @param body The content of the message, can be up to 1,600 characters long. (optional)
     * @param dateCreated The date that this resource was created. (optional)
     * @param dateUpdated The date that this resource was last updated. &#x60;null&#x60; if the message has not been edited. (optional)
     * @param subject The subject of the message, can be up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceConversationMessageAsync(String chatServiceSid, String conversationSid, String sid, ServiceConversationMessageEnumWebhookEnabledType xTwilioWebhookEnabled, String attributes, String author, String body, OffsetDateTime dateCreated, OffsetDateTime dateUpdated, String subject, final ApiCallback<ConversationsV1ServiceServiceConversationServiceConversationMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceConversationMessageValidateBeforeCall(chatServiceSid, conversationSid, sid, xTwilioWebhookEnabled, attributes, author, body, dateCreated, dateUpdated, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationsV1ServiceServiceConversationServiceConversationMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
