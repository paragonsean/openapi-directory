/*
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceUserConversationEnumNotificationLevel;
import org.openapitools.client.model.ServiceUserConversationEnumState;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationsV1ServiceServiceUserServiceUserConversation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:18.448958-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationsV1ServiceServiceUserServiceUserConversation {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private String attributes;

  public static final String SERIALIZED_NAME_CHAT_SERVICE_SID = "chat_service_sid";
  @SerializedName(SERIALIZED_NAME_CHAT_SERVICE_SID)
  private String chatServiceSid;

  public static final String SERIALIZED_NAME_CONVERSATION_SID = "conversation_sid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_SID)
  private String conversationSid;

  public static final String SERIALIZED_NAME_CONVERSATION_STATE = "conversation_state";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_STATE)
  private ServiceUserConversationEnumState conversationState;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LAST_READ_MESSAGE_INDEX = "last_read_message_index";
  @SerializedName(SERIALIZED_NAME_LAST_READ_MESSAGE_INDEX)
  private Integer lastReadMessageIndex;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_NOTIFICATION_LEVEL = "notification_level";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_LEVEL)
  private ServiceUserConversationEnumNotificationLevel notificationLevel;

  public static final String SERIALIZED_NAME_PARTICIPANT_SID = "participant_sid";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_SID)
  private String participantSid;

  public static final String SERIALIZED_NAME_TIMERS = "timers";
  @SerializedName(SERIALIZED_NAME_TIMERS)
  private Object timers = null;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "unique_name";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public static final String SERIALIZED_NAME_UNREAD_MESSAGES_COUNT = "unread_messages_count";
  @SerializedName(SERIALIZED_NAME_UNREAD_MESSAGES_COUNT)
  private Integer unreadMessagesCount;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USER_SID = "user_sid";
  @SerializedName(SERIALIZED_NAME_USER_SID)
  private String userSid;

  public ConversationsV1ServiceServiceUserServiceUserConversation() {
  }

  public ConversationsV1ServiceServiceUserServiceUserConversation accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation attributes(String attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \&quot;{}\&quot; will be returned.
   * @return attributes
   */
  @javax.annotation.Nullable
  public String getAttributes() {
    return attributes;
  }

  public void setAttributes(String attributes) {
    this.attributes = attributes;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation chatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
    return this;
  }

  /**
   * The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
   * @return chatServiceSid
   */
  @javax.annotation.Nullable
  public String getChatServiceSid() {
    return chatServiceSid;
  }

  public void setChatServiceSid(String chatServiceSid) {
    this.chatServiceSid = chatServiceSid;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation conversationSid(String conversationSid) {
    this.conversationSid = conversationSid;
    return this;
  }

  /**
   * The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this User Conversation.
   * @return conversationSid
   */
  @javax.annotation.Nullable
  public String getConversationSid() {
    return conversationSid;
  }

  public void setConversationSid(String conversationSid) {
    this.conversationSid = conversationSid;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation conversationState(ServiceUserConversationEnumState conversationState) {
    this.conversationState = conversationState;
    return this;
  }

  /**
   * Get conversationState
   * @return conversationState
   */
  @javax.annotation.Nullable
  public ServiceUserConversationEnumState getConversationState() {
    return conversationState;
  }

  public void setConversationState(ServiceUserConversationEnumState conversationState) {
    this.conversationState = conversationState;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Identity of the creator of this Conversation.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date that this conversation was created, given in ISO 8601 format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date that this conversation was last updated, given in ISO 8601 format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The human-readable name of this conversation, limited to 256 characters. Optional.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation lastReadMessageIndex(Integer lastReadMessageIndex) {
    this.lastReadMessageIndex = lastReadMessageIndex;
    return this;
  }

  /**
   * The index of the last Message in the Conversation that the Participant has read.
   * @return lastReadMessageIndex
   */
  @javax.annotation.Nullable
  public Integer getLastReadMessageIndex() {
    return lastReadMessageIndex;
  }

  public void setLastReadMessageIndex(Integer lastReadMessageIndex) {
    this.lastReadMessageIndex = lastReadMessageIndex;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Contains absolute URLs to access the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) and [conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) of this conversation.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation notificationLevel(ServiceUserConversationEnumNotificationLevel notificationLevel) {
    this.notificationLevel = notificationLevel;
    return this;
  }

  /**
   * Get notificationLevel
   * @return notificationLevel
   */
  @javax.annotation.Nullable
  public ServiceUserConversationEnumNotificationLevel getNotificationLevel() {
    return notificationLevel;
  }

  public void setNotificationLevel(ServiceUserConversationEnumNotificationLevel notificationLevel) {
    this.notificationLevel = notificationLevel;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation participantSid(String participantSid) {
    this.participantSid = participantSid;
    return this;
  }

  /**
   * The unique ID of the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) the user conversation belongs to.
   * @return participantSid
   */
  @javax.annotation.Nullable
  public String getParticipantSid() {
    return participantSid;
  }

  public void setParticipantSid(String participantSid) {
    this.participantSid = participantSid;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation timers(Object timers) {
    this.timers = timers;
    return this;
  }

  /**
   * Timer date values representing state update for this conversation.
   * @return timers
   */
  @javax.annotation.Nullable
  public Object getTimers() {
    return timers;
  }

  public void setTimers(Object timers) {
    this.timers = timers;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation uniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
    return this;
  }

  /**
   * An application-defined string that uniquely identifies the Conversation resource. It can be used to address the resource in place of the resource&#39;s &#x60;conversation_sid&#x60; in the URL.
   * @return uniqueName
   */
  @javax.annotation.Nullable
  public String getUniqueName() {
    return uniqueName;
  }

  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation unreadMessagesCount(Integer unreadMessagesCount) {
    this.unreadMessagesCount = unreadMessagesCount;
    return this;
  }

  /**
   * The number of unread Messages in the Conversation for the Participant.
   * @return unreadMessagesCount
   */
  @javax.annotation.Nullable
  public Integer getUnreadMessagesCount() {
    return unreadMessagesCount;
  }

  public void setUnreadMessagesCount(Integer unreadMessagesCount) {
    this.unreadMessagesCount = unreadMessagesCount;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public ConversationsV1ServiceServiceUserServiceUserConversation userSid(String userSid) {
    this.userSid = userSid;
    return this;
  }

  /**
   * The unique string that identifies the [User resource](https://www.twilio.com/docs/conversations/api/user-resource).
   * @return userSid
   */
  @javax.annotation.Nullable
  public String getUserSid() {
    return userSid;
  }

  public void setUserSid(String userSid) {
    this.userSid = userSid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsV1ServiceServiceUserServiceUserConversation conversationsV1ServiceServiceUserServiceUserConversation = (ConversationsV1ServiceServiceUserServiceUserConversation) o;
    return Objects.equals(this.accountSid, conversationsV1ServiceServiceUserServiceUserConversation.accountSid) &&
        Objects.equals(this.attributes, conversationsV1ServiceServiceUserServiceUserConversation.attributes) &&
        Objects.equals(this.chatServiceSid, conversationsV1ServiceServiceUserServiceUserConversation.chatServiceSid) &&
        Objects.equals(this.conversationSid, conversationsV1ServiceServiceUserServiceUserConversation.conversationSid) &&
        Objects.equals(this.conversationState, conversationsV1ServiceServiceUserServiceUserConversation.conversationState) &&
        Objects.equals(this.createdBy, conversationsV1ServiceServiceUserServiceUserConversation.createdBy) &&
        Objects.equals(this.dateCreated, conversationsV1ServiceServiceUserServiceUserConversation.dateCreated) &&
        Objects.equals(this.dateUpdated, conversationsV1ServiceServiceUserServiceUserConversation.dateUpdated) &&
        Objects.equals(this.friendlyName, conversationsV1ServiceServiceUserServiceUserConversation.friendlyName) &&
        Objects.equals(this.lastReadMessageIndex, conversationsV1ServiceServiceUserServiceUserConversation.lastReadMessageIndex) &&
        Objects.equals(this.links, conversationsV1ServiceServiceUserServiceUserConversation.links) &&
        Objects.equals(this.notificationLevel, conversationsV1ServiceServiceUserServiceUserConversation.notificationLevel) &&
        Objects.equals(this.participantSid, conversationsV1ServiceServiceUserServiceUserConversation.participantSid) &&
        Objects.equals(this.timers, conversationsV1ServiceServiceUserServiceUserConversation.timers) &&
        Objects.equals(this.uniqueName, conversationsV1ServiceServiceUserServiceUserConversation.uniqueName) &&
        Objects.equals(this.unreadMessagesCount, conversationsV1ServiceServiceUserServiceUserConversation.unreadMessagesCount) &&
        Objects.equals(this.url, conversationsV1ServiceServiceUserServiceUserConversation.url) &&
        Objects.equals(this.userSid, conversationsV1ServiceServiceUserServiceUserConversation.userSid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, attributes, chatServiceSid, conversationSid, conversationState, createdBy, dateCreated, dateUpdated, friendlyName, lastReadMessageIndex, links, notificationLevel, participantSid, timers, uniqueName, unreadMessagesCount, url, userSid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsV1ServiceServiceUserServiceUserConversation {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    chatServiceSid: ").append(toIndentedString(chatServiceSid)).append("\n");
    sb.append("    conversationSid: ").append(toIndentedString(conversationSid)).append("\n");
    sb.append("    conversationState: ").append(toIndentedString(conversationState)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    lastReadMessageIndex: ").append(toIndentedString(lastReadMessageIndex)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    notificationLevel: ").append(toIndentedString(notificationLevel)).append("\n");
    sb.append("    participantSid: ").append(toIndentedString(participantSid)).append("\n");
    sb.append("    timers: ").append(toIndentedString(timers)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("    unreadMessagesCount: ").append(toIndentedString(unreadMessagesCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userSid: ").append(toIndentedString(userSid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("attributes");
    openapiFields.add("chat_service_sid");
    openapiFields.add("conversation_sid");
    openapiFields.add("conversation_state");
    openapiFields.add("created_by");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("friendly_name");
    openapiFields.add("last_read_message_index");
    openapiFields.add("links");
    openapiFields.add("notification_level");
    openapiFields.add("participant_sid");
    openapiFields.add("timers");
    openapiFields.add("unique_name");
    openapiFields.add("unread_messages_count");
    openapiFields.add("url");
    openapiFields.add("user_sid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationsV1ServiceServiceUserServiceUserConversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationsV1ServiceServiceUserServiceUserConversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsV1ServiceServiceUserServiceUserConversation is not found in the empty JSON string", ConversationsV1ServiceServiceUserServiceUserConversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationsV1ServiceServiceUserServiceUserConversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationsV1ServiceServiceUserServiceUserConversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) && !jsonObj.get("attributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("chat_service_sid") != null && !jsonObj.get("chat_service_sid").isJsonNull()) && !jsonObj.get("chat_service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_service_sid").toString()));
      }
      if ((jsonObj.get("conversation_sid") != null && !jsonObj.get("conversation_sid").isJsonNull()) && !jsonObj.get("conversation_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_sid").toString()));
      }
      if ((jsonObj.get("conversation_state") != null && !jsonObj.get("conversation_state").isJsonNull()) && !jsonObj.get("conversation_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_state").toString()));
      }
      // validate the optional field `conversation_state`
      if (jsonObj.get("conversation_state") != null && !jsonObj.get("conversation_state").isJsonNull()) {
        ServiceUserConversationEnumState.validateJsonElement(jsonObj.get("conversation_state"));
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("notification_level") != null && !jsonObj.get("notification_level").isJsonNull()) && !jsonObj.get("notification_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_level").toString()));
      }
      // validate the optional field `notification_level`
      if (jsonObj.get("notification_level") != null && !jsonObj.get("notification_level").isJsonNull()) {
        ServiceUserConversationEnumNotificationLevel.validateJsonElement(jsonObj.get("notification_level"));
      }
      if ((jsonObj.get("participant_sid") != null && !jsonObj.get("participant_sid").isJsonNull()) && !jsonObj.get("participant_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_sid").toString()));
      }
      if ((jsonObj.get("unique_name") != null && !jsonObj.get("unique_name").isJsonNull()) && !jsonObj.get("unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user_sid") != null && !jsonObj.get("user_sid").isJsonNull()) && !jsonObj.get("user_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_sid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsV1ServiceServiceUserServiceUserConversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsV1ServiceServiceUserServiceUserConversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsV1ServiceServiceUserServiceUserConversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsV1ServiceServiceUserServiceUserConversation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsV1ServiceServiceUserServiceUserConversation>() {
           @Override
           public void write(JsonWriter out, ConversationsV1ServiceServiceUserServiceUserConversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsV1ServiceServiceUserServiceUserConversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationsV1ServiceServiceUserServiceUserConversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationsV1ServiceServiceUserServiceUserConversation
   * @throws IOException if the JSON string is invalid with respect to ConversationsV1ServiceServiceUserServiceUserConversation
   */
  public static ConversationsV1ServiceServiceUserServiceUserConversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsV1ServiceServiceUserServiceUserConversation.class);
  }

  /**
   * Convert an instance of ConversationsV1ServiceServiceUserServiceUserConversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

