# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_user_conversation_enum_notification_level import ServiceUserConversationEnumNotificationLevel
from openapi_server.models.service_user_conversation_enum_state import ServiceUserConversationEnumState
import re
from openapi_server import util


class ConversationsV1ServiceServiceUserServiceUserConversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, attributes: str=None, chat_service_sid: str=None, conversation_sid: str=None, conversation_state: ServiceUserConversationEnumState=None, created_by: str=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, last_read_message_index: int=None, links: object=None, notification_level: ServiceUserConversationEnumNotificationLevel=None, participant_sid: str=None, timers: object=None, unique_name: str=None, unread_messages_count: int=None, url: str=None, user_sid: str=None):
        """ConversationsV1ServiceServiceUserServiceUserConversation - a model defined in OpenAPI

        :param account_sid: The account_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param attributes: The attributes of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param chat_service_sid: The chat_service_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param conversation_sid: The conversation_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param conversation_state: The conversation_state of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param created_by: The created_by of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param date_created: The date_created of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param date_updated: The date_updated of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param friendly_name: The friendly_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param last_read_message_index: The last_read_message_index of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param links: The links of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param notification_level: The notification_level of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param participant_sid: The participant_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param timers: The timers of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param unique_name: The unique_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param unread_messages_count: The unread_messages_count of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param url: The url of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :param user_sid: The user_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        """
        self.openapi_types = {
            'account_sid': str,
            'attributes': str,
            'chat_service_sid': str,
            'conversation_sid': str,
            'conversation_state': ServiceUserConversationEnumState,
            'created_by': str,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'last_read_message_index': int,
            'links': object,
            'notification_level': ServiceUserConversationEnumNotificationLevel,
            'participant_sid': str,
            'timers': object,
            'unique_name': str,
            'unread_messages_count': int,
            'url': str,
            'user_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'attributes': 'attributes',
            'chat_service_sid': 'chat_service_sid',
            'conversation_sid': 'conversation_sid',
            'conversation_state': 'conversation_state',
            'created_by': 'created_by',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'last_read_message_index': 'last_read_message_index',
            'links': 'links',
            'notification_level': 'notification_level',
            'participant_sid': 'participant_sid',
            'timers': 'timers',
            'unique_name': 'unique_name',
            'unread_messages_count': 'unread_messages_count',
            'url': 'url',
            'user_sid': 'user_sid'
        }

        self._account_sid = account_sid
        self._attributes = attributes
        self._chat_service_sid = chat_service_sid
        self._conversation_sid = conversation_sid
        self._conversation_state = conversation_state
        self._created_by = created_by
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._last_read_message_index = last_read_message_index
        self._links = links
        self._notification_level = notification_level
        self._participant_sid = participant_sid
        self._timers = timers
        self._unique_name = unique_name
        self._unread_messages_count = unread_messages_count
        self._url = url
        self._user_sid = user_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsV1ServiceServiceUserServiceUserConversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations.v1.service.service_user.service_user_conversation of this ConversationsV1ServiceServiceUserServiceUserConversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.

        :return: The account_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.

        :param account_sid: The account_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def attributes(self):
        """Gets the attributes of this ConversationsV1ServiceServiceUserServiceUserConversation.

        An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :return: The attributes of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ConversationsV1ServiceServiceUserServiceUserConversation.

        An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :param attributes: The attributes of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def chat_service_sid(self):
        """Gets the chat_service_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.

        :return: The chat_service_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._chat_service_sid

    @chat_service_sid.setter
    def chat_service_sid(self, chat_service_sid):
        """Sets the chat_service_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.

        :param chat_service_sid: The chat_service_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type chat_service_sid: str
        """
        if chat_service_sid is not None and len(chat_service_sid) > 34:
            raise ValueError("Invalid value for `chat_service_sid`, length must be less than or equal to `34`")
        if chat_service_sid is not None and len(chat_service_sid) < 34:
            raise ValueError("Invalid value for `chat_service_sid`, length must be greater than or equal to `34`")
        if chat_service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', chat_service_sid):
            raise ValueError("Invalid value for `chat_service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._chat_service_sid = chat_service_sid

    @property
    def conversation_sid(self):
        """Gets the conversation_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this User Conversation.

        :return: The conversation_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._conversation_sid

    @conversation_sid.setter
    def conversation_sid(self, conversation_sid):
        """Sets the conversation_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this User Conversation.

        :param conversation_sid: The conversation_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type conversation_sid: str
        """
        if conversation_sid is not None and len(conversation_sid) > 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be less than or equal to `34`")
        if conversation_sid is not None and len(conversation_sid) < 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be greater than or equal to `34`")
        if conversation_sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', conversation_sid):
            raise ValueError("Invalid value for `conversation_sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._conversation_sid = conversation_sid

    @property
    def conversation_state(self):
        """Gets the conversation_state of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :return: The conversation_state of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: ServiceUserConversationEnumState
        """
        return self._conversation_state

    @conversation_state.setter
    def conversation_state(self, conversation_state):
        """Sets the conversation_state of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :param conversation_state: The conversation_state of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type conversation_state: ServiceUserConversationEnumState
        """

        self._conversation_state = conversation_state

    @property
    def created_by(self):
        """Gets the created_by of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Identity of the creator of this Conversation.

        :return: The created_by of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Identity of the creator of this Conversation.

        :param created_by: The created_by of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def date_created(self):
        """Gets the date_created of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The date that this conversation was created, given in ISO 8601 format.

        :return: The date_created of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The date that this conversation was created, given in ISO 8601 format.

        :param date_created: The date_created of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The date that this conversation was last updated, given in ISO 8601 format.

        :return: The date_updated of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The date that this conversation was last updated, given in ISO 8601 format.

        :param date_updated: The date_updated of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The human-readable name of this conversation, limited to 256 characters. Optional.

        :return: The friendly_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The human-readable name of this conversation, limited to 256 characters. Optional.

        :param friendly_name: The friendly_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def last_read_message_index(self):
        """Gets the last_read_message_index of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The index of the last Message in the Conversation that the Participant has read.

        :return: The last_read_message_index of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: int
        """
        return self._last_read_message_index

    @last_read_message_index.setter
    def last_read_message_index(self, last_read_message_index):
        """Sets the last_read_message_index of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The index of the last Message in the Conversation that the Participant has read.

        :param last_read_message_index: The last_read_message_index of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type last_read_message_index: int
        """

        self._last_read_message_index = last_read_message_index

    @property
    def links(self):
        """Gets the links of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Contains absolute URLs to access the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) and [conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) of this conversation.

        :return: The links of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Contains absolute URLs to access the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) and [conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) of this conversation.

        :param links: The links of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type links: object
        """

        self._links = links

    @property
    def notification_level(self):
        """Gets the notification_level of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :return: The notification_level of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: ServiceUserConversationEnumNotificationLevel
        """
        return self._notification_level

    @notification_level.setter
    def notification_level(self, notification_level):
        """Sets the notification_level of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :param notification_level: The notification_level of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type notification_level: ServiceUserConversationEnumNotificationLevel
        """

        self._notification_level = notification_level

    @property
    def participant_sid(self):
        """Gets the participant_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) the user conversation belongs to.

        :return: The participant_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._participant_sid

    @participant_sid.setter
    def participant_sid(self, participant_sid):
        """Sets the participant_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique ID of the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) the user conversation belongs to.

        :param participant_sid: The participant_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type participant_sid: str
        """
        if participant_sid is not None and len(participant_sid) > 34:
            raise ValueError("Invalid value for `participant_sid`, length must be less than or equal to `34`")
        if participant_sid is not None and len(participant_sid) < 34:
            raise ValueError("Invalid value for `participant_sid`, length must be greater than or equal to `34`")
        if participant_sid is not None and not re.search(r'^MB[0-9a-fA-F]{32}$', participant_sid):
            raise ValueError("Invalid value for `participant_sid`, must be a follow pattern or equal to `/^MB[0-9a-fA-F]{32}$/`")

        self._participant_sid = participant_sid

    @property
    def timers(self):
        """Gets the timers of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Timer date values representing state update for this conversation.

        :return: The timers of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: object
        """
        return self._timers

    @timers.setter
    def timers(self, timers):
        """Sets the timers of this ConversationsV1ServiceServiceUserServiceUserConversation.

        Timer date values representing state update for this conversation.

        :param timers: The timers of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type timers: object
        """

        self._timers = timers

    @property
    def unique_name(self):
        """Gets the unique_name of this ConversationsV1ServiceServiceUserServiceUserConversation.

        An application-defined string that uniquely identifies the Conversation resource. It can be used to address the resource in place of the resource's `conversation_sid` in the URL.

        :return: The unique_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this ConversationsV1ServiceServiceUserServiceUserConversation.

        An application-defined string that uniquely identifies the Conversation resource. It can be used to address the resource in place of the resource's `conversation_sid` in the URL.

        :param unique_name: The unique_name of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def unread_messages_count(self):
        """Gets the unread_messages_count of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The number of unread Messages in the Conversation for the Participant.

        :return: The unread_messages_count of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: int
        """
        return self._unread_messages_count

    @unread_messages_count.setter
    def unread_messages_count(self, unread_messages_count):
        """Sets the unread_messages_count of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The number of unread Messages in the Conversation for the Participant.

        :param unread_messages_count: The unread_messages_count of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type unread_messages_count: int
        """

        self._unread_messages_count = unread_messages_count

    @property
    def url(self):
        """Gets the url of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :return: The url of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversationsV1ServiceServiceUserServiceUserConversation.


        :param url: The url of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type url: str
        """

        self._url = url

    @property
    def user_sid(self):
        """Gets the user_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique string that identifies the [User resource](https://www.twilio.com/docs/conversations/api/user-resource).

        :return: The user_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :rtype: str
        """
        return self._user_sid

    @user_sid.setter
    def user_sid(self, user_sid):
        """Sets the user_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.

        The unique string that identifies the [User resource](https://www.twilio.com/docs/conversations/api/user-resource).

        :param user_sid: The user_sid of this ConversationsV1ServiceServiceUserServiceUserConversation.
        :type user_sid: str
        """
        if user_sid is not None and len(user_sid) > 34:
            raise ValueError("Invalid value for `user_sid`, length must be less than or equal to `34`")
        if user_sid is not None and len(user_sid) < 34:
            raise ValueError("Invalid value for `user_sid`, length must be greater than or equal to `34`")
        if user_sid is not None and not re.search(r'^US[0-9a-fA-F]{32}$', user_sid):
            raise ValueError("Invalid value for `user_sid`, must be a follow pattern or equal to `/^US[0-9a-fA-F]{32}$/`")

        self._user_sid = user_sid
