# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ConversationsV1ConversationConversationMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, attributes: str=None, author: str=None, body: str=None, content_sid: str=None, conversation_sid: str=None, date_created: datetime=None, date_updated: datetime=None, delivery: object=None, index: int=None, links: object=None, media: List[object]=None, participant_sid: str=None, sid: str=None, url: str=None):
        """ConversationsV1ConversationConversationMessage - a model defined in OpenAPI

        :param account_sid: The account_sid of this ConversationsV1ConversationConversationMessage.
        :param attributes: The attributes of this ConversationsV1ConversationConversationMessage.
        :param author: The author of this ConversationsV1ConversationConversationMessage.
        :param body: The body of this ConversationsV1ConversationConversationMessage.
        :param content_sid: The content_sid of this ConversationsV1ConversationConversationMessage.
        :param conversation_sid: The conversation_sid of this ConversationsV1ConversationConversationMessage.
        :param date_created: The date_created of this ConversationsV1ConversationConversationMessage.
        :param date_updated: The date_updated of this ConversationsV1ConversationConversationMessage.
        :param delivery: The delivery of this ConversationsV1ConversationConversationMessage.
        :param index: The index of this ConversationsV1ConversationConversationMessage.
        :param links: The links of this ConversationsV1ConversationConversationMessage.
        :param media: The media of this ConversationsV1ConversationConversationMessage.
        :param participant_sid: The participant_sid of this ConversationsV1ConversationConversationMessage.
        :param sid: The sid of this ConversationsV1ConversationConversationMessage.
        :param url: The url of this ConversationsV1ConversationConversationMessage.
        """
        self.openapi_types = {
            'account_sid': str,
            'attributes': str,
            'author': str,
            'body': str,
            'content_sid': str,
            'conversation_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'delivery': object,
            'index': int,
            'links': object,
            'media': List[object],
            'participant_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'attributes': 'attributes',
            'author': 'author',
            'body': 'body',
            'content_sid': 'content_sid',
            'conversation_sid': 'conversation_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'delivery': 'delivery',
            'index': 'index',
            'links': 'links',
            'media': 'media',
            'participant_sid': 'participant_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._attributes = attributes
        self._author = author
        self._body = body
        self._content_sid = content_sid
        self._conversation_sid = conversation_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._delivery = delivery
        self._index = index
        self._links = links
        self._media = media
        self._participant_sid = participant_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsV1ConversationConversationMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations.v1.conversation.conversation_message of this ConversationsV1ConversationConversationMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this message.

        :return: The account_sid of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this message.

        :param account_sid: The account_sid of this ConversationsV1ConversationConversationMessage.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def attributes(self):
        """Gets the attributes of this ConversationsV1ConversationConversationMessage.

        A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :return: The attributes of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ConversationsV1ConversationConversationMessage.

        A string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :param attributes: The attributes of this ConversationsV1ConversationConversationMessage.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def author(self):
        """Gets the author of this ConversationsV1ConversationConversationMessage.

        The channel specific identifier of the message's author. Defaults to `system`.

        :return: The author of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ConversationsV1ConversationConversationMessage.

        The channel specific identifier of the message's author. Defaults to `system`.

        :param author: The author of this ConversationsV1ConversationConversationMessage.
        :type author: str
        """

        self._author = author

    @property
    def body(self):
        """Gets the body of this ConversationsV1ConversationConversationMessage.

        The content of the message, can be up to 1,600 characters long.

        :return: The body of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ConversationsV1ConversationConversationMessage.

        The content of the message, can be up to 1,600 characters long.

        :param body: The body of this ConversationsV1ConversationConversationMessage.
        :type body: str
        """

        self._body = body

    @property
    def content_sid(self):
        """Gets the content_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template.

        :return: The content_sid of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._content_sid

    @content_sid.setter
    def content_sid(self, content_sid):
        """Sets the content_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the multi-channel [Rich Content](https://www.twilio.com/docs/content) template.

        :param content_sid: The content_sid of this ConversationsV1ConversationConversationMessage.
        :type content_sid: str
        """
        if content_sid is not None and len(content_sid) > 34:
            raise ValueError("Invalid value for `content_sid`, length must be less than or equal to `34`")
        if content_sid is not None and len(content_sid) < 34:
            raise ValueError("Invalid value for `content_sid`, length must be greater than or equal to `34`")
        if content_sid is not None and not re.search(r'^HX[0-9a-fA-F]{32}$', content_sid):
            raise ValueError("Invalid value for `content_sid`, must be a follow pattern or equal to `/^HX[0-9a-fA-F]{32}$/`")

        self._content_sid = content_sid

    @property
    def conversation_sid(self):
        """Gets the conversation_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.

        :return: The conversation_sid of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._conversation_sid

    @conversation_sid.setter
    def conversation_sid(self, conversation_sid):
        """Sets the conversation_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) for this message.

        :param conversation_sid: The conversation_sid of this ConversationsV1ConversationConversationMessage.
        :type conversation_sid: str
        """
        if conversation_sid is not None and len(conversation_sid) > 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be less than or equal to `34`")
        if conversation_sid is not None and len(conversation_sid) < 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be greater than or equal to `34`")
        if conversation_sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', conversation_sid):
            raise ValueError("Invalid value for `conversation_sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._conversation_sid = conversation_sid

    @property
    def date_created(self):
        """Gets the date_created of this ConversationsV1ConversationConversationMessage.

        The date that this resource was created.

        :return: The date_created of this ConversationsV1ConversationConversationMessage.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ConversationsV1ConversationConversationMessage.

        The date that this resource was created.

        :param date_created: The date_created of this ConversationsV1ConversationConversationMessage.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ConversationsV1ConversationConversationMessage.

        The date that this resource was last updated. `null` if the message has not been edited.

        :return: The date_updated of this ConversationsV1ConversationConversationMessage.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ConversationsV1ConversationConversationMessage.

        The date that this resource was last updated. `null` if the message has not been edited.

        :param date_updated: The date_updated of this ConversationsV1ConversationConversationMessage.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def delivery(self):
        """Gets the delivery of this ConversationsV1ConversationConversationMessage.

        An object that contains the summary of delivery statuses for the message to non-chat participants.

        :return: The delivery of this ConversationsV1ConversationConversationMessage.
        :rtype: object
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this ConversationsV1ConversationConversationMessage.

        An object that contains the summary of delivery statuses for the message to non-chat participants.

        :param delivery: The delivery of this ConversationsV1ConversationConversationMessage.
        :type delivery: object
        """

        self._delivery = delivery

    @property
    def index(self):
        """Gets the index of this ConversationsV1ConversationConversationMessage.

        The index of the message within the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource).  Indices may skip numbers, but will always be in order of when the message was received.

        :return: The index of this ConversationsV1ConversationConversationMessage.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ConversationsV1ConversationConversationMessage.

        The index of the message within the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource).  Indices may skip numbers, but will always be in order of when the message was received.

        :param index: The index of this ConversationsV1ConversationConversationMessage.
        :type index: int
        """

        self._index = index

    @property
    def links(self):
        """Gets the links of this ConversationsV1ConversationConversationMessage.

        Contains an absolute API resource URL to access the delivery & read receipts of this message.

        :return: The links of this ConversationsV1ConversationConversationMessage.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConversationsV1ConversationConversationMessage.

        Contains an absolute API resource URL to access the delivery & read receipts of this message.

        :param links: The links of this ConversationsV1ConversationConversationMessage.
        :type links: object
        """

        self._links = links

    @property
    def media(self):
        """Gets the media of this ConversationsV1ConversationConversationMessage.

        An array of objects that describe the Message's media, if the message contains media. Each object contains these fields: `content_type` with the MIME type of the media, `filename` with the name of the media, `sid` with the SID of the Media resource, and `size` with the media object's file size in bytes. If the Message has no media, this value is `null`.

        :return: The media of this ConversationsV1ConversationConversationMessage.
        :rtype: List[object]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ConversationsV1ConversationConversationMessage.

        An array of objects that describe the Message's media, if the message contains media. Each object contains these fields: `content_type` with the MIME type of the media, `filename` with the name of the media, `sid` with the SID of the Media resource, and `size` with the media object's file size in bytes. If the Message has no media, this value is `null`.

        :param media: The media of this ConversationsV1ConversationConversationMessage.
        :type media: List[object]
        """

        self._media = media

    @property
    def participant_sid(self):
        """Gets the participant_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of messages's author participant. Null in case of `system` sent message.

        :return: The participant_sid of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._participant_sid

    @participant_sid.setter
    def participant_sid(self, participant_sid):
        """Sets the participant_sid of this ConversationsV1ConversationConversationMessage.

        The unique ID of messages's author participant. Null in case of `system` sent message.

        :param participant_sid: The participant_sid of this ConversationsV1ConversationConversationMessage.
        :type participant_sid: str
        """
        if participant_sid is not None and len(participant_sid) > 34:
            raise ValueError("Invalid value for `participant_sid`, length must be less than or equal to `34`")
        if participant_sid is not None and len(participant_sid) < 34:
            raise ValueError("Invalid value for `participant_sid`, length must be greater than or equal to `34`")
        if participant_sid is not None and not re.search(r'^MB[0-9a-fA-F]{32}$', participant_sid):
            raise ValueError("Invalid value for `participant_sid`, must be a follow pattern or equal to `/^MB[0-9a-fA-F]{32}$/`")

        self._participant_sid = participant_sid

    @property
    def sid(self):
        """Gets the sid of this ConversationsV1ConversationConversationMessage.

        A 34 character string that uniquely identifies this resource.

        :return: The sid of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ConversationsV1ConversationConversationMessage.

        A 34 character string that uniquely identifies this resource.

        :param sid: The sid of this ConversationsV1ConversationConversationMessage.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^IM[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^IM[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ConversationsV1ConversationConversationMessage.

        An absolute API resource API URL for this message.

        :return: The url of this ConversationsV1ConversationConversationMessage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversationsV1ConversationConversationMessage.

        An absolute API resource API URL for this message.

        :param url: The url of this ConversationsV1ConversationConversationMessage.
        :type url: str
        """

        self._url = url
