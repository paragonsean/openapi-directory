# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_enum_state import ConversationEnumState
import re
from openapi_server import util


class ConversationsV1Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, attributes: str=None, bindings: object=None, chat_service_sid: str=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, links: object=None, messaging_service_sid: str=None, sid: str=None, state: ConversationEnumState=None, timers: object=None, unique_name: str=None, url: str=None):
        """ConversationsV1Conversation - a model defined in OpenAPI

        :param account_sid: The account_sid of this ConversationsV1Conversation.
        :param attributes: The attributes of this ConversationsV1Conversation.
        :param bindings: The bindings of this ConversationsV1Conversation.
        :param chat_service_sid: The chat_service_sid of this ConversationsV1Conversation.
        :param date_created: The date_created of this ConversationsV1Conversation.
        :param date_updated: The date_updated of this ConversationsV1Conversation.
        :param friendly_name: The friendly_name of this ConversationsV1Conversation.
        :param links: The links of this ConversationsV1Conversation.
        :param messaging_service_sid: The messaging_service_sid of this ConversationsV1Conversation.
        :param sid: The sid of this ConversationsV1Conversation.
        :param state: The state of this ConversationsV1Conversation.
        :param timers: The timers of this ConversationsV1Conversation.
        :param unique_name: The unique_name of this ConversationsV1Conversation.
        :param url: The url of this ConversationsV1Conversation.
        """
        self.openapi_types = {
            'account_sid': str,
            'attributes': str,
            'bindings': object,
            'chat_service_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'links': object,
            'messaging_service_sid': str,
            'sid': str,
            'state': ConversationEnumState,
            'timers': object,
            'unique_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'attributes': 'attributes',
            'bindings': 'bindings',
            'chat_service_sid': 'chat_service_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'messaging_service_sid': 'messaging_service_sid',
            'sid': 'sid',
            'state': 'state',
            'timers': 'timers',
            'unique_name': 'unique_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._attributes = attributes
        self._bindings = bindings
        self._chat_service_sid = chat_service_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._links = links
        self._messaging_service_sid = messaging_service_sid
        self._sid = sid
        self._state = state
        self._timers = timers
        self._unique_name = unique_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsV1Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations.v1.conversation of this ConversationsV1Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ConversationsV1Conversation.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.

        :return: The account_sid of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ConversationsV1Conversation.

        The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.

        :param account_sid: The account_sid of this ConversationsV1Conversation.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def attributes(self):
        """Gets the attributes of this ConversationsV1Conversation.

        An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :return: The attributes of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ConversationsV1Conversation.

        An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.

        :param attributes: The attributes of this ConversationsV1Conversation.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def bindings(self):
        """Gets the bindings of this ConversationsV1Conversation.


        :return: The bindings of this ConversationsV1Conversation.
        :rtype: object
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this ConversationsV1Conversation.


        :param bindings: The bindings of this ConversationsV1Conversation.
        :type bindings: object
        """

        self._bindings = bindings

    @property
    def chat_service_sid(self):
        """Gets the chat_service_sid of this ConversationsV1Conversation.

        The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.

        :return: The chat_service_sid of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._chat_service_sid

    @chat_service_sid.setter
    def chat_service_sid(self, chat_service_sid):
        """Sets the chat_service_sid of this ConversationsV1Conversation.

        The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.

        :param chat_service_sid: The chat_service_sid of this ConversationsV1Conversation.
        :type chat_service_sid: str
        """
        if chat_service_sid is not None and len(chat_service_sid) > 34:
            raise ValueError("Invalid value for `chat_service_sid`, length must be less than or equal to `34`")
        if chat_service_sid is not None and len(chat_service_sid) < 34:
            raise ValueError("Invalid value for `chat_service_sid`, length must be greater than or equal to `34`")
        if chat_service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', chat_service_sid):
            raise ValueError("Invalid value for `chat_service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._chat_service_sid = chat_service_sid

    @property
    def date_created(self):
        """Gets the date_created of this ConversationsV1Conversation.

        The date that this resource was created.

        :return: The date_created of this ConversationsV1Conversation.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ConversationsV1Conversation.

        The date that this resource was created.

        :param date_created: The date_created of this ConversationsV1Conversation.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ConversationsV1Conversation.

        The date that this resource was last updated.

        :return: The date_updated of this ConversationsV1Conversation.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ConversationsV1Conversation.

        The date that this resource was last updated.

        :param date_updated: The date_updated of this ConversationsV1Conversation.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ConversationsV1Conversation.

        The human-readable name of this conversation, limited to 256 characters. Optional.

        :return: The friendly_name of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ConversationsV1Conversation.

        The human-readable name of this conversation, limited to 256 characters. Optional.

        :param friendly_name: The friendly_name of this ConversationsV1Conversation.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this ConversationsV1Conversation.

        Contains absolute URLs to access the [participants](https://www.twilio.com/docs/conversations/api/conversation-participant-resource), [messages](https://www.twilio.com/docs/conversations/api/conversation-message-resource) and [webhooks](https://www.twilio.com/docs/conversations/api/conversation-scoped-webhook-resource) of this conversation.

        :return: The links of this ConversationsV1Conversation.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConversationsV1Conversation.

        Contains absolute URLs to access the [participants](https://www.twilio.com/docs/conversations/api/conversation-participant-resource), [messages](https://www.twilio.com/docs/conversations/api/conversation-message-resource) and [webhooks](https://www.twilio.com/docs/conversations/api/conversation-scoped-webhook-resource) of this conversation.

        :param links: The links of this ConversationsV1Conversation.
        :type links: object
        """

        self._links = links

    @property
    def messaging_service_sid(self):
        """Gets the messaging_service_sid of this ConversationsV1Conversation.

        The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.

        :return: The messaging_service_sid of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._messaging_service_sid

    @messaging_service_sid.setter
    def messaging_service_sid(self, messaging_service_sid):
        """Sets the messaging_service_sid of this ConversationsV1Conversation.

        The unique ID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) this conversation belongs to.

        :param messaging_service_sid: The messaging_service_sid of this ConversationsV1Conversation.
        :type messaging_service_sid: str
        """
        if messaging_service_sid is not None and len(messaging_service_sid) > 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be less than or equal to `34`")
        if messaging_service_sid is not None and len(messaging_service_sid) < 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be greater than or equal to `34`")
        if messaging_service_sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', messaging_service_sid):
            raise ValueError("Invalid value for `messaging_service_sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._messaging_service_sid = messaging_service_sid

    @property
    def sid(self):
        """Gets the sid of this ConversationsV1Conversation.

        A 34 character string that uniquely identifies this resource.

        :return: The sid of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ConversationsV1Conversation.

        A 34 character string that uniquely identifies this resource.

        :param sid: The sid of this ConversationsV1Conversation.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def state(self):
        """Gets the state of this ConversationsV1Conversation.


        :return: The state of this ConversationsV1Conversation.
        :rtype: ConversationEnumState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConversationsV1Conversation.


        :param state: The state of this ConversationsV1Conversation.
        :type state: ConversationEnumState
        """

        self._state = state

    @property
    def timers(self):
        """Gets the timers of this ConversationsV1Conversation.

        Timer date values representing state update for this conversation.

        :return: The timers of this ConversationsV1Conversation.
        :rtype: object
        """
        return self._timers

    @timers.setter
    def timers(self, timers):
        """Sets the timers of this ConversationsV1Conversation.

        Timer date values representing state update for this conversation.

        :param timers: The timers of this ConversationsV1Conversation.
        :type timers: object
        """

        self._timers = timers

    @property
    def unique_name(self):
        """Gets the unique_name of this ConversationsV1Conversation.

        An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.

        :return: The unique_name of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this ConversationsV1Conversation.

        An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.

        :param unique_name: The unique_name of this ConversationsV1Conversation.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this ConversationsV1Conversation.

        An absolute API resource URL for this conversation.

        :return: The url of this ConversationsV1Conversation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversationsV1Conversation.

        An absolute API resource URL for this conversation.

        :param url: The url of this ConversationsV1Conversation.
        :type url: str
        """

        self._url = url
