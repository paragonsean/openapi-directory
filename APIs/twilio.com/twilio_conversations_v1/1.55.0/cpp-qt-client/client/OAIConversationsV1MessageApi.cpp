/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationsV1MessageApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIConversationsV1MessageApi::OAIConversationsV1MessageApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIConversationsV1MessageApi::~OAIConversationsV1MessageApi() {
}

void OAIConversationsV1MessageApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createConversationMessage", serverConf);
    _serverIndices.insert("createConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createServiceConversationMessage", serverConf);
    _serverIndices.insert("createServiceConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteConversationMessage", serverConf);
    _serverIndices.insert("deleteConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteServiceConversationMessage", serverConf);
    _serverIndices.insert("deleteServiceConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchConversationMessage", serverConf);
    _serverIndices.insert("fetchConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchServiceConversationMessage", serverConf);
    _serverIndices.insert("fetchServiceConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listConversationMessage", serverConf);
    _serverIndices.insert("listConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listServiceConversationMessage", serverConf);
    _serverIndices.insert("listServiceConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateConversationMessage", serverConf);
    _serverIndices.insert("updateConversationMessage", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateServiceConversationMessage", serverConf);
    _serverIndices.insert("updateServiceConversationMessage", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIConversationsV1MessageApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIConversationsV1MessageApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIConversationsV1MessageApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIConversationsV1MessageApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIConversationsV1MessageApi::setUsername(const QString &username) {
    _username = username;
}

void OAIConversationsV1MessageApi::setPassword(const QString &password) {
    _password = password;
}


void OAIConversationsV1MessageApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIConversationsV1MessageApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIConversationsV1MessageApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIConversationsV1MessageApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1MessageApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1MessageApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIConversationsV1MessageApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIConversationsV1MessageApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIConversationsV1MessageApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIConversationsV1MessageApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIConversationsV1MessageApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIConversationsV1MessageApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIConversationsV1MessageApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIConversationsV1MessageApi::createConversationMessage(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &author, const ::OpenAPI::OptionalParam<QString> &body, const ::OpenAPI::OptionalParam<QString> &content_sid, const ::OpenAPI::OptionalParam<QString> &content_variables, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &media_sid, const ::OpenAPI::OptionalParam<QString> &subject) {
    QString fullPath = QString(_serverConfigs["createConversationMessage"][_serverIndices.value("createConversationMessage")].URL()+"/v1/Conversations/{ConversationSid}/Messages");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (author.hasValue())
    {
        input.add_var("Author", ::OpenAPI::toStringValue(author.value()));
    }
    if (body.hasValue())
    {
        input.add_var("Body", ::OpenAPI::toStringValue(body.value()));
    }
    if (content_sid.hasValue())
    {
        input.add_var("ContentSid", ::OpenAPI::toStringValue(content_sid.value()));
    }
    if (content_variables.hasValue())
    {
        input.add_var("ContentVariables", ::OpenAPI::toStringValue(content_variables.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (media_sid.hasValue())
    {
        input.add_var("MediaSid", ::OpenAPI::toStringValue(media_sid.value()));
    }
    if (subject.hasValue())
    {
        input.add_var("Subject", ::OpenAPI::toStringValue(subject.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::createConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::createConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createConversationMessageSignal(output);
        Q_EMIT createConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT createConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT createConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::createServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &author, const ::OpenAPI::OptionalParam<QString> &body, const ::OpenAPI::OptionalParam<QString> &content_sid, const ::OpenAPI::OptionalParam<QString> &content_variables, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &media_sid, const ::OpenAPI::OptionalParam<QString> &subject) {
    QString fullPath = QString(_serverConfigs["createServiceConversationMessage"][_serverIndices.value("createServiceConversationMessage")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (author.hasValue())
    {
        input.add_var("Author", ::OpenAPI::toStringValue(author.value()));
    }
    if (body.hasValue())
    {
        input.add_var("Body", ::OpenAPI::toStringValue(body.value()));
    }
    if (content_sid.hasValue())
    {
        input.add_var("ContentSid", ::OpenAPI::toStringValue(content_sid.value()));
    }
    if (content_variables.hasValue())
    {
        input.add_var("ContentVariables", ::OpenAPI::toStringValue(content_variables.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (media_sid.hasValue())
    {
        input.add_var("MediaSid", ::OpenAPI::toStringValue(media_sid.value()));
    }
    if (subject.hasValue())
    {
        input.add_var("Subject", ::OpenAPI::toStringValue(subject.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::createServiceConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::createServiceConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createServiceConversationMessageSignal(output);
        Q_EMIT createServiceConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createServiceConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT createServiceConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createServiceConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT createServiceConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::deleteConversationMessage(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled) {
    QString fullPath = QString(_serverConfigs["deleteConversationMessage"][_serverIndices.value("deleteConversationMessage")].URL()+"/v1/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::deleteConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::deleteConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteConversationMessageSignal();
        Q_EMIT deleteConversationMessageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteConversationMessageSignalE(error_type, error_str);
        Q_EMIT deleteConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteConversationMessageSignalError(error_type, error_str);
        Q_EMIT deleteConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::deleteServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled) {
    QString fullPath = QString(_serverConfigs["deleteServiceConversationMessage"][_serverIndices.value("deleteServiceConversationMessage")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::deleteServiceConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::deleteServiceConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteServiceConversationMessageSignal();
        Q_EMIT deleteServiceConversationMessageSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteServiceConversationMessageSignalE(error_type, error_str);
        Q_EMIT deleteServiceConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteServiceConversationMessageSignalError(error_type, error_str);
        Q_EMIT deleteServiceConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::fetchConversationMessage(const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchConversationMessage"][_serverIndices.value("fetchConversationMessage")].URL()+"/v1/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::fetchConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::fetchConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchConversationMessageSignal(output);
        Q_EMIT fetchConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT fetchConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT fetchConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::fetchServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchServiceConversationMessage"][_serverIndices.value("fetchServiceConversationMessage")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::fetchServiceConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::fetchServiceConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchServiceConversationMessageSignal(output);
        Q_EMIT fetchServiceConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchServiceConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT fetchServiceConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchServiceConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT fetchServiceConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::listConversationMessage(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_order_type> &order, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listConversationMessage"][_serverIndices.value("listConversationMessage")].URL()+"/v1/Conversations/{ConversationSid}/Messages");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Order", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::listConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::listConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListConversationMessageResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listConversationMessageSignal(output);
        Q_EMIT listConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT listConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT listConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::listServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_order_type> &order, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listServiceConversationMessage"][_serverIndices.value("listServiceConversationMessage")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Order", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::listServiceConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::listServiceConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListServiceConversationMessageResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listServiceConversationMessageSignal(output);
        Q_EMIT listServiceConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listServiceConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT listServiceConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listServiceConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT listServiceConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::updateConversationMessage(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &author, const ::OpenAPI::OptionalParam<QString> &body, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &subject) {
    QString fullPath = QString(_serverConfigs["updateConversationMessage"][_serverIndices.value("updateConversationMessage")].URL()+"/v1/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (author.hasValue())
    {
        input.add_var("Author", ::OpenAPI::toStringValue(author.value()));
    }
    if (body.hasValue())
    {
        input.add_var("Body", ::OpenAPI::toStringValue(body.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (subject.hasValue())
    {
        input.add_var("Subject", ::OpenAPI::toStringValue(subject.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::updateConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::updateConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateConversationMessageSignal(output);
        Q_EMIT updateConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT updateConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT updateConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::updateServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &author, const ::OpenAPI::OptionalParam<QString> &body, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &subject) {
    QString fullPath = QString(_serverConfigs["updateServiceConversationMessage"][_serverIndices.value("updateServiceConversationMessage")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (author.hasValue())
    {
        input.add_var("Author", ::OpenAPI::toStringValue(author.value()));
    }
    if (body.hasValue())
    {
        input.add_var("Body", ::OpenAPI::toStringValue(body.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (subject.hasValue())
    {
        input.add_var("Subject", ::OpenAPI::toStringValue(subject.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1MessageApi::updateServiceConversationMessageCallback);
    connect(this, &OAIConversationsV1MessageApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1MessageApi::updateServiceConversationMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_message output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateServiceConversationMessageSignal(output);
        Q_EMIT updateServiceConversationMessageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateServiceConversationMessageSignalE(output, error_type, error_str);
        Q_EMIT updateServiceConversationMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateServiceConversationMessageSignalError(output, error_type, error_str);
        Q_EMIT updateServiceConversationMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1MessageApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
