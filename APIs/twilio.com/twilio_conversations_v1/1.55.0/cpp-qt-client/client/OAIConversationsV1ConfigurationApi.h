/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1ConfigurationApi_H
#define OAI_OAIConversationsV1ConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_v1_configuration.h"
#include "OAIConversations_v1_service_service_configuration.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1ConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1ConfigurationApi(const int timeOut = 0);
    ~OAIConversationsV1ConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void fetchConfiguration();

    /**
    * @param[in]  chat_service_sid QString [required]
    */
    virtual void fetchServiceConfiguration(const QString &chat_service_sid);

    /**
    * @param[in]  default_chat_service_sid QString [optional]
    * @param[in]  default_closed_timer QString [optional]
    * @param[in]  default_inactive_timer QString [optional]
    * @param[in]  default_messaging_service_sid QString [optional]
    */
    virtual void updateConfiguration(const ::OpenAPI::OptionalParam<QString> &default_chat_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_closed_timer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_inactive_timer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_messaging_service_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  default_chat_service_role_sid QString [optional]
    * @param[in]  default_conversation_creator_role_sid QString [optional]
    * @param[in]  default_conversation_role_sid QString [optional]
    * @param[in]  reachability_enabled bool [optional]
    */
    virtual void updateServiceConfiguration(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<QString> &default_chat_service_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_conversation_creator_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_conversation_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reachability_enabled = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchConfigurationCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateServiceConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchConfigurationSignal(OAIConversations_v1_configuration summary);
    void fetchServiceConfigurationSignal(OAIConversations_v1_service_service_configuration summary);
    void updateConfigurationSignal(OAIConversations_v1_configuration summary);
    void updateServiceConfigurationSignal(OAIConversations_v1_service_service_configuration summary);


    void fetchConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration summary);
    void fetchServiceConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration summary);
    void updateConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration summary);
    void updateServiceConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration summary);

    Q_DECL_DEPRECATED_X("Use fetchConfigurationSignalError() instead")
    void fetchConfigurationSignalE(OAIConversations_v1_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationSignalError(OAIConversations_v1_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConfigurationSignalError() instead")
    void fetchServiceConfigurationSignalE(OAIConversations_v1_service_service_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConfigurationSignalError(OAIConversations_v1_service_service_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationSignalError() instead")
    void updateConfigurationSignalE(OAIConversations_v1_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalError(OAIConversations_v1_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConfigurationSignalError() instead")
    void updateServiceConfigurationSignalE(OAIConversations_v1_service_service_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConfigurationSignalError(OAIConversations_v1_service_service_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchConfigurationSignalErrorFull() instead")
    void fetchConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConfigurationSignalErrorFull() instead")
    void fetchServiceConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationSignalErrorFull() instead")
    void updateConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConfigurationSignalErrorFull() instead")
    void updateServiceConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
