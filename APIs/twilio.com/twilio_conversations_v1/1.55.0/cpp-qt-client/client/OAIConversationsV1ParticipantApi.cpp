/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationsV1ParticipantApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIConversationsV1ParticipantApi::OAIConversationsV1ParticipantApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIConversationsV1ParticipantApi::~OAIConversationsV1ParticipantApi() {
}

void OAIConversationsV1ParticipantApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createConversationParticipant", serverConf);
    _serverIndices.insert("createConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createServiceConversationParticipant", serverConf);
    _serverIndices.insert("createServiceConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteConversationParticipant", serverConf);
    _serverIndices.insert("deleteConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteServiceConversationParticipant", serverConf);
    _serverIndices.insert("deleteServiceConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchConversationParticipant", serverConf);
    _serverIndices.insert("fetchConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchServiceConversationParticipant", serverConf);
    _serverIndices.insert("fetchServiceConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listConversationParticipant", serverConf);
    _serverIndices.insert("listConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listServiceConversationParticipant", serverConf);
    _serverIndices.insert("listServiceConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateConversationParticipant", serverConf);
    _serverIndices.insert("updateConversationParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateServiceConversationParticipant", serverConf);
    _serverIndices.insert("updateServiceConversationParticipant", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIConversationsV1ParticipantApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIConversationsV1ParticipantApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIConversationsV1ParticipantApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIConversationsV1ParticipantApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIConversationsV1ParticipantApi::setUsername(const QString &username) {
    _username = username;
}

void OAIConversationsV1ParticipantApi::setPassword(const QString &password) {
    _password = password;
}


void OAIConversationsV1ParticipantApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIConversationsV1ParticipantApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIConversationsV1ParticipantApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIConversationsV1ParticipantApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1ParticipantApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1ParticipantApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIConversationsV1ParticipantApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIConversationsV1ParticipantApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIConversationsV1ParticipantApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIConversationsV1ParticipantApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIConversationsV1ParticipantApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIConversationsV1ParticipantApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIConversationsV1ParticipantApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIConversationsV1ParticipantApi::createConversationParticipant(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &identity, const ::OpenAPI::OptionalParam<QString> &messaging_binding_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["createConversationParticipant"][_serverIndices.value("createConversationParticipant")].URL()+"/v1/Conversations/{ConversationSid}/Participants");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (identity.hasValue())
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity.value()));
    }
    if (messaging_binding_address.hasValue())
    {
        input.add_var("MessagingBinding.Address", ::OpenAPI::toStringValue(messaging_binding_address.value()));
    }
    if (messaging_binding_projected_address.hasValue())
    {
        input.add_var("MessagingBinding.ProjectedAddress", ::OpenAPI::toStringValue(messaging_binding_projected_address.value()));
    }
    if (messaging_binding_proxy_address.hasValue())
    {
        input.add_var("MessagingBinding.ProxyAddress", ::OpenAPI::toStringValue(messaging_binding_proxy_address.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::createConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::createConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createConversationParticipantSignal(output);
        Q_EMIT createConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT createConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT createConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::createServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &identity, const ::OpenAPI::OptionalParam<QString> &messaging_binding_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["createServiceConversationParticipant"][_serverIndices.value("createServiceConversationParticipant")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (identity.hasValue())
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity.value()));
    }
    if (messaging_binding_address.hasValue())
    {
        input.add_var("MessagingBinding.Address", ::OpenAPI::toStringValue(messaging_binding_address.value()));
    }
    if (messaging_binding_projected_address.hasValue())
    {
        input.add_var("MessagingBinding.ProjectedAddress", ::OpenAPI::toStringValue(messaging_binding_projected_address.value()));
    }
    if (messaging_binding_proxy_address.hasValue())
    {
        input.add_var("MessagingBinding.ProxyAddress", ::OpenAPI::toStringValue(messaging_binding_proxy_address.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::createServiceConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::createServiceConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createServiceConversationParticipantSignal(output);
        Q_EMIT createServiceConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createServiceConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT createServiceConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createServiceConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT createServiceConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::deleteConversationParticipant(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled) {
    QString fullPath = QString(_serverConfigs["deleteConversationParticipant"][_serverIndices.value("deleteConversationParticipant")].URL()+"/v1/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::deleteConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::deleteConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteConversationParticipantSignal();
        Q_EMIT deleteConversationParticipantSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteConversationParticipantSignalE(error_type, error_str);
        Q_EMIT deleteConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteConversationParticipantSignalError(error_type, error_str);
        Q_EMIT deleteConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::deleteServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled) {
    QString fullPath = QString(_serverConfigs["deleteServiceConversationParticipant"][_serverIndices.value("deleteServiceConversationParticipant")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::deleteServiceConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::deleteServiceConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteServiceConversationParticipantSignal();
        Q_EMIT deleteServiceConversationParticipantSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteServiceConversationParticipantSignalE(error_type, error_str);
        Q_EMIT deleteServiceConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteServiceConversationParticipantSignalError(error_type, error_str);
        Q_EMIT deleteServiceConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::fetchConversationParticipant(const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchConversationParticipant"][_serverIndices.value("fetchConversationParticipant")].URL()+"/v1/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::fetchConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::fetchConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchConversationParticipantSignal(output);
        Q_EMIT fetchConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT fetchConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT fetchConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::fetchServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchServiceConversationParticipant"][_serverIndices.value("fetchServiceConversationParticipant")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::fetchServiceConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::fetchServiceConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchServiceConversationParticipantSignal(output);
        Q_EMIT fetchServiceConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchServiceConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT fetchServiceConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchServiceConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT fetchServiceConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::listConversationParticipant(const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listConversationParticipant"][_serverIndices.value("listConversationParticipant")].URL()+"/v1/Conversations/{ConversationSid}/Participants");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::listConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::listConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListConversationParticipantResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listConversationParticipantSignal(output);
        Q_EMIT listConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT listConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT listConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::listServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listServiceConversationParticipant"][_serverIndices.value("listServiceConversationParticipant")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::listServiceConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::listServiceConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListServiceConversationParticipantResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listServiceConversationParticipantSignal(output);
        Q_EMIT listServiceConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listServiceConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT listServiceConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listServiceConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT listServiceConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::updateConversationParticipant(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &identity, const ::OpenAPI::OptionalParam<qint32> &last_read_message_index, const ::OpenAPI::OptionalParam<QString> &last_read_timestamp, const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["updateConversationParticipant"][_serverIndices.value("updateConversationParticipant")].URL()+"/v1/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (identity.hasValue())
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity.value()));
    }
    if (last_read_message_index.hasValue())
    {
        input.add_var("LastReadMessageIndex", ::OpenAPI::toStringValue(last_read_message_index.value()));
    }
    if (last_read_timestamp.hasValue())
    {
        input.add_var("LastReadTimestamp", ::OpenAPI::toStringValue(last_read_timestamp.value()));
    }
    if (messaging_binding_projected_address.hasValue())
    {
        input.add_var("MessagingBinding.ProjectedAddress", ::OpenAPI::toStringValue(messaging_binding_projected_address.value()));
    }
    if (messaging_binding_proxy_address.hasValue())
    {
        input.add_var("MessagingBinding.ProxyAddress", ::OpenAPI::toStringValue(messaging_binding_proxy_address.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::updateConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::updateConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateConversationParticipantSignal(output);
        Q_EMIT updateConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT updateConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT updateConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::updateServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<QString> &identity, const ::OpenAPI::OptionalParam<qint32> &last_read_message_index, const ::OpenAPI::OptionalParam<QString> &last_read_timestamp, const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address, const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["updateServiceConversationParticipant"][_serverIndices.value("updateServiceConversationParticipant")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (identity.hasValue())
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity.value()));
    }
    if (last_read_message_index.hasValue())
    {
        input.add_var("LastReadMessageIndex", ::OpenAPI::toStringValue(last_read_message_index.value()));
    }
    if (last_read_timestamp.hasValue())
    {
        input.add_var("LastReadTimestamp", ::OpenAPI::toStringValue(last_read_timestamp.value()));
    }
    if (messaging_binding_projected_address.hasValue())
    {
        input.add_var("MessagingBinding.ProjectedAddress", ::OpenAPI::toStringValue(messaging_binding_projected_address.value()));
    }
    if (messaging_binding_proxy_address.hasValue())
    {
        input.add_var("MessagingBinding.ProxyAddress", ::OpenAPI::toStringValue(messaging_binding_proxy_address.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1ParticipantApi::updateServiceConversationParticipantCallback);
    connect(this, &OAIConversationsV1ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1ParticipantApi::updateServiceConversationParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateServiceConversationParticipantSignal(output);
        Q_EMIT updateServiceConversationParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateServiceConversationParticipantSignalE(output, error_type, error_str);
        Q_EMIT updateServiceConversationParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateServiceConversationParticipantSignalError(output, error_type, error_str);
        Q_EMIT updateServiceConversationParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1ParticipantApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
