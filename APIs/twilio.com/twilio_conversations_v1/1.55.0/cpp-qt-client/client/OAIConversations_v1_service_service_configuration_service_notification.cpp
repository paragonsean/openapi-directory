/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_service_service_configuration_service_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_service_service_configuration_service_notification::OAIConversations_v1_service_service_configuration_service_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_service_service_configuration_service_notification::OAIConversations_v1_service_service_configuration_service_notification() {
    this->initializeModel();
}

OAIConversations_v1_service_service_configuration_service_notification::~OAIConversations_v1_service_service_configuration_service_notification() {}

void OAIConversations_v1_service_service_configuration_service_notification::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_added_to_conversation_isSet = false;
    m_added_to_conversation_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_log_enabled_isSet = false;
    m_log_enabled_isValid = false;

    m_new_message_isSet = false;
    m_new_message_isValid = false;

    m_removed_from_conversation_isSet = false;
    m_removed_from_conversation_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_service_service_configuration_service_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_service_service_configuration_service_notification::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_added_to_conversation_isValid = ::OpenAPI::fromJsonValue(m_added_to_conversation, json[QString("added_to_conversation")]);
    m_added_to_conversation_isSet = !json[QString("added_to_conversation")].isNull() && m_added_to_conversation_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_enabled, json[QString("log_enabled")]);
    m_log_enabled_isSet = !json[QString("log_enabled")].isNull() && m_log_enabled_isValid;

    m_new_message_isValid = ::OpenAPI::fromJsonValue(m_new_message, json[QString("new_message")]);
    m_new_message_isSet = !json[QString("new_message")].isNull() && m_new_message_isValid;

    m_removed_from_conversation_isValid = ::OpenAPI::fromJsonValue(m_removed_from_conversation, json[QString("removed_from_conversation")]);
    m_removed_from_conversation_isSet = !json[QString("removed_from_conversation")].isNull() && m_removed_from_conversation_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_service_service_configuration_service_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_service_service_configuration_service_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_added_to_conversation_isSet) {
        obj.insert(QString("added_to_conversation"), ::OpenAPI::toJsonValue(m_added_to_conversation));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_log_enabled_isSet) {
        obj.insert(QString("log_enabled"), ::OpenAPI::toJsonValue(m_log_enabled));
    }
    if (m_new_message_isSet) {
        obj.insert(QString("new_message"), ::OpenAPI::toJsonValue(m_new_message));
    }
    if (m_removed_from_conversation_isSet) {
        obj.insert(QString("removed_from_conversation"), ::OpenAPI::toJsonValue(m_removed_from_conversation));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_service_service_configuration_service_notification::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_service_service_configuration_service_notification::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIConversations_v1_service_service_configuration_service_notification::getAddedToConversation() const {
    return m_added_to_conversation;
}
void OAIConversations_v1_service_service_configuration_service_notification::setAddedToConversation(const QJsonValue &added_to_conversation) {
    m_added_to_conversation = added_to_conversation;
    m_added_to_conversation_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_added_to_conversation_Set() const{
    return m_added_to_conversation_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_added_to_conversation_Valid() const{
    return m_added_to_conversation_isValid;
}

QString OAIConversations_v1_service_service_configuration_service_notification::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_service_service_configuration_service_notification::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

bool OAIConversations_v1_service_service_configuration_service_notification::isLogEnabled() const {
    return m_log_enabled;
}
void OAIConversations_v1_service_service_configuration_service_notification::setLogEnabled(const bool &log_enabled) {
    m_log_enabled = log_enabled;
    m_log_enabled_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_log_enabled_Set() const{
    return m_log_enabled_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_log_enabled_Valid() const{
    return m_log_enabled_isValid;
}

QJsonValue OAIConversations_v1_service_service_configuration_service_notification::getNewMessage() const {
    return m_new_message;
}
void OAIConversations_v1_service_service_configuration_service_notification::setNewMessage(const QJsonValue &new_message) {
    m_new_message = new_message;
    m_new_message_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_new_message_Set() const{
    return m_new_message_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_new_message_Valid() const{
    return m_new_message_isValid;
}

QJsonValue OAIConversations_v1_service_service_configuration_service_notification::getRemovedFromConversation() const {
    return m_removed_from_conversation;
}
void OAIConversations_v1_service_service_configuration_service_notification::setRemovedFromConversation(const QJsonValue &removed_from_conversation) {
    m_removed_from_conversation = removed_from_conversation;
    m_removed_from_conversation_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_removed_from_conversation_Set() const{
    return m_removed_from_conversation_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_removed_from_conversation_Valid() const{
    return m_removed_from_conversation_isValid;
}

QString OAIConversations_v1_service_service_configuration_service_notification::getUrl() const {
    return m_url;
}
void OAIConversations_v1_service_service_configuration_service_notification::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_service_service_configuration_service_notification::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_service_service_configuration_service_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_to_conversation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_from_conversation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_service_service_configuration_service_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
