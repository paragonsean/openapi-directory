/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1ParticipantApi_H
#define OAI_OAIConversationsV1ParticipantApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversation_participant_enum_webhook_enabled_type.h"
#include "OAIConversations_v1_conversation_conversation_participant.h"
#include "OAIConversations_v1_service_service_conversation_service_conversation_participant.h"
#include "OAIListConversationParticipantResponse.h"
#include "OAIListServiceConversationParticipantResponse.h"
#include "OAIService_conversation_participant_enum_webhook_enabled_type.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1ParticipantApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1ParticipantApi(const int timeOut = 0);
    ~OAIConversationsV1ParticipantApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_participant_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  messaging_binding_address QString [optional]
    * @param[in]  messaging_binding_projected_address QString [optional]
    * @param[in]  messaging_binding_proxy_address QString [optional]
    * @param[in]  role_sid QString [optional]
    */
    virtual void createConversationParticipant(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_participant_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  messaging_binding_address QString [optional]
    * @param[in]  messaging_binding_projected_address QString [optional]
    * @param[in]  messaging_binding_proxy_address QString [optional]
    * @param[in]  role_sid QString [optional]
    */
    virtual void createServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_participant_enum_webhook_enabled_type [optional]
    */
    virtual void deleteConversationParticipant(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_participant_enum_webhook_enabled_type [optional]
    */
    virtual void deleteServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConversationParticipant(const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConversationParticipant(const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_participant_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  last_read_message_index qint32 [optional]
    * @param[in]  last_read_timestamp QString [optional]
    * @param[in]  messaging_binding_projected_address QString [optional]
    * @param[in]  messaging_binding_proxy_address QString [optional]
    * @param[in]  role_sid QString [optional]
    */
    virtual void updateConversationParticipant(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_participant_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &last_read_message_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_read_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_participant_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  last_read_message_index qint32 [optional]
    * @param[in]  last_read_timestamp QString [optional]
    * @param[in]  messaging_binding_projected_address QString [optional]
    * @param[in]  messaging_binding_proxy_address QString [optional]
    * @param[in]  role_sid QString [optional]
    */
    virtual void updateServiceConversationParticipant(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_participant_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &last_read_message_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &last_read_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_projected_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_binding_proxy_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_sid = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void createServiceConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void deleteConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void deleteServiceConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void fetchConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void listConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void listServiceConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void updateConversationParticipantCallback(OAIHttpRequestWorker *worker);
    void updateServiceConversationParticipantCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConversationParticipantSignal(OAIConversations_v1_conversation_conversation_participant summary);
    void createServiceConversationParticipantSignal(OAIConversations_v1_service_service_conversation_service_conversation_participant summary);
    void deleteConversationParticipantSignal();
    void deleteServiceConversationParticipantSignal();
    void fetchConversationParticipantSignal(OAIConversations_v1_conversation_conversation_participant summary);
    void fetchServiceConversationParticipantSignal(OAIConversations_v1_service_service_conversation_service_conversation_participant summary);
    void listConversationParticipantSignal(OAIListConversationParticipantResponse summary);
    void listServiceConversationParticipantSignal(OAIListServiceConversationParticipantResponse summary);
    void updateConversationParticipantSignal(OAIConversations_v1_conversation_conversation_participant summary);
    void updateServiceConversationParticipantSignal(OAIConversations_v1_service_service_conversation_service_conversation_participant summary);


    void createConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_participant summary);
    void createServiceConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_participant summary);
    void deleteConversationParticipantSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceConversationParticipantSignalFull(OAIHttpRequestWorker *worker);
    void fetchConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_participant summary);
    void fetchServiceConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_participant summary);
    void listConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIListConversationParticipantResponse summary);
    void listServiceConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIListServiceConversationParticipantResponse summary);
    void updateConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_participant summary);
    void updateServiceConversationParticipantSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_participant summary);

    Q_DECL_DEPRECATED_X("Use createConversationParticipantSignalError() instead")
    void createConversationParticipantSignalE(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationParticipantSignalError(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationParticipantSignalError() instead")
    void createServiceConversationParticipantSignalE(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationParticipantSignalError(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationParticipantSignalError() instead")
    void deleteConversationParticipantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationParticipantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationParticipantSignalError() instead")
    void deleteServiceConversationParticipantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationParticipantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationParticipantSignalError() instead")
    void fetchConversationParticipantSignalE(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationParticipantSignalError(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationParticipantSignalError() instead")
    void fetchServiceConversationParticipantSignalE(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationParticipantSignalError(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationParticipantSignalError() instead")
    void listConversationParticipantSignalE(OAIListConversationParticipantResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationParticipantSignalError(OAIListConversationParticipantResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationParticipantSignalError() instead")
    void listServiceConversationParticipantSignalE(OAIListServiceConversationParticipantResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationParticipantSignalError(OAIListServiceConversationParticipantResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationParticipantSignalError() instead")
    void updateConversationParticipantSignalE(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationParticipantSignalError(OAIConversations_v1_conversation_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationParticipantSignalError() instead")
    void updateServiceConversationParticipantSignalE(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationParticipantSignalError(OAIConversations_v1_service_service_conversation_service_conversation_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConversationParticipantSignalErrorFull() instead")
    void createConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationParticipantSignalErrorFull() instead")
    void createServiceConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationParticipantSignalErrorFull() instead")
    void deleteConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationParticipantSignalErrorFull() instead")
    void deleteServiceConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationParticipantSignalErrorFull() instead")
    void fetchConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationParticipantSignalErrorFull() instead")
    void fetchServiceConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationParticipantSignalErrorFull() instead")
    void listConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationParticipantSignalErrorFull() instead")
    void listServiceConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationParticipantSignalErrorFull() instead")
    void updateConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationParticipantSignalErrorFull() instead")
    void updateServiceConversationParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
