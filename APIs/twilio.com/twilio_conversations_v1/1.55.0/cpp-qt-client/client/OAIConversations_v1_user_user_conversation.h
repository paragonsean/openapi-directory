/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversations_v1_user_user_conversation.h
 *
 * 
 */

#ifndef OAIConversations_v1_user_user_conversation_H
#define OAIConversations_v1_user_user_conversation_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIUser_conversation_enum_notification_level.h"
#include "OAIUser_conversation_enum_state.h"
#include <QDateTime>
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIConversations_v1_user_user_conversation : public OAIObject {
public:
    OAIConversations_v1_user_user_conversation();
    OAIConversations_v1_user_user_conversation(QString json);
    ~OAIConversations_v1_user_user_conversation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QString getAttributes() const;
    void setAttributes(const QString &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QString getChatServiceSid() const;
    void setChatServiceSid(const QString &chat_service_sid);
    bool is_chat_service_sid_Set() const;
    bool is_chat_service_sid_Valid() const;

    QString getConversationSid() const;
    void setConversationSid(const QString &conversation_sid);
    bool is_conversation_sid_Set() const;
    bool is_conversation_sid_Valid() const;

    OAIUser_conversation_enum_state getConversationState() const;
    void setConversationState(const OAIUser_conversation_enum_state &conversation_state);
    bool is_conversation_state_Set() const;
    bool is_conversation_state_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    qint32 getLastReadMessageIndex() const;
    void setLastReadMessageIndex(const qint32 &last_read_message_index);
    bool is_last_read_message_index_Set() const;
    bool is_last_read_message_index_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAIUser_conversation_enum_notification_level getNotificationLevel() const;
    void setNotificationLevel(const OAIUser_conversation_enum_notification_level &notification_level);
    bool is_notification_level_Set() const;
    bool is_notification_level_Valid() const;

    QString getParticipantSid() const;
    void setParticipantSid(const QString &participant_sid);
    bool is_participant_sid_Set() const;
    bool is_participant_sid_Valid() const;

    QJsonValue getTimers() const;
    void setTimers(const QJsonValue &timers);
    bool is_timers_Set() const;
    bool is_timers_Valid() const;

    QString getUniqueName() const;
    void setUniqueName(const QString &unique_name);
    bool is_unique_name_Set() const;
    bool is_unique_name_Valid() const;

    qint32 getUnreadMessagesCount() const;
    void setUnreadMessagesCount(const qint32 &unread_messages_count);
    bool is_unread_messages_count_Set() const;
    bool is_unread_messages_count_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUserSid() const;
    void setUserSid(const QString &user_sid);
    bool is_user_sid_Set() const;
    bool is_user_sid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QString m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QString m_chat_service_sid;
    bool m_chat_service_sid_isSet;
    bool m_chat_service_sid_isValid;

    QString m_conversation_sid;
    bool m_conversation_sid_isSet;
    bool m_conversation_sid_isValid;

    OAIUser_conversation_enum_state m_conversation_state;
    bool m_conversation_state_isSet;
    bool m_conversation_state_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    qint32 m_last_read_message_index;
    bool m_last_read_message_index_isSet;
    bool m_last_read_message_index_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAIUser_conversation_enum_notification_level m_notification_level;
    bool m_notification_level_isSet;
    bool m_notification_level_isValid;

    QString m_participant_sid;
    bool m_participant_sid_isSet;
    bool m_participant_sid_isValid;

    QJsonValue m_timers;
    bool m_timers_isSet;
    bool m_timers_isValid;

    QString m_unique_name;
    bool m_unique_name_isSet;
    bool m_unique_name_isValid;

    qint32 m_unread_messages_count;
    bool m_unread_messages_count_isSet;
    bool m_unread_messages_count_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_user_sid;
    bool m_user_sid_isSet;
    bool m_user_sid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversations_v1_user_user_conversation)

#endif // OAIConversations_v1_user_user_conversation_H
