/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook() {
    this->initializeModel();
}

OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::~OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook() {}

void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_conversation_sid_isSet = false;
    m_conversation_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_conversation_sid_isValid = ::OpenAPI::fromJsonValue(m_conversation_sid, json[QString("conversation_sid")]);
    m_conversation_sid_isSet = !json[QString("conversation_sid")].isNull() && m_conversation_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_conversation_sid_isSet) {
        obj.insert(QString("conversation_sid"), ::OpenAPI::toJsonValue(m_conversation_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QJsonValue OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getConfiguration() const {
    return m_configuration;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setConfiguration(const QJsonValue &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getConversationSid() const {
    return m_conversation_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setConversationSid(const QString &conversation_sid) {
    m_conversation_sid = conversation_sid;
    m_conversation_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_conversation_sid_Set() const{
    return m_conversation_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_conversation_sid_Valid() const{
    return m_conversation_sid_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getDateCreated() const {
    return m_date_created;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getDateUpdated() const {
    return m_date_updated;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getSid() const {
    return m_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getTarget() const {
    return m_target;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_target_Set() const{
    return m_target_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::getUrl() const {
    return m_url;
}
void OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
