/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1RoleApi_H
#define OAI_OAIConversationsV1RoleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_v1_role.h"
#include "OAIConversations_v1_service_service_role.h"
#include "OAIListRoleResponse.h"
#include "OAIListServiceRoleResponse.h"
#include "OAIRole_enum_role_type.h"
#include "OAIService_role_enum_role_type.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1RoleApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1RoleApi(const int timeOut = 0);
    ~OAIConversationsV1RoleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [required]
    * @param[in]  permission QList<QString> [required]
    * @param[in]  type OAIRole_enum_role_type [required]
    */
    virtual void createRole(const QString &friendly_name, const QList<QString> &permission, const OAIRole_enum_role_type &type);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  permission QList<QString> [required]
    * @param[in]  type OAIService_role_enum_role_type [required]
    */
    virtual void createServiceRole(const QString &chat_service_sid, const QString &friendly_name, const QList<QString> &permission, const OAIService_role_enum_role_type &type);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteRole(const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteServiceRole(const QString &chat_service_sid, const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchRole(const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceRole(const QString &chat_service_sid, const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRole(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceRole(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  permission QList<QString> [required]
    */
    virtual void updateRole(const QString &sid, const QList<QString> &permission);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  permission QList<QString> [required]
    */
    virtual void updateServiceRole(const QString &chat_service_sid, const QString &sid, const QList<QString> &permission);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRoleCallback(OAIHttpRequestWorker *worker);
    void createServiceRoleCallback(OAIHttpRequestWorker *worker);
    void deleteRoleCallback(OAIHttpRequestWorker *worker);
    void deleteServiceRoleCallback(OAIHttpRequestWorker *worker);
    void fetchRoleCallback(OAIHttpRequestWorker *worker);
    void fetchServiceRoleCallback(OAIHttpRequestWorker *worker);
    void listRoleCallback(OAIHttpRequestWorker *worker);
    void listServiceRoleCallback(OAIHttpRequestWorker *worker);
    void updateRoleCallback(OAIHttpRequestWorker *worker);
    void updateServiceRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRoleSignal(OAIConversations_v1_role summary);
    void createServiceRoleSignal(OAIConversations_v1_service_service_role summary);
    void deleteRoleSignal();
    void deleteServiceRoleSignal();
    void fetchRoleSignal(OAIConversations_v1_role summary);
    void fetchServiceRoleSignal(OAIConversations_v1_service_service_role summary);
    void listRoleSignal(OAIListRoleResponse summary);
    void listServiceRoleSignal(OAIListServiceRoleResponse summary);
    void updateRoleSignal(OAIConversations_v1_role summary);
    void updateServiceRoleSignal(OAIConversations_v1_service_service_role summary);


    void createRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_role summary);
    void createServiceRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_role summary);
    void deleteRoleSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceRoleSignalFull(OAIHttpRequestWorker *worker);
    void fetchRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_role summary);
    void fetchServiceRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_role summary);
    void listRoleSignalFull(OAIHttpRequestWorker *worker, OAIListRoleResponse summary);
    void listServiceRoleSignalFull(OAIHttpRequestWorker *worker, OAIListServiceRoleResponse summary);
    void updateRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_role summary);
    void updateServiceRoleSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_role summary);

    Q_DECL_DEPRECATED_X("Use createRoleSignalError() instead")
    void createRoleSignalE(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalError(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceRoleSignalError() instead")
    void createServiceRoleSignalE(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceRoleSignalError(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalError() instead")
    void deleteRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceRoleSignalError() instead")
    void deleteServiceRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRoleSignalError() instead")
    void fetchRoleSignalE(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRoleSignalError(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceRoleSignalError() instead")
    void fetchServiceRoleSignalE(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceRoleSignalError(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoleSignalError() instead")
    void listRoleSignalE(OAIListRoleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoleSignalError(OAIListRoleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceRoleSignalError() instead")
    void listServiceRoleSignalE(OAIListServiceRoleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceRoleSignalError(OAIListServiceRoleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleSignalError() instead")
    void updateRoleSignalE(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalError(OAIConversations_v1_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceRoleSignalError() instead")
    void updateServiceRoleSignalE(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceRoleSignalError(OAIConversations_v1_service_service_role summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRoleSignalErrorFull() instead")
    void createRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceRoleSignalErrorFull() instead")
    void createServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalErrorFull() instead")
    void deleteRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceRoleSignalErrorFull() instead")
    void deleteServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRoleSignalErrorFull() instead")
    void fetchRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceRoleSignalErrorFull() instead")
    void fetchServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoleSignalErrorFull() instead")
    void listRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceRoleSignalErrorFull() instead")
    void listServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoleSignalErrorFull() instead")
    void updateRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceRoleSignalErrorFull() instead")
    void updateServiceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
