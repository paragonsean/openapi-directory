/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1WebhookApi_H
#define OAI_OAIConversationsV1WebhookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfiguration_webhook_enum_target.h"
#include "OAIConversation_scoped_webhook_enum_method.h"
#include "OAIConversation_scoped_webhook_enum_target.h"
#include "OAIConversations_v1_configuration_configuration_webhook.h"
#include "OAIConversations_v1_conversation_conversation_scoped_webhook.h"
#include "OAIConversations_v1_service_service_configuration_service_webhook_configuration.h"
#include "OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook.h"
#include "OAIListConversationScopedWebhookResponse.h"
#include "OAIListServiceConversationScopedWebhookResponse.h"
#include "OAIService_conversation_scoped_webhook_enum_method.h"
#include "OAIService_conversation_scoped_webhook_enum_target.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1WebhookApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1WebhookApi(const int timeOut = 0);
    ~OAIConversationsV1WebhookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  target OAIConversation_scoped_webhook_enum_target [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIConversation_scoped_webhook_enum_method [optional]
    * @param[in]  configuration_replay_after qint32 [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void createConversationScopedWebhook(const QString &conversation_sid, const OAIConversation_scoped_webhook_enum_target &target, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method>(), const ::OpenAPI::OptionalParam<qint32> &configuration_replay_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  target OAIService_conversation_scoped_webhook_enum_target [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIService_conversation_scoped_webhook_enum_method [optional]
    * @param[in]  configuration_replay_after qint32 [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void createServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const OAIService_conversation_scoped_webhook_enum_target &target, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method>(), const ::OpenAPI::OptionalParam<qint32> &configuration_replay_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteConversationScopedWebhook(const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid);


    virtual void fetchConfigurationWebhook();

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConversationScopedWebhook(const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    */
    virtual void fetchServiceWebhookConfiguration(const QString &chat_service_sid);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConversationScopedWebhook(const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  method QString [optional]
    * @param[in]  post_webhook_url QString [optional]
    * @param[in]  pre_webhook_url QString [optional]
    * @param[in]  target OAIConfiguration_webhook_enum_target [optional]
    */
    virtual void updateConfigurationWebhook(const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConfiguration_webhook_enum_target> &target = ::OpenAPI::OptionalParam<OAIConfiguration_webhook_enum_target>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIConversation_scoped_webhook_enum_method [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void updateConversationScopedWebhook(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIService_conversation_scoped_webhook_enum_method [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void updateServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  method QString [optional]
    * @param[in]  post_webhook_url QString [optional]
    * @param[in]  pre_webhook_url QString [optional]
    */
    virtual void updateServiceWebhookConfiguration(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_webhook_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void createServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchConfigurationWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchServiceWebhookConfigurationCallback(OAIHttpRequestWorker *worker);
    void listConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void listServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationWebhookCallback(OAIHttpRequestWorker *worker);
    void updateConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void updateServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker);
    void updateServiceWebhookConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConversationScopedWebhookSignal(OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void createServiceConversationScopedWebhookSignal(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void deleteConversationScopedWebhookSignal();
    void deleteServiceConversationScopedWebhookSignal();
    void fetchConfigurationWebhookSignal(OAIConversations_v1_configuration_configuration_webhook summary);
    void fetchConversationScopedWebhookSignal(OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void fetchServiceConversationScopedWebhookSignal(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void fetchServiceWebhookConfigurationSignal(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary);
    void listConversationScopedWebhookSignal(OAIListConversationScopedWebhookResponse summary);
    void listServiceConversationScopedWebhookSignal(OAIListServiceConversationScopedWebhookResponse summary);
    void updateConfigurationWebhookSignal(OAIConversations_v1_configuration_configuration_webhook summary);
    void updateConversationScopedWebhookSignal(OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void updateServiceConversationScopedWebhookSignal(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void updateServiceWebhookConfigurationSignal(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary);


    void createConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void createServiceConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void deleteConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker);
    void fetchConfigurationWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration_configuration_webhook summary);
    void fetchConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void fetchServiceConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void fetchServiceWebhookConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration_service_webhook_configuration summary);
    void listConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIListConversationScopedWebhookResponse summary);
    void listServiceConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIListServiceConversationScopedWebhookResponse summary);
    void updateConfigurationWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration_configuration_webhook summary);
    void updateConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_scoped_webhook summary);
    void updateServiceConversationScopedWebhookSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary);
    void updateServiceWebhookConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration_service_webhook_configuration summary);

    Q_DECL_DEPRECATED_X("Use createConversationScopedWebhookSignalError() instead")
    void createConversationScopedWebhookSignalE(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationScopedWebhookSignalError(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationScopedWebhookSignalError() instead")
    void createServiceConversationScopedWebhookSignalE(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationScopedWebhookSignalError(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationScopedWebhookSignalError() instead")
    void deleteConversationScopedWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationScopedWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationScopedWebhookSignalError() instead")
    void deleteServiceConversationScopedWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationScopedWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConfigurationWebhookSignalError() instead")
    void fetchConfigurationWebhookSignalE(OAIConversations_v1_configuration_configuration_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationWebhookSignalError(OAIConversations_v1_configuration_configuration_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationScopedWebhookSignalError() instead")
    void fetchConversationScopedWebhookSignalE(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationScopedWebhookSignalError(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationScopedWebhookSignalError() instead")
    void fetchServiceConversationScopedWebhookSignalE(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationScopedWebhookSignalError(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceWebhookConfigurationSignalError() instead")
    void fetchServiceWebhookConfigurationSignalE(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceWebhookConfigurationSignalError(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationScopedWebhookSignalError() instead")
    void listConversationScopedWebhookSignalE(OAIListConversationScopedWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationScopedWebhookSignalError(OAIListConversationScopedWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationScopedWebhookSignalError() instead")
    void listServiceConversationScopedWebhookSignalE(OAIListServiceConversationScopedWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationScopedWebhookSignalError(OAIListServiceConversationScopedWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationWebhookSignalError() instead")
    void updateConfigurationWebhookSignalE(OAIConversations_v1_configuration_configuration_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationWebhookSignalError(OAIConversations_v1_configuration_configuration_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationScopedWebhookSignalError() instead")
    void updateConversationScopedWebhookSignalE(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationScopedWebhookSignalError(OAIConversations_v1_conversation_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationScopedWebhookSignalError() instead")
    void updateServiceConversationScopedWebhookSignalE(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationScopedWebhookSignalError(OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceWebhookConfigurationSignalError() instead")
    void updateServiceWebhookConfigurationSignalE(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceWebhookConfigurationSignalError(OAIConversations_v1_service_service_configuration_service_webhook_configuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConversationScopedWebhookSignalErrorFull() instead")
    void createConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationScopedWebhookSignalErrorFull() instead")
    void createServiceConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationScopedWebhookSignalErrorFull() instead")
    void deleteConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationScopedWebhookSignalErrorFull() instead")
    void deleteServiceConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConfigurationWebhookSignalErrorFull() instead")
    void fetchConfigurationWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationScopedWebhookSignalErrorFull() instead")
    void fetchConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationScopedWebhookSignalErrorFull() instead")
    void fetchServiceConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceWebhookConfigurationSignalErrorFull() instead")
    void fetchServiceWebhookConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceWebhookConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationScopedWebhookSignalErrorFull() instead")
    void listConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationScopedWebhookSignalErrorFull() instead")
    void listServiceConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationWebhookSignalErrorFull() instead")
    void updateConfigurationWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationScopedWebhookSignalErrorFull() instead")
    void updateConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationScopedWebhookSignalErrorFull() instead")
    void updateServiceConversationScopedWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationScopedWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceWebhookConfigurationSignalErrorFull() instead")
    void updateServiceWebhookConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceWebhookConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
