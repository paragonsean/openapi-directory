/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1MessageApi_H
#define OAI_OAIConversationsV1MessageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversation_message_enum_order_type.h"
#include "OAIConversation_message_enum_webhook_enabled_type.h"
#include "OAIConversations_v1_conversation_conversation_message.h"
#include "OAIConversations_v1_service_service_conversation_service_conversation_message.h"
#include "OAIListConversationMessageResponse.h"
#include "OAIListServiceConversationMessageResponse.h"
#include "OAIService_conversation_message_enum_order_type.h"
#include "OAIService_conversation_message_enum_webhook_enabled_type.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1MessageApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1MessageApi(const int timeOut = 0);
    ~OAIConversationsV1MessageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_message_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  content_sid QString [optional]
    * @param[in]  content_variables QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  media_sid QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void createConversationMessage(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_variables = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &media_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_message_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  content_sid QString [optional]
    * @param[in]  content_variables QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  media_sid QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void createServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_variables = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &media_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_message_enum_webhook_enabled_type [optional]
    */
    virtual void deleteConversationMessage(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_message_enum_webhook_enabled_type [optional]
    */
    virtual void deleteServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConversationMessage(const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  order OAIConversation_message_enum_order_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConversationMessage(const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_order_type> &order = ::OpenAPI::OptionalParam<OAIConversation_message_enum_order_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  order OAIService_conversation_message_enum_order_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_order_type> &order = ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_order_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_message_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void updateConversationMessage(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_message_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_message_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void updateServiceConversationMessage(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_message_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConversationMessageCallback(OAIHttpRequestWorker *worker);
    void createServiceConversationMessageCallback(OAIHttpRequestWorker *worker);
    void deleteConversationMessageCallback(OAIHttpRequestWorker *worker);
    void deleteServiceConversationMessageCallback(OAIHttpRequestWorker *worker);
    void fetchConversationMessageCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConversationMessageCallback(OAIHttpRequestWorker *worker);
    void listConversationMessageCallback(OAIHttpRequestWorker *worker);
    void listServiceConversationMessageCallback(OAIHttpRequestWorker *worker);
    void updateConversationMessageCallback(OAIHttpRequestWorker *worker);
    void updateServiceConversationMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConversationMessageSignal(OAIConversations_v1_conversation_conversation_message summary);
    void createServiceConversationMessageSignal(OAIConversations_v1_service_service_conversation_service_conversation_message summary);
    void deleteConversationMessageSignal();
    void deleteServiceConversationMessageSignal();
    void fetchConversationMessageSignal(OAIConversations_v1_conversation_conversation_message summary);
    void fetchServiceConversationMessageSignal(OAIConversations_v1_service_service_conversation_service_conversation_message summary);
    void listConversationMessageSignal(OAIListConversationMessageResponse summary);
    void listServiceConversationMessageSignal(OAIListServiceConversationMessageResponse summary);
    void updateConversationMessageSignal(OAIConversations_v1_conversation_conversation_message summary);
    void updateServiceConversationMessageSignal(OAIConversations_v1_service_service_conversation_service_conversation_message summary);


    void createConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_message summary);
    void createServiceConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_message summary);
    void deleteConversationMessageSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceConversationMessageSignalFull(OAIHttpRequestWorker *worker);
    void fetchConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_message summary);
    void fetchServiceConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_message summary);
    void listConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIListConversationMessageResponse summary);
    void listServiceConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIListServiceConversationMessageResponse summary);
    void updateConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_message summary);
    void updateServiceConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_message summary);

    Q_DECL_DEPRECATED_X("Use createConversationMessageSignalError() instead")
    void createConversationMessageSignalE(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationMessageSignalError(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationMessageSignalError() instead")
    void createServiceConversationMessageSignalE(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationMessageSignalError(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationMessageSignalError() instead")
    void deleteConversationMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationMessageSignalError() instead")
    void deleteServiceConversationMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationMessageSignalError() instead")
    void fetchConversationMessageSignalE(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationMessageSignalError(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationMessageSignalError() instead")
    void fetchServiceConversationMessageSignalE(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationMessageSignalError(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationMessageSignalError() instead")
    void listConversationMessageSignalE(OAIListConversationMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationMessageSignalError(OAIListConversationMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationMessageSignalError() instead")
    void listServiceConversationMessageSignalE(OAIListServiceConversationMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationMessageSignalError(OAIListServiceConversationMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationMessageSignalError() instead")
    void updateConversationMessageSignalE(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationMessageSignalError(OAIConversations_v1_conversation_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationMessageSignalError() instead")
    void updateServiceConversationMessageSignalE(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationMessageSignalError(OAIConversations_v1_service_service_conversation_service_conversation_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConversationMessageSignalErrorFull() instead")
    void createConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationMessageSignalErrorFull() instead")
    void createServiceConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationMessageSignalErrorFull() instead")
    void deleteConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationMessageSignalErrorFull() instead")
    void deleteServiceConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationMessageSignalErrorFull() instead")
    void fetchConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationMessageSignalErrorFull() instead")
    void fetchServiceConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationMessageSignalErrorFull() instead")
    void listConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationMessageSignalErrorFull() instead")
    void listServiceConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationMessageSignalErrorFull() instead")
    void updateConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationMessageSignalErrorFull() instead")
    void updateServiceConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
