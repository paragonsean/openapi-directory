/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1NotificationApi_H
#define OAI_OAIConversationsV1NotificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_v1_service_service_configuration_service_notification.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1NotificationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1NotificationApi(const int timeOut = 0);
    ~OAIConversationsV1NotificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  chat_service_sid QString [required]
    */
    virtual void fetchServiceNotification(const QString &chat_service_sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  added_to_conversation_enabled bool [optional]
    * @param[in]  added_to_conversation_sound QString [optional]
    * @param[in]  added_to_conversation_template QString [optional]
    * @param[in]  log_enabled bool [optional]
    * @param[in]  new_message_badge_count_enabled bool [optional]
    * @param[in]  new_message_enabled bool [optional]
    * @param[in]  new_message_sound QString [optional]
    * @param[in]  new_message_template QString [optional]
    * @param[in]  new_message_with_media_enabled bool [optional]
    * @param[in]  new_message_with_media_template QString [optional]
    * @param[in]  removed_from_conversation_enabled bool [optional]
    * @param[in]  removed_from_conversation_sound QString [optional]
    * @param[in]  removed_from_conversation_template QString [optional]
    */
    virtual void updateServiceNotification(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<bool> &added_to_conversation_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &added_to_conversation_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &added_to_conversation_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &log_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &new_message_badge_count_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &new_message_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &new_message_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_message_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &new_message_with_media_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &new_message_with_media_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &removed_from_conversation_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &removed_from_conversation_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &removed_from_conversation_template = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchServiceNotificationCallback(OAIHttpRequestWorker *worker);
    void updateServiceNotificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchServiceNotificationSignal(OAIConversations_v1_service_service_configuration_service_notification summary);
    void updateServiceNotificationSignal(OAIConversations_v1_service_service_configuration_service_notification summary);


    void fetchServiceNotificationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration_service_notification summary);
    void updateServiceNotificationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_configuration_service_notification summary);

    Q_DECL_DEPRECATED_X("Use fetchServiceNotificationSignalError() instead")
    void fetchServiceNotificationSignalE(OAIConversations_v1_service_service_configuration_service_notification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceNotificationSignalError(OAIConversations_v1_service_service_configuration_service_notification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceNotificationSignalError() instead")
    void updateServiceNotificationSignalE(OAIConversations_v1_service_service_configuration_service_notification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceNotificationSignalError(OAIConversations_v1_service_service_configuration_service_notification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchServiceNotificationSignalErrorFull() instead")
    void fetchServiceNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceNotificationSignalErrorFull() instead")
    void updateServiceNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
