/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1ConversationApi_H
#define OAI_OAIConversationsV1ConversationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversation_enum_state.h"
#include "OAIConversation_enum_webhook_enabled_type.h"
#include "OAIConversations_v1_conversation.h"
#include "OAIConversations_v1_service_service_conversation.h"
#include "OAIListConversationResponse.h"
#include "OAIListServiceConversationResponse.h"
#include "OAIService_conversation_enum_state.h"
#include "OAIService_conversation_enum_webhook_enabled_type.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1ConversationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1ConversationApi(const int timeOut = 0);
    ~OAIConversationsV1ConversationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_twilio_webhook_enabled OAIConversation_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  bindings_email_address QString [optional]
    * @param[in]  bindings_email_name QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  messaging_service_sid QString [optional]
    * @param[in]  state OAIConversation_enum_state [optional]
    * @param[in]  timers_closed QString [optional]
    * @param[in]  timers_inactive QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createConversation(const ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIConversation_enum_state>(), const ::OpenAPI::OptionalParam<QString> &timers_closed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timers_inactive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  bindings_email_address QString [optional]
    * @param[in]  bindings_email_name QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  messaging_service_sid QString [optional]
    * @param[in]  state OAIService_conversation_enum_state [optional]
    * @param[in]  timers_closed QString [optional]
    * @param[in]  timers_inactive QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createServiceConversation(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService_conversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIService_conversation_enum_state>(), const ::OpenAPI::OptionalParam<QString> &timers_closed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timers_inactive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_enum_webhook_enabled_type [optional]
    */
    virtual void deleteConversation(const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_enum_webhook_enabled_type [optional]
    */
    virtual void deleteServiceConversation(const QString &chat_service_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchConversation(const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceConversation(const QString &chat_service_sid, const QString &sid);

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  state OAIConversation_enum_state [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConversation(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIConversation_enum_state>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  state OAIService_conversation_enum_state [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceConversation(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService_conversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIService_conversation_enum_state>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIConversation_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  bindings_email_address QString [optional]
    * @param[in]  bindings_email_name QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  messaging_service_sid QString [optional]
    * @param[in]  state OAIConversation_enum_state [optional]
    * @param[in]  timers_closed QString [optional]
    * @param[in]  timers_inactive QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateConversation(const QString &sid, const ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIConversation_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIConversation_enum_state>(), const ::OpenAPI::OptionalParam<QString> &timers_closed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timers_inactive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  x_twilio_webhook_enabled OAIService_conversation_enum_webhook_enabled_type [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  bindings_email_address QString [optional]
    * @param[in]  bindings_email_name QString [optional]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_updated QDateTime [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  messaging_service_sid QString [optional]
    * @param[in]  state OAIService_conversation_enum_state [optional]
    * @param[in]  timers_closed QString [optional]
    * @param[in]  timers_inactive QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateServiceConversation(const QString &chat_service_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type> &x_twilio_webhook_enabled = ::OpenAPI::OptionalParam<OAIService_conversation_enum_webhook_enabled_type>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bindings_email_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_updated = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &messaging_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIService_conversation_enum_state> &state = ::OpenAPI::OptionalParam<OAIService_conversation_enum_state>(), const ::OpenAPI::OptionalParam<QString> &timers_closed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timers_inactive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConversationCallback(OAIHttpRequestWorker *worker);
    void createServiceConversationCallback(OAIHttpRequestWorker *worker);
    void deleteConversationCallback(OAIHttpRequestWorker *worker);
    void deleteServiceConversationCallback(OAIHttpRequestWorker *worker);
    void fetchConversationCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConversationCallback(OAIHttpRequestWorker *worker);
    void listConversationCallback(OAIHttpRequestWorker *worker);
    void listServiceConversationCallback(OAIHttpRequestWorker *worker);
    void updateConversationCallback(OAIHttpRequestWorker *worker);
    void updateServiceConversationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConversationSignal(OAIConversations_v1_conversation summary);
    void createServiceConversationSignal(OAIConversations_v1_service_service_conversation summary);
    void deleteConversationSignal();
    void deleteServiceConversationSignal();
    void fetchConversationSignal(OAIConversations_v1_conversation summary);
    void fetchServiceConversationSignal(OAIConversations_v1_service_service_conversation summary);
    void listConversationSignal(OAIListConversationResponse summary);
    void listServiceConversationSignal(OAIListServiceConversationResponse summary);
    void updateConversationSignal(OAIConversations_v1_conversation summary);
    void updateServiceConversationSignal(OAIConversations_v1_service_service_conversation summary);


    void createConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation summary);
    void createServiceConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation summary);
    void deleteConversationSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceConversationSignalFull(OAIHttpRequestWorker *worker);
    void fetchConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation summary);
    void fetchServiceConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation summary);
    void listConversationSignalFull(OAIHttpRequestWorker *worker, OAIListConversationResponse summary);
    void listServiceConversationSignalFull(OAIHttpRequestWorker *worker, OAIListServiceConversationResponse summary);
    void updateConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation summary);
    void updateServiceConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation summary);

    Q_DECL_DEPRECATED_X("Use createConversationSignalError() instead")
    void createConversationSignalE(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationSignalError(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationSignalError() instead")
    void createServiceConversationSignalE(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationSignalError(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationSignalError() instead")
    void deleteConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationSignalError() instead")
    void deleteServiceConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationSignalError() instead")
    void fetchConversationSignalE(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationSignalError(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationSignalError() instead")
    void fetchServiceConversationSignalE(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationSignalError(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationSignalError() instead")
    void listConversationSignalE(OAIListConversationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationSignalError(OAIListConversationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationSignalError() instead")
    void listServiceConversationSignalE(OAIListServiceConversationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationSignalError(OAIListServiceConversationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationSignalError() instead")
    void updateConversationSignalE(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationSignalError(OAIConversations_v1_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationSignalError() instead")
    void updateServiceConversationSignalE(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationSignalError(OAIConversations_v1_service_service_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConversationSignalErrorFull() instead")
    void createConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceConversationSignalErrorFull() instead")
    void createServiceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConversationSignalErrorFull() instead")
    void deleteConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceConversationSignalErrorFull() instead")
    void deleteServiceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConversationSignalErrorFull() instead")
    void fetchConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationSignalErrorFull() instead")
    void fetchServiceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationSignalErrorFull() instead")
    void listConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationSignalErrorFull() instead")
    void listServiceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationSignalErrorFull() instead")
    void updateConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceConversationSignalErrorFull() instead")
    void updateServiceConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
