/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1AddressConfigurationApi_H
#define OAI_OAIConversationsV1AddressConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfiguration_address_enum_auto_creation_type.h"
#include "OAIConfiguration_address_enum_method.h"
#include "OAIConfiguration_address_enum_type.h"
#include "OAIConversations_v1_configuration_address.h"
#include "OAIListConfigurationAddressResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1AddressConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1AddressConfigurationApi(const int timeOut = 0);
    ~OAIConversationsV1AddressConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [required]
    * @param[in]  type OAIConfiguration_address_enum_type [required]
    * @param[in]  address_country QString [optional]
    * @param[in]  auto_creation_conversation_service_sid QString [optional]
    * @param[in]  auto_creation_enabled bool [optional]
    * @param[in]  auto_creation_studio_flow_sid QString [optional]
    * @param[in]  auto_creation_studio_retry_count qint32 [optional]
    * @param[in]  auto_creation_type OAIConfiguration_address_enum_auto_creation_type [optional]
    * @param[in]  auto_creation_webhook_filters QList<QString> [optional]
    * @param[in]  auto_creation_webhook_method OAIConfiguration_address_enum_method [optional]
    * @param[in]  auto_creation_webhook_url QString [optional]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void createConfigurationAddress(const QString &address, const OAIConfiguration_address_enum_type &type, const ::OpenAPI::OptionalParam<QString> &address_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_creation_conversation_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_creation_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &auto_creation_studio_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &auto_creation_studio_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_auto_creation_type> &auto_creation_type = ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_auto_creation_type>(), const ::OpenAPI::OptionalParam<QList<QString>> &auto_creation_webhook_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_method> &auto_creation_webhook_method = ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_method>(), const ::OpenAPI::OptionalParam<QString> &auto_creation_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteConfigurationAddress(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchConfigurationAddress(const QString &sid);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConfigurationAddress(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  auto_creation_conversation_service_sid QString [optional]
    * @param[in]  auto_creation_enabled bool [optional]
    * @param[in]  auto_creation_studio_flow_sid QString [optional]
    * @param[in]  auto_creation_studio_retry_count qint32 [optional]
    * @param[in]  auto_creation_type OAIConfiguration_address_enum_auto_creation_type [optional]
    * @param[in]  auto_creation_webhook_filters QList<QString> [optional]
    * @param[in]  auto_creation_webhook_method OAIConfiguration_address_enum_method [optional]
    * @param[in]  auto_creation_webhook_url QString [optional]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void updateConfigurationAddress(const QString &sid, const ::OpenAPI::OptionalParam<QString> &auto_creation_conversation_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_creation_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &auto_creation_studio_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &auto_creation_studio_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_auto_creation_type> &auto_creation_type = ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_auto_creation_type>(), const ::OpenAPI::OptionalParam<QList<QString>> &auto_creation_webhook_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_method> &auto_creation_webhook_method = ::OpenAPI::OptionalParam<OAIConfiguration_address_enum_method>(), const ::OpenAPI::OptionalParam<QString> &auto_creation_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConfigurationAddressCallback(OAIHttpRequestWorker *worker);
    void deleteConfigurationAddressCallback(OAIHttpRequestWorker *worker);
    void fetchConfigurationAddressCallback(OAIHttpRequestWorker *worker);
    void listConfigurationAddressCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConfigurationAddressSignal(OAIConversations_v1_configuration_address summary);
    void deleteConfigurationAddressSignal();
    void fetchConfigurationAddressSignal(OAIConversations_v1_configuration_address summary);
    void listConfigurationAddressSignal(OAIListConfigurationAddressResponse summary);
    void updateConfigurationAddressSignal(OAIConversations_v1_configuration_address summary);


    void createConfigurationAddressSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration_address summary);
    void deleteConfigurationAddressSignalFull(OAIHttpRequestWorker *worker);
    void fetchConfigurationAddressSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration_address summary);
    void listConfigurationAddressSignalFull(OAIHttpRequestWorker *worker, OAIListConfigurationAddressResponse summary);
    void updateConfigurationAddressSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_configuration_address summary);

    Q_DECL_DEPRECATED_X("Use createConfigurationAddressSignalError() instead")
    void createConfigurationAddressSignalE(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConfigurationAddressSignalError(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConfigurationAddressSignalError() instead")
    void deleteConfigurationAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConfigurationAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConfigurationAddressSignalError() instead")
    void fetchConfigurationAddressSignalE(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationAddressSignalError(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConfigurationAddressSignalError() instead")
    void listConfigurationAddressSignalE(OAIListConfigurationAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConfigurationAddressSignalError(OAIListConfigurationAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationAddressSignalError() instead")
    void updateConfigurationAddressSignalE(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationAddressSignalError(OAIConversations_v1_configuration_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConfigurationAddressSignalErrorFull() instead")
    void createConfigurationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConfigurationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConfigurationAddressSignalErrorFull() instead")
    void deleteConfigurationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConfigurationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConfigurationAddressSignalErrorFull() instead")
    void fetchConfigurationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConfigurationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConfigurationAddressSignalErrorFull() instead")
    void listConfigurationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConfigurationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigurationAddressSignalErrorFull() instead")
    void updateConfigurationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
