/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_configuration::OAIConversations_v1_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_configuration::OAIConversations_v1_configuration() {
    this->initializeModel();
}

OAIConversations_v1_configuration::~OAIConversations_v1_configuration() {}

void OAIConversations_v1_configuration::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_default_chat_service_sid_isSet = false;
    m_default_chat_service_sid_isValid = false;

    m_default_closed_timer_isSet = false;
    m_default_closed_timer_isValid = false;

    m_default_inactive_timer_isSet = false;
    m_default_inactive_timer_isValid = false;

    m_default_messaging_service_sid_isSet = false;
    m_default_messaging_service_sid_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_configuration::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_default_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_default_chat_service_sid, json[QString("default_chat_service_sid")]);
    m_default_chat_service_sid_isSet = !json[QString("default_chat_service_sid")].isNull() && m_default_chat_service_sid_isValid;

    m_default_closed_timer_isValid = ::OpenAPI::fromJsonValue(m_default_closed_timer, json[QString("default_closed_timer")]);
    m_default_closed_timer_isSet = !json[QString("default_closed_timer")].isNull() && m_default_closed_timer_isValid;

    m_default_inactive_timer_isValid = ::OpenAPI::fromJsonValue(m_default_inactive_timer, json[QString("default_inactive_timer")]);
    m_default_inactive_timer_isSet = !json[QString("default_inactive_timer")].isNull() && m_default_inactive_timer_isValid;

    m_default_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_default_messaging_service_sid, json[QString("default_messaging_service_sid")]);
    m_default_messaging_service_sid_isSet = !json[QString("default_messaging_service_sid")].isNull() && m_default_messaging_service_sid_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_default_chat_service_sid_isSet) {
        obj.insert(QString("default_chat_service_sid"), ::OpenAPI::toJsonValue(m_default_chat_service_sid));
    }
    if (m_default_closed_timer_isSet) {
        obj.insert(QString("default_closed_timer"), ::OpenAPI::toJsonValue(m_default_closed_timer));
    }
    if (m_default_inactive_timer_isSet) {
        obj.insert(QString("default_inactive_timer"), ::OpenAPI::toJsonValue(m_default_inactive_timer));
    }
    if (m_default_messaging_service_sid_isSet) {
        obj.insert(QString("default_messaging_service_sid"), ::OpenAPI::toJsonValue(m_default_messaging_service_sid));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_configuration::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_configuration::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_configuration::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_configuration::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_configuration::getDefaultChatServiceSid() const {
    return m_default_chat_service_sid;
}
void OAIConversations_v1_configuration::setDefaultChatServiceSid(const QString &default_chat_service_sid) {
    m_default_chat_service_sid = default_chat_service_sid;
    m_default_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_configuration::is_default_chat_service_sid_Set() const{
    return m_default_chat_service_sid_isSet;
}

bool OAIConversations_v1_configuration::is_default_chat_service_sid_Valid() const{
    return m_default_chat_service_sid_isValid;
}

QString OAIConversations_v1_configuration::getDefaultClosedTimer() const {
    return m_default_closed_timer;
}
void OAIConversations_v1_configuration::setDefaultClosedTimer(const QString &default_closed_timer) {
    m_default_closed_timer = default_closed_timer;
    m_default_closed_timer_isSet = true;
}

bool OAIConversations_v1_configuration::is_default_closed_timer_Set() const{
    return m_default_closed_timer_isSet;
}

bool OAIConversations_v1_configuration::is_default_closed_timer_Valid() const{
    return m_default_closed_timer_isValid;
}

QString OAIConversations_v1_configuration::getDefaultInactiveTimer() const {
    return m_default_inactive_timer;
}
void OAIConversations_v1_configuration::setDefaultInactiveTimer(const QString &default_inactive_timer) {
    m_default_inactive_timer = default_inactive_timer;
    m_default_inactive_timer_isSet = true;
}

bool OAIConversations_v1_configuration::is_default_inactive_timer_Set() const{
    return m_default_inactive_timer_isSet;
}

bool OAIConversations_v1_configuration::is_default_inactive_timer_Valid() const{
    return m_default_inactive_timer_isValid;
}

QString OAIConversations_v1_configuration::getDefaultMessagingServiceSid() const {
    return m_default_messaging_service_sid;
}
void OAIConversations_v1_configuration::setDefaultMessagingServiceSid(const QString &default_messaging_service_sid) {
    m_default_messaging_service_sid = default_messaging_service_sid;
    m_default_messaging_service_sid_isSet = true;
}

bool OAIConversations_v1_configuration::is_default_messaging_service_sid_Set() const{
    return m_default_messaging_service_sid_isSet;
}

bool OAIConversations_v1_configuration::is_default_messaging_service_sid_Valid() const{
    return m_default_messaging_service_sid_isValid;
}

OAIObject OAIConversations_v1_configuration::getLinks() const {
    return m_links;
}
void OAIConversations_v1_configuration::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_configuration::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_configuration::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIConversations_v1_configuration::getUrl() const {
    return m_url;
}
void OAIConversations_v1_configuration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_configuration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_configuration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_closed_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_inactive_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
