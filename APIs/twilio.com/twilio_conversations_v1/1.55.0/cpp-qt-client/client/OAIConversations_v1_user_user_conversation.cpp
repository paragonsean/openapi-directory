/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_user_user_conversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_user_user_conversation::OAIConversations_v1_user_user_conversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_user_user_conversation::OAIConversations_v1_user_user_conversation() {
    this->initializeModel();
}

OAIConversations_v1_user_user_conversation::~OAIConversations_v1_user_user_conversation() {}

void OAIConversations_v1_user_user_conversation::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_conversation_sid_isSet = false;
    m_conversation_sid_isValid = false;

    m_conversation_state_isSet = false;
    m_conversation_state_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_read_message_index_isSet = false;
    m_last_read_message_index_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notification_level_isSet = false;
    m_notification_level_isValid = false;

    m_participant_sid_isSet = false;
    m_participant_sid_isValid = false;

    m_timers_isSet = false;
    m_timers_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_unread_messages_count_isSet = false;
    m_unread_messages_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_sid_isSet = false;
    m_user_sid_isValid = false;
}

void OAIConversations_v1_user_user_conversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_user_user_conversation::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_conversation_sid_isValid = ::OpenAPI::fromJsonValue(m_conversation_sid, json[QString("conversation_sid")]);
    m_conversation_sid_isSet = !json[QString("conversation_sid")].isNull() && m_conversation_sid_isValid;

    m_conversation_state_isValid = ::OpenAPI::fromJsonValue(m_conversation_state, json[QString("conversation_state")]);
    m_conversation_state_isSet = !json[QString("conversation_state")].isNull() && m_conversation_state_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_last_read_message_index_isValid = ::OpenAPI::fromJsonValue(m_last_read_message_index, json[QString("last_read_message_index")]);
    m_last_read_message_index_isSet = !json[QString("last_read_message_index")].isNull() && m_last_read_message_index_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notification_level_isValid = ::OpenAPI::fromJsonValue(m_notification_level, json[QString("notification_level")]);
    m_notification_level_isSet = !json[QString("notification_level")].isNull() && m_notification_level_isValid;

    m_participant_sid_isValid = ::OpenAPI::fromJsonValue(m_participant_sid, json[QString("participant_sid")]);
    m_participant_sid_isSet = !json[QString("participant_sid")].isNull() && m_participant_sid_isValid;

    m_timers_isValid = ::OpenAPI::fromJsonValue(m_timers, json[QString("timers")]);
    m_timers_isSet = !json[QString("timers")].isNull() && m_timers_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_unread_messages_count_isValid = ::OpenAPI::fromJsonValue(m_unread_messages_count, json[QString("unread_messages_count")]);
    m_unread_messages_count_isSet = !json[QString("unread_messages_count")].isNull() && m_unread_messages_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_sid_isValid = ::OpenAPI::fromJsonValue(m_user_sid, json[QString("user_sid")]);
    m_user_sid_isSet = !json[QString("user_sid")].isNull() && m_user_sid_isValid;
}

QString OAIConversations_v1_user_user_conversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_user_user_conversation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_conversation_sid_isSet) {
        obj.insert(QString("conversation_sid"), ::OpenAPI::toJsonValue(m_conversation_sid));
    }
    if (m_conversation_state.isSet()) {
        obj.insert(QString("conversation_state"), ::OpenAPI::toJsonValue(m_conversation_state));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_read_message_index_isSet) {
        obj.insert(QString("last_read_message_index"), ::OpenAPI::toJsonValue(m_last_read_message_index));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notification_level.isSet()) {
        obj.insert(QString("notification_level"), ::OpenAPI::toJsonValue(m_notification_level));
    }
    if (m_participant_sid_isSet) {
        obj.insert(QString("participant_sid"), ::OpenAPI::toJsonValue(m_participant_sid));
    }
    if (m_timers_isSet) {
        obj.insert(QString("timers"), ::OpenAPI::toJsonValue(m_timers));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_unread_messages_count_isSet) {
        obj.insert(QString("unread_messages_count"), ::OpenAPI::toJsonValue(m_unread_messages_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_sid_isSet) {
        obj.insert(QString("user_sid"), ::OpenAPI::toJsonValue(m_user_sid));
    }
    return obj;
}

QString OAIConversations_v1_user_user_conversation::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_user_user_conversation::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_user_user_conversation::getAttributes() const {
    return m_attributes;
}
void OAIConversations_v1_user_user_conversation::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIConversations_v1_user_user_conversation::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_user_user_conversation::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QString OAIConversations_v1_user_user_conversation::getConversationSid() const {
    return m_conversation_sid;
}
void OAIConversations_v1_user_user_conversation::setConversationSid(const QString &conversation_sid) {
    m_conversation_sid = conversation_sid;
    m_conversation_sid_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_conversation_sid_Set() const{
    return m_conversation_sid_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_conversation_sid_Valid() const{
    return m_conversation_sid_isValid;
}

OAIUser_conversation_enum_state OAIConversations_v1_user_user_conversation::getConversationState() const {
    return m_conversation_state;
}
void OAIConversations_v1_user_user_conversation::setConversationState(const OAIUser_conversation_enum_state &conversation_state) {
    m_conversation_state = conversation_state;
    m_conversation_state_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_conversation_state_Set() const{
    return m_conversation_state_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_conversation_state_Valid() const{
    return m_conversation_state_isValid;
}

QString OAIConversations_v1_user_user_conversation::getCreatedBy() const {
    return m_created_by;
}
void OAIConversations_v1_user_user_conversation::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIConversations_v1_user_user_conversation::getDateCreated() const {
    return m_date_created;
}
void OAIConversations_v1_user_user_conversation::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIConversations_v1_user_user_conversation::getDateUpdated() const {
    return m_date_updated;
}
void OAIConversations_v1_user_user_conversation::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIConversations_v1_user_user_conversation::getFriendlyName() const {
    return m_friendly_name;
}
void OAIConversations_v1_user_user_conversation::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

qint32 OAIConversations_v1_user_user_conversation::getLastReadMessageIndex() const {
    return m_last_read_message_index;
}
void OAIConversations_v1_user_user_conversation::setLastReadMessageIndex(const qint32 &last_read_message_index) {
    m_last_read_message_index = last_read_message_index;
    m_last_read_message_index_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_last_read_message_index_Set() const{
    return m_last_read_message_index_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_last_read_message_index_Valid() const{
    return m_last_read_message_index_isValid;
}

OAIObject OAIConversations_v1_user_user_conversation::getLinks() const {
    return m_links;
}
void OAIConversations_v1_user_user_conversation::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_links_Valid() const{
    return m_links_isValid;
}

OAIUser_conversation_enum_notification_level OAIConversations_v1_user_user_conversation::getNotificationLevel() const {
    return m_notification_level;
}
void OAIConversations_v1_user_user_conversation::setNotificationLevel(const OAIUser_conversation_enum_notification_level &notification_level) {
    m_notification_level = notification_level;
    m_notification_level_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_notification_level_Set() const{
    return m_notification_level_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_notification_level_Valid() const{
    return m_notification_level_isValid;
}

QString OAIConversations_v1_user_user_conversation::getParticipantSid() const {
    return m_participant_sid;
}
void OAIConversations_v1_user_user_conversation::setParticipantSid(const QString &participant_sid) {
    m_participant_sid = participant_sid;
    m_participant_sid_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_participant_sid_Set() const{
    return m_participant_sid_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_participant_sid_Valid() const{
    return m_participant_sid_isValid;
}

QJsonValue OAIConversations_v1_user_user_conversation::getTimers() const {
    return m_timers;
}
void OAIConversations_v1_user_user_conversation::setTimers(const QJsonValue &timers) {
    m_timers = timers;
    m_timers_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_timers_Set() const{
    return m_timers_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_timers_Valid() const{
    return m_timers_isValid;
}

QString OAIConversations_v1_user_user_conversation::getUniqueName() const {
    return m_unique_name;
}
void OAIConversations_v1_user_user_conversation::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

qint32 OAIConversations_v1_user_user_conversation::getUnreadMessagesCount() const {
    return m_unread_messages_count;
}
void OAIConversations_v1_user_user_conversation::setUnreadMessagesCount(const qint32 &unread_messages_count) {
    m_unread_messages_count = unread_messages_count;
    m_unread_messages_count_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_unread_messages_count_Set() const{
    return m_unread_messages_count_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_unread_messages_count_Valid() const{
    return m_unread_messages_count_isValid;
}

QString OAIConversations_v1_user_user_conversation::getUrl() const {
    return m_url;
}
void OAIConversations_v1_user_user_conversation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIConversations_v1_user_user_conversation::getUserSid() const {
    return m_user_sid;
}
void OAIConversations_v1_user_user_conversation::setUserSid(const QString &user_sid) {
    m_user_sid = user_sid;
    m_user_sid_isSet = true;
}

bool OAIConversations_v1_user_user_conversation::is_user_sid_Set() const{
    return m_user_sid_isSet;
}

bool OAIConversations_v1_user_user_conversation::is_user_sid_Valid() const{
    return m_user_sid_isValid;
}

bool OAIConversations_v1_user_user_conversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_message_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_messages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_user_user_conversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
