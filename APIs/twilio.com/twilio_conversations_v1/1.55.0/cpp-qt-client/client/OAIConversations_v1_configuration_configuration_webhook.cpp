/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_configuration_configuration_webhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_configuration_configuration_webhook::OAIConversations_v1_configuration_configuration_webhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_configuration_configuration_webhook::OAIConversations_v1_configuration_configuration_webhook() {
    this->initializeModel();
}

OAIConversations_v1_configuration_configuration_webhook::~OAIConversations_v1_configuration_configuration_webhook() {}

void OAIConversations_v1_configuration_configuration_webhook::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_post_webhook_url_isSet = false;
    m_post_webhook_url_isValid = false;

    m_pre_webhook_url_isSet = false;
    m_pre_webhook_url_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_configuration_configuration_webhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_configuration_configuration_webhook::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_post_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_post_webhook_url, json[QString("post_webhook_url")]);
    m_post_webhook_url_isSet = !json[QString("post_webhook_url")].isNull() && m_post_webhook_url_isValid;

    m_pre_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_pre_webhook_url, json[QString("pre_webhook_url")]);
    m_pre_webhook_url_isSet = !json[QString("pre_webhook_url")].isNull() && m_pre_webhook_url_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_configuration_configuration_webhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_configuration_configuration_webhook::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_post_webhook_url_isSet) {
        obj.insert(QString("post_webhook_url"), ::OpenAPI::toJsonValue(m_post_webhook_url));
    }
    if (m_pre_webhook_url_isSet) {
        obj.insert(QString("pre_webhook_url"), ::OpenAPI::toJsonValue(m_pre_webhook_url));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_configuration_configuration_webhook::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_configuration_configuration_webhook::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QString> OAIConversations_v1_configuration_configuration_webhook::getFilters() const {
    return m_filters;
}
void OAIConversations_v1_configuration_configuration_webhook::setFilters(const QList<QString> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIConfiguration_webhook_enum_method OAIConversations_v1_configuration_configuration_webhook::getMethod() const {
    return m_method;
}
void OAIConversations_v1_configuration_configuration_webhook::setMethod(const OAIConfiguration_webhook_enum_method &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_method_Set() const{
    return m_method_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIConversations_v1_configuration_configuration_webhook::getPostWebhookUrl() const {
    return m_post_webhook_url;
}
void OAIConversations_v1_configuration_configuration_webhook::setPostWebhookUrl(const QString &post_webhook_url) {
    m_post_webhook_url = post_webhook_url;
    m_post_webhook_url_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_post_webhook_url_Set() const{
    return m_post_webhook_url_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_post_webhook_url_Valid() const{
    return m_post_webhook_url_isValid;
}

QString OAIConversations_v1_configuration_configuration_webhook::getPreWebhookUrl() const {
    return m_pre_webhook_url;
}
void OAIConversations_v1_configuration_configuration_webhook::setPreWebhookUrl(const QString &pre_webhook_url) {
    m_pre_webhook_url = pre_webhook_url;
    m_pre_webhook_url_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_pre_webhook_url_Set() const{
    return m_pre_webhook_url_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_pre_webhook_url_Valid() const{
    return m_pre_webhook_url_isValid;
}

OAIConfiguration_webhook_enum_target OAIConversations_v1_configuration_configuration_webhook::getTarget() const {
    return m_target;
}
void OAIConversations_v1_configuration_configuration_webhook::setTarget(const OAIConfiguration_webhook_enum_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_target_Set() const{
    return m_target_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIConversations_v1_configuration_configuration_webhook::getUrl() const {
    return m_url;
}
void OAIConversations_v1_configuration_configuration_webhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_configuration_configuration_webhook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_configuration_configuration_webhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_configuration_configuration_webhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
