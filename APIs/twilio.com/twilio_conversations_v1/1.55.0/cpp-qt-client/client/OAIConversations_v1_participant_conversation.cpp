/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_participant_conversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_participant_conversation::OAIConversations_v1_participant_conversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_participant_conversation::OAIConversations_v1_participant_conversation() {
    this->initializeModel();
}

OAIConversations_v1_participant_conversation::~OAIConversations_v1_participant_conversation() {}

void OAIConversations_v1_participant_conversation::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_conversation_attributes_isSet = false;
    m_conversation_attributes_isValid = false;

    m_conversation_created_by_isSet = false;
    m_conversation_created_by_isValid = false;

    m_conversation_date_created_isSet = false;
    m_conversation_date_created_isValid = false;

    m_conversation_date_updated_isSet = false;
    m_conversation_date_updated_isValid = false;

    m_conversation_friendly_name_isSet = false;
    m_conversation_friendly_name_isValid = false;

    m_conversation_sid_isSet = false;
    m_conversation_sid_isValid = false;

    m_conversation_state_isSet = false;
    m_conversation_state_isValid = false;

    m_conversation_timers_isSet = false;
    m_conversation_timers_isValid = false;

    m_conversation_unique_name_isSet = false;
    m_conversation_unique_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_participant_identity_isSet = false;
    m_participant_identity_isValid = false;

    m_participant_messaging_binding_isSet = false;
    m_participant_messaging_binding_isValid = false;

    m_participant_sid_isSet = false;
    m_participant_sid_isValid = false;

    m_participant_user_sid_isSet = false;
    m_participant_user_sid_isValid = false;
}

void OAIConversations_v1_participant_conversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_participant_conversation::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_conversation_attributes_isValid = ::OpenAPI::fromJsonValue(m_conversation_attributes, json[QString("conversation_attributes")]);
    m_conversation_attributes_isSet = !json[QString("conversation_attributes")].isNull() && m_conversation_attributes_isValid;

    m_conversation_created_by_isValid = ::OpenAPI::fromJsonValue(m_conversation_created_by, json[QString("conversation_created_by")]);
    m_conversation_created_by_isSet = !json[QString("conversation_created_by")].isNull() && m_conversation_created_by_isValid;

    m_conversation_date_created_isValid = ::OpenAPI::fromJsonValue(m_conversation_date_created, json[QString("conversation_date_created")]);
    m_conversation_date_created_isSet = !json[QString("conversation_date_created")].isNull() && m_conversation_date_created_isValid;

    m_conversation_date_updated_isValid = ::OpenAPI::fromJsonValue(m_conversation_date_updated, json[QString("conversation_date_updated")]);
    m_conversation_date_updated_isSet = !json[QString("conversation_date_updated")].isNull() && m_conversation_date_updated_isValid;

    m_conversation_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_conversation_friendly_name, json[QString("conversation_friendly_name")]);
    m_conversation_friendly_name_isSet = !json[QString("conversation_friendly_name")].isNull() && m_conversation_friendly_name_isValid;

    m_conversation_sid_isValid = ::OpenAPI::fromJsonValue(m_conversation_sid, json[QString("conversation_sid")]);
    m_conversation_sid_isSet = !json[QString("conversation_sid")].isNull() && m_conversation_sid_isValid;

    m_conversation_state_isValid = ::OpenAPI::fromJsonValue(m_conversation_state, json[QString("conversation_state")]);
    m_conversation_state_isSet = !json[QString("conversation_state")].isNull() && m_conversation_state_isValid;

    m_conversation_timers_isValid = ::OpenAPI::fromJsonValue(m_conversation_timers, json[QString("conversation_timers")]);
    m_conversation_timers_isSet = !json[QString("conversation_timers")].isNull() && m_conversation_timers_isValid;

    m_conversation_unique_name_isValid = ::OpenAPI::fromJsonValue(m_conversation_unique_name, json[QString("conversation_unique_name")]);
    m_conversation_unique_name_isSet = !json[QString("conversation_unique_name")].isNull() && m_conversation_unique_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_participant_identity_isValid = ::OpenAPI::fromJsonValue(m_participant_identity, json[QString("participant_identity")]);
    m_participant_identity_isSet = !json[QString("participant_identity")].isNull() && m_participant_identity_isValid;

    m_participant_messaging_binding_isValid = ::OpenAPI::fromJsonValue(m_participant_messaging_binding, json[QString("participant_messaging_binding")]);
    m_participant_messaging_binding_isSet = !json[QString("participant_messaging_binding")].isNull() && m_participant_messaging_binding_isValid;

    m_participant_sid_isValid = ::OpenAPI::fromJsonValue(m_participant_sid, json[QString("participant_sid")]);
    m_participant_sid_isSet = !json[QString("participant_sid")].isNull() && m_participant_sid_isValid;

    m_participant_user_sid_isValid = ::OpenAPI::fromJsonValue(m_participant_user_sid, json[QString("participant_user_sid")]);
    m_participant_user_sid_isSet = !json[QString("participant_user_sid")].isNull() && m_participant_user_sid_isValid;
}

QString OAIConversations_v1_participant_conversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_participant_conversation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_conversation_attributes_isSet) {
        obj.insert(QString("conversation_attributes"), ::OpenAPI::toJsonValue(m_conversation_attributes));
    }
    if (m_conversation_created_by_isSet) {
        obj.insert(QString("conversation_created_by"), ::OpenAPI::toJsonValue(m_conversation_created_by));
    }
    if (m_conversation_date_created_isSet) {
        obj.insert(QString("conversation_date_created"), ::OpenAPI::toJsonValue(m_conversation_date_created));
    }
    if (m_conversation_date_updated_isSet) {
        obj.insert(QString("conversation_date_updated"), ::OpenAPI::toJsonValue(m_conversation_date_updated));
    }
    if (m_conversation_friendly_name_isSet) {
        obj.insert(QString("conversation_friendly_name"), ::OpenAPI::toJsonValue(m_conversation_friendly_name));
    }
    if (m_conversation_sid_isSet) {
        obj.insert(QString("conversation_sid"), ::OpenAPI::toJsonValue(m_conversation_sid));
    }
    if (m_conversation_state.isSet()) {
        obj.insert(QString("conversation_state"), ::OpenAPI::toJsonValue(m_conversation_state));
    }
    if (m_conversation_timers_isSet) {
        obj.insert(QString("conversation_timers"), ::OpenAPI::toJsonValue(m_conversation_timers));
    }
    if (m_conversation_unique_name_isSet) {
        obj.insert(QString("conversation_unique_name"), ::OpenAPI::toJsonValue(m_conversation_unique_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_participant_identity_isSet) {
        obj.insert(QString("participant_identity"), ::OpenAPI::toJsonValue(m_participant_identity));
    }
    if (m_participant_messaging_binding_isSet) {
        obj.insert(QString("participant_messaging_binding"), ::OpenAPI::toJsonValue(m_participant_messaging_binding));
    }
    if (m_participant_sid_isSet) {
        obj.insert(QString("participant_sid"), ::OpenAPI::toJsonValue(m_participant_sid));
    }
    if (m_participant_user_sid_isSet) {
        obj.insert(QString("participant_user_sid"), ::OpenAPI::toJsonValue(m_participant_user_sid));
    }
    return obj;
}

QString OAIConversations_v1_participant_conversation::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_participant_conversation::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_participant_conversation::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_participant_conversation::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_participant_conversation::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_participant_conversation::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QString OAIConversations_v1_participant_conversation::getConversationAttributes() const {
    return m_conversation_attributes;
}
void OAIConversations_v1_participant_conversation::setConversationAttributes(const QString &conversation_attributes) {
    m_conversation_attributes = conversation_attributes;
    m_conversation_attributes_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_attributes_Set() const{
    return m_conversation_attributes_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_attributes_Valid() const{
    return m_conversation_attributes_isValid;
}

QString OAIConversations_v1_participant_conversation::getConversationCreatedBy() const {
    return m_conversation_created_by;
}
void OAIConversations_v1_participant_conversation::setConversationCreatedBy(const QString &conversation_created_by) {
    m_conversation_created_by = conversation_created_by;
    m_conversation_created_by_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_created_by_Set() const{
    return m_conversation_created_by_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_created_by_Valid() const{
    return m_conversation_created_by_isValid;
}

QDateTime OAIConversations_v1_participant_conversation::getConversationDateCreated() const {
    return m_conversation_date_created;
}
void OAIConversations_v1_participant_conversation::setConversationDateCreated(const QDateTime &conversation_date_created) {
    m_conversation_date_created = conversation_date_created;
    m_conversation_date_created_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_date_created_Set() const{
    return m_conversation_date_created_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_date_created_Valid() const{
    return m_conversation_date_created_isValid;
}

QDateTime OAIConversations_v1_participant_conversation::getConversationDateUpdated() const {
    return m_conversation_date_updated;
}
void OAIConversations_v1_participant_conversation::setConversationDateUpdated(const QDateTime &conversation_date_updated) {
    m_conversation_date_updated = conversation_date_updated;
    m_conversation_date_updated_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_date_updated_Set() const{
    return m_conversation_date_updated_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_date_updated_Valid() const{
    return m_conversation_date_updated_isValid;
}

QString OAIConversations_v1_participant_conversation::getConversationFriendlyName() const {
    return m_conversation_friendly_name;
}
void OAIConversations_v1_participant_conversation::setConversationFriendlyName(const QString &conversation_friendly_name) {
    m_conversation_friendly_name = conversation_friendly_name;
    m_conversation_friendly_name_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_friendly_name_Set() const{
    return m_conversation_friendly_name_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_friendly_name_Valid() const{
    return m_conversation_friendly_name_isValid;
}

QString OAIConversations_v1_participant_conversation::getConversationSid() const {
    return m_conversation_sid;
}
void OAIConversations_v1_participant_conversation::setConversationSid(const QString &conversation_sid) {
    m_conversation_sid = conversation_sid;
    m_conversation_sid_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_sid_Set() const{
    return m_conversation_sid_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_sid_Valid() const{
    return m_conversation_sid_isValid;
}

OAIParticipant_conversation_enum_state OAIConversations_v1_participant_conversation::getConversationState() const {
    return m_conversation_state;
}
void OAIConversations_v1_participant_conversation::setConversationState(const OAIParticipant_conversation_enum_state &conversation_state) {
    m_conversation_state = conversation_state;
    m_conversation_state_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_state_Set() const{
    return m_conversation_state_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_state_Valid() const{
    return m_conversation_state_isValid;
}

QJsonValue OAIConversations_v1_participant_conversation::getConversationTimers() const {
    return m_conversation_timers;
}
void OAIConversations_v1_participant_conversation::setConversationTimers(const QJsonValue &conversation_timers) {
    m_conversation_timers = conversation_timers;
    m_conversation_timers_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_timers_Set() const{
    return m_conversation_timers_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_timers_Valid() const{
    return m_conversation_timers_isValid;
}

QString OAIConversations_v1_participant_conversation::getConversationUniqueName() const {
    return m_conversation_unique_name;
}
void OAIConversations_v1_participant_conversation::setConversationUniqueName(const QString &conversation_unique_name) {
    m_conversation_unique_name = conversation_unique_name;
    m_conversation_unique_name_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_conversation_unique_name_Set() const{
    return m_conversation_unique_name_isSet;
}

bool OAIConversations_v1_participant_conversation::is_conversation_unique_name_Valid() const{
    return m_conversation_unique_name_isValid;
}

OAIObject OAIConversations_v1_participant_conversation::getLinks() const {
    return m_links;
}
void OAIConversations_v1_participant_conversation::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_participant_conversation::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIConversations_v1_participant_conversation::getParticipantIdentity() const {
    return m_participant_identity;
}
void OAIConversations_v1_participant_conversation::setParticipantIdentity(const QString &participant_identity) {
    m_participant_identity = participant_identity;
    m_participant_identity_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_participant_identity_Set() const{
    return m_participant_identity_isSet;
}

bool OAIConversations_v1_participant_conversation::is_participant_identity_Valid() const{
    return m_participant_identity_isValid;
}

QJsonValue OAIConversations_v1_participant_conversation::getParticipantMessagingBinding() const {
    return m_participant_messaging_binding;
}
void OAIConversations_v1_participant_conversation::setParticipantMessagingBinding(const QJsonValue &participant_messaging_binding) {
    m_participant_messaging_binding = participant_messaging_binding;
    m_participant_messaging_binding_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_participant_messaging_binding_Set() const{
    return m_participant_messaging_binding_isSet;
}

bool OAIConversations_v1_participant_conversation::is_participant_messaging_binding_Valid() const{
    return m_participant_messaging_binding_isValid;
}

QString OAIConversations_v1_participant_conversation::getParticipantSid() const {
    return m_participant_sid;
}
void OAIConversations_v1_participant_conversation::setParticipantSid(const QString &participant_sid) {
    m_participant_sid = participant_sid;
    m_participant_sid_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_participant_sid_Set() const{
    return m_participant_sid_isSet;
}

bool OAIConversations_v1_participant_conversation::is_participant_sid_Valid() const{
    return m_participant_sid_isValid;
}

QString OAIConversations_v1_participant_conversation::getParticipantUserSid() const {
    return m_participant_user_sid;
}
void OAIConversations_v1_participant_conversation::setParticipantUserSid(const QString &participant_user_sid) {
    m_participant_user_sid = participant_user_sid;
    m_participant_user_sid_isSet = true;
}

bool OAIConversations_v1_participant_conversation::is_participant_user_sid_Set() const{
    return m_participant_user_sid_isSet;
}

bool OAIConversations_v1_participant_conversation::is_participant_user_sid_Valid() const{
    return m_participant_user_sid_isValid;
}

bool OAIConversations_v1_participant_conversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_timers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_messaging_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_user_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_participant_conversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
