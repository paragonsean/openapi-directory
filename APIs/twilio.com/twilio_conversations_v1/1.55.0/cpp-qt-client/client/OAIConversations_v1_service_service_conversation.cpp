/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_service_service_conversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_service_service_conversation::OAIConversations_v1_service_service_conversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_service_service_conversation::OAIConversations_v1_service_service_conversation() {
    this->initializeModel();
}

OAIConversations_v1_service_service_conversation::~OAIConversations_v1_service_service_conversation() {}

void OAIConversations_v1_service_service_conversation::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timers_isSet = false;
    m_timers_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_service_service_conversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_service_service_conversation::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_bindings_isValid = ::OpenAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timers_isValid = ::OpenAPI::fromJsonValue(m_timers, json[QString("timers")]);
    m_timers_isSet = !json[QString("timers")].isNull() && m_timers_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_service_service_conversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_service_service_conversation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_bindings_isSet) {
        obj.insert(QString("bindings"), ::OpenAPI::toJsonValue(m_bindings));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timers_isSet) {
        obj.insert(QString("timers"), ::OpenAPI::toJsonValue(m_timers));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_service_service_conversation::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_service_service_conversation::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation::getAttributes() const {
    return m_attributes;
}
void OAIConversations_v1_service_service_conversation::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QJsonValue OAIConversations_v1_service_service_conversation::getBindings() const {
    return m_bindings;
}
void OAIConversations_v1_service_service_conversation::setBindings(const QJsonValue &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_bindings_Valid() const{
    return m_bindings_isValid;
}

QString OAIConversations_v1_service_service_conversation::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_service_service_conversation::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation::getDateCreated() const {
    return m_date_created;
}
void OAIConversations_v1_service_service_conversation::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation::getDateUpdated() const {
    return m_date_updated;
}
void OAIConversations_v1_service_service_conversation::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIConversations_v1_service_service_conversation::getFriendlyName() const {
    return m_friendly_name;
}
void OAIConversations_v1_service_service_conversation::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIObject OAIConversations_v1_service_service_conversation::getLinks() const {
    return m_links;
}
void OAIConversations_v1_service_service_conversation::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIConversations_v1_service_service_conversation::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAIConversations_v1_service_service_conversation::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation::getSid() const {
    return m_sid;
}
void OAIConversations_v1_service_service_conversation::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIService_conversation_enum_state OAIConversations_v1_service_service_conversation::getState() const {
    return m_state;
}
void OAIConversations_v1_service_service_conversation::setState(const OAIService_conversation_enum_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_state_Valid() const{
    return m_state_isValid;
}

QJsonValue OAIConversations_v1_service_service_conversation::getTimers() const {
    return m_timers;
}
void OAIConversations_v1_service_service_conversation::setTimers(const QJsonValue &timers) {
    m_timers = timers;
    m_timers_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_timers_Set() const{
    return m_timers_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_timers_Valid() const{
    return m_timers_isValid;
}

QString OAIConversations_v1_service_service_conversation::getUniqueName() const {
    return m_unique_name;
}
void OAIConversations_v1_service_service_conversation::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIConversations_v1_service_service_conversation::getUrl() const {
    return m_url;
}
void OAIConversations_v1_service_service_conversation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_service_service_conversation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_service_service_conversation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_service_service_conversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bindings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_service_service_conversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
