/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1DeliveryReceiptApi_H
#define OAI_OAIConversationsV1DeliveryReceiptApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_v1_conversation_conversation_message_conversation_message_receipt.h"
#include "OAIConversations_v1_service_service_conversation_service_conversation_message_service_conversation_message_receipt.h"
#include "OAIListConversationMessageReceiptResponse.h"
#include "OAIListServiceConversationMessageReceiptResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1DeliveryReceiptApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1DeliveryReceiptApi(const int timeOut = 0);
    ~OAIConversationsV1DeliveryReceiptApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  message_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConversationMessageReceipt(const QString &conversation_sid, const QString &message_sid, const QString &sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  message_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchServiceConversationMessageReceipt(const QString &chat_service_sid, const QString &conversation_sid, const QString &message_sid, const QString &sid);

    /**
    * @param[in]  conversation_sid QString [required]
    * @param[in]  message_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConversationMessageReceipt(const QString &conversation_sid, const QString &message_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  message_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceConversationMessageReceipt(const QString &chat_service_sid, const QString &conversation_sid, const QString &message_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchConversationMessageReceiptCallback(OAIHttpRequestWorker *worker);
    void fetchServiceConversationMessageReceiptCallback(OAIHttpRequestWorker *worker);
    void listConversationMessageReceiptCallback(OAIHttpRequestWorker *worker);
    void listServiceConversationMessageReceiptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchConversationMessageReceiptSignal(OAIConversations_v1_conversation_conversation_message_conversation_message_receipt summary);
    void fetchServiceConversationMessageReceiptSignal(OAIConversations_v1_service_service_conversation_service_conversation_message_service_conversation_message_receipt summary);
    void listConversationMessageReceiptSignal(OAIListConversationMessageReceiptResponse summary);
    void listServiceConversationMessageReceiptSignal(OAIListServiceConversationMessageReceiptResponse summary);


    void fetchConversationMessageReceiptSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_conversation_conversation_message_conversation_message_receipt summary);
    void fetchServiceConversationMessageReceiptSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_conversation_service_conversation_message_service_conversation_message_receipt summary);
    void listConversationMessageReceiptSignalFull(OAIHttpRequestWorker *worker, OAIListConversationMessageReceiptResponse summary);
    void listServiceConversationMessageReceiptSignalFull(OAIHttpRequestWorker *worker, OAIListServiceConversationMessageReceiptResponse summary);

    Q_DECL_DEPRECATED_X("Use fetchConversationMessageReceiptSignalError() instead")
    void fetchConversationMessageReceiptSignalE(OAIConversations_v1_conversation_conversation_message_conversation_message_receipt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationMessageReceiptSignalError(OAIConversations_v1_conversation_conversation_message_conversation_message_receipt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationMessageReceiptSignalError() instead")
    void fetchServiceConversationMessageReceiptSignalE(OAIConversations_v1_service_service_conversation_service_conversation_message_service_conversation_message_receipt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationMessageReceiptSignalError(OAIConversations_v1_service_service_conversation_service_conversation_message_service_conversation_message_receipt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationMessageReceiptSignalError() instead")
    void listConversationMessageReceiptSignalE(OAIListConversationMessageReceiptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationMessageReceiptSignalError(OAIListConversationMessageReceiptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationMessageReceiptSignalError() instead")
    void listServiceConversationMessageReceiptSignalE(OAIListServiceConversationMessageReceiptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationMessageReceiptSignalError(OAIListServiceConversationMessageReceiptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchConversationMessageReceiptSignalErrorFull() instead")
    void fetchConversationMessageReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConversationMessageReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceConversationMessageReceiptSignalErrorFull() instead")
    void fetchServiceConversationMessageReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceConversationMessageReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConversationMessageReceiptSignalErrorFull() instead")
    void listConversationMessageReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConversationMessageReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceConversationMessageReceiptSignalErrorFull() instead")
    void listServiceConversationMessageReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceConversationMessageReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
