/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsV1UserConversationApi_H
#define OAI_OAIConversationsV1UserConversationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_v1_service_service_user_service_user_conversation.h"
#include "OAIConversations_v1_user_user_conversation.h"
#include "OAIListServiceUserConversationResponse.h"
#include "OAIListUserConversationResponse.h"
#include "OAIService_user_conversation_enum_notification_level.h"
#include "OAIUser_conversation_enum_notification_level.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsV1UserConversationApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsV1UserConversationApi(const int timeOut = 0);
    ~OAIConversationsV1UserConversationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    */
    virtual void deleteServiceUserConversation(const QString &chat_service_sid, const QString &user_sid, const QString &conversation_sid);

    /**
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    */
    virtual void deleteUserConversation(const QString &user_sid, const QString &conversation_sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    */
    virtual void fetchServiceUserConversation(const QString &chat_service_sid, const QString &user_sid, const QString &conversation_sid);

    /**
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    */
    virtual void fetchUserConversation(const QString &user_sid, const QString &conversation_sid);

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listServiceUserConversation(const QString &chat_service_sid, const QString &user_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listUserConversation(const QString &user_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  last_read_message_index qint32 [optional]
    * @param[in]  last_read_timestamp QDateTime [optional]
    * @param[in]  notification_level OAIService_user_conversation_enum_notification_level [optional]
    */
    virtual void updateServiceUserConversation(const QString &chat_service_sid, const QString &user_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &last_read_message_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &last_read_timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIService_user_conversation_enum_notification_level> &notification_level = ::OpenAPI::OptionalParam<OAIService_user_conversation_enum_notification_level>());

    /**
    * @param[in]  user_sid QString [required]
    * @param[in]  conversation_sid QString [required]
    * @param[in]  last_read_message_index qint32 [optional]
    * @param[in]  last_read_timestamp QDateTime [optional]
    * @param[in]  notification_level OAIUser_conversation_enum_notification_level [optional]
    */
    virtual void updateUserConversation(const QString &user_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &last_read_message_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &last_read_timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIUser_conversation_enum_notification_level> &notification_level = ::OpenAPI::OptionalParam<OAIUser_conversation_enum_notification_level>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteServiceUserConversationCallback(OAIHttpRequestWorker *worker);
    void deleteUserConversationCallback(OAIHttpRequestWorker *worker);
    void fetchServiceUserConversationCallback(OAIHttpRequestWorker *worker);
    void fetchUserConversationCallback(OAIHttpRequestWorker *worker);
    void listServiceUserConversationCallback(OAIHttpRequestWorker *worker);
    void listUserConversationCallback(OAIHttpRequestWorker *worker);
    void updateServiceUserConversationCallback(OAIHttpRequestWorker *worker);
    void updateUserConversationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteServiceUserConversationSignal();
    void deleteUserConversationSignal();
    void fetchServiceUserConversationSignal(OAIConversations_v1_service_service_user_service_user_conversation summary);
    void fetchUserConversationSignal(OAIConversations_v1_user_user_conversation summary);
    void listServiceUserConversationSignal(OAIListServiceUserConversationResponse summary);
    void listUserConversationSignal(OAIListUserConversationResponse summary);
    void updateServiceUserConversationSignal(OAIConversations_v1_service_service_user_service_user_conversation summary);
    void updateUserConversationSignal(OAIConversations_v1_user_user_conversation summary);


    void deleteServiceUserConversationSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserConversationSignalFull(OAIHttpRequestWorker *worker);
    void fetchServiceUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_user_service_user_conversation summary);
    void fetchUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_user_user_conversation summary);
    void listServiceUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIListServiceUserConversationResponse summary);
    void listUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIListUserConversationResponse summary);
    void updateServiceUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_service_service_user_service_user_conversation summary);
    void updateUserConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversations_v1_user_user_conversation summary);

    Q_DECL_DEPRECATED_X("Use deleteServiceUserConversationSignalError() instead")
    void deleteServiceUserConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceUserConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserConversationSignalError() instead")
    void deleteUserConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceUserConversationSignalError() instead")
    void fetchServiceUserConversationSignalE(OAIConversations_v1_service_service_user_service_user_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceUserConversationSignalError(OAIConversations_v1_service_service_user_service_user_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUserConversationSignalError() instead")
    void fetchUserConversationSignalE(OAIConversations_v1_user_user_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUserConversationSignalError(OAIConversations_v1_user_user_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceUserConversationSignalError() instead")
    void listServiceUserConversationSignalE(OAIListServiceUserConversationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceUserConversationSignalError(OAIListServiceUserConversationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserConversationSignalError() instead")
    void listUserConversationSignalE(OAIListUserConversationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserConversationSignalError(OAIListUserConversationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceUserConversationSignalError() instead")
    void updateServiceUserConversationSignalE(OAIConversations_v1_service_service_user_service_user_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceUserConversationSignalError(OAIConversations_v1_service_service_user_service_user_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserConversationSignalError() instead")
    void updateUserConversationSignalE(OAIConversations_v1_user_user_conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserConversationSignalError(OAIConversations_v1_user_user_conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteServiceUserConversationSignalErrorFull() instead")
    void deleteServiceUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserConversationSignalErrorFull() instead")
    void deleteUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceUserConversationSignalErrorFull() instead")
    void fetchServiceUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUserConversationSignalErrorFull() instead")
    void fetchUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceUserConversationSignalErrorFull() instead")
    void listServiceUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserConversationSignalErrorFull() instead")
    void listUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceUserConversationSignalErrorFull() instead")
    void updateServiceUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserConversationSignalErrorFull() instead")
    void updateUserConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
