/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_service_service_conversation_service_conversation_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_service_service_conversation_service_conversation_message::OAIConversations_v1_service_service_conversation_service_conversation_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_service_service_conversation_service_conversation_message::OAIConversations_v1_service_service_conversation_service_conversation_message() {
    this->initializeModel();
}

OAIConversations_v1_service_service_conversation_service_conversation_message::~OAIConversations_v1_service_service_conversation_service_conversation_message() {}

void OAIConversations_v1_service_service_conversation_service_conversation_message::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_content_sid_isSet = false;
    m_content_sid_isValid = false;

    m_conversation_sid_isSet = false;
    m_conversation_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_participant_sid_isSet = false;
    m_participant_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_service_service_conversation_service_conversation_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_service_service_conversation_service_conversation_message::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_content_sid_isValid = ::OpenAPI::fromJsonValue(m_content_sid, json[QString("content_sid")]);
    m_content_sid_isSet = !json[QString("content_sid")].isNull() && m_content_sid_isValid;

    m_conversation_sid_isValid = ::OpenAPI::fromJsonValue(m_conversation_sid, json[QString("conversation_sid")]);
    m_conversation_sid_isSet = !json[QString("conversation_sid")].isNull() && m_conversation_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_participant_sid_isValid = ::OpenAPI::fromJsonValue(m_participant_sid, json[QString("participant_sid")]);
    m_participant_sid_isSet = !json[QString("participant_sid")].isNull() && m_participant_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_service_service_conversation_service_conversation_message::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_content_sid_isSet) {
        obj.insert(QString("content_sid"), ::OpenAPI::toJsonValue(m_content_sid));
    }
    if (m_conversation_sid_isSet) {
        obj.insert(QString("conversation_sid"), ::OpenAPI::toJsonValue(m_conversation_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_delivery_isSet) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_participant_sid_isSet) {
        obj.insert(QString("participant_sid"), ::OpenAPI::toJsonValue(m_participant_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getAccountSid() const {
    return m_account_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getAttributes() const {
    return m_attributes;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getAuthor() const {
    return m_author;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_author_Set() const{
    return m_author_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getBody() const {
    return m_body;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_body_Set() const{
    return m_body_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getContentSid() const {
    return m_content_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setContentSid(const QString &content_sid) {
    m_content_sid = content_sid;
    m_content_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_content_sid_Set() const{
    return m_content_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_content_sid_Valid() const{
    return m_content_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getConversationSid() const {
    return m_conversation_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setConversationSid(const QString &conversation_sid) {
    m_conversation_sid = conversation_sid;
    m_conversation_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_conversation_sid_Set() const{
    return m_conversation_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_conversation_sid_Valid() const{
    return m_conversation_sid_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation_service_conversation_message::getDateCreated() const {
    return m_date_created;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIConversations_v1_service_service_conversation_service_conversation_message::getDateUpdated() const {
    return m_date_updated;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QJsonValue OAIConversations_v1_service_service_conversation_service_conversation_message::getDelivery() const {
    return m_delivery;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setDelivery(const QJsonValue &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_delivery_Valid() const{
    return m_delivery_isValid;
}

qint32 OAIConversations_v1_service_service_conversation_service_conversation_message::getIndex() const {
    return m_index;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_index_Set() const{
    return m_index_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_index_Valid() const{
    return m_index_isValid;
}

OAIObject OAIConversations_v1_service_service_conversation_service_conversation_message::getLinks() const {
    return m_links;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_links_Valid() const{
    return m_links_isValid;
}

QList<QJsonValue> OAIConversations_v1_service_service_conversation_service_conversation_message::getMedia() const {
    return m_media;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setMedia(const QList<QJsonValue> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_media_Set() const{
    return m_media_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getParticipantSid() const {
    return m_participant_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setParticipantSid(const QString &participant_sid) {
    m_participant_sid = participant_sid;
    m_participant_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_participant_sid_Set() const{
    return m_participant_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_participant_sid_Valid() const{
    return m_participant_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getSid() const {
    return m_sid;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIConversations_v1_service_service_conversation_service_conversation_message::getUrl() const {
    return m_url;
}
void OAIConversations_v1_service_service_conversation_service_conversation_message::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_service_service_conversation_service_conversation_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
