/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationsV1WebhookApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIConversationsV1WebhookApi::OAIConversationsV1WebhookApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIConversationsV1WebhookApi::~OAIConversationsV1WebhookApi() {
}

void OAIConversationsV1WebhookApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createConversationScopedWebhook", serverConf);
    _serverIndices.insert("createConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createServiceConversationScopedWebhook", serverConf);
    _serverIndices.insert("createServiceConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteConversationScopedWebhook", serverConf);
    _serverIndices.insert("deleteConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteServiceConversationScopedWebhook", serverConf);
    _serverIndices.insert("deleteServiceConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchConfigurationWebhook", serverConf);
    _serverIndices.insert("fetchConfigurationWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchConversationScopedWebhook", serverConf);
    _serverIndices.insert("fetchConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchServiceConversationScopedWebhook", serverConf);
    _serverIndices.insert("fetchServiceConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchServiceWebhookConfiguration", serverConf);
    _serverIndices.insert("fetchServiceWebhookConfiguration", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listConversationScopedWebhook", serverConf);
    _serverIndices.insert("listConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listServiceConversationScopedWebhook", serverConf);
    _serverIndices.insert("listServiceConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateConfigurationWebhook", serverConf);
    _serverIndices.insert("updateConfigurationWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateConversationScopedWebhook", serverConf);
    _serverIndices.insert("updateConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateServiceConversationScopedWebhook", serverConf);
    _serverIndices.insert("updateServiceConversationScopedWebhook", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://conversations.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateServiceWebhookConfiguration", serverConf);
    _serverIndices.insert("updateServiceWebhookConfiguration", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIConversationsV1WebhookApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIConversationsV1WebhookApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIConversationsV1WebhookApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIConversationsV1WebhookApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIConversationsV1WebhookApi::setUsername(const QString &username) {
    _username = username;
}

void OAIConversationsV1WebhookApi::setPassword(const QString &password) {
    _password = password;
}


void OAIConversationsV1WebhookApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIConversationsV1WebhookApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIConversationsV1WebhookApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIConversationsV1WebhookApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1WebhookApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConversationsV1WebhookApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIConversationsV1WebhookApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIConversationsV1WebhookApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIConversationsV1WebhookApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIConversationsV1WebhookApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIConversationsV1WebhookApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIConversationsV1WebhookApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIConversationsV1WebhookApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIConversationsV1WebhookApi::createConversationScopedWebhook(const QString &conversation_sid, const OAIConversation_scoped_webhook_enum_target &target, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters, const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid, const ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method> &configuration_method, const ::OpenAPI::OptionalParam<qint32> &configuration_replay_after, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers, const ::OpenAPI::OptionalParam<QString> &configuration_url) {
    QString fullPath = QString(_serverConfigs["createConversationScopedWebhook"][_serverIndices.value("createConversationScopedWebhook")].URL()+"/v1/Conversations/{ConversationSid}/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (configuration_filters.hasValue())
    {
        input.add_var("Configuration.Filters", ::OpenAPI::toStringValue(configuration_filters.value()));
    }
    if (configuration_flow_sid.hasValue())
    {
        input.add_var("Configuration.FlowSid", ::OpenAPI::toStringValue(configuration_flow_sid.value()));
    }
    if (configuration_method.hasValue())
    {
        input.add_var("Configuration.Method", ::OpenAPI::toStringValue(configuration_method.value()));
    }
    if (configuration_replay_after.hasValue())
    {
        input.add_var("Configuration.ReplayAfter", ::OpenAPI::toStringValue(configuration_replay_after.value()));
    }
    if (configuration_triggers.hasValue())
    {
        input.add_var("Configuration.Triggers", ::OpenAPI::toStringValue(configuration_triggers.value()));
    }
    if (configuration_url.hasValue())
    {
        input.add_var("Configuration.Url", ::OpenAPI::toStringValue(configuration_url.value()));
    }
    
    {
        input.add_var("Target", ::OpenAPI::toStringValue(target));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::createConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::createConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createConversationScopedWebhookSignal(output);
        Q_EMIT createConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT createConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT createConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::createServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const OAIService_conversation_scoped_webhook_enum_target &target, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters, const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method> &configuration_method, const ::OpenAPI::OptionalParam<qint32> &configuration_replay_after, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers, const ::OpenAPI::OptionalParam<QString> &configuration_url) {
    QString fullPath = QString(_serverConfigs["createServiceConversationScopedWebhook"][_serverIndices.value("createServiceConversationScopedWebhook")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (configuration_filters.hasValue())
    {
        input.add_var("Configuration.Filters", ::OpenAPI::toStringValue(configuration_filters.value()));
    }
    if (configuration_flow_sid.hasValue())
    {
        input.add_var("Configuration.FlowSid", ::OpenAPI::toStringValue(configuration_flow_sid.value()));
    }
    if (configuration_method.hasValue())
    {
        input.add_var("Configuration.Method", ::OpenAPI::toStringValue(configuration_method.value()));
    }
    if (configuration_replay_after.hasValue())
    {
        input.add_var("Configuration.ReplayAfter", ::OpenAPI::toStringValue(configuration_replay_after.value()));
    }
    if (configuration_triggers.hasValue())
    {
        input.add_var("Configuration.Triggers", ::OpenAPI::toStringValue(configuration_triggers.value()));
    }
    if (configuration_url.hasValue())
    {
        input.add_var("Configuration.Url", ::OpenAPI::toStringValue(configuration_url.value()));
    }
    
    {
        input.add_var("Target", ::OpenAPI::toStringValue(target));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::createServiceConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::createServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createServiceConversationScopedWebhookSignal(output);
        Q_EMIT createServiceConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createServiceConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT createServiceConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createServiceConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT createServiceConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::deleteConversationScopedWebhook(const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteConversationScopedWebhook"][_serverIndices.value("deleteConversationScopedWebhook")].URL()+"/v1/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::deleteConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::deleteConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteConversationScopedWebhookSignal();
        Q_EMIT deleteConversationScopedWebhookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteConversationScopedWebhookSignalE(error_type, error_str);
        Q_EMIT deleteConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteConversationScopedWebhookSignalError(error_type, error_str);
        Q_EMIT deleteConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::deleteServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteServiceConversationScopedWebhook"][_serverIndices.value("deleteServiceConversationScopedWebhook")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::deleteServiceConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::deleteServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteServiceConversationScopedWebhookSignal();
        Q_EMIT deleteServiceConversationScopedWebhookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteServiceConversationScopedWebhookSignalE(error_type, error_str);
        Q_EMIT deleteServiceConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteServiceConversationScopedWebhookSignalError(error_type, error_str);
        Q_EMIT deleteServiceConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::fetchConfigurationWebhook() {
    QString fullPath = QString(_serverConfigs["fetchConfigurationWebhook"][_serverIndices.value("fetchConfigurationWebhook")].URL()+"/v1/Configuration/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::fetchConfigurationWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::fetchConfigurationWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_configuration_configuration_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchConfigurationWebhookSignal(output);
        Q_EMIT fetchConfigurationWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchConfigurationWebhookSignalE(output, error_type, error_str);
        Q_EMIT fetchConfigurationWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchConfigurationWebhookSignalError(output, error_type, error_str);
        Q_EMIT fetchConfigurationWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::fetchConversationScopedWebhook(const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchConversationScopedWebhook"][_serverIndices.value("fetchConversationScopedWebhook")].URL()+"/v1/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::fetchConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::fetchConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchConversationScopedWebhookSignal(output);
        Q_EMIT fetchConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT fetchConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT fetchConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::fetchServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchServiceConversationScopedWebhook"][_serverIndices.value("fetchServiceConversationScopedWebhook")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::fetchServiceConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::fetchServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchServiceConversationScopedWebhookSignal(output);
        Q_EMIT fetchServiceConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchServiceConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT fetchServiceConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchServiceConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT fetchServiceConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::fetchServiceWebhookConfiguration(const QString &chat_service_sid) {
    QString fullPath = QString(_serverConfigs["fetchServiceWebhookConfiguration"][_serverIndices.value("fetchServiceWebhookConfiguration")].URL()+"/v1/Services/{ChatServiceSid}/Configuration/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::fetchServiceWebhookConfigurationCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::fetchServiceWebhookConfigurationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_configuration_service_webhook_configuration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchServiceWebhookConfigurationSignal(output);
        Q_EMIT fetchServiceWebhookConfigurationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchServiceWebhookConfigurationSignalE(output, error_type, error_str);
        Q_EMIT fetchServiceWebhookConfigurationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchServiceWebhookConfigurationSignalError(output, error_type, error_str);
        Q_EMIT fetchServiceWebhookConfigurationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::listConversationScopedWebhook(const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listConversationScopedWebhook"][_serverIndices.value("listConversationScopedWebhook")].URL()+"/v1/Conversations/{ConversationSid}/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::listConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::listConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListConversationScopedWebhookResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listConversationScopedWebhookSignal(output);
        Q_EMIT listConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT listConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT listConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::listServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listServiceConversationScopedWebhook"][_serverIndices.value("listServiceConversationScopedWebhook")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::listServiceConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::listServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListServiceConversationScopedWebhookResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listServiceConversationScopedWebhookSignal(output);
        Q_EMIT listServiceConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listServiceConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT listServiceConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listServiceConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT listServiceConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::updateConfigurationWebhook(const ::OpenAPI::OptionalParam<QList<QString>> &filters, const ::OpenAPI::OptionalParam<QString> &method, const ::OpenAPI::OptionalParam<QString> &post_webhook_url, const ::OpenAPI::OptionalParam<QString> &pre_webhook_url, const ::OpenAPI::OptionalParam<OAIConfiguration_webhook_enum_target> &target) {
    QString fullPath = QString(_serverConfigs["updateConfigurationWebhook"][_serverIndices.value("updateConfigurationWebhook")].URL()+"/v1/Configuration/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (filters.hasValue())
    {
        input.add_var("Filters", ::OpenAPI::toStringValue(filters.value()));
    }
    if (method.hasValue())
    {
        input.add_var("Method", ::OpenAPI::toStringValue(method.value()));
    }
    if (post_webhook_url.hasValue())
    {
        input.add_var("PostWebhookUrl", ::OpenAPI::toStringValue(post_webhook_url.value()));
    }
    if (pre_webhook_url.hasValue())
    {
        input.add_var("PreWebhookUrl", ::OpenAPI::toStringValue(pre_webhook_url.value()));
    }
    if (target.hasValue())
    {
        input.add_var("Target", ::OpenAPI::toStringValue(target.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::updateConfigurationWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::updateConfigurationWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_configuration_configuration_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateConfigurationWebhookSignal(output);
        Q_EMIT updateConfigurationWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateConfigurationWebhookSignalE(output, error_type, error_str);
        Q_EMIT updateConfigurationWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateConfigurationWebhookSignalError(output, error_type, error_str);
        Q_EMIT updateConfigurationWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::updateConversationScopedWebhook(const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters, const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid, const ::OpenAPI::OptionalParam<OAIConversation_scoped_webhook_enum_method> &configuration_method, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers, const ::OpenAPI::OptionalParam<QString> &configuration_url) {
    QString fullPath = QString(_serverConfigs["updateConversationScopedWebhook"][_serverIndices.value("updateConversationScopedWebhook")].URL()+"/v1/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (configuration_filters.hasValue())
    {
        input.add_var("Configuration.Filters", ::OpenAPI::toStringValue(configuration_filters.value()));
    }
    if (configuration_flow_sid.hasValue())
    {
        input.add_var("Configuration.FlowSid", ::OpenAPI::toStringValue(configuration_flow_sid.value()));
    }
    if (configuration_method.hasValue())
    {
        input.add_var("Configuration.Method", ::OpenAPI::toStringValue(configuration_method.value()));
    }
    if (configuration_triggers.hasValue())
    {
        input.add_var("Configuration.Triggers", ::OpenAPI::toStringValue(configuration_triggers.value()));
    }
    if (configuration_url.hasValue())
    {
        input.add_var("Configuration.Url", ::OpenAPI::toStringValue(configuration_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::updateConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::updateConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_conversation_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateConversationScopedWebhookSignal(output);
        Q_EMIT updateConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT updateConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT updateConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::updateServiceConversationScopedWebhook(const QString &chat_service_sid, const QString &conversation_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters, const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid, const ::OpenAPI::OptionalParam<OAIService_conversation_scoped_webhook_enum_method> &configuration_method, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers, const ::OpenAPI::OptionalParam<QString> &configuration_url) {
    QString fullPath = QString(_serverConfigs["updateServiceConversationScopedWebhook"][_serverIndices.value("updateServiceConversationScopedWebhook")].URL()+"/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    
    {
        QString conversation_sidPathParam("{");
        conversation_sidPathParam.append("ConversationSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConversationSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConversationSid"+pathSuffix : pathPrefix;
        fullPath.replace(conversation_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conversation_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (configuration_filters.hasValue())
    {
        input.add_var("Configuration.Filters", ::OpenAPI::toStringValue(configuration_filters.value()));
    }
    if (configuration_flow_sid.hasValue())
    {
        input.add_var("Configuration.FlowSid", ::OpenAPI::toStringValue(configuration_flow_sid.value()));
    }
    if (configuration_method.hasValue())
    {
        input.add_var("Configuration.Method", ::OpenAPI::toStringValue(configuration_method.value()));
    }
    if (configuration_triggers.hasValue())
    {
        input.add_var("Configuration.Triggers", ::OpenAPI::toStringValue(configuration_triggers.value()));
    }
    if (configuration_url.hasValue())
    {
        input.add_var("Configuration.Url", ::OpenAPI::toStringValue(configuration_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::updateServiceConversationScopedWebhookCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::updateServiceConversationScopedWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_conversation_service_conversation_scoped_webhook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateServiceConversationScopedWebhookSignal(output);
        Q_EMIT updateServiceConversationScopedWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateServiceConversationScopedWebhookSignalE(output, error_type, error_str);
        Q_EMIT updateServiceConversationScopedWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateServiceConversationScopedWebhookSignalError(output, error_type, error_str);
        Q_EMIT updateServiceConversationScopedWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::updateServiceWebhookConfiguration(const QString &chat_service_sid, const ::OpenAPI::OptionalParam<QList<QString>> &filters, const ::OpenAPI::OptionalParam<QString> &method, const ::OpenAPI::OptionalParam<QString> &post_webhook_url, const ::OpenAPI::OptionalParam<QString> &pre_webhook_url) {
    QString fullPath = QString(_serverConfigs["updateServiceWebhookConfiguration"][_serverIndices.value("updateServiceWebhookConfiguration")].URL()+"/v1/Services/{ChatServiceSid}/Configuration/Webhooks");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString chat_service_sidPathParam("{");
        chat_service_sidPathParam.append("ChatServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChatServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChatServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(chat_service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(chat_service_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (filters.hasValue())
    {
        input.add_var("Filters", ::OpenAPI::toStringValue(filters.value()));
    }
    if (method.hasValue())
    {
        input.add_var("Method", ::OpenAPI::toStringValue(method.value()));
    }
    if (post_webhook_url.hasValue())
    {
        input.add_var("PostWebhookUrl", ::OpenAPI::toStringValue(post_webhook_url.value()));
    }
    if (pre_webhook_url.hasValue())
    {
        input.add_var("PreWebhookUrl", ::OpenAPI::toStringValue(pre_webhook_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConversationsV1WebhookApi::updateServiceWebhookConfigurationCallback);
    connect(this, &OAIConversationsV1WebhookApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConversationsV1WebhookApi::updateServiceWebhookConfigurationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConversations_v1_service_service_configuration_service_webhook_configuration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateServiceWebhookConfigurationSignal(output);
        Q_EMIT updateServiceWebhookConfigurationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateServiceWebhookConfigurationSignalE(output, error_type, error_str);
        Q_EMIT updateServiceWebhookConfigurationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateServiceWebhookConfigurationSignalError(output, error_type, error_str);
        Q_EMIT updateServiceWebhookConfigurationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConversationsV1WebhookApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
