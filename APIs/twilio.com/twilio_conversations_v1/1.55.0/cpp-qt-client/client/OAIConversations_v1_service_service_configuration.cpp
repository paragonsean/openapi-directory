/**
 * Twilio - Conversations
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_v1_service_service_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_v1_service_service_configuration::OAIConversations_v1_service_service_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_v1_service_service_configuration::OAIConversations_v1_service_service_configuration() {
    this->initializeModel();
}

OAIConversations_v1_service_service_configuration::~OAIConversations_v1_service_service_configuration() {}

void OAIConversations_v1_service_service_configuration::initializeModel() {

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_default_chat_service_role_sid_isSet = false;
    m_default_chat_service_role_sid_isValid = false;

    m_default_conversation_creator_role_sid_isSet = false;
    m_default_conversation_creator_role_sid_isValid = false;

    m_default_conversation_role_sid_isSet = false;
    m_default_conversation_role_sid_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_reachability_enabled_isSet = false;
    m_reachability_enabled_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConversations_v1_service_service_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_v1_service_service_configuration::fromJsonObject(QJsonObject json) {

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_default_chat_service_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_chat_service_role_sid, json[QString("default_chat_service_role_sid")]);
    m_default_chat_service_role_sid_isSet = !json[QString("default_chat_service_role_sid")].isNull() && m_default_chat_service_role_sid_isValid;

    m_default_conversation_creator_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_conversation_creator_role_sid, json[QString("default_conversation_creator_role_sid")]);
    m_default_conversation_creator_role_sid_isSet = !json[QString("default_conversation_creator_role_sid")].isNull() && m_default_conversation_creator_role_sid_isValid;

    m_default_conversation_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_conversation_role_sid, json[QString("default_conversation_role_sid")]);
    m_default_conversation_role_sid_isSet = !json[QString("default_conversation_role_sid")].isNull() && m_default_conversation_role_sid_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_reachability_enabled_isValid = ::OpenAPI::fromJsonValue(m_reachability_enabled, json[QString("reachability_enabled")]);
    m_reachability_enabled_isSet = !json[QString("reachability_enabled")].isNull() && m_reachability_enabled_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConversations_v1_service_service_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_v1_service_service_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_default_chat_service_role_sid_isSet) {
        obj.insert(QString("default_chat_service_role_sid"), ::OpenAPI::toJsonValue(m_default_chat_service_role_sid));
    }
    if (m_default_conversation_creator_role_sid_isSet) {
        obj.insert(QString("default_conversation_creator_role_sid"), ::OpenAPI::toJsonValue(m_default_conversation_creator_role_sid));
    }
    if (m_default_conversation_role_sid_isSet) {
        obj.insert(QString("default_conversation_role_sid"), ::OpenAPI::toJsonValue(m_default_conversation_role_sid));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_reachability_enabled_isSet) {
        obj.insert(QString("reachability_enabled"), ::OpenAPI::toJsonValue(m_reachability_enabled));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConversations_v1_service_service_configuration::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIConversations_v1_service_service_configuration::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QString OAIConversations_v1_service_service_configuration::getDefaultChatServiceRoleSid() const {
    return m_default_chat_service_role_sid;
}
void OAIConversations_v1_service_service_configuration::setDefaultChatServiceRoleSid(const QString &default_chat_service_role_sid) {
    m_default_chat_service_role_sid = default_chat_service_role_sid;
    m_default_chat_service_role_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_default_chat_service_role_sid_Set() const{
    return m_default_chat_service_role_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_default_chat_service_role_sid_Valid() const{
    return m_default_chat_service_role_sid_isValid;
}

QString OAIConversations_v1_service_service_configuration::getDefaultConversationCreatorRoleSid() const {
    return m_default_conversation_creator_role_sid;
}
void OAIConversations_v1_service_service_configuration::setDefaultConversationCreatorRoleSid(const QString &default_conversation_creator_role_sid) {
    m_default_conversation_creator_role_sid = default_conversation_creator_role_sid;
    m_default_conversation_creator_role_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_default_conversation_creator_role_sid_Set() const{
    return m_default_conversation_creator_role_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_default_conversation_creator_role_sid_Valid() const{
    return m_default_conversation_creator_role_sid_isValid;
}

QString OAIConversations_v1_service_service_configuration::getDefaultConversationRoleSid() const {
    return m_default_conversation_role_sid;
}
void OAIConversations_v1_service_service_configuration::setDefaultConversationRoleSid(const QString &default_conversation_role_sid) {
    m_default_conversation_role_sid = default_conversation_role_sid;
    m_default_conversation_role_sid_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_default_conversation_role_sid_Set() const{
    return m_default_conversation_role_sid_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_default_conversation_role_sid_Valid() const{
    return m_default_conversation_role_sid_isValid;
}

OAIObject OAIConversations_v1_service_service_configuration::getLinks() const {
    return m_links;
}
void OAIConversations_v1_service_service_configuration::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_links_Set() const{
    return m_links_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIConversations_v1_service_service_configuration::isReachabilityEnabled() const {
    return m_reachability_enabled;
}
void OAIConversations_v1_service_service_configuration::setReachabilityEnabled(const bool &reachability_enabled) {
    m_reachability_enabled = reachability_enabled;
    m_reachability_enabled_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_reachability_enabled_Set() const{
    return m_reachability_enabled_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_reachability_enabled_Valid() const{
    return m_reachability_enabled_isValid;
}

QString OAIConversations_v1_service_service_configuration::getUrl() const {
    return m_url;
}
void OAIConversations_v1_service_service_configuration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConversations_v1_service_service_configuration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConversations_v1_service_service_configuration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConversations_v1_service_service_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_chat_service_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_conversation_creator_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_conversation_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachability_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_v1_service_service_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
