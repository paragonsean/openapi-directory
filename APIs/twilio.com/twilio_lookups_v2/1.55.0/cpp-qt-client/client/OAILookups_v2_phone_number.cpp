/**
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookups_v2_phone_number.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookups_v2_phone_number::OAILookups_v2_phone_number(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookups_v2_phone_number::OAILookups_v2_phone_number() {
    this->initializeModel();
}

OAILookups_v2_phone_number::~OAILookups_v2_phone_number() {}

void OAILookups_v2_phone_number::initializeModel() {

    m_call_forwarding_isSet = false;
    m_call_forwarding_isValid = false;

    m_caller_name_isSet = false;
    m_caller_name_isValid = false;

    m_calling_country_code_isSet = false;
    m_calling_country_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_identity_match_isSet = false;
    m_identity_match_isValid = false;

    m_line_status_isSet = false;
    m_line_status_isValid = false;

    m_line_type_intelligence_isSet = false;
    m_line_type_intelligence_isValid = false;

    m_national_format_isSet = false;
    m_national_format_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_number_quality_score_isSet = false;
    m_phone_number_quality_score_isValid = false;

    m_reassigned_number_isSet = false;
    m_reassigned_number_isValid = false;

    m_sim_swap_isSet = false;
    m_sim_swap_isValid = false;

    m_sms_pumping_risk_isSet = false;
    m_sms_pumping_risk_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAILookups_v2_phone_number::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookups_v2_phone_number::fromJsonObject(QJsonObject json) {

    m_call_forwarding_isValid = ::OpenAPI::fromJsonValue(m_call_forwarding, json[QString("call_forwarding")]);
    m_call_forwarding_isSet = !json[QString("call_forwarding")].isNull() && m_call_forwarding_isValid;

    m_caller_name_isValid = ::OpenAPI::fromJsonValue(m_caller_name, json[QString("caller_name")]);
    m_caller_name_isSet = !json[QString("caller_name")].isNull() && m_caller_name_isValid;

    m_calling_country_code_isValid = ::OpenAPI::fromJsonValue(m_calling_country_code, json[QString("calling_country_code")]);
    m_calling_country_code_isSet = !json[QString("calling_country_code")].isNull() && m_calling_country_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_identity_match_isValid = ::OpenAPI::fromJsonValue(m_identity_match, json[QString("identity_match")]);
    m_identity_match_isSet = !json[QString("identity_match")].isNull() && m_identity_match_isValid;

    m_line_status_isValid = ::OpenAPI::fromJsonValue(m_line_status, json[QString("line_status")]);
    m_line_status_isSet = !json[QString("line_status")].isNull() && m_line_status_isValid;

    m_line_type_intelligence_isValid = ::OpenAPI::fromJsonValue(m_line_type_intelligence, json[QString("line_type_intelligence")]);
    m_line_type_intelligence_isSet = !json[QString("line_type_intelligence")].isNull() && m_line_type_intelligence_isValid;

    m_national_format_isValid = ::OpenAPI::fromJsonValue(m_national_format, json[QString("national_format")]);
    m_national_format_isSet = !json[QString("national_format")].isNull() && m_national_format_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_phone_number_quality_score_isValid = ::OpenAPI::fromJsonValue(m_phone_number_quality_score, json[QString("phone_number_quality_score")]);
    m_phone_number_quality_score_isSet = !json[QString("phone_number_quality_score")].isNull() && m_phone_number_quality_score_isValid;

    m_reassigned_number_isValid = ::OpenAPI::fromJsonValue(m_reassigned_number, json[QString("reassigned_number")]);
    m_reassigned_number_isSet = !json[QString("reassigned_number")].isNull() && m_reassigned_number_isValid;

    m_sim_swap_isValid = ::OpenAPI::fromJsonValue(m_sim_swap, json[QString("sim_swap")]);
    m_sim_swap_isSet = !json[QString("sim_swap")].isNull() && m_sim_swap_isValid;

    m_sms_pumping_risk_isValid = ::OpenAPI::fromJsonValue(m_sms_pumping_risk, json[QString("sms_pumping_risk")]);
    m_sms_pumping_risk_isSet = !json[QString("sms_pumping_risk")].isNull() && m_sms_pumping_risk_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validation_errors")]);
    m_validation_errors_isSet = !json[QString("validation_errors")].isNull() && m_validation_errors_isValid;
}

QString OAILookups_v2_phone_number::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookups_v2_phone_number::asJsonObject() const {
    QJsonObject obj;
    if (m_call_forwarding_isSet) {
        obj.insert(QString("call_forwarding"), ::OpenAPI::toJsonValue(m_call_forwarding));
    }
    if (m_caller_name_isSet) {
        obj.insert(QString("caller_name"), ::OpenAPI::toJsonValue(m_caller_name));
    }
    if (m_calling_country_code_isSet) {
        obj.insert(QString("calling_country_code"), ::OpenAPI::toJsonValue(m_calling_country_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_identity_match_isSet) {
        obj.insert(QString("identity_match"), ::OpenAPI::toJsonValue(m_identity_match));
    }
    if (m_line_status_isSet) {
        obj.insert(QString("line_status"), ::OpenAPI::toJsonValue(m_line_status));
    }
    if (m_line_type_intelligence_isSet) {
        obj.insert(QString("line_type_intelligence"), ::OpenAPI::toJsonValue(m_line_type_intelligence));
    }
    if (m_national_format_isSet) {
        obj.insert(QString("national_format"), ::OpenAPI::toJsonValue(m_national_format));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_number_quality_score_isSet) {
        obj.insert(QString("phone_number_quality_score"), ::OpenAPI::toJsonValue(m_phone_number_quality_score));
    }
    if (m_reassigned_number_isSet) {
        obj.insert(QString("reassigned_number"), ::OpenAPI::toJsonValue(m_reassigned_number));
    }
    if (m_sim_swap_isSet) {
        obj.insert(QString("sim_swap"), ::OpenAPI::toJsonValue(m_sim_swap));
    }
    if (m_sms_pumping_risk_isSet) {
        obj.insert(QString("sms_pumping_risk"), ::OpenAPI::toJsonValue(m_sms_pumping_risk));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("validation_errors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

QJsonValue OAILookups_v2_phone_number::getCallForwarding() const {
    return m_call_forwarding;
}
void OAILookups_v2_phone_number::setCallForwarding(const QJsonValue &call_forwarding) {
    m_call_forwarding = call_forwarding;
    m_call_forwarding_isSet = true;
}

bool OAILookups_v2_phone_number::is_call_forwarding_Set() const{
    return m_call_forwarding_isSet;
}

bool OAILookups_v2_phone_number::is_call_forwarding_Valid() const{
    return m_call_forwarding_isValid;
}

QJsonValue OAILookups_v2_phone_number::getCallerName() const {
    return m_caller_name;
}
void OAILookups_v2_phone_number::setCallerName(const QJsonValue &caller_name) {
    m_caller_name = caller_name;
    m_caller_name_isSet = true;
}

bool OAILookups_v2_phone_number::is_caller_name_Set() const{
    return m_caller_name_isSet;
}

bool OAILookups_v2_phone_number::is_caller_name_Valid() const{
    return m_caller_name_isValid;
}

QString OAILookups_v2_phone_number::getCallingCountryCode() const {
    return m_calling_country_code;
}
void OAILookups_v2_phone_number::setCallingCountryCode(const QString &calling_country_code) {
    m_calling_country_code = calling_country_code;
    m_calling_country_code_isSet = true;
}

bool OAILookups_v2_phone_number::is_calling_country_code_Set() const{
    return m_calling_country_code_isSet;
}

bool OAILookups_v2_phone_number::is_calling_country_code_Valid() const{
    return m_calling_country_code_isValid;
}

QString OAILookups_v2_phone_number::getCountryCode() const {
    return m_country_code;
}
void OAILookups_v2_phone_number::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAILookups_v2_phone_number::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAILookups_v2_phone_number::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QJsonValue OAILookups_v2_phone_number::getIdentityMatch() const {
    return m_identity_match;
}
void OAILookups_v2_phone_number::setIdentityMatch(const QJsonValue &identity_match) {
    m_identity_match = identity_match;
    m_identity_match_isSet = true;
}

bool OAILookups_v2_phone_number::is_identity_match_Set() const{
    return m_identity_match_isSet;
}

bool OAILookups_v2_phone_number::is_identity_match_Valid() const{
    return m_identity_match_isValid;
}

QJsonValue OAILookups_v2_phone_number::getLineStatus() const {
    return m_line_status;
}
void OAILookups_v2_phone_number::setLineStatus(const QJsonValue &line_status) {
    m_line_status = line_status;
    m_line_status_isSet = true;
}

bool OAILookups_v2_phone_number::is_line_status_Set() const{
    return m_line_status_isSet;
}

bool OAILookups_v2_phone_number::is_line_status_Valid() const{
    return m_line_status_isValid;
}

QJsonValue OAILookups_v2_phone_number::getLineTypeIntelligence() const {
    return m_line_type_intelligence;
}
void OAILookups_v2_phone_number::setLineTypeIntelligence(const QJsonValue &line_type_intelligence) {
    m_line_type_intelligence = line_type_intelligence;
    m_line_type_intelligence_isSet = true;
}

bool OAILookups_v2_phone_number::is_line_type_intelligence_Set() const{
    return m_line_type_intelligence_isSet;
}

bool OAILookups_v2_phone_number::is_line_type_intelligence_Valid() const{
    return m_line_type_intelligence_isValid;
}

QString OAILookups_v2_phone_number::getNationalFormat() const {
    return m_national_format;
}
void OAILookups_v2_phone_number::setNationalFormat(const QString &national_format) {
    m_national_format = national_format;
    m_national_format_isSet = true;
}

bool OAILookups_v2_phone_number::is_national_format_Set() const{
    return m_national_format_isSet;
}

bool OAILookups_v2_phone_number::is_national_format_Valid() const{
    return m_national_format_isValid;
}

QString OAILookups_v2_phone_number::getPhoneNumber() const {
    return m_phone_number;
}
void OAILookups_v2_phone_number::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAILookups_v2_phone_number::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAILookups_v2_phone_number::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QJsonValue OAILookups_v2_phone_number::getPhoneNumberQualityScore() const {
    return m_phone_number_quality_score;
}
void OAILookups_v2_phone_number::setPhoneNumberQualityScore(const QJsonValue &phone_number_quality_score) {
    m_phone_number_quality_score = phone_number_quality_score;
    m_phone_number_quality_score_isSet = true;
}

bool OAILookups_v2_phone_number::is_phone_number_quality_score_Set() const{
    return m_phone_number_quality_score_isSet;
}

bool OAILookups_v2_phone_number::is_phone_number_quality_score_Valid() const{
    return m_phone_number_quality_score_isValid;
}

QJsonValue OAILookups_v2_phone_number::getReassignedNumber() const {
    return m_reassigned_number;
}
void OAILookups_v2_phone_number::setReassignedNumber(const QJsonValue &reassigned_number) {
    m_reassigned_number = reassigned_number;
    m_reassigned_number_isSet = true;
}

bool OAILookups_v2_phone_number::is_reassigned_number_Set() const{
    return m_reassigned_number_isSet;
}

bool OAILookups_v2_phone_number::is_reassigned_number_Valid() const{
    return m_reassigned_number_isValid;
}

QJsonValue OAILookups_v2_phone_number::getSimSwap() const {
    return m_sim_swap;
}
void OAILookups_v2_phone_number::setSimSwap(const QJsonValue &sim_swap) {
    m_sim_swap = sim_swap;
    m_sim_swap_isSet = true;
}

bool OAILookups_v2_phone_number::is_sim_swap_Set() const{
    return m_sim_swap_isSet;
}

bool OAILookups_v2_phone_number::is_sim_swap_Valid() const{
    return m_sim_swap_isValid;
}

QJsonValue OAILookups_v2_phone_number::getSmsPumpingRisk() const {
    return m_sms_pumping_risk;
}
void OAILookups_v2_phone_number::setSmsPumpingRisk(const QJsonValue &sms_pumping_risk) {
    m_sms_pumping_risk = sms_pumping_risk;
    m_sms_pumping_risk_isSet = true;
}

bool OAILookups_v2_phone_number::is_sms_pumping_risk_Set() const{
    return m_sms_pumping_risk_isSet;
}

bool OAILookups_v2_phone_number::is_sms_pumping_risk_Valid() const{
    return m_sms_pumping_risk_isValid;
}

QString OAILookups_v2_phone_number::getUrl() const {
    return m_url;
}
void OAILookups_v2_phone_number::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILookups_v2_phone_number::is_url_Set() const{
    return m_url_isSet;
}

bool OAILookups_v2_phone_number::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILookups_v2_phone_number::isRValid() const {
    return m_r_valid;
}
void OAILookups_v2_phone_number::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAILookups_v2_phone_number::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAILookups_v2_phone_number::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QList<OAIPhone_number_enum_validation_error> OAILookups_v2_phone_number::getValidationErrors() const {
    return m_validation_errors;
}
void OAILookups_v2_phone_number::setValidationErrors(const QList<OAIPhone_number_enum_validation_error> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAILookups_v2_phone_number::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAILookups_v2_phone_number::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAILookups_v2_phone_number::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_forwarding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calling_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_intelligence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_quality_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reassigned_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_swap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_pumping_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookups_v2_phone_number::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
