/*
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PhoneNumberEnumValidationError;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LookupsV2PhoneNumber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:57.541390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LookupsV2PhoneNumber {
  public static final String SERIALIZED_NAME_CALL_FORWARDING = "call_forwarding";
  @SerializedName(SERIALIZED_NAME_CALL_FORWARDING)
  private Object callForwarding = null;

  public static final String SERIALIZED_NAME_CALLER_NAME = "caller_name";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private Object callerName = null;

  public static final String SERIALIZED_NAME_CALLING_COUNTRY_CODE = "calling_country_code";
  @SerializedName(SERIALIZED_NAME_CALLING_COUNTRY_CODE)
  private String callingCountryCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_IDENTITY_MATCH = "identity_match";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MATCH)
  private Object identityMatch = null;

  public static final String SERIALIZED_NAME_LINE_STATUS = "line_status";
  @SerializedName(SERIALIZED_NAME_LINE_STATUS)
  private Object lineStatus = null;

  public static final String SERIALIZED_NAME_LINE_TYPE_INTELLIGENCE = "line_type_intelligence";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE_INTELLIGENCE)
  private Object lineTypeIntelligence = null;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT = "national_format";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT)
  private String nationalFormat;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_QUALITY_SCORE = "phone_number_quality_score";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_QUALITY_SCORE)
  private Object phoneNumberQualityScore = null;

  public static final String SERIALIZED_NAME_REASSIGNED_NUMBER = "reassigned_number";
  @SerializedName(SERIALIZED_NAME_REASSIGNED_NUMBER)
  private Object reassignedNumber = null;

  public static final String SERIALIZED_NAME_SIM_SWAP = "sim_swap";
  @SerializedName(SERIALIZED_NAME_SIM_SWAP)
  private Object simSwap = null;

  public static final String SERIALIZED_NAME_SMS_PUMPING_RISK = "sms_pumping_risk";
  @SerializedName(SERIALIZED_NAME_SMS_PUMPING_RISK)
  private Object smsPumpingRisk = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "validation_errors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<PhoneNumberEnumValidationError> validationErrors;

  public LookupsV2PhoneNumber() {
  }

  public LookupsV2PhoneNumber callForwarding(Object callForwarding) {
    this.callForwarding = callForwarding;
    return this;
  }

  /**
   * An object that contains information on the unconditional call forwarding status of mobile phone number.
   * @return callForwarding
   */
  @javax.annotation.Nullable
  public Object getCallForwarding() {
    return callForwarding;
  }

  public void setCallForwarding(Object callForwarding) {
    this.callForwarding = callForwarding;
  }


  public LookupsV2PhoneNumber callerName(Object callerName) {
    this.callerName = callerName;
    return this;
  }

  /**
   * An object that contains caller name information based on [CNAM](https://support.twilio.com/hc/en-us/articles/360051670533-Getting-Started-with-CNAM-Caller-ID).
   * @return callerName
   */
  @javax.annotation.Nullable
  public Object getCallerName() {
    return callerName;
  }

  public void setCallerName(Object callerName) {
    this.callerName = callerName;
  }


  public LookupsV2PhoneNumber callingCountryCode(String callingCountryCode) {
    this.callingCountryCode = callingCountryCode;
    return this;
  }

  /**
   * International dialing prefix of the phone number defined in the E.164 standard.
   * @return callingCountryCode
   */
  @javax.annotation.Nullable
  public String getCallingCountryCode() {
    return callingCountryCode;
  }

  public void setCallingCountryCode(String callingCountryCode) {
    this.callingCountryCode = callingCountryCode;
  }


  public LookupsV2PhoneNumber countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The phone number&#39;s [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public LookupsV2PhoneNumber identityMatch(Object identityMatch) {
    this.identityMatch = identityMatch;
    return this;
  }

  /**
   * An object that contains identity match information. The result of comparing user-provided information including name, address, date of birth, national ID, against authoritative phone-based data sources
   * @return identityMatch
   */
  @javax.annotation.Nullable
  public Object getIdentityMatch() {
    return identityMatch;
  }

  public void setIdentityMatch(Object identityMatch) {
    this.identityMatch = identityMatch;
  }


  public LookupsV2PhoneNumber lineStatus(Object lineStatus) {
    this.lineStatus = lineStatus;
    return this;
  }

  /**
   * An object that contains line status information for a mobile phone number.
   * @return lineStatus
   */
  @javax.annotation.Nullable
  public Object getLineStatus() {
    return lineStatus;
  }

  public void setLineStatus(Object lineStatus) {
    this.lineStatus = lineStatus;
  }


  public LookupsV2PhoneNumber lineTypeIntelligence(Object lineTypeIntelligence) {
    this.lineTypeIntelligence = lineTypeIntelligence;
    return this;
  }

  /**
   * An object that contains line type information including the carrier name, mobile country code, and mobile network code.
   * @return lineTypeIntelligence
   */
  @javax.annotation.Nullable
  public Object getLineTypeIntelligence() {
    return lineTypeIntelligence;
  }

  public void setLineTypeIntelligence(Object lineTypeIntelligence) {
    this.lineTypeIntelligence = lineTypeIntelligence;
  }


  public LookupsV2PhoneNumber nationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
    return this;
  }

  /**
   * The phone number in [national format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
   * @return nationalFormat
   */
  @javax.annotation.Nullable
  public String getNationalFormat() {
    return nationalFormat;
  }

  public void setNationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
  }


  public LookupsV2PhoneNumber phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public LookupsV2PhoneNumber phoneNumberQualityScore(Object phoneNumberQualityScore) {
    this.phoneNumberQualityScore = phoneNumberQualityScore;
    return this;
  }

  /**
   * An object that contains information of a mobile phone number quality score. Quality score will return a risk score about the phone number.
   * @return phoneNumberQualityScore
   */
  @javax.annotation.Nullable
  public Object getPhoneNumberQualityScore() {
    return phoneNumberQualityScore;
  }

  public void setPhoneNumberQualityScore(Object phoneNumberQualityScore) {
    this.phoneNumberQualityScore = phoneNumberQualityScore;
  }


  public LookupsV2PhoneNumber reassignedNumber(Object reassignedNumber) {
    this.reassignedNumber = reassignedNumber;
    return this;
  }

  /**
   * An object that contains reassigned number information. Reassigned Numbers will return a phone number&#39;s reassignment status given a phone number and date
   * @return reassignedNumber
   */
  @javax.annotation.Nullable
  public Object getReassignedNumber() {
    return reassignedNumber;
  }

  public void setReassignedNumber(Object reassignedNumber) {
    this.reassignedNumber = reassignedNumber;
  }


  public LookupsV2PhoneNumber simSwap(Object simSwap) {
    this.simSwap = simSwap;
    return this;
  }

  /**
   * An object that contains information on the last date the subscriber identity module (SIM) was changed for a mobile phone number.
   * @return simSwap
   */
  @javax.annotation.Nullable
  public Object getSimSwap() {
    return simSwap;
  }

  public void setSimSwap(Object simSwap) {
    this.simSwap = simSwap;
  }


  public LookupsV2PhoneNumber smsPumpingRisk(Object smsPumpingRisk) {
    this.smsPumpingRisk = smsPumpingRisk;
    return this;
  }

  /**
   * An object that contains information on if a phone number has been currently or previously blocked by Verify Fraud Guard for receiving malicious SMS pumping traffic as well as other signals associated with risky carriers and low conversion rates.
   * @return smsPumpingRisk
   */
  @javax.annotation.Nullable
  public Object getSmsPumpingRisk() {
    return smsPumpingRisk;
  }

  public void setSmsPumpingRisk(Object smsPumpingRisk) {
    this.smsPumpingRisk = smsPumpingRisk;
  }


  public LookupsV2PhoneNumber url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public LookupsV2PhoneNumber valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Boolean which indicates if the phone number is in a valid range that can be freely assigned by a carrier to a user.
   * @return valid
   */
  @javax.annotation.Nullable
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public LookupsV2PhoneNumber validationErrors(List<PhoneNumberEnumValidationError> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public LookupsV2PhoneNumber addValidationErrorsItem(PhoneNumberEnumValidationError validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Contains reasons why a phone number is invalid. Possible values: TOO_SHORT, TOO_LONG, INVALID_BUT_POSSIBLE, INVALID_COUNTRY_CODE, INVALID_LENGTH, NOT_A_NUMBER.
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<PhoneNumberEnumValidationError> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<PhoneNumberEnumValidationError> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupsV2PhoneNumber lookupsV2PhoneNumber = (LookupsV2PhoneNumber) o;
    return Objects.equals(this.callForwarding, lookupsV2PhoneNumber.callForwarding) &&
        Objects.equals(this.callerName, lookupsV2PhoneNumber.callerName) &&
        Objects.equals(this.callingCountryCode, lookupsV2PhoneNumber.callingCountryCode) &&
        Objects.equals(this.countryCode, lookupsV2PhoneNumber.countryCode) &&
        Objects.equals(this.identityMatch, lookupsV2PhoneNumber.identityMatch) &&
        Objects.equals(this.lineStatus, lookupsV2PhoneNumber.lineStatus) &&
        Objects.equals(this.lineTypeIntelligence, lookupsV2PhoneNumber.lineTypeIntelligence) &&
        Objects.equals(this.nationalFormat, lookupsV2PhoneNumber.nationalFormat) &&
        Objects.equals(this.phoneNumber, lookupsV2PhoneNumber.phoneNumber) &&
        Objects.equals(this.phoneNumberQualityScore, lookupsV2PhoneNumber.phoneNumberQualityScore) &&
        Objects.equals(this.reassignedNumber, lookupsV2PhoneNumber.reassignedNumber) &&
        Objects.equals(this.simSwap, lookupsV2PhoneNumber.simSwap) &&
        Objects.equals(this.smsPumpingRisk, lookupsV2PhoneNumber.smsPumpingRisk) &&
        Objects.equals(this.url, lookupsV2PhoneNumber.url) &&
        Objects.equals(this.valid, lookupsV2PhoneNumber.valid) &&
        Objects.equals(this.validationErrors, lookupsV2PhoneNumber.validationErrors);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(callForwarding, callerName, callingCountryCode, countryCode, identityMatch, lineStatus, lineTypeIntelligence, nationalFormat, phoneNumber, phoneNumberQualityScore, reassignedNumber, simSwap, smsPumpingRisk, url, valid, validationErrors);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupsV2PhoneNumber {\n");
    sb.append("    callForwarding: ").append(toIndentedString(callForwarding)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    callingCountryCode: ").append(toIndentedString(callingCountryCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    identityMatch: ").append(toIndentedString(identityMatch)).append("\n");
    sb.append("    lineStatus: ").append(toIndentedString(lineStatus)).append("\n");
    sb.append("    lineTypeIntelligence: ").append(toIndentedString(lineTypeIntelligence)).append("\n");
    sb.append("    nationalFormat: ").append(toIndentedString(nationalFormat)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberQualityScore: ").append(toIndentedString(phoneNumberQualityScore)).append("\n");
    sb.append("    reassignedNumber: ").append(toIndentedString(reassignedNumber)).append("\n");
    sb.append("    simSwap: ").append(toIndentedString(simSwap)).append("\n");
    sb.append("    smsPumpingRisk: ").append(toIndentedString(smsPumpingRisk)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("call_forwarding");
    openapiFields.add("caller_name");
    openapiFields.add("calling_country_code");
    openapiFields.add("country_code");
    openapiFields.add("identity_match");
    openapiFields.add("line_status");
    openapiFields.add("line_type_intelligence");
    openapiFields.add("national_format");
    openapiFields.add("phone_number");
    openapiFields.add("phone_number_quality_score");
    openapiFields.add("reassigned_number");
    openapiFields.add("sim_swap");
    openapiFields.add("sms_pumping_risk");
    openapiFields.add("url");
    openapiFields.add("valid");
    openapiFields.add("validation_errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LookupsV2PhoneNumber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookupsV2PhoneNumber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookupsV2PhoneNumber is not found in the empty JSON string", LookupsV2PhoneNumber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookupsV2PhoneNumber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookupsV2PhoneNumber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calling_country_code") != null && !jsonObj.get("calling_country_code").isJsonNull()) && !jsonObj.get("calling_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calling_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calling_country_code").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("national_format") != null && !jsonObj.get("national_format").isJsonNull()) && !jsonObj.get("national_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_format").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validation_errors") != null && !jsonObj.get("validation_errors").isJsonNull() && !jsonObj.get("validation_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_errors` to be an array in the JSON string but got `%s`", jsonObj.get("validation_errors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookupsV2PhoneNumber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookupsV2PhoneNumber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookupsV2PhoneNumber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookupsV2PhoneNumber.class));

       return (TypeAdapter<T>) new TypeAdapter<LookupsV2PhoneNumber>() {
           @Override
           public void write(JsonWriter out, LookupsV2PhoneNumber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookupsV2PhoneNumber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LookupsV2PhoneNumber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LookupsV2PhoneNumber
   * @throws IOException if the JSON string is invalid with respect to LookupsV2PhoneNumber
   */
  public static LookupsV2PhoneNumber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookupsV2PhoneNumber.class);
  }

  /**
   * Convert an instance of LookupsV2PhoneNumber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

