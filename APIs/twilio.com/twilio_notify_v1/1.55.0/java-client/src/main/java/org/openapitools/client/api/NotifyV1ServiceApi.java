/*
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListServiceResponse;
import org.openapitools.client.model.NotifyV1Service;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotifyV1ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotifyV1ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotifyV1ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createService
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://notify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alexaSkillId != null) {
            localVarFormParams.put("AlexaSkillId", alexaSkillId);
        }

        if (apnCredentialSid != null) {
            localVarFormParams.put("ApnCredentialSid", apnCredentialSid);
        }

        if (defaultAlexaNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultAlexaNotificationProtocolVersion", defaultAlexaNotificationProtocolVersion);
        }

        if (defaultApnNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultApnNotificationProtocolVersion", defaultApnNotificationProtocolVersion);
        }

        if (defaultFcmNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultFcmNotificationProtocolVersion", defaultFcmNotificationProtocolVersion);
        }

        if (defaultGcmNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultGcmNotificationProtocolVersion", defaultGcmNotificationProtocolVersion);
        }

        if (deliveryCallbackEnabled != null) {
            localVarFormParams.put("DeliveryCallbackEnabled", deliveryCallbackEnabled);
        }

        if (deliveryCallbackUrl != null) {
            localVarFormParams.put("DeliveryCallbackUrl", deliveryCallbackUrl);
        }

        if (facebookMessengerPageId != null) {
            localVarFormParams.put("FacebookMessengerPageId", facebookMessengerPageId);
        }

        if (fcmCredentialSid != null) {
            localVarFormParams.put("FcmCredentialSid", fcmCredentialSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (gcmCredentialSid != null) {
            localVarFormParams.put("GcmCredentialSid", gcmCredentialSid);
        }

        if (logEnabled != null) {
            localVarFormParams.put("LogEnabled", logEnabled);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback _callback) throws ApiException {
        return createServiceCall(alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, _callback);

    }

    /**
     * 
     * 
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @return NotifyV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public NotifyV1Service createService(String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid) throws ApiException {
        ApiResponse<NotifyV1Service> localVarResp = createServiceWithHttpInfo(alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @return ApiResponse&lt;NotifyV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotifyV1Service> createServiceWithHttpInfo(String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, null);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback<NotifyV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, _callback);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://notify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteService(Async)");
        }

        return deleteServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String sid) throws ApiException {
        deleteServiceWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://notify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchService(Async)");
        }

        return fetchServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @return NotifyV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NotifyV1Service fetchService(String sid) throws ApiException {
        ApiResponse<NotifyV1Service> localVarResp = fetchServiceWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @return ApiResponse&lt;NotifyV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotifyV1Service> fetchServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceAsync(String sid, final ApiCallback<NotifyV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listService
     * @param friendlyName The string that identifies the Service resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceCall(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://notify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceValidateBeforeCall(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listServiceCall(friendlyName, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName The string that identifies the Service resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceResponse listService(String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceResponse> localVarResp = listServiceWithHttpInfo(friendlyName, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName The string that identifies the Service resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceResponse> listServiceWithHttpInfo(String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceValidateBeforeCall(friendlyName, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName The string that identifies the Service resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceAsync(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceValidateBeforeCall(friendlyName, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String sid, String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://notify.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alexaSkillId != null) {
            localVarFormParams.put("AlexaSkillId", alexaSkillId);
        }

        if (apnCredentialSid != null) {
            localVarFormParams.put("ApnCredentialSid", apnCredentialSid);
        }

        if (defaultAlexaNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultAlexaNotificationProtocolVersion", defaultAlexaNotificationProtocolVersion);
        }

        if (defaultApnNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultApnNotificationProtocolVersion", defaultApnNotificationProtocolVersion);
        }

        if (defaultFcmNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultFcmNotificationProtocolVersion", defaultFcmNotificationProtocolVersion);
        }

        if (defaultGcmNotificationProtocolVersion != null) {
            localVarFormParams.put("DefaultGcmNotificationProtocolVersion", defaultGcmNotificationProtocolVersion);
        }

        if (deliveryCallbackEnabled != null) {
            localVarFormParams.put("DeliveryCallbackEnabled", deliveryCallbackEnabled);
        }

        if (deliveryCallbackUrl != null) {
            localVarFormParams.put("DeliveryCallbackUrl", deliveryCallbackUrl);
        }

        if (facebookMessengerPageId != null) {
            localVarFormParams.put("FacebookMessengerPageId", facebookMessengerPageId);
        }

        if (fcmCredentialSid != null) {
            localVarFormParams.put("FcmCredentialSid", fcmCredentialSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (gcmCredentialSid != null) {
            localVarFormParams.put("GcmCredentialSid", gcmCredentialSid);
        }

        if (logEnabled != null) {
            localVarFormParams.put("LogEnabled", logEnabled);
        }

        if (messagingServiceSid != null) {
            localVarFormParams.put("MessagingServiceSid", messagingServiceSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String sid, String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateService(Async)");
        }

        return updateServiceCall(sid, alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @return NotifyV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NotifyV1Service updateService(String sid, String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid) throws ApiException {
        ApiResponse<NotifyV1Service> localVarResp = updateServiceWithHttpInfo(sid, alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @return ApiResponse&lt;NotifyV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotifyV1Service> updateServiceWithHttpInfo(String sid, String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, null);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param alexaSkillId Deprecated. (optional)
     * @param apnCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for APN Bindings. (optional)
     * @param defaultAlexaNotificationProtocolVersion Deprecated. (optional)
     * @param defaultApnNotificationProtocolVersion The protocol version to use for sending APNS notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultFcmNotificationProtocolVersion The protocol version to use for sending FCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param defaultGcmNotificationProtocolVersion The protocol version to use for sending GCM notifications. Can be overridden on a Binding by Binding basis when creating a [Binding](https://www.twilio.com/docs/notify/api/binding-resource) resource. (optional)
     * @param deliveryCallbackEnabled Callback configuration that enables delivery callbacks, default false (optional)
     * @param deliveryCallbackUrl URL to send delivery status callback. (optional)
     * @param facebookMessengerPageId Deprecated. (optional)
     * @param fcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for FCM Bindings. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param gcmCredentialSid The SID of the [Credential](https://www.twilio.com/docs/notify/api/credential-resource) to use for GCM Bindings. (optional)
     * @param logEnabled Whether to log notifications. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/sms/quickstart#messaging-services) to use for SMS Bindings. This parameter must be set in order to send SMS notifications. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String sid, String alexaSkillId, String apnCredentialSid, String defaultAlexaNotificationProtocolVersion, String defaultApnNotificationProtocolVersion, String defaultFcmNotificationProtocolVersion, String defaultGcmNotificationProtocolVersion, Boolean deliveryCallbackEnabled, String deliveryCallbackUrl, String facebookMessengerPageId, String fcmCredentialSid, String friendlyName, String gcmCredentialSid, Boolean logEnabled, String messagingServiceSid, final ApiCallback<NotifyV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, alexaSkillId, apnCredentialSid, defaultAlexaNotificationProtocolVersion, defaultApnNotificationProtocolVersion, defaultFcmNotificationProtocolVersion, defaultGcmNotificationProtocolVersion, deliveryCallbackEnabled, deliveryCallbackUrl, facebookMessengerPageId, fcmCredentialSid, friendlyName, gcmCredentialSid, logEnabled, messagingServiceSid, _callback);
        Type localVarReturnType = new TypeToken<NotifyV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
