/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotifyV1BindingApi_H
#define OAI_OAINotifyV1BindingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBinding_enum_binding_type.h"
#include "OAIListBindingResponse.h"
#include "OAINotify_v1_service_binding.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotifyV1BindingApi : public QObject {
    Q_OBJECT

public:
    OAINotifyV1BindingApi(const int timeOut = 0);
    ~OAINotifyV1BindingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  address QString [required]
    * @param[in]  binding_type OAIBinding_enum_binding_type [required]
    * @param[in]  identity QString [required]
    * @param[in]  credential_sid QString [optional]
    * @param[in]  endpoint QString [optional]
    * @param[in]  notification_protocol_version QString [optional]
    * @param[in]  tag QList<QString> [optional]
    */
    virtual void createBinding(const QString &service_sid, const QString &address, const OAIBinding_enum_binding_type &binding_type, const QString &identity, const ::OpenAPI::OptionalParam<QString> &credential_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &endpoint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notification_protocol_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteBinding(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchBinding(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  identity QList<QString> [optional]
    * @param[in]  tag QList<QString> [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listBinding(const QString &service_sid, const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &identity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBindingCallback(OAIHttpRequestWorker *worker);
    void deleteBindingCallback(OAIHttpRequestWorker *worker);
    void fetchBindingCallback(OAIHttpRequestWorker *worker);
    void listBindingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBindingSignal(OAINotify_v1_service_binding summary);
    void deleteBindingSignal();
    void fetchBindingSignal(OAINotify_v1_service_binding summary);
    void listBindingSignal(OAIListBindingResponse summary);


    void createBindingSignalFull(OAIHttpRequestWorker *worker, OAINotify_v1_service_binding summary);
    void deleteBindingSignalFull(OAIHttpRequestWorker *worker);
    void fetchBindingSignalFull(OAIHttpRequestWorker *worker, OAINotify_v1_service_binding summary);
    void listBindingSignalFull(OAIHttpRequestWorker *worker, OAIListBindingResponse summary);

    Q_DECL_DEPRECATED_X("Use createBindingSignalError() instead")
    void createBindingSignalE(OAINotify_v1_service_binding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBindingSignalError(OAINotify_v1_service_binding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBindingSignalError() instead")
    void deleteBindingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBindingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBindingSignalError() instead")
    void fetchBindingSignalE(OAINotify_v1_service_binding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBindingSignalError(OAINotify_v1_service_binding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBindingSignalError() instead")
    void listBindingSignalE(OAIListBindingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBindingSignalError(OAIListBindingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBindingSignalErrorFull() instead")
    void createBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBindingSignalErrorFull() instead")
    void deleteBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBindingSignalErrorFull() instead")
    void fetchBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBindingSignalErrorFull() instead")
    void listBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
