/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotifyV1CredentialApi_H
#define OAI_OAINotifyV1CredentialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredential_enum_push_service.h"
#include "OAIListCredentialResponse.h"
#include "OAINotify_v1_credential.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotifyV1CredentialApi : public QObject {
    Q_OBJECT

public:
    OAINotifyV1CredentialApi(const int timeOut = 0);
    ~OAINotifyV1CredentialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type OAICredential_enum_push_service [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  certificate QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  sandbox bool [optional]
    * @param[in]  secret QString [optional]
    */
    virtual void createCredential(const OAICredential_enum_push_service &type, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sandbox = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &secret = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteCredential(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchCredential(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCredential(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  api_key QString [optional]
    * @param[in]  certificate QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  sandbox bool [optional]
    * @param[in]  secret QString [optional]
    */
    virtual void updateCredential(const QString &sid, const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sandbox = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &secret = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCredentialCallback(OAIHttpRequestWorker *worker);
    void deleteCredentialCallback(OAIHttpRequestWorker *worker);
    void fetchCredentialCallback(OAIHttpRequestWorker *worker);
    void listCredentialCallback(OAIHttpRequestWorker *worker);
    void updateCredentialCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCredentialSignal(OAINotify_v1_credential summary);
    void deleteCredentialSignal();
    void fetchCredentialSignal(OAINotify_v1_credential summary);
    void listCredentialSignal(OAIListCredentialResponse summary);
    void updateCredentialSignal(OAINotify_v1_credential summary);


    void createCredentialSignalFull(OAIHttpRequestWorker *worker, OAINotify_v1_credential summary);
    void deleteCredentialSignalFull(OAIHttpRequestWorker *worker);
    void fetchCredentialSignalFull(OAIHttpRequestWorker *worker, OAINotify_v1_credential summary);
    void listCredentialSignalFull(OAIHttpRequestWorker *worker, OAIListCredentialResponse summary);
    void updateCredentialSignalFull(OAIHttpRequestWorker *worker, OAINotify_v1_credential summary);

    Q_DECL_DEPRECATED_X("Use createCredentialSignalError() instead")
    void createCredentialSignalE(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCredentialSignalError(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCredentialSignalError() instead")
    void deleteCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCredentialSignalError() instead")
    void fetchCredentialSignalE(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCredentialSignalError(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCredentialSignalError() instead")
    void listCredentialSignalE(OAIListCredentialResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCredentialSignalError(OAIListCredentialResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCredentialSignalError() instead")
    void updateCredentialSignalE(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCredentialSignalError(OAINotify_v1_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCredentialSignalErrorFull() instead")
    void createCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCredentialSignalErrorFull() instead")
    void deleteCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCredentialSignalErrorFull() instead")
    void fetchCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCredentialSignalErrorFull() instead")
    void listCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCredentialSignalErrorFull() instead")
    void updateCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
