/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyV1NotificationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAINotifyV1NotificationApi::OAINotifyV1NotificationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAINotifyV1NotificationApi::~OAINotifyV1NotificationApi() {
}

void OAINotifyV1NotificationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://notify.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://notify.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createNotification", serverConf);
    _serverIndices.insert("createNotification", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAINotifyV1NotificationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAINotifyV1NotificationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAINotifyV1NotificationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAINotifyV1NotificationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAINotifyV1NotificationApi::setUsername(const QString &username) {
    _username = username;
}

void OAINotifyV1NotificationApi::setPassword(const QString &password) {
    _password = password;
}


void OAINotifyV1NotificationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAINotifyV1NotificationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAINotifyV1NotificationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAINotifyV1NotificationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINotifyV1NotificationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAINotifyV1NotificationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAINotifyV1NotificationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAINotifyV1NotificationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAINotifyV1NotificationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAINotifyV1NotificationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAINotifyV1NotificationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAINotifyV1NotificationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAINotifyV1NotificationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAINotifyV1NotificationApi::createNotification(const QString &service_sid, const ::OpenAPI::OptionalParam<QString> &action, const ::OpenAPI::OptionalParam<QJsonValue> &alexa, const ::OpenAPI::OptionalParam<QJsonValue> &apn, const ::OpenAPI::OptionalParam<QString> &body, const ::OpenAPI::OptionalParam<QJsonValue> &data, const ::OpenAPI::OptionalParam<QString> &delivery_callback_url, const ::OpenAPI::OptionalParam<QJsonValue> &facebook_messenger, const ::OpenAPI::OptionalParam<QJsonValue> &fcm, const ::OpenAPI::OptionalParam<QJsonValue> &gcm, const ::OpenAPI::OptionalParam<QList<QString>> &identity, const ::OpenAPI::OptionalParam<OAINotification_enum_priority> &priority, const ::OpenAPI::OptionalParam<QList<QString>> &segment, const ::OpenAPI::OptionalParam<QJsonValue> &sms, const ::OpenAPI::OptionalParam<QString> &sound, const ::OpenAPI::OptionalParam<QList<QString>> &tag, const ::OpenAPI::OptionalParam<QString> &title, const ::OpenAPI::OptionalParam<QList<QString>> &to_binding, const ::OpenAPI::OptionalParam<qint32> &ttl) {
    QString fullPath = QString(_serverConfigs["createNotification"][_serverIndices.value("createNotification")].URL()+"/v1/Services/{ServiceSid}/Notifications");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (action.hasValue())
    {
        input.add_var("Action", ::OpenAPI::toStringValue(action.value()));
    }
    if (alexa.hasValue())
    {
        input.add_var("Alexa", ::OpenAPI::toStringValue(alexa.value()));
    }
    if (apn.hasValue())
    {
        input.add_var("Apn", ::OpenAPI::toStringValue(apn.value()));
    }
    if (body.hasValue())
    {
        input.add_var("Body", ::OpenAPI::toStringValue(body.value()));
    }
    if (data.hasValue())
    {
        input.add_var("Data", ::OpenAPI::toStringValue(data.value()));
    }
    if (delivery_callback_url.hasValue())
    {
        input.add_var("DeliveryCallbackUrl", ::OpenAPI::toStringValue(delivery_callback_url.value()));
    }
    if (facebook_messenger.hasValue())
    {
        input.add_var("FacebookMessenger", ::OpenAPI::toStringValue(facebook_messenger.value()));
    }
    if (fcm.hasValue())
    {
        input.add_var("Fcm", ::OpenAPI::toStringValue(fcm.value()));
    }
    if (gcm.hasValue())
    {
        input.add_var("Gcm", ::OpenAPI::toStringValue(gcm.value()));
    }
    if (identity.hasValue())
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity.value()));
    }
    if (priority.hasValue())
    {
        input.add_var("Priority", ::OpenAPI::toStringValue(priority.value()));
    }
    if (segment.hasValue())
    {
        input.add_var("Segment", ::OpenAPI::toStringValue(segment.value()));
    }
    if (sms.hasValue())
    {
        input.add_var("Sms", ::OpenAPI::toStringValue(sms.value()));
    }
    if (sound.hasValue())
    {
        input.add_var("Sound", ::OpenAPI::toStringValue(sound.value()));
    }
    if (tag.hasValue())
    {
        input.add_var("Tag", ::OpenAPI::toStringValue(tag.value()));
    }
    if (title.hasValue())
    {
        input.add_var("Title", ::OpenAPI::toStringValue(title.value()));
    }
    if (to_binding.hasValue())
    {
        input.add_var("ToBinding", ::OpenAPI::toStringValue(to_binding.value()));
    }
    if (ttl.hasValue())
    {
        input.add_var("Ttl", ::OpenAPI::toStringValue(ttl.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINotifyV1NotificationApi::createNotificationCallback);
    connect(this, &OAINotifyV1NotificationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAINotifyV1NotificationApi::createNotificationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINotify_v1_service_notification output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createNotificationSignal(output);
        Q_EMIT createNotificationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createNotificationSignalE(output, error_type, error_str);
        Q_EMIT createNotificationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createNotificationSignalError(output, error_type, error_str);
        Q_EMIT createNotificationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAINotifyV1NotificationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
