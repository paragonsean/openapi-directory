/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotify_v1_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotify_v1_service::OAINotify_v1_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotify_v1_service::OAINotify_v1_service() {
    this->initializeModel();
}

OAINotify_v1_service::~OAINotify_v1_service() {}

void OAINotify_v1_service::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_alexa_skill_id_isSet = false;
    m_alexa_skill_id_isValid = false;

    m_apn_credential_sid_isSet = false;
    m_apn_credential_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_alexa_notification_protocol_version_isSet = false;
    m_default_alexa_notification_protocol_version_isValid = false;

    m_default_apn_notification_protocol_version_isSet = false;
    m_default_apn_notification_protocol_version_isValid = false;

    m_default_fcm_notification_protocol_version_isSet = false;
    m_default_fcm_notification_protocol_version_isValid = false;

    m_default_gcm_notification_protocol_version_isSet = false;
    m_default_gcm_notification_protocol_version_isValid = false;

    m_delivery_callback_enabled_isSet = false;
    m_delivery_callback_enabled_isValid = false;

    m_delivery_callback_url_isSet = false;
    m_delivery_callback_url_isValid = false;

    m_facebook_messenger_page_id_isSet = false;
    m_facebook_messenger_page_id_isValid = false;

    m_fcm_credential_sid_isSet = false;
    m_fcm_credential_sid_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_gcm_credential_sid_isSet = false;
    m_gcm_credential_sid_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_log_enabled_isSet = false;
    m_log_enabled_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINotify_v1_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotify_v1_service::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_alexa_skill_id_isValid = ::OpenAPI::fromJsonValue(m_alexa_skill_id, json[QString("alexa_skill_id")]);
    m_alexa_skill_id_isSet = !json[QString("alexa_skill_id")].isNull() && m_alexa_skill_id_isValid;

    m_apn_credential_sid_isValid = ::OpenAPI::fromJsonValue(m_apn_credential_sid, json[QString("apn_credential_sid")]);
    m_apn_credential_sid_isSet = !json[QString("apn_credential_sid")].isNull() && m_apn_credential_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_default_alexa_notification_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_default_alexa_notification_protocol_version, json[QString("default_alexa_notification_protocol_version")]);
    m_default_alexa_notification_protocol_version_isSet = !json[QString("default_alexa_notification_protocol_version")].isNull() && m_default_alexa_notification_protocol_version_isValid;

    m_default_apn_notification_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_default_apn_notification_protocol_version, json[QString("default_apn_notification_protocol_version")]);
    m_default_apn_notification_protocol_version_isSet = !json[QString("default_apn_notification_protocol_version")].isNull() && m_default_apn_notification_protocol_version_isValid;

    m_default_fcm_notification_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_default_fcm_notification_protocol_version, json[QString("default_fcm_notification_protocol_version")]);
    m_default_fcm_notification_protocol_version_isSet = !json[QString("default_fcm_notification_protocol_version")].isNull() && m_default_fcm_notification_protocol_version_isValid;

    m_default_gcm_notification_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_default_gcm_notification_protocol_version, json[QString("default_gcm_notification_protocol_version")]);
    m_default_gcm_notification_protocol_version_isSet = !json[QString("default_gcm_notification_protocol_version")].isNull() && m_default_gcm_notification_protocol_version_isValid;

    m_delivery_callback_enabled_isValid = ::OpenAPI::fromJsonValue(m_delivery_callback_enabled, json[QString("delivery_callback_enabled")]);
    m_delivery_callback_enabled_isSet = !json[QString("delivery_callback_enabled")].isNull() && m_delivery_callback_enabled_isValid;

    m_delivery_callback_url_isValid = ::OpenAPI::fromJsonValue(m_delivery_callback_url, json[QString("delivery_callback_url")]);
    m_delivery_callback_url_isSet = !json[QString("delivery_callback_url")].isNull() && m_delivery_callback_url_isValid;

    m_facebook_messenger_page_id_isValid = ::OpenAPI::fromJsonValue(m_facebook_messenger_page_id, json[QString("facebook_messenger_page_id")]);
    m_facebook_messenger_page_id_isSet = !json[QString("facebook_messenger_page_id")].isNull() && m_facebook_messenger_page_id_isValid;

    m_fcm_credential_sid_isValid = ::OpenAPI::fromJsonValue(m_fcm_credential_sid, json[QString("fcm_credential_sid")]);
    m_fcm_credential_sid_isSet = !json[QString("fcm_credential_sid")].isNull() && m_fcm_credential_sid_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_gcm_credential_sid_isValid = ::OpenAPI::fromJsonValue(m_gcm_credential_sid, json[QString("gcm_credential_sid")]);
    m_gcm_credential_sid_isSet = !json[QString("gcm_credential_sid")].isNull() && m_gcm_credential_sid_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_enabled, json[QString("log_enabled")]);
    m_log_enabled_isSet = !json[QString("log_enabled")].isNull() && m_log_enabled_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINotify_v1_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotify_v1_service::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_alexa_skill_id_isSet) {
        obj.insert(QString("alexa_skill_id"), ::OpenAPI::toJsonValue(m_alexa_skill_id));
    }
    if (m_apn_credential_sid_isSet) {
        obj.insert(QString("apn_credential_sid"), ::OpenAPI::toJsonValue(m_apn_credential_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_alexa_notification_protocol_version_isSet) {
        obj.insert(QString("default_alexa_notification_protocol_version"), ::OpenAPI::toJsonValue(m_default_alexa_notification_protocol_version));
    }
    if (m_default_apn_notification_protocol_version_isSet) {
        obj.insert(QString("default_apn_notification_protocol_version"), ::OpenAPI::toJsonValue(m_default_apn_notification_protocol_version));
    }
    if (m_default_fcm_notification_protocol_version_isSet) {
        obj.insert(QString("default_fcm_notification_protocol_version"), ::OpenAPI::toJsonValue(m_default_fcm_notification_protocol_version));
    }
    if (m_default_gcm_notification_protocol_version_isSet) {
        obj.insert(QString("default_gcm_notification_protocol_version"), ::OpenAPI::toJsonValue(m_default_gcm_notification_protocol_version));
    }
    if (m_delivery_callback_enabled_isSet) {
        obj.insert(QString("delivery_callback_enabled"), ::OpenAPI::toJsonValue(m_delivery_callback_enabled));
    }
    if (m_delivery_callback_url_isSet) {
        obj.insert(QString("delivery_callback_url"), ::OpenAPI::toJsonValue(m_delivery_callback_url));
    }
    if (m_facebook_messenger_page_id_isSet) {
        obj.insert(QString("facebook_messenger_page_id"), ::OpenAPI::toJsonValue(m_facebook_messenger_page_id));
    }
    if (m_fcm_credential_sid_isSet) {
        obj.insert(QString("fcm_credential_sid"), ::OpenAPI::toJsonValue(m_fcm_credential_sid));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_gcm_credential_sid_isSet) {
        obj.insert(QString("gcm_credential_sid"), ::OpenAPI::toJsonValue(m_gcm_credential_sid));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_log_enabled_isSet) {
        obj.insert(QString("log_enabled"), ::OpenAPI::toJsonValue(m_log_enabled));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINotify_v1_service::getAccountSid() const {
    return m_account_sid;
}
void OAINotify_v1_service::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINotify_v1_service::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINotify_v1_service::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAINotify_v1_service::getAlexaSkillId() const {
    return m_alexa_skill_id;
}
void OAINotify_v1_service::setAlexaSkillId(const QString &alexa_skill_id) {
    m_alexa_skill_id = alexa_skill_id;
    m_alexa_skill_id_isSet = true;
}

bool OAINotify_v1_service::is_alexa_skill_id_Set() const{
    return m_alexa_skill_id_isSet;
}

bool OAINotify_v1_service::is_alexa_skill_id_Valid() const{
    return m_alexa_skill_id_isValid;
}

QString OAINotify_v1_service::getApnCredentialSid() const {
    return m_apn_credential_sid;
}
void OAINotify_v1_service::setApnCredentialSid(const QString &apn_credential_sid) {
    m_apn_credential_sid = apn_credential_sid;
    m_apn_credential_sid_isSet = true;
}

bool OAINotify_v1_service::is_apn_credential_sid_Set() const{
    return m_apn_credential_sid_isSet;
}

bool OAINotify_v1_service::is_apn_credential_sid_Valid() const{
    return m_apn_credential_sid_isValid;
}

QDateTime OAINotify_v1_service::getDateCreated() const {
    return m_date_created;
}
void OAINotify_v1_service::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINotify_v1_service::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINotify_v1_service::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAINotify_v1_service::getDateUpdated() const {
    return m_date_updated;
}
void OAINotify_v1_service::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAINotify_v1_service::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAINotify_v1_service::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAINotify_v1_service::getDefaultAlexaNotificationProtocolVersion() const {
    return m_default_alexa_notification_protocol_version;
}
void OAINotify_v1_service::setDefaultAlexaNotificationProtocolVersion(const QString &default_alexa_notification_protocol_version) {
    m_default_alexa_notification_protocol_version = default_alexa_notification_protocol_version;
    m_default_alexa_notification_protocol_version_isSet = true;
}

bool OAINotify_v1_service::is_default_alexa_notification_protocol_version_Set() const{
    return m_default_alexa_notification_protocol_version_isSet;
}

bool OAINotify_v1_service::is_default_alexa_notification_protocol_version_Valid() const{
    return m_default_alexa_notification_protocol_version_isValid;
}

QString OAINotify_v1_service::getDefaultApnNotificationProtocolVersion() const {
    return m_default_apn_notification_protocol_version;
}
void OAINotify_v1_service::setDefaultApnNotificationProtocolVersion(const QString &default_apn_notification_protocol_version) {
    m_default_apn_notification_protocol_version = default_apn_notification_protocol_version;
    m_default_apn_notification_protocol_version_isSet = true;
}

bool OAINotify_v1_service::is_default_apn_notification_protocol_version_Set() const{
    return m_default_apn_notification_protocol_version_isSet;
}

bool OAINotify_v1_service::is_default_apn_notification_protocol_version_Valid() const{
    return m_default_apn_notification_protocol_version_isValid;
}

QString OAINotify_v1_service::getDefaultFcmNotificationProtocolVersion() const {
    return m_default_fcm_notification_protocol_version;
}
void OAINotify_v1_service::setDefaultFcmNotificationProtocolVersion(const QString &default_fcm_notification_protocol_version) {
    m_default_fcm_notification_protocol_version = default_fcm_notification_protocol_version;
    m_default_fcm_notification_protocol_version_isSet = true;
}

bool OAINotify_v1_service::is_default_fcm_notification_protocol_version_Set() const{
    return m_default_fcm_notification_protocol_version_isSet;
}

bool OAINotify_v1_service::is_default_fcm_notification_protocol_version_Valid() const{
    return m_default_fcm_notification_protocol_version_isValid;
}

QString OAINotify_v1_service::getDefaultGcmNotificationProtocolVersion() const {
    return m_default_gcm_notification_protocol_version;
}
void OAINotify_v1_service::setDefaultGcmNotificationProtocolVersion(const QString &default_gcm_notification_protocol_version) {
    m_default_gcm_notification_protocol_version = default_gcm_notification_protocol_version;
    m_default_gcm_notification_protocol_version_isSet = true;
}

bool OAINotify_v1_service::is_default_gcm_notification_protocol_version_Set() const{
    return m_default_gcm_notification_protocol_version_isSet;
}

bool OAINotify_v1_service::is_default_gcm_notification_protocol_version_Valid() const{
    return m_default_gcm_notification_protocol_version_isValid;
}

bool OAINotify_v1_service::isDeliveryCallbackEnabled() const {
    return m_delivery_callback_enabled;
}
void OAINotify_v1_service::setDeliveryCallbackEnabled(const bool &delivery_callback_enabled) {
    m_delivery_callback_enabled = delivery_callback_enabled;
    m_delivery_callback_enabled_isSet = true;
}

bool OAINotify_v1_service::is_delivery_callback_enabled_Set() const{
    return m_delivery_callback_enabled_isSet;
}

bool OAINotify_v1_service::is_delivery_callback_enabled_Valid() const{
    return m_delivery_callback_enabled_isValid;
}

QString OAINotify_v1_service::getDeliveryCallbackUrl() const {
    return m_delivery_callback_url;
}
void OAINotify_v1_service::setDeliveryCallbackUrl(const QString &delivery_callback_url) {
    m_delivery_callback_url = delivery_callback_url;
    m_delivery_callback_url_isSet = true;
}

bool OAINotify_v1_service::is_delivery_callback_url_Set() const{
    return m_delivery_callback_url_isSet;
}

bool OAINotify_v1_service::is_delivery_callback_url_Valid() const{
    return m_delivery_callback_url_isValid;
}

QString OAINotify_v1_service::getFacebookMessengerPageId() const {
    return m_facebook_messenger_page_id;
}
void OAINotify_v1_service::setFacebookMessengerPageId(const QString &facebook_messenger_page_id) {
    m_facebook_messenger_page_id = facebook_messenger_page_id;
    m_facebook_messenger_page_id_isSet = true;
}

bool OAINotify_v1_service::is_facebook_messenger_page_id_Set() const{
    return m_facebook_messenger_page_id_isSet;
}

bool OAINotify_v1_service::is_facebook_messenger_page_id_Valid() const{
    return m_facebook_messenger_page_id_isValid;
}

QString OAINotify_v1_service::getFcmCredentialSid() const {
    return m_fcm_credential_sid;
}
void OAINotify_v1_service::setFcmCredentialSid(const QString &fcm_credential_sid) {
    m_fcm_credential_sid = fcm_credential_sid;
    m_fcm_credential_sid_isSet = true;
}

bool OAINotify_v1_service::is_fcm_credential_sid_Set() const{
    return m_fcm_credential_sid_isSet;
}

bool OAINotify_v1_service::is_fcm_credential_sid_Valid() const{
    return m_fcm_credential_sid_isValid;
}

QString OAINotify_v1_service::getFriendlyName() const {
    return m_friendly_name;
}
void OAINotify_v1_service::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAINotify_v1_service::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAINotify_v1_service::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAINotify_v1_service::getGcmCredentialSid() const {
    return m_gcm_credential_sid;
}
void OAINotify_v1_service::setGcmCredentialSid(const QString &gcm_credential_sid) {
    m_gcm_credential_sid = gcm_credential_sid;
    m_gcm_credential_sid_isSet = true;
}

bool OAINotify_v1_service::is_gcm_credential_sid_Set() const{
    return m_gcm_credential_sid_isSet;
}

bool OAINotify_v1_service::is_gcm_credential_sid_Valid() const{
    return m_gcm_credential_sid_isValid;
}

OAIObject OAINotify_v1_service::getLinks() const {
    return m_links;
}
void OAINotify_v1_service::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINotify_v1_service::is_links_Set() const{
    return m_links_isSet;
}

bool OAINotify_v1_service::is_links_Valid() const{
    return m_links_isValid;
}

bool OAINotify_v1_service::isLogEnabled() const {
    return m_log_enabled;
}
void OAINotify_v1_service::setLogEnabled(const bool &log_enabled) {
    m_log_enabled = log_enabled;
    m_log_enabled_isSet = true;
}

bool OAINotify_v1_service::is_log_enabled_Set() const{
    return m_log_enabled_isSet;
}

bool OAINotify_v1_service::is_log_enabled_Valid() const{
    return m_log_enabled_isValid;
}

QString OAINotify_v1_service::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAINotify_v1_service::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAINotify_v1_service::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAINotify_v1_service::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

QString OAINotify_v1_service::getSid() const {
    return m_sid;
}
void OAINotify_v1_service::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINotify_v1_service::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINotify_v1_service::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAINotify_v1_service::getUrl() const {
    return m_url;
}
void OAINotify_v1_service::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotify_v1_service::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotify_v1_service::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINotify_v1_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alexa_skill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_credential_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_alexa_notification_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_apn_notification_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_fcm_notification_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_gcm_notification_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_callback_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_messenger_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcm_credential_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcm_credential_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotify_v1_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
