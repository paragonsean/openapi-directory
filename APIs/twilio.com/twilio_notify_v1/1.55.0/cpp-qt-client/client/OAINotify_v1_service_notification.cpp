/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotify_v1_service_notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotify_v1_service_notification::OAINotify_v1_service_notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotify_v1_service_notification::OAINotify_v1_service_notification() {
    this->initializeModel();
}

OAINotify_v1_service_notification::~OAINotify_v1_service_notification() {}

void OAINotify_v1_service_notification::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_alexa_isSet = false;
    m_alexa_isValid = false;

    m_apn_isSet = false;
    m_apn_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_facebook_messenger_isSet = false;
    m_facebook_messenger_isValid = false;

    m_fcm_isSet = false;
    m_fcm_isValid = false;

    m_gcm_isSet = false;
    m_gcm_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_sms_isSet = false;
    m_sms_isValid = false;

    m_sound_isSet = false;
    m_sound_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAINotify_v1_service_notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotify_v1_service_notification::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_alexa_isValid = ::OpenAPI::fromJsonValue(m_alexa, json[QString("alexa")]);
    m_alexa_isSet = !json[QString("alexa")].isNull() && m_alexa_isValid;

    m_apn_isValid = ::OpenAPI::fromJsonValue(m_apn, json[QString("apn")]);
    m_apn_isSet = !json[QString("apn")].isNull() && m_apn_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_facebook_messenger_isValid = ::OpenAPI::fromJsonValue(m_facebook_messenger, json[QString("facebook_messenger")]);
    m_facebook_messenger_isSet = !json[QString("facebook_messenger")].isNull() && m_facebook_messenger_isValid;

    m_fcm_isValid = ::OpenAPI::fromJsonValue(m_fcm, json[QString("fcm")]);
    m_fcm_isSet = !json[QString("fcm")].isNull() && m_fcm_isValid;

    m_gcm_isValid = ::OpenAPI::fromJsonValue(m_gcm, json[QString("gcm")]);
    m_gcm_isSet = !json[QString("gcm")].isNull() && m_gcm_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_sms_isValid = ::OpenAPI::fromJsonValue(m_sms, json[QString("sms")]);
    m_sms_isSet = !json[QString("sms")].isNull() && m_sms_isValid;

    m_sound_isValid = ::OpenAPI::fromJsonValue(m_sound, json[QString("sound")]);
    m_sound_isSet = !json[QString("sound")].isNull() && m_sound_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAINotify_v1_service_notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotify_v1_service_notification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_alexa_isSet) {
        obj.insert(QString("alexa"), ::OpenAPI::toJsonValue(m_alexa));
    }
    if (m_apn_isSet) {
        obj.insert(QString("apn"), ::OpenAPI::toJsonValue(m_apn));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_facebook_messenger_isSet) {
        obj.insert(QString("facebook_messenger"), ::OpenAPI::toJsonValue(m_facebook_messenger));
    }
    if (m_fcm_isSet) {
        obj.insert(QString("fcm"), ::OpenAPI::toJsonValue(m_fcm));
    }
    if (m_gcm_isSet) {
        obj.insert(QString("gcm"), ::OpenAPI::toJsonValue(m_gcm));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_sms_isSet) {
        obj.insert(QString("sms"), ::OpenAPI::toJsonValue(m_sms));
    }
    if (m_sound_isSet) {
        obj.insert(QString("sound"), ::OpenAPI::toJsonValue(m_sound));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAINotify_v1_service_notification::getAccountSid() const {
    return m_account_sid;
}
void OAINotify_v1_service_notification::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINotify_v1_service_notification::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINotify_v1_service_notification::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAINotify_v1_service_notification::getAction() const {
    return m_action;
}
void OAINotify_v1_service_notification::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAINotify_v1_service_notification::is_action_Set() const{
    return m_action_isSet;
}

bool OAINotify_v1_service_notification::is_action_Valid() const{
    return m_action_isValid;
}

QJsonValue OAINotify_v1_service_notification::getAlexa() const {
    return m_alexa;
}
void OAINotify_v1_service_notification::setAlexa(const QJsonValue &alexa) {
    m_alexa = alexa;
    m_alexa_isSet = true;
}

bool OAINotify_v1_service_notification::is_alexa_Set() const{
    return m_alexa_isSet;
}

bool OAINotify_v1_service_notification::is_alexa_Valid() const{
    return m_alexa_isValid;
}

QJsonValue OAINotify_v1_service_notification::getApn() const {
    return m_apn;
}
void OAINotify_v1_service_notification::setApn(const QJsonValue &apn) {
    m_apn = apn;
    m_apn_isSet = true;
}

bool OAINotify_v1_service_notification::is_apn_Set() const{
    return m_apn_isSet;
}

bool OAINotify_v1_service_notification::is_apn_Valid() const{
    return m_apn_isValid;
}

QString OAINotify_v1_service_notification::getBody() const {
    return m_body;
}
void OAINotify_v1_service_notification::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINotify_v1_service_notification::is_body_Set() const{
    return m_body_isSet;
}

bool OAINotify_v1_service_notification::is_body_Valid() const{
    return m_body_isValid;
}

QJsonValue OAINotify_v1_service_notification::getData() const {
    return m_data;
}
void OAINotify_v1_service_notification::setData(const QJsonValue &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAINotify_v1_service_notification::is_data_Set() const{
    return m_data_isSet;
}

bool OAINotify_v1_service_notification::is_data_Valid() const{
    return m_data_isValid;
}

QDateTime OAINotify_v1_service_notification::getDateCreated() const {
    return m_date_created;
}
void OAINotify_v1_service_notification::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINotify_v1_service_notification::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINotify_v1_service_notification::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QJsonValue OAINotify_v1_service_notification::getFacebookMessenger() const {
    return m_facebook_messenger;
}
void OAINotify_v1_service_notification::setFacebookMessenger(const QJsonValue &facebook_messenger) {
    m_facebook_messenger = facebook_messenger;
    m_facebook_messenger_isSet = true;
}

bool OAINotify_v1_service_notification::is_facebook_messenger_Set() const{
    return m_facebook_messenger_isSet;
}

bool OAINotify_v1_service_notification::is_facebook_messenger_Valid() const{
    return m_facebook_messenger_isValid;
}

QJsonValue OAINotify_v1_service_notification::getFcm() const {
    return m_fcm;
}
void OAINotify_v1_service_notification::setFcm(const QJsonValue &fcm) {
    m_fcm = fcm;
    m_fcm_isSet = true;
}

bool OAINotify_v1_service_notification::is_fcm_Set() const{
    return m_fcm_isSet;
}

bool OAINotify_v1_service_notification::is_fcm_Valid() const{
    return m_fcm_isValid;
}

QJsonValue OAINotify_v1_service_notification::getGcm() const {
    return m_gcm;
}
void OAINotify_v1_service_notification::setGcm(const QJsonValue &gcm) {
    m_gcm = gcm;
    m_gcm_isSet = true;
}

bool OAINotify_v1_service_notification::is_gcm_Set() const{
    return m_gcm_isSet;
}

bool OAINotify_v1_service_notification::is_gcm_Valid() const{
    return m_gcm_isValid;
}

QList<QString> OAINotify_v1_service_notification::getIdentities() const {
    return m_identities;
}
void OAINotify_v1_service_notification::setIdentities(const QList<QString> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAINotify_v1_service_notification::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAINotify_v1_service_notification::is_identities_Valid() const{
    return m_identities_isValid;
}

OAINotification_enum_priority OAINotify_v1_service_notification::getPriority() const {
    return m_priority;
}
void OAINotify_v1_service_notification::setPriority(const OAINotification_enum_priority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAINotify_v1_service_notification::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAINotify_v1_service_notification::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<QString> OAINotify_v1_service_notification::getSegments() const {
    return m_segments;
}
void OAINotify_v1_service_notification::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAINotify_v1_service_notification::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAINotify_v1_service_notification::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAINotify_v1_service_notification::getServiceSid() const {
    return m_service_sid;
}
void OAINotify_v1_service_notification::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAINotify_v1_service_notification::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAINotify_v1_service_notification::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAINotify_v1_service_notification::getSid() const {
    return m_sid;
}
void OAINotify_v1_service_notification::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINotify_v1_service_notification::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINotify_v1_service_notification::is_sid_Valid() const{
    return m_sid_isValid;
}

QJsonValue OAINotify_v1_service_notification::getSms() const {
    return m_sms;
}
void OAINotify_v1_service_notification::setSms(const QJsonValue &sms) {
    m_sms = sms;
    m_sms_isSet = true;
}

bool OAINotify_v1_service_notification::is_sms_Set() const{
    return m_sms_isSet;
}

bool OAINotify_v1_service_notification::is_sms_Valid() const{
    return m_sms_isValid;
}

QString OAINotify_v1_service_notification::getSound() const {
    return m_sound;
}
void OAINotify_v1_service_notification::setSound(const QString &sound) {
    m_sound = sound;
    m_sound_isSet = true;
}

bool OAINotify_v1_service_notification::is_sound_Set() const{
    return m_sound_isSet;
}

bool OAINotify_v1_service_notification::is_sound_Valid() const{
    return m_sound_isValid;
}

QList<QString> OAINotify_v1_service_notification::getTags() const {
    return m_tags;
}
void OAINotify_v1_service_notification::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINotify_v1_service_notification::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINotify_v1_service_notification::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAINotify_v1_service_notification::getTitle() const {
    return m_title;
}
void OAINotify_v1_service_notification::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINotify_v1_service_notification::is_title_Set() const{
    return m_title_isSet;
}

bool OAINotify_v1_service_notification::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAINotify_v1_service_notification::getTtl() const {
    return m_ttl;
}
void OAINotify_v1_service_notification::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAINotify_v1_service_notification::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAINotify_v1_service_notification::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAINotify_v1_service_notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alexa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_messenger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotify_v1_service_notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
