/**
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotify_v1_service_binding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotify_v1_service_binding::OAINotify_v1_service_binding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotify_v1_service_binding::OAINotify_v1_service_binding() {
    this->initializeModel();
}

OAINotify_v1_service_binding::~OAINotify_v1_service_binding() {}

void OAINotify_v1_service_binding::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_binding_type_isSet = false;
    m_binding_type_isValid = false;

    m_credential_sid_isSet = false;
    m_credential_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notification_protocol_version_isSet = false;
    m_notification_protocol_version_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINotify_v1_service_binding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotify_v1_service_binding::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_binding_type_isValid = ::OpenAPI::fromJsonValue(m_binding_type, json[QString("binding_type")]);
    m_binding_type_isSet = !json[QString("binding_type")].isNull() && m_binding_type_isValid;

    m_credential_sid_isValid = ::OpenAPI::fromJsonValue(m_credential_sid, json[QString("credential_sid")]);
    m_credential_sid_isSet = !json[QString("credential_sid")].isNull() && m_credential_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notification_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_notification_protocol_version, json[QString("notification_protocol_version")]);
    m_notification_protocol_version_isSet = !json[QString("notification_protocol_version")].isNull() && m_notification_protocol_version_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINotify_v1_service_binding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotify_v1_service_binding::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_binding_type_isSet) {
        obj.insert(QString("binding_type"), ::OpenAPI::toJsonValue(m_binding_type));
    }
    if (m_credential_sid_isSet) {
        obj.insert(QString("credential_sid"), ::OpenAPI::toJsonValue(m_credential_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notification_protocol_version_isSet) {
        obj.insert(QString("notification_protocol_version"), ::OpenAPI::toJsonValue(m_notification_protocol_version));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINotify_v1_service_binding::getAccountSid() const {
    return m_account_sid;
}
void OAINotify_v1_service_binding::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINotify_v1_service_binding::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINotify_v1_service_binding::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAINotify_v1_service_binding::getAddress() const {
    return m_address;
}
void OAINotify_v1_service_binding::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAINotify_v1_service_binding::is_address_Set() const{
    return m_address_isSet;
}

bool OAINotify_v1_service_binding::is_address_Valid() const{
    return m_address_isValid;
}

QString OAINotify_v1_service_binding::getBindingType() const {
    return m_binding_type;
}
void OAINotify_v1_service_binding::setBindingType(const QString &binding_type) {
    m_binding_type = binding_type;
    m_binding_type_isSet = true;
}

bool OAINotify_v1_service_binding::is_binding_type_Set() const{
    return m_binding_type_isSet;
}

bool OAINotify_v1_service_binding::is_binding_type_Valid() const{
    return m_binding_type_isValid;
}

QString OAINotify_v1_service_binding::getCredentialSid() const {
    return m_credential_sid;
}
void OAINotify_v1_service_binding::setCredentialSid(const QString &credential_sid) {
    m_credential_sid = credential_sid;
    m_credential_sid_isSet = true;
}

bool OAINotify_v1_service_binding::is_credential_sid_Set() const{
    return m_credential_sid_isSet;
}

bool OAINotify_v1_service_binding::is_credential_sid_Valid() const{
    return m_credential_sid_isValid;
}

QDateTime OAINotify_v1_service_binding::getDateCreated() const {
    return m_date_created;
}
void OAINotify_v1_service_binding::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINotify_v1_service_binding::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINotify_v1_service_binding::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAINotify_v1_service_binding::getDateUpdated() const {
    return m_date_updated;
}
void OAINotify_v1_service_binding::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAINotify_v1_service_binding::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAINotify_v1_service_binding::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAINotify_v1_service_binding::getEndpoint() const {
    return m_endpoint;
}
void OAINotify_v1_service_binding::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAINotify_v1_service_binding::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAINotify_v1_service_binding::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAINotify_v1_service_binding::getIdentity() const {
    return m_identity;
}
void OAINotify_v1_service_binding::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAINotify_v1_service_binding::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAINotify_v1_service_binding::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIObject OAINotify_v1_service_binding::getLinks() const {
    return m_links;
}
void OAINotify_v1_service_binding::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINotify_v1_service_binding::is_links_Set() const{
    return m_links_isSet;
}

bool OAINotify_v1_service_binding::is_links_Valid() const{
    return m_links_isValid;
}

QString OAINotify_v1_service_binding::getNotificationProtocolVersion() const {
    return m_notification_protocol_version;
}
void OAINotify_v1_service_binding::setNotificationProtocolVersion(const QString &notification_protocol_version) {
    m_notification_protocol_version = notification_protocol_version;
    m_notification_protocol_version_isSet = true;
}

bool OAINotify_v1_service_binding::is_notification_protocol_version_Set() const{
    return m_notification_protocol_version_isSet;
}

bool OAINotify_v1_service_binding::is_notification_protocol_version_Valid() const{
    return m_notification_protocol_version_isValid;
}

QString OAINotify_v1_service_binding::getServiceSid() const {
    return m_service_sid;
}
void OAINotify_v1_service_binding::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAINotify_v1_service_binding::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAINotify_v1_service_binding::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAINotify_v1_service_binding::getSid() const {
    return m_sid;
}
void OAINotify_v1_service_binding::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINotify_v1_service_binding::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINotify_v1_service_binding::is_sid_Valid() const{
    return m_sid_isValid;
}

QList<QString> OAINotify_v1_service_binding::getTags() const {
    return m_tags;
}
void OAINotify_v1_service_binding::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINotify_v1_service_binding::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINotify_v1_service_binding::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAINotify_v1_service_binding::getUrl() const {
    return m_url;
}
void OAINotify_v1_service_binding::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotify_v1_service_binding::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotify_v1_service_binding::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINotify_v1_service_binding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotify_v1_service_binding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
