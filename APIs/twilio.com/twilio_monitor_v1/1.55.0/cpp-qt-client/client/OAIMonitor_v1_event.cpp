/**
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitor_v1_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitor_v1_event::OAIMonitor_v1_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitor_v1_event::OAIMonitor_v1_event() {
    this->initializeModel();
}

OAIMonitor_v1_event::~OAIMonitor_v1_event() {}

void OAIMonitor_v1_event::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_actor_sid_isSet = false;
    m_actor_sid_isValid = false;

    m_actor_type_isSet = false;
    m_actor_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_data_isSet = false;
    m_event_data_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_resource_sid_isSet = false;
    m_resource_sid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_ip_address_isSet = false;
    m_source_ip_address_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMonitor_v1_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitor_v1_event::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_actor_sid_isValid = ::OpenAPI::fromJsonValue(m_actor_sid, json[QString("actor_sid")]);
    m_actor_sid_isSet = !json[QString("actor_sid")].isNull() && m_actor_sid_isValid;

    m_actor_type_isValid = ::OpenAPI::fromJsonValue(m_actor_type, json[QString("actor_type")]);
    m_actor_type_isSet = !json[QString("actor_type")].isNull() && m_actor_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_data_isValid = ::OpenAPI::fromJsonValue(m_event_data, json[QString("event_data")]);
    m_event_data_isSet = !json[QString("event_data")].isNull() && m_event_data_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("event_date")]);
    m_event_date_isSet = !json[QString("event_date")].isNull() && m_event_date_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_resource_sid_isValid = ::OpenAPI::fromJsonValue(m_resource_sid, json[QString("resource_sid")]);
    m_resource_sid_isSet = !json[QString("resource_sid")].isNull() && m_resource_sid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_ip_address_isValid = ::OpenAPI::fromJsonValue(m_source_ip_address, json[QString("source_ip_address")]);
    m_source_ip_address_isSet = !json[QString("source_ip_address")].isNull() && m_source_ip_address_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMonitor_v1_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitor_v1_event::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_actor_sid_isSet) {
        obj.insert(QString("actor_sid"), ::OpenAPI::toJsonValue(m_actor_sid));
    }
    if (m_actor_type_isSet) {
        obj.insert(QString("actor_type"), ::OpenAPI::toJsonValue(m_actor_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_data_isSet) {
        obj.insert(QString("event_data"), ::OpenAPI::toJsonValue(m_event_data));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("event_date"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_resource_sid_isSet) {
        obj.insert(QString("resource_sid"), ::OpenAPI::toJsonValue(m_resource_sid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_ip_address_isSet) {
        obj.insert(QString("source_ip_address"), ::OpenAPI::toJsonValue(m_source_ip_address));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMonitor_v1_event::getAccountSid() const {
    return m_account_sid;
}
void OAIMonitor_v1_event::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMonitor_v1_event::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMonitor_v1_event::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIMonitor_v1_event::getActorSid() const {
    return m_actor_sid;
}
void OAIMonitor_v1_event::setActorSid(const QString &actor_sid) {
    m_actor_sid = actor_sid;
    m_actor_sid_isSet = true;
}

bool OAIMonitor_v1_event::is_actor_sid_Set() const{
    return m_actor_sid_isSet;
}

bool OAIMonitor_v1_event::is_actor_sid_Valid() const{
    return m_actor_sid_isValid;
}

QString OAIMonitor_v1_event::getActorType() const {
    return m_actor_type;
}
void OAIMonitor_v1_event::setActorType(const QString &actor_type) {
    m_actor_type = actor_type;
    m_actor_type_isSet = true;
}

bool OAIMonitor_v1_event::is_actor_type_Set() const{
    return m_actor_type_isSet;
}

bool OAIMonitor_v1_event::is_actor_type_Valid() const{
    return m_actor_type_isValid;
}

QString OAIMonitor_v1_event::getDescription() const {
    return m_description;
}
void OAIMonitor_v1_event::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMonitor_v1_event::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMonitor_v1_event::is_description_Valid() const{
    return m_description_isValid;
}

QJsonValue OAIMonitor_v1_event::getEventData() const {
    return m_event_data;
}
void OAIMonitor_v1_event::setEventData(const QJsonValue &event_data) {
    m_event_data = event_data;
    m_event_data_isSet = true;
}

bool OAIMonitor_v1_event::is_event_data_Set() const{
    return m_event_data_isSet;
}

bool OAIMonitor_v1_event::is_event_data_Valid() const{
    return m_event_data_isValid;
}

QDateTime OAIMonitor_v1_event::getEventDate() const {
    return m_event_date;
}
void OAIMonitor_v1_event::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIMonitor_v1_event::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIMonitor_v1_event::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIMonitor_v1_event::getEventType() const {
    return m_event_type;
}
void OAIMonitor_v1_event::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIMonitor_v1_event::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIMonitor_v1_event::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIObject OAIMonitor_v1_event::getLinks() const {
    return m_links;
}
void OAIMonitor_v1_event::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMonitor_v1_event::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMonitor_v1_event::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIMonitor_v1_event::getResourceSid() const {
    return m_resource_sid;
}
void OAIMonitor_v1_event::setResourceSid(const QString &resource_sid) {
    m_resource_sid = resource_sid;
    m_resource_sid_isSet = true;
}

bool OAIMonitor_v1_event::is_resource_sid_Set() const{
    return m_resource_sid_isSet;
}

bool OAIMonitor_v1_event::is_resource_sid_Valid() const{
    return m_resource_sid_isValid;
}

QString OAIMonitor_v1_event::getResourceType() const {
    return m_resource_type;
}
void OAIMonitor_v1_event::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIMonitor_v1_event::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIMonitor_v1_event::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIMonitor_v1_event::getSid() const {
    return m_sid;
}
void OAIMonitor_v1_event::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMonitor_v1_event::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMonitor_v1_event::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIMonitor_v1_event::getSource() const {
    return m_source;
}
void OAIMonitor_v1_event::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMonitor_v1_event::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMonitor_v1_event::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIMonitor_v1_event::getSourceIpAddress() const {
    return m_source_ip_address;
}
void OAIMonitor_v1_event::setSourceIpAddress(const QString &source_ip_address) {
    m_source_ip_address = source_ip_address;
    m_source_ip_address_isSet = true;
}

bool OAIMonitor_v1_event::is_source_ip_address_Set() const{
    return m_source_ip_address_isSet;
}

bool OAIMonitor_v1_event::is_source_ip_address_Valid() const{
    return m_source_ip_address_isValid;
}

QString OAIMonitor_v1_event::getUrl() const {
    return m_url;
}
void OAIMonitor_v1_event::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMonitor_v1_event::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMonitor_v1_event::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMonitor_v1_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitor_v1_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
