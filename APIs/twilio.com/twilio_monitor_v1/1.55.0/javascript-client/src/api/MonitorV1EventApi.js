/**
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListEventResponse from '../model/ListEventResponse';
import MonitorV1Event from '../model/MonitorV1Event';

/**
* MonitorV1Event service.
* @module api/MonitorV1EventApi
* @version 1.55.0
*/
export default class MonitorV1EventApi {

    /**
    * Constructs a new MonitorV1EventApi. 
    * @alias module:api/MonitorV1EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchEvent operation.
     * @callback module:api/MonitorV1EventApi~fetchEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonitorV1Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Event resource to fetch.
     * @param {module:api/MonitorV1EventApi~fetchEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonitorV1Event}
     */
    fetchEvent(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchEvent");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MonitorV1Event;
      let basePaths = ['https://monitor.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Events/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvent operation.
     * @callback module:api/MonitorV1EventApi~listEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of events in the account, sorted by event-date.
     * @param {Object} opts Optional parameters
     * @param {String} [actorSid] Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.
     * @param {String} [eventType] Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types).
     * @param {String} [resourceSid] Only include events that refer to this resource. Useful for discovering the history of a specific resource.
     * @param {String} [sourceIpAddress] Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console.
     * @param {Date} [startDate] Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param {Date} [endDate] Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MonitorV1EventApi~listEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventResponse}
     */
    listEvent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ActorSid': opts['actorSid'],
        'EventType': opts['eventType'],
        'ResourceSid': opts['resourceSid'],
        'SourceIpAddress': opts['sourceIpAddress'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEventResponse;
      let basePaths = ['https://monitor.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
