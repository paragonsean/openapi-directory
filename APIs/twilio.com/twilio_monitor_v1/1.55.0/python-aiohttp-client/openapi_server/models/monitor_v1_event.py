# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MonitorV1Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, actor_sid: str=None, actor_type: str=None, description: str=None, event_data: object=None, event_date: datetime=None, event_type: str=None, links: object=None, resource_sid: str=None, resource_type: str=None, sid: str=None, source: str=None, source_ip_address: str=None, url: str=None):
        """MonitorV1Event - a model defined in OpenAPI

        :param account_sid: The account_sid of this MonitorV1Event.
        :param actor_sid: The actor_sid of this MonitorV1Event.
        :param actor_type: The actor_type of this MonitorV1Event.
        :param description: The description of this MonitorV1Event.
        :param event_data: The event_data of this MonitorV1Event.
        :param event_date: The event_date of this MonitorV1Event.
        :param event_type: The event_type of this MonitorV1Event.
        :param links: The links of this MonitorV1Event.
        :param resource_sid: The resource_sid of this MonitorV1Event.
        :param resource_type: The resource_type of this MonitorV1Event.
        :param sid: The sid of this MonitorV1Event.
        :param source: The source of this MonitorV1Event.
        :param source_ip_address: The source_ip_address of this MonitorV1Event.
        :param url: The url of this MonitorV1Event.
        """
        self.openapi_types = {
            'account_sid': str,
            'actor_sid': str,
            'actor_type': str,
            'description': str,
            'event_data': object,
            'event_date': datetime,
            'event_type': str,
            'links': object,
            'resource_sid': str,
            'resource_type': str,
            'sid': str,
            'source': str,
            'source_ip_address': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'actor_sid': 'actor_sid',
            'actor_type': 'actor_type',
            'description': 'description',
            'event_data': 'event_data',
            'event_date': 'event_date',
            'event_type': 'event_type',
            'links': 'links',
            'resource_sid': 'resource_sid',
            'resource_type': 'resource_type',
            'sid': 'sid',
            'source': 'source',
            'source_ip_address': 'source_ip_address',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._actor_sid = actor_sid
        self._actor_type = actor_type
        self._description = description
        self._event_data = event_data
        self._event_date = event_date
        self._event_type = event_type
        self._links = links
        self._resource_sid = resource_sid
        self._resource_type = resource_type
        self._sid = sid
        self._source = source
        self._source_ip_address = source_ip_address
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorV1Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The monitor.v1.event of this MonitorV1Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MonitorV1Event.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.

        :return: The account_sid of this MonitorV1Event.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MonitorV1Event.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.

        :param account_sid: The account_sid of this MonitorV1Event.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def actor_sid(self):
        """Gets the actor_sid of this MonitorV1Event.

        The SID of the actor that caused the event, if available. Can be `null`.

        :return: The actor_sid of this MonitorV1Event.
        :rtype: str
        """
        return self._actor_sid

    @actor_sid.setter
    def actor_sid(self, actor_sid):
        """Sets the actor_sid of this MonitorV1Event.

        The SID of the actor that caused the event, if available. Can be `null`.

        :param actor_sid: The actor_sid of this MonitorV1Event.
        :type actor_sid: str
        """
        if actor_sid is not None and len(actor_sid) > 34:
            raise ValueError("Invalid value for `actor_sid`, length must be less than or equal to `34`")
        if actor_sid is not None and len(actor_sid) < 34:
            raise ValueError("Invalid value for `actor_sid`, length must be greater than or equal to `34`")
        if actor_sid is not None and not re.search(r'^US[0-9a-fA-F]{32}$', actor_sid):
            raise ValueError("Invalid value for `actor_sid`, must be a follow pattern or equal to `/^US[0-9a-fA-F]{32}$/`")

        self._actor_sid = actor_sid

    @property
    def actor_type(self):
        """Gets the actor_type of this MonitorV1Event.

        The type of actor that caused the event. Can be: `user` for a change made by a logged-in user in the Twilio Console, `account` for an event caused by an API request by an authenticating Account, `twilio-admin` for an event caused by a Twilio employee, and so on.

        :return: The actor_type of this MonitorV1Event.
        :rtype: str
        """
        return self._actor_type

    @actor_type.setter
    def actor_type(self, actor_type):
        """Sets the actor_type of this MonitorV1Event.

        The type of actor that caused the event. Can be: `user` for a change made by a logged-in user in the Twilio Console, `account` for an event caused by an API request by an authenticating Account, `twilio-admin` for an event caused by a Twilio employee, and so on.

        :param actor_type: The actor_type of this MonitorV1Event.
        :type actor_type: str
        """

        self._actor_type = actor_type

    @property
    def description(self):
        """Gets the description of this MonitorV1Event.

        A description of the event. Can be `null`.

        :return: The description of this MonitorV1Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MonitorV1Event.

        A description of the event. Can be `null`.

        :param description: The description of this MonitorV1Event.
        :type description: str
        """

        self._description = description

    @property
    def event_data(self):
        """Gets the event_data of this MonitorV1Event.

        An object with additional data about the event. The  contents depend on `event_type`. For example, event-types of the form `RESOURCE.updated`, this value contains a `resource_properties` dictionary that describes the previous and updated properties of the resource.

        :return: The event_data of this MonitorV1Event.
        :rtype: object
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this MonitorV1Event.

        An object with additional data about the event. The  contents depend on `event_type`. For example, event-types of the form `RESOURCE.updated`, this value contains a `resource_properties` dictionary that describes the previous and updated properties of the resource.

        :param event_data: The event_data of this MonitorV1Event.
        :type event_data: object
        """

        self._event_data = event_data

    @property
    def event_date(self):
        """Gets the event_date of this MonitorV1Event.

        The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The event_date of this MonitorV1Event.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this MonitorV1Event.

        The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param event_date: The event_date of this MonitorV1Event.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def event_type(self):
        """Gets the event_type of this MonitorV1Event.

        The event's type. Event-types are typically in the form: `RESOURCE_TYPE.ACTION`, where `RESOURCE_TYPE` is the type of resource that was affected and `ACTION` is what happened to it. For example, `phone-number.created`. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).

        :return: The event_type of this MonitorV1Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MonitorV1Event.

        The event's type. Event-types are typically in the form: `RESOURCE_TYPE.ACTION`, where `RESOURCE_TYPE` is the type of resource that was affected and `ACTION` is what happened to it. For example, `phone-number.created`. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).

        :param event_type: The event_type of this MonitorV1Event.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def links(self):
        """Gets the links of this MonitorV1Event.

        The absolute URLs of related resources.

        :return: The links of this MonitorV1Event.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MonitorV1Event.

        The absolute URLs of related resources.

        :param links: The links of this MonitorV1Event.
        :type links: object
        """

        self._links = links

    @property
    def resource_sid(self):
        """Gets the resource_sid of this MonitorV1Event.

        The SID of the resource that was affected.

        :return: The resource_sid of this MonitorV1Event.
        :rtype: str
        """
        return self._resource_sid

    @resource_sid.setter
    def resource_sid(self, resource_sid):
        """Sets the resource_sid of this MonitorV1Event.

        The SID of the resource that was affected.

        :param resource_sid: The resource_sid of this MonitorV1Event.
        :type resource_sid: str
        """
        if resource_sid is not None and len(resource_sid) > 34:
            raise ValueError("Invalid value for `resource_sid`, length must be less than or equal to `34`")
        if resource_sid is not None and len(resource_sid) < 34:
            raise ValueError("Invalid value for `resource_sid`, length must be greater than or equal to `34`")
        if resource_sid is not None and not re.search(r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', resource_sid):
            raise ValueError("Invalid value for `resource_sid`, must be a follow pattern or equal to `/^[a-zA-Z]{2}[0-9a-fA-F]{32}$/`")

        self._resource_sid = resource_sid

    @property
    def resource_type(self):
        """Gets the resource_type of this MonitorV1Event.

        The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).

        :return: The resource_type of this MonitorV1Event.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MonitorV1Event.

        The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).

        :param resource_type: The resource_type of this MonitorV1Event.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def sid(self):
        """Gets the sid of this MonitorV1Event.

        The unique string that we created to identify the Event resource.

        :return: The sid of this MonitorV1Event.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MonitorV1Event.

        The unique string that we created to identify the Event resource.

        :param sid: The sid of this MonitorV1Event.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^AE[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^AE[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def source(self):
        """Gets the source of this MonitorV1Event.

        The originating system or interface that caused the event.  Can be: `web` for events caused by user action in the Twilio Console, `api` for events caused by a request to our API, or   `twilio` for events caused by an automated or internal Twilio system.

        :return: The source of this MonitorV1Event.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MonitorV1Event.

        The originating system or interface that caused the event.  Can be: `web` for events caused by user action in the Twilio Console, `api` for events caused by a request to our API, or   `twilio` for events caused by an automated or internal Twilio system.

        :param source: The source of this MonitorV1Event.
        :type source: str
        """

        self._source = source

    @property
    def source_ip_address(self):
        """Gets the source_ip_address of this MonitorV1Event.

        The IP address of the source, if the source is outside the Twilio cloud. This value is `null` for events with `source` of `twilio`

        :return: The source_ip_address of this MonitorV1Event.
        :rtype: str
        """
        return self._source_ip_address

    @source_ip_address.setter
    def source_ip_address(self, source_ip_address):
        """Sets the source_ip_address of this MonitorV1Event.

        The IP address of the source, if the source is outside the Twilio cloud. This value is `null` for events with `source` of `twilio`

        :param source_ip_address: The source_ip_address of this MonitorV1Event.
        :type source_ip_address: str
        """

        self._source_ip_address = source_ip_address

    @property
    def url(self):
        """Gets the url of this MonitorV1Event.

        The absolute URL of the resource that was affected. Can be `null`.

        :return: The url of this MonitorV1Event.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MonitorV1Event.

        The absolute URL of the resource that was affected. Can be `null`.

        :param url: The url of this MonitorV1Event.
        :type url: str
        """

        self._url = url
