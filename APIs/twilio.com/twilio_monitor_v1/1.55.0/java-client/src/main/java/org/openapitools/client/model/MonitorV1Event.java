/*
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MonitorV1Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:54.280585-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitorV1Event {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_ACTOR_SID = "actor_sid";
  @SerializedName(SERIALIZED_NAME_ACTOR_SID)
  private String actorSid;

  public static final String SERIALIZED_NAME_ACTOR_TYPE = "actor_type";
  @SerializedName(SERIALIZED_NAME_ACTOR_TYPE)
  private String actorType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATA = "event_data";
  @SerializedName(SERIALIZED_NAME_EVENT_DATA)
  private Object eventData = null;

  public static final String SERIALIZED_NAME_EVENT_DATE = "event_date";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_RESOURCE_SID = "resource_sid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SID)
  private String resourceSid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_IP_ADDRESS = "source_ip_address";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP_ADDRESS)
  private String sourceIpAddress;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public MonitorV1Event() {
  }

  public MonitorV1Event accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public MonitorV1Event actorSid(String actorSid) {
    this.actorSid = actorSid;
    return this;
  }

  /**
   * The SID of the actor that caused the event, if available. Can be &#x60;null&#x60;.
   * @return actorSid
   */
  @javax.annotation.Nullable
  public String getActorSid() {
    return actorSid;
  }

  public void setActorSid(String actorSid) {
    this.actorSid = actorSid;
  }


  public MonitorV1Event actorType(String actorType) {
    this.actorType = actorType;
    return this;
  }

  /**
   * The type of actor that caused the event. Can be: &#x60;user&#x60; for a change made by a logged-in user in the Twilio Console, &#x60;account&#x60; for an event caused by an API request by an authenticating Account, &#x60;twilio-admin&#x60; for an event caused by a Twilio employee, and so on.
   * @return actorType
   */
  @javax.annotation.Nullable
  public String getActorType() {
    return actorType;
  }

  public void setActorType(String actorType) {
    this.actorType = actorType;
  }


  public MonitorV1Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the event. Can be &#x60;null&#x60;.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MonitorV1Event eventData(Object eventData) {
    this.eventData = eventData;
    return this;
  }

  /**
   * An object with additional data about the event. The  contents depend on &#x60;event_type&#x60;. For example, event-types of the form &#x60;RESOURCE.updated&#x60;, this value contains a &#x60;resource_properties&#x60; dictionary that describes the previous and updated properties of the resource.
   * @return eventData
   */
  @javax.annotation.Nullable
  public Object getEventData() {
    return eventData;
  }

  public void setEventData(Object eventData) {
    this.eventData = eventData;
  }


  public MonitorV1Event eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return eventDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public MonitorV1Event eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The event&#39;s type. Event-types are typically in the form: &#x60;RESOURCE_TYPE.ACTION&#x60;, where &#x60;RESOURCE_TYPE&#x60; is the type of resource that was affected and &#x60;ACTION&#x60; is what happened to it. For example, &#x60;phone-number.created&#x60;. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public MonitorV1Event links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The absolute URLs of related resources.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public MonitorV1Event resourceSid(String resourceSid) {
    this.resourceSid = resourceSid;
    return this;
  }

  /**
   * The SID of the resource that was affected.
   * @return resourceSid
   */
  @javax.annotation.Nullable
  public String getResourceSid() {
    return resourceSid;
  }

  public void setResourceSid(String resourceSid) {
    this.resourceSid = resourceSid;
  }


  public MonitorV1Event resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types).
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public MonitorV1Event sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Event resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public MonitorV1Event source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The originating system or interface that caused the event.  Can be: &#x60;web&#x60; for events caused by user action in the Twilio Console, &#x60;api&#x60; for events caused by a request to our API, or   &#x60;twilio&#x60; for events caused by an automated or internal Twilio system.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public MonitorV1Event sourceIpAddress(String sourceIpAddress) {
    this.sourceIpAddress = sourceIpAddress;
    return this;
  }

  /**
   * The IP address of the source, if the source is outside the Twilio cloud. This value is &#x60;null&#x60; for events with &#x60;source&#x60; of &#x60;twilio&#x60;
   * @return sourceIpAddress
   */
  @javax.annotation.Nullable
  public String getSourceIpAddress() {
    return sourceIpAddress;
  }

  public void setSourceIpAddress(String sourceIpAddress) {
    this.sourceIpAddress = sourceIpAddress;
  }


  public MonitorV1Event url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource that was affected. Can be &#x60;null&#x60;.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitorV1Event monitorV1Event = (MonitorV1Event) o;
    return Objects.equals(this.accountSid, monitorV1Event.accountSid) &&
        Objects.equals(this.actorSid, monitorV1Event.actorSid) &&
        Objects.equals(this.actorType, monitorV1Event.actorType) &&
        Objects.equals(this.description, monitorV1Event.description) &&
        Objects.equals(this.eventData, monitorV1Event.eventData) &&
        Objects.equals(this.eventDate, monitorV1Event.eventDate) &&
        Objects.equals(this.eventType, monitorV1Event.eventType) &&
        Objects.equals(this.links, monitorV1Event.links) &&
        Objects.equals(this.resourceSid, monitorV1Event.resourceSid) &&
        Objects.equals(this.resourceType, monitorV1Event.resourceType) &&
        Objects.equals(this.sid, monitorV1Event.sid) &&
        Objects.equals(this.source, monitorV1Event.source) &&
        Objects.equals(this.sourceIpAddress, monitorV1Event.sourceIpAddress) &&
        Objects.equals(this.url, monitorV1Event.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, actorSid, actorType, description, eventData, eventDate, eventType, links, resourceSid, resourceType, sid, source, sourceIpAddress, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitorV1Event {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    actorSid: ").append(toIndentedString(actorSid)).append("\n");
    sb.append("    actorType: ").append(toIndentedString(actorType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventData: ").append(toIndentedString(eventData)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    resourceSid: ").append(toIndentedString(resourceSid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceIpAddress: ").append(toIndentedString(sourceIpAddress)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("actor_sid");
    openapiFields.add("actor_type");
    openapiFields.add("description");
    openapiFields.add("event_data");
    openapiFields.add("event_date");
    openapiFields.add("event_type");
    openapiFields.add("links");
    openapiFields.add("resource_sid");
    openapiFields.add("resource_type");
    openapiFields.add("sid");
    openapiFields.add("source");
    openapiFields.add("source_ip_address");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitorV1Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitorV1Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitorV1Event is not found in the empty JSON string", MonitorV1Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitorV1Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitorV1Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("actor_sid") != null && !jsonObj.get("actor_sid").isJsonNull()) && !jsonObj.get("actor_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_sid").toString()));
      }
      if ((jsonObj.get("actor_type") != null && !jsonObj.get("actor_type").isJsonNull()) && !jsonObj.get("actor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("resource_sid") != null && !jsonObj.get("resource_sid").isJsonNull()) && !jsonObj.get("resource_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_sid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("source_ip_address") != null && !jsonObj.get("source_ip_address").isJsonNull()) && !jsonObj.get("source_ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_ip_address").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitorV1Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitorV1Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitorV1Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitorV1Event.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitorV1Event>() {
           @Override
           public void write(JsonWriter out, MonitorV1Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitorV1Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitorV1Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitorV1Event
   * @throws IOException if the JSON string is invalid with respect to MonitorV1Event
   */
  public static MonitorV1Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitorV1Event.class);
  }

  /**
   * Convert an instance of MonitorV1Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

