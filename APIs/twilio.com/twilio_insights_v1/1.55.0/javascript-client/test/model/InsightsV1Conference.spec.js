/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TwilioInsights);
  }
}(this, function(expect, TwilioInsights) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TwilioInsights.InsightsV1Conference();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InsightsV1Conference', function() {
    it('should create an instance of InsightsV1Conference', function() {
      // uncomment below and update the code to test InsightsV1Conference
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be.a(TwilioInsights.InsightsV1Conference);
    });

    it('should have the property accountSid (base name: "account_sid")', function() {
      // uncomment below and update the code to test the property accountSid
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property conferenceSid (base name: "conference_sid")', function() {
      // uncomment below and update the code to test the property conferenceSid
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property connectDurationSeconds (base name: "connect_duration_seconds")', function() {
      // uncomment below and update the code to test the property connectDurationSeconds
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "create_time")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property detectedIssues (base name: "detected_issues")', function() {
      // uncomment below and update the code to test the property detectedIssues
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property durationSeconds (base name: "duration_seconds")', function() {
      // uncomment below and update the code to test the property durationSeconds
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property endReason (base name: "end_reason")', function() {
      // uncomment below and update the code to test the property endReason
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "end_time")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property endedBy (base name: "ended_by")', function() {
      // uncomment below and update the code to test the property endedBy
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property friendlyName (base name: "friendly_name")', function() {
      // uncomment below and update the code to test the property friendlyName
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property maxConcurrentParticipants (base name: "max_concurrent_participants")', function() {
      // uncomment below and update the code to test the property maxConcurrentParticipants
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property maxParticipants (base name: "max_participants")', function() {
      // uncomment below and update the code to test the property maxParticipants
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property mixerRegion (base name: "mixer_region")', function() {
      // uncomment below and update the code to test the property mixerRegion
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property mixerRegionRequested (base name: "mixer_region_requested")', function() {
      // uncomment below and update the code to test the property mixerRegionRequested
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property processingState (base name: "processing_state")', function() {
      // uncomment below and update the code to test the property processingState
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property recordingEnabled (base name: "recording_enabled")', function() {
      // uncomment below and update the code to test the property recordingEnabled
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property tagInfo (base name: "tag_info")', function() {
      // uncomment below and update the code to test the property tagInfo
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property uniqueParticipants (base name: "unique_participants")', function() {
      // uncomment below and update the code to test the property uniqueParticipants
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new TwilioInsights.InsightsV1Conference();
      //expect(instance).to.be();
    });

  });

}));
