/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InsightsV1Conference from '../model/InsightsV1Conference';
import ListConferenceResponse from '../model/ListConferenceResponse';

/**
* InsightsV1Conference service.
* @module api/InsightsV1ConferenceApi
* @version 1.55.0
*/
export default class InsightsV1ConferenceApi {

    /**
    * Constructs a new InsightsV1ConferenceApi. 
    * @alias module:api/InsightsV1ConferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchConference operation.
     * @callback module:api/InsightsV1ConferenceApi~fetchConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsightsV1Conference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Conference Summary.
     * @param {String} conferenceSid The unique SID identifier of the Conference.
     * @param {module:api/InsightsV1ConferenceApi~fetchConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsightsV1Conference}
     */
    fetchConference(conferenceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling fetchConference");
      }

      let pathParams = {
        'ConferenceSid': conferenceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InsightsV1Conference;
      let basePaths = ['https://insights.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conferences/{ConferenceSid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConference operation.
     * @callback module:api/InsightsV1ConferenceApi~listConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConferenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Conference Summaries.
     * @param {Object} opts Optional parameters
     * @param {String} [conferenceSid] The SID of the conference.
     * @param {String} [friendlyName] Custom label for the conference resource, up to 64 characters.
     * @param {String} [status] Conference status.
     * @param {String} [createdAfter] Conferences created after the provided timestamp specified in ISO 8601 format
     * @param {String} [createdBefore] Conferences created before the provided timestamp specified in ISO 8601 format.
     * @param {String} [mixerRegion] Twilio region where the conference media was mixed.
     * @param {String} [tags] Tags applied by Twilio for common potential configuration, quality, or performance issues.
     * @param {String} [subaccount] Account SID for the subaccount whose resources you wish to retrieve.
     * @param {String} [detectedIssues] Potential configuration, behavior, or performance issues detected during the conference.
     * @param {String} [endReason] Conference end reason; e.g. last participant left, modified by API, etc.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/InsightsV1ConferenceApi~listConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConferenceResponse}
     */
    listConference(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ConferenceSid': opts['conferenceSid'],
        'FriendlyName': opts['friendlyName'],
        'Status': opts['status'],
        'CreatedAfter': opts['createdAfter'],
        'CreatedBefore': opts['createdBefore'],
        'MixerRegion': opts['mixerRegion'],
        'Tags': opts['tags'],
        'Subaccount': opts['subaccount'],
        'DetectedIssues': opts['detectedIssues'],
        'EndReason': opts['endReason'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConferenceResponse;
      let basePaths = ['https://insights.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Conferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
