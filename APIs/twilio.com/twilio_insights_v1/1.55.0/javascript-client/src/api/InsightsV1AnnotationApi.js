/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnotationEnumAnsweredBy from '../model/AnnotationEnumAnsweredBy';
import AnnotationEnumConnectivityIssue from '../model/AnnotationEnumConnectivityIssue';
import InsightsV1CallAnnotation from '../model/InsightsV1CallAnnotation';

/**
* InsightsV1Annotation service.
* @module api/InsightsV1AnnotationApi
* @version 1.55.0
*/
export default class InsightsV1AnnotationApi {

    /**
    * Constructs a new InsightsV1AnnotationApi. 
    * @alias module:api/InsightsV1AnnotationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchAnnotation operation.
     * @callback module:api/InsightsV1AnnotationApi~fetchAnnotationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsightsV1CallAnnotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Annotation for a specific Call.
     * @param {String} callSid The unique SID identifier of the Call.
     * @param {module:api/InsightsV1AnnotationApi~fetchAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsightsV1CallAnnotation}
     */
    fetchAnnotation(callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling fetchAnnotation");
      }

      let pathParams = {
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InsightsV1CallAnnotation;
      let basePaths = ['https://insights.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Voice/{CallSid}/Annotation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnnotation operation.
     * @callback module:api/InsightsV1AnnotationApi~updateAnnotationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsightsV1CallAnnotation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Annotation for a specific Call.
     * @param {String} callSid The unique string that Twilio created to identify this Call resource. It always starts with a CA.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnnotationEnumAnsweredBy} [answeredBy] 
     * @param {Number} [callScore] Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
     * @param {String} [comment] Specify any comments pertaining to the call. `comment` has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the `comment`.
     * @param {module:model/AnnotationEnumConnectivityIssue} [connectivityIssue] 
     * @param {String} [incident] Associate this call with an incident or support ticket. The `incident` parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.
     * @param {String} [qualityIssues] Specify if the call had any subjective quality issues. Possible values, one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`. Use comma separated values to indicate multiple quality issues for the same call.
     * @param {Boolean} [spam] A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use `true` if the call was a spam call.
     * @param {module:api/InsightsV1AnnotationApi~updateAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsightsV1CallAnnotation}
     */
    updateAnnotation(callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling updateAnnotation");
      }

      let pathParams = {
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnsweredBy': opts['answeredBy'],
        'CallScore': opts['callScore'],
        'Comment': opts['comment'],
        'ConnectivityIssue': opts['connectivityIssue'],
        'Incident': opts['incident'],
        'QualityIssues': opts['qualityIssues'],
        'Spam': opts['spam']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InsightsV1CallAnnotation;
      let basePaths = ['https://insights.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Voice/{CallSid}/Annotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
