/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationEnumAnsweredBy from './AnnotationEnumAnsweredBy';
import AnnotationEnumConnectivityIssue from './AnnotationEnumConnectivityIssue';

/**
 * The InsightsV1CallAnnotation model module.
 * @module model/InsightsV1CallAnnotation
 * @version 1.55.0
 */
class InsightsV1CallAnnotation {
    /**
     * Constructs a new <code>InsightsV1CallAnnotation</code>.
     * @alias module:model/InsightsV1CallAnnotation
     */
    constructor() { 
        
        InsightsV1CallAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsightsV1CallAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsightsV1CallAnnotation} obj Optional instance to populate.
     * @return {module:model/InsightsV1CallAnnotation} The populated <code>InsightsV1CallAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsightsV1CallAnnotation();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('answered_by')) {
                obj['answered_by'] = AnnotationEnumAnsweredBy.constructFromObject(data['answered_by']);
            }
            if (data.hasOwnProperty('call_score')) {
                obj['call_score'] = ApiClient.convertToType(data['call_score'], 'Number');
            }
            if (data.hasOwnProperty('call_sid')) {
                obj['call_sid'] = ApiClient.convertToType(data['call_sid'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('connectivity_issue')) {
                obj['connectivity_issue'] = AnnotationEnumConnectivityIssue.constructFromObject(data['connectivity_issue']);
            }
            if (data.hasOwnProperty('incident')) {
                obj['incident'] = ApiClient.convertToType(data['incident'], 'String');
            }
            if (data.hasOwnProperty('quality_issues')) {
                obj['quality_issues'] = ApiClient.convertToType(data['quality_issues'], ['String']);
            }
            if (data.hasOwnProperty('spam')) {
                obj['spam'] = ApiClient.convertToType(data['spam'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsightsV1CallAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsightsV1CallAnnotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['answered_by'] && !(typeof data['answered_by'] === 'string' || data['answered_by'] instanceof String)) {
            throw new Error("Expected the field `answered_by` to be a primitive type in the JSON string but got " + data['answered_by']);
        }
        // ensure the json data is a string
        if (data['call_sid'] && !(typeof data['call_sid'] === 'string' || data['call_sid'] instanceof String)) {
            throw new Error("Expected the field `call_sid` to be a primitive type in the JSON string but got " + data['call_sid']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['connectivity_issue'] && !(typeof data['connectivity_issue'] === 'string' || data['connectivity_issue'] instanceof String)) {
            throw new Error("Expected the field `connectivity_issue` to be a primitive type in the JSON string but got " + data['connectivity_issue']);
        }
        // ensure the json data is a string
        if (data['incident'] && !(typeof data['incident'] === 'string' || data['incident'] instanceof String)) {
            throw new Error("Expected the field `incident` to be a primitive type in the JSON string but got " + data['incident']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['quality_issues'])) {
            throw new Error("Expected the field `quality_issues` to be an array in the JSON data but got " + data['quality_issues']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The unique SID identifier of the Account.
 * @member {String} account_sid
 */
InsightsV1CallAnnotation.prototype['account_sid'] = undefined;

/**
 * @member {module:model/AnnotationEnumAnsweredBy} answered_by
 */
InsightsV1CallAnnotation.prototype['answered_by'] = undefined;

/**
 * Specifies the Call Score, if available. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
 * @member {Number} call_score
 */
InsightsV1CallAnnotation.prototype['call_score'] = undefined;

/**
 * The unique SID identifier of the Call.
 * @member {String} call_sid
 */
InsightsV1CallAnnotation.prototype['call_sid'] = undefined;

/**
 * Specifies any comments pertaining to the call. Twilio does not treat this field as PII, so no PII should be included in comments.
 * @member {String} comment
 */
InsightsV1CallAnnotation.prototype['comment'] = undefined;

/**
 * @member {module:model/AnnotationEnumConnectivityIssue} connectivity_issue
 */
InsightsV1CallAnnotation.prototype['connectivity_issue'] = undefined;

/**
 * Incident or support ticket associated with this call. The `incident` property is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.
 * @member {String} incident
 */
InsightsV1CallAnnotation.prototype['incident'] = undefined;

/**
 * Specifies if the call had any subjective quality issues. Possible values are one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, or `static_noise`.
 * @member {Array.<String>} quality_issues
 */
InsightsV1CallAnnotation.prototype['quality_issues'] = undefined;

/**
 * Specifies if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
 * @member {Boolean} spam
 */
InsightsV1CallAnnotation.prototype['spam'] = undefined;

/**
 * @member {String} url
 */
InsightsV1CallAnnotation.prototype['url'] = undefined;






export default InsightsV1CallAnnotation;

