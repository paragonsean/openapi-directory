/*
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListMetricResponse;
import org.openapitools.client.model.MetricEnumStreamDirection;
import org.openapitools.client.model.MetricEnumTwilioEdge;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsV1MetricApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsV1MetricApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsV1MetricApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listMetric
     * @param callSid The unique SID identifier of the Call. (required)
     * @param edge The Edge of this Metric. One of &#x60;unknown_edge&#x60;, &#x60;carrier_edge&#x60;, &#x60;sip_edge&#x60;, &#x60;sdk_edge&#x60; or &#x60;client_edge&#x60;. (optional)
     * @param direction The Direction of this Metric. One of &#x60;unknown&#x60;, &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetricCall(String callSid, MetricEnumTwilioEdge edge, MetricEnumStreamDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://insights.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Voice/{CallSid}/Metrics"
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Edge", edge));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Direction", direction));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMetricValidateBeforeCall(String callSid, MetricEnumTwilioEdge edge, MetricEnumStreamDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling listMetric(Async)");
        }

        return listMetricCall(callSid, edge, direction, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Get a list of Call Metrics for a Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @param edge The Edge of this Metric. One of &#x60;unknown_edge&#x60;, &#x60;carrier_edge&#x60;, &#x60;sip_edge&#x60;, &#x60;sdk_edge&#x60; or &#x60;client_edge&#x60;. (optional)
     * @param direction The Direction of this Metric. One of &#x60;unknown&#x60;, &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListMetricResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMetricResponse listMetric(String callSid, MetricEnumTwilioEdge edge, MetricEnumStreamDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListMetricResponse> localVarResp = listMetricWithHttpInfo(callSid, edge, direction, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of Call Metrics for a Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @param edge The Edge of this Metric. One of &#x60;unknown_edge&#x60;, &#x60;carrier_edge&#x60;, &#x60;sip_edge&#x60;, &#x60;sdk_edge&#x60; or &#x60;client_edge&#x60;. (optional)
     * @param direction The Direction of this Metric. One of &#x60;unknown&#x60;, &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListMetricResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMetricResponse> listMetricWithHttpInfo(String callSid, MetricEnumTwilioEdge edge, MetricEnumStreamDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listMetricValidateBeforeCall(callSid, edge, direction, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListMetricResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of Call Metrics for a Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @param edge The Edge of this Metric. One of &#x60;unknown_edge&#x60;, &#x60;carrier_edge&#x60;, &#x60;sip_edge&#x60;, &#x60;sdk_edge&#x60; or &#x60;client_edge&#x60;. (optional)
     * @param direction The Direction of this Metric. One of &#x60;unknown&#x60;, &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMetricAsync(String callSid, MetricEnumTwilioEdge edge, MetricEnumStreamDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListMetricResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMetricValidateBeforeCall(callSid, edge, direction, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListMetricResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
