/*
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnnotationEnumAnsweredBy;
import org.openapitools.client.model.AnnotationEnumConnectivityIssue;
import org.openapitools.client.model.InsightsV1CallAnnotation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsV1AnnotationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsV1AnnotationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsV1AnnotationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchAnnotation
     * @param callSid The unique SID identifier of the Call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAnnotationCall(String callSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://insights.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Voice/{CallSid}/Annotation"
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAnnotationValidateBeforeCall(String callSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling fetchAnnotation(Async)");
        }

        return fetchAnnotationCall(callSid, _callback);

    }

    /**
     * 
     * Get the Annotation for a specific Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @return InsightsV1CallAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InsightsV1CallAnnotation fetchAnnotation(String callSid) throws ApiException {
        ApiResponse<InsightsV1CallAnnotation> localVarResp = fetchAnnotationWithHttpInfo(callSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Annotation for a specific Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @return ApiResponse&lt;InsightsV1CallAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InsightsV1CallAnnotation> fetchAnnotationWithHttpInfo(String callSid) throws ApiException {
        okhttp3.Call localVarCall = fetchAnnotationValidateBeforeCall(callSid, null);
        Type localVarReturnType = new TypeToken<InsightsV1CallAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Annotation for a specific Call.
     * @param callSid The unique SID identifier of the Call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAnnotationAsync(String callSid, final ApiCallback<InsightsV1CallAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchAnnotationValidateBeforeCall(callSid, _callback);
        Type localVarReturnType = new TypeToken<InsightsV1CallAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnnotation
     * @param callSid The unique string that Twilio created to identify this Call resource. It always starts with a CA. (required)
     * @param answeredBy  (optional)
     * @param callScore Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad]. (optional)
     * @param comment Specify any comments pertaining to the call. &#x60;comment&#x60; has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the &#x60;comment&#x60;. (optional)
     * @param connectivityIssue  (optional)
     * @param incident Associate this call with an incident or support ticket. The &#x60;incident&#x60; parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in &#x60;incident&#x60;. (optional)
     * @param qualityIssues Specify if the call had any subjective quality issues. Possible values, one or more of &#x60;no_quality_issue&#x60;, &#x60;low_volume&#x60;, &#x60;choppy_robotic&#x60;, &#x60;echo&#x60;, &#x60;dtmf&#x60;, &#x60;latency&#x60;, &#x60;owa&#x60;, &#x60;static_noise&#x60;. Use comma separated values to indicate multiple quality issues for the same call. (optional)
     * @param spam A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use &#x60;true&#x60; if the call was a spam call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnotationCall(String callSid, AnnotationEnumAnsweredBy answeredBy, Integer callScore, String comment, AnnotationEnumConnectivityIssue connectivityIssue, String incident, String qualityIssues, Boolean spam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://insights.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Voice/{CallSid}/Annotation"
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (answeredBy != null) {
            localVarFormParams.put("AnsweredBy", answeredBy);
        }

        if (callScore != null) {
            localVarFormParams.put("CallScore", callScore);
        }

        if (comment != null) {
            localVarFormParams.put("Comment", comment);
        }

        if (connectivityIssue != null) {
            localVarFormParams.put("ConnectivityIssue", connectivityIssue);
        }

        if (incident != null) {
            localVarFormParams.put("Incident", incident);
        }

        if (qualityIssues != null) {
            localVarFormParams.put("QualityIssues", qualityIssues);
        }

        if (spam != null) {
            localVarFormParams.put("Spam", spam);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnnotationValidateBeforeCall(String callSid, AnnotationEnumAnsweredBy answeredBy, Integer callScore, String comment, AnnotationEnumConnectivityIssue connectivityIssue, String incident, String qualityIssues, Boolean spam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling updateAnnotation(Async)");
        }

        return updateAnnotationCall(callSid, answeredBy, callScore, comment, connectivityIssue, incident, qualityIssues, spam, _callback);

    }

    /**
     * 
     * Update an Annotation for a specific Call.
     * @param callSid The unique string that Twilio created to identify this Call resource. It always starts with a CA. (required)
     * @param answeredBy  (optional)
     * @param callScore Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad]. (optional)
     * @param comment Specify any comments pertaining to the call. &#x60;comment&#x60; has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the &#x60;comment&#x60;. (optional)
     * @param connectivityIssue  (optional)
     * @param incident Associate this call with an incident or support ticket. The &#x60;incident&#x60; parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in &#x60;incident&#x60;. (optional)
     * @param qualityIssues Specify if the call had any subjective quality issues. Possible values, one or more of &#x60;no_quality_issue&#x60;, &#x60;low_volume&#x60;, &#x60;choppy_robotic&#x60;, &#x60;echo&#x60;, &#x60;dtmf&#x60;, &#x60;latency&#x60;, &#x60;owa&#x60;, &#x60;static_noise&#x60;. Use comma separated values to indicate multiple quality issues for the same call. (optional)
     * @param spam A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use &#x60;true&#x60; if the call was a spam call. (optional)
     * @return InsightsV1CallAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InsightsV1CallAnnotation updateAnnotation(String callSid, AnnotationEnumAnsweredBy answeredBy, Integer callScore, String comment, AnnotationEnumConnectivityIssue connectivityIssue, String incident, String qualityIssues, Boolean spam) throws ApiException {
        ApiResponse<InsightsV1CallAnnotation> localVarResp = updateAnnotationWithHttpInfo(callSid, answeredBy, callScore, comment, connectivityIssue, incident, qualityIssues, spam);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Annotation for a specific Call.
     * @param callSid The unique string that Twilio created to identify this Call resource. It always starts with a CA. (required)
     * @param answeredBy  (optional)
     * @param callScore Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad]. (optional)
     * @param comment Specify any comments pertaining to the call. &#x60;comment&#x60; has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the &#x60;comment&#x60;. (optional)
     * @param connectivityIssue  (optional)
     * @param incident Associate this call with an incident or support ticket. The &#x60;incident&#x60; parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in &#x60;incident&#x60;. (optional)
     * @param qualityIssues Specify if the call had any subjective quality issues. Possible values, one or more of &#x60;no_quality_issue&#x60;, &#x60;low_volume&#x60;, &#x60;choppy_robotic&#x60;, &#x60;echo&#x60;, &#x60;dtmf&#x60;, &#x60;latency&#x60;, &#x60;owa&#x60;, &#x60;static_noise&#x60;. Use comma separated values to indicate multiple quality issues for the same call. (optional)
     * @param spam A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use &#x60;true&#x60; if the call was a spam call. (optional)
     * @return ApiResponse&lt;InsightsV1CallAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InsightsV1CallAnnotation> updateAnnotationWithHttpInfo(String callSid, AnnotationEnumAnsweredBy answeredBy, Integer callScore, String comment, AnnotationEnumConnectivityIssue connectivityIssue, String incident, String qualityIssues, Boolean spam) throws ApiException {
        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(callSid, answeredBy, callScore, comment, connectivityIssue, incident, qualityIssues, spam, null);
        Type localVarReturnType = new TypeToken<InsightsV1CallAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Annotation for a specific Call.
     * @param callSid The unique string that Twilio created to identify this Call resource. It always starts with a CA. (required)
     * @param answeredBy  (optional)
     * @param callScore Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad]. (optional)
     * @param comment Specify any comments pertaining to the call. &#x60;comment&#x60; has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the &#x60;comment&#x60;. (optional)
     * @param connectivityIssue  (optional)
     * @param incident Associate this call with an incident or support ticket. The &#x60;incident&#x60; parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in &#x60;incident&#x60;. (optional)
     * @param qualityIssues Specify if the call had any subjective quality issues. Possible values, one or more of &#x60;no_quality_issue&#x60;, &#x60;low_volume&#x60;, &#x60;choppy_robotic&#x60;, &#x60;echo&#x60;, &#x60;dtmf&#x60;, &#x60;latency&#x60;, &#x60;owa&#x60;, &#x60;static_noise&#x60;. Use comma separated values to indicate multiple quality issues for the same call. (optional)
     * @param spam A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use &#x60;true&#x60; if the call was a spam call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnnotationAsync(String callSid, AnnotationEnumAnsweredBy answeredBy, Integer callScore, String comment, AnnotationEnumConnectivityIssue connectivityIssue, String incident, String qualityIssues, Boolean spam, final ApiCallback<InsightsV1CallAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(callSid, answeredBy, callScore, comment, connectivityIssue, incident, qualityIssues, spam, _callback);
        Type localVarReturnType = new TypeToken<InsightsV1CallAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
