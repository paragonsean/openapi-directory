/*
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConferenceEnumConferenceEndReason;
import org.openapitools.client.model.ConferenceEnumConferenceStatus;
import org.openapitools.client.model.ConferenceEnumProcessingState;
import org.openapitools.client.model.ConferenceEnumRegion;
import org.openapitools.client.model.ConferenceEnumTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InsightsV1Conference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:42.474945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightsV1Conference {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CONFERENCE_SID = "conference_sid";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_SID)
  private String conferenceSid;

  public static final String SERIALIZED_NAME_CONNECT_DURATION_SECONDS = "connect_duration_seconds";
  @SerializedName(SERIALIZED_NAME_CONNECT_DURATION_SECONDS)
  private Integer connectDurationSeconds;

  public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_DETECTED_ISSUES = "detected_issues";
  @SerializedName(SERIALIZED_NAME_DETECTED_ISSUES)
  private Object detectedIssues = null;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "duration_seconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public static final String SERIALIZED_NAME_END_REASON = "end_reason";
  @SerializedName(SERIALIZED_NAME_END_REASON)
  private ConferenceEnumConferenceEndReason endReason;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ENDED_BY = "ended_by";
  @SerializedName(SERIALIZED_NAME_ENDED_BY)
  private String endedBy;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_PARTICIPANTS = "max_concurrent_participants";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_PARTICIPANTS)
  private Integer maxConcurrentParticipants;

  public static final String SERIALIZED_NAME_MAX_PARTICIPANTS = "max_participants";
  @SerializedName(SERIALIZED_NAME_MAX_PARTICIPANTS)
  private Integer maxParticipants;

  public static final String SERIALIZED_NAME_MIXER_REGION = "mixer_region";
  @SerializedName(SERIALIZED_NAME_MIXER_REGION)
  private ConferenceEnumRegion mixerRegion;

  public static final String SERIALIZED_NAME_MIXER_REGION_REQUESTED = "mixer_region_requested";
  @SerializedName(SERIALIZED_NAME_MIXER_REGION_REQUESTED)
  private ConferenceEnumRegion mixerRegionRequested;

  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processing_state";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  private ConferenceEnumProcessingState processingState;

  public static final String SERIALIZED_NAME_RECORDING_ENABLED = "recording_enabled";
  @SerializedName(SERIALIZED_NAME_RECORDING_ENABLED)
  private Boolean recordingEnabled;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConferenceEnumConferenceStatus status;

  public static final String SERIALIZED_NAME_TAG_INFO = "tag_info";
  @SerializedName(SERIALIZED_NAME_TAG_INFO)
  private Object tagInfo = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ConferenceEnumTag> tags;

  public static final String SERIALIZED_NAME_UNIQUE_PARTICIPANTS = "unique_participants";
  @SerializedName(SERIALIZED_NAME_UNIQUE_PARTICIPANTS)
  private Integer uniqueParticipants;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public InsightsV1Conference() {
  }

  public InsightsV1Conference accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique SID identifier of the Account.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public InsightsV1Conference conferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
    return this;
  }

  /**
   * The unique SID identifier of the Conference.
   * @return conferenceSid
   */
  @javax.annotation.Nullable
  public String getConferenceSid() {
    return conferenceSid;
  }

  public void setConferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
  }


  public InsightsV1Conference connectDurationSeconds(Integer connectDurationSeconds) {
    this.connectDurationSeconds = connectDurationSeconds;
    return this;
  }

  /**
   * Duration of the between conference start event and conference end event in seconds.
   * @return connectDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getConnectDurationSeconds() {
    return connectDurationSeconds;
  }

  public void setConnectDurationSeconds(Integer connectDurationSeconds) {
    this.connectDurationSeconds = connectDurationSeconds;
  }


  public InsightsV1Conference createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Conference creation date and time in ISO 8601 format.
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public InsightsV1Conference detectedIssues(Object detectedIssues) {
    this.detectedIssues = detectedIssues;
    return this;
  }

  /**
   * Potential issues detected by Twilio during the conference.
   * @return detectedIssues
   */
  @javax.annotation.Nullable
  public Object getDetectedIssues() {
    return detectedIssues;
  }

  public void setDetectedIssues(Object detectedIssues) {
    this.detectedIssues = detectedIssues;
  }


  public InsightsV1Conference durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Conference duration in seconds.
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public InsightsV1Conference endReason(ConferenceEnumConferenceEndReason endReason) {
    this.endReason = endReason;
    return this;
  }

  /**
   * Get endReason
   * @return endReason
   */
  @javax.annotation.Nullable
  public ConferenceEnumConferenceEndReason getEndReason() {
    return endReason;
  }

  public void setEndReason(ConferenceEnumConferenceEndReason endReason) {
    this.endReason = endReason;
  }


  public InsightsV1Conference endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Conference end date and time in ISO 8601 format.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public InsightsV1Conference endedBy(String endedBy) {
    this.endedBy = endedBy;
    return this;
  }

  /**
   * Call SID of the participant whose actions ended the conference.
   * @return endedBy
   */
  @javax.annotation.Nullable
  public String getEndedBy() {
    return endedBy;
  }

  public void setEndedBy(String endedBy) {
    this.endedBy = endedBy;
  }


  public InsightsV1Conference friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Custom label for the conference resource, up to 64 characters.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public InsightsV1Conference links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Contains a dictionary of URL links to nested resources of this Conference.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public InsightsV1Conference maxConcurrentParticipants(Integer maxConcurrentParticipants) {
    this.maxConcurrentParticipants = maxConcurrentParticipants;
    return this;
  }

  /**
   * Actual maximum number of concurrent participants in the conference.
   * @return maxConcurrentParticipants
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentParticipants() {
    return maxConcurrentParticipants;
  }

  public void setMaxConcurrentParticipants(Integer maxConcurrentParticipants) {
    this.maxConcurrentParticipants = maxConcurrentParticipants;
  }


  public InsightsV1Conference maxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
    return this;
  }

  /**
   * Maximum number of concurrent participants as specified by the configuration.
   * @return maxParticipants
   */
  @javax.annotation.Nullable
  public Integer getMaxParticipants() {
    return maxParticipants;
  }

  public void setMaxParticipants(Integer maxParticipants) {
    this.maxParticipants = maxParticipants;
  }


  public InsightsV1Conference mixerRegion(ConferenceEnumRegion mixerRegion) {
    this.mixerRegion = mixerRegion;
    return this;
  }

  /**
   * Get mixerRegion
   * @return mixerRegion
   */
  @javax.annotation.Nullable
  public ConferenceEnumRegion getMixerRegion() {
    return mixerRegion;
  }

  public void setMixerRegion(ConferenceEnumRegion mixerRegion) {
    this.mixerRegion = mixerRegion;
  }


  public InsightsV1Conference mixerRegionRequested(ConferenceEnumRegion mixerRegionRequested) {
    this.mixerRegionRequested = mixerRegionRequested;
    return this;
  }

  /**
   * Get mixerRegionRequested
   * @return mixerRegionRequested
   */
  @javax.annotation.Nullable
  public ConferenceEnumRegion getMixerRegionRequested() {
    return mixerRegionRequested;
  }

  public void setMixerRegionRequested(ConferenceEnumRegion mixerRegionRequested) {
    this.mixerRegionRequested = mixerRegionRequested;
  }


  public InsightsV1Conference processingState(ConferenceEnumProcessingState processingState) {
    this.processingState = processingState;
    return this;
  }

  /**
   * Get processingState
   * @return processingState
   */
  @javax.annotation.Nullable
  public ConferenceEnumProcessingState getProcessingState() {
    return processingState;
  }

  public void setProcessingState(ConferenceEnumProcessingState processingState) {
    this.processingState = processingState;
  }


  public InsightsV1Conference recordingEnabled(Boolean recordingEnabled) {
    this.recordingEnabled = recordingEnabled;
    return this;
  }

  /**
   * Boolean. Indicates whether recording was enabled at the conference mixer.
   * @return recordingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRecordingEnabled() {
    return recordingEnabled;
  }

  public void setRecordingEnabled(Boolean recordingEnabled) {
    this.recordingEnabled = recordingEnabled;
  }


  public InsightsV1Conference startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter&#x3D;true.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public InsightsV1Conference status(ConferenceEnumConferenceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ConferenceEnumConferenceStatus getStatus() {
    return status;
  }

  public void setStatus(ConferenceEnumConferenceStatus status) {
    this.status = status;
  }


  public InsightsV1Conference tagInfo(Object tagInfo) {
    this.tagInfo = tagInfo;
    return this;
  }

  /**
   * Object. Contains details about conference tags including severity.
   * @return tagInfo
   */
  @javax.annotation.Nullable
  public Object getTagInfo() {
    return tagInfo;
  }

  public void setTagInfo(Object tagInfo) {
    this.tagInfo = tagInfo;
  }


  public InsightsV1Conference tags(List<ConferenceEnumTag> tags) {
    this.tags = tags;
    return this;
  }

  public InsightsV1Conference addTagsItem(ConferenceEnumTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags for detected conference conditions and participant behaviors which may be of interest.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<ConferenceEnumTag> getTags() {
    return tags;
  }

  public void setTags(List<ConferenceEnumTag> tags) {
    this.tags = tags;
  }


  public InsightsV1Conference uniqueParticipants(Integer uniqueParticipants) {
    this.uniqueParticipants = uniqueParticipants;
    return this;
  }

  /**
   * Unique conference participants based on caller ID.
   * @return uniqueParticipants
   */
  @javax.annotation.Nullable
  public Integer getUniqueParticipants() {
    return uniqueParticipants;
  }

  public void setUniqueParticipants(Integer uniqueParticipants) {
    this.uniqueParticipants = uniqueParticipants;
  }


  public InsightsV1Conference url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightsV1Conference insightsV1Conference = (InsightsV1Conference) o;
    return Objects.equals(this.accountSid, insightsV1Conference.accountSid) &&
        Objects.equals(this.conferenceSid, insightsV1Conference.conferenceSid) &&
        Objects.equals(this.connectDurationSeconds, insightsV1Conference.connectDurationSeconds) &&
        Objects.equals(this.createTime, insightsV1Conference.createTime) &&
        Objects.equals(this.detectedIssues, insightsV1Conference.detectedIssues) &&
        Objects.equals(this.durationSeconds, insightsV1Conference.durationSeconds) &&
        Objects.equals(this.endReason, insightsV1Conference.endReason) &&
        Objects.equals(this.endTime, insightsV1Conference.endTime) &&
        Objects.equals(this.endedBy, insightsV1Conference.endedBy) &&
        Objects.equals(this.friendlyName, insightsV1Conference.friendlyName) &&
        Objects.equals(this.links, insightsV1Conference.links) &&
        Objects.equals(this.maxConcurrentParticipants, insightsV1Conference.maxConcurrentParticipants) &&
        Objects.equals(this.maxParticipants, insightsV1Conference.maxParticipants) &&
        Objects.equals(this.mixerRegion, insightsV1Conference.mixerRegion) &&
        Objects.equals(this.mixerRegionRequested, insightsV1Conference.mixerRegionRequested) &&
        Objects.equals(this.processingState, insightsV1Conference.processingState) &&
        Objects.equals(this.recordingEnabled, insightsV1Conference.recordingEnabled) &&
        Objects.equals(this.startTime, insightsV1Conference.startTime) &&
        Objects.equals(this.status, insightsV1Conference.status) &&
        Objects.equals(this.tagInfo, insightsV1Conference.tagInfo) &&
        Objects.equals(this.tags, insightsV1Conference.tags) &&
        Objects.equals(this.uniqueParticipants, insightsV1Conference.uniqueParticipants) &&
        Objects.equals(this.url, insightsV1Conference.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, conferenceSid, connectDurationSeconds, createTime, detectedIssues, durationSeconds, endReason, endTime, endedBy, friendlyName, links, maxConcurrentParticipants, maxParticipants, mixerRegion, mixerRegionRequested, processingState, recordingEnabled, startTime, status, tagInfo, tags, uniqueParticipants, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightsV1Conference {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    conferenceSid: ").append(toIndentedString(conferenceSid)).append("\n");
    sb.append("    connectDurationSeconds: ").append(toIndentedString(connectDurationSeconds)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    detectedIssues: ").append(toIndentedString(detectedIssues)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    endReason: ").append(toIndentedString(endReason)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endedBy: ").append(toIndentedString(endedBy)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    maxConcurrentParticipants: ").append(toIndentedString(maxConcurrentParticipants)).append("\n");
    sb.append("    maxParticipants: ").append(toIndentedString(maxParticipants)).append("\n");
    sb.append("    mixerRegion: ").append(toIndentedString(mixerRegion)).append("\n");
    sb.append("    mixerRegionRequested: ").append(toIndentedString(mixerRegionRequested)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    recordingEnabled: ").append(toIndentedString(recordingEnabled)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tagInfo: ").append(toIndentedString(tagInfo)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    uniqueParticipants: ").append(toIndentedString(uniqueParticipants)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("conference_sid");
    openapiFields.add("connect_duration_seconds");
    openapiFields.add("create_time");
    openapiFields.add("detected_issues");
    openapiFields.add("duration_seconds");
    openapiFields.add("end_reason");
    openapiFields.add("end_time");
    openapiFields.add("ended_by");
    openapiFields.add("friendly_name");
    openapiFields.add("links");
    openapiFields.add("max_concurrent_participants");
    openapiFields.add("max_participants");
    openapiFields.add("mixer_region");
    openapiFields.add("mixer_region_requested");
    openapiFields.add("processing_state");
    openapiFields.add("recording_enabled");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("tag_info");
    openapiFields.add("tags");
    openapiFields.add("unique_participants");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightsV1Conference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightsV1Conference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightsV1Conference is not found in the empty JSON string", InsightsV1Conference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightsV1Conference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightsV1Conference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("conference_sid") != null && !jsonObj.get("conference_sid").isJsonNull()) && !jsonObj.get("conference_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference_sid").toString()));
      }
      if ((jsonObj.get("end_reason") != null && !jsonObj.get("end_reason").isJsonNull()) && !jsonObj.get("end_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_reason").toString()));
      }
      // validate the optional field `end_reason`
      if (jsonObj.get("end_reason") != null && !jsonObj.get("end_reason").isJsonNull()) {
        ConferenceEnumConferenceEndReason.validateJsonElement(jsonObj.get("end_reason"));
      }
      if ((jsonObj.get("ended_by") != null && !jsonObj.get("ended_by").isJsonNull()) && !jsonObj.get("ended_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ended_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ended_by").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("mixer_region") != null && !jsonObj.get("mixer_region").isJsonNull()) && !jsonObj.get("mixer_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mixer_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mixer_region").toString()));
      }
      // validate the optional field `mixer_region`
      if (jsonObj.get("mixer_region") != null && !jsonObj.get("mixer_region").isJsonNull()) {
        ConferenceEnumRegion.validateJsonElement(jsonObj.get("mixer_region"));
      }
      if ((jsonObj.get("mixer_region_requested") != null && !jsonObj.get("mixer_region_requested").isJsonNull()) && !jsonObj.get("mixer_region_requested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mixer_region_requested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mixer_region_requested").toString()));
      }
      // validate the optional field `mixer_region_requested`
      if (jsonObj.get("mixer_region_requested") != null && !jsonObj.get("mixer_region_requested").isJsonNull()) {
        ConferenceEnumRegion.validateJsonElement(jsonObj.get("mixer_region_requested"));
      }
      if ((jsonObj.get("processing_state") != null && !jsonObj.get("processing_state").isJsonNull()) && !jsonObj.get("processing_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_state").toString()));
      }
      // validate the optional field `processing_state`
      if (jsonObj.get("processing_state") != null && !jsonObj.get("processing_state").isJsonNull()) {
        ConferenceEnumProcessingState.validateJsonElement(jsonObj.get("processing_state"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ConferenceEnumConferenceStatus.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightsV1Conference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightsV1Conference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightsV1Conference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightsV1Conference.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightsV1Conference>() {
           @Override
           public void write(JsonWriter out, InsightsV1Conference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightsV1Conference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightsV1Conference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightsV1Conference
   * @throws IOException if the JSON string is invalid with respect to InsightsV1Conference
   */
  public static InsightsV1Conference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightsV1Conference.class);
  }

  /**
   * Convert an instance of InsightsV1Conference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

