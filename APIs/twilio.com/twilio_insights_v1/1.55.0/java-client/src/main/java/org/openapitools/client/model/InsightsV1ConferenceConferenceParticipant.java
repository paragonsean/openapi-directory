/*
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConferenceParticipantEnumCallDirection;
import org.openapitools.client.model.ConferenceParticipantEnumCallStatus;
import org.openapitools.client.model.ConferenceParticipantEnumCallType;
import org.openapitools.client.model.ConferenceParticipantEnumJitterBufferSize;
import org.openapitools.client.model.ConferenceParticipantEnumProcessingState;
import org.openapitools.client.model.ConferenceParticipantEnumRegion;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InsightsV1ConferenceConferenceParticipant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:42.474945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightsV1ConferenceConferenceParticipant {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CALL_DIRECTION = "call_direction";
  @SerializedName(SERIALIZED_NAME_CALL_DIRECTION)
  private ConferenceParticipantEnumCallDirection callDirection;

  public static final String SERIALIZED_NAME_CALL_SID = "call_sid";
  @SerializedName(SERIALIZED_NAME_CALL_SID)
  private String callSid;

  public static final String SERIALIZED_NAME_CALL_STATUS = "call_status";
  @SerializedName(SERIALIZED_NAME_CALL_STATUS)
  private ConferenceParticipantEnumCallStatus callStatus;

  public static final String SERIALIZED_NAME_CALL_TYPE = "call_type";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private ConferenceParticipantEnumCallType callType;

  public static final String SERIALIZED_NAME_COACHED_PARTICIPANTS = "coached_participants";
  @SerializedName(SERIALIZED_NAME_COACHED_PARTICIPANTS)
  private List<String> coachedParticipants;

  public static final String SERIALIZED_NAME_CONFERENCE_REGION = "conference_region";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_REGION)
  private ConferenceParticipantEnumRegion conferenceRegion;

  public static final String SERIALIZED_NAME_CONFERENCE_SID = "conference_sid";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_SID)
  private String conferenceSid;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "duration_seconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Object events = null;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_IS_COACH = "is_coach";
  @SerializedName(SERIALIZED_NAME_IS_COACH)
  private Boolean isCoach;

  public static final String SERIALIZED_NAME_IS_MODERATOR = "is_moderator";
  @SerializedName(SERIALIZED_NAME_IS_MODERATOR)
  private Boolean isModerator;

  public static final String SERIALIZED_NAME_JITTER_BUFFER_SIZE = "jitter_buffer_size";
  @SerializedName(SERIALIZED_NAME_JITTER_BUFFER_SIZE)
  private ConferenceParticipantEnumJitterBufferSize jitterBufferSize;

  public static final String SERIALIZED_NAME_JOIN_TIME = "join_time";
  @SerializedName(SERIALIZED_NAME_JOIN_TIME)
  private OffsetDateTime joinTime;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LEAVE_TIME = "leave_time";
  @SerializedName(SERIALIZED_NAME_LEAVE_TIME)
  private OffsetDateTime leaveTime;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Object metrics = null;

  public static final String SERIALIZED_NAME_OUTBOUND_QUEUE_LENGTH = "outbound_queue_length";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_QUEUE_LENGTH)
  private Integer outboundQueueLength;

  public static final String SERIALIZED_NAME_OUTBOUND_TIME_IN_QUEUE = "outbound_time_in_queue";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_TIME_IN_QUEUE)
  private Integer outboundTimeInQueue;

  public static final String SERIALIZED_NAME_PARTICIPANT_REGION = "participant_region";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_REGION)
  private ConferenceParticipantEnumRegion participantRegion;

  public static final String SERIALIZED_NAME_PARTICIPANT_SID = "participant_sid";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_SID)
  private String participantSid;

  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processing_state";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  private ConferenceParticipantEnumProcessingState processingState;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties = null;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public InsightsV1ConferenceConferenceParticipant() {
  }

  public InsightsV1ConferenceConferenceParticipant accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The unique SID identifier of the Account.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public InsightsV1ConferenceConferenceParticipant callDirection(ConferenceParticipantEnumCallDirection callDirection) {
    this.callDirection = callDirection;
    return this;
  }

  /**
   * Get callDirection
   * @return callDirection
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumCallDirection getCallDirection() {
    return callDirection;
  }

  public void setCallDirection(ConferenceParticipantEnumCallDirection callDirection) {
    this.callDirection = callDirection;
  }


  public InsightsV1ConferenceConferenceParticipant callSid(String callSid) {
    this.callSid = callSid;
    return this;
  }

  /**
   * Unique SID identifier of the call that generated the Participant resource.
   * @return callSid
   */
  @javax.annotation.Nullable
  public String getCallSid() {
    return callSid;
  }

  public void setCallSid(String callSid) {
    this.callSid = callSid;
  }


  public InsightsV1ConferenceConferenceParticipant callStatus(ConferenceParticipantEnumCallStatus callStatus) {
    this.callStatus = callStatus;
    return this;
  }

  /**
   * Get callStatus
   * @return callStatus
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumCallStatus getCallStatus() {
    return callStatus;
  }

  public void setCallStatus(ConferenceParticipantEnumCallStatus callStatus) {
    this.callStatus = callStatus;
  }


  public InsightsV1ConferenceConferenceParticipant callType(ConferenceParticipantEnumCallType callType) {
    this.callType = callType;
    return this;
  }

  /**
   * Get callType
   * @return callType
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumCallType getCallType() {
    return callType;
  }

  public void setCallType(ConferenceParticipantEnumCallType callType) {
    this.callType = callType;
  }


  public InsightsV1ConferenceConferenceParticipant coachedParticipants(List<String> coachedParticipants) {
    this.coachedParticipants = coachedParticipants;
    return this;
  }

  public InsightsV1ConferenceConferenceParticipant addCoachedParticipantsItem(String coachedParticipantsItem) {
    if (this.coachedParticipants == null) {
      this.coachedParticipants = new ArrayList<>();
    }
    this.coachedParticipants.add(coachedParticipantsItem);
    return this;
  }

  /**
   * Call SIDs coached by this participant.
   * @return coachedParticipants
   */
  @javax.annotation.Nullable
  public List<String> getCoachedParticipants() {
    return coachedParticipants;
  }

  public void setCoachedParticipants(List<String> coachedParticipants) {
    this.coachedParticipants = coachedParticipants;
  }


  public InsightsV1ConferenceConferenceParticipant conferenceRegion(ConferenceParticipantEnumRegion conferenceRegion) {
    this.conferenceRegion = conferenceRegion;
    return this;
  }

  /**
   * Get conferenceRegion
   * @return conferenceRegion
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumRegion getConferenceRegion() {
    return conferenceRegion;
  }

  public void setConferenceRegion(ConferenceParticipantEnumRegion conferenceRegion) {
    this.conferenceRegion = conferenceRegion;
  }


  public InsightsV1ConferenceConferenceParticipant conferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
    return this;
  }

  /**
   * The unique SID identifier of the Conference.
   * @return conferenceSid
   */
  @javax.annotation.Nullable
  public String getConferenceSid() {
    return conferenceSid;
  }

  public void setConferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
  }


  public InsightsV1ConferenceConferenceParticipant countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * ISO alpha-2 country code of the participant based on caller ID or called number.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public InsightsV1ConferenceConferenceParticipant durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Participant durations in seconds.
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public InsightsV1ConferenceConferenceParticipant events(Object events) {
    this.events = events;
    return this;
  }

  /**
   * Object containing information of actions taken by participants. Contains a dictionary of URL links to nested resources of this Conference Participant.
   * @return events
   */
  @javax.annotation.Nullable
  public Object getEvents() {
    return events;
  }

  public void setEvents(Object events) {
    this.events = events;
  }


  public InsightsV1ConferenceConferenceParticipant from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Caller ID of the calling party.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public InsightsV1ConferenceConferenceParticipant isCoach(Boolean isCoach) {
    this.isCoach = isCoach;
    return this;
  }

  /**
   * Boolean. Indicated whether participant was a coach.
   * @return isCoach
   */
  @javax.annotation.Nullable
  public Boolean getIsCoach() {
    return isCoach;
  }

  public void setIsCoach(Boolean isCoach) {
    this.isCoach = isCoach;
  }


  public InsightsV1ConferenceConferenceParticipant isModerator(Boolean isModerator) {
    this.isModerator = isModerator;
    return this;
  }

  /**
   * Boolean. Indicates whether participant had startConferenceOnEnter&#x3D;true or endConferenceOnExit&#x3D;true.
   * @return isModerator
   */
  @javax.annotation.Nullable
  public Boolean getIsModerator() {
    return isModerator;
  }

  public void setIsModerator(Boolean isModerator) {
    this.isModerator = isModerator;
  }


  public InsightsV1ConferenceConferenceParticipant jitterBufferSize(ConferenceParticipantEnumJitterBufferSize jitterBufferSize) {
    this.jitterBufferSize = jitterBufferSize;
    return this;
  }

  /**
   * Get jitterBufferSize
   * @return jitterBufferSize
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumJitterBufferSize getJitterBufferSize() {
    return jitterBufferSize;
  }

  public void setJitterBufferSize(ConferenceParticipantEnumJitterBufferSize jitterBufferSize) {
    this.jitterBufferSize = jitterBufferSize;
  }


  public InsightsV1ConferenceConferenceParticipant joinTime(OffsetDateTime joinTime) {
    this.joinTime = joinTime;
    return this;
  }

  /**
   * ISO 8601 timestamp of participant join event.
   * @return joinTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getJoinTime() {
    return joinTime;
  }

  public void setJoinTime(OffsetDateTime joinTime) {
    this.joinTime = joinTime;
  }


  public InsightsV1ConferenceConferenceParticipant label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The user-specified label of this participant.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public InsightsV1ConferenceConferenceParticipant leaveTime(OffsetDateTime leaveTime) {
    this.leaveTime = leaveTime;
    return this;
  }

  /**
   * ISO 8601 timestamp of participant leave event.
   * @return leaveTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLeaveTime() {
    return leaveTime;
  }

  public void setLeaveTime(OffsetDateTime leaveTime) {
    this.leaveTime = leaveTime;
  }


  public InsightsV1ConferenceConferenceParticipant metrics(Object metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Object. Contains participant call quality metrics.
   * @return metrics
   */
  @javax.annotation.Nullable
  public Object getMetrics() {
    return metrics;
  }

  public void setMetrics(Object metrics) {
    this.metrics = metrics;
  }


  public InsightsV1ConferenceConferenceParticipant outboundQueueLength(Integer outboundQueueLength) {
    this.outboundQueueLength = outboundQueueLength;
    return this;
  }

  /**
   * Add Participant API only. Estimated time in queue at call creation.
   * @return outboundQueueLength
   */
  @javax.annotation.Nullable
  public Integer getOutboundQueueLength() {
    return outboundQueueLength;
  }

  public void setOutboundQueueLength(Integer outboundQueueLength) {
    this.outboundQueueLength = outboundQueueLength;
  }


  public InsightsV1ConferenceConferenceParticipant outboundTimeInQueue(Integer outboundTimeInQueue) {
    this.outboundTimeInQueue = outboundTimeInQueue;
    return this;
  }

  /**
   * Add Participant API only. Actual time in queue in seconds.
   * @return outboundTimeInQueue
   */
  @javax.annotation.Nullable
  public Integer getOutboundTimeInQueue() {
    return outboundTimeInQueue;
  }

  public void setOutboundTimeInQueue(Integer outboundTimeInQueue) {
    this.outboundTimeInQueue = outboundTimeInQueue;
  }


  public InsightsV1ConferenceConferenceParticipant participantRegion(ConferenceParticipantEnumRegion participantRegion) {
    this.participantRegion = participantRegion;
    return this;
  }

  /**
   * Get participantRegion
   * @return participantRegion
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumRegion getParticipantRegion() {
    return participantRegion;
  }

  public void setParticipantRegion(ConferenceParticipantEnumRegion participantRegion) {
    this.participantRegion = participantRegion;
  }


  public InsightsV1ConferenceConferenceParticipant participantSid(String participantSid) {
    this.participantSid = participantSid;
    return this;
  }

  /**
   * SID for this participant.
   * @return participantSid
   */
  @javax.annotation.Nullable
  public String getParticipantSid() {
    return participantSid;
  }

  public void setParticipantSid(String participantSid) {
    this.participantSid = participantSid;
  }


  public InsightsV1ConferenceConferenceParticipant processingState(ConferenceParticipantEnumProcessingState processingState) {
    this.processingState = processingState;
    return this;
  }

  /**
   * Get processingState
   * @return processingState
   */
  @javax.annotation.Nullable
  public ConferenceParticipantEnumProcessingState getProcessingState() {
    return processingState;
  }

  public void setProcessingState(ConferenceParticipantEnumProcessingState processingState) {
    this.processingState = processingState;
  }


  public InsightsV1ConferenceConferenceParticipant properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Participant properties and metadata.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public InsightsV1ConferenceConferenceParticipant to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Called party.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public InsightsV1ConferenceConferenceParticipant url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightsV1ConferenceConferenceParticipant insightsV1ConferenceConferenceParticipant = (InsightsV1ConferenceConferenceParticipant) o;
    return Objects.equals(this.accountSid, insightsV1ConferenceConferenceParticipant.accountSid) &&
        Objects.equals(this.callDirection, insightsV1ConferenceConferenceParticipant.callDirection) &&
        Objects.equals(this.callSid, insightsV1ConferenceConferenceParticipant.callSid) &&
        Objects.equals(this.callStatus, insightsV1ConferenceConferenceParticipant.callStatus) &&
        Objects.equals(this.callType, insightsV1ConferenceConferenceParticipant.callType) &&
        Objects.equals(this.coachedParticipants, insightsV1ConferenceConferenceParticipant.coachedParticipants) &&
        Objects.equals(this.conferenceRegion, insightsV1ConferenceConferenceParticipant.conferenceRegion) &&
        Objects.equals(this.conferenceSid, insightsV1ConferenceConferenceParticipant.conferenceSid) &&
        Objects.equals(this.countryCode, insightsV1ConferenceConferenceParticipant.countryCode) &&
        Objects.equals(this.durationSeconds, insightsV1ConferenceConferenceParticipant.durationSeconds) &&
        Objects.equals(this.events, insightsV1ConferenceConferenceParticipant.events) &&
        Objects.equals(this.from, insightsV1ConferenceConferenceParticipant.from) &&
        Objects.equals(this.isCoach, insightsV1ConferenceConferenceParticipant.isCoach) &&
        Objects.equals(this.isModerator, insightsV1ConferenceConferenceParticipant.isModerator) &&
        Objects.equals(this.jitterBufferSize, insightsV1ConferenceConferenceParticipant.jitterBufferSize) &&
        Objects.equals(this.joinTime, insightsV1ConferenceConferenceParticipant.joinTime) &&
        Objects.equals(this.label, insightsV1ConferenceConferenceParticipant.label) &&
        Objects.equals(this.leaveTime, insightsV1ConferenceConferenceParticipant.leaveTime) &&
        Objects.equals(this.metrics, insightsV1ConferenceConferenceParticipant.metrics) &&
        Objects.equals(this.outboundQueueLength, insightsV1ConferenceConferenceParticipant.outboundQueueLength) &&
        Objects.equals(this.outboundTimeInQueue, insightsV1ConferenceConferenceParticipant.outboundTimeInQueue) &&
        Objects.equals(this.participantRegion, insightsV1ConferenceConferenceParticipant.participantRegion) &&
        Objects.equals(this.participantSid, insightsV1ConferenceConferenceParticipant.participantSid) &&
        Objects.equals(this.processingState, insightsV1ConferenceConferenceParticipant.processingState) &&
        Objects.equals(this.properties, insightsV1ConferenceConferenceParticipant.properties) &&
        Objects.equals(this.to, insightsV1ConferenceConferenceParticipant.to) &&
        Objects.equals(this.url, insightsV1ConferenceConferenceParticipant.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, callDirection, callSid, callStatus, callType, coachedParticipants, conferenceRegion, conferenceSid, countryCode, durationSeconds, events, from, isCoach, isModerator, jitterBufferSize, joinTime, label, leaveTime, metrics, outboundQueueLength, outboundTimeInQueue, participantRegion, participantSid, processingState, properties, to, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightsV1ConferenceConferenceParticipant {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    callDirection: ").append(toIndentedString(callDirection)).append("\n");
    sb.append("    callSid: ").append(toIndentedString(callSid)).append("\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    coachedParticipants: ").append(toIndentedString(coachedParticipants)).append("\n");
    sb.append("    conferenceRegion: ").append(toIndentedString(conferenceRegion)).append("\n");
    sb.append("    conferenceSid: ").append(toIndentedString(conferenceSid)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    isCoach: ").append(toIndentedString(isCoach)).append("\n");
    sb.append("    isModerator: ").append(toIndentedString(isModerator)).append("\n");
    sb.append("    jitterBufferSize: ").append(toIndentedString(jitterBufferSize)).append("\n");
    sb.append("    joinTime: ").append(toIndentedString(joinTime)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    leaveTime: ").append(toIndentedString(leaveTime)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    outboundQueueLength: ").append(toIndentedString(outboundQueueLength)).append("\n");
    sb.append("    outboundTimeInQueue: ").append(toIndentedString(outboundTimeInQueue)).append("\n");
    sb.append("    participantRegion: ").append(toIndentedString(participantRegion)).append("\n");
    sb.append("    participantSid: ").append(toIndentedString(participantSid)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("call_direction");
    openapiFields.add("call_sid");
    openapiFields.add("call_status");
    openapiFields.add("call_type");
    openapiFields.add("coached_participants");
    openapiFields.add("conference_region");
    openapiFields.add("conference_sid");
    openapiFields.add("country_code");
    openapiFields.add("duration_seconds");
    openapiFields.add("events");
    openapiFields.add("from");
    openapiFields.add("is_coach");
    openapiFields.add("is_moderator");
    openapiFields.add("jitter_buffer_size");
    openapiFields.add("join_time");
    openapiFields.add("label");
    openapiFields.add("leave_time");
    openapiFields.add("metrics");
    openapiFields.add("outbound_queue_length");
    openapiFields.add("outbound_time_in_queue");
    openapiFields.add("participant_region");
    openapiFields.add("participant_sid");
    openapiFields.add("processing_state");
    openapiFields.add("properties");
    openapiFields.add("to");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightsV1ConferenceConferenceParticipant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightsV1ConferenceConferenceParticipant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightsV1ConferenceConferenceParticipant is not found in the empty JSON string", InsightsV1ConferenceConferenceParticipant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightsV1ConferenceConferenceParticipant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightsV1ConferenceConferenceParticipant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("call_direction") != null && !jsonObj.get("call_direction").isJsonNull()) && !jsonObj.get("call_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_direction").toString()));
      }
      // validate the optional field `call_direction`
      if (jsonObj.get("call_direction") != null && !jsonObj.get("call_direction").isJsonNull()) {
        ConferenceParticipantEnumCallDirection.validateJsonElement(jsonObj.get("call_direction"));
      }
      if ((jsonObj.get("call_sid") != null && !jsonObj.get("call_sid").isJsonNull()) && !jsonObj.get("call_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_sid").toString()));
      }
      if ((jsonObj.get("call_status") != null && !jsonObj.get("call_status").isJsonNull()) && !jsonObj.get("call_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_status").toString()));
      }
      // validate the optional field `call_status`
      if (jsonObj.get("call_status") != null && !jsonObj.get("call_status").isJsonNull()) {
        ConferenceParticipantEnumCallStatus.validateJsonElement(jsonObj.get("call_status"));
      }
      if ((jsonObj.get("call_type") != null && !jsonObj.get("call_type").isJsonNull()) && !jsonObj.get("call_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_type").toString()));
      }
      // validate the optional field `call_type`
      if (jsonObj.get("call_type") != null && !jsonObj.get("call_type").isJsonNull()) {
        ConferenceParticipantEnumCallType.validateJsonElement(jsonObj.get("call_type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("coached_participants") != null && !jsonObj.get("coached_participants").isJsonNull() && !jsonObj.get("coached_participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coached_participants` to be an array in the JSON string but got `%s`", jsonObj.get("coached_participants").toString()));
      }
      if ((jsonObj.get("conference_region") != null && !jsonObj.get("conference_region").isJsonNull()) && !jsonObj.get("conference_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference_region").toString()));
      }
      // validate the optional field `conference_region`
      if (jsonObj.get("conference_region") != null && !jsonObj.get("conference_region").isJsonNull()) {
        ConferenceParticipantEnumRegion.validateJsonElement(jsonObj.get("conference_region"));
      }
      if ((jsonObj.get("conference_sid") != null && !jsonObj.get("conference_sid").isJsonNull()) && !jsonObj.get("conference_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference_sid").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("jitter_buffer_size") != null && !jsonObj.get("jitter_buffer_size").isJsonNull()) && !jsonObj.get("jitter_buffer_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jitter_buffer_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jitter_buffer_size").toString()));
      }
      // validate the optional field `jitter_buffer_size`
      if (jsonObj.get("jitter_buffer_size") != null && !jsonObj.get("jitter_buffer_size").isJsonNull()) {
        ConferenceParticipantEnumJitterBufferSize.validateJsonElement(jsonObj.get("jitter_buffer_size"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("participant_region") != null && !jsonObj.get("participant_region").isJsonNull()) && !jsonObj.get("participant_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_region").toString()));
      }
      // validate the optional field `participant_region`
      if (jsonObj.get("participant_region") != null && !jsonObj.get("participant_region").isJsonNull()) {
        ConferenceParticipantEnumRegion.validateJsonElement(jsonObj.get("participant_region"));
      }
      if ((jsonObj.get("participant_sid") != null && !jsonObj.get("participant_sid").isJsonNull()) && !jsonObj.get("participant_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant_sid").toString()));
      }
      if ((jsonObj.get("processing_state") != null && !jsonObj.get("processing_state").isJsonNull()) && !jsonObj.get("processing_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_state").toString()));
      }
      // validate the optional field `processing_state`
      if (jsonObj.get("processing_state") != null && !jsonObj.get("processing_state").isJsonNull()) {
        ConferenceParticipantEnumProcessingState.validateJsonElement(jsonObj.get("processing_state"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightsV1ConferenceConferenceParticipant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightsV1ConferenceConferenceParticipant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightsV1ConferenceConferenceParticipant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightsV1ConferenceConferenceParticipant.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightsV1ConferenceConferenceParticipant>() {
           @Override
           public void write(JsonWriter out, InsightsV1ConferenceConferenceParticipant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightsV1ConferenceConferenceParticipant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightsV1ConferenceConferenceParticipant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightsV1ConferenceConferenceParticipant
   * @throws IOException if the JSON string is invalid with respect to InsightsV1ConferenceConferenceParticipant
   */
  public static InsightsV1ConferenceConferenceParticipant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightsV1ConferenceConferenceParticipant.class);
  }

  /**
   * Convert an instance of InsightsV1ConferenceConferenceParticipant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

