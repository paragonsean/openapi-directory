from typing import List, Dict
from aiohttp import web

from openapi_server.models.insights_v1_conference_conference_participant import InsightsV1ConferenceConferenceParticipant
from openapi_server.models.list_conference_participant_response import ListConferenceParticipantResponse
from openapi_server import util


async def fetch_conference_participant(request: web.Request, conference_sid, participant_sid, events=None, metrics=None) -> web.Response:
    """fetch_conference_participant

    Get a specific Conference Participant Summary for a Conference.

    :param conference_sid: The unique SID identifier of the Conference.
    :type conference_sid: str
    :param participant_sid: The unique SID identifier of the Participant.
    :type participant_sid: str
    :param events: Conference events generated by application or participant activity; e.g. &#x60;hold&#x60;, &#x60;mute&#x60;, etc.
    :type events: str
    :param metrics: Object. Contains participant call quality metrics.
    :type metrics: str

    """
    return web.Response(status=200)


async def list_conference_participant(request: web.Request, conference_sid, participant_sid=None, label=None, events=None, page_size=None, page=None, page_token=None) -> web.Response:
    """list_conference_participant

    Get a list of Conference Participants Summaries for a Conference.

    :param conference_sid: The unique SID identifier of the Conference.
    :type conference_sid: str
    :param participant_sid: The unique SID identifier of the Participant.
    :type participant_sid: str
    :param label: User-specified label for a participant.
    :type label: str
    :param events: Conference events generated by application or participant activity; e.g. &#x60;hold&#x60;, &#x60;mute&#x60;, etc.
    :type events: str
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    return web.Response(status=200)
