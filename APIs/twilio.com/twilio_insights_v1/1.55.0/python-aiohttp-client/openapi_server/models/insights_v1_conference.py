# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_enum_conference_end_reason import ConferenceEnumConferenceEndReason
from openapi_server.models.conference_enum_conference_status import ConferenceEnumConferenceStatus
from openapi_server.models.conference_enum_processing_state import ConferenceEnumProcessingState
from openapi_server.models.conference_enum_region import ConferenceEnumRegion
from openapi_server.models.conference_enum_tag import ConferenceEnumTag
import re
from openapi_server import util


class InsightsV1Conference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, conference_sid: str=None, connect_duration_seconds: int=None, create_time: datetime=None, detected_issues: object=None, duration_seconds: int=None, end_reason: ConferenceEnumConferenceEndReason=None, end_time: datetime=None, ended_by: str=None, friendly_name: str=None, links: object=None, max_concurrent_participants: int=None, max_participants: int=None, mixer_region: ConferenceEnumRegion=None, mixer_region_requested: ConferenceEnumRegion=None, processing_state: ConferenceEnumProcessingState=None, recording_enabled: bool=None, start_time: datetime=None, status: ConferenceEnumConferenceStatus=None, tag_info: object=None, tags: List[ConferenceEnumTag]=None, unique_participants: int=None, url: str=None):
        """InsightsV1Conference - a model defined in OpenAPI

        :param account_sid: The account_sid of this InsightsV1Conference.
        :param conference_sid: The conference_sid of this InsightsV1Conference.
        :param connect_duration_seconds: The connect_duration_seconds of this InsightsV1Conference.
        :param create_time: The create_time of this InsightsV1Conference.
        :param detected_issues: The detected_issues of this InsightsV1Conference.
        :param duration_seconds: The duration_seconds of this InsightsV1Conference.
        :param end_reason: The end_reason of this InsightsV1Conference.
        :param end_time: The end_time of this InsightsV1Conference.
        :param ended_by: The ended_by of this InsightsV1Conference.
        :param friendly_name: The friendly_name of this InsightsV1Conference.
        :param links: The links of this InsightsV1Conference.
        :param max_concurrent_participants: The max_concurrent_participants of this InsightsV1Conference.
        :param max_participants: The max_participants of this InsightsV1Conference.
        :param mixer_region: The mixer_region of this InsightsV1Conference.
        :param mixer_region_requested: The mixer_region_requested of this InsightsV1Conference.
        :param processing_state: The processing_state of this InsightsV1Conference.
        :param recording_enabled: The recording_enabled of this InsightsV1Conference.
        :param start_time: The start_time of this InsightsV1Conference.
        :param status: The status of this InsightsV1Conference.
        :param tag_info: The tag_info of this InsightsV1Conference.
        :param tags: The tags of this InsightsV1Conference.
        :param unique_participants: The unique_participants of this InsightsV1Conference.
        :param url: The url of this InsightsV1Conference.
        """
        self.openapi_types = {
            'account_sid': str,
            'conference_sid': str,
            'connect_duration_seconds': int,
            'create_time': datetime,
            'detected_issues': object,
            'duration_seconds': int,
            'end_reason': ConferenceEnumConferenceEndReason,
            'end_time': datetime,
            'ended_by': str,
            'friendly_name': str,
            'links': object,
            'max_concurrent_participants': int,
            'max_participants': int,
            'mixer_region': ConferenceEnumRegion,
            'mixer_region_requested': ConferenceEnumRegion,
            'processing_state': ConferenceEnumProcessingState,
            'recording_enabled': bool,
            'start_time': datetime,
            'status': ConferenceEnumConferenceStatus,
            'tag_info': object,
            'tags': List[ConferenceEnumTag],
            'unique_participants': int,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'conference_sid': 'conference_sid',
            'connect_duration_seconds': 'connect_duration_seconds',
            'create_time': 'create_time',
            'detected_issues': 'detected_issues',
            'duration_seconds': 'duration_seconds',
            'end_reason': 'end_reason',
            'end_time': 'end_time',
            'ended_by': 'ended_by',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'max_concurrent_participants': 'max_concurrent_participants',
            'max_participants': 'max_participants',
            'mixer_region': 'mixer_region',
            'mixer_region_requested': 'mixer_region_requested',
            'processing_state': 'processing_state',
            'recording_enabled': 'recording_enabled',
            'start_time': 'start_time',
            'status': 'status',
            'tag_info': 'tag_info',
            'tags': 'tags',
            'unique_participants': 'unique_participants',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._conference_sid = conference_sid
        self._connect_duration_seconds = connect_duration_seconds
        self._create_time = create_time
        self._detected_issues = detected_issues
        self._duration_seconds = duration_seconds
        self._end_reason = end_reason
        self._end_time = end_time
        self._ended_by = ended_by
        self._friendly_name = friendly_name
        self._links = links
        self._max_concurrent_participants = max_concurrent_participants
        self._max_participants = max_participants
        self._mixer_region = mixer_region
        self._mixer_region_requested = mixer_region_requested
        self._processing_state = processing_state
        self._recording_enabled = recording_enabled
        self._start_time = start_time
        self._status = status
        self._tag_info = tag_info
        self._tags = tags
        self._unique_participants = unique_participants
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightsV1Conference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The insights.v1.conference of this InsightsV1Conference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this InsightsV1Conference.

        The unique SID identifier of the Account.

        :return: The account_sid of this InsightsV1Conference.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this InsightsV1Conference.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this InsightsV1Conference.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def conference_sid(self):
        """Gets the conference_sid of this InsightsV1Conference.

        The unique SID identifier of the Conference.

        :return: The conference_sid of this InsightsV1Conference.
        :rtype: str
        """
        return self._conference_sid

    @conference_sid.setter
    def conference_sid(self, conference_sid):
        """Sets the conference_sid of this InsightsV1Conference.

        The unique SID identifier of the Conference.

        :param conference_sid: The conference_sid of this InsightsV1Conference.
        :type conference_sid: str
        """
        if conference_sid is not None and len(conference_sid) > 34:
            raise ValueError("Invalid value for `conference_sid`, length must be less than or equal to `34`")
        if conference_sid is not None and len(conference_sid) < 34:
            raise ValueError("Invalid value for `conference_sid`, length must be greater than or equal to `34`")
        if conference_sid is not None and not re.search(r'^CF[0-9a-fA-F]{32}$', conference_sid):
            raise ValueError("Invalid value for `conference_sid`, must be a follow pattern or equal to `/^CF[0-9a-fA-F]{32}$/`")

        self._conference_sid = conference_sid

    @property
    def connect_duration_seconds(self):
        """Gets the connect_duration_seconds of this InsightsV1Conference.

        Duration of the between conference start event and conference end event in seconds.

        :return: The connect_duration_seconds of this InsightsV1Conference.
        :rtype: int
        """
        return self._connect_duration_seconds

    @connect_duration_seconds.setter
    def connect_duration_seconds(self, connect_duration_seconds):
        """Sets the connect_duration_seconds of this InsightsV1Conference.

        Duration of the between conference start event and conference end event in seconds.

        :param connect_duration_seconds: The connect_duration_seconds of this InsightsV1Conference.
        :type connect_duration_seconds: int
        """

        self._connect_duration_seconds = connect_duration_seconds

    @property
    def create_time(self):
        """Gets the create_time of this InsightsV1Conference.

        Conference creation date and time in ISO 8601 format.

        :return: The create_time of this InsightsV1Conference.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InsightsV1Conference.

        Conference creation date and time in ISO 8601 format.

        :param create_time: The create_time of this InsightsV1Conference.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def detected_issues(self):
        """Gets the detected_issues of this InsightsV1Conference.

        Potential issues detected by Twilio during the conference.

        :return: The detected_issues of this InsightsV1Conference.
        :rtype: object
        """
        return self._detected_issues

    @detected_issues.setter
    def detected_issues(self, detected_issues):
        """Sets the detected_issues of this InsightsV1Conference.

        Potential issues detected by Twilio during the conference.

        :param detected_issues: The detected_issues of this InsightsV1Conference.
        :type detected_issues: object
        """

        self._detected_issues = detected_issues

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this InsightsV1Conference.

        Conference duration in seconds.

        :return: The duration_seconds of this InsightsV1Conference.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this InsightsV1Conference.

        Conference duration in seconds.

        :param duration_seconds: The duration_seconds of this InsightsV1Conference.
        :type duration_seconds: int
        """

        self._duration_seconds = duration_seconds

    @property
    def end_reason(self):
        """Gets the end_reason of this InsightsV1Conference.


        :return: The end_reason of this InsightsV1Conference.
        :rtype: ConferenceEnumConferenceEndReason
        """
        return self._end_reason

    @end_reason.setter
    def end_reason(self, end_reason):
        """Sets the end_reason of this InsightsV1Conference.


        :param end_reason: The end_reason of this InsightsV1Conference.
        :type end_reason: ConferenceEnumConferenceEndReason
        """

        self._end_reason = end_reason

    @property
    def end_time(self):
        """Gets the end_time of this InsightsV1Conference.

        Conference end date and time in ISO 8601 format.

        :return: The end_time of this InsightsV1Conference.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InsightsV1Conference.

        Conference end date and time in ISO 8601 format.

        :param end_time: The end_time of this InsightsV1Conference.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def ended_by(self):
        """Gets the ended_by of this InsightsV1Conference.

        Call SID of the participant whose actions ended the conference.

        :return: The ended_by of this InsightsV1Conference.
        :rtype: str
        """
        return self._ended_by

    @ended_by.setter
    def ended_by(self, ended_by):
        """Sets the ended_by of this InsightsV1Conference.

        Call SID of the participant whose actions ended the conference.

        :param ended_by: The ended_by of this InsightsV1Conference.
        :type ended_by: str
        """
        if ended_by is not None and len(ended_by) > 34:
            raise ValueError("Invalid value for `ended_by`, length must be less than or equal to `34`")
        if ended_by is not None and len(ended_by) < 34:
            raise ValueError("Invalid value for `ended_by`, length must be greater than or equal to `34`")
        if ended_by is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', ended_by):
            raise ValueError("Invalid value for `ended_by`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._ended_by = ended_by

    @property
    def friendly_name(self):
        """Gets the friendly_name of this InsightsV1Conference.

        Custom label for the conference resource, up to 64 characters.

        :return: The friendly_name of this InsightsV1Conference.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this InsightsV1Conference.

        Custom label for the conference resource, up to 64 characters.

        :param friendly_name: The friendly_name of this InsightsV1Conference.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this InsightsV1Conference.

        Contains a dictionary of URL links to nested resources of this Conference.

        :return: The links of this InsightsV1Conference.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InsightsV1Conference.

        Contains a dictionary of URL links to nested resources of this Conference.

        :param links: The links of this InsightsV1Conference.
        :type links: object
        """

        self._links = links

    @property
    def max_concurrent_participants(self):
        """Gets the max_concurrent_participants of this InsightsV1Conference.

        Actual maximum number of concurrent participants in the conference.

        :return: The max_concurrent_participants of this InsightsV1Conference.
        :rtype: int
        """
        return self._max_concurrent_participants

    @max_concurrent_participants.setter
    def max_concurrent_participants(self, max_concurrent_participants):
        """Sets the max_concurrent_participants of this InsightsV1Conference.

        Actual maximum number of concurrent participants in the conference.

        :param max_concurrent_participants: The max_concurrent_participants of this InsightsV1Conference.
        :type max_concurrent_participants: int
        """

        self._max_concurrent_participants = max_concurrent_participants

    @property
    def max_participants(self):
        """Gets the max_participants of this InsightsV1Conference.

        Maximum number of concurrent participants as specified by the configuration.

        :return: The max_participants of this InsightsV1Conference.
        :rtype: int
        """
        return self._max_participants

    @max_participants.setter
    def max_participants(self, max_participants):
        """Sets the max_participants of this InsightsV1Conference.

        Maximum number of concurrent participants as specified by the configuration.

        :param max_participants: The max_participants of this InsightsV1Conference.
        :type max_participants: int
        """

        self._max_participants = max_participants

    @property
    def mixer_region(self):
        """Gets the mixer_region of this InsightsV1Conference.


        :return: The mixer_region of this InsightsV1Conference.
        :rtype: ConferenceEnumRegion
        """
        return self._mixer_region

    @mixer_region.setter
    def mixer_region(self, mixer_region):
        """Sets the mixer_region of this InsightsV1Conference.


        :param mixer_region: The mixer_region of this InsightsV1Conference.
        :type mixer_region: ConferenceEnumRegion
        """

        self._mixer_region = mixer_region

    @property
    def mixer_region_requested(self):
        """Gets the mixer_region_requested of this InsightsV1Conference.


        :return: The mixer_region_requested of this InsightsV1Conference.
        :rtype: ConferenceEnumRegion
        """
        return self._mixer_region_requested

    @mixer_region_requested.setter
    def mixer_region_requested(self, mixer_region_requested):
        """Sets the mixer_region_requested of this InsightsV1Conference.


        :param mixer_region_requested: The mixer_region_requested of this InsightsV1Conference.
        :type mixer_region_requested: ConferenceEnumRegion
        """

        self._mixer_region_requested = mixer_region_requested

    @property
    def processing_state(self):
        """Gets the processing_state of this InsightsV1Conference.


        :return: The processing_state of this InsightsV1Conference.
        :rtype: ConferenceEnumProcessingState
        """
        return self._processing_state

    @processing_state.setter
    def processing_state(self, processing_state):
        """Sets the processing_state of this InsightsV1Conference.


        :param processing_state: The processing_state of this InsightsV1Conference.
        :type processing_state: ConferenceEnumProcessingState
        """

        self._processing_state = processing_state

    @property
    def recording_enabled(self):
        """Gets the recording_enabled of this InsightsV1Conference.

        Boolean. Indicates whether recording was enabled at the conference mixer.

        :return: The recording_enabled of this InsightsV1Conference.
        :rtype: bool
        """
        return self._recording_enabled

    @recording_enabled.setter
    def recording_enabled(self, recording_enabled):
        """Sets the recording_enabled of this InsightsV1Conference.

        Boolean. Indicates whether recording was enabled at the conference mixer.

        :param recording_enabled: The recording_enabled of this InsightsV1Conference.
        :type recording_enabled: bool
        """

        self._recording_enabled = recording_enabled

    @property
    def start_time(self):
        """Gets the start_time of this InsightsV1Conference.

        Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.

        :return: The start_time of this InsightsV1Conference.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InsightsV1Conference.

        Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.

        :param start_time: The start_time of this InsightsV1Conference.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InsightsV1Conference.


        :return: The status of this InsightsV1Conference.
        :rtype: ConferenceEnumConferenceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InsightsV1Conference.


        :param status: The status of this InsightsV1Conference.
        :type status: ConferenceEnumConferenceStatus
        """

        self._status = status

    @property
    def tag_info(self):
        """Gets the tag_info of this InsightsV1Conference.

        Object. Contains details about conference tags including severity.

        :return: The tag_info of this InsightsV1Conference.
        :rtype: object
        """
        return self._tag_info

    @tag_info.setter
    def tag_info(self, tag_info):
        """Sets the tag_info of this InsightsV1Conference.

        Object. Contains details about conference tags including severity.

        :param tag_info: The tag_info of this InsightsV1Conference.
        :type tag_info: object
        """

        self._tag_info = tag_info

    @property
    def tags(self):
        """Gets the tags of this InsightsV1Conference.

        Tags for detected conference conditions and participant behaviors which may be of interest.

        :return: The tags of this InsightsV1Conference.
        :rtype: List[ConferenceEnumTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InsightsV1Conference.

        Tags for detected conference conditions and participant behaviors which may be of interest.

        :param tags: The tags of this InsightsV1Conference.
        :type tags: List[ConferenceEnumTag]
        """

        self._tags = tags

    @property
    def unique_participants(self):
        """Gets the unique_participants of this InsightsV1Conference.

        Unique conference participants based on caller ID.

        :return: The unique_participants of this InsightsV1Conference.
        :rtype: int
        """
        return self._unique_participants

    @unique_participants.setter
    def unique_participants(self, unique_participants):
        """Sets the unique_participants of this InsightsV1Conference.

        Unique conference participants based on caller ID.

        :param unique_participants: The unique_participants of this InsightsV1Conference.
        :type unique_participants: int
        """

        self._unique_participants = unique_participants

    @property
    def url(self):
        """Gets the url of this InsightsV1Conference.

        The URL of this resource.

        :return: The url of this InsightsV1Conference.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InsightsV1Conference.

        The URL of this resource.

        :param url: The url of this InsightsV1Conference.
        :type url: str
        """

        self._url = url
