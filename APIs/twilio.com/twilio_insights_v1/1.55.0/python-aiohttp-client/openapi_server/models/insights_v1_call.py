# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class InsightsV1Call(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, sid: str=None, url: str=None):
        """InsightsV1Call - a model defined in OpenAPI

        :param links: The links of this InsightsV1Call.
        :param sid: The sid of this InsightsV1Call.
        :param url: The url of this InsightsV1Call.
        """
        self.openapi_types = {
            'links': object,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'links': 'links',
            'sid': 'sid',
            'url': 'url'
        }

        self._links = links
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightsV1Call':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The insights.v1.call of this InsightsV1Call.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this InsightsV1Call.


        :return: The links of this InsightsV1Call.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InsightsV1Call.


        :param links: The links of this InsightsV1Call.
        :type links: object
        """

        self._links = links

    @property
    def sid(self):
        """Gets the sid of this InsightsV1Call.


        :return: The sid of this InsightsV1Call.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this InsightsV1Call.


        :param sid: The sid of this InsightsV1Call.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this InsightsV1Call.


        :return: The url of this InsightsV1Call.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InsightsV1Call.


        :param url: The url of this InsightsV1Call.
        :type url: str
        """

        self._url = url
