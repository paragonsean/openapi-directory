# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConferenceEnumTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INVALID_REQUESTED_REGION = 'invalid_requested_region'
    DUPLICATE_IDENTITY = 'duplicate_identity'
    START_FAILURE = 'start_failure'
    REGION_CONFIGURATION_ISSUES = 'region_configuration_issues'
    QUALITY_WARNINGS = 'quality_warnings'
    PARTICIPANT_BEHAVIOR_ISSUES = 'participant_behavior_issues'
    HIGH_PACKET_LOSS = 'high_packet_loss'
    HIGH_JITTER = 'high_jitter'
    HIGH_LATENCY = 'high_latency'
    LOW_MOS = 'low_mos'
    DETECTED_SILENCE = 'detected_silence'

    def __init__(self):
        """ConferenceEnumTag - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConferenceEnumTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conference_enum_tag of this ConferenceEnumTag.
        """
        return util.deserialize_model(dikt, cls)
