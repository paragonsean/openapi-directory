# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_enum_answered_by import AnnotationEnumAnsweredBy
from openapi_server.models.annotation_enum_connectivity_issue import AnnotationEnumConnectivityIssue
import re
from openapi_server import util


class InsightsV1CallAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, answered_by: AnnotationEnumAnsweredBy=None, call_score: int=None, call_sid: str=None, comment: str=None, connectivity_issue: AnnotationEnumConnectivityIssue=None, incident: str=None, quality_issues: List[str]=None, spam: bool=None, url: str=None):
        """InsightsV1CallAnnotation - a model defined in OpenAPI

        :param account_sid: The account_sid of this InsightsV1CallAnnotation.
        :param answered_by: The answered_by of this InsightsV1CallAnnotation.
        :param call_score: The call_score of this InsightsV1CallAnnotation.
        :param call_sid: The call_sid of this InsightsV1CallAnnotation.
        :param comment: The comment of this InsightsV1CallAnnotation.
        :param connectivity_issue: The connectivity_issue of this InsightsV1CallAnnotation.
        :param incident: The incident of this InsightsV1CallAnnotation.
        :param quality_issues: The quality_issues of this InsightsV1CallAnnotation.
        :param spam: The spam of this InsightsV1CallAnnotation.
        :param url: The url of this InsightsV1CallAnnotation.
        """
        self.openapi_types = {
            'account_sid': str,
            'answered_by': AnnotationEnumAnsweredBy,
            'call_score': int,
            'call_sid': str,
            'comment': str,
            'connectivity_issue': AnnotationEnumConnectivityIssue,
            'incident': str,
            'quality_issues': List[str],
            'spam': bool,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'answered_by': 'answered_by',
            'call_score': 'call_score',
            'call_sid': 'call_sid',
            'comment': 'comment',
            'connectivity_issue': 'connectivity_issue',
            'incident': 'incident',
            'quality_issues': 'quality_issues',
            'spam': 'spam',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._answered_by = answered_by
        self._call_score = call_score
        self._call_sid = call_sid
        self._comment = comment
        self._connectivity_issue = connectivity_issue
        self._incident = incident
        self._quality_issues = quality_issues
        self._spam = spam
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightsV1CallAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The insights.v1.call.annotation of this InsightsV1CallAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this InsightsV1CallAnnotation.

        The unique SID identifier of the Account.

        :return: The account_sid of this InsightsV1CallAnnotation.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this InsightsV1CallAnnotation.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this InsightsV1CallAnnotation.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def answered_by(self):
        """Gets the answered_by of this InsightsV1CallAnnotation.


        :return: The answered_by of this InsightsV1CallAnnotation.
        :rtype: AnnotationEnumAnsweredBy
        """
        return self._answered_by

    @answered_by.setter
    def answered_by(self, answered_by):
        """Sets the answered_by of this InsightsV1CallAnnotation.


        :param answered_by: The answered_by of this InsightsV1CallAnnotation.
        :type answered_by: AnnotationEnumAnsweredBy
        """

        self._answered_by = answered_by

    @property
    def call_score(self):
        """Gets the call_score of this InsightsV1CallAnnotation.

        Specifies the Call Score, if available. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].

        :return: The call_score of this InsightsV1CallAnnotation.
        :rtype: int
        """
        return self._call_score

    @call_score.setter
    def call_score(self, call_score):
        """Sets the call_score of this InsightsV1CallAnnotation.

        Specifies the Call Score, if available. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].

        :param call_score: The call_score of this InsightsV1CallAnnotation.
        :type call_score: int
        """

        self._call_score = call_score

    @property
    def call_sid(self):
        """Gets the call_sid of this InsightsV1CallAnnotation.

        The unique SID identifier of the Call.

        :return: The call_sid of this InsightsV1CallAnnotation.
        :rtype: str
        """
        return self._call_sid

    @call_sid.setter
    def call_sid(self, call_sid):
        """Sets the call_sid of this InsightsV1CallAnnotation.

        The unique SID identifier of the Call.

        :param call_sid: The call_sid of this InsightsV1CallAnnotation.
        :type call_sid: str
        """
        if call_sid is not None and len(call_sid) > 34:
            raise ValueError("Invalid value for `call_sid`, length must be less than or equal to `34`")
        if call_sid is not None and len(call_sid) < 34:
            raise ValueError("Invalid value for `call_sid`, length must be greater than or equal to `34`")
        if call_sid is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', call_sid):
            raise ValueError("Invalid value for `call_sid`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._call_sid = call_sid

    @property
    def comment(self):
        """Gets the comment of this InsightsV1CallAnnotation.

        Specifies any comments pertaining to the call. Twilio does not treat this field as PII, so no PII should be included in comments.

        :return: The comment of this InsightsV1CallAnnotation.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InsightsV1CallAnnotation.

        Specifies any comments pertaining to the call. Twilio does not treat this field as PII, so no PII should be included in comments.

        :param comment: The comment of this InsightsV1CallAnnotation.
        :type comment: str
        """

        self._comment = comment

    @property
    def connectivity_issue(self):
        """Gets the connectivity_issue of this InsightsV1CallAnnotation.


        :return: The connectivity_issue of this InsightsV1CallAnnotation.
        :rtype: AnnotationEnumConnectivityIssue
        """
        return self._connectivity_issue

    @connectivity_issue.setter
    def connectivity_issue(self, connectivity_issue):
        """Sets the connectivity_issue of this InsightsV1CallAnnotation.


        :param connectivity_issue: The connectivity_issue of this InsightsV1CallAnnotation.
        :type connectivity_issue: AnnotationEnumConnectivityIssue
        """

        self._connectivity_issue = connectivity_issue

    @property
    def incident(self):
        """Gets the incident of this InsightsV1CallAnnotation.

        Incident or support ticket associated with this call. The `incident` property is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :return: The incident of this InsightsV1CallAnnotation.
        :rtype: str
        """
        return self._incident

    @incident.setter
    def incident(self, incident):
        """Sets the incident of this InsightsV1CallAnnotation.

        Incident or support ticket associated with this call. The `incident` property is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :param incident: The incident of this InsightsV1CallAnnotation.
        :type incident: str
        """

        self._incident = incident

    @property
    def quality_issues(self):
        """Gets the quality_issues of this InsightsV1CallAnnotation.

        Specifies if the call had any subjective quality issues. Possible values are one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, or `static_noise`.

        :return: The quality_issues of this InsightsV1CallAnnotation.
        :rtype: List[str]
        """
        return self._quality_issues

    @quality_issues.setter
    def quality_issues(self, quality_issues):
        """Sets the quality_issues of this InsightsV1CallAnnotation.

        Specifies if the call had any subjective quality issues. Possible values are one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, or `static_noise`.

        :param quality_issues: The quality_issues of this InsightsV1CallAnnotation.
        :type quality_issues: List[str]
        """

        self._quality_issues = quality_issues

    @property
    def spam(self):
        """Gets the spam of this InsightsV1CallAnnotation.

        Specifies if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.

        :return: The spam of this InsightsV1CallAnnotation.
        :rtype: bool
        """
        return self._spam

    @spam.setter
    def spam(self, spam):
        """Sets the spam of this InsightsV1CallAnnotation.

        Specifies if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.

        :param spam: The spam of this InsightsV1CallAnnotation.
        :type spam: bool
        """

        self._spam = spam

    @property
    def url(self):
        """Gets the url of this InsightsV1CallAnnotation.


        :return: The url of this InsightsV1CallAnnotation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InsightsV1CallAnnotation.


        :param url: The url of this InsightsV1CallAnnotation.
        :type url: str
        """

        self._url = url
