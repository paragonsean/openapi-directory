/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInsightsV1CallSummariesApi_H
#define OAI_OAIInsightsV1CallSummariesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICall_summaries_enum_answered_by.h"
#include "OAICall_summaries_enum_processing_state_request.h"
#include "OAICall_summaries_enum_sort_by.h"
#include "OAIListCallSummariesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInsightsV1CallSummariesApi : public QObject {
    Q_OBJECT

public:
    OAIInsightsV1CallSummariesApi(const int timeOut = 0);
    ~OAIInsightsV1CallSummariesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  from_carrier QString [optional]
    * @param[in]  to_carrier QString [optional]
    * @param[in]  from_country_code QString [optional]
    * @param[in]  to_country_code QString [optional]
    * @param[in]  branded bool [optional]
    * @param[in]  verified_caller bool [optional]
    * @param[in]  has_tag bool [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  call_type QString [optional]
    * @param[in]  call_state QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  processing_state OAICall_summaries_enum_processing_state_request [optional]
    * @param[in]  sort_by OAICall_summaries_enum_sort_by [optional]
    * @param[in]  subaccount QString [optional]
    * @param[in]  abnormal_session bool [optional]
    * @param[in]  answered_by OAICall_summaries_enum_answered_by [optional]
    * @param[in]  answered_by_annotation QString [optional]
    * @param[in]  connectivity_issue_annotation QString [optional]
    * @param[in]  quality_issue_annotation QString [optional]
    * @param[in]  spam_annotation bool [optional]
    * @param[in]  call_score_annotation QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCallSummaries(const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_carrier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_carrier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &branded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &verified_caller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_tag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICall_summaries_enum_processing_state_request> &processing_state = ::OpenAPI::OptionalParam<OAICall_summaries_enum_processing_state_request>(), const ::OpenAPI::OptionalParam<OAICall_summaries_enum_sort_by> &sort_by = ::OpenAPI::OptionalParam<OAICall_summaries_enum_sort_by>(), const ::OpenAPI::OptionalParam<QString> &subaccount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &abnormal_session = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICall_summaries_enum_answered_by> &answered_by = ::OpenAPI::OptionalParam<OAICall_summaries_enum_answered_by>(), const ::OpenAPI::OptionalParam<QString> &answered_by_annotation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connectivity_issue_annotation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quality_issue_annotation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &spam_annotation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &call_score_annotation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listCallSummariesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listCallSummariesSignal(OAIListCallSummariesResponse summary);


    void listCallSummariesSignalFull(OAIHttpRequestWorker *worker, OAIListCallSummariesResponse summary);

    Q_DECL_DEPRECATED_X("Use listCallSummariesSignalError() instead")
    void listCallSummariesSignalE(OAIListCallSummariesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallSummariesSignalError(OAIListCallSummariesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listCallSummariesSignalErrorFull() instead")
    void listCallSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
