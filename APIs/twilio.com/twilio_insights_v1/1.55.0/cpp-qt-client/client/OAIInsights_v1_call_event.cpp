/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_call_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_call_event::OAIInsights_v1_call_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_call_event::OAIInsights_v1_call_event() {
    this->initializeModel();
}

OAIInsights_v1_call_event::~OAIInsights_v1_call_event() {}

void OAIInsights_v1_call_event::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_call_sid_isSet = false;
    m_call_sid_isValid = false;

    m_carrier_edge_isSet = false;
    m_carrier_edge_isValid = false;

    m_client_edge_isSet = false;
    m_client_edge_isValid = false;

    m_edge_isSet = false;
    m_edge_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sdk_edge_isSet = false;
    m_sdk_edge_isValid = false;

    m_sip_edge_isSet = false;
    m_sip_edge_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIInsights_v1_call_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_call_event::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_call_sid_isValid = ::OpenAPI::fromJsonValue(m_call_sid, json[QString("call_sid")]);
    m_call_sid_isSet = !json[QString("call_sid")].isNull() && m_call_sid_isValid;

    m_carrier_edge_isValid = ::OpenAPI::fromJsonValue(m_carrier_edge, json[QString("carrier_edge")]);
    m_carrier_edge_isSet = !json[QString("carrier_edge")].isNull() && m_carrier_edge_isValid;

    m_client_edge_isValid = ::OpenAPI::fromJsonValue(m_client_edge, json[QString("client_edge")]);
    m_client_edge_isSet = !json[QString("client_edge")].isNull() && m_client_edge_isValid;

    m_edge_isValid = ::OpenAPI::fromJsonValue(m_edge, json[QString("edge")]);
    m_edge_isSet = !json[QString("edge")].isNull() && m_edge_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sdk_edge_isValid = ::OpenAPI::fromJsonValue(m_sdk_edge, json[QString("sdk_edge")]);
    m_sdk_edge_isSet = !json[QString("sdk_edge")].isNull() && m_sdk_edge_isValid;

    m_sip_edge_isValid = ::OpenAPI::fromJsonValue(m_sip_edge, json[QString("sip_edge")]);
    m_sip_edge_isSet = !json[QString("sip_edge")].isNull() && m_sip_edge_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIInsights_v1_call_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_call_event::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_call_sid_isSet) {
        obj.insert(QString("call_sid"), ::OpenAPI::toJsonValue(m_call_sid));
    }
    if (m_carrier_edge_isSet) {
        obj.insert(QString("carrier_edge"), ::OpenAPI::toJsonValue(m_carrier_edge));
    }
    if (m_client_edge_isSet) {
        obj.insert(QString("client_edge"), ::OpenAPI::toJsonValue(m_client_edge));
    }
    if (m_edge.isSet()) {
        obj.insert(QString("edge"), ::OpenAPI::toJsonValue(m_edge));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sdk_edge_isSet) {
        obj.insert(QString("sdk_edge"), ::OpenAPI::toJsonValue(m_sdk_edge));
    }
    if (m_sip_edge_isSet) {
        obj.insert(QString("sip_edge"), ::OpenAPI::toJsonValue(m_sip_edge));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIInsights_v1_call_event::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_call_event::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_call_event::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_call_event::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIInsights_v1_call_event::getCallSid() const {
    return m_call_sid;
}
void OAIInsights_v1_call_event::setCallSid(const QString &call_sid) {
    m_call_sid = call_sid;
    m_call_sid_isSet = true;
}

bool OAIInsights_v1_call_event::is_call_sid_Set() const{
    return m_call_sid_isSet;
}

bool OAIInsights_v1_call_event::is_call_sid_Valid() const{
    return m_call_sid_isValid;
}

QJsonValue OAIInsights_v1_call_event::getCarrierEdge() const {
    return m_carrier_edge;
}
void OAIInsights_v1_call_event::setCarrierEdge(const QJsonValue &carrier_edge) {
    m_carrier_edge = carrier_edge;
    m_carrier_edge_isSet = true;
}

bool OAIInsights_v1_call_event::is_carrier_edge_Set() const{
    return m_carrier_edge_isSet;
}

bool OAIInsights_v1_call_event::is_carrier_edge_Valid() const{
    return m_carrier_edge_isValid;
}

QJsonValue OAIInsights_v1_call_event::getClientEdge() const {
    return m_client_edge;
}
void OAIInsights_v1_call_event::setClientEdge(const QJsonValue &client_edge) {
    m_client_edge = client_edge;
    m_client_edge_isSet = true;
}

bool OAIInsights_v1_call_event::is_client_edge_Set() const{
    return m_client_edge_isSet;
}

bool OAIInsights_v1_call_event::is_client_edge_Valid() const{
    return m_client_edge_isValid;
}

OAIEvent_enum_twilio_edge OAIInsights_v1_call_event::getEdge() const {
    return m_edge;
}
void OAIInsights_v1_call_event::setEdge(const OAIEvent_enum_twilio_edge &edge) {
    m_edge = edge;
    m_edge_isSet = true;
}

bool OAIInsights_v1_call_event::is_edge_Set() const{
    return m_edge_isSet;
}

bool OAIInsights_v1_call_event::is_edge_Valid() const{
    return m_edge_isValid;
}

QString OAIInsights_v1_call_event::getGroup() const {
    return m_group;
}
void OAIInsights_v1_call_event::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIInsights_v1_call_event::is_group_Set() const{
    return m_group_isSet;
}

bool OAIInsights_v1_call_event::is_group_Valid() const{
    return m_group_isValid;
}

OAIEvent_enum_level OAIInsights_v1_call_event::getLevel() const {
    return m_level;
}
void OAIInsights_v1_call_event::setLevel(const OAIEvent_enum_level &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIInsights_v1_call_event::is_level_Set() const{
    return m_level_isSet;
}

bool OAIInsights_v1_call_event::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIInsights_v1_call_event::getName() const {
    return m_name;
}
void OAIInsights_v1_call_event::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInsights_v1_call_event::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInsights_v1_call_event::is_name_Valid() const{
    return m_name_isValid;
}

QJsonValue OAIInsights_v1_call_event::getSdkEdge() const {
    return m_sdk_edge;
}
void OAIInsights_v1_call_event::setSdkEdge(const QJsonValue &sdk_edge) {
    m_sdk_edge = sdk_edge;
    m_sdk_edge_isSet = true;
}

bool OAIInsights_v1_call_event::is_sdk_edge_Set() const{
    return m_sdk_edge_isSet;
}

bool OAIInsights_v1_call_event::is_sdk_edge_Valid() const{
    return m_sdk_edge_isValid;
}

QJsonValue OAIInsights_v1_call_event::getSipEdge() const {
    return m_sip_edge;
}
void OAIInsights_v1_call_event::setSipEdge(const QJsonValue &sip_edge) {
    m_sip_edge = sip_edge;
    m_sip_edge_isSet = true;
}

bool OAIInsights_v1_call_event::is_sip_edge_Set() const{
    return m_sip_edge_isSet;
}

bool OAIInsights_v1_call_event::is_sip_edge_Valid() const{
    return m_sip_edge_isValid;
}

QString OAIInsights_v1_call_event::getTimestamp() const {
    return m_timestamp;
}
void OAIInsights_v1_call_event::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIInsights_v1_call_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIInsights_v1_call_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIInsights_v1_call_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sip_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_call_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
