/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_call_annotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_call_annotation::OAIInsights_v1_call_annotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_call_annotation::OAIInsights_v1_call_annotation() {
    this->initializeModel();
}

OAIInsights_v1_call_annotation::~OAIInsights_v1_call_annotation() {}

void OAIInsights_v1_call_annotation::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_answered_by_isSet = false;
    m_answered_by_isValid = false;

    m_call_score_isSet = false;
    m_call_score_isValid = false;

    m_call_sid_isSet = false;
    m_call_sid_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_connectivity_issue_isSet = false;
    m_connectivity_issue_isValid = false;

    m_incident_isSet = false;
    m_incident_isValid = false;

    m_quality_issues_isSet = false;
    m_quality_issues_isValid = false;

    m_spam_isSet = false;
    m_spam_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInsights_v1_call_annotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_call_annotation::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_answered_by_isValid = ::OpenAPI::fromJsonValue(m_answered_by, json[QString("answered_by")]);
    m_answered_by_isSet = !json[QString("answered_by")].isNull() && m_answered_by_isValid;

    m_call_score_isValid = ::OpenAPI::fromJsonValue(m_call_score, json[QString("call_score")]);
    m_call_score_isSet = !json[QString("call_score")].isNull() && m_call_score_isValid;

    m_call_sid_isValid = ::OpenAPI::fromJsonValue(m_call_sid, json[QString("call_sid")]);
    m_call_sid_isSet = !json[QString("call_sid")].isNull() && m_call_sid_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_connectivity_issue_isValid = ::OpenAPI::fromJsonValue(m_connectivity_issue, json[QString("connectivity_issue")]);
    m_connectivity_issue_isSet = !json[QString("connectivity_issue")].isNull() && m_connectivity_issue_isValid;

    m_incident_isValid = ::OpenAPI::fromJsonValue(m_incident, json[QString("incident")]);
    m_incident_isSet = !json[QString("incident")].isNull() && m_incident_isValid;

    m_quality_issues_isValid = ::OpenAPI::fromJsonValue(m_quality_issues, json[QString("quality_issues")]);
    m_quality_issues_isSet = !json[QString("quality_issues")].isNull() && m_quality_issues_isValid;

    m_spam_isValid = ::OpenAPI::fromJsonValue(m_spam, json[QString("spam")]);
    m_spam_isSet = !json[QString("spam")].isNull() && m_spam_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInsights_v1_call_annotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_call_annotation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_answered_by.isSet()) {
        obj.insert(QString("answered_by"), ::OpenAPI::toJsonValue(m_answered_by));
    }
    if (m_call_score_isSet) {
        obj.insert(QString("call_score"), ::OpenAPI::toJsonValue(m_call_score));
    }
    if (m_call_sid_isSet) {
        obj.insert(QString("call_sid"), ::OpenAPI::toJsonValue(m_call_sid));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_connectivity_issue.isSet()) {
        obj.insert(QString("connectivity_issue"), ::OpenAPI::toJsonValue(m_connectivity_issue));
    }
    if (m_incident_isSet) {
        obj.insert(QString("incident"), ::OpenAPI::toJsonValue(m_incident));
    }
    if (m_quality_issues.size() > 0) {
        obj.insert(QString("quality_issues"), ::OpenAPI::toJsonValue(m_quality_issues));
    }
    if (m_spam_isSet) {
        obj.insert(QString("spam"), ::OpenAPI::toJsonValue(m_spam));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInsights_v1_call_annotation::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_call_annotation::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_call_annotation::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIAnnotation_enum_answered_by OAIInsights_v1_call_annotation::getAnsweredBy() const {
    return m_answered_by;
}
void OAIInsights_v1_call_annotation::setAnsweredBy(const OAIAnnotation_enum_answered_by &answered_by) {
    m_answered_by = answered_by;
    m_answered_by_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_answered_by_Set() const{
    return m_answered_by_isSet;
}

bool OAIInsights_v1_call_annotation::is_answered_by_Valid() const{
    return m_answered_by_isValid;
}

qint32 OAIInsights_v1_call_annotation::getCallScore() const {
    return m_call_score;
}
void OAIInsights_v1_call_annotation::setCallScore(const qint32 &call_score) {
    m_call_score = call_score;
    m_call_score_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_call_score_Set() const{
    return m_call_score_isSet;
}

bool OAIInsights_v1_call_annotation::is_call_score_Valid() const{
    return m_call_score_isValid;
}

QString OAIInsights_v1_call_annotation::getCallSid() const {
    return m_call_sid;
}
void OAIInsights_v1_call_annotation::setCallSid(const QString &call_sid) {
    m_call_sid = call_sid;
    m_call_sid_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_call_sid_Set() const{
    return m_call_sid_isSet;
}

bool OAIInsights_v1_call_annotation::is_call_sid_Valid() const{
    return m_call_sid_isValid;
}

QString OAIInsights_v1_call_annotation::getComment() const {
    return m_comment;
}
void OAIInsights_v1_call_annotation::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIInsights_v1_call_annotation::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIAnnotation_enum_connectivity_issue OAIInsights_v1_call_annotation::getConnectivityIssue() const {
    return m_connectivity_issue;
}
void OAIInsights_v1_call_annotation::setConnectivityIssue(const OAIAnnotation_enum_connectivity_issue &connectivity_issue) {
    m_connectivity_issue = connectivity_issue;
    m_connectivity_issue_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_connectivity_issue_Set() const{
    return m_connectivity_issue_isSet;
}

bool OAIInsights_v1_call_annotation::is_connectivity_issue_Valid() const{
    return m_connectivity_issue_isValid;
}

QString OAIInsights_v1_call_annotation::getIncident() const {
    return m_incident;
}
void OAIInsights_v1_call_annotation::setIncident(const QString &incident) {
    m_incident = incident;
    m_incident_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_incident_Set() const{
    return m_incident_isSet;
}

bool OAIInsights_v1_call_annotation::is_incident_Valid() const{
    return m_incident_isValid;
}

QList<QString> OAIInsights_v1_call_annotation::getQualityIssues() const {
    return m_quality_issues;
}
void OAIInsights_v1_call_annotation::setQualityIssues(const QList<QString> &quality_issues) {
    m_quality_issues = quality_issues;
    m_quality_issues_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_quality_issues_Set() const{
    return m_quality_issues_isSet;
}

bool OAIInsights_v1_call_annotation::is_quality_issues_Valid() const{
    return m_quality_issues_isValid;
}

bool OAIInsights_v1_call_annotation::isSpam() const {
    return m_spam;
}
void OAIInsights_v1_call_annotation::setSpam(const bool &spam) {
    m_spam = spam;
    m_spam_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_spam_Set() const{
    return m_spam_isSet;
}

bool OAIInsights_v1_call_annotation::is_spam_Valid() const{
    return m_spam_isValid;
}

QString OAIInsights_v1_call_annotation::getUrl() const {
    return m_url;
}
void OAIInsights_v1_call_annotation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInsights_v1_call_annotation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInsights_v1_call_annotation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInsights_v1_call_annotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answered_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_call_annotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
