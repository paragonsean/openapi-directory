/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference_enum_tag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference_enum_tag::OAIConference_enum_tag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference_enum_tag::OAIConference_enum_tag() {
    this->initializeModel();
}

OAIConference_enum_tag::~OAIConference_enum_tag() {}

void OAIConference_enum_tag::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConference_enum_tag::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConference_enum_tag::fromJson(QString jsonString) {
    
    if ( jsonString.compare("invalid_requested_region", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::INVALID_REQUESTED_REGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("duplicate_identity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::DUPLICATE_IDENTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("start_failure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::START_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("region_configuration_issues", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::REGION_CONFIGURATION_ISSUES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("quality_warnings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::QUALITY_WARNINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("participant_behavior_issues", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::PARTICIPANT_BEHAVIOR_ISSUES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("high_packet_loss", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::HIGH_PACKET_LOSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("high_jitter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::HIGH_JITTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("high_latency", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::HIGH_LATENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("low_mos", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::LOW_MOS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("detected_silence", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_tag::DETECTED_SILENCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConference_enum_tag::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConference_enum_tag::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConference_enum_tag::INVALID_REQUESTED_REGION:
            val = "invalid_requested_region";
            break;
        case eOAIConference_enum_tag::DUPLICATE_IDENTITY:
            val = "duplicate_identity";
            break;
        case eOAIConference_enum_tag::START_FAILURE:
            val = "start_failure";
            break;
        case eOAIConference_enum_tag::REGION_CONFIGURATION_ISSUES:
            val = "region_configuration_issues";
            break;
        case eOAIConference_enum_tag::QUALITY_WARNINGS:
            val = "quality_warnings";
            break;
        case eOAIConference_enum_tag::PARTICIPANT_BEHAVIOR_ISSUES:
            val = "participant_behavior_issues";
            break;
        case eOAIConference_enum_tag::HIGH_PACKET_LOSS:
            val = "high_packet_loss";
            break;
        case eOAIConference_enum_tag::HIGH_JITTER:
            val = "high_jitter";
            break;
        case eOAIConference_enum_tag::HIGH_LATENCY:
            val = "high_latency";
            break;
        case eOAIConference_enum_tag::LOW_MOS:
            val = "low_mos";
            break;
        case eOAIConference_enum_tag::DETECTED_SILENCE:
            val = "detected_silence";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConference_enum_tag::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConference_enum_tag::eOAIConference_enum_tag OAIConference_enum_tag::getValue() const {
    return m_value;
}

void OAIConference_enum_tag::setValue(const OAIConference_enum_tag::eOAIConference_enum_tag& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConference_enum_tag::isSet() const {
    
    return m_value_isSet;
}

bool OAIConference_enum_tag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
