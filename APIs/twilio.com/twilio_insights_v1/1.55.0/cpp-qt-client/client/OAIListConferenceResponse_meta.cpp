/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListConferenceResponse_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListConferenceResponse_meta::OAIListConferenceResponse_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListConferenceResponse_meta::OAIListConferenceResponse_meta() {
    this->initializeModel();
}

OAIListConferenceResponse_meta::~OAIListConferenceResponse_meta() {}

void OAIListConferenceResponse_meta::initializeModel() {

    m_first_page_url_isSet = false;
    m_first_page_url_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_next_page_url_isSet = false;
    m_next_page_url_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_previous_page_url_isSet = false;
    m_previous_page_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIListConferenceResponse_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListConferenceResponse_meta::fromJsonObject(QJsonObject json) {

    m_first_page_url_isValid = ::OpenAPI::fromJsonValue(m_first_page_url, json[QString("first_page_url")]);
    m_first_page_url_isSet = !json[QString("first_page_url")].isNull() && m_first_page_url_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_next_page_url_isValid = ::OpenAPI::fromJsonValue(m_next_page_url, json[QString("next_page_url")]);
    m_next_page_url_isSet = !json[QString("next_page_url")].isNull() && m_next_page_url_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_previous_page_url_isValid = ::OpenAPI::fromJsonValue(m_previous_page_url, json[QString("previous_page_url")]);
    m_previous_page_url_isSet = !json[QString("previous_page_url")].isNull() && m_previous_page_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIListConferenceResponse_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListConferenceResponse_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_first_page_url_isSet) {
        obj.insert(QString("first_page_url"), ::OpenAPI::toJsonValue(m_first_page_url));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_next_page_url_isSet) {
        obj.insert(QString("next_page_url"), ::OpenAPI::toJsonValue(m_next_page_url));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_previous_page_url_isSet) {
        obj.insert(QString("previous_page_url"), ::OpenAPI::toJsonValue(m_previous_page_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIListConferenceResponse_meta::getFirstPageUrl() const {
    return m_first_page_url;
}
void OAIListConferenceResponse_meta::setFirstPageUrl(const QString &first_page_url) {
    m_first_page_url = first_page_url;
    m_first_page_url_isSet = true;
}

bool OAIListConferenceResponse_meta::is_first_page_url_Set() const{
    return m_first_page_url_isSet;
}

bool OAIListConferenceResponse_meta::is_first_page_url_Valid() const{
    return m_first_page_url_isValid;
}

QString OAIListConferenceResponse_meta::getKey() const {
    return m_key;
}
void OAIListConferenceResponse_meta::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIListConferenceResponse_meta::is_key_Set() const{
    return m_key_isSet;
}

bool OAIListConferenceResponse_meta::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIListConferenceResponse_meta::getNextPageUrl() const {
    return m_next_page_url;
}
void OAIListConferenceResponse_meta::setNextPageUrl(const QString &next_page_url) {
    m_next_page_url = next_page_url;
    m_next_page_url_isSet = true;
}

bool OAIListConferenceResponse_meta::is_next_page_url_Set() const{
    return m_next_page_url_isSet;
}

bool OAIListConferenceResponse_meta::is_next_page_url_Valid() const{
    return m_next_page_url_isValid;
}

qint32 OAIListConferenceResponse_meta::getPage() const {
    return m_page;
}
void OAIListConferenceResponse_meta::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIListConferenceResponse_meta::is_page_Set() const{
    return m_page_isSet;
}

bool OAIListConferenceResponse_meta::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIListConferenceResponse_meta::getPageSize() const {
    return m_page_size;
}
void OAIListConferenceResponse_meta::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListConferenceResponse_meta::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListConferenceResponse_meta::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListConferenceResponse_meta::getPreviousPageUrl() const {
    return m_previous_page_url;
}
void OAIListConferenceResponse_meta::setPreviousPageUrl(const QString &previous_page_url) {
    m_previous_page_url = previous_page_url;
    m_previous_page_url_isSet = true;
}

bool OAIListConferenceResponse_meta::is_previous_page_url_Set() const{
    return m_previous_page_url_isSet;
}

bool OAIListConferenceResponse_meta::is_previous_page_url_Valid() const{
    return m_previous_page_url_isValid;
}

QString OAIListConferenceResponse_meta::getUrl() const {
    return m_url;
}
void OAIListConferenceResponse_meta::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIListConferenceResponse_meta::is_url_Set() const{
    return m_url_isSet;
}

bool OAIListConferenceResponse_meta::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIListConferenceResponse_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListConferenceResponse_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
