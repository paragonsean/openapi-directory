/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_conference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_conference::OAIInsights_v1_conference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_conference::OAIInsights_v1_conference() {
    this->initializeModel();
}

OAIInsights_v1_conference::~OAIInsights_v1_conference() {}

void OAIInsights_v1_conference::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_conference_sid_isSet = false;
    m_conference_sid_isValid = false;

    m_connect_duration_seconds_isSet = false;
    m_connect_duration_seconds_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_detected_issues_isSet = false;
    m_detected_issues_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_end_reason_isSet = false;
    m_end_reason_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_ended_by_isSet = false;
    m_ended_by_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_max_concurrent_participants_isSet = false;
    m_max_concurrent_participants_isValid = false;

    m_max_participants_isSet = false;
    m_max_participants_isValid = false;

    m_mixer_region_isSet = false;
    m_mixer_region_isValid = false;

    m_mixer_region_requested_isSet = false;
    m_mixer_region_requested_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_recording_enabled_isSet = false;
    m_recording_enabled_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_info_isSet = false;
    m_tag_info_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_unique_participants_isSet = false;
    m_unique_participants_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInsights_v1_conference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_conference::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_conference_sid_isValid = ::OpenAPI::fromJsonValue(m_conference_sid, json[QString("conference_sid")]);
    m_conference_sid_isSet = !json[QString("conference_sid")].isNull() && m_conference_sid_isValid;

    m_connect_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_connect_duration_seconds, json[QString("connect_duration_seconds")]);
    m_connect_duration_seconds_isSet = !json[QString("connect_duration_seconds")].isNull() && m_connect_duration_seconds_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("create_time")]);
    m_create_time_isSet = !json[QString("create_time")].isNull() && m_create_time_isValid;

    m_detected_issues_isValid = ::OpenAPI::fromJsonValue(m_detected_issues, json[QString("detected_issues")]);
    m_detected_issues_isSet = !json[QString("detected_issues")].isNull() && m_detected_issues_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("duration_seconds")]);
    m_duration_seconds_isSet = !json[QString("duration_seconds")].isNull() && m_duration_seconds_isValid;

    m_end_reason_isValid = ::OpenAPI::fromJsonValue(m_end_reason, json[QString("end_reason")]);
    m_end_reason_isSet = !json[QString("end_reason")].isNull() && m_end_reason_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_ended_by_isValid = ::OpenAPI::fromJsonValue(m_ended_by, json[QString("ended_by")]);
    m_ended_by_isSet = !json[QString("ended_by")].isNull() && m_ended_by_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_max_concurrent_participants_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_participants, json[QString("max_concurrent_participants")]);
    m_max_concurrent_participants_isSet = !json[QString("max_concurrent_participants")].isNull() && m_max_concurrent_participants_isValid;

    m_max_participants_isValid = ::OpenAPI::fromJsonValue(m_max_participants, json[QString("max_participants")]);
    m_max_participants_isSet = !json[QString("max_participants")].isNull() && m_max_participants_isValid;

    m_mixer_region_isValid = ::OpenAPI::fromJsonValue(m_mixer_region, json[QString("mixer_region")]);
    m_mixer_region_isSet = !json[QString("mixer_region")].isNull() && m_mixer_region_isValid;

    m_mixer_region_requested_isValid = ::OpenAPI::fromJsonValue(m_mixer_region_requested, json[QString("mixer_region_requested")]);
    m_mixer_region_requested_isSet = !json[QString("mixer_region_requested")].isNull() && m_mixer_region_requested_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processing_state")]);
    m_processing_state_isSet = !json[QString("processing_state")].isNull() && m_processing_state_isValid;

    m_recording_enabled_isValid = ::OpenAPI::fromJsonValue(m_recording_enabled, json[QString("recording_enabled")]);
    m_recording_enabled_isSet = !json[QString("recording_enabled")].isNull() && m_recording_enabled_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_info_isValid = ::OpenAPI::fromJsonValue(m_tag_info, json[QString("tag_info")]);
    m_tag_info_isSet = !json[QString("tag_info")].isNull() && m_tag_info_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_unique_participants_isValid = ::OpenAPI::fromJsonValue(m_unique_participants, json[QString("unique_participants")]);
    m_unique_participants_isSet = !json[QString("unique_participants")].isNull() && m_unique_participants_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInsights_v1_conference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_conference::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_conference_sid_isSet) {
        obj.insert(QString("conference_sid"), ::OpenAPI::toJsonValue(m_conference_sid));
    }
    if (m_connect_duration_seconds_isSet) {
        obj.insert(QString("connect_duration_seconds"), ::OpenAPI::toJsonValue(m_connect_duration_seconds));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("create_time"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_detected_issues_isSet) {
        obj.insert(QString("detected_issues"), ::OpenAPI::toJsonValue(m_detected_issues));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("duration_seconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_end_reason.isSet()) {
        obj.insert(QString("end_reason"), ::OpenAPI::toJsonValue(m_end_reason));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_ended_by_isSet) {
        obj.insert(QString("ended_by"), ::OpenAPI::toJsonValue(m_ended_by));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_max_concurrent_participants_isSet) {
        obj.insert(QString("max_concurrent_participants"), ::OpenAPI::toJsonValue(m_max_concurrent_participants));
    }
    if (m_max_participants_isSet) {
        obj.insert(QString("max_participants"), ::OpenAPI::toJsonValue(m_max_participants));
    }
    if (m_mixer_region.isSet()) {
        obj.insert(QString("mixer_region"), ::OpenAPI::toJsonValue(m_mixer_region));
    }
    if (m_mixer_region_requested.isSet()) {
        obj.insert(QString("mixer_region_requested"), ::OpenAPI::toJsonValue(m_mixer_region_requested));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processing_state"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_recording_enabled_isSet) {
        obj.insert(QString("recording_enabled"), ::OpenAPI::toJsonValue(m_recording_enabled));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_info_isSet) {
        obj.insert(QString("tag_info"), ::OpenAPI::toJsonValue(m_tag_info));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_unique_participants_isSet) {
        obj.insert(QString("unique_participants"), ::OpenAPI::toJsonValue(m_unique_participants));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInsights_v1_conference::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_conference::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_conference::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_conference::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIInsights_v1_conference::getConferenceSid() const {
    return m_conference_sid;
}
void OAIInsights_v1_conference::setConferenceSid(const QString &conference_sid) {
    m_conference_sid = conference_sid;
    m_conference_sid_isSet = true;
}

bool OAIInsights_v1_conference::is_conference_sid_Set() const{
    return m_conference_sid_isSet;
}

bool OAIInsights_v1_conference::is_conference_sid_Valid() const{
    return m_conference_sid_isValid;
}

qint32 OAIInsights_v1_conference::getConnectDurationSeconds() const {
    return m_connect_duration_seconds;
}
void OAIInsights_v1_conference::setConnectDurationSeconds(const qint32 &connect_duration_seconds) {
    m_connect_duration_seconds = connect_duration_seconds;
    m_connect_duration_seconds_isSet = true;
}

bool OAIInsights_v1_conference::is_connect_duration_seconds_Set() const{
    return m_connect_duration_seconds_isSet;
}

bool OAIInsights_v1_conference::is_connect_duration_seconds_Valid() const{
    return m_connect_duration_seconds_isValid;
}

QDateTime OAIInsights_v1_conference::getCreateTime() const {
    return m_create_time;
}
void OAIInsights_v1_conference::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInsights_v1_conference::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInsights_v1_conference::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QJsonValue OAIInsights_v1_conference::getDetectedIssues() const {
    return m_detected_issues;
}
void OAIInsights_v1_conference::setDetectedIssues(const QJsonValue &detected_issues) {
    m_detected_issues = detected_issues;
    m_detected_issues_isSet = true;
}

bool OAIInsights_v1_conference::is_detected_issues_Set() const{
    return m_detected_issues_isSet;
}

bool OAIInsights_v1_conference::is_detected_issues_Valid() const{
    return m_detected_issues_isValid;
}

qint32 OAIInsights_v1_conference::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIInsights_v1_conference::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIInsights_v1_conference::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIInsights_v1_conference::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

OAIConference_enum_conference_end_reason OAIInsights_v1_conference::getEndReason() const {
    return m_end_reason;
}
void OAIInsights_v1_conference::setEndReason(const OAIConference_enum_conference_end_reason &end_reason) {
    m_end_reason = end_reason;
    m_end_reason_isSet = true;
}

bool OAIInsights_v1_conference::is_end_reason_Set() const{
    return m_end_reason_isSet;
}

bool OAIInsights_v1_conference::is_end_reason_Valid() const{
    return m_end_reason_isValid;
}

QDateTime OAIInsights_v1_conference::getEndTime() const {
    return m_end_time;
}
void OAIInsights_v1_conference::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIInsights_v1_conference::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIInsights_v1_conference::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIInsights_v1_conference::getEndedBy() const {
    return m_ended_by;
}
void OAIInsights_v1_conference::setEndedBy(const QString &ended_by) {
    m_ended_by = ended_by;
    m_ended_by_isSet = true;
}

bool OAIInsights_v1_conference::is_ended_by_Set() const{
    return m_ended_by_isSet;
}

bool OAIInsights_v1_conference::is_ended_by_Valid() const{
    return m_ended_by_isValid;
}

QString OAIInsights_v1_conference::getFriendlyName() const {
    return m_friendly_name;
}
void OAIInsights_v1_conference::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIInsights_v1_conference::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIInsights_v1_conference::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIObject OAIInsights_v1_conference::getLinks() const {
    return m_links;
}
void OAIInsights_v1_conference::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIInsights_v1_conference::is_links_Set() const{
    return m_links_isSet;
}

bool OAIInsights_v1_conference::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIInsights_v1_conference::getMaxConcurrentParticipants() const {
    return m_max_concurrent_participants;
}
void OAIInsights_v1_conference::setMaxConcurrentParticipants(const qint32 &max_concurrent_participants) {
    m_max_concurrent_participants = max_concurrent_participants;
    m_max_concurrent_participants_isSet = true;
}

bool OAIInsights_v1_conference::is_max_concurrent_participants_Set() const{
    return m_max_concurrent_participants_isSet;
}

bool OAIInsights_v1_conference::is_max_concurrent_participants_Valid() const{
    return m_max_concurrent_participants_isValid;
}

qint32 OAIInsights_v1_conference::getMaxParticipants() const {
    return m_max_participants;
}
void OAIInsights_v1_conference::setMaxParticipants(const qint32 &max_participants) {
    m_max_participants = max_participants;
    m_max_participants_isSet = true;
}

bool OAIInsights_v1_conference::is_max_participants_Set() const{
    return m_max_participants_isSet;
}

bool OAIInsights_v1_conference::is_max_participants_Valid() const{
    return m_max_participants_isValid;
}

OAIConference_enum_region OAIInsights_v1_conference::getMixerRegion() const {
    return m_mixer_region;
}
void OAIInsights_v1_conference::setMixerRegion(const OAIConference_enum_region &mixer_region) {
    m_mixer_region = mixer_region;
    m_mixer_region_isSet = true;
}

bool OAIInsights_v1_conference::is_mixer_region_Set() const{
    return m_mixer_region_isSet;
}

bool OAIInsights_v1_conference::is_mixer_region_Valid() const{
    return m_mixer_region_isValid;
}

OAIConference_enum_region OAIInsights_v1_conference::getMixerRegionRequested() const {
    return m_mixer_region_requested;
}
void OAIInsights_v1_conference::setMixerRegionRequested(const OAIConference_enum_region &mixer_region_requested) {
    m_mixer_region_requested = mixer_region_requested;
    m_mixer_region_requested_isSet = true;
}

bool OAIInsights_v1_conference::is_mixer_region_requested_Set() const{
    return m_mixer_region_requested_isSet;
}

bool OAIInsights_v1_conference::is_mixer_region_requested_Valid() const{
    return m_mixer_region_requested_isValid;
}

OAIConference_enum_processing_state OAIInsights_v1_conference::getProcessingState() const {
    return m_processing_state;
}
void OAIInsights_v1_conference::setProcessingState(const OAIConference_enum_processing_state &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIInsights_v1_conference::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIInsights_v1_conference::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

bool OAIInsights_v1_conference::isRecordingEnabled() const {
    return m_recording_enabled;
}
void OAIInsights_v1_conference::setRecordingEnabled(const bool &recording_enabled) {
    m_recording_enabled = recording_enabled;
    m_recording_enabled_isSet = true;
}

bool OAIInsights_v1_conference::is_recording_enabled_Set() const{
    return m_recording_enabled_isSet;
}

bool OAIInsights_v1_conference::is_recording_enabled_Valid() const{
    return m_recording_enabled_isValid;
}

QDateTime OAIInsights_v1_conference::getStartTime() const {
    return m_start_time;
}
void OAIInsights_v1_conference::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIInsights_v1_conference::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIInsights_v1_conference::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIConference_enum_conference_status OAIInsights_v1_conference::getStatus() const {
    return m_status;
}
void OAIInsights_v1_conference::setStatus(const OAIConference_enum_conference_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInsights_v1_conference::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInsights_v1_conference::is_status_Valid() const{
    return m_status_isValid;
}

QJsonValue OAIInsights_v1_conference::getTagInfo() const {
    return m_tag_info;
}
void OAIInsights_v1_conference::setTagInfo(const QJsonValue &tag_info) {
    m_tag_info = tag_info;
    m_tag_info_isSet = true;
}

bool OAIInsights_v1_conference::is_tag_info_Set() const{
    return m_tag_info_isSet;
}

bool OAIInsights_v1_conference::is_tag_info_Valid() const{
    return m_tag_info_isValid;
}

QList<OAIConference_enum_tag> OAIInsights_v1_conference::getTags() const {
    return m_tags;
}
void OAIInsights_v1_conference::setTags(const QList<OAIConference_enum_tag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIInsights_v1_conference::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIInsights_v1_conference::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIInsights_v1_conference::getUniqueParticipants() const {
    return m_unique_participants;
}
void OAIInsights_v1_conference::setUniqueParticipants(const qint32 &unique_participants) {
    m_unique_participants = unique_participants;
    m_unique_participants_isSet = true;
}

bool OAIInsights_v1_conference::is_unique_participants_Set() const{
    return m_unique_participants_isSet;
}

bool OAIInsights_v1_conference::is_unique_participants_Valid() const{
    return m_unique_participants_isValid;
}

QString OAIInsights_v1_conference::getUrl() const {
    return m_url;
}
void OAIInsights_v1_conference::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInsights_v1_conference::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInsights_v1_conference::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInsights_v1_conference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connect_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixer_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixer_region_requested.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_conference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
