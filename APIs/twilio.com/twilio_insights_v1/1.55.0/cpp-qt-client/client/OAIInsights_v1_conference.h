/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInsights_v1_conference.h
 *
 * 
 */

#ifndef OAIInsights_v1_conference_H
#define OAIInsights_v1_conference_H

#include <QJsonObject>

#include "OAIConference_enum_conference_end_reason.h"
#include "OAIConference_enum_conference_status.h"
#include "OAIConference_enum_processing_state.h"
#include "OAIConference_enum_region.h"
#include "OAIConference_enum_tag.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInsights_v1_conference : public OAIObject {
public:
    OAIInsights_v1_conference();
    OAIInsights_v1_conference(QString json);
    ~OAIInsights_v1_conference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QString getConferenceSid() const;
    void setConferenceSid(const QString &conference_sid);
    bool is_conference_sid_Set() const;
    bool is_conference_sid_Valid() const;

    qint32 getConnectDurationSeconds() const;
    void setConnectDurationSeconds(const qint32 &connect_duration_seconds);
    bool is_connect_duration_seconds_Set() const;
    bool is_connect_duration_seconds_Valid() const;

    QDateTime getCreateTime() const;
    void setCreateTime(const QDateTime &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QJsonValue getDetectedIssues() const;
    void setDetectedIssues(const QJsonValue &detected_issues);
    bool is_detected_issues_Set() const;
    bool is_detected_issues_Valid() const;

    qint32 getDurationSeconds() const;
    void setDurationSeconds(const qint32 &duration_seconds);
    bool is_duration_seconds_Set() const;
    bool is_duration_seconds_Valid() const;

    OAIConference_enum_conference_end_reason getEndReason() const;
    void setEndReason(const OAIConference_enum_conference_end_reason &end_reason);
    bool is_end_reason_Set() const;
    bool is_end_reason_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getEndedBy() const;
    void setEndedBy(const QString &ended_by);
    bool is_ended_by_Set() const;
    bool is_ended_by_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getMaxConcurrentParticipants() const;
    void setMaxConcurrentParticipants(const qint32 &max_concurrent_participants);
    bool is_max_concurrent_participants_Set() const;
    bool is_max_concurrent_participants_Valid() const;

    qint32 getMaxParticipants() const;
    void setMaxParticipants(const qint32 &max_participants);
    bool is_max_participants_Set() const;
    bool is_max_participants_Valid() const;

    OAIConference_enum_region getMixerRegion() const;
    void setMixerRegion(const OAIConference_enum_region &mixer_region);
    bool is_mixer_region_Set() const;
    bool is_mixer_region_Valid() const;

    OAIConference_enum_region getMixerRegionRequested() const;
    void setMixerRegionRequested(const OAIConference_enum_region &mixer_region_requested);
    bool is_mixer_region_requested_Set() const;
    bool is_mixer_region_requested_Valid() const;

    OAIConference_enum_processing_state getProcessingState() const;
    void setProcessingState(const OAIConference_enum_processing_state &processing_state);
    bool is_processing_state_Set() const;
    bool is_processing_state_Valid() const;

    bool isRecordingEnabled() const;
    void setRecordingEnabled(const bool &recording_enabled);
    bool is_recording_enabled_Set() const;
    bool is_recording_enabled_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAIConference_enum_conference_status getStatus() const;
    void setStatus(const OAIConference_enum_conference_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QJsonValue getTagInfo() const;
    void setTagInfo(const QJsonValue &tag_info);
    bool is_tag_info_Set() const;
    bool is_tag_info_Valid() const;

    QList<OAIConference_enum_tag> getTags() const;
    void setTags(const QList<OAIConference_enum_tag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getUniqueParticipants() const;
    void setUniqueParticipants(const qint32 &unique_participants);
    bool is_unique_participants_Set() const;
    bool is_unique_participants_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QString m_conference_sid;
    bool m_conference_sid_isSet;
    bool m_conference_sid_isValid;

    qint32 m_connect_duration_seconds;
    bool m_connect_duration_seconds_isSet;
    bool m_connect_duration_seconds_isValid;

    QDateTime m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QJsonValue m_detected_issues;
    bool m_detected_issues_isSet;
    bool m_detected_issues_isValid;

    qint32 m_duration_seconds;
    bool m_duration_seconds_isSet;
    bool m_duration_seconds_isValid;

    OAIConference_enum_conference_end_reason m_end_reason;
    bool m_end_reason_isSet;
    bool m_end_reason_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_ended_by;
    bool m_ended_by_isSet;
    bool m_ended_by_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_max_concurrent_participants;
    bool m_max_concurrent_participants_isSet;
    bool m_max_concurrent_participants_isValid;

    qint32 m_max_participants;
    bool m_max_participants_isSet;
    bool m_max_participants_isValid;

    OAIConference_enum_region m_mixer_region;
    bool m_mixer_region_isSet;
    bool m_mixer_region_isValid;

    OAIConference_enum_region m_mixer_region_requested;
    bool m_mixer_region_requested_isSet;
    bool m_mixer_region_requested_isValid;

    OAIConference_enum_processing_state m_processing_state;
    bool m_processing_state_isSet;
    bool m_processing_state_isValid;

    bool m_recording_enabled;
    bool m_recording_enabled_isSet;
    bool m_recording_enabled_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAIConference_enum_conference_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QJsonValue m_tag_info;
    bool m_tag_info_isSet;
    bool m_tag_info_isValid;

    QList<OAIConference_enum_tag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_unique_participants;
    bool m_unique_participants_isSet;
    bool m_unique_participants_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInsights_v1_conference)

#endif // OAIInsights_v1_conference_H
