/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation_enum_connectivity_issue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation_enum_connectivity_issue::OAIAnnotation_enum_connectivity_issue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation_enum_connectivity_issue::OAIAnnotation_enum_connectivity_issue() {
    this->initializeModel();
}

OAIAnnotation_enum_connectivity_issue::~OAIAnnotation_enum_connectivity_issue() {}

void OAIAnnotation_enum_connectivity_issue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnnotation_enum_connectivity_issue::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnnotation_enum_connectivity_issue::fromJson(QString jsonString) {
    
    if ( jsonString.compare("unknown_connectivity_issue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::UNKNOWN_CONNECTIVITY_ISSUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("no_connectivity_issue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::NO_CONNECTIVITY_ISSUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("invalid_number", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::INVALID_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("caller_id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::CALLER_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dropped_call", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::DROPPED_CALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("number_reachability", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_connectivity_issue::NUMBER_REACHABILITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnnotation_enum_connectivity_issue::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnnotation_enum_connectivity_issue::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnnotation_enum_connectivity_issue::UNKNOWN_CONNECTIVITY_ISSUE:
            val = "unknown_connectivity_issue";
            break;
        case eOAIAnnotation_enum_connectivity_issue::NO_CONNECTIVITY_ISSUE:
            val = "no_connectivity_issue";
            break;
        case eOAIAnnotation_enum_connectivity_issue::INVALID_NUMBER:
            val = "invalid_number";
            break;
        case eOAIAnnotation_enum_connectivity_issue::CALLER_ID:
            val = "caller_id";
            break;
        case eOAIAnnotation_enum_connectivity_issue::DROPPED_CALL:
            val = "dropped_call";
            break;
        case eOAIAnnotation_enum_connectivity_issue::NUMBER_REACHABILITY:
            val = "number_reachability";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnnotation_enum_connectivity_issue::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnnotation_enum_connectivity_issue::eOAIAnnotation_enum_connectivity_issue OAIAnnotation_enum_connectivity_issue::getValue() const {
    return m_value;
}

void OAIAnnotation_enum_connectivity_issue::setValue(const OAIAnnotation_enum_connectivity_issue::eOAIAnnotation_enum_connectivity_issue& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnnotation_enum_connectivity_issue::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnnotation_enum_connectivity_issue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
