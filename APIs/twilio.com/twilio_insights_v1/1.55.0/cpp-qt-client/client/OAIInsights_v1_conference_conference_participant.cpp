/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_conference_conference_participant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_conference_conference_participant::OAIInsights_v1_conference_conference_participant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_conference_conference_participant::OAIInsights_v1_conference_conference_participant() {
    this->initializeModel();
}

OAIInsights_v1_conference_conference_participant::~OAIInsights_v1_conference_conference_participant() {}

void OAIInsights_v1_conference_conference_participant::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_call_direction_isSet = false;
    m_call_direction_isValid = false;

    m_call_sid_isSet = false;
    m_call_sid_isValid = false;

    m_call_status_isSet = false;
    m_call_status_isValid = false;

    m_call_type_isSet = false;
    m_call_type_isValid = false;

    m_coached_participants_isSet = false;
    m_coached_participants_isValid = false;

    m_conference_region_isSet = false;
    m_conference_region_isValid = false;

    m_conference_sid_isSet = false;
    m_conference_sid_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_is_coach_isSet = false;
    m_is_coach_isValid = false;

    m_is_moderator_isSet = false;
    m_is_moderator_isValid = false;

    m_jitter_buffer_size_isSet = false;
    m_jitter_buffer_size_isValid = false;

    m_join_time_isSet = false;
    m_join_time_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_leave_time_isSet = false;
    m_leave_time_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_outbound_queue_length_isSet = false;
    m_outbound_queue_length_isValid = false;

    m_outbound_time_in_queue_isSet = false;
    m_outbound_time_in_queue_isValid = false;

    m_participant_region_isSet = false;
    m_participant_region_isValid = false;

    m_participant_sid_isSet = false;
    m_participant_sid_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInsights_v1_conference_conference_participant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_conference_conference_participant::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_call_direction_isValid = ::OpenAPI::fromJsonValue(m_call_direction, json[QString("call_direction")]);
    m_call_direction_isSet = !json[QString("call_direction")].isNull() && m_call_direction_isValid;

    m_call_sid_isValid = ::OpenAPI::fromJsonValue(m_call_sid, json[QString("call_sid")]);
    m_call_sid_isSet = !json[QString("call_sid")].isNull() && m_call_sid_isValid;

    m_call_status_isValid = ::OpenAPI::fromJsonValue(m_call_status, json[QString("call_status")]);
    m_call_status_isSet = !json[QString("call_status")].isNull() && m_call_status_isValid;

    m_call_type_isValid = ::OpenAPI::fromJsonValue(m_call_type, json[QString("call_type")]);
    m_call_type_isSet = !json[QString("call_type")].isNull() && m_call_type_isValid;

    m_coached_participants_isValid = ::OpenAPI::fromJsonValue(m_coached_participants, json[QString("coached_participants")]);
    m_coached_participants_isSet = !json[QString("coached_participants")].isNull() && m_coached_participants_isValid;

    m_conference_region_isValid = ::OpenAPI::fromJsonValue(m_conference_region, json[QString("conference_region")]);
    m_conference_region_isSet = !json[QString("conference_region")].isNull() && m_conference_region_isValid;

    m_conference_sid_isValid = ::OpenAPI::fromJsonValue(m_conference_sid, json[QString("conference_sid")]);
    m_conference_sid_isSet = !json[QString("conference_sid")].isNull() && m_conference_sid_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("duration_seconds")]);
    m_duration_seconds_isSet = !json[QString("duration_seconds")].isNull() && m_duration_seconds_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_is_coach_isValid = ::OpenAPI::fromJsonValue(m_is_coach, json[QString("is_coach")]);
    m_is_coach_isSet = !json[QString("is_coach")].isNull() && m_is_coach_isValid;

    m_is_moderator_isValid = ::OpenAPI::fromJsonValue(m_is_moderator, json[QString("is_moderator")]);
    m_is_moderator_isSet = !json[QString("is_moderator")].isNull() && m_is_moderator_isValid;

    m_jitter_buffer_size_isValid = ::OpenAPI::fromJsonValue(m_jitter_buffer_size, json[QString("jitter_buffer_size")]);
    m_jitter_buffer_size_isSet = !json[QString("jitter_buffer_size")].isNull() && m_jitter_buffer_size_isValid;

    m_join_time_isValid = ::OpenAPI::fromJsonValue(m_join_time, json[QString("join_time")]);
    m_join_time_isSet = !json[QString("join_time")].isNull() && m_join_time_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_leave_time_isValid = ::OpenAPI::fromJsonValue(m_leave_time, json[QString("leave_time")]);
    m_leave_time_isSet = !json[QString("leave_time")].isNull() && m_leave_time_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_outbound_queue_length_isValid = ::OpenAPI::fromJsonValue(m_outbound_queue_length, json[QString("outbound_queue_length")]);
    m_outbound_queue_length_isSet = !json[QString("outbound_queue_length")].isNull() && m_outbound_queue_length_isValid;

    m_outbound_time_in_queue_isValid = ::OpenAPI::fromJsonValue(m_outbound_time_in_queue, json[QString("outbound_time_in_queue")]);
    m_outbound_time_in_queue_isSet = !json[QString("outbound_time_in_queue")].isNull() && m_outbound_time_in_queue_isValid;

    m_participant_region_isValid = ::OpenAPI::fromJsonValue(m_participant_region, json[QString("participant_region")]);
    m_participant_region_isSet = !json[QString("participant_region")].isNull() && m_participant_region_isValid;

    m_participant_sid_isValid = ::OpenAPI::fromJsonValue(m_participant_sid, json[QString("participant_sid")]);
    m_participant_sid_isSet = !json[QString("participant_sid")].isNull() && m_participant_sid_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processing_state")]);
    m_processing_state_isSet = !json[QString("processing_state")].isNull() && m_processing_state_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInsights_v1_conference_conference_participant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_conference_conference_participant::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_call_direction.isSet()) {
        obj.insert(QString("call_direction"), ::OpenAPI::toJsonValue(m_call_direction));
    }
    if (m_call_sid_isSet) {
        obj.insert(QString("call_sid"), ::OpenAPI::toJsonValue(m_call_sid));
    }
    if (m_call_status.isSet()) {
        obj.insert(QString("call_status"), ::OpenAPI::toJsonValue(m_call_status));
    }
    if (m_call_type.isSet()) {
        obj.insert(QString("call_type"), ::OpenAPI::toJsonValue(m_call_type));
    }
    if (m_coached_participants.size() > 0) {
        obj.insert(QString("coached_participants"), ::OpenAPI::toJsonValue(m_coached_participants));
    }
    if (m_conference_region.isSet()) {
        obj.insert(QString("conference_region"), ::OpenAPI::toJsonValue(m_conference_region));
    }
    if (m_conference_sid_isSet) {
        obj.insert(QString("conference_sid"), ::OpenAPI::toJsonValue(m_conference_sid));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("duration_seconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_events_isSet) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_is_coach_isSet) {
        obj.insert(QString("is_coach"), ::OpenAPI::toJsonValue(m_is_coach));
    }
    if (m_is_moderator_isSet) {
        obj.insert(QString("is_moderator"), ::OpenAPI::toJsonValue(m_is_moderator));
    }
    if (m_jitter_buffer_size.isSet()) {
        obj.insert(QString("jitter_buffer_size"), ::OpenAPI::toJsonValue(m_jitter_buffer_size));
    }
    if (m_join_time_isSet) {
        obj.insert(QString("join_time"), ::OpenAPI::toJsonValue(m_join_time));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_leave_time_isSet) {
        obj.insert(QString("leave_time"), ::OpenAPI::toJsonValue(m_leave_time));
    }
    if (m_metrics_isSet) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_outbound_queue_length_isSet) {
        obj.insert(QString("outbound_queue_length"), ::OpenAPI::toJsonValue(m_outbound_queue_length));
    }
    if (m_outbound_time_in_queue_isSet) {
        obj.insert(QString("outbound_time_in_queue"), ::OpenAPI::toJsonValue(m_outbound_time_in_queue));
    }
    if (m_participant_region.isSet()) {
        obj.insert(QString("participant_region"), ::OpenAPI::toJsonValue(m_participant_region));
    }
    if (m_participant_sid_isSet) {
        obj.insert(QString("participant_sid"), ::OpenAPI::toJsonValue(m_participant_sid));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processing_state"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInsights_v1_conference_conference_participant::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_conference_conference_participant::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIConference_participant_enum_call_direction OAIInsights_v1_conference_conference_participant::getCallDirection() const {
    return m_call_direction;
}
void OAIInsights_v1_conference_conference_participant::setCallDirection(const OAIConference_participant_enum_call_direction &call_direction) {
    m_call_direction = call_direction;
    m_call_direction_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_call_direction_Set() const{
    return m_call_direction_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_call_direction_Valid() const{
    return m_call_direction_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getCallSid() const {
    return m_call_sid;
}
void OAIInsights_v1_conference_conference_participant::setCallSid(const QString &call_sid) {
    m_call_sid = call_sid;
    m_call_sid_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_call_sid_Set() const{
    return m_call_sid_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_call_sid_Valid() const{
    return m_call_sid_isValid;
}

OAIConference_participant_enum_call_status OAIInsights_v1_conference_conference_participant::getCallStatus() const {
    return m_call_status;
}
void OAIInsights_v1_conference_conference_participant::setCallStatus(const OAIConference_participant_enum_call_status &call_status) {
    m_call_status = call_status;
    m_call_status_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_call_status_Set() const{
    return m_call_status_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_call_status_Valid() const{
    return m_call_status_isValid;
}

OAIConference_participant_enum_call_type OAIInsights_v1_conference_conference_participant::getCallType() const {
    return m_call_type;
}
void OAIInsights_v1_conference_conference_participant::setCallType(const OAIConference_participant_enum_call_type &call_type) {
    m_call_type = call_type;
    m_call_type_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_call_type_Set() const{
    return m_call_type_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_call_type_Valid() const{
    return m_call_type_isValid;
}

QList<QString> OAIInsights_v1_conference_conference_participant::getCoachedParticipants() const {
    return m_coached_participants;
}
void OAIInsights_v1_conference_conference_participant::setCoachedParticipants(const QList<QString> &coached_participants) {
    m_coached_participants = coached_participants;
    m_coached_participants_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_coached_participants_Set() const{
    return m_coached_participants_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_coached_participants_Valid() const{
    return m_coached_participants_isValid;
}

OAIConference_participant_enum_region OAIInsights_v1_conference_conference_participant::getConferenceRegion() const {
    return m_conference_region;
}
void OAIInsights_v1_conference_conference_participant::setConferenceRegion(const OAIConference_participant_enum_region &conference_region) {
    m_conference_region = conference_region;
    m_conference_region_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_conference_region_Set() const{
    return m_conference_region_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_conference_region_Valid() const{
    return m_conference_region_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getConferenceSid() const {
    return m_conference_sid;
}
void OAIInsights_v1_conference_conference_participant::setConferenceSid(const QString &conference_sid) {
    m_conference_sid = conference_sid;
    m_conference_sid_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_conference_sid_Set() const{
    return m_conference_sid_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_conference_sid_Valid() const{
    return m_conference_sid_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getCountryCode() const {
    return m_country_code;
}
void OAIInsights_v1_conference_conference_participant::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_country_code_Valid() const{
    return m_country_code_isValid;
}

qint32 OAIInsights_v1_conference_conference_participant::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIInsights_v1_conference_conference_participant::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

QJsonValue OAIInsights_v1_conference_conference_participant::getEvents() const {
    return m_events;
}
void OAIInsights_v1_conference_conference_participant::setEvents(const QJsonValue &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_events_Set() const{
    return m_events_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getFrom() const {
    return m_from;
}
void OAIInsights_v1_conference_conference_participant::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_from_Set() const{
    return m_from_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIInsights_v1_conference_conference_participant::isIsCoach() const {
    return m_is_coach;
}
void OAIInsights_v1_conference_conference_participant::setIsCoach(const bool &is_coach) {
    m_is_coach = is_coach;
    m_is_coach_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_is_coach_Set() const{
    return m_is_coach_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_is_coach_Valid() const{
    return m_is_coach_isValid;
}

bool OAIInsights_v1_conference_conference_participant::isIsModerator() const {
    return m_is_moderator;
}
void OAIInsights_v1_conference_conference_participant::setIsModerator(const bool &is_moderator) {
    m_is_moderator = is_moderator;
    m_is_moderator_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_is_moderator_Set() const{
    return m_is_moderator_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_is_moderator_Valid() const{
    return m_is_moderator_isValid;
}

OAIConference_participant_enum_jitter_buffer_size OAIInsights_v1_conference_conference_participant::getJitterBufferSize() const {
    return m_jitter_buffer_size;
}
void OAIInsights_v1_conference_conference_participant::setJitterBufferSize(const OAIConference_participant_enum_jitter_buffer_size &jitter_buffer_size) {
    m_jitter_buffer_size = jitter_buffer_size;
    m_jitter_buffer_size_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_jitter_buffer_size_Set() const{
    return m_jitter_buffer_size_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_jitter_buffer_size_Valid() const{
    return m_jitter_buffer_size_isValid;
}

QDateTime OAIInsights_v1_conference_conference_participant::getJoinTime() const {
    return m_join_time;
}
void OAIInsights_v1_conference_conference_participant::setJoinTime(const QDateTime &join_time) {
    m_join_time = join_time;
    m_join_time_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_join_time_Set() const{
    return m_join_time_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_join_time_Valid() const{
    return m_join_time_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getLabel() const {
    return m_label;
}
void OAIInsights_v1_conference_conference_participant::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_label_Set() const{
    return m_label_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIInsights_v1_conference_conference_participant::getLeaveTime() const {
    return m_leave_time;
}
void OAIInsights_v1_conference_conference_participant::setLeaveTime(const QDateTime &leave_time) {
    m_leave_time = leave_time;
    m_leave_time_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_leave_time_Set() const{
    return m_leave_time_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_leave_time_Valid() const{
    return m_leave_time_isValid;
}

QJsonValue OAIInsights_v1_conference_conference_participant::getMetrics() const {
    return m_metrics;
}
void OAIInsights_v1_conference_conference_participant::setMetrics(const QJsonValue &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint32 OAIInsights_v1_conference_conference_participant::getOutboundQueueLength() const {
    return m_outbound_queue_length;
}
void OAIInsights_v1_conference_conference_participant::setOutboundQueueLength(const qint32 &outbound_queue_length) {
    m_outbound_queue_length = outbound_queue_length;
    m_outbound_queue_length_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_outbound_queue_length_Set() const{
    return m_outbound_queue_length_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_outbound_queue_length_Valid() const{
    return m_outbound_queue_length_isValid;
}

qint32 OAIInsights_v1_conference_conference_participant::getOutboundTimeInQueue() const {
    return m_outbound_time_in_queue;
}
void OAIInsights_v1_conference_conference_participant::setOutboundTimeInQueue(const qint32 &outbound_time_in_queue) {
    m_outbound_time_in_queue = outbound_time_in_queue;
    m_outbound_time_in_queue_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_outbound_time_in_queue_Set() const{
    return m_outbound_time_in_queue_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_outbound_time_in_queue_Valid() const{
    return m_outbound_time_in_queue_isValid;
}

OAIConference_participant_enum_region OAIInsights_v1_conference_conference_participant::getParticipantRegion() const {
    return m_participant_region;
}
void OAIInsights_v1_conference_conference_participant::setParticipantRegion(const OAIConference_participant_enum_region &participant_region) {
    m_participant_region = participant_region;
    m_participant_region_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_participant_region_Set() const{
    return m_participant_region_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_participant_region_Valid() const{
    return m_participant_region_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getParticipantSid() const {
    return m_participant_sid;
}
void OAIInsights_v1_conference_conference_participant::setParticipantSid(const QString &participant_sid) {
    m_participant_sid = participant_sid;
    m_participant_sid_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_participant_sid_Set() const{
    return m_participant_sid_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_participant_sid_Valid() const{
    return m_participant_sid_isValid;
}

OAIConference_participant_enum_processing_state OAIInsights_v1_conference_conference_participant::getProcessingState() const {
    return m_processing_state;
}
void OAIInsights_v1_conference_conference_participant::setProcessingState(const OAIConference_participant_enum_processing_state &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

QJsonValue OAIInsights_v1_conference_conference_participant::getProperties() const {
    return m_properties;
}
void OAIInsights_v1_conference_conference_participant::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getTo() const {
    return m_to;
}
void OAIInsights_v1_conference_conference_participant::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_to_Set() const{
    return m_to_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIInsights_v1_conference_conference_participant::getUrl() const {
    return m_url;
}
void OAIInsights_v1_conference_conference_participant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInsights_v1_conference_conference_participant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInsights_v1_conference_conference_participant::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInsights_v1_conference_conference_participant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coached_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jitter_buffer_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_queue_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_time_in_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_conference_conference_participant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
