/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary_enum_call_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary_enum_call_state::OAISummary_enum_call_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary_enum_call_state::OAISummary_enum_call_state() {
    this->initializeModel();
}

OAISummary_enum_call_state::~OAISummary_enum_call_state() {}

void OAISummary_enum_call_state::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISummary_enum_call_state::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISummary_enum_call_state::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ringing", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::RINGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("busy", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::BUSY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fail", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("noanswer", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::NOANSWER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("answered", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::ANSWERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("undialed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISummary_enum_call_state::UNDIALED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISummary_enum_call_state::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISummary_enum_call_state::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISummary_enum_call_state::RINGING:
            val = "ringing";
            break;
        case eOAISummary_enum_call_state::COMPLETED:
            val = "completed";
            break;
        case eOAISummary_enum_call_state::BUSY:
            val = "busy";
            break;
        case eOAISummary_enum_call_state::FAIL:
            val = "fail";
            break;
        case eOAISummary_enum_call_state::NOANSWER:
            val = "noanswer";
            break;
        case eOAISummary_enum_call_state::CANCELED:
            val = "canceled";
            break;
        case eOAISummary_enum_call_state::ANSWERED:
            val = "answered";
            break;
        case eOAISummary_enum_call_state::UNDIALED:
            val = "undialed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISummary_enum_call_state::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISummary_enum_call_state::eOAISummary_enum_call_state OAISummary_enum_call_state::getValue() const {
    return m_value;
}

void OAISummary_enum_call_state::setValue(const OAISummary_enum_call_state::eOAISummary_enum_call_state& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISummary_enum_call_state::isSet() const {
    
    return m_value_isSet;
}

bool OAISummary_enum_call_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
