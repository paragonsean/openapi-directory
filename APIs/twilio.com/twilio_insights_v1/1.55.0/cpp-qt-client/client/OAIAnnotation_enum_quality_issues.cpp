/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation_enum_quality_issues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation_enum_quality_issues::OAIAnnotation_enum_quality_issues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation_enum_quality_issues::OAIAnnotation_enum_quality_issues() {
    this->initializeModel();
}

OAIAnnotation_enum_quality_issues::~OAIAnnotation_enum_quality_issues() {}

void OAIAnnotation_enum_quality_issues::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAnnotation_enum_quality_issues::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAnnotation_enum_quality_issues::fromJson(QString jsonString) {
    
    if ( jsonString.compare("unknown_quality_issue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::UNKNOWN_QUALITY_ISSUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("no_quality_issue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::NO_QUALITY_ISSUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("low_volume", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::LOW_VOLUME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("choppy_robotic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::CHOPPY_ROBOTIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("echo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::ECHO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dtmf", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::DTMF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("latency", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::LATENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("owa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::OWA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("static_noise", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAnnotation_enum_quality_issues::STATIC_NOISE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAnnotation_enum_quality_issues::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAnnotation_enum_quality_issues::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAnnotation_enum_quality_issues::UNKNOWN_QUALITY_ISSUE:
            val = "unknown_quality_issue";
            break;
        case eOAIAnnotation_enum_quality_issues::NO_QUALITY_ISSUE:
            val = "no_quality_issue";
            break;
        case eOAIAnnotation_enum_quality_issues::LOW_VOLUME:
            val = "low_volume";
            break;
        case eOAIAnnotation_enum_quality_issues::CHOPPY_ROBOTIC:
            val = "choppy_robotic";
            break;
        case eOAIAnnotation_enum_quality_issues::ECHO:
            val = "echo";
            break;
        case eOAIAnnotation_enum_quality_issues::DTMF:
            val = "dtmf";
            break;
        case eOAIAnnotation_enum_quality_issues::LATENCY:
            val = "latency";
            break;
        case eOAIAnnotation_enum_quality_issues::OWA:
            val = "owa";
            break;
        case eOAIAnnotation_enum_quality_issues::STATIC_NOISE:
            val = "static_noise";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAnnotation_enum_quality_issues::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAnnotation_enum_quality_issues::eOAIAnnotation_enum_quality_issues OAIAnnotation_enum_quality_issues::getValue() const {
    return m_value;
}

void OAIAnnotation_enum_quality_issues::setValue(const OAIAnnotation_enum_quality_issues::eOAIAnnotation_enum_quality_issues& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAnnotation_enum_quality_issues::isSet() const {
    
    return m_value_isSet;
}

bool OAIAnnotation_enum_quality_issues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
