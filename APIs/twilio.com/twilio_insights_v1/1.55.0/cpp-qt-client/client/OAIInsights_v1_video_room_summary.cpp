/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_video_room_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_video_room_summary::OAIInsights_v1_video_room_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_video_room_summary::OAIInsights_v1_video_room_summary() {
    this->initializeModel();
}

OAIInsights_v1_video_room_summary::~OAIInsights_v1_video_room_summary() {}

void OAIInsights_v1_video_room_summary::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_codecs_isSet = false;
    m_codecs_isValid = false;

    m_concurrent_participants_isSet = false;
    m_concurrent_participants_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_created_method_isSet = false;
    m_created_method_isValid = false;

    m_duration_sec_isSet = false;
    m_duration_sec_isValid = false;

    m_edge_location_isSet = false;
    m_edge_location_isValid = false;

    m_end_reason_isSet = false;
    m_end_reason_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_max_concurrent_participants_isSet = false;
    m_max_concurrent_participants_isValid = false;

    m_max_participants_isSet = false;
    m_max_participants_isValid = false;

    m_media_region_isSet = false;
    m_media_region_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_recording_enabled_isSet = false;
    m_recording_enabled_isValid = false;

    m_room_name_isSet = false;
    m_room_name_isValid = false;

    m_room_sid_isSet = false;
    m_room_sid_isValid = false;

    m_room_status_isSet = false;
    m_room_status_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_total_participant_duration_sec_isSet = false;
    m_total_participant_duration_sec_isValid = false;

    m_total_recording_duration_sec_isSet = false;
    m_total_recording_duration_sec_isValid = false;

    m_unique_participant_identities_isSet = false;
    m_unique_participant_identities_isValid = false;

    m_unique_participants_isSet = false;
    m_unique_participants_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInsights_v1_video_room_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_video_room_summary::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_codecs_isValid = ::OpenAPI::fromJsonValue(m_codecs, json[QString("codecs")]);
    m_codecs_isSet = !json[QString("codecs")].isNull() && m_codecs_isValid;

    m_concurrent_participants_isValid = ::OpenAPI::fromJsonValue(m_concurrent_participants, json[QString("concurrent_participants")]);
    m_concurrent_participants_isSet = !json[QString("concurrent_participants")].isNull() && m_concurrent_participants_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("create_time")]);
    m_create_time_isSet = !json[QString("create_time")].isNull() && m_create_time_isValid;

    m_created_method_isValid = ::OpenAPI::fromJsonValue(m_created_method, json[QString("created_method")]);
    m_created_method_isSet = !json[QString("created_method")].isNull() && m_created_method_isValid;

    m_duration_sec_isValid = ::OpenAPI::fromJsonValue(m_duration_sec, json[QString("duration_sec")]);
    m_duration_sec_isSet = !json[QString("duration_sec")].isNull() && m_duration_sec_isValid;

    m_edge_location_isValid = ::OpenAPI::fromJsonValue(m_edge_location, json[QString("edge_location")]);
    m_edge_location_isSet = !json[QString("edge_location")].isNull() && m_edge_location_isValid;

    m_end_reason_isValid = ::OpenAPI::fromJsonValue(m_end_reason, json[QString("end_reason")]);
    m_end_reason_isSet = !json[QString("end_reason")].isNull() && m_end_reason_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_max_concurrent_participants_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_participants, json[QString("max_concurrent_participants")]);
    m_max_concurrent_participants_isSet = !json[QString("max_concurrent_participants")].isNull() && m_max_concurrent_participants_isValid;

    m_max_participants_isValid = ::OpenAPI::fromJsonValue(m_max_participants, json[QString("max_participants")]);
    m_max_participants_isSet = !json[QString("max_participants")].isNull() && m_max_participants_isValid;

    m_media_region_isValid = ::OpenAPI::fromJsonValue(m_media_region, json[QString("media_region")]);
    m_media_region_isSet = !json[QString("media_region")].isNull() && m_media_region_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processing_state")]);
    m_processing_state_isSet = !json[QString("processing_state")].isNull() && m_processing_state_isValid;

    m_recording_enabled_isValid = ::OpenAPI::fromJsonValue(m_recording_enabled, json[QString("recording_enabled")]);
    m_recording_enabled_isSet = !json[QString("recording_enabled")].isNull() && m_recording_enabled_isValid;

    m_room_name_isValid = ::OpenAPI::fromJsonValue(m_room_name, json[QString("room_name")]);
    m_room_name_isSet = !json[QString("room_name")].isNull() && m_room_name_isValid;

    m_room_sid_isValid = ::OpenAPI::fromJsonValue(m_room_sid, json[QString("room_sid")]);
    m_room_sid_isSet = !json[QString("room_sid")].isNull() && m_room_sid_isValid;

    m_room_status_isValid = ::OpenAPI::fromJsonValue(m_room_status, json[QString("room_status")]);
    m_room_status_isSet = !json[QString("room_status")].isNull() && m_room_status_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("room_type")]);
    m_room_type_isSet = !json[QString("room_type")].isNull() && m_room_type_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_total_participant_duration_sec_isValid = ::OpenAPI::fromJsonValue(m_total_participant_duration_sec, json[QString("total_participant_duration_sec")]);
    m_total_participant_duration_sec_isSet = !json[QString("total_participant_duration_sec")].isNull() && m_total_participant_duration_sec_isValid;

    m_total_recording_duration_sec_isValid = ::OpenAPI::fromJsonValue(m_total_recording_duration_sec, json[QString("total_recording_duration_sec")]);
    m_total_recording_duration_sec_isSet = !json[QString("total_recording_duration_sec")].isNull() && m_total_recording_duration_sec_isValid;

    m_unique_participant_identities_isValid = ::OpenAPI::fromJsonValue(m_unique_participant_identities, json[QString("unique_participant_identities")]);
    m_unique_participant_identities_isSet = !json[QString("unique_participant_identities")].isNull() && m_unique_participant_identities_isValid;

    m_unique_participants_isValid = ::OpenAPI::fromJsonValue(m_unique_participants, json[QString("unique_participants")]);
    m_unique_participants_isSet = !json[QString("unique_participants")].isNull() && m_unique_participants_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInsights_v1_video_room_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_video_room_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_codecs.size() > 0) {
        obj.insert(QString("codecs"), ::OpenAPI::toJsonValue(m_codecs));
    }
    if (m_concurrent_participants_isSet) {
        obj.insert(QString("concurrent_participants"), ::OpenAPI::toJsonValue(m_concurrent_participants));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("create_time"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_created_method.isSet()) {
        obj.insert(QString("created_method"), ::OpenAPI::toJsonValue(m_created_method));
    }
    if (m_duration_sec_isSet) {
        obj.insert(QString("duration_sec"), ::OpenAPI::toJsonValue(m_duration_sec));
    }
    if (m_edge_location.isSet()) {
        obj.insert(QString("edge_location"), ::OpenAPI::toJsonValue(m_edge_location));
    }
    if (m_end_reason.isSet()) {
        obj.insert(QString("end_reason"), ::OpenAPI::toJsonValue(m_end_reason));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_max_concurrent_participants_isSet) {
        obj.insert(QString("max_concurrent_participants"), ::OpenAPI::toJsonValue(m_max_concurrent_participants));
    }
    if (m_max_participants_isSet) {
        obj.insert(QString("max_participants"), ::OpenAPI::toJsonValue(m_max_participants));
    }
    if (m_media_region.isSet()) {
        obj.insert(QString("media_region"), ::OpenAPI::toJsonValue(m_media_region));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processing_state"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_recording_enabled_isSet) {
        obj.insert(QString("recording_enabled"), ::OpenAPI::toJsonValue(m_recording_enabled));
    }
    if (m_room_name_isSet) {
        obj.insert(QString("room_name"), ::OpenAPI::toJsonValue(m_room_name));
    }
    if (m_room_sid_isSet) {
        obj.insert(QString("room_sid"), ::OpenAPI::toJsonValue(m_room_sid));
    }
    if (m_room_status.isSet()) {
        obj.insert(QString("room_status"), ::OpenAPI::toJsonValue(m_room_status));
    }
    if (m_room_type.isSet()) {
        obj.insert(QString("room_type"), ::OpenAPI::toJsonValue(m_room_type));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_total_participant_duration_sec_isSet) {
        obj.insert(QString("total_participant_duration_sec"), ::OpenAPI::toJsonValue(m_total_participant_duration_sec));
    }
    if (m_total_recording_duration_sec_isSet) {
        obj.insert(QString("total_recording_duration_sec"), ::OpenAPI::toJsonValue(m_total_recording_duration_sec));
    }
    if (m_unique_participant_identities_isSet) {
        obj.insert(QString("unique_participant_identities"), ::OpenAPI::toJsonValue(m_unique_participant_identities));
    }
    if (m_unique_participants_isSet) {
        obj.insert(QString("unique_participants"), ::OpenAPI::toJsonValue(m_unique_participants));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInsights_v1_video_room_summary::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_video_room_summary::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_video_room_summary::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<OAIVideo_room_summary_enum_codec> OAIInsights_v1_video_room_summary::getCodecs() const {
    return m_codecs;
}
void OAIInsights_v1_video_room_summary::setCodecs(const QList<OAIVideo_room_summary_enum_codec> &codecs) {
    m_codecs = codecs;
    m_codecs_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_codecs_Set() const{
    return m_codecs_isSet;
}

bool OAIInsights_v1_video_room_summary::is_codecs_Valid() const{
    return m_codecs_isValid;
}

qint32 OAIInsights_v1_video_room_summary::getConcurrentParticipants() const {
    return m_concurrent_participants;
}
void OAIInsights_v1_video_room_summary::setConcurrentParticipants(const qint32 &concurrent_participants) {
    m_concurrent_participants = concurrent_participants;
    m_concurrent_participants_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_concurrent_participants_Set() const{
    return m_concurrent_participants_isSet;
}

bool OAIInsights_v1_video_room_summary::is_concurrent_participants_Valid() const{
    return m_concurrent_participants_isValid;
}

QDateTime OAIInsights_v1_video_room_summary::getCreateTime() const {
    return m_create_time;
}
void OAIInsights_v1_video_room_summary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInsights_v1_video_room_summary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIVideo_room_summary_enum_created_method OAIInsights_v1_video_room_summary::getCreatedMethod() const {
    return m_created_method;
}
void OAIInsights_v1_video_room_summary::setCreatedMethod(const OAIVideo_room_summary_enum_created_method &created_method) {
    m_created_method = created_method;
    m_created_method_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_created_method_Set() const{
    return m_created_method_isSet;
}

bool OAIInsights_v1_video_room_summary::is_created_method_Valid() const{
    return m_created_method_isValid;
}

qint64 OAIInsights_v1_video_room_summary::getDurationSec() const {
    return m_duration_sec;
}
void OAIInsights_v1_video_room_summary::setDurationSec(const qint64 &duration_sec) {
    m_duration_sec = duration_sec;
    m_duration_sec_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_duration_sec_Set() const{
    return m_duration_sec_isSet;
}

bool OAIInsights_v1_video_room_summary::is_duration_sec_Valid() const{
    return m_duration_sec_isValid;
}

OAIVideo_room_summary_enum_edge_location OAIInsights_v1_video_room_summary::getEdgeLocation() const {
    return m_edge_location;
}
void OAIInsights_v1_video_room_summary::setEdgeLocation(const OAIVideo_room_summary_enum_edge_location &edge_location) {
    m_edge_location = edge_location;
    m_edge_location_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_edge_location_Set() const{
    return m_edge_location_isSet;
}

bool OAIInsights_v1_video_room_summary::is_edge_location_Valid() const{
    return m_edge_location_isValid;
}

OAIVideo_room_summary_enum_end_reason OAIInsights_v1_video_room_summary::getEndReason() const {
    return m_end_reason;
}
void OAIInsights_v1_video_room_summary::setEndReason(const OAIVideo_room_summary_enum_end_reason &end_reason) {
    m_end_reason = end_reason;
    m_end_reason_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_end_reason_Set() const{
    return m_end_reason_isSet;
}

bool OAIInsights_v1_video_room_summary::is_end_reason_Valid() const{
    return m_end_reason_isValid;
}

QDateTime OAIInsights_v1_video_room_summary::getEndTime() const {
    return m_end_time;
}
void OAIInsights_v1_video_room_summary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIInsights_v1_video_room_summary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIObject OAIInsights_v1_video_room_summary::getLinks() const {
    return m_links;
}
void OAIInsights_v1_video_room_summary::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_links_Set() const{
    return m_links_isSet;
}

bool OAIInsights_v1_video_room_summary::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIInsights_v1_video_room_summary::getMaxConcurrentParticipants() const {
    return m_max_concurrent_participants;
}
void OAIInsights_v1_video_room_summary::setMaxConcurrentParticipants(const qint32 &max_concurrent_participants) {
    m_max_concurrent_participants = max_concurrent_participants;
    m_max_concurrent_participants_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_max_concurrent_participants_Set() const{
    return m_max_concurrent_participants_isSet;
}

bool OAIInsights_v1_video_room_summary::is_max_concurrent_participants_Valid() const{
    return m_max_concurrent_participants_isValid;
}

qint32 OAIInsights_v1_video_room_summary::getMaxParticipants() const {
    return m_max_participants;
}
void OAIInsights_v1_video_room_summary::setMaxParticipants(const qint32 &max_participants) {
    m_max_participants = max_participants;
    m_max_participants_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_max_participants_Set() const{
    return m_max_participants_isSet;
}

bool OAIInsights_v1_video_room_summary::is_max_participants_Valid() const{
    return m_max_participants_isValid;
}

OAIVideo_room_summary_enum_twilio_realm OAIInsights_v1_video_room_summary::getMediaRegion() const {
    return m_media_region;
}
void OAIInsights_v1_video_room_summary::setMediaRegion(const OAIVideo_room_summary_enum_twilio_realm &media_region) {
    m_media_region = media_region;
    m_media_region_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_media_region_Set() const{
    return m_media_region_isSet;
}

bool OAIInsights_v1_video_room_summary::is_media_region_Valid() const{
    return m_media_region_isValid;
}

OAIVideo_room_summary_enum_processing_state OAIInsights_v1_video_room_summary::getProcessingState() const {
    return m_processing_state;
}
void OAIInsights_v1_video_room_summary::setProcessingState(const OAIVideo_room_summary_enum_processing_state &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIInsights_v1_video_room_summary::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

bool OAIInsights_v1_video_room_summary::isRecordingEnabled() const {
    return m_recording_enabled;
}
void OAIInsights_v1_video_room_summary::setRecordingEnabled(const bool &recording_enabled) {
    m_recording_enabled = recording_enabled;
    m_recording_enabled_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_recording_enabled_Set() const{
    return m_recording_enabled_isSet;
}

bool OAIInsights_v1_video_room_summary::is_recording_enabled_Valid() const{
    return m_recording_enabled_isValid;
}

QString OAIInsights_v1_video_room_summary::getRoomName() const {
    return m_room_name;
}
void OAIInsights_v1_video_room_summary::setRoomName(const QString &room_name) {
    m_room_name = room_name;
    m_room_name_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_room_name_Set() const{
    return m_room_name_isSet;
}

bool OAIInsights_v1_video_room_summary::is_room_name_Valid() const{
    return m_room_name_isValid;
}

QString OAIInsights_v1_video_room_summary::getRoomSid() const {
    return m_room_sid;
}
void OAIInsights_v1_video_room_summary::setRoomSid(const QString &room_sid) {
    m_room_sid = room_sid;
    m_room_sid_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_room_sid_Set() const{
    return m_room_sid_isSet;
}

bool OAIInsights_v1_video_room_summary::is_room_sid_Valid() const{
    return m_room_sid_isValid;
}

OAIVideo_room_summary_enum_room_status OAIInsights_v1_video_room_summary::getRoomStatus() const {
    return m_room_status;
}
void OAIInsights_v1_video_room_summary::setRoomStatus(const OAIVideo_room_summary_enum_room_status &room_status) {
    m_room_status = room_status;
    m_room_status_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_room_status_Set() const{
    return m_room_status_isSet;
}

bool OAIInsights_v1_video_room_summary::is_room_status_Valid() const{
    return m_room_status_isValid;
}

OAIVideo_room_summary_enum_room_type OAIInsights_v1_video_room_summary::getRoomType() const {
    return m_room_type;
}
void OAIInsights_v1_video_room_summary::setRoomType(const OAIVideo_room_summary_enum_room_type &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIInsights_v1_video_room_summary::is_room_type_Valid() const{
    return m_room_type_isValid;
}

QString OAIInsights_v1_video_room_summary::getStatusCallback() const {
    return m_status_callback;
}
void OAIInsights_v1_video_room_summary::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIInsights_v1_video_room_summary::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIInsights_v1_video_room_summary::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIInsights_v1_video_room_summary::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIInsights_v1_video_room_summary::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

qint64 OAIInsights_v1_video_room_summary::getTotalParticipantDurationSec() const {
    return m_total_participant_duration_sec;
}
void OAIInsights_v1_video_room_summary::setTotalParticipantDurationSec(const qint64 &total_participant_duration_sec) {
    m_total_participant_duration_sec = total_participant_duration_sec;
    m_total_participant_duration_sec_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_total_participant_duration_sec_Set() const{
    return m_total_participant_duration_sec_isSet;
}

bool OAIInsights_v1_video_room_summary::is_total_participant_duration_sec_Valid() const{
    return m_total_participant_duration_sec_isValid;
}

qint64 OAIInsights_v1_video_room_summary::getTotalRecordingDurationSec() const {
    return m_total_recording_duration_sec;
}
void OAIInsights_v1_video_room_summary::setTotalRecordingDurationSec(const qint64 &total_recording_duration_sec) {
    m_total_recording_duration_sec = total_recording_duration_sec;
    m_total_recording_duration_sec_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_total_recording_duration_sec_Set() const{
    return m_total_recording_duration_sec_isSet;
}

bool OAIInsights_v1_video_room_summary::is_total_recording_duration_sec_Valid() const{
    return m_total_recording_duration_sec_isValid;
}

qint32 OAIInsights_v1_video_room_summary::getUniqueParticipantIdentities() const {
    return m_unique_participant_identities;
}
void OAIInsights_v1_video_room_summary::setUniqueParticipantIdentities(const qint32 &unique_participant_identities) {
    m_unique_participant_identities = unique_participant_identities;
    m_unique_participant_identities_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_unique_participant_identities_Set() const{
    return m_unique_participant_identities_isSet;
}

bool OAIInsights_v1_video_room_summary::is_unique_participant_identities_Valid() const{
    return m_unique_participant_identities_isValid;
}

qint32 OAIInsights_v1_video_room_summary::getUniqueParticipants() const {
    return m_unique_participants;
}
void OAIInsights_v1_video_room_summary::setUniqueParticipants(const qint32 &unique_participants) {
    m_unique_participants = unique_participants;
    m_unique_participants_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_unique_participants_Set() const{
    return m_unique_participants_isSet;
}

bool OAIInsights_v1_video_room_summary::is_unique_participants_Valid() const{
    return m_unique_participants_isValid;
}

QString OAIInsights_v1_video_room_summary::getUrl() const {
    return m_url;
}
void OAIInsights_v1_video_room_summary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInsights_v1_video_room_summary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInsights_v1_video_room_summary::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInsights_v1_video_room_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codecs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_participant_duration_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_recording_duration_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_participant_identities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_video_room_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
