/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights_v1_call_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights_v1_call_summary::OAIInsights_v1_call_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights_v1_call_summary::OAIInsights_v1_call_summary() {
    this->initializeModel();
}

OAIInsights_v1_call_summary::~OAIInsights_v1_call_summary() {}

void OAIInsights_v1_call_summary::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_answered_by_isSet = false;
    m_answered_by_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_call_sid_isSet = false;
    m_call_sid_isValid = false;

    m_call_state_isSet = false;
    m_call_state_isValid = false;

    m_call_type_isSet = false;
    m_call_type_isValid = false;

    m_carrier_edge_isSet = false;
    m_carrier_edge_isValid = false;

    m_client_edge_isSet = false;
    m_client_edge_isValid = false;

    m_connect_duration_isSet = false;
    m_connect_duration_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_processing_state_isSet = false;
    m_processing_state_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sdk_edge_isSet = false;
    m_sdk_edge_isValid = false;

    m_sip_edge_isSet = false;
    m_sip_edge_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_trust_isSet = false;
    m_trust_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInsights_v1_call_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights_v1_call_summary::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_answered_by_isValid = ::OpenAPI::fromJsonValue(m_answered_by, json[QString("answered_by")]);
    m_answered_by_isSet = !json[QString("answered_by")].isNull() && m_answered_by_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_call_sid_isValid = ::OpenAPI::fromJsonValue(m_call_sid, json[QString("call_sid")]);
    m_call_sid_isSet = !json[QString("call_sid")].isNull() && m_call_sid_isValid;

    m_call_state_isValid = ::OpenAPI::fromJsonValue(m_call_state, json[QString("call_state")]);
    m_call_state_isSet = !json[QString("call_state")].isNull() && m_call_state_isValid;

    m_call_type_isValid = ::OpenAPI::fromJsonValue(m_call_type, json[QString("call_type")]);
    m_call_type_isSet = !json[QString("call_type")].isNull() && m_call_type_isValid;

    m_carrier_edge_isValid = ::OpenAPI::fromJsonValue(m_carrier_edge, json[QString("carrier_edge")]);
    m_carrier_edge_isSet = !json[QString("carrier_edge")].isNull() && m_carrier_edge_isValid;

    m_client_edge_isValid = ::OpenAPI::fromJsonValue(m_client_edge, json[QString("client_edge")]);
    m_client_edge_isSet = !json[QString("client_edge")].isNull() && m_client_edge_isValid;

    m_connect_duration_isValid = ::OpenAPI::fromJsonValue(m_connect_duration, json[QString("connect_duration")]);
    m_connect_duration_isSet = !json[QString("connect_duration")].isNull() && m_connect_duration_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_processing_state_isValid = ::OpenAPI::fromJsonValue(m_processing_state, json[QString("processing_state")]);
    m_processing_state_isSet = !json[QString("processing_state")].isNull() && m_processing_state_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sdk_edge_isValid = ::OpenAPI::fromJsonValue(m_sdk_edge, json[QString("sdk_edge")]);
    m_sdk_edge_isSet = !json[QString("sdk_edge")].isNull() && m_sdk_edge_isValid;

    m_sip_edge_isValid = ::OpenAPI::fromJsonValue(m_sip_edge, json[QString("sip_edge")]);
    m_sip_edge_isSet = !json[QString("sip_edge")].isNull() && m_sip_edge_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_trust_isValid = ::OpenAPI::fromJsonValue(m_trust, json[QString("trust")]);
    m_trust_isSet = !json[QString("trust")].isNull() && m_trust_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInsights_v1_call_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights_v1_call_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_annotation_isSet) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_answered_by.isSet()) {
        obj.insert(QString("answered_by"), ::OpenAPI::toJsonValue(m_answered_by));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_call_sid_isSet) {
        obj.insert(QString("call_sid"), ::OpenAPI::toJsonValue(m_call_sid));
    }
    if (m_call_state.isSet()) {
        obj.insert(QString("call_state"), ::OpenAPI::toJsonValue(m_call_state));
    }
    if (m_call_type.isSet()) {
        obj.insert(QString("call_type"), ::OpenAPI::toJsonValue(m_call_type));
    }
    if (m_carrier_edge_isSet) {
        obj.insert(QString("carrier_edge"), ::OpenAPI::toJsonValue(m_carrier_edge));
    }
    if (m_client_edge_isSet) {
        obj.insert(QString("client_edge"), ::OpenAPI::toJsonValue(m_client_edge));
    }
    if (m_connect_duration_isSet) {
        obj.insert(QString("connect_duration"), ::OpenAPI::toJsonValue(m_connect_duration));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_processing_state.isSet()) {
        obj.insert(QString("processing_state"), ::OpenAPI::toJsonValue(m_processing_state));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sdk_edge_isSet) {
        obj.insert(QString("sdk_edge"), ::OpenAPI::toJsonValue(m_sdk_edge));
    }
    if (m_sip_edge_isSet) {
        obj.insert(QString("sip_edge"), ::OpenAPI::toJsonValue(m_sip_edge));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_trust_isSet) {
        obj.insert(QString("trust"), ::OpenAPI::toJsonValue(m_trust));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIInsights_v1_call_summary::getAccountSid() const {
    return m_account_sid;
}
void OAIInsights_v1_call_summary::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIInsights_v1_call_summary::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIInsights_v1_call_summary::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getAnnotation() const {
    return m_annotation;
}
void OAIInsights_v1_call_summary::setAnnotation(const QJsonValue &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAIInsights_v1_call_summary::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAIInsights_v1_call_summary::is_annotation_Valid() const{
    return m_annotation_isValid;
}

OAISummary_enum_answered_by OAIInsights_v1_call_summary::getAnsweredBy() const {
    return m_answered_by;
}
void OAIInsights_v1_call_summary::setAnsweredBy(const OAISummary_enum_answered_by &answered_by) {
    m_answered_by = answered_by;
    m_answered_by_isSet = true;
}

bool OAIInsights_v1_call_summary::is_answered_by_Set() const{
    return m_answered_by_isSet;
}

bool OAIInsights_v1_call_summary::is_answered_by_Valid() const{
    return m_answered_by_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getAttributes() const {
    return m_attributes;
}
void OAIInsights_v1_call_summary::setAttributes(const QJsonValue &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIInsights_v1_call_summary::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIInsights_v1_call_summary::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIInsights_v1_call_summary::getCallSid() const {
    return m_call_sid;
}
void OAIInsights_v1_call_summary::setCallSid(const QString &call_sid) {
    m_call_sid = call_sid;
    m_call_sid_isSet = true;
}

bool OAIInsights_v1_call_summary::is_call_sid_Set() const{
    return m_call_sid_isSet;
}

bool OAIInsights_v1_call_summary::is_call_sid_Valid() const{
    return m_call_sid_isValid;
}

OAISummary_enum_call_state OAIInsights_v1_call_summary::getCallState() const {
    return m_call_state;
}
void OAIInsights_v1_call_summary::setCallState(const OAISummary_enum_call_state &call_state) {
    m_call_state = call_state;
    m_call_state_isSet = true;
}

bool OAIInsights_v1_call_summary::is_call_state_Set() const{
    return m_call_state_isSet;
}

bool OAIInsights_v1_call_summary::is_call_state_Valid() const{
    return m_call_state_isValid;
}

OAISummary_enum_call_type OAIInsights_v1_call_summary::getCallType() const {
    return m_call_type;
}
void OAIInsights_v1_call_summary::setCallType(const OAISummary_enum_call_type &call_type) {
    m_call_type = call_type;
    m_call_type_isSet = true;
}

bool OAIInsights_v1_call_summary::is_call_type_Set() const{
    return m_call_type_isSet;
}

bool OAIInsights_v1_call_summary::is_call_type_Valid() const{
    return m_call_type_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getCarrierEdge() const {
    return m_carrier_edge;
}
void OAIInsights_v1_call_summary::setCarrierEdge(const QJsonValue &carrier_edge) {
    m_carrier_edge = carrier_edge;
    m_carrier_edge_isSet = true;
}

bool OAIInsights_v1_call_summary::is_carrier_edge_Set() const{
    return m_carrier_edge_isSet;
}

bool OAIInsights_v1_call_summary::is_carrier_edge_Valid() const{
    return m_carrier_edge_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getClientEdge() const {
    return m_client_edge;
}
void OAIInsights_v1_call_summary::setClientEdge(const QJsonValue &client_edge) {
    m_client_edge = client_edge;
    m_client_edge_isSet = true;
}

bool OAIInsights_v1_call_summary::is_client_edge_Set() const{
    return m_client_edge_isSet;
}

bool OAIInsights_v1_call_summary::is_client_edge_Valid() const{
    return m_client_edge_isValid;
}

qint32 OAIInsights_v1_call_summary::getConnectDuration() const {
    return m_connect_duration;
}
void OAIInsights_v1_call_summary::setConnectDuration(const qint32 &connect_duration) {
    m_connect_duration = connect_duration;
    m_connect_duration_isSet = true;
}

bool OAIInsights_v1_call_summary::is_connect_duration_Set() const{
    return m_connect_duration_isSet;
}

bool OAIInsights_v1_call_summary::is_connect_duration_Valid() const{
    return m_connect_duration_isValid;
}

QDateTime OAIInsights_v1_call_summary::getCreatedTime() const {
    return m_created_time;
}
void OAIInsights_v1_call_summary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIInsights_v1_call_summary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIInsights_v1_call_summary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

qint32 OAIInsights_v1_call_summary::getDuration() const {
    return m_duration;
}
void OAIInsights_v1_call_summary::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIInsights_v1_call_summary::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIInsights_v1_call_summary::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAIInsights_v1_call_summary::getEndTime() const {
    return m_end_time;
}
void OAIInsights_v1_call_summary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIInsights_v1_call_summary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIInsights_v1_call_summary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getFrom() const {
    return m_from;
}
void OAIInsights_v1_call_summary::setFrom(const QJsonValue &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIInsights_v1_call_summary::is_from_Set() const{
    return m_from_isSet;
}

bool OAIInsights_v1_call_summary::is_from_Valid() const{
    return m_from_isValid;
}

OAISummary_enum_processing_state OAIInsights_v1_call_summary::getProcessingState() const {
    return m_processing_state;
}
void OAIInsights_v1_call_summary::setProcessingState(const OAISummary_enum_processing_state &processing_state) {
    m_processing_state = processing_state;
    m_processing_state_isSet = true;
}

bool OAIInsights_v1_call_summary::is_processing_state_Set() const{
    return m_processing_state_isSet;
}

bool OAIInsights_v1_call_summary::is_processing_state_Valid() const{
    return m_processing_state_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getProperties() const {
    return m_properties;
}
void OAIInsights_v1_call_summary::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIInsights_v1_call_summary::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIInsights_v1_call_summary::is_properties_Valid() const{
    return m_properties_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getSdkEdge() const {
    return m_sdk_edge;
}
void OAIInsights_v1_call_summary::setSdkEdge(const QJsonValue &sdk_edge) {
    m_sdk_edge = sdk_edge;
    m_sdk_edge_isSet = true;
}

bool OAIInsights_v1_call_summary::is_sdk_edge_Set() const{
    return m_sdk_edge_isSet;
}

bool OAIInsights_v1_call_summary::is_sdk_edge_Valid() const{
    return m_sdk_edge_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getSipEdge() const {
    return m_sip_edge;
}
void OAIInsights_v1_call_summary::setSipEdge(const QJsonValue &sip_edge) {
    m_sip_edge = sip_edge;
    m_sip_edge_isSet = true;
}

bool OAIInsights_v1_call_summary::is_sip_edge_Set() const{
    return m_sip_edge_isSet;
}

bool OAIInsights_v1_call_summary::is_sip_edge_Valid() const{
    return m_sip_edge_isValid;
}

QDateTime OAIInsights_v1_call_summary::getStartTime() const {
    return m_start_time;
}
void OAIInsights_v1_call_summary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIInsights_v1_call_summary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIInsights_v1_call_summary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<QString> OAIInsights_v1_call_summary::getTags() const {
    return m_tags;
}
void OAIInsights_v1_call_summary::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIInsights_v1_call_summary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIInsights_v1_call_summary::is_tags_Valid() const{
    return m_tags_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getTo() const {
    return m_to;
}
void OAIInsights_v1_call_summary::setTo(const QJsonValue &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIInsights_v1_call_summary::is_to_Set() const{
    return m_to_isSet;
}

bool OAIInsights_v1_call_summary::is_to_Valid() const{
    return m_to_isValid;
}

QJsonValue OAIInsights_v1_call_summary::getTrust() const {
    return m_trust;
}
void OAIInsights_v1_call_summary::setTrust(const QJsonValue &trust) {
    m_trust = trust;
    m_trust_isSet = true;
}

bool OAIInsights_v1_call_summary::is_trust_Set() const{
    return m_trust_isSet;
}

bool OAIInsights_v1_call_summary::is_trust_Valid() const{
    return m_trust_isValid;
}

QString OAIInsights_v1_call_summary::getUrl() const {
    return m_url;
}
void OAIInsights_v1_call_summary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInsights_v1_call_summary::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInsights_v1_call_summary::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInsights_v1_call_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answered_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connect_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sip_edge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights_v1_call_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
