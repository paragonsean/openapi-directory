/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference_participant_enum_jitter_buffer_size.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference_participant_enum_jitter_buffer_size::OAIConference_participant_enum_jitter_buffer_size(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference_participant_enum_jitter_buffer_size::OAIConference_participant_enum_jitter_buffer_size() {
    this->initializeModel();
}

OAIConference_participant_enum_jitter_buffer_size::~OAIConference_participant_enum_jitter_buffer_size() {}

void OAIConference_participant_enum_jitter_buffer_size::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConference_participant_enum_jitter_buffer_size::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConference_participant_enum_jitter_buffer_size::fromJson(QString jsonString) {
    
    if ( jsonString.compare("large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_participant_enum_jitter_buffer_size::LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("small", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_participant_enum_jitter_buffer_size::SMALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("medium", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_participant_enum_jitter_buffer_size::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("false", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_participant_enum_jitter_buffer_size::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConference_participant_enum_jitter_buffer_size::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConference_participant_enum_jitter_buffer_size::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConference_participant_enum_jitter_buffer_size::LARGE:
            val = "large";
            break;
        case eOAIConference_participant_enum_jitter_buffer_size::SMALL:
            val = "small";
            break;
        case eOAIConference_participant_enum_jitter_buffer_size::MEDIUM:
            val = "medium";
            break;
        case eOAIConference_participant_enum_jitter_buffer_size::FALSE:
            val = "false";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConference_participant_enum_jitter_buffer_size::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConference_participant_enum_jitter_buffer_size::eOAIConference_participant_enum_jitter_buffer_size OAIConference_participant_enum_jitter_buffer_size::getValue() const {
    return m_value;
}

void OAIConference_participant_enum_jitter_buffer_size::setValue(const OAIConference_participant_enum_jitter_buffer_size::eOAIConference_participant_enum_jitter_buffer_size& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConference_participant_enum_jitter_buffer_size::isSet() const {
    
    return m_value_isSet;
}

bool OAIConference_participant_enum_jitter_buffer_size::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
