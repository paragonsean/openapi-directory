/**
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference_enum_region.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference_enum_region::OAIConference_enum_region(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference_enum_region::OAIConference_enum_region() {
    this->initializeModel();
}

OAIConference_enum_region::~OAIConference_enum_region() {}

void OAIConference_enum_region::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConference_enum_region::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConference_enum_region::fromJson(QString jsonString) {
    
    if ( jsonString.compare("us1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::US1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("au1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::AU1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("br1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::BR1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ie1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::IE1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jp1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::JP1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sg1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::SG1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_region::DE1;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConference_enum_region::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConference_enum_region::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConference_enum_region::US1:
            val = "us1";
            break;
        case eOAIConference_enum_region::AU1:
            val = "au1";
            break;
        case eOAIConference_enum_region::BR1:
            val = "br1";
            break;
        case eOAIConference_enum_region::IE1:
            val = "ie1";
            break;
        case eOAIConference_enum_region::JP1:
            val = "jp1";
            break;
        case eOAIConference_enum_region::SG1:
            val = "sg1";
            break;
        case eOAIConference_enum_region::DE1:
            val = "de1";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConference_enum_region::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConference_enum_region::eOAIConference_enum_region OAIConference_enum_region::getValue() const {
    return m_value;
}

void OAIConference_enum_region::setValue(const OAIConference_enum_region::eOAIConference_enum_region& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConference_enum_region::isSet() const {
    
    return m_value_isSet;
}

bool OAIConference_enum_region::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
