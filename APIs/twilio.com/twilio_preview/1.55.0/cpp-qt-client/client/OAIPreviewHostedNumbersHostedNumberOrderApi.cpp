/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviewHostedNumbersHostedNumberOrderApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPreviewHostedNumbersHostedNumberOrderApi::OAIPreviewHostedNumbersHostedNumberOrderApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPreviewHostedNumbersHostedNumberOrderApi::~OAIPreviewHostedNumbersHostedNumberOrderApi() {
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createHostedNumbersHostedNumberOrder", serverConf);
    _serverIndices.insert("createHostedNumbersHostedNumberOrder", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteHostedNumbersHostedNumberOrder", serverConf);
    _serverIndices.insert("deleteHostedNumbersHostedNumberOrder", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchHostedNumbersHostedNumberOrder", serverConf);
    _serverIndices.insert("fetchHostedNumbersHostedNumberOrder", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listHostedNumbersHostedNumberOrder", serverConf);
    _serverIndices.insert("listHostedNumbersHostedNumberOrder", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://preview.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateHostedNumbersHostedNumberOrder", serverConf);
    _serverIndices.insert("updateHostedNumbersHostedNumberOrder", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPreviewHostedNumbersHostedNumberOrderApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPreviewHostedNumbersHostedNumberOrderApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPreviewHostedNumbersHostedNumberOrderApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPreviewHostedNumbersHostedNumberOrderApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPreviewHostedNumbersHostedNumberOrderApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPreviewHostedNumbersHostedNumberOrderApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPreviewHostedNumbersHostedNumberOrderApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPreviewHostedNumbersHostedNumberOrderApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPreviewHostedNumbersHostedNumberOrderApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::createHostedNumbersHostedNumberOrder(const QString &phone_number, const bool &sms_capability, const ::OpenAPI::OptionalParam<QString> &account_sid, const ::OpenAPI::OptionalParam<QString> &address_sid, const ::OpenAPI::OptionalParam<QList<QString>> &cc_emails, const ::OpenAPI::OptionalParam<QString> &email, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<QString> &sms_application_sid, const ::OpenAPI::OptionalParam<QString> &sms_fallback_method, const ::OpenAPI::OptionalParam<QString> &sms_fallback_url, const ::OpenAPI::OptionalParam<QString> &sms_method, const ::OpenAPI::OptionalParam<QString> &sms_url, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<QString> &status_callback_url, const ::OpenAPI::OptionalParam<QString> &unique_name, const ::OpenAPI::OptionalParam<QString> &verification_document_sid, const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type> &verification_type) {
    QString fullPath = QString(_serverConfigs["createHostedNumbersHostedNumberOrder"][_serverIndices.value("createHostedNumbersHostedNumberOrder")].URL()+"/HostedNumbers/HostedNumberOrders");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (account_sid.hasValue())
    {
        input.add_var("AccountSid", ::OpenAPI::toStringValue(account_sid.value()));
    }
    if (address_sid.hasValue())
    {
        input.add_var("AddressSid", ::OpenAPI::toStringValue(address_sid.value()));
    }
    if (cc_emails.hasValue())
    {
        input.add_var("CcEmails", ::OpenAPI::toStringValue(cc_emails.value()));
    }
    if (email.hasValue())
    {
        input.add_var("Email", ::OpenAPI::toStringValue(email.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    
    {
        input.add_var("PhoneNumber", ::OpenAPI::toStringValue(phone_number));
    }
    if (sms_application_sid.hasValue())
    {
        input.add_var("SmsApplicationSid", ::OpenAPI::toStringValue(sms_application_sid.value()));
    }
    
    {
        input.add_var("SmsCapability", ::OpenAPI::toStringValue(sms_capability));
    }
    if (sms_fallback_method.hasValue())
    {
        input.add_var("SmsFallbackMethod", ::OpenAPI::toStringValue(sms_fallback_method.value()));
    }
    if (sms_fallback_url.hasValue())
    {
        input.add_var("SmsFallbackUrl", ::OpenAPI::toStringValue(sms_fallback_url.value()));
    }
    if (sms_method.hasValue())
    {
        input.add_var("SmsMethod", ::OpenAPI::toStringValue(sms_method.value()));
    }
    if (sms_url.hasValue())
    {
        input.add_var("SmsUrl", ::OpenAPI::toStringValue(sms_url.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (status_callback_url.hasValue())
    {
        input.add_var("StatusCallbackUrl", ::OpenAPI::toStringValue(status_callback_url.value()));
    }
    if (unique_name.hasValue())
    {
        input.add_var("UniqueName", ::OpenAPI::toStringValue(unique_name.value()));
    }
    if (verification_document_sid.hasValue())
    {
        input.add_var("VerificationDocumentSid", ::OpenAPI::toStringValue(verification_document_sid.value()));
    }
    if (verification_type.hasValue())
    {
        input.add_var("VerificationType", ::OpenAPI::toStringValue(verification_type.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPreviewHostedNumbersHostedNumberOrderApi::createHostedNumbersHostedNumberOrderCallback);
    connect(this, &OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::createHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPreview_hosted_numbers_hosted_number_order output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createHostedNumbersHostedNumberOrderSignal(output);
        Q_EMIT createHostedNumbersHostedNumberOrderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createHostedNumbersHostedNumberOrderSignalE(output, error_type, error_str);
        Q_EMIT createHostedNumbersHostedNumberOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createHostedNumbersHostedNumberOrderSignalError(output, error_type, error_str);
        Q_EMIT createHostedNumbersHostedNumberOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::deleteHostedNumbersHostedNumberOrder(const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteHostedNumbersHostedNumberOrder"][_serverIndices.value("deleteHostedNumbersHostedNumberOrder")].URL()+"/HostedNumbers/HostedNumberOrders/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPreviewHostedNumbersHostedNumberOrderApi::deleteHostedNumbersHostedNumberOrderCallback);
    connect(this, &OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::deleteHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteHostedNumbersHostedNumberOrderSignal();
        Q_EMIT deleteHostedNumbersHostedNumberOrderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteHostedNumbersHostedNumberOrderSignalE(error_type, error_str);
        Q_EMIT deleteHostedNumbersHostedNumberOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteHostedNumbersHostedNumberOrderSignalError(error_type, error_str);
        Q_EMIT deleteHostedNumbersHostedNumberOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::fetchHostedNumbersHostedNumberOrder(const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchHostedNumbersHostedNumberOrder"][_serverIndices.value("fetchHostedNumbersHostedNumberOrder")].URL()+"/HostedNumbers/HostedNumberOrders/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPreviewHostedNumbersHostedNumberOrderApi::fetchHostedNumbersHostedNumberOrderCallback);
    connect(this, &OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::fetchHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPreview_hosted_numbers_hosted_number_order output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchHostedNumbersHostedNumberOrderSignal(output);
        Q_EMIT fetchHostedNumbersHostedNumberOrderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchHostedNumbersHostedNumberOrderSignalE(output, error_type, error_str);
        Q_EMIT fetchHostedNumbersHostedNumberOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchHostedNumbersHostedNumberOrderSignalError(output, error_type, error_str);
        Q_EMIT fetchHostedNumbersHostedNumberOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::listHostedNumbersHostedNumberOrder(const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status> &status, const ::OpenAPI::OptionalParam<QString> &phone_number, const ::OpenAPI::OptionalParam<QString> &incoming_phone_number_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<QString> &unique_name, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listHostedNumbersHostedNumberOrder"][_serverIndices.value("listHostedNumbersHostedNumberOrder")].URL()+"/HostedNumbers/HostedNumberOrders");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Status")).append(querySuffix).append(QUrl::toPercentEncoding(status.stringValue()));
    }
    if (phone_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PhoneNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PhoneNumber")).append(querySuffix).append(QUrl::toPercentEncoding(phone_number.stringValue()));
    }
    if (incoming_phone_number_sid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "IncomingPhoneNumberSid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("IncomingPhoneNumberSid")).append(querySuffix).append(QUrl::toPercentEncoding(incoming_phone_number_sid.stringValue()));
    }
    if (friendly_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "FriendlyName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("FriendlyName")).append(querySuffix).append(QUrl::toPercentEncoding(friendly_name.stringValue()));
    }
    if (unique_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "UniqueName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("UniqueName")).append(querySuffix).append(QUrl::toPercentEncoding(unique_name.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPreviewHostedNumbersHostedNumberOrderApi::listHostedNumbersHostedNumberOrderCallback);
    connect(this, &OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::listHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListHostedNumbersHostedNumberOrderResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listHostedNumbersHostedNumberOrderSignal(output);
        Q_EMIT listHostedNumbersHostedNumberOrderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listHostedNumbersHostedNumberOrderSignalE(output, error_type, error_str);
        Q_EMIT listHostedNumbersHostedNumberOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listHostedNumbersHostedNumberOrderSignalError(output, error_type, error_str);
        Q_EMIT listHostedNumbersHostedNumberOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::updateHostedNumbersHostedNumberOrder(const QString &sid, const ::OpenAPI::OptionalParam<qint32> &call_delay, const ::OpenAPI::OptionalParam<QList<QString>> &cc_emails, const ::OpenAPI::OptionalParam<QString> &email, const ::OpenAPI::OptionalParam<QString> &extension, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status> &status, const ::OpenAPI::OptionalParam<QString> &unique_name, const ::OpenAPI::OptionalParam<QString> &verification_code, const ::OpenAPI::OptionalParam<QString> &verification_document_sid, const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type> &verification_type) {
    QString fullPath = QString(_serverConfigs["updateHostedNumbersHostedNumberOrder"][_serverIndices.value("updateHostedNumbersHostedNumberOrder")].URL()+"/HostedNumbers/HostedNumberOrders/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (call_delay.hasValue())
    {
        input.add_var("CallDelay", ::OpenAPI::toStringValue(call_delay.value()));
    }
    if (cc_emails.hasValue())
    {
        input.add_var("CcEmails", ::OpenAPI::toStringValue(cc_emails.value()));
    }
    if (email.hasValue())
    {
        input.add_var("Email", ::OpenAPI::toStringValue(email.value()));
    }
    if (extension.hasValue())
    {
        input.add_var("Extension", ::OpenAPI::toStringValue(extension.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    if (status.hasValue())
    {
        input.add_var("Status", ::OpenAPI::toStringValue(status.value()));
    }
    if (unique_name.hasValue())
    {
        input.add_var("UniqueName", ::OpenAPI::toStringValue(unique_name.value()));
    }
    if (verification_code.hasValue())
    {
        input.add_var("VerificationCode", ::OpenAPI::toStringValue(verification_code.value()));
    }
    if (verification_document_sid.hasValue())
    {
        input.add_var("VerificationDocumentSid", ::OpenAPI::toStringValue(verification_document_sid.value()));
    }
    if (verification_type.hasValue())
    {
        input.add_var("VerificationType", ::OpenAPI::toStringValue(verification_type.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPreviewHostedNumbersHostedNumberOrderApi::updateHostedNumbersHostedNumberOrderCallback);
    connect(this, &OAIPreviewHostedNumbersHostedNumberOrderApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::updateHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPreview_hosted_numbers_hosted_number_order output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateHostedNumbersHostedNumberOrderSignal(output);
        Q_EMIT updateHostedNumbersHostedNumberOrderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateHostedNumbersHostedNumberOrderSignalE(output, error_type, error_str);
        Q_EMIT updateHostedNumbersHostedNumberOrderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateHostedNumbersHostedNumberOrderSignalError(output, error_type, error_str);
        Q_EMIT updateHostedNumbersHostedNumberOrderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPreviewHostedNumbersHostedNumberOrderApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
