/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewDeployedDevicesDeploymentApi_H
#define OAI_OAIPreviewDeployedDevicesDeploymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListDeployedDevicesDeploymentResponse.h"
#include "OAIPreview_deployed_devices_fleet_deployment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewDeployedDevicesDeploymentApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewDeployedDevicesDeploymentApi(const int timeOut = 0);
    ~OAIPreviewDeployedDevicesDeploymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  sync_service_sid QString [optional]
    */
    virtual void createDeployedDevicesDeployment(const QString &fleet_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_service_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteDeployedDevicesDeployment(const QString &fleet_sid, const QString &sid);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchDeployedDevicesDeployment(const QString &fleet_sid, const QString &sid);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listDeployedDevicesDeployment(const QString &fleet_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  sync_service_sid QString [optional]
    */
    virtual void updateDeployedDevicesDeployment(const QString &fleet_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_service_sid = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeployedDevicesDeploymentCallback(OAIHttpRequestWorker *worker);
    void deleteDeployedDevicesDeploymentCallback(OAIHttpRequestWorker *worker);
    void fetchDeployedDevicesDeploymentCallback(OAIHttpRequestWorker *worker);
    void listDeployedDevicesDeploymentCallback(OAIHttpRequestWorker *worker);
    void updateDeployedDevicesDeploymentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeployedDevicesDeploymentSignal(OAIPreview_deployed_devices_fleet_deployment summary);
    void deleteDeployedDevicesDeploymentSignal();
    void fetchDeployedDevicesDeploymentSignal(OAIPreview_deployed_devices_fleet_deployment summary);
    void listDeployedDevicesDeploymentSignal(OAIListDeployedDevicesDeploymentResponse summary);
    void updateDeployedDevicesDeploymentSignal(OAIPreview_deployed_devices_fleet_deployment summary);


    void createDeployedDevicesDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_deployment summary);
    void deleteDeployedDevicesDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void fetchDeployedDevicesDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_deployment summary);
    void listDeployedDevicesDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIListDeployedDevicesDeploymentResponse summary);
    void updateDeployedDevicesDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_deployment summary);

    Q_DECL_DEPRECATED_X("Use createDeployedDevicesDeploymentSignalError() instead")
    void createDeployedDevicesDeploymentSignalE(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployedDevicesDeploymentSignalError(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployedDevicesDeploymentSignalError() instead")
    void deleteDeployedDevicesDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployedDevicesDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeployedDevicesDeploymentSignalError() instead")
    void fetchDeployedDevicesDeploymentSignalE(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeployedDevicesDeploymentSignalError(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployedDevicesDeploymentSignalError() instead")
    void listDeployedDevicesDeploymentSignalE(OAIListDeployedDevicesDeploymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployedDevicesDeploymentSignalError(OAIListDeployedDevicesDeploymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeployedDevicesDeploymentSignalError() instead")
    void updateDeployedDevicesDeploymentSignalE(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeployedDevicesDeploymentSignalError(OAIPreview_deployed_devices_fleet_deployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeployedDevicesDeploymentSignalErrorFull() instead")
    void createDeployedDevicesDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployedDevicesDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployedDevicesDeploymentSignalErrorFull() instead")
    void deleteDeployedDevicesDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployedDevicesDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeployedDevicesDeploymentSignalErrorFull() instead")
    void fetchDeployedDevicesDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeployedDevicesDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployedDevicesDeploymentSignalErrorFull() instead")
    void listDeployedDevicesDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployedDevicesDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeployedDevicesDeploymentSignalErrorFull() instead")
    void updateDeployedDevicesDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeployedDevicesDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
