/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewMarketplaceInstalledAddOnApi_H
#define OAI_OAIPreviewMarketplaceInstalledAddOnApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListMarketplaceInstalledAddOnResponse.h"
#include "OAIPreview_marketplace_installed_add_on.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewMarketplaceInstalledAddOnApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewMarketplaceInstalledAddOnApi(const int timeOut = 0);
    ~OAIPreviewMarketplaceInstalledAddOnApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept_terms_of_service bool [required]
    * @param[in]  available_add_on_sid QString [required]
    * @param[in]  configuration QJsonValue [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createMarketplaceInstalledAddOn(const bool &accept_terms_of_service, const QString &available_add_on_sid, const ::OpenAPI::OptionalParam<QJsonValue> &configuration = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteMarketplaceInstalledAddOn(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchMarketplaceInstalledAddOn(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listMarketplaceInstalledAddOn(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  configuration QJsonValue [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateMarketplaceInstalledAddOn(const QString &sid, const ::OpenAPI::OptionalParam<QJsonValue> &configuration = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMarketplaceInstalledAddOnCallback(OAIHttpRequestWorker *worker);
    void deleteMarketplaceInstalledAddOnCallback(OAIHttpRequestWorker *worker);
    void fetchMarketplaceInstalledAddOnCallback(OAIHttpRequestWorker *worker);
    void listMarketplaceInstalledAddOnCallback(OAIHttpRequestWorker *worker);
    void updateMarketplaceInstalledAddOnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMarketplaceInstalledAddOnSignal(OAIPreview_marketplace_installed_add_on summary);
    void deleteMarketplaceInstalledAddOnSignal();
    void fetchMarketplaceInstalledAddOnSignal(OAIPreview_marketplace_installed_add_on summary);
    void listMarketplaceInstalledAddOnSignal(OAIListMarketplaceInstalledAddOnResponse summary);
    void updateMarketplaceInstalledAddOnSignal(OAIPreview_marketplace_installed_add_on summary);


    void createMarketplaceInstalledAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPreview_marketplace_installed_add_on summary);
    void deleteMarketplaceInstalledAddOnSignalFull(OAIHttpRequestWorker *worker);
    void fetchMarketplaceInstalledAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPreview_marketplace_installed_add_on summary);
    void listMarketplaceInstalledAddOnSignalFull(OAIHttpRequestWorker *worker, OAIListMarketplaceInstalledAddOnResponse summary);
    void updateMarketplaceInstalledAddOnSignalFull(OAIHttpRequestWorker *worker, OAIPreview_marketplace_installed_add_on summary);

    Q_DECL_DEPRECATED_X("Use createMarketplaceInstalledAddOnSignalError() instead")
    void createMarketplaceInstalledAddOnSignalE(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMarketplaceInstalledAddOnSignalError(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMarketplaceInstalledAddOnSignalError() instead")
    void deleteMarketplaceInstalledAddOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMarketplaceInstalledAddOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchMarketplaceInstalledAddOnSignalError() instead")
    void fetchMarketplaceInstalledAddOnSignalE(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMarketplaceInstalledAddOnSignalError(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMarketplaceInstalledAddOnSignalError() instead")
    void listMarketplaceInstalledAddOnSignalE(OAIListMarketplaceInstalledAddOnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMarketplaceInstalledAddOnSignalError(OAIListMarketplaceInstalledAddOnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMarketplaceInstalledAddOnSignalError() instead")
    void updateMarketplaceInstalledAddOnSignalE(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMarketplaceInstalledAddOnSignalError(OAIPreview_marketplace_installed_add_on summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMarketplaceInstalledAddOnSignalErrorFull() instead")
    void createMarketplaceInstalledAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMarketplaceInstalledAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMarketplaceInstalledAddOnSignalErrorFull() instead")
    void deleteMarketplaceInstalledAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMarketplaceInstalledAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchMarketplaceInstalledAddOnSignalErrorFull() instead")
    void fetchMarketplaceInstalledAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMarketplaceInstalledAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMarketplaceInstalledAddOnSignalErrorFull() instead")
    void listMarketplaceInstalledAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMarketplaceInstalledAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMarketplaceInstalledAddOnSignalErrorFull() instead")
    void updateMarketplaceInstalledAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMarketplaceInstalledAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
