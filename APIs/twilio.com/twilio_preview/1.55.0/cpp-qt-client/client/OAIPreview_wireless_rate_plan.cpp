/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreview_wireless_rate_plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreview_wireless_rate_plan::OAIPreview_wireless_rate_plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreview_wireless_rate_plan::OAIPreview_wireless_rate_plan() {
    this->initializeModel();
}

OAIPreview_wireless_rate_plan::~OAIPreview_wireless_rate_plan() {}

void OAIPreview_wireless_rate_plan::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_data_enabled_isSet = false;
    m_data_enabled_isValid = false;

    m_data_limit_isSet = false;
    m_data_limit_isValid = false;

    m_data_metering_isSet = false;
    m_data_metering_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_international_roaming_isSet = false;
    m_international_roaming_isValid = false;

    m_messaging_enabled_isSet = false;
    m_messaging_enabled_isValid = false;

    m_national_roaming_enabled_isSet = false;
    m_national_roaming_enabled_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_voice_enabled_isSet = false;
    m_voice_enabled_isValid = false;
}

void OAIPreview_wireless_rate_plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreview_wireless_rate_plan::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_data_enabled_isValid = ::OpenAPI::fromJsonValue(m_data_enabled, json[QString("data_enabled")]);
    m_data_enabled_isSet = !json[QString("data_enabled")].isNull() && m_data_enabled_isValid;

    m_data_limit_isValid = ::OpenAPI::fromJsonValue(m_data_limit, json[QString("data_limit")]);
    m_data_limit_isSet = !json[QString("data_limit")].isNull() && m_data_limit_isValid;

    m_data_metering_isValid = ::OpenAPI::fromJsonValue(m_data_metering, json[QString("data_metering")]);
    m_data_metering_isSet = !json[QString("data_metering")].isNull() && m_data_metering_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_international_roaming_isValid = ::OpenAPI::fromJsonValue(m_international_roaming, json[QString("international_roaming")]);
    m_international_roaming_isSet = !json[QString("international_roaming")].isNull() && m_international_roaming_isValid;

    m_messaging_enabled_isValid = ::OpenAPI::fromJsonValue(m_messaging_enabled, json[QString("messaging_enabled")]);
    m_messaging_enabled_isSet = !json[QString("messaging_enabled")].isNull() && m_messaging_enabled_isValid;

    m_national_roaming_enabled_isValid = ::OpenAPI::fromJsonValue(m_national_roaming_enabled, json[QString("national_roaming_enabled")]);
    m_national_roaming_enabled_isSet = !json[QString("national_roaming_enabled")].isNull() && m_national_roaming_enabled_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_voice_enabled_isValid = ::OpenAPI::fromJsonValue(m_voice_enabled, json[QString("voice_enabled")]);
    m_voice_enabled_isSet = !json[QString("voice_enabled")].isNull() && m_voice_enabled_isValid;
}

QString OAIPreview_wireless_rate_plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreview_wireless_rate_plan::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_data_enabled_isSet) {
        obj.insert(QString("data_enabled"), ::OpenAPI::toJsonValue(m_data_enabled));
    }
    if (m_data_limit_isSet) {
        obj.insert(QString("data_limit"), ::OpenAPI::toJsonValue(m_data_limit));
    }
    if (m_data_metering_isSet) {
        obj.insert(QString("data_metering"), ::OpenAPI::toJsonValue(m_data_metering));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_international_roaming.size() > 0) {
        obj.insert(QString("international_roaming"), ::OpenAPI::toJsonValue(m_international_roaming));
    }
    if (m_messaging_enabled_isSet) {
        obj.insert(QString("messaging_enabled"), ::OpenAPI::toJsonValue(m_messaging_enabled));
    }
    if (m_national_roaming_enabled_isSet) {
        obj.insert(QString("national_roaming_enabled"), ::OpenAPI::toJsonValue(m_national_roaming_enabled));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_voice_enabled_isSet) {
        obj.insert(QString("voice_enabled"), ::OpenAPI::toJsonValue(m_voice_enabled));
    }
    return obj;
}

QString OAIPreview_wireless_rate_plan::getAccountSid() const {
    return m_account_sid;
}
void OAIPreview_wireless_rate_plan::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIPreview_wireless_rate_plan::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIPreview_wireless_rate_plan::isDataEnabled() const {
    return m_data_enabled;
}
void OAIPreview_wireless_rate_plan::setDataEnabled(const bool &data_enabled) {
    m_data_enabled = data_enabled;
    m_data_enabled_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_data_enabled_Set() const{
    return m_data_enabled_isSet;
}

bool OAIPreview_wireless_rate_plan::is_data_enabled_Valid() const{
    return m_data_enabled_isValid;
}

qint32 OAIPreview_wireless_rate_plan::getDataLimit() const {
    return m_data_limit;
}
void OAIPreview_wireless_rate_plan::setDataLimit(const qint32 &data_limit) {
    m_data_limit = data_limit;
    m_data_limit_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_data_limit_Set() const{
    return m_data_limit_isSet;
}

bool OAIPreview_wireless_rate_plan::is_data_limit_Valid() const{
    return m_data_limit_isValid;
}

QString OAIPreview_wireless_rate_plan::getDataMetering() const {
    return m_data_metering;
}
void OAIPreview_wireless_rate_plan::setDataMetering(const QString &data_metering) {
    m_data_metering = data_metering;
    m_data_metering_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_data_metering_Set() const{
    return m_data_metering_isSet;
}

bool OAIPreview_wireless_rate_plan::is_data_metering_Valid() const{
    return m_data_metering_isValid;
}

QDateTime OAIPreview_wireless_rate_plan::getDateCreated() const {
    return m_date_created;
}
void OAIPreview_wireless_rate_plan::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIPreview_wireless_rate_plan::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIPreview_wireless_rate_plan::getDateUpdated() const {
    return m_date_updated;
}
void OAIPreview_wireless_rate_plan::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIPreview_wireless_rate_plan::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIPreview_wireless_rate_plan::getFriendlyName() const {
    return m_friendly_name;
}
void OAIPreview_wireless_rate_plan::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIPreview_wireless_rate_plan::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<QString> OAIPreview_wireless_rate_plan::getInternationalRoaming() const {
    return m_international_roaming;
}
void OAIPreview_wireless_rate_plan::setInternationalRoaming(const QList<QString> &international_roaming) {
    m_international_roaming = international_roaming;
    m_international_roaming_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_international_roaming_Set() const{
    return m_international_roaming_isSet;
}

bool OAIPreview_wireless_rate_plan::is_international_roaming_Valid() const{
    return m_international_roaming_isValid;
}

bool OAIPreview_wireless_rate_plan::isMessagingEnabled() const {
    return m_messaging_enabled;
}
void OAIPreview_wireless_rate_plan::setMessagingEnabled(const bool &messaging_enabled) {
    m_messaging_enabled = messaging_enabled;
    m_messaging_enabled_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_messaging_enabled_Set() const{
    return m_messaging_enabled_isSet;
}

bool OAIPreview_wireless_rate_plan::is_messaging_enabled_Valid() const{
    return m_messaging_enabled_isValid;
}

bool OAIPreview_wireless_rate_plan::isNationalRoamingEnabled() const {
    return m_national_roaming_enabled;
}
void OAIPreview_wireless_rate_plan::setNationalRoamingEnabled(const bool &national_roaming_enabled) {
    m_national_roaming_enabled = national_roaming_enabled;
    m_national_roaming_enabled_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_national_roaming_enabled_Set() const{
    return m_national_roaming_enabled_isSet;
}

bool OAIPreview_wireless_rate_plan::is_national_roaming_enabled_Valid() const{
    return m_national_roaming_enabled_isValid;
}

QString OAIPreview_wireless_rate_plan::getSid() const {
    return m_sid;
}
void OAIPreview_wireless_rate_plan::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIPreview_wireless_rate_plan::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIPreview_wireless_rate_plan::getUniqueName() const {
    return m_unique_name;
}
void OAIPreview_wireless_rate_plan::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIPreview_wireless_rate_plan::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIPreview_wireless_rate_plan::getUrl() const {
    return m_url;
}
void OAIPreview_wireless_rate_plan::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPreview_wireless_rate_plan::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPreview_wireless_rate_plan::isVoiceEnabled() const {
    return m_voice_enabled;
}
void OAIPreview_wireless_rate_plan::setVoiceEnabled(const bool &voice_enabled) {
    m_voice_enabled = voice_enabled;
    m_voice_enabled_isSet = true;
}

bool OAIPreview_wireless_rate_plan::is_voice_enabled_Set() const{
    return m_voice_enabled_isSet;
}

bool OAIPreview_wireless_rate_plan::is_voice_enabled_Valid() const{
    return m_voice_enabled_isValid;
}

bool OAIPreview_wireless_rate_plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_metering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_roaming.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_roaming_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreview_wireless_rate_plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
