/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewHostedNumbersHostedNumberOrderApi_H
#define OAI_OAIPreviewHostedNumbersHostedNumberOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHosted_number_order_enum_status.h"
#include "OAIHosted_number_order_enum_verification_type.h"
#include "OAIListHostedNumbersHostedNumberOrderResponse.h"
#include "OAIPreview_hosted_numbers_hosted_number_order.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewHostedNumbersHostedNumberOrderApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewHostedNumbersHostedNumberOrderApi(const int timeOut = 0);
    ~OAIPreviewHostedNumbersHostedNumberOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  phone_number QString [required]
    * @param[in]  sms_capability bool [required]
    * @param[in]  account_sid QString [optional]
    * @param[in]  address_sid QString [optional]
    * @param[in]  cc_emails QList<QString> [optional]
    * @param[in]  email QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  sms_application_sid QString [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  status_callback_url QString [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  verification_document_sid QString [optional]
    * @param[in]  verification_type OAIHosted_number_order_enum_verification_type [optional]
    */
    virtual void createHostedNumbersHostedNumberOrder(const QString &phone_number, const bool &sms_capability, const ::OpenAPI::OptionalParam<QString> &account_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cc_emails = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &verification_document_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type> &verification_type = ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteHostedNumbersHostedNumberOrder(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchHostedNumbersHostedNumberOrder(const QString &sid);

    /**
    * @param[in]  status OAIHosted_number_order_enum_status [optional]
    * @param[in]  phone_number QString [optional]
    * @param[in]  incoming_phone_number_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listHostedNumbersHostedNumberOrder(const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status> &status = ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status>(), const ::OpenAPI::OptionalParam<QString> &phone_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incoming_phone_number_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  call_delay qint32 [optional]
    * @param[in]  cc_emails QList<QString> [optional]
    * @param[in]  email QString [optional]
    * @param[in]  extension QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  status OAIHosted_number_order_enum_status [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  verification_code QString [optional]
    * @param[in]  verification_document_sid QString [optional]
    * @param[in]  verification_type OAIHosted_number_order_enum_verification_type [optional]
    */
    virtual void updateHostedNumbersHostedNumberOrder(const QString &sid, const ::OpenAPI::OptionalParam<qint32> &call_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &cc_emails = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status> &status = ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &verification_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &verification_document_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type> &verification_type = ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_verification_type>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void deleteHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void fetchHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void listHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void updateHostedNumbersHostedNumberOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createHostedNumbersHostedNumberOrderSignal(OAIPreview_hosted_numbers_hosted_number_order summary);
    void deleteHostedNumbersHostedNumberOrderSignal();
    void fetchHostedNumbersHostedNumberOrderSignal(OAIPreview_hosted_numbers_hosted_number_order summary);
    void listHostedNumbersHostedNumberOrderSignal(OAIListHostedNumbersHostedNumberOrderResponse summary);
    void updateHostedNumbersHostedNumberOrderSignal(OAIPreview_hosted_numbers_hosted_number_order summary);


    void createHostedNumbersHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIPreview_hosted_numbers_hosted_number_order summary);
    void deleteHostedNumbersHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker);
    void fetchHostedNumbersHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIPreview_hosted_numbers_hosted_number_order summary);
    void listHostedNumbersHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIListHostedNumbersHostedNumberOrderResponse summary);
    void updateHostedNumbersHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIPreview_hosted_numbers_hosted_number_order summary);

    Q_DECL_DEPRECATED_X("Use createHostedNumbersHostedNumberOrderSignalError() instead")
    void createHostedNumbersHostedNumberOrderSignalE(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedNumbersHostedNumberOrderSignalError(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedNumbersHostedNumberOrderSignalError() instead")
    void deleteHostedNumbersHostedNumberOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedNumbersHostedNumberOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchHostedNumbersHostedNumberOrderSignalError() instead")
    void fetchHostedNumbersHostedNumberOrderSignalE(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchHostedNumbersHostedNumberOrderSignalError(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedNumbersHostedNumberOrderSignalError() instead")
    void listHostedNumbersHostedNumberOrderSignalE(OAIListHostedNumbersHostedNumberOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedNumbersHostedNumberOrderSignalError(OAIListHostedNumbersHostedNumberOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHostedNumbersHostedNumberOrderSignalError() instead")
    void updateHostedNumbersHostedNumberOrderSignalE(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHostedNumbersHostedNumberOrderSignalError(OAIPreview_hosted_numbers_hosted_number_order summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createHostedNumbersHostedNumberOrderSignalErrorFull() instead")
    void createHostedNumbersHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedNumbersHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedNumbersHostedNumberOrderSignalErrorFull() instead")
    void deleteHostedNumbersHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedNumbersHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchHostedNumbersHostedNumberOrderSignalErrorFull() instead")
    void fetchHostedNumbersHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchHostedNumbersHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedNumbersHostedNumberOrderSignalErrorFull() instead")
    void listHostedNumbersHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedNumbersHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHostedNumbersHostedNumberOrderSignalErrorFull() instead")
    void updateHostedNumbersHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHostedNumbersHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
