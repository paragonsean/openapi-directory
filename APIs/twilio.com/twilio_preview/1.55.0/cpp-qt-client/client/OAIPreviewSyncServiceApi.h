/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewSyncServiceApi_H
#define OAI_OAIPreviewSyncServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncServiceResponse.h"
#include "OAIPreview_sync_service.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewSyncServiceApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewSyncServiceApi(const int timeOut = 0);
    ~OAIPreviewSyncServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  acl_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  reachability_webhooks_enabled bool [optional]
    * @param[in]  webhook_url QString [optional]
    */
    virtual void createSyncService(const ::OpenAPI::OptionalParam<bool> &acl_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reachability_webhooks_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &webhook_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteSyncService(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchSyncService(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncService(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  acl_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  reachability_webhooks_enabled bool [optional]
    * @param[in]  webhook_url QString [optional]
    */
    virtual void updateSyncService(const QString &sid, const ::OpenAPI::OptionalParam<bool> &acl_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reachability_webhooks_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &webhook_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncServiceCallback(OAIHttpRequestWorker *worker);
    void deleteSyncServiceCallback(OAIHttpRequestWorker *worker);
    void fetchSyncServiceCallback(OAIHttpRequestWorker *worker);
    void listSyncServiceCallback(OAIHttpRequestWorker *worker);
    void updateSyncServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncServiceSignal(OAIPreview_sync_service summary);
    void deleteSyncServiceSignal();
    void fetchSyncServiceSignal(OAIPreview_sync_service summary);
    void listSyncServiceSignal(OAIListSyncServiceResponse summary);
    void updateSyncServiceSignal(OAIPreview_sync_service summary);


    void createSyncServiceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service summary);
    void deleteSyncServiceSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncServiceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service summary);
    void listSyncServiceSignalFull(OAIHttpRequestWorker *worker, OAIListSyncServiceResponse summary);
    void updateSyncServiceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service summary);

    Q_DECL_DEPRECATED_X("Use createSyncServiceSignalError() instead")
    void createSyncServiceSignalE(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncServiceSignalError(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncServiceSignalError() instead")
    void deleteSyncServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncServiceSignalError() instead")
    void fetchSyncServiceSignalE(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncServiceSignalError(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncServiceSignalError() instead")
    void listSyncServiceSignalE(OAIListSyncServiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncServiceSignalError(OAIListSyncServiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncServiceSignalError() instead")
    void updateSyncServiceSignalE(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncServiceSignalError(OAIPreview_sync_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncServiceSignalErrorFull() instead")
    void createSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncServiceSignalErrorFull() instead")
    void deleteSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncServiceSignalErrorFull() instead")
    void fetchSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncServiceSignalErrorFull() instead")
    void listSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncServiceSignalErrorFull() instead")
    void updateSyncServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
