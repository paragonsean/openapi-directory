/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewDeployedDevicesDeviceApi_H
#define OAI_OAIPreviewDeployedDevicesDeviceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListDeployedDevicesDeviceResponse.h"
#include "OAIPreview_deployed_devices_fleet_device.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewDeployedDevicesDeviceApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewDeployedDevicesDeviceApi(const int timeOut = 0);
    ~OAIPreviewDeployedDevicesDeviceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  deployment_sid QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createDeployedDevicesDevice(const QString &fleet_sid, const ::OpenAPI::OptionalParam<QString> &deployment_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteDeployedDevicesDevice(const QString &fleet_sid, const QString &sid);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchDeployedDevicesDevice(const QString &fleet_sid, const QString &sid);

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  deployment_sid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listDeployedDevicesDevice(const QString &fleet_sid, const ::OpenAPI::OptionalParam<QString> &deployment_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fleet_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  deployment_sid QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  identity QString [optional]
    */
    virtual void updateDeployedDevicesDevice(const QString &fleet_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &deployment_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeployedDevicesDeviceCallback(OAIHttpRequestWorker *worker);
    void deleteDeployedDevicesDeviceCallback(OAIHttpRequestWorker *worker);
    void fetchDeployedDevicesDeviceCallback(OAIHttpRequestWorker *worker);
    void listDeployedDevicesDeviceCallback(OAIHttpRequestWorker *worker);
    void updateDeployedDevicesDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeployedDevicesDeviceSignal(OAIPreview_deployed_devices_fleet_device summary);
    void deleteDeployedDevicesDeviceSignal();
    void fetchDeployedDevicesDeviceSignal(OAIPreview_deployed_devices_fleet_device summary);
    void listDeployedDevicesDeviceSignal(OAIListDeployedDevicesDeviceResponse summary);
    void updateDeployedDevicesDeviceSignal(OAIPreview_deployed_devices_fleet_device summary);


    void createDeployedDevicesDeviceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_device summary);
    void deleteDeployedDevicesDeviceSignalFull(OAIHttpRequestWorker *worker);
    void fetchDeployedDevicesDeviceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_device summary);
    void listDeployedDevicesDeviceSignalFull(OAIHttpRequestWorker *worker, OAIListDeployedDevicesDeviceResponse summary);
    void updateDeployedDevicesDeviceSignalFull(OAIHttpRequestWorker *worker, OAIPreview_deployed_devices_fleet_device summary);

    Q_DECL_DEPRECATED_X("Use createDeployedDevicesDeviceSignalError() instead")
    void createDeployedDevicesDeviceSignalE(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployedDevicesDeviceSignalError(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployedDevicesDeviceSignalError() instead")
    void deleteDeployedDevicesDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployedDevicesDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeployedDevicesDeviceSignalError() instead")
    void fetchDeployedDevicesDeviceSignalE(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeployedDevicesDeviceSignalError(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployedDevicesDeviceSignalError() instead")
    void listDeployedDevicesDeviceSignalE(OAIListDeployedDevicesDeviceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployedDevicesDeviceSignalError(OAIListDeployedDevicesDeviceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeployedDevicesDeviceSignalError() instead")
    void updateDeployedDevicesDeviceSignalE(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeployedDevicesDeviceSignalError(OAIPreview_deployed_devices_fleet_device summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeployedDevicesDeviceSignalErrorFull() instead")
    void createDeployedDevicesDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployedDevicesDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployedDevicesDeviceSignalErrorFull() instead")
    void deleteDeployedDevicesDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployedDevicesDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeployedDevicesDeviceSignalErrorFull() instead")
    void fetchDeployedDevicesDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeployedDevicesDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployedDevicesDeviceSignalErrorFull() instead")
    void listDeployedDevicesDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployedDevicesDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeployedDevicesDeviceSignalErrorFull() instead")
    void updateDeployedDevicesDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeployedDevicesDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
