/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewWirelessCommandApi_H
#define OAI_OAIPreviewWirelessCommandApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWirelessCommandResponse.h"
#include "OAIPreview_wireless_command.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewWirelessCommandApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewWirelessCommandApi(const int timeOut = 0);
    ~OAIPreviewWirelessCommandApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  command QString [required]
    * @param[in]  callback_method QString [optional]
    * @param[in]  callback_url QString [optional]
    * @param[in]  command_mode QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  include_sid QString [optional]
    * @param[in]  sim QString [optional]
    */
    virtual void createWirelessCommand(const QString &command, const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &command_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchWirelessCommand(const QString &sid);

    /**
    * @param[in]  device QString [optional]
    * @param[in]  sim QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWirelessCommand(const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWirelessCommandCallback(OAIHttpRequestWorker *worker);
    void fetchWirelessCommandCallback(OAIHttpRequestWorker *worker);
    void listWirelessCommandCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWirelessCommandSignal(OAIPreview_wireless_command summary);
    void fetchWirelessCommandSignal(OAIPreview_wireless_command summary);
    void listWirelessCommandSignal(OAIListWirelessCommandResponse summary);


    void createWirelessCommandSignalFull(OAIHttpRequestWorker *worker, OAIPreview_wireless_command summary);
    void fetchWirelessCommandSignalFull(OAIHttpRequestWorker *worker, OAIPreview_wireless_command summary);
    void listWirelessCommandSignalFull(OAIHttpRequestWorker *worker, OAIListWirelessCommandResponse summary);

    Q_DECL_DEPRECATED_X("Use createWirelessCommandSignalError() instead")
    void createWirelessCommandSignalE(OAIPreview_wireless_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWirelessCommandSignalError(OAIPreview_wireless_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWirelessCommandSignalError() instead")
    void fetchWirelessCommandSignalE(OAIPreview_wireless_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWirelessCommandSignalError(OAIPreview_wireless_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWirelessCommandSignalError() instead")
    void listWirelessCommandSignalE(OAIListWirelessCommandResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWirelessCommandSignalError(OAIListWirelessCommandResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWirelessCommandSignalErrorFull() instead")
    void createWirelessCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWirelessCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWirelessCommandSignalErrorFull() instead")
    void fetchWirelessCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWirelessCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWirelessCommandSignalErrorFull() instead")
    void listWirelessCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWirelessCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
