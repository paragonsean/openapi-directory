/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreview_wireless_sim_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreview_wireless_sim_usage::OAIPreview_wireless_sim_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreview_wireless_sim_usage::OAIPreview_wireless_sim_usage() {
    this->initializeModel();
}

OAIPreview_wireless_sim_usage::~OAIPreview_wireless_sim_usage() {}

void OAIPreview_wireless_sim_usage::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_commands_costs_isSet = false;
    m_commands_costs_isValid = false;

    m_commands_usage_isSet = false;
    m_commands_usage_isValid = false;

    m_data_costs_isSet = false;
    m_data_costs_isValid = false;

    m_data_usage_isSet = false;
    m_data_usage_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;

    m_sim_unique_name_isSet = false;
    m_sim_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPreview_wireless_sim_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreview_wireless_sim_usage::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_commands_costs_isValid = ::OpenAPI::fromJsonValue(m_commands_costs, json[QString("commands_costs")]);
    m_commands_costs_isSet = !json[QString("commands_costs")].isNull() && m_commands_costs_isValid;

    m_commands_usage_isValid = ::OpenAPI::fromJsonValue(m_commands_usage, json[QString("commands_usage")]);
    m_commands_usage_isSet = !json[QString("commands_usage")].isNull() && m_commands_usage_isValid;

    m_data_costs_isValid = ::OpenAPI::fromJsonValue(m_data_costs, json[QString("data_costs")]);
    m_data_costs_isSet = !json[QString("data_costs")].isNull() && m_data_costs_isValid;

    m_data_usage_isValid = ::OpenAPI::fromJsonValue(m_data_usage, json[QString("data_usage")]);
    m_data_usage_isSet = !json[QString("data_usage")].isNull() && m_data_usage_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;

    m_sim_unique_name_isValid = ::OpenAPI::fromJsonValue(m_sim_unique_name, json[QString("sim_unique_name")]);
    m_sim_unique_name_isSet = !json[QString("sim_unique_name")].isNull() && m_sim_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPreview_wireless_sim_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreview_wireless_sim_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_commands_costs_isSet) {
        obj.insert(QString("commands_costs"), ::OpenAPI::toJsonValue(m_commands_costs));
    }
    if (m_commands_usage_isSet) {
        obj.insert(QString("commands_usage"), ::OpenAPI::toJsonValue(m_commands_usage));
    }
    if (m_data_costs_isSet) {
        obj.insert(QString("data_costs"), ::OpenAPI::toJsonValue(m_data_costs));
    }
    if (m_data_usage_isSet) {
        obj.insert(QString("data_usage"), ::OpenAPI::toJsonValue(m_data_usage));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    if (m_sim_unique_name_isSet) {
        obj.insert(QString("sim_unique_name"), ::OpenAPI::toJsonValue(m_sim_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPreview_wireless_sim_usage::getAccountSid() const {
    return m_account_sid;
}
void OAIPreview_wireless_sim_usage::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIPreview_wireless_sim_usage::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIPreview_wireless_sim_usage::getCommandsCosts() const {
    return m_commands_costs;
}
void OAIPreview_wireless_sim_usage::setCommandsCosts(const QJsonValue &commands_costs) {
    m_commands_costs = commands_costs;
    m_commands_costs_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_commands_costs_Set() const{
    return m_commands_costs_isSet;
}

bool OAIPreview_wireless_sim_usage::is_commands_costs_Valid() const{
    return m_commands_costs_isValid;
}

QJsonValue OAIPreview_wireless_sim_usage::getCommandsUsage() const {
    return m_commands_usage;
}
void OAIPreview_wireless_sim_usage::setCommandsUsage(const QJsonValue &commands_usage) {
    m_commands_usage = commands_usage;
    m_commands_usage_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_commands_usage_Set() const{
    return m_commands_usage_isSet;
}

bool OAIPreview_wireless_sim_usage::is_commands_usage_Valid() const{
    return m_commands_usage_isValid;
}

QJsonValue OAIPreview_wireless_sim_usage::getDataCosts() const {
    return m_data_costs;
}
void OAIPreview_wireless_sim_usage::setDataCosts(const QJsonValue &data_costs) {
    m_data_costs = data_costs;
    m_data_costs_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_data_costs_Set() const{
    return m_data_costs_isSet;
}

bool OAIPreview_wireless_sim_usage::is_data_costs_Valid() const{
    return m_data_costs_isValid;
}

QJsonValue OAIPreview_wireless_sim_usage::getDataUsage() const {
    return m_data_usage;
}
void OAIPreview_wireless_sim_usage::setDataUsage(const QJsonValue &data_usage) {
    m_data_usage = data_usage;
    m_data_usage_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_data_usage_Set() const{
    return m_data_usage_isSet;
}

bool OAIPreview_wireless_sim_usage::is_data_usage_Valid() const{
    return m_data_usage_isValid;
}

QJsonValue OAIPreview_wireless_sim_usage::getPeriod() const {
    return m_period;
}
void OAIPreview_wireless_sim_usage::setPeriod(const QJsonValue &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_period_Set() const{
    return m_period_isSet;
}

bool OAIPreview_wireless_sim_usage::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIPreview_wireless_sim_usage::getSimSid() const {
    return m_sim_sid;
}
void OAIPreview_wireless_sim_usage::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAIPreview_wireless_sim_usage::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

QString OAIPreview_wireless_sim_usage::getSimUniqueName() const {
    return m_sim_unique_name;
}
void OAIPreview_wireless_sim_usage::setSimUniqueName(const QString &sim_unique_name) {
    m_sim_unique_name = sim_unique_name;
    m_sim_unique_name_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_sim_unique_name_Set() const{
    return m_sim_unique_name_isSet;
}

bool OAIPreview_wireless_sim_usage::is_sim_unique_name_Valid() const{
    return m_sim_unique_name_isValid;
}

QString OAIPreview_wireless_sim_usage::getUrl() const {
    return m_url;
}
void OAIPreview_wireless_sim_usage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPreview_wireless_sim_usage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPreview_wireless_sim_usage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPreview_wireless_sim_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands_costs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_costs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreview_wireless_sim_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
