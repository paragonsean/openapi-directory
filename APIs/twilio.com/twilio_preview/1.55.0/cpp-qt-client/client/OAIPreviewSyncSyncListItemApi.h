/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewSyncSyncListItemApi_H
#define OAI_OAIPreviewSyncSyncListItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncSyncListItemResponse.h"
#include "OAIPreview_sync_service_sync_list_sync_list_item.h"
#include "OAISync_list_item_enum_query_from_bound_type.h"
#include "OAISync_list_item_enum_query_result_order.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewSyncSyncListItemApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewSyncSyncListItemApi(const int timeOut = 0);
    ~OAIPreviewSyncSyncListItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  data QJsonValue [required]
    */
    virtual void createSyncSyncListItem(const QString &service_sid, const QString &list_sid, const QJsonValue &data);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteSyncSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void fetchSyncSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  order OAISync_list_item_enum_query_result_order [optional]
    * @param[in]  from QString [optional]
    * @param[in]  bounds OAISync_list_item_enum_query_from_bound_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncSyncListItem(const QString &service_sid, const QString &list_sid, const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_result_order> &order = ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_result_order>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_from_bound_type> &bounds = ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_from_bound_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  data QJsonValue [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateSyncSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const QJsonValue &data, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncSyncListItemCallback(OAIHttpRequestWorker *worker);
    void deleteSyncSyncListItemCallback(OAIHttpRequestWorker *worker);
    void fetchSyncSyncListItemCallback(OAIHttpRequestWorker *worker);
    void listSyncSyncListItemCallback(OAIHttpRequestWorker *worker);
    void updateSyncSyncListItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncSyncListItemSignal(OAIPreview_sync_service_sync_list_sync_list_item summary);
    void deleteSyncSyncListItemSignal();
    void fetchSyncSyncListItemSignal(OAIPreview_sync_service_sync_list_sync_list_item summary);
    void listSyncSyncListItemSignal(OAIListSyncSyncListItemResponse summary);
    void updateSyncSyncListItemSignal(OAIPreview_sync_service_sync_list_sync_list_item summary);


    void createSyncSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_list_sync_list_item summary);
    void deleteSyncSyncListItemSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_list_sync_list_item summary);
    void listSyncSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAIListSyncSyncListItemResponse summary);
    void updateSyncSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_list_sync_list_item summary);

    Q_DECL_DEPRECATED_X("Use createSyncSyncListItemSignalError() instead")
    void createSyncSyncListItemSignalE(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncSyncListItemSignalError(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncSyncListItemSignalError() instead")
    void deleteSyncSyncListItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncListItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncListItemSignalError() instead")
    void fetchSyncSyncListItemSignalE(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncListItemSignalError(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncListItemSignalError() instead")
    void listSyncSyncListItemSignalE(OAIListSyncSyncListItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncListItemSignalError(OAIListSyncSyncListItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncSyncListItemSignalError() instead")
    void updateSyncSyncListItemSignalE(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncSyncListItemSignalError(OAIPreview_sync_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncSyncListItemSignalErrorFull() instead")
    void createSyncSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncSyncListItemSignalErrorFull() instead")
    void deleteSyncSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncListItemSignalErrorFull() instead")
    void fetchSyncSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncListItemSignalErrorFull() instead")
    void listSyncSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncSyncListItemSignalErrorFull() instead")
    void updateSyncSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
