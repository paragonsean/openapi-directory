/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewSyncSyncMapPermissionApi_H
#define OAI_OAIPreviewSyncSyncMapPermissionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncSyncMapPermissionResponse.h"
#include "OAIPreview_sync_service_sync_map_sync_map_permission.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewSyncSyncMapPermissionApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewSyncSyncMapPermissionApi(const int timeOut = 0);
    ~OAIPreviewSyncSyncMapPermissionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  identity QString [required]
    */
    virtual void deleteSyncSyncMapPermission(const QString &service_sid, const QString &map_sid, const QString &identity);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  identity QString [required]
    */
    virtual void fetchSyncSyncMapPermission(const QString &service_sid, const QString &map_sid, const QString &identity);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncSyncMapPermission(const QString &service_sid, const QString &map_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  identity QString [required]
    * @param[in]  manage bool [required]
    * @param[in]  read bool [required]
    * @param[in]  write bool [required]
    */
    virtual void updateSyncSyncMapPermission(const QString &service_sid, const QString &map_sid, const QString &identity, const bool &manage, const bool &read, const bool &write);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteSyncSyncMapPermissionCallback(OAIHttpRequestWorker *worker);
    void fetchSyncSyncMapPermissionCallback(OAIHttpRequestWorker *worker);
    void listSyncSyncMapPermissionCallback(OAIHttpRequestWorker *worker);
    void updateSyncSyncMapPermissionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteSyncSyncMapPermissionSignal();
    void fetchSyncSyncMapPermissionSignal(OAIPreview_sync_service_sync_map_sync_map_permission summary);
    void listSyncSyncMapPermissionSignal(OAIListSyncSyncMapPermissionResponse summary);
    void updateSyncSyncMapPermissionSignal(OAIPreview_sync_service_sync_map_sync_map_permission summary);


    void deleteSyncSyncMapPermissionSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncSyncMapPermissionSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_map_sync_map_permission summary);
    void listSyncSyncMapPermissionSignalFull(OAIHttpRequestWorker *worker, OAIListSyncSyncMapPermissionResponse summary);
    void updateSyncSyncMapPermissionSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_map_sync_map_permission summary);

    Q_DECL_DEPRECATED_X("Use deleteSyncSyncMapPermissionSignalError() instead")
    void deleteSyncSyncMapPermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncMapPermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncMapPermissionSignalError() instead")
    void fetchSyncSyncMapPermissionSignalE(OAIPreview_sync_service_sync_map_sync_map_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncMapPermissionSignalError(OAIPreview_sync_service_sync_map_sync_map_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncMapPermissionSignalError() instead")
    void listSyncSyncMapPermissionSignalE(OAIListSyncSyncMapPermissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncMapPermissionSignalError(OAIListSyncSyncMapPermissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncSyncMapPermissionSignalError() instead")
    void updateSyncSyncMapPermissionSignalE(OAIPreview_sync_service_sync_map_sync_map_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncSyncMapPermissionSignalError(OAIPreview_sync_service_sync_map_sync_map_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteSyncSyncMapPermissionSignalErrorFull() instead")
    void deleteSyncSyncMapPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncMapPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncMapPermissionSignalErrorFull() instead")
    void fetchSyncSyncMapPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncMapPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncMapPermissionSignalErrorFull() instead")
    void listSyncSyncMapPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncMapPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncSyncMapPermissionSignalErrorFull() instead")
    void updateSyncSyncMapPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncSyncMapPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
