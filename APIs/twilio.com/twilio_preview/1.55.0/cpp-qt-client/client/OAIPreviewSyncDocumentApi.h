/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewSyncDocumentApi_H
#define OAI_OAIPreviewSyncDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncDocumentResponse.h"
#include "OAIPreview_sync_service_document.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewSyncDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewSyncDocumentApi(const int timeOut = 0);
    ~OAIPreviewSyncDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  data QJsonValue [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createSyncDocument(const QString &service_sid, const ::OpenAPI::OptionalParam<QJsonValue> &data = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSyncDocument(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSyncDocument(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncDocument(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  data QJsonValue [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateSyncDocument(const QString &service_sid, const QString &sid, const QJsonValue &data, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncDocumentCallback(OAIHttpRequestWorker *worker);
    void deleteSyncDocumentCallback(OAIHttpRequestWorker *worker);
    void fetchSyncDocumentCallback(OAIHttpRequestWorker *worker);
    void listSyncDocumentCallback(OAIHttpRequestWorker *worker);
    void updateSyncDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncDocumentSignal(OAIPreview_sync_service_document summary);
    void deleteSyncDocumentSignal();
    void fetchSyncDocumentSignal(OAIPreview_sync_service_document summary);
    void listSyncDocumentSignal(OAIListSyncDocumentResponse summary);
    void updateSyncDocumentSignal(OAIPreview_sync_service_document summary);


    void createSyncDocumentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_document summary);
    void deleteSyncDocumentSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncDocumentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_document summary);
    void listSyncDocumentSignalFull(OAIHttpRequestWorker *worker, OAIListSyncDocumentResponse summary);
    void updateSyncDocumentSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_document summary);

    Q_DECL_DEPRECATED_X("Use createSyncDocumentSignalError() instead")
    void createSyncDocumentSignalE(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncDocumentSignalError(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncDocumentSignalError() instead")
    void deleteSyncDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncDocumentSignalError() instead")
    void fetchSyncDocumentSignalE(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncDocumentSignalError(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncDocumentSignalError() instead")
    void listSyncDocumentSignalE(OAIListSyncDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncDocumentSignalError(OAIListSyncDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncDocumentSignalError() instead")
    void updateSyncDocumentSignalE(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncDocumentSignalError(OAIPreview_sync_service_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncDocumentSignalErrorFull() instead")
    void createSyncDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncDocumentSignalErrorFull() instead")
    void deleteSyncDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncDocumentSignalErrorFull() instead")
    void fetchSyncDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncDocumentSignalErrorFull() instead")
    void listSyncDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncDocumentSignalErrorFull() instead")
    void updateSyncDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
