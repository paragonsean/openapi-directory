/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPreviewSyncSyncMapApi_H
#define OAI_OAIPreviewSyncSyncMapApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncSyncMapResponse.h"
#include "OAIPreview_sync_service_sync_map.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPreviewSyncSyncMapApi : public QObject {
    Q_OBJECT

public:
    OAIPreviewSyncSyncMapApi(const int timeOut = 0);
    ~OAIPreviewSyncSyncMapApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createSyncSyncMap(const QString &service_sid, const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSyncSyncMap(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSyncSyncMap(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncSyncMap(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncSyncMapCallback(OAIHttpRequestWorker *worker);
    void deleteSyncSyncMapCallback(OAIHttpRequestWorker *worker);
    void fetchSyncSyncMapCallback(OAIHttpRequestWorker *worker);
    void listSyncSyncMapCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncSyncMapSignal(OAIPreview_sync_service_sync_map summary);
    void deleteSyncSyncMapSignal();
    void fetchSyncSyncMapSignal(OAIPreview_sync_service_sync_map summary);
    void listSyncSyncMapSignal(OAIListSyncSyncMapResponse summary);


    void createSyncSyncMapSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_map summary);
    void deleteSyncSyncMapSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncSyncMapSignalFull(OAIHttpRequestWorker *worker, OAIPreview_sync_service_sync_map summary);
    void listSyncSyncMapSignalFull(OAIHttpRequestWorker *worker, OAIListSyncSyncMapResponse summary);

    Q_DECL_DEPRECATED_X("Use createSyncSyncMapSignalError() instead")
    void createSyncSyncMapSignalE(OAIPreview_sync_service_sync_map summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncSyncMapSignalError(OAIPreview_sync_service_sync_map summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncSyncMapSignalError() instead")
    void deleteSyncSyncMapSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncMapSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncMapSignalError() instead")
    void fetchSyncSyncMapSignalE(OAIPreview_sync_service_sync_map summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncMapSignalError(OAIPreview_sync_service_sync_map summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncMapSignalError() instead")
    void listSyncSyncMapSignalE(OAIListSyncSyncMapResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncMapSignalError(OAIListSyncSyncMapResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncSyncMapSignalErrorFull() instead")
    void createSyncSyncMapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncSyncMapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncSyncMapSignalErrorFull() instead")
    void deleteSyncSyncMapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncSyncMapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncSyncMapSignalErrorFull() instead")
    void fetchSyncSyncMapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncSyncMapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncSyncMapSignalErrorFull() instead")
    void listSyncSyncMapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncSyncMapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
