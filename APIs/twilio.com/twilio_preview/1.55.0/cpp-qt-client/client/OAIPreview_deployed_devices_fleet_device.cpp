/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreview_deployed_devices_fleet_device.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreview_deployed_devices_fleet_device::OAIPreview_deployed_devices_fleet_device(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreview_deployed_devices_fleet_device::OAIPreview_deployed_devices_fleet_device() {
    this->initializeModel();
}

OAIPreview_deployed_devices_fleet_device::~OAIPreview_deployed_devices_fleet_device() {}

void OAIPreview_deployed_devices_fleet_device::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_authenticated_isSet = false;
    m_date_authenticated_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_deployment_sid_isSet = false;
    m_deployment_sid_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_fleet_sid_isSet = false;
    m_fleet_sid_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPreview_deployed_devices_fleet_device::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreview_deployed_devices_fleet_device::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_authenticated_isValid = ::OpenAPI::fromJsonValue(m_date_authenticated, json[QString("date_authenticated")]);
    m_date_authenticated_isSet = !json[QString("date_authenticated")].isNull() && m_date_authenticated_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_deployment_sid_isValid = ::OpenAPI::fromJsonValue(m_deployment_sid, json[QString("deployment_sid")]);
    m_deployment_sid_isSet = !json[QString("deployment_sid")].isNull() && m_deployment_sid_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_fleet_sid_isValid = ::OpenAPI::fromJsonValue(m_fleet_sid, json[QString("fleet_sid")]);
    m_fleet_sid_isSet = !json[QString("fleet_sid")].isNull() && m_fleet_sid_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreview_deployed_devices_fleet_device::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_authenticated_isSet) {
        obj.insert(QString("date_authenticated"), ::OpenAPI::toJsonValue(m_date_authenticated));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_deployment_sid_isSet) {
        obj.insert(QString("deployment_sid"), ::OpenAPI::toJsonValue(m_deployment_sid));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_fleet_sid_isSet) {
        obj.insert(QString("fleet_sid"), ::OpenAPI::toJsonValue(m_fleet_sid));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPreview_deployed_devices_fleet_device::getAccountSid() const {
    return m_account_sid;
}
void OAIPreview_deployed_devices_fleet_device::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIPreview_deployed_devices_fleet_device::getDateAuthenticated() const {
    return m_date_authenticated;
}
void OAIPreview_deployed_devices_fleet_device::setDateAuthenticated(const QDateTime &date_authenticated) {
    m_date_authenticated = date_authenticated;
    m_date_authenticated_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_authenticated_Set() const{
    return m_date_authenticated_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_authenticated_Valid() const{
    return m_date_authenticated_isValid;
}

QDateTime OAIPreview_deployed_devices_fleet_device::getDateCreated() const {
    return m_date_created;
}
void OAIPreview_deployed_devices_fleet_device::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIPreview_deployed_devices_fleet_device::getDateUpdated() const {
    return m_date_updated;
}
void OAIPreview_deployed_devices_fleet_device::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getDeploymentSid() const {
    return m_deployment_sid;
}
void OAIPreview_deployed_devices_fleet_device::setDeploymentSid(const QString &deployment_sid) {
    m_deployment_sid = deployment_sid;
    m_deployment_sid_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_deployment_sid_Set() const{
    return m_deployment_sid_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_deployment_sid_Valid() const{
    return m_deployment_sid_isValid;
}

bool OAIPreview_deployed_devices_fleet_device::isEnabled() const {
    return m_enabled;
}
void OAIPreview_deployed_devices_fleet_device::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getFleetSid() const {
    return m_fleet_sid;
}
void OAIPreview_deployed_devices_fleet_device::setFleetSid(const QString &fleet_sid) {
    m_fleet_sid = fleet_sid;
    m_fleet_sid_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_fleet_sid_Set() const{
    return m_fleet_sid_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_fleet_sid_Valid() const{
    return m_fleet_sid_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getFriendlyName() const {
    return m_friendly_name;
}
void OAIPreview_deployed_devices_fleet_device::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getIdentity() const {
    return m_identity;
}
void OAIPreview_deployed_devices_fleet_device::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_identity_Valid() const{
    return m_identity_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getSid() const {
    return m_sid;
}
void OAIPreview_deployed_devices_fleet_device::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getUniqueName() const {
    return m_unique_name;
}
void OAIPreview_deployed_devices_fleet_device::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIPreview_deployed_devices_fleet_device::getUrl() const {
    return m_url;
}
void OAIPreview_deployed_devices_fleet_device::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPreview_deployed_devices_fleet_device::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPreview_deployed_devices_fleet_device::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPreview_deployed_devices_fleet_device::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreview_deployed_devices_fleet_device::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
