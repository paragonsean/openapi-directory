/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListWirelessSimResponse from '../model/ListWirelessSimResponse';
import PreviewWirelessSim from '../model/PreviewWirelessSim';

/**
* PreviewWirelessSim service.
* @module api/PreviewWirelessSimApi
* @version 1.55.0
*/
export default class PreviewWirelessSimApi {

    /**
    * Constructs a new PreviewWirelessSimApi. 
    * @alias module:api/PreviewWirelessSimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchWirelessSim operation.
     * @callback module:api/PreviewWirelessSimApi~fetchWirelessSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewWirelessSim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid 
     * @param {module:api/PreviewWirelessSimApi~fetchWirelessSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewWirelessSim}
     */
    fetchWirelessSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWirelessSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreviewWirelessSim;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/wireless/Sims/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWirelessSim operation.
     * @callback module:api/PreviewWirelessSimApi~listWirelessSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWirelessSimResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [status] 
     * @param {String} [iccid] 
     * @param {String} [ratePlan] 
     * @param {String} [eId] 
     * @param {String} [simRegistrationCode] 
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PreviewWirelessSimApi~listWirelessSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWirelessSimResponse}
     */
    listWirelessSim(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'Iccid': opts['iccid'],
        'RatePlan': opts['ratePlan'],
        'EId': opts['eId'],
        'SimRegistrationCode': opts['simRegistrationCode'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWirelessSimResponse;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/wireless/Sims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWirelessSim operation.
     * @callback module:api/PreviewWirelessSimApi~updateWirelessSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewWirelessSim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid 
     * @param {Object} opts Optional parameters
     * @param {String} [callbackMethod] 
     * @param {String} [callbackUrl] 
     * @param {module:model/String} [commandsCallbackMethod] 
     * @param {String} [commandsCallbackUrl] 
     * @param {String} [friendlyName] 
     * @param {String} [ratePlan] 
     * @param {module:model/String} [smsFallbackMethod] 
     * @param {String} [smsFallbackUrl] 
     * @param {module:model/String} [smsMethod] 
     * @param {String} [smsUrl] 
     * @param {String} [status] 
     * @param {String} [uniqueName] 
     * @param {module:model/String} [voiceFallbackMethod] 
     * @param {String} [voiceFallbackUrl] 
     * @param {module:model/String} [voiceMethod] 
     * @param {String} [voiceUrl] 
     * @param {module:api/PreviewWirelessSimApi~updateWirelessSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewWirelessSim}
     */
    updateWirelessSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWirelessSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallbackMethod': opts['callbackMethod'],
        'CallbackUrl': opts['callbackUrl'],
        'CommandsCallbackMethod': opts['commandsCallbackMethod'],
        'CommandsCallbackUrl': opts['commandsCallbackUrl'],
        'FriendlyName': opts['friendlyName'],
        'RatePlan': opts['ratePlan'],
        'SmsFallbackMethod': opts['smsFallbackMethod'],
        'SmsFallbackUrl': opts['smsFallbackUrl'],
        'SmsMethod': opts['smsMethod'],
        'SmsUrl': opts['smsUrl'],
        'Status': opts['status'],
        'UniqueName': opts['uniqueName'],
        'VoiceFallbackMethod': opts['voiceFallbackMethod'],
        'VoiceFallbackUrl': opts['voiceFallbackUrl'],
        'VoiceMethod': opts['voiceMethod'],
        'VoiceUrl': opts['voiceUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PreviewWirelessSim;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/wireless/Sims/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
