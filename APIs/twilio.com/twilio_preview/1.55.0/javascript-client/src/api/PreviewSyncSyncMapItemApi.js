/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSyncSyncMapItemResponse from '../model/ListSyncSyncMapItemResponse';
import PreviewSyncServiceSyncMapSyncMapItem from '../model/PreviewSyncServiceSyncMapSyncMapItem';
import SyncMapItemEnumQueryFromBoundType from '../model/SyncMapItemEnumQueryFromBoundType';
import SyncMapItemEnumQueryResultOrder from '../model/SyncMapItemEnumQueryResultOrder';

/**
* PreviewSyncSyncMapItem service.
* @module api/PreviewSyncSyncMapItemApi
* @version 1.55.0
*/
export default class PreviewSyncSyncMapItemApi {

    /**
    * Constructs a new PreviewSyncSyncMapItemApi. 
    * @alias module:api/PreviewSyncSyncMapItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSyncSyncMapItem operation.
     * @callback module:api/PreviewSyncSyncMapItemApi~createSyncSyncMapItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewSyncServiceSyncMapSyncMapItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} mapSid 
     * @param {Object} data 
     * @param {String} key 
     * @param {module:api/PreviewSyncSyncMapItemApi~createSyncSyncMapItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewSyncServiceSyncMapSyncMapItem}
     */
    createSyncSyncMapItem(serviceSid, mapSid, data, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createSyncSyncMapItem");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling createSyncSyncMapItem");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSyncSyncMapItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createSyncSyncMapItem");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Data': data,
        'Key': key
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PreviewSyncServiceSyncMapSyncMapItem;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSyncSyncMapItem operation.
     * @callback module:api/PreviewSyncSyncMapItemApi~deleteSyncSyncMapItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} mapSid 
     * @param {String} key 
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The If-Match HTTP request header
     * @param {module:api/PreviewSyncSyncMapItemApi~deleteSyncSyncMapItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSyncSyncMapItem(serviceSid, mapSid, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteSyncSyncMapItem");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling deleteSyncSyncMapItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteSyncSyncMapItem");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSyncSyncMapItem operation.
     * @callback module:api/PreviewSyncSyncMapItemApi~fetchSyncSyncMapItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewSyncServiceSyncMapSyncMapItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} mapSid 
     * @param {String} key 
     * @param {module:api/PreviewSyncSyncMapItemApi~fetchSyncSyncMapItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewSyncServiceSyncMapSyncMapItem}
     */
    fetchSyncSyncMapItem(serviceSid, mapSid, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchSyncSyncMapItem");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling fetchSyncSyncMapItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling fetchSyncSyncMapItem");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreviewSyncServiceSyncMapSyncMapItem;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSyncSyncMapItem operation.
     * @callback module:api/PreviewSyncSyncMapItemApi~listSyncSyncMapItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSyncSyncMapItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} mapSid 
     * @param {Object} opts Optional parameters
     * @param {module:model/SyncMapItemEnumQueryResultOrder} [order] 
     * @param {String} [from] 
     * @param {module:model/SyncMapItemEnumQueryFromBoundType} [bounds] 
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PreviewSyncSyncMapItemApi~listSyncSyncMapItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSyncSyncMapItemResponse}
     */
    listSyncSyncMapItem(serviceSid, mapSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listSyncSyncMapItem");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling listSyncSyncMapItem");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid
      };
      let queryParams = {
        'Order': opts['order'],
        'From': opts['from'],
        'Bounds': opts['bounds'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSyncSyncMapItemResponse;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSyncSyncMapItem operation.
     * @callback module:api/PreviewSyncSyncMapItemApi~updateSyncSyncMapItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewSyncServiceSyncMapSyncMapItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} mapSid 
     * @param {String} key 
     * @param {Object} data 
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The If-Match HTTP request header
     * @param {module:api/PreviewSyncSyncMapItemApi~updateSyncSyncMapItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewSyncServiceSyncMapSyncMapItem}
     */
    updateSyncSyncMapItem(serviceSid, mapSid, key, data, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateSyncSyncMapItem");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling updateSyncSyncMapItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateSyncSyncMapItem");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSyncSyncMapItem");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
        'Data': data
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PreviewSyncServiceSyncMapSyncMapItem;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
