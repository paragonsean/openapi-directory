/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSyncDocumentPermissionResponse from '../model/ListSyncDocumentPermissionResponse';
import PreviewSyncServiceDocumentDocumentPermission from '../model/PreviewSyncServiceDocumentDocumentPermission';

/**
* PreviewSyncDocumentPermission service.
* @module api/PreviewSyncDocumentPermissionApi
* @version 1.55.0
*/
export default class PreviewSyncDocumentPermissionApi {

    /**
    * Constructs a new PreviewSyncDocumentPermissionApi. 
    * @alias module:api/PreviewSyncDocumentPermissionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSyncDocumentPermission operation.
     * @callback module:api/PreviewSyncDocumentPermissionApi~deleteSyncDocumentPermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Sync Document Permission.
     * @param {String} serviceSid 
     * @param {String} documentSid Identifier of the Sync Document. Either a SID or a unique name.
     * @param {String} identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
     * @param {module:api/PreviewSyncDocumentPermissionApi~deleteSyncDocumentPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSyncDocumentPermission(serviceSid, documentSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteSyncDocumentPermission");
      }
      // verify the required parameter 'documentSid' is set
      if (documentSid === undefined || documentSid === null) {
        throw new Error("Missing the required parameter 'documentSid' when calling deleteSyncDocumentPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling deleteSyncDocumentPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'DocumentSid': documentSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSyncDocumentPermission operation.
     * @callback module:api/PreviewSyncDocumentPermissionApi~fetchSyncDocumentPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewSyncServiceDocumentDocumentPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Sync Document Permission.
     * @param {String} serviceSid 
     * @param {String} documentSid Identifier of the Sync Document. Either a SID or a unique name.
     * @param {String} identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer.
     * @param {module:api/PreviewSyncDocumentPermissionApi~fetchSyncDocumentPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewSyncServiceDocumentDocumentPermission}
     */
    fetchSyncDocumentPermission(serviceSid, documentSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchSyncDocumentPermission");
      }
      // verify the required parameter 'documentSid' is set
      if (documentSid === undefined || documentSid === null) {
        throw new Error("Missing the required parameter 'documentSid' when calling fetchSyncDocumentPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling fetchSyncDocumentPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'DocumentSid': documentSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreviewSyncServiceDocumentDocumentPermission;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSyncDocumentPermission operation.
     * @callback module:api/PreviewSyncDocumentPermissionApi~listSyncDocumentPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSyncDocumentPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * @param {String} serviceSid 
     * @param {String} documentSid Identifier of the Sync Document. Either a SID or a unique name.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PreviewSyncDocumentPermissionApi~listSyncDocumentPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSyncDocumentPermissionResponse}
     */
    listSyncDocumentPermission(serviceSid, documentSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listSyncDocumentPermission");
      }
      // verify the required parameter 'documentSid' is set
      if (documentSid === undefined || documentSid === null) {
        throw new Error("Missing the required parameter 'documentSid' when calling listSyncDocumentPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'DocumentSid': documentSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSyncDocumentPermissionResponse;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSyncDocumentPermission operation.
     * @callback module:api/PreviewSyncDocumentPermissionApi~updateSyncDocumentPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewSyncServiceDocumentDocumentPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an identity's access to a specific Sync Document.
     * @param {String} serviceSid The unique SID identifier of the Sync Service Instance.
     * @param {String} documentSid Identifier of the Sync Document. Either a SID or a unique name.
     * @param {String} identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.
     * @param {Boolean} manage Boolean flag specifying whether the identity can delete the Sync Document.
     * @param {Boolean} read Boolean flag specifying whether the identity can read the Sync Document.
     * @param {Boolean} write Boolean flag specifying whether the identity can update the Sync Document.
     * @param {module:api/PreviewSyncDocumentPermissionApi~updateSyncDocumentPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewSyncServiceDocumentDocumentPermission}
     */
    updateSyncDocumentPermission(serviceSid, documentSid, identity, manage, read, write, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateSyncDocumentPermission");
      }
      // verify the required parameter 'documentSid' is set
      if (documentSid === undefined || documentSid === null) {
        throw new Error("Missing the required parameter 'documentSid' when calling updateSyncDocumentPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling updateSyncDocumentPermission");
      }
      // verify the required parameter 'manage' is set
      if (manage === undefined || manage === null) {
        throw new Error("Missing the required parameter 'manage' when calling updateSyncDocumentPermission");
      }
      // verify the required parameter 'read' is set
      if (read === undefined || read === null) {
        throw new Error("Missing the required parameter 'read' when calling updateSyncDocumentPermission");
      }
      // verify the required parameter 'write' is set
      if (write === undefined || write === null) {
        throw new Error("Missing the required parameter 'write' when calling updateSyncDocumentPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'DocumentSid': documentSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Manage': manage,
        'Read': read,
        'Write': write
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PreviewSyncServiceDocumentDocumentPermission;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
