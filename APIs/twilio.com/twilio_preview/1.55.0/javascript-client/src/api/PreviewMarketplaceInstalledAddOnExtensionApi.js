/**
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMarketplaceInstalledAddOnExtensionResponse from '../model/ListMarketplaceInstalledAddOnExtensionResponse';
import PreviewMarketplaceInstalledAddOnInstalledAddOnExtension from '../model/PreviewMarketplaceInstalledAddOnInstalledAddOnExtension';

/**
* PreviewMarketplaceInstalledAddOnExtension service.
* @module api/PreviewMarketplaceInstalledAddOnExtensionApi
* @version 1.55.0
*/
export default class PreviewMarketplaceInstalledAddOnExtensionApi {

    /**
    * Constructs a new PreviewMarketplaceInstalledAddOnExtensionApi. 
    * @alias module:api/PreviewMarketplaceInstalledAddOnExtensionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchMarketplaceInstalledAddOnExtension operation.
     * @callback module:api/PreviewMarketplaceInstalledAddOnExtensionApi~fetchMarketplaceInstalledAddOnExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewMarketplaceInstalledAddOnInstalledAddOnExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an instance of an Extension for the Installed Add-on.
     * @param {String} installedAddOnSid The SID of the InstalledAddOn resource with the extension to fetch.
     * @param {String} sid The SID of the InstalledAddOn Extension resource to fetch.
     * @param {module:api/PreviewMarketplaceInstalledAddOnExtensionApi~fetchMarketplaceInstalledAddOnExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewMarketplaceInstalledAddOnInstalledAddOnExtension}
     */
    fetchMarketplaceInstalledAddOnExtension(installedAddOnSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'installedAddOnSid' is set
      if (installedAddOnSid === undefined || installedAddOnSid === null) {
        throw new Error("Missing the required parameter 'installedAddOnSid' when calling fetchMarketplaceInstalledAddOnExtension");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMarketplaceInstalledAddOnExtension");
      }

      let pathParams = {
        'InstalledAddOnSid': installedAddOnSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreviewMarketplaceInstalledAddOnInstalledAddOnExtension;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMarketplaceInstalledAddOnExtension operation.
     * @callback module:api/PreviewMarketplaceInstalledAddOnExtensionApi~listMarketplaceInstalledAddOnExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMarketplaceInstalledAddOnExtensionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Extensions for the Installed Add-on.
     * @param {String} installedAddOnSid The SID of the InstalledAddOn resource with the extensions to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PreviewMarketplaceInstalledAddOnExtensionApi~listMarketplaceInstalledAddOnExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMarketplaceInstalledAddOnExtensionResponse}
     */
    listMarketplaceInstalledAddOnExtension(installedAddOnSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'installedAddOnSid' is set
      if (installedAddOnSid === undefined || installedAddOnSid === null) {
        throw new Error("Missing the required parameter 'installedAddOnSid' when calling listMarketplaceInstalledAddOnExtension");
      }

      let pathParams = {
        'InstalledAddOnSid': installedAddOnSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMarketplaceInstalledAddOnExtensionResponse;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMarketplaceInstalledAddOnExtension operation.
     * @callback module:api/PreviewMarketplaceInstalledAddOnExtensionApi~updateMarketplaceInstalledAddOnExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewMarketplaceInstalledAddOnInstalledAddOnExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Extension for an Add-on installation.
     * @param {String} installedAddOnSid The SID of the InstalledAddOn resource with the extension to update.
     * @param {String} sid The SID of the InstalledAddOn Extension resource to update.
     * @param {Boolean} enabled Whether the Extension should be invoked.
     * @param {module:api/PreviewMarketplaceInstalledAddOnExtensionApi~updateMarketplaceInstalledAddOnExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewMarketplaceInstalledAddOnInstalledAddOnExtension}
     */
    updateMarketplaceInstalledAddOnExtension(installedAddOnSid, sid, enabled, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'installedAddOnSid' is set
      if (installedAddOnSid === undefined || installedAddOnSid === null) {
        throw new Error("Missing the required parameter 'installedAddOnSid' when calling updateMarketplaceInstalledAddOnExtension");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateMarketplaceInstalledAddOnExtension");
      }
      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateMarketplaceInstalledAddOnExtension");
      }

      let pathParams = {
        'InstalledAddOnSid': installedAddOnSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Enabled': enabled
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PreviewMarketplaceInstalledAddOnInstalledAddOnExtension;
      let basePaths = ['https://preview.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
