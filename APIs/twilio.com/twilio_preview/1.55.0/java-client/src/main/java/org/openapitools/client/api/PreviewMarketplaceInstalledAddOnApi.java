/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListMarketplaceInstalledAddOnResponse;
import org.openapitools.client.model.PreviewMarketplaceInstalledAddOn;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewMarketplaceInstalledAddOnApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewMarketplaceInstalledAddOnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewMarketplaceInstalledAddOnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMarketplaceInstalledAddOn
     * @param acceptTermsOfService Whether the Terms of Service were accepted. (required)
     * @param availableAddOnSid The SID of the AvaliableAddOn to install. (required)
     * @param _configuration The JSON object that represents the configuration of the new Add-on being installed. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceInstalledAddOnCall(Boolean acceptTermsOfService, String availableAddOnSid, Object _configuration, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/InstalledAddOns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptTermsOfService != null) {
            localVarFormParams.put("AcceptTermsOfService", acceptTermsOfService);
        }

        if (availableAddOnSid != null) {
            localVarFormParams.put("AvailableAddOnSid", availableAddOnSid);
        }

        if (_configuration != null) {
            localVarFormParams.put("Configuration", _configuration);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMarketplaceInstalledAddOnValidateBeforeCall(Boolean acceptTermsOfService, String availableAddOnSid, Object _configuration, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'acceptTermsOfService' is set
        if (acceptTermsOfService == null) {
            throw new ApiException("Missing the required parameter 'acceptTermsOfService' when calling createMarketplaceInstalledAddOn(Async)");
        }

        // verify the required parameter 'availableAddOnSid' is set
        if (availableAddOnSid == null) {
            throw new ApiException("Missing the required parameter 'availableAddOnSid' when calling createMarketplaceInstalledAddOn(Async)");
        }

        return createMarketplaceInstalledAddOnCall(acceptTermsOfService, availableAddOnSid, _configuration, uniqueName, _callback);

    }

    /**
     * 
     * Install an Add-on for the Account specified.
     * @param acceptTermsOfService Whether the Terms of Service were accepted. (required)
     * @param availableAddOnSid The SID of the AvaliableAddOn to install. (required)
     * @param _configuration The JSON object that represents the configuration of the new Add-on being installed. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @return PreviewMarketplaceInstalledAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PreviewMarketplaceInstalledAddOn createMarketplaceInstalledAddOn(Boolean acceptTermsOfService, String availableAddOnSid, Object _configuration, String uniqueName) throws ApiException {
        ApiResponse<PreviewMarketplaceInstalledAddOn> localVarResp = createMarketplaceInstalledAddOnWithHttpInfo(acceptTermsOfService, availableAddOnSid, _configuration, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Install an Add-on for the Account specified.
     * @param acceptTermsOfService Whether the Terms of Service were accepted. (required)
     * @param availableAddOnSid The SID of the AvaliableAddOn to install. (required)
     * @param _configuration The JSON object that represents the configuration of the new Add-on being installed. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @return ApiResponse&lt;PreviewMarketplaceInstalledAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewMarketplaceInstalledAddOn> createMarketplaceInstalledAddOnWithHttpInfo(Boolean acceptTermsOfService, String availableAddOnSid, Object _configuration, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createMarketplaceInstalledAddOnValidateBeforeCall(acceptTermsOfService, availableAddOnSid, _configuration, uniqueName, null);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Install an Add-on for the Account specified.
     * @param acceptTermsOfService Whether the Terms of Service were accepted. (required)
     * @param availableAddOnSid The SID of the AvaliableAddOn to install. (required)
     * @param _configuration The JSON object that represents the configuration of the new Add-on being installed. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMarketplaceInstalledAddOnAsync(Boolean acceptTermsOfService, String availableAddOnSid, Object _configuration, String uniqueName, final ApiCallback<PreviewMarketplaceInstalledAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMarketplaceInstalledAddOnValidateBeforeCall(acceptTermsOfService, availableAddOnSid, _configuration, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMarketplaceInstalledAddOn
     * @param sid The SID of the InstalledAddOn resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMarketplaceInstalledAddOnCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/InstalledAddOns/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMarketplaceInstalledAddOnValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteMarketplaceInstalledAddOn(Async)");
        }

        return deleteMarketplaceInstalledAddOnCall(sid, _callback);

    }

    /**
     * 
     * Remove an Add-on installation from your account
     * @param sid The SID of the InstalledAddOn resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMarketplaceInstalledAddOn(String sid) throws ApiException {
        deleteMarketplaceInstalledAddOnWithHttpInfo(sid);
    }

    /**
     * 
     * Remove an Add-on installation from your account
     * @param sid The SID of the InstalledAddOn resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMarketplaceInstalledAddOnWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteMarketplaceInstalledAddOnValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Add-on installation from your account
     * @param sid The SID of the InstalledAddOn resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMarketplaceInstalledAddOnAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMarketplaceInstalledAddOnValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMarketplaceInstalledAddOn
     * @param sid The SID of the InstalledAddOn resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMarketplaceInstalledAddOnCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/InstalledAddOns/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMarketplaceInstalledAddOnValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchMarketplaceInstalledAddOn(Async)");
        }

        return fetchMarketplaceInstalledAddOnCall(sid, _callback);

    }

    /**
     * 
     * Fetch an instance of an Add-on currently installed on this Account.
     * @param sid The SID of the InstalledAddOn resource to fetch. (required)
     * @return PreviewMarketplaceInstalledAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewMarketplaceInstalledAddOn fetchMarketplaceInstalledAddOn(String sid) throws ApiException {
        ApiResponse<PreviewMarketplaceInstalledAddOn> localVarResp = fetchMarketplaceInstalledAddOnWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of an Add-on currently installed on this Account.
     * @param sid The SID of the InstalledAddOn resource to fetch. (required)
     * @return ApiResponse&lt;PreviewMarketplaceInstalledAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewMarketplaceInstalledAddOn> fetchMarketplaceInstalledAddOnWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchMarketplaceInstalledAddOnValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of an Add-on currently installed on this Account.
     * @param sid The SID of the InstalledAddOn resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMarketplaceInstalledAddOnAsync(String sid, final ApiCallback<PreviewMarketplaceInstalledAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMarketplaceInstalledAddOnValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMarketplaceInstalledAddOn
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMarketplaceInstalledAddOnCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/InstalledAddOns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMarketplaceInstalledAddOnValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listMarketplaceInstalledAddOnCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Add-ons currently installed on this Account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListMarketplaceInstalledAddOnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMarketplaceInstalledAddOnResponse listMarketplaceInstalledAddOn(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListMarketplaceInstalledAddOnResponse> localVarResp = listMarketplaceInstalledAddOnWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Add-ons currently installed on this Account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListMarketplaceInstalledAddOnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMarketplaceInstalledAddOnResponse> listMarketplaceInstalledAddOnWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listMarketplaceInstalledAddOnValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListMarketplaceInstalledAddOnResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Add-ons currently installed on this Account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMarketplaceInstalledAddOnAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListMarketplaceInstalledAddOnResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMarketplaceInstalledAddOnValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListMarketplaceInstalledAddOnResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMarketplaceInstalledAddOn
     * @param sid The SID of the InstalledAddOn resource to update. (required)
     * @param _configuration Valid JSON object that conform to the configuration schema exposed by the associated AvailableAddOn resource. This is only required by Add-ons that need to be configured (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceInstalledAddOnCall(String sid, Object _configuration, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/InstalledAddOns/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_configuration != null) {
            localVarFormParams.put("Configuration", _configuration);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMarketplaceInstalledAddOnValidateBeforeCall(String sid, Object _configuration, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateMarketplaceInstalledAddOn(Async)");
        }

        return updateMarketplaceInstalledAddOnCall(sid, _configuration, uniqueName, _callback);

    }

    /**
     * 
     * Update an Add-on installation for the Account specified.
     * @param sid The SID of the InstalledAddOn resource to update. (required)
     * @param _configuration Valid JSON object that conform to the configuration schema exposed by the associated AvailableAddOn resource. This is only required by Add-ons that need to be configured (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @return PreviewMarketplaceInstalledAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewMarketplaceInstalledAddOn updateMarketplaceInstalledAddOn(String sid, Object _configuration, String uniqueName) throws ApiException {
        ApiResponse<PreviewMarketplaceInstalledAddOn> localVarResp = updateMarketplaceInstalledAddOnWithHttpInfo(sid, _configuration, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Add-on installation for the Account specified.
     * @param sid The SID of the InstalledAddOn resource to update. (required)
     * @param _configuration Valid JSON object that conform to the configuration schema exposed by the associated AvailableAddOn resource. This is only required by Add-ons that need to be configured (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @return ApiResponse&lt;PreviewMarketplaceInstalledAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewMarketplaceInstalledAddOn> updateMarketplaceInstalledAddOnWithHttpInfo(String sid, Object _configuration, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateMarketplaceInstalledAddOnValidateBeforeCall(sid, _configuration, uniqueName, null);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Add-on installation for the Account specified.
     * @param sid The SID of the InstalledAddOn resource to update. (required)
     * @param _configuration Valid JSON object that conform to the configuration schema exposed by the associated AvailableAddOn resource. This is only required by Add-ons that need to be configured (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. This value must be unique within the Account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMarketplaceInstalledAddOnAsync(String sid, Object _configuration, String uniqueName, final ApiCallback<PreviewMarketplaceInstalledAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMarketplaceInstalledAddOnValidateBeforeCall(sid, _configuration, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<PreviewMarketplaceInstalledAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
