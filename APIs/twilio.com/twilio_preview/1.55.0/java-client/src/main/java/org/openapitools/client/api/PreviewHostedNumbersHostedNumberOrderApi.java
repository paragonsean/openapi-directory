/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HostedNumberOrderEnumStatus;
import org.openapitools.client.model.HostedNumberOrderEnumVerificationType;
import org.openapitools.client.model.ListHostedNumbersHostedNumberOrderResponse;
import org.openapitools.client.model.PreviewHostedNumbersHostedNumberOrder;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewHostedNumbersHostedNumberOrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewHostedNumbersHostedNumberOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewHostedNumbersHostedNumberOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createHostedNumbersHostedNumberOrder
     * @param phoneNumber The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format (required)
     * @param smsCapability Used to specify that the SMS capability will be hosted on Twilio&#39;s platform. (required)
     * @param accountSid This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. (optional)
     * @param addressSid Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. (optional)
     * @param ccEmails Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Optional. Email of the owner of this phone number that is being hosted. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param smsApplicationSid Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a &#x60;SmsApplicationSid&#x60; is present, Twilio will ignore all of the SMS urls above and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that should be used to request the SmsFallbackUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsFallbackUrl A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsMethod The HTTP method that should be used to request the SmsUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;.  This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsUrl The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackMethod Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackUrl Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. (optional)
     * @param uniqueName Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedNumbersHostedNumberOrderCall(String phoneNumber, Boolean smsCapability, String accountSid, String addressSid, List<String> ccEmails, String email, String friendlyName, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String statusCallbackMethod, URI statusCallbackUrl, String uniqueName, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/HostedNumberOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid != null) {
            localVarFormParams.put("AccountSid", accountSid);
        }

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (ccEmails != null) {
            localVarFormParams.put("CcEmails", ccEmails);
        }

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (phoneNumber != null) {
            localVarFormParams.put("PhoneNumber", phoneNumber);
        }

        if (smsApplicationSid != null) {
            localVarFormParams.put("SmsApplicationSid", smsApplicationSid);
        }

        if (smsCapability != null) {
            localVarFormParams.put("SmsCapability", smsCapability);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (statusCallbackUrl != null) {
            localVarFormParams.put("StatusCallbackUrl", statusCallbackUrl);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (verificationDocumentSid != null) {
            localVarFormParams.put("VerificationDocumentSid", verificationDocumentSid);
        }

        if (verificationType != null) {
            localVarFormParams.put("VerificationType", verificationType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHostedNumbersHostedNumberOrderValidateBeforeCall(String phoneNumber, Boolean smsCapability, String accountSid, String addressSid, List<String> ccEmails, String email, String friendlyName, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String statusCallbackMethod, URI statusCallbackUrl, String uniqueName, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling createHostedNumbersHostedNumberOrder(Async)");
        }

        // verify the required parameter 'smsCapability' is set
        if (smsCapability == null) {
            throw new ApiException("Missing the required parameter 'smsCapability' when calling createHostedNumbersHostedNumberOrder(Async)");
        }

        return createHostedNumbersHostedNumberOrderCall(phoneNumber, smsCapability, accountSid, addressSid, ccEmails, email, friendlyName, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallbackMethod, statusCallbackUrl, uniqueName, verificationDocumentSid, verificationType, _callback);

    }

    /**
     * 
     * Host a phone number&#39;s capability on Twilio&#39;s platform.
     * @param phoneNumber The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format (required)
     * @param smsCapability Used to specify that the SMS capability will be hosted on Twilio&#39;s platform. (required)
     * @param accountSid This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. (optional)
     * @param addressSid Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. (optional)
     * @param ccEmails Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Optional. Email of the owner of this phone number that is being hosted. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param smsApplicationSid Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a &#x60;SmsApplicationSid&#x60; is present, Twilio will ignore all of the SMS urls above and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that should be used to request the SmsFallbackUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsFallbackUrl A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsMethod The HTTP method that should be used to request the SmsUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;.  This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsUrl The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackMethod Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackUrl Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. (optional)
     * @param uniqueName Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @return PreviewHostedNumbersHostedNumberOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersHostedNumberOrder createHostedNumbersHostedNumberOrder(String phoneNumber, Boolean smsCapability, String accountSid, String addressSid, List<String> ccEmails, String email, String friendlyName, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String statusCallbackMethod, URI statusCallbackUrl, String uniqueName, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType) throws ApiException {
        ApiResponse<PreviewHostedNumbersHostedNumberOrder> localVarResp = createHostedNumbersHostedNumberOrderWithHttpInfo(phoneNumber, smsCapability, accountSid, addressSid, ccEmails, email, friendlyName, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallbackMethod, statusCallbackUrl, uniqueName, verificationDocumentSid, verificationType);
        return localVarResp.getData();
    }

    /**
     * 
     * Host a phone number&#39;s capability on Twilio&#39;s platform.
     * @param phoneNumber The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format (required)
     * @param smsCapability Used to specify that the SMS capability will be hosted on Twilio&#39;s platform. (required)
     * @param accountSid This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. (optional)
     * @param addressSid Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. (optional)
     * @param ccEmails Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Optional. Email of the owner of this phone number that is being hosted. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param smsApplicationSid Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a &#x60;SmsApplicationSid&#x60; is present, Twilio will ignore all of the SMS urls above and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that should be used to request the SmsFallbackUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsFallbackUrl A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsMethod The HTTP method that should be used to request the SmsUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;.  This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsUrl The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackMethod Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackUrl Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. (optional)
     * @param uniqueName Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @return ApiResponse&lt;PreviewHostedNumbersHostedNumberOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersHostedNumberOrder> createHostedNumbersHostedNumberOrderWithHttpInfo(String phoneNumber, Boolean smsCapability, String accountSid, String addressSid, List<String> ccEmails, String email, String friendlyName, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String statusCallbackMethod, URI statusCallbackUrl, String uniqueName, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType) throws ApiException {
        okhttp3.Call localVarCall = createHostedNumbersHostedNumberOrderValidateBeforeCall(phoneNumber, smsCapability, accountSid, addressSid, ccEmails, email, friendlyName, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallbackMethod, statusCallbackUrl, uniqueName, verificationDocumentSid, verificationType, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Host a phone number&#39;s capability on Twilio&#39;s platform.
     * @param phoneNumber The number to host in [+E.164](https://en.wikipedia.org/wiki/E.164) format (required)
     * @param smsCapability Used to specify that the SMS capability will be hosted on Twilio&#39;s platform. (required)
     * @param accountSid This defaults to the AccountSid of the authorization the user is using. This can be provided to specify a subaccount to add the HostedNumberOrder to. (optional)
     * @param addressSid Optional. A 34 character string that uniquely identifies the Address resource that represents the address of the owner of this phone number. (optional)
     * @param ccEmails Optional. A list of emails that the LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Optional. Email of the owner of this phone number that is being hosted. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param smsApplicationSid Optional. The 34 character sid of the application Twilio should use to handle SMS messages sent to this number. If a &#x60;SmsApplicationSid&#x60; is present, Twilio will ignore all of the SMS urls above and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that should be used to request the SmsFallbackUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsFallbackUrl A URL that Twilio will request if an error occurs requesting or executing the TwiML defined by SmsUrl. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsMethod The HTTP method that should be used to request the SmsUrl. Must be either &#x60;GET&#x60; or &#x60;POST&#x60;.  This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param smsUrl The URL that Twilio should request when somebody sends an SMS to the phone number. This will be copied onto the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackMethod Optional. The Status Callback Method attached to the IncomingPhoneNumber resource. (optional)
     * @param statusCallbackUrl Optional. The Status Callback URL attached to the IncomingPhoneNumber resource. (optional)
     * @param uniqueName Optional. Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedNumbersHostedNumberOrderAsync(String phoneNumber, Boolean smsCapability, String accountSid, String addressSid, List<String> ccEmails, String email, String friendlyName, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String statusCallbackMethod, URI statusCallbackUrl, String uniqueName, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback<PreviewHostedNumbersHostedNumberOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHostedNumbersHostedNumberOrderValidateBeforeCall(phoneNumber, smsCapability, accountSid, addressSid, ccEmails, email, friendlyName, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallbackMethod, statusCallbackUrl, uniqueName, verificationDocumentSid, verificationType, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHostedNumbersHostedNumberOrder
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHostedNumbersHostedNumberOrderCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/HostedNumberOrders/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHostedNumbersHostedNumberOrderValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteHostedNumbersHostedNumberOrder(Async)");
        }

        return deleteHostedNumbersHostedNumberOrderCall(sid, _callback);

    }

    /**
     * 
     * Cancel the HostedNumberOrder (only available when the status is in &#x60;received&#x60;).
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHostedNumbersHostedNumberOrder(String sid) throws ApiException {
        deleteHostedNumbersHostedNumberOrderWithHttpInfo(sid);
    }

    /**
     * 
     * Cancel the HostedNumberOrder (only available when the status is in &#x60;received&#x60;).
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHostedNumbersHostedNumberOrderWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteHostedNumbersHostedNumberOrderValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel the HostedNumberOrder (only available when the status is in &#x60;received&#x60;).
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHostedNumbersHostedNumberOrderAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHostedNumbersHostedNumberOrderValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHostedNumbersHostedNumberOrder
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHostedNumbersHostedNumberOrderCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/HostedNumberOrders/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHostedNumbersHostedNumberOrderValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchHostedNumbersHostedNumberOrder(Async)");
        }

        return fetchHostedNumbersHostedNumberOrderCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @return PreviewHostedNumbersHostedNumberOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersHostedNumberOrder fetchHostedNumbersHostedNumberOrder(String sid) throws ApiException {
        ApiResponse<PreviewHostedNumbersHostedNumberOrder> localVarResp = fetchHostedNumbersHostedNumberOrderWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @return ApiResponse&lt;PreviewHostedNumbersHostedNumberOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersHostedNumberOrder> fetchHostedNumbersHostedNumberOrderWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchHostedNumbersHostedNumberOrderValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHostedNumbersHostedNumberOrderAsync(String sid, final ApiCallback<PreviewHostedNumbersHostedNumberOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHostedNumbersHostedNumberOrderValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostedNumbersHostedNumberOrder
     * @param status The Status of this HostedNumberOrder. One of &#x60;received&#x60;, &#x60;pending-verification&#x60;, &#x60;verified&#x60;, &#x60;pending-loa&#x60;, &#x60;carrier-processing&#x60;, &#x60;testing&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, or &#x60;action-required&#x60;. (optional)
     * @param phoneNumber An E164 formatted phone number hosted by this HostedNumberOrder. (optional)
     * @param incomingPhoneNumberSid A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder. (optional)
     * @param friendlyName A human readable description of this resource, up to 64 characters. (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedNumbersHostedNumberOrderCall(HostedNumberOrderEnumStatus status, String phoneNumber, String incomingPhoneNumberSid, String friendlyName, String uniqueName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/HostedNumberOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (incomingPhoneNumberSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncomingPhoneNumberSid", incomingPhoneNumberSid));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (uniqueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UniqueName", uniqueName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostedNumbersHostedNumberOrderValidateBeforeCall(HostedNumberOrderEnumStatus status, String phoneNumber, String incomingPhoneNumberSid, String friendlyName, String uniqueName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listHostedNumbersHostedNumberOrderCall(status, phoneNumber, incomingPhoneNumberSid, friendlyName, uniqueName, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * @param status The Status of this HostedNumberOrder. One of &#x60;received&#x60;, &#x60;pending-verification&#x60;, &#x60;verified&#x60;, &#x60;pending-loa&#x60;, &#x60;carrier-processing&#x60;, &#x60;testing&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, or &#x60;action-required&#x60;. (optional)
     * @param phoneNumber An E164 formatted phone number hosted by this HostedNumberOrder. (optional)
     * @param incomingPhoneNumberSid A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder. (optional)
     * @param friendlyName A human readable description of this resource, up to 64 characters. (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListHostedNumbersHostedNumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHostedNumbersHostedNumberOrderResponse listHostedNumbersHostedNumberOrder(HostedNumberOrderEnumStatus status, String phoneNumber, String incomingPhoneNumberSid, String friendlyName, String uniqueName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListHostedNumbersHostedNumberOrderResponse> localVarResp = listHostedNumbersHostedNumberOrderWithHttpInfo(status, phoneNumber, incomingPhoneNumberSid, friendlyName, uniqueName, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * @param status The Status of this HostedNumberOrder. One of &#x60;received&#x60;, &#x60;pending-verification&#x60;, &#x60;verified&#x60;, &#x60;pending-loa&#x60;, &#x60;carrier-processing&#x60;, &#x60;testing&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, or &#x60;action-required&#x60;. (optional)
     * @param phoneNumber An E164 formatted phone number hosted by this HostedNumberOrder. (optional)
     * @param incomingPhoneNumberSid A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder. (optional)
     * @param friendlyName A human readable description of this resource, up to 64 characters. (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListHostedNumbersHostedNumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHostedNumbersHostedNumberOrderResponse> listHostedNumbersHostedNumberOrderWithHttpInfo(HostedNumberOrderEnumStatus status, String phoneNumber, String incomingPhoneNumberSid, String friendlyName, String uniqueName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listHostedNumbersHostedNumberOrderValidateBeforeCall(status, phoneNumber, incomingPhoneNumberSid, friendlyName, uniqueName, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListHostedNumbersHostedNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * @param status The Status of this HostedNumberOrder. One of &#x60;received&#x60;, &#x60;pending-verification&#x60;, &#x60;verified&#x60;, &#x60;pending-loa&#x60;, &#x60;carrier-processing&#x60;, &#x60;testing&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, or &#x60;action-required&#x60;. (optional)
     * @param phoneNumber An E164 formatted phone number hosted by this HostedNumberOrder. (optional)
     * @param incomingPhoneNumberSid A 34 character string that uniquely identifies the IncomingPhoneNumber resource created by this HostedNumberOrder. (optional)
     * @param friendlyName A human readable description of this resource, up to 64 characters. (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedNumbersHostedNumberOrderAsync(HostedNumberOrderEnumStatus status, String phoneNumber, String incomingPhoneNumberSid, String friendlyName, String uniqueName, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListHostedNumbersHostedNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostedNumbersHostedNumberOrderValidateBeforeCall(status, phoneNumber, incomingPhoneNumberSid, friendlyName, uniqueName, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListHostedNumbersHostedNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostedNumbersHostedNumberOrder
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param callDelay The number of seconds, between 0 and 60, to delay before initiating the verification call. Defaults to 0. (optional)
     * @param ccEmails Optional. A list of emails that LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Email of the owner of this phone number that is being hosted. (optional)
     * @param extension Digits to dial after connecting the verification call. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param status  (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationCode A verification code that is given to the user via a phone call to the phone number that is being hosted. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedNumbersHostedNumberOrderCall(String sid, Integer callDelay, List<String> ccEmails, String email, String extension, String friendlyName, HostedNumberOrderEnumStatus status, String uniqueName, String verificationCode, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/HostedNumberOrders/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callDelay != null) {
            localVarFormParams.put("CallDelay", callDelay);
        }

        if (ccEmails != null) {
            localVarFormParams.put("CcEmails", ccEmails);
        }

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (extension != null) {
            localVarFormParams.put("Extension", extension);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (verificationCode != null) {
            localVarFormParams.put("VerificationCode", verificationCode);
        }

        if (verificationDocumentSid != null) {
            localVarFormParams.put("VerificationDocumentSid", verificationDocumentSid);
        }

        if (verificationType != null) {
            localVarFormParams.put("VerificationType", verificationType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostedNumbersHostedNumberOrderValidateBeforeCall(String sid, Integer callDelay, List<String> ccEmails, String email, String extension, String friendlyName, HostedNumberOrderEnumStatus status, String uniqueName, String verificationCode, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateHostedNumbersHostedNumberOrder(Async)");
        }

        return updateHostedNumbersHostedNumberOrderCall(sid, callDelay, ccEmails, email, extension, friendlyName, status, uniqueName, verificationCode, verificationDocumentSid, verificationType, _callback);

    }

    /**
     * 
     * Updates a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param callDelay The number of seconds, between 0 and 60, to delay before initiating the verification call. Defaults to 0. (optional)
     * @param ccEmails Optional. A list of emails that LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Email of the owner of this phone number that is being hosted. (optional)
     * @param extension Digits to dial after connecting the verification call. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param status  (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationCode A verification code that is given to the user via a phone call to the phone number that is being hosted. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @return PreviewHostedNumbersHostedNumberOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersHostedNumberOrder updateHostedNumbersHostedNumberOrder(String sid, Integer callDelay, List<String> ccEmails, String email, String extension, String friendlyName, HostedNumberOrderEnumStatus status, String uniqueName, String verificationCode, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType) throws ApiException {
        ApiResponse<PreviewHostedNumbersHostedNumberOrder> localVarResp = updateHostedNumbersHostedNumberOrderWithHttpInfo(sid, callDelay, ccEmails, email, extension, friendlyName, status, uniqueName, verificationCode, verificationDocumentSid, verificationType);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param callDelay The number of seconds, between 0 and 60, to delay before initiating the verification call. Defaults to 0. (optional)
     * @param ccEmails Optional. A list of emails that LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Email of the owner of this phone number that is being hosted. (optional)
     * @param extension Digits to dial after connecting the verification call. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param status  (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationCode A verification code that is given to the user via a phone call to the phone number that is being hosted. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @return ApiResponse&lt;PreviewHostedNumbersHostedNumberOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersHostedNumberOrder> updateHostedNumbersHostedNumberOrderWithHttpInfo(String sid, Integer callDelay, List<String> ccEmails, String email, String extension, String friendlyName, HostedNumberOrderEnumStatus status, String uniqueName, String verificationCode, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType) throws ApiException {
        okhttp3.Call localVarCall = updateHostedNumbersHostedNumberOrderValidateBeforeCall(sid, callDelay, ccEmails, email, extension, friendlyName, status, uniqueName, verificationCode, verificationDocumentSid, verificationType, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific HostedNumberOrder.
     * @param sid A 34 character string that uniquely identifies this HostedNumberOrder. (required)
     * @param callDelay The number of seconds, between 0 and 60, to delay before initiating the verification call. Defaults to 0. (optional)
     * @param ccEmails Optional. A list of emails that LOA document for this HostedNumberOrder will be carbon copied to. (optional)
     * @param email Email of the owner of this phone number that is being hosted. (optional)
     * @param extension Digits to dial after connecting the verification call. (optional)
     * @param friendlyName A 64 character string that is a human readable text that describes this resource. (optional)
     * @param status  (optional)
     * @param uniqueName Provides a unique and addressable name to be assigned to this HostedNumberOrder, assigned by the developer, to be optionally used in addition to SID. (optional)
     * @param verificationCode A verification code that is given to the user via a phone call to the phone number that is being hosted. (optional)
     * @param verificationDocumentSid Optional. The unique sid identifier of the Identity Document that represents the document for verifying ownership of the number to be hosted. Required when VerificationType is phone-bill. (optional)
     * @param verificationType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedNumbersHostedNumberOrderAsync(String sid, Integer callDelay, List<String> ccEmails, String email, String extension, String friendlyName, HostedNumberOrderEnumStatus status, String uniqueName, String verificationCode, String verificationDocumentSid, HostedNumberOrderEnumVerificationType verificationType, final ApiCallback<PreviewHostedNumbersHostedNumberOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostedNumbersHostedNumberOrderValidateBeforeCall(sid, callDelay, ccEmails, email, extension, friendlyName, status, uniqueName, verificationCode, verificationDocumentSid, verificationType, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersHostedNumberOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
