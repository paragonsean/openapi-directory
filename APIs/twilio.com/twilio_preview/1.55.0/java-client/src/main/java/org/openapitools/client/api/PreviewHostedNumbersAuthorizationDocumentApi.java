/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationDocumentEnumStatus;
import org.openapitools.client.model.ListHostedNumbersAuthorizationDocumentResponse;
import org.openapitools.client.model.PreviewHostedNumbersAuthorizationDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewHostedNumbersAuthorizationDocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewHostedNumbersAuthorizationDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewHostedNumbersAuthorizationDocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createHostedNumbersAuthorizationDocument
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (required)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (required)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (required)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (required)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (required)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedNumbersAuthorizationDocumentCall(String addressSid, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, List<String> ccEmails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/AuthorizationDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (ccEmails != null) {
            localVarFormParams.put("CcEmails", ccEmails);
        }

        if (contactPhoneNumber != null) {
            localVarFormParams.put("ContactPhoneNumber", contactPhoneNumber);
        }

        if (contactTitle != null) {
            localVarFormParams.put("ContactTitle", contactTitle);
        }

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (hostedNumberOrderSids != null) {
            localVarFormParams.put("HostedNumberOrderSids", hostedNumberOrderSids);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHostedNumbersAuthorizationDocumentValidateBeforeCall(String addressSid, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, List<String> ccEmails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressSid' is set
        if (addressSid == null) {
            throw new ApiException("Missing the required parameter 'addressSid' when calling createHostedNumbersAuthorizationDocument(Async)");
        }

        // verify the required parameter 'contactPhoneNumber' is set
        if (contactPhoneNumber == null) {
            throw new ApiException("Missing the required parameter 'contactPhoneNumber' when calling createHostedNumbersAuthorizationDocument(Async)");
        }

        // verify the required parameter 'contactTitle' is set
        if (contactTitle == null) {
            throw new ApiException("Missing the required parameter 'contactTitle' when calling createHostedNumbersAuthorizationDocument(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createHostedNumbersAuthorizationDocument(Async)");
        }

        // verify the required parameter 'hostedNumberOrderSids' is set
        if (hostedNumberOrderSids == null) {
            throw new ApiException("Missing the required parameter 'hostedNumberOrderSids' when calling createHostedNumbersAuthorizationDocument(Async)");
        }

        return createHostedNumbersAuthorizationDocumentCall(addressSid, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, ccEmails, _callback);

    }

    /**
     * 
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio&#39;s platform.
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (required)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (required)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (required)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (required)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (required)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed. (optional)
     * @return PreviewHostedNumbersAuthorizationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersAuthorizationDocument createHostedNumbersAuthorizationDocument(String addressSid, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, List<String> ccEmails) throws ApiException {
        ApiResponse<PreviewHostedNumbersAuthorizationDocument> localVarResp = createHostedNumbersAuthorizationDocumentWithHttpInfo(addressSid, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, ccEmails);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio&#39;s platform.
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (required)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (required)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (required)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (required)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (required)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed. (optional)
     * @return ApiResponse&lt;PreviewHostedNumbersAuthorizationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersAuthorizationDocument> createHostedNumbersAuthorizationDocumentWithHttpInfo(String addressSid, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, List<String> ccEmails) throws ApiException {
        okhttp3.Call localVarCall = createHostedNumbersAuthorizationDocumentValidateBeforeCall(addressSid, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, ccEmails, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio&#39;s platform.
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (required)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (required)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (required)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (required)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (required)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHostedNumbersAuthorizationDocumentAsync(String addressSid, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, List<String> ccEmails, final ApiCallback<PreviewHostedNumbersAuthorizationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHostedNumbersAuthorizationDocumentValidateBeforeCall(addressSid, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, ccEmails, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHostedNumbersAuthorizationDocument
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHostedNumbersAuthorizationDocumentCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/AuthorizationDocuments/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHostedNumbersAuthorizationDocumentValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchHostedNumbersAuthorizationDocument(Async)");
        }

        return fetchHostedNumbersAuthorizationDocumentCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @return PreviewHostedNumbersAuthorizationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersAuthorizationDocument fetchHostedNumbersAuthorizationDocument(String sid) throws ApiException {
        ApiResponse<PreviewHostedNumbersAuthorizationDocument> localVarResp = fetchHostedNumbersAuthorizationDocumentWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @return ApiResponse&lt;PreviewHostedNumbersAuthorizationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersAuthorizationDocument> fetchHostedNumbersAuthorizationDocumentWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchHostedNumbersAuthorizationDocumentValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHostedNumbersAuthorizationDocumentAsync(String sid, final ApiCallback<PreviewHostedNumbersAuthorizationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHostedNumbersAuthorizationDocumentValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHostedNumbersAuthorizationDocument
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param status Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/phone-numbers/hosted-numbers/hosted-numbers-api/authorization-document-resource#status-values) for more information on each of these statuses. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedNumbersAuthorizationDocumentCall(String email, AuthorizationDocumentEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/AuthorizationDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Email", email));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHostedNumbersAuthorizationDocumentValidateBeforeCall(String email, AuthorizationDocumentEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listHostedNumbersAuthorizationDocumentCall(email, status, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param status Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/phone-numbers/hosted-numbers/hosted-numbers-api/authorization-document-resource#status-values) for more information on each of these statuses. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListHostedNumbersAuthorizationDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHostedNumbersAuthorizationDocumentResponse listHostedNumbersAuthorizationDocument(String email, AuthorizationDocumentEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListHostedNumbersAuthorizationDocumentResponse> localVarResp = listHostedNumbersAuthorizationDocumentWithHttpInfo(email, status, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param status Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/phone-numbers/hosted-numbers/hosted-numbers-api/authorization-document-resource#status-values) for more information on each of these statuses. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListHostedNumbersAuthorizationDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHostedNumbersAuthorizationDocumentResponse> listHostedNumbersAuthorizationDocumentWithHttpInfo(String email, AuthorizationDocumentEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listHostedNumbersAuthorizationDocumentValidateBeforeCall(email, status, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListHostedNumbersAuthorizationDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param status Status of an instance resource. It can hold one of the values: 1. opened 2. signing, 3. signed LOA, 4. canceled, 5. failed. See the section entitled [Status Values](https://www.twilio.com/docs/phone-numbers/hosted-numbers/hosted-numbers-api/authorization-document-resource#status-values) for more information on each of these statuses. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHostedNumbersAuthorizationDocumentAsync(String email, AuthorizationDocumentEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListHostedNumbersAuthorizationDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHostedNumbersAuthorizationDocumentValidateBeforeCall(email, status, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListHostedNumbersAuthorizationDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHostedNumbersAuthorizationDocument
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (optional)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed (optional)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (optional)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (optional)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedNumbersAuthorizationDocumentCall(String sid, String addressSid, List<String> ccEmails, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, AuthorizationDocumentEnumStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/HostedNumbers/AuthorizationDocuments/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (ccEmails != null) {
            localVarFormParams.put("CcEmails", ccEmails);
        }

        if (contactPhoneNumber != null) {
            localVarFormParams.put("ContactPhoneNumber", contactPhoneNumber);
        }

        if (contactTitle != null) {
            localVarFormParams.put("ContactTitle", contactTitle);
        }

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (hostedNumberOrderSids != null) {
            localVarFormParams.put("HostedNumberOrderSids", hostedNumberOrderSids);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHostedNumbersAuthorizationDocumentValidateBeforeCall(String sid, String addressSid, List<String> ccEmails, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, AuthorizationDocumentEnumStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateHostedNumbersAuthorizationDocument(Async)");
        }

        return updateHostedNumbersAuthorizationDocumentCall(sid, addressSid, ccEmails, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, status, _callback);

    }

    /**
     * 
     * Updates a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (optional)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed (optional)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (optional)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (optional)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (optional)
     * @param status  (optional)
     * @return PreviewHostedNumbersAuthorizationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewHostedNumbersAuthorizationDocument updateHostedNumbersAuthorizationDocument(String sid, String addressSid, List<String> ccEmails, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, AuthorizationDocumentEnumStatus status) throws ApiException {
        ApiResponse<PreviewHostedNumbersAuthorizationDocument> localVarResp = updateHostedNumbersAuthorizationDocumentWithHttpInfo(sid, addressSid, ccEmails, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, status);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (optional)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed (optional)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (optional)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (optional)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PreviewHostedNumbersAuthorizationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewHostedNumbersAuthorizationDocument> updateHostedNumbersAuthorizationDocumentWithHttpInfo(String sid, String addressSid, List<String> ccEmails, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, AuthorizationDocumentEnumStatus status) throws ApiException {
        okhttp3.Call localVarCall = updateHostedNumbersAuthorizationDocumentValidateBeforeCall(sid, addressSid, ccEmails, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, status, null);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific AuthorizationDocument.
     * @param sid A 34 character string that uniquely identifies this AuthorizationDocument. (required)
     * @param addressSid A 34 character string that uniquely identifies the Address resource that is associated with this AuthorizationDocument. (optional)
     * @param ccEmails Email recipients who will be informed when an Authorization Document has been sent and signed (optional)
     * @param contactPhoneNumber The contact phone number of the person authorized to sign the Authorization Document. (optional)
     * @param contactTitle The title of the person authorized to sign the Authorization Document for this phone number. (optional)
     * @param email Email that this AuthorizationDocument will be sent to for signing. (optional)
     * @param hostedNumberOrderSids A list of HostedNumberOrder sids that this AuthorizationDocument will authorize for hosting phone number capabilities on Twilio&#39;s platform. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHostedNumbersAuthorizationDocumentAsync(String sid, String addressSid, List<String> ccEmails, String contactPhoneNumber, String contactTitle, String email, List<String> hostedNumberOrderSids, AuthorizationDocumentEnumStatus status, final ApiCallback<PreviewHostedNumbersAuthorizationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHostedNumbersAuthorizationDocumentValidateBeforeCall(sid, addressSid, ccEmails, contactPhoneNumber, contactTitle, email, hostedNumberOrderSids, status, _callback);
        Type localVarReturnType = new TypeToken<PreviewHostedNumbersAuthorizationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
