/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListDeployedDevicesKeyResponse;
import org.openapitools.client.model.PreviewDeployedDevicesFleetKey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewDeployedDevicesKeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewDeployedDevicesKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewDeployedDevicesKeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeployedDevicesKey
     * @param fleetSid  (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeployedDevicesKeyCall(String fleetSid, String deviceSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DeployedDevices/Fleets/{FleetSid}/Keys"
            .replace("{" + "FleetSid" + "}", localVarApiClient.escapeString(fleetSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceSid != null) {
            localVarFormParams.put("DeviceSid", deviceSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeployedDevicesKeyValidateBeforeCall(String fleetSid, String deviceSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fleetSid' is set
        if (fleetSid == null) {
            throw new ApiException("Missing the required parameter 'fleetSid' when calling createDeployedDevicesKey(Async)");
        }

        return createDeployedDevicesKeyCall(fleetSid, deviceSid, friendlyName, _callback);

    }

    /**
     * 
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param fleetSid  (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @return PreviewDeployedDevicesFleetKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public PreviewDeployedDevicesFleetKey createDeployedDevicesKey(String fleetSid, String deviceSid, String friendlyName) throws ApiException {
        ApiResponse<PreviewDeployedDevicesFleetKey> localVarResp = createDeployedDevicesKeyWithHttpInfo(fleetSid, deviceSid, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param fleetSid  (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @return ApiResponse&lt;PreviewDeployedDevicesFleetKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewDeployedDevicesFleetKey> createDeployedDevicesKeyWithHttpInfo(String fleetSid, String deviceSid, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createDeployedDevicesKeyValidateBeforeCall(fleetSid, deviceSid, friendlyName, null);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param fleetSid  (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeployedDevicesKeyAsync(String fleetSid, String deviceSid, String friendlyName, final ApiCallback<PreviewDeployedDevicesFleetKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeployedDevicesKeyValidateBeforeCall(fleetSid, deviceSid, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeployedDevicesKey
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeployedDevicesKeyCall(String fleetSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
            .replace("{" + "FleetSid" + "}", localVarApiClient.escapeString(fleetSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeployedDevicesKeyValidateBeforeCall(String fleetSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fleetSid' is set
        if (fleetSid == null) {
            throw new ApiException("Missing the required parameter 'fleetSid' when calling deleteDeployedDevicesKey(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteDeployedDevicesKey(Async)");
        }

        return deleteDeployedDevicesKeyCall(fleetSid, sid, _callback);

    }

    /**
     * 
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeployedDevicesKey(String fleetSid, String sid) throws ApiException {
        deleteDeployedDevicesKeyWithHttpInfo(fleetSid, sid);
    }

    /**
     * 
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeployedDevicesKeyWithHttpInfo(String fleetSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeployedDevicesKeyAsync(String fleetSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchDeployedDevicesKey
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchDeployedDevicesKeyCall(String fleetSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
            .replace("{" + "FleetSid" + "}", localVarApiClient.escapeString(fleetSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchDeployedDevicesKeyValidateBeforeCall(String fleetSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fleetSid' is set
        if (fleetSid == null) {
            throw new ApiException("Missing the required parameter 'fleetSid' when calling fetchDeployedDevicesKey(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchDeployedDevicesKey(Async)");
        }

        return fetchDeployedDevicesKeyCall(fleetSid, sid, _callback);

    }

    /**
     * 
     * Fetch information about a specific Key credential in the Fleet.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @return PreviewDeployedDevicesFleetKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewDeployedDevicesFleetKey fetchDeployedDevicesKey(String fleetSid, String sid) throws ApiException {
        ApiResponse<PreviewDeployedDevicesFleetKey> localVarResp = fetchDeployedDevicesKeyWithHttpInfo(fleetSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch information about a specific Key credential in the Fleet.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @return ApiResponse&lt;PreviewDeployedDevicesFleetKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewDeployedDevicesFleetKey> fetchDeployedDevicesKeyWithHttpInfo(String fleetSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, null);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch information about a specific Key credential in the Fleet.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchDeployedDevicesKeyAsync(String fleetSid, String sid, final ApiCallback<PreviewDeployedDevicesFleetKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, _callback);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeployedDevicesKey
     * @param fleetSid  (required)
     * @param deviceSid Filters the resulting list of Keys by a unique string identifier of an authenticated Device. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeployedDevicesKeyCall(String fleetSid, String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DeployedDevices/Fleets/{FleetSid}/Keys"
            .replace("{" + "FleetSid" + "}", localVarApiClient.escapeString(fleetSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeviceSid", deviceSid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeployedDevicesKeyValidateBeforeCall(String fleetSid, String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fleetSid' is set
        if (fleetSid == null) {
            throw new ApiException("Missing the required parameter 'fleetSid' when calling listDeployedDevicesKey(Async)");
        }

        return listDeployedDevicesKeyCall(fleetSid, deviceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * @param fleetSid  (required)
     * @param deviceSid Filters the resulting list of Keys by a unique string identifier of an authenticated Device. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListDeployedDevicesKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDeployedDevicesKeyResponse listDeployedDevicesKey(String fleetSid, String deviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListDeployedDevicesKeyResponse> localVarResp = listDeployedDevicesKeyWithHttpInfo(fleetSid, deviceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * @param fleetSid  (required)
     * @param deviceSid Filters the resulting list of Keys by a unique string identifier of an authenticated Device. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListDeployedDevicesKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDeployedDevicesKeyResponse> listDeployedDevicesKeyWithHttpInfo(String fleetSid, String deviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listDeployedDevicesKeyValidateBeforeCall(fleetSid, deviceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListDeployedDevicesKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * @param fleetSid  (required)
     * @param deviceSid Filters the resulting list of Keys by a unique string identifier of an authenticated Device. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeployedDevicesKeyAsync(String fleetSid, String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListDeployedDevicesKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeployedDevicesKeyValidateBeforeCall(fleetSid, deviceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListDeployedDevicesKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeployedDevicesKey
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeployedDevicesKeyCall(String fleetSid, String sid, String deviceSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}"
            .replace("{" + "FleetSid" + "}", localVarApiClient.escapeString(fleetSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceSid != null) {
            localVarFormParams.put("DeviceSid", deviceSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeployedDevicesKeyValidateBeforeCall(String fleetSid, String sid, String deviceSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fleetSid' is set
        if (fleetSid == null) {
            throw new ApiException("Missing the required parameter 'fleetSid' when calling updateDeployedDevicesKey(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateDeployedDevicesKey(Async)");
        }

        return updateDeployedDevicesKeyCall(fleetSid, sid, deviceSid, friendlyName, _callback);

    }

    /**
     * 
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @return PreviewDeployedDevicesFleetKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewDeployedDevicesFleetKey updateDeployedDevicesKey(String fleetSid, String sid, String deviceSid, String friendlyName) throws ApiException {
        ApiResponse<PreviewDeployedDevicesFleetKey> localVarResp = updateDeployedDevicesKeyWithHttpInfo(fleetSid, sid, deviceSid, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @return ApiResponse&lt;PreviewDeployedDevicesFleetKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewDeployedDevicesFleetKey> updateDeployedDevicesKeyWithHttpInfo(String fleetSid, String sid, String deviceSid, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = updateDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, deviceSid, friendlyName, null);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param fleetSid  (required)
     * @param sid Provides a 34 character string that uniquely identifies the requested Key credential resource. (required)
     * @param deviceSid Provides the unique string identifier of an existing Device to become authenticated with this Key credential. (optional)
     * @param friendlyName Provides a human readable descriptive text for this Key credential, up to 256 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeployedDevicesKeyAsync(String fleetSid, String sid, String deviceSid, String friendlyName, final ApiCallback<PreviewDeployedDevicesFleetKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeployedDevicesKeyValidateBeforeCall(fleetSid, sid, deviceSid, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<PreviewDeployedDevicesFleetKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
