/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListWirelessSimResponse;
import org.openapitools.client.model.PreviewWirelessSim;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewWirelessSimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewWirelessSimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewWirelessSimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchWirelessSim
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWirelessSimCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWirelessSimValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWirelessSim(Async)");
        }

        return fetchWirelessSimCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return PreviewWirelessSim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewWirelessSim fetchWirelessSim(String sid) throws ApiException {
        ApiResponse<PreviewWirelessSim> localVarResp = fetchWirelessSimWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;PreviewWirelessSim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewWirelessSim> fetchWirelessSimWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWirelessSimValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<PreviewWirelessSim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWirelessSimAsync(String sid, final ApiCallback<PreviewWirelessSim> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWirelessSimValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<PreviewWirelessSim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWirelessSim
     * @param status  (optional)
     * @param iccid  (optional)
     * @param ratePlan  (optional)
     * @param eid  (optional)
     * @param simRegistrationCode  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWirelessSimCall(String status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/Sims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (iccid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iccid", iccid));
        }

        if (ratePlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RatePlan", ratePlan));
        }

        if (eid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EId", eid));
        }

        if (simRegistrationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SimRegistrationCode", simRegistrationCode));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWirelessSimValidateBeforeCall(String status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listWirelessSimCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param status  (optional)
     * @param iccid  (optional)
     * @param ratePlan  (optional)
     * @param eid  (optional)
     * @param simRegistrationCode  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWirelessSimResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWirelessSimResponse listWirelessSim(String status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWirelessSimResponse> localVarResp = listWirelessSimWithHttpInfo(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param status  (optional)
     * @param iccid  (optional)
     * @param ratePlan  (optional)
     * @param eid  (optional)
     * @param simRegistrationCode  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWirelessSimResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWirelessSimResponse> listWirelessSimWithHttpInfo(String status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWirelessSimValidateBeforeCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWirelessSimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param status  (optional)
     * @param iccid  (optional)
     * @param ratePlan  (optional)
     * @param eid  (optional)
     * @param simRegistrationCode  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWirelessSimAsync(String status, String iccid, String ratePlan, String eid, String simRegistrationCode, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWirelessSimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWirelessSimValidateBeforeCall(status, iccid, ratePlan, eid, simRegistrationCode, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWirelessSimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWirelessSim
     * @param sid  (required)
     * @param callbackMethod  (optional)
     * @param callbackUrl  (optional)
     * @param commandsCallbackMethod  (optional)
     * @param commandsCallbackUrl  (optional)
     * @param friendlyName  (optional)
     * @param ratePlan  (optional)
     * @param smsFallbackMethod  (optional)
     * @param smsFallbackUrl  (optional)
     * @param smsMethod  (optional)
     * @param smsUrl  (optional)
     * @param status  (optional)
     * @param uniqueName  (optional)
     * @param voiceFallbackMethod  (optional)
     * @param voiceFallbackUrl  (optional)
     * @param voiceMethod  (optional)
     * @param voiceUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWirelessSimCall(String sid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (commandsCallbackMethod != null) {
            localVarFormParams.put("CommandsCallbackMethod", commandsCallbackMethod);
        }

        if (commandsCallbackUrl != null) {
            localVarFormParams.put("CommandsCallbackUrl", commandsCallbackUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (ratePlan != null) {
            localVarFormParams.put("RatePlan", ratePlan);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWirelessSimValidateBeforeCall(String sid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWirelessSim(Async)");
        }

        return updateWirelessSimCall(sid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param callbackMethod  (optional)
     * @param callbackUrl  (optional)
     * @param commandsCallbackMethod  (optional)
     * @param commandsCallbackUrl  (optional)
     * @param friendlyName  (optional)
     * @param ratePlan  (optional)
     * @param smsFallbackMethod  (optional)
     * @param smsFallbackUrl  (optional)
     * @param smsMethod  (optional)
     * @param smsUrl  (optional)
     * @param status  (optional)
     * @param uniqueName  (optional)
     * @param voiceFallbackMethod  (optional)
     * @param voiceFallbackUrl  (optional)
     * @param voiceMethod  (optional)
     * @param voiceUrl  (optional)
     * @return PreviewWirelessSim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewWirelessSim updateWirelessSim(String sid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<PreviewWirelessSim> localVarResp = updateWirelessSimWithHttpInfo(sid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param callbackMethod  (optional)
     * @param callbackUrl  (optional)
     * @param commandsCallbackMethod  (optional)
     * @param commandsCallbackUrl  (optional)
     * @param friendlyName  (optional)
     * @param ratePlan  (optional)
     * @param smsFallbackMethod  (optional)
     * @param smsFallbackUrl  (optional)
     * @param smsMethod  (optional)
     * @param smsUrl  (optional)
     * @param status  (optional)
     * @param uniqueName  (optional)
     * @param voiceFallbackMethod  (optional)
     * @param voiceFallbackUrl  (optional)
     * @param voiceMethod  (optional)
     * @param voiceUrl  (optional)
     * @return ApiResponse&lt;PreviewWirelessSim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewWirelessSim> updateWirelessSimWithHttpInfo(String sid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateWirelessSimValidateBeforeCall(sid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<PreviewWirelessSim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param callbackMethod  (optional)
     * @param callbackUrl  (optional)
     * @param commandsCallbackMethod  (optional)
     * @param commandsCallbackUrl  (optional)
     * @param friendlyName  (optional)
     * @param ratePlan  (optional)
     * @param smsFallbackMethod  (optional)
     * @param smsFallbackUrl  (optional)
     * @param smsMethod  (optional)
     * @param smsUrl  (optional)
     * @param status  (optional)
     * @param uniqueName  (optional)
     * @param voiceFallbackMethod  (optional)
     * @param voiceFallbackUrl  (optional)
     * @param voiceMethod  (optional)
     * @param voiceUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWirelessSimAsync(String sid, String callbackMethod, URI callbackUrl, String commandsCallbackMethod, URI commandsCallbackUrl, String friendlyName, String ratePlan, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, String status, String uniqueName, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<PreviewWirelessSim> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWirelessSimValidateBeforeCall(sid, callbackMethod, callbackUrl, commandsCallbackMethod, commandsCallbackUrl, friendlyName, ratePlan, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, status, uniqueName, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<PreviewWirelessSim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
