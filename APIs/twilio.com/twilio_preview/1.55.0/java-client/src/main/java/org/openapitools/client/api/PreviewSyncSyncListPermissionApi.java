/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListSyncSyncListPermissionResponse;
import org.openapitools.client.model.PreviewSyncServiceSyncListSyncListPermission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewSyncSyncListPermissionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewSyncSyncListPermissionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewSyncSyncListPermissionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSyncSyncListPermission
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSyncSyncListPermissionCall(String serviceSid, String listSid, String identity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ListSid" + "}", localVarApiClient.escapeString(listSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSyncSyncListPermissionValidateBeforeCall(String serviceSid, String listSid, String identity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'listSid' is set
        if (listSid == null) {
            throw new ApiException("Missing the required parameter 'listSid' when calling deleteSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling deleteSyncSyncListPermission(Async)");
        }

        return deleteSyncSyncListPermissionCall(serviceSid, listSid, identity, _callback);

    }

    /**
     * 
     * Delete a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSyncSyncListPermission(String serviceSid, String listSid, String identity) throws ApiException {
        deleteSyncSyncListPermissionWithHttpInfo(serviceSid, listSid, identity);
    }

    /**
     * 
     * Delete a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSyncSyncListPermissionWithHttpInfo(String serviceSid, String listSid, String identity) throws ApiException {
        okhttp3.Call localVarCall = deleteSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSyncSyncListPermissionAsync(String serviceSid, String listSid, String identity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSyncSyncListPermission
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSyncSyncListPermissionCall(String serviceSid, String listSid, String identity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ListSid" + "}", localVarApiClient.escapeString(listSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSyncSyncListPermissionValidateBeforeCall(String serviceSid, String listSid, String identity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'listSid' is set
        if (listSid == null) {
            throw new ApiException("Missing the required parameter 'listSid' when calling fetchSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling fetchSyncSyncListPermission(Async)");
        }

        return fetchSyncSyncListPermissionCall(serviceSid, listSid, identity, _callback);

    }

    /**
     * 
     * Fetch a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @return PreviewSyncServiceSyncListSyncListPermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewSyncServiceSyncListSyncListPermission fetchSyncSyncListPermission(String serviceSid, String listSid, String identity) throws ApiException {
        ApiResponse<PreviewSyncServiceSyncListSyncListPermission> localVarResp = fetchSyncSyncListPermissionWithHttpInfo(serviceSid, listSid, identity);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @return ApiResponse&lt;PreviewSyncServiceSyncListSyncListPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewSyncServiceSyncListSyncListPermission> fetchSyncSyncListPermissionWithHttpInfo(String serviceSid, String listSid, String identity) throws ApiException {
        okhttp3.Call localVarCall = fetchSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, null);
        Type localVarReturnType = new TypeToken<PreviewSyncServiceSyncListSyncListPermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Sync List Permission.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a user associated with an FPA token, assigned by the developer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSyncSyncListPermissionAsync(String serviceSid, String listSid, String identity, final ApiCallback<PreviewSyncServiceSyncListSyncListPermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, _callback);
        Type localVarReturnType = new TypeToken<PreviewSyncServiceSyncListSyncListPermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSyncSyncListPermission
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncSyncListPermissionCall(String serviceSid, String listSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ListSid" + "}", localVarApiClient.escapeString(listSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSyncSyncListPermissionValidateBeforeCall(String serviceSid, String listSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'listSid' is set
        if (listSid == null) {
            throw new ApiException("Missing the required parameter 'listSid' when calling listSyncSyncListPermission(Async)");
        }

        return listSyncSyncListPermissionCall(serviceSid, listSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSyncSyncListPermissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSyncSyncListPermissionResponse listSyncSyncListPermission(String serviceSid, String listSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSyncSyncListPermissionResponse> localVarResp = listSyncSyncListPermissionWithHttpInfo(serviceSid, listSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSyncSyncListPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSyncSyncListPermissionResponse> listSyncSyncListPermissionWithHttpInfo(String serviceSid, String listSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSyncSyncListPermissionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param serviceSid  (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncSyncListPermissionAsync(String serviceSid, String listSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSyncSyncListPermissionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSyncSyncListPermissionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSyncSyncListPermission
     * @param serviceSid The unique SID identifier of the Sync Service Instance. (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer. (required)
     * @param manage Boolean flag specifying whether the identity can delete the Sync List. (required)
     * @param read Boolean flag specifying whether the identity can read the Sync List. (required)
     * @param write Boolean flag specifying whether the identity can create, update and delete Items of the Sync List. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSyncSyncListPermissionCall(String serviceSid, String listSid, String identity, Boolean manage, Boolean read, Boolean write, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://preview.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ListSid" + "}", localVarApiClient.escapeString(listSid.toString()))
            .replace("{" + "Identity" + "}", localVarApiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (manage != null) {
            localVarFormParams.put("Manage", manage);
        }

        if (read != null) {
            localVarFormParams.put("Read", read);
        }

        if (write != null) {
            localVarFormParams.put("Write", write);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSyncSyncListPermissionValidateBeforeCall(String serviceSid, String listSid, String identity, Boolean manage, Boolean read, Boolean write, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'listSid' is set
        if (listSid == null) {
            throw new ApiException("Missing the required parameter 'listSid' when calling updateSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling updateSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'manage' is set
        if (manage == null) {
            throw new ApiException("Missing the required parameter 'manage' when calling updateSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'read' is set
        if (read == null) {
            throw new ApiException("Missing the required parameter 'read' when calling updateSyncSyncListPermission(Async)");
        }

        // verify the required parameter 'write' is set
        if (write == null) {
            throw new ApiException("Missing the required parameter 'write' when calling updateSyncSyncListPermission(Async)");
        }

        return updateSyncSyncListPermissionCall(serviceSid, listSid, identity, manage, read, write, _callback);

    }

    /**
     * 
     * Update an identity&#39;s access to a specific Sync List.
     * @param serviceSid The unique SID identifier of the Sync Service Instance. (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer. (required)
     * @param manage Boolean flag specifying whether the identity can delete the Sync List. (required)
     * @param read Boolean flag specifying whether the identity can read the Sync List. (required)
     * @param write Boolean flag specifying whether the identity can create, update and delete Items of the Sync List. (required)
     * @return PreviewSyncServiceSyncListSyncListPermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PreviewSyncServiceSyncListSyncListPermission updateSyncSyncListPermission(String serviceSid, String listSid, String identity, Boolean manage, Boolean read, Boolean write) throws ApiException {
        ApiResponse<PreviewSyncServiceSyncListSyncListPermission> localVarResp = updateSyncSyncListPermissionWithHttpInfo(serviceSid, listSid, identity, manage, read, write);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an identity&#39;s access to a specific Sync List.
     * @param serviceSid The unique SID identifier of the Sync Service Instance. (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer. (required)
     * @param manage Boolean flag specifying whether the identity can delete the Sync List. (required)
     * @param read Boolean flag specifying whether the identity can read the Sync List. (required)
     * @param write Boolean flag specifying whether the identity can create, update and delete Items of the Sync List. (required)
     * @return ApiResponse&lt;PreviewSyncServiceSyncListSyncListPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewSyncServiceSyncListSyncListPermission> updateSyncSyncListPermissionWithHttpInfo(String serviceSid, String listSid, String identity, Boolean manage, Boolean read, Boolean write) throws ApiException {
        okhttp3.Call localVarCall = updateSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, manage, read, write, null);
        Type localVarReturnType = new TypeToken<PreviewSyncServiceSyncListSyncListPermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an identity&#39;s access to a specific Sync List.
     * @param serviceSid The unique SID identifier of the Sync Service Instance. (required)
     * @param listSid Identifier of the Sync List. Either a SID or a unique name. (required)
     * @param identity Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer. (required)
     * @param manage Boolean flag specifying whether the identity can delete the Sync List. (required)
     * @param read Boolean flag specifying whether the identity can read the Sync List. (required)
     * @param write Boolean flag specifying whether the identity can create, update and delete Items of the Sync List. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSyncSyncListPermissionAsync(String serviceSid, String listSid, String identity, Boolean manage, Boolean read, Boolean write, final ApiCallback<PreviewSyncServiceSyncListSyncListPermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSyncSyncListPermissionValidateBeforeCall(serviceSid, listSid, identity, manage, read, write, _callback);
        Type localVarReturnType = new TypeToken<PreviewSyncServiceSyncListSyncListPermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
