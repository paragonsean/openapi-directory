/*
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListDeployedDevicesDeviceResponse;
import org.openapitools.client.model.PreviewDeployedDevicesFleetDevice;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PreviewDeployedDevicesDeviceApi
 */
@Disabled
public class PreviewDeployedDevicesDeviceApiTest {

    private final PreviewDeployedDevicesDeviceApi api = new PreviewDeployedDevicesDeviceApi();

    /**
     * Create a new Device in the Fleet, optionally giving it a unique name, friendly name, and assigning to a Deployment and/or human identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeployedDevicesDeviceTest() throws ApiException {
        String fleetSid = null;
        String deploymentSid = null;
        Boolean enabled = null;
        String friendlyName = null;
        String identity = null;
        String uniqueName = null;
        PreviewDeployedDevicesFleetDevice response = api.createDeployedDevicesDevice(fleetSid, deploymentSid, enabled, friendlyName, identity, uniqueName);
        // TODO: test validations
    }

    /**
     * Delete a specific Device from the Fleet, also removing it from associated Deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeployedDevicesDeviceTest() throws ApiException {
        String fleetSid = null;
        String sid = null;
        api.deleteDeployedDevicesDevice(fleetSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch information about a specific Device in the Fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchDeployedDevicesDeviceTest() throws ApiException {
        String fleetSid = null;
        String sid = null;
        PreviewDeployedDevicesFleetDevice response = api.fetchDeployedDevicesDevice(fleetSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Devices belonging to the Fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeployedDevicesDeviceTest() throws ApiException {
        String fleetSid = null;
        String deploymentSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListDeployedDevicesDeviceResponse response = api.listDeployedDevicesDevice(fleetSid, deploymentSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update the given properties of a specific Device in the Fleet, giving it a friendly name, assigning to a Deployment, or a human identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeployedDevicesDeviceTest() throws ApiException {
        String fleetSid = null;
        String sid = null;
        String deploymentSid = null;
        Boolean enabled = null;
        String friendlyName = null;
        String identity = null;
        PreviewDeployedDevicesFleetDevice response = api.updateDeployedDevicesDevice(fleetSid, sid, deploymentSid, enabled, friendlyName, identity);
        // TODO: test validations
    }

}
