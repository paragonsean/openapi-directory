# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PreviewMarketplaceAvailableAddOn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_schema: object=None, description: str=None, friendly_name: str=None, links: object=None, pricing_type: str=None, sid: str=None, url: str=None):
        """PreviewMarketplaceAvailableAddOn - a model defined in OpenAPI

        :param configuration_schema: The configuration_schema of this PreviewMarketplaceAvailableAddOn.
        :param description: The description of this PreviewMarketplaceAvailableAddOn.
        :param friendly_name: The friendly_name of this PreviewMarketplaceAvailableAddOn.
        :param links: The links of this PreviewMarketplaceAvailableAddOn.
        :param pricing_type: The pricing_type of this PreviewMarketplaceAvailableAddOn.
        :param sid: The sid of this PreviewMarketplaceAvailableAddOn.
        :param url: The url of this PreviewMarketplaceAvailableAddOn.
        """
        self.openapi_types = {
            'configuration_schema': object,
            'description': str,
            'friendly_name': str,
            'links': object,
            'pricing_type': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'configuration_schema': 'configuration_schema',
            'description': 'description',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'pricing_type': 'pricing_type',
            'sid': 'sid',
            'url': 'url'
        }

        self._configuration_schema = configuration_schema
        self._description = description
        self._friendly_name = friendly_name
        self._links = links
        self._pricing_type = pricing_type
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviewMarketplaceAvailableAddOn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The preview.marketplace.available_add_on of this PreviewMarketplaceAvailableAddOn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_schema(self):
        """Gets the configuration_schema of this PreviewMarketplaceAvailableAddOn.

        The JSON object with the configuration that must be provided when installing a given Add-on.

        :return: The configuration_schema of this PreviewMarketplaceAvailableAddOn.
        :rtype: object
        """
        return self._configuration_schema

    @configuration_schema.setter
    def configuration_schema(self, configuration_schema):
        """Sets the configuration_schema of this PreviewMarketplaceAvailableAddOn.

        The JSON object with the configuration that must be provided when installing a given Add-on.

        :param configuration_schema: The configuration_schema of this PreviewMarketplaceAvailableAddOn.
        :type configuration_schema: object
        """

        self._configuration_schema = configuration_schema

    @property
    def description(self):
        """Gets the description of this PreviewMarketplaceAvailableAddOn.

        A short description of the Add-on's functionality.

        :return: The description of this PreviewMarketplaceAvailableAddOn.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PreviewMarketplaceAvailableAddOn.

        A short description of the Add-on's functionality.

        :param description: The description of this PreviewMarketplaceAvailableAddOn.
        :type description: str
        """

        self._description = description

    @property
    def friendly_name(self):
        """Gets the friendly_name of this PreviewMarketplaceAvailableAddOn.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this PreviewMarketplaceAvailableAddOn.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this PreviewMarketplaceAvailableAddOn.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this PreviewMarketplaceAvailableAddOn.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this PreviewMarketplaceAvailableAddOn.

        The URLs of related resources.

        :return: The links of this PreviewMarketplaceAvailableAddOn.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PreviewMarketplaceAvailableAddOn.

        The URLs of related resources.

        :param links: The links of this PreviewMarketplaceAvailableAddOn.
        :type links: object
        """

        self._links = links

    @property
    def pricing_type(self):
        """Gets the pricing_type of this PreviewMarketplaceAvailableAddOn.

        How customers are charged for using this Add-on.

        :return: The pricing_type of this PreviewMarketplaceAvailableAddOn.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this PreviewMarketplaceAvailableAddOn.

        How customers are charged for using this Add-on.

        :param pricing_type: The pricing_type of this PreviewMarketplaceAvailableAddOn.
        :type pricing_type: str
        """

        self._pricing_type = pricing_type

    @property
    def sid(self):
        """Gets the sid of this PreviewMarketplaceAvailableAddOn.

        The unique string that we created to identify the AvailableAddOn resource.

        :return: The sid of this PreviewMarketplaceAvailableAddOn.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this PreviewMarketplaceAvailableAddOn.

        The unique string that we created to identify the AvailableAddOn resource.

        :param sid: The sid of this PreviewMarketplaceAvailableAddOn.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^XB[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^XB[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this PreviewMarketplaceAvailableAddOn.

        The absolute URL of the resource.

        :return: The url of this PreviewMarketplaceAvailableAddOn.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PreviewMarketplaceAvailableAddOn.

        The absolute URL of the resource.

        :param url: The url of this PreviewMarketplaceAvailableAddOn.
        :type url: str
        """

        self._url = url
