# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PreviewWirelessCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, command: str=None, command_mode: str=None, date_created: datetime=None, date_updated: datetime=None, device_sid: str=None, direction: str=None, sid: str=None, sim_sid: str=None, status: str=None, url: str=None):
        """PreviewWirelessCommand - a model defined in OpenAPI

        :param account_sid: The account_sid of this PreviewWirelessCommand.
        :param command: The command of this PreviewWirelessCommand.
        :param command_mode: The command_mode of this PreviewWirelessCommand.
        :param date_created: The date_created of this PreviewWirelessCommand.
        :param date_updated: The date_updated of this PreviewWirelessCommand.
        :param device_sid: The device_sid of this PreviewWirelessCommand.
        :param direction: The direction of this PreviewWirelessCommand.
        :param sid: The sid of this PreviewWirelessCommand.
        :param sim_sid: The sim_sid of this PreviewWirelessCommand.
        :param status: The status of this PreviewWirelessCommand.
        :param url: The url of this PreviewWirelessCommand.
        """
        self.openapi_types = {
            'account_sid': str,
            'command': str,
            'command_mode': str,
            'date_created': datetime,
            'date_updated': datetime,
            'device_sid': str,
            'direction': str,
            'sid': str,
            'sim_sid': str,
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'command': 'command',
            'command_mode': 'command_mode',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'device_sid': 'device_sid',
            'direction': 'direction',
            'sid': 'sid',
            'sim_sid': 'sim_sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._command = command
        self._command_mode = command_mode
        self._date_created = date_created
        self._date_updated = date_updated
        self._device_sid = device_sid
        self._direction = direction
        self._sid = sid
        self._sim_sid = sim_sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviewWirelessCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The preview.wireless.command of this PreviewWirelessCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this PreviewWirelessCommand.


        :return: The account_sid of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this PreviewWirelessCommand.


        :param account_sid: The account_sid of this PreviewWirelessCommand.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def command(self):
        """Gets the command of this PreviewWirelessCommand.


        :return: The command of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this PreviewWirelessCommand.


        :param command: The command of this PreviewWirelessCommand.
        :type command: str
        """

        self._command = command

    @property
    def command_mode(self):
        """Gets the command_mode of this PreviewWirelessCommand.


        :return: The command_mode of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._command_mode

    @command_mode.setter
    def command_mode(self, command_mode):
        """Sets the command_mode of this PreviewWirelessCommand.


        :param command_mode: The command_mode of this PreviewWirelessCommand.
        :type command_mode: str
        """

        self._command_mode = command_mode

    @property
    def date_created(self):
        """Gets the date_created of this PreviewWirelessCommand.


        :return: The date_created of this PreviewWirelessCommand.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PreviewWirelessCommand.


        :param date_created: The date_created of this PreviewWirelessCommand.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this PreviewWirelessCommand.


        :return: The date_updated of this PreviewWirelessCommand.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this PreviewWirelessCommand.


        :param date_updated: The date_updated of this PreviewWirelessCommand.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def device_sid(self):
        """Gets the device_sid of this PreviewWirelessCommand.


        :return: The device_sid of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._device_sid

    @device_sid.setter
    def device_sid(self, device_sid):
        """Sets the device_sid of this PreviewWirelessCommand.


        :param device_sid: The device_sid of this PreviewWirelessCommand.
        :type device_sid: str
        """
        if device_sid is not None and len(device_sid) > 34:
            raise ValueError("Invalid value for `device_sid`, length must be less than or equal to `34`")
        if device_sid is not None and len(device_sid) < 34:
            raise ValueError("Invalid value for `device_sid`, length must be greater than or equal to `34`")
        if device_sid is not None and not re.search(r'^DE[0-9a-fA-F]{32}$', device_sid):
            raise ValueError("Invalid value for `device_sid`, must be a follow pattern or equal to `/^DE[0-9a-fA-F]{32}$/`")

        self._device_sid = device_sid

    @property
    def direction(self):
        """Gets the direction of this PreviewWirelessCommand.


        :return: The direction of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PreviewWirelessCommand.


        :param direction: The direction of this PreviewWirelessCommand.
        :type direction: str
        """

        self._direction = direction

    @property
    def sid(self):
        """Gets the sid of this PreviewWirelessCommand.


        :return: The sid of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this PreviewWirelessCommand.


        :param sid: The sid of this PreviewWirelessCommand.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^DC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^DC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sim_sid(self):
        """Gets the sim_sid of this PreviewWirelessCommand.


        :return: The sim_sid of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._sim_sid

    @sim_sid.setter
    def sim_sid(self, sim_sid):
        """Sets the sim_sid of this PreviewWirelessCommand.


        :param sim_sid: The sim_sid of this PreviewWirelessCommand.
        :type sim_sid: str
        """
        if sim_sid is not None and len(sim_sid) > 34:
            raise ValueError("Invalid value for `sim_sid`, length must be less than or equal to `34`")
        if sim_sid is not None and len(sim_sid) < 34:
            raise ValueError("Invalid value for `sim_sid`, length must be greater than or equal to `34`")
        if sim_sid is not None and not re.search(r'^DE[0-9a-fA-F]{32}$', sim_sid):
            raise ValueError("Invalid value for `sim_sid`, must be a follow pattern or equal to `/^DE[0-9a-fA-F]{32}$/`")

        self._sim_sid = sim_sid

    @property
    def status(self):
        """Gets the status of this PreviewWirelessCommand.


        :return: The status of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PreviewWirelessCommand.


        :param status: The status of this PreviewWirelessCommand.
        :type status: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this PreviewWirelessCommand.


        :return: The url of this PreviewWirelessCommand.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PreviewWirelessCommand.


        :param url: The url of this PreviewWirelessCommand.
        :type url: str
        """

        self._url = url
