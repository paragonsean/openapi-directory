# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PreviewSyncServiceDocumentDocumentPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, document_sid: str=None, identity: str=None, manage: bool=None, read: bool=None, service_sid: str=None, url: str=None, write: bool=None):
        """PreviewSyncServiceDocumentDocumentPermission - a model defined in OpenAPI

        :param account_sid: The account_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :param document_sid: The document_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :param identity: The identity of this PreviewSyncServiceDocumentDocumentPermission.
        :param manage: The manage of this PreviewSyncServiceDocumentDocumentPermission.
        :param read: The read of this PreviewSyncServiceDocumentDocumentPermission.
        :param service_sid: The service_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :param url: The url of this PreviewSyncServiceDocumentDocumentPermission.
        :param write: The write of this PreviewSyncServiceDocumentDocumentPermission.
        """
        self.openapi_types = {
            'account_sid': str,
            'document_sid': str,
            'identity': str,
            'manage': bool,
            'read': bool,
            'service_sid': str,
            'url': str,
            'write': bool
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'document_sid': 'document_sid',
            'identity': 'identity',
            'manage': 'manage',
            'read': 'read',
            'service_sid': 'service_sid',
            'url': 'url',
            'write': 'write'
        }

        self._account_sid = account_sid
        self._document_sid = document_sid
        self._identity = identity
        self._manage = manage
        self._read = read
        self._service_sid = service_sid
        self._url = url
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviewSyncServiceDocumentDocumentPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The preview.sync.service.document.document_permission of this PreviewSyncServiceDocumentDocumentPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Twilio Account.

        :return: The account_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Twilio Account.

        :param account_sid: The account_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def document_sid(self):
        """Gets the document_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Sync Document to which the Permission applies.

        :return: The document_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: str
        """
        return self._document_sid

    @document_sid.setter
    def document_sid(self, document_sid):
        """Sets the document_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Sync Document to which the Permission applies.

        :param document_sid: The document_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :type document_sid: str
        """
        if document_sid is not None and len(document_sid) > 34:
            raise ValueError("Invalid value for `document_sid`, length must be less than or equal to `34`")
        if document_sid is not None and len(document_sid) < 34:
            raise ValueError("Invalid value for `document_sid`, length must be greater than or equal to `34`")
        if document_sid is not None and not re.search(r'^ET[0-9a-fA-F]{32}$', document_sid):
            raise ValueError("Invalid value for `document_sid`, must be a follow pattern or equal to `/^ET[0-9a-fA-F]{32}$/`")

        self._document_sid = document_sid

    @property
    def identity(self):
        """Gets the identity of this PreviewSyncServiceDocumentDocumentPermission.

        Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.

        :return: The identity of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this PreviewSyncServiceDocumentDocumentPermission.

        Arbitrary string identifier representing a human user associated with an FPA token, assigned by the developer.

        :param identity: The identity of this PreviewSyncServiceDocumentDocumentPermission.
        :type identity: str
        """

        self._identity = identity

    @property
    def manage(self):
        """Gets the manage of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can delete the Sync Document.

        :return: The manage of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: bool
        """
        return self._manage

    @manage.setter
    def manage(self, manage):
        """Sets the manage of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can delete the Sync Document.

        :param manage: The manage of this PreviewSyncServiceDocumentDocumentPermission.
        :type manage: bool
        """

        self._manage = manage

    @property
    def read(self):
        """Gets the read of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can read the Sync Document.

        :return: The read of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can read the Sync Document.

        :param read: The read of this PreviewSyncServiceDocumentDocumentPermission.
        :type read: bool
        """

        self._read = read

    @property
    def service_sid(self):
        """Gets the service_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Sync Service Instance.

        :return: The service_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this PreviewSyncServiceDocumentDocumentPermission.

        The unique SID identifier of the Sync Service Instance.

        :param service_sid: The service_sid of this PreviewSyncServiceDocumentDocumentPermission.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def url(self):
        """Gets the url of this PreviewSyncServiceDocumentDocumentPermission.

        Contains an absolute URL for this Sync Document Permission.

        :return: The url of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PreviewSyncServiceDocumentDocumentPermission.

        Contains an absolute URL for this Sync Document Permission.

        :param url: The url of this PreviewSyncServiceDocumentDocumentPermission.
        :type url: str
        """

        self._url = url

    @property
    def write(self):
        """Gets the write of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can update the Sync Document.

        :return: The write of this PreviewSyncServiceDocumentDocumentPermission.
        :rtype: bool
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this PreviewSyncServiceDocumentDocumentPermission.

        Boolean flag specifying whether the identity can update the Sync Document.

        :param write: The write of this PreviewSyncServiceDocumentDocumentPermission.
        :type write: bool
        """

        self._write = write
