/**
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVoiceV1ConnectionPolicyTargetApi_H
#define OAI_OAIVoiceV1ConnectionPolicyTargetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListConnectionPolicyTargetResponse.h"
#include "OAIVoice_v1_connection_policy_connection_policy_target.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVoiceV1ConnectionPolicyTargetApi : public QObject {
    Q_OBJECT

public:
    OAIVoiceV1ConnectionPolicyTargetApi(const int timeOut = 0);
    ~OAIVoiceV1ConnectionPolicyTargetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  connection_policy_sid QString [required]
    * @param[in]  target QString [required]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  weight qint32 [optional]
    */
    virtual void createConnectionPolicyTarget(const QString &connection_policy_sid, const QString &target, const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &weight = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  connection_policy_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteConnectionPolicyTarget(const QString &connection_policy_sid, const QString &sid);

    /**
    * @param[in]  connection_policy_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConnectionPolicyTarget(const QString &connection_policy_sid, const QString &sid);

    /**
    * @param[in]  connection_policy_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConnectionPolicyTarget(const QString &connection_policy_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  connection_policy_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  target QString [optional]
    * @param[in]  weight qint32 [optional]
    */
    virtual void updateConnectionPolicyTarget(const QString &connection_policy_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &weight = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConnectionPolicyTargetCallback(OAIHttpRequestWorker *worker);
    void deleteConnectionPolicyTargetCallback(OAIHttpRequestWorker *worker);
    void fetchConnectionPolicyTargetCallback(OAIHttpRequestWorker *worker);
    void listConnectionPolicyTargetCallback(OAIHttpRequestWorker *worker);
    void updateConnectionPolicyTargetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConnectionPolicyTargetSignal(OAIVoice_v1_connection_policy_connection_policy_target summary);
    void deleteConnectionPolicyTargetSignal();
    void fetchConnectionPolicyTargetSignal(OAIVoice_v1_connection_policy_connection_policy_target summary);
    void listConnectionPolicyTargetSignal(OAIListConnectionPolicyTargetResponse summary);
    void updateConnectionPolicyTargetSignal(OAIVoice_v1_connection_policy_connection_policy_target summary);


    void createConnectionPolicyTargetSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy_connection_policy_target summary);
    void deleteConnectionPolicyTargetSignalFull(OAIHttpRequestWorker *worker);
    void fetchConnectionPolicyTargetSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy_connection_policy_target summary);
    void listConnectionPolicyTargetSignalFull(OAIHttpRequestWorker *worker, OAIListConnectionPolicyTargetResponse summary);
    void updateConnectionPolicyTargetSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy_connection_policy_target summary);

    Q_DECL_DEPRECATED_X("Use createConnectionPolicyTargetSignalError() instead")
    void createConnectionPolicyTargetSignalE(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionPolicyTargetSignalError(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionPolicyTargetSignalError() instead")
    void deleteConnectionPolicyTargetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionPolicyTargetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectionPolicyTargetSignalError() instead")
    void fetchConnectionPolicyTargetSignalE(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectionPolicyTargetSignalError(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionPolicyTargetSignalError() instead")
    void listConnectionPolicyTargetSignalE(OAIListConnectionPolicyTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionPolicyTargetSignalError(OAIListConnectionPolicyTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionPolicyTargetSignalError() instead")
    void updateConnectionPolicyTargetSignalE(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionPolicyTargetSignalError(OAIVoice_v1_connection_policy_connection_policy_target summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConnectionPolicyTargetSignalErrorFull() instead")
    void createConnectionPolicyTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionPolicyTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionPolicyTargetSignalErrorFull() instead")
    void deleteConnectionPolicyTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionPolicyTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectionPolicyTargetSignalErrorFull() instead")
    void fetchConnectionPolicyTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectionPolicyTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionPolicyTargetSignalErrorFull() instead")
    void listConnectionPolicyTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionPolicyTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionPolicyTargetSignalErrorFull() instead")
    void updateConnectionPolicyTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionPolicyTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
