/**
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVoiceV1ByocTrunkApi_H
#define OAI_OAIVoiceV1ByocTrunkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListByocTrunkResponse.h"
#include "OAIVoice_v1_byoc_trunk.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVoiceV1ByocTrunkApi : public QObject {
    Q_OBJECT

public:
    OAIVoiceV1ByocTrunkApi(const int timeOut = 0);
    ~OAIVoiceV1ByocTrunkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cnam_lookup_enabled bool [optional]
    * @param[in]  connection_policy_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  from_domain_sid QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  status_callback_url QString [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void createByocTrunk(const ::OpenAPI::OptionalParam<bool> &cnam_lookup_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &connection_policy_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_domain_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteByocTrunk(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchByocTrunk(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listByocTrunk(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  cnam_lookup_enabled bool [optional]
    * @param[in]  connection_policy_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  from_domain_sid QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  status_callback_url QString [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void updateByocTrunk(const QString &sid, const ::OpenAPI::OptionalParam<bool> &cnam_lookup_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &connection_policy_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_domain_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createByocTrunkCallback(OAIHttpRequestWorker *worker);
    void deleteByocTrunkCallback(OAIHttpRequestWorker *worker);
    void fetchByocTrunkCallback(OAIHttpRequestWorker *worker);
    void listByocTrunkCallback(OAIHttpRequestWorker *worker);
    void updateByocTrunkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createByocTrunkSignal(OAIVoice_v1_byoc_trunk summary);
    void deleteByocTrunkSignal();
    void fetchByocTrunkSignal(OAIVoice_v1_byoc_trunk summary);
    void listByocTrunkSignal(OAIListByocTrunkResponse summary);
    void updateByocTrunkSignal(OAIVoice_v1_byoc_trunk summary);


    void createByocTrunkSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_byoc_trunk summary);
    void deleteByocTrunkSignalFull(OAIHttpRequestWorker *worker);
    void fetchByocTrunkSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_byoc_trunk summary);
    void listByocTrunkSignalFull(OAIHttpRequestWorker *worker, OAIListByocTrunkResponse summary);
    void updateByocTrunkSignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_byoc_trunk summary);

    Q_DECL_DEPRECATED_X("Use createByocTrunkSignalError() instead")
    void createByocTrunkSignalE(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createByocTrunkSignalError(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteByocTrunkSignalError() instead")
    void deleteByocTrunkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteByocTrunkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchByocTrunkSignalError() instead")
    void fetchByocTrunkSignalE(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchByocTrunkSignalError(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listByocTrunkSignalError() instead")
    void listByocTrunkSignalE(OAIListByocTrunkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listByocTrunkSignalError(OAIListByocTrunkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateByocTrunkSignalError() instead")
    void updateByocTrunkSignalE(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateByocTrunkSignalError(OAIVoice_v1_byoc_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createByocTrunkSignalErrorFull() instead")
    void createByocTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createByocTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteByocTrunkSignalErrorFull() instead")
    void deleteByocTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteByocTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchByocTrunkSignalErrorFull() instead")
    void fetchByocTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchByocTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listByocTrunkSignalErrorFull() instead")
    void listByocTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listByocTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateByocTrunkSignalErrorFull() instead")
    void updateByocTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateByocTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
