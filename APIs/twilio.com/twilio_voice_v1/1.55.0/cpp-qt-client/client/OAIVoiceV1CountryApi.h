/**
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVoiceV1CountryApi_H
#define OAI_OAIVoiceV1CountryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListDialingPermissionsCountryResponse.h"
#include "OAIVoice_v1_dialing_permissions_dialing_permissions_country_instance.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVoiceV1CountryApi : public QObject {
    Q_OBJECT

public:
    OAIVoiceV1CountryApi(const int timeOut = 0);
    ~OAIVoiceV1CountryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  iso_code QString [required]
    */
    virtual void fetchDialingPermissionsCountry(const QString &iso_code);

    /**
    * @param[in]  iso_code QString [optional]
    * @param[in]  continent QString [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  low_risk_numbers_enabled bool [optional]
    * @param[in]  high_risk_special_numbers_enabled bool [optional]
    * @param[in]  high_risk_tollfraud_numbers_enabled bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listDialingPermissionsCountry(const ::OpenAPI::OptionalParam<QString> &iso_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &low_risk_numbers_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &high_risk_special_numbers_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &high_risk_tollfraud_numbers_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchDialingPermissionsCountryCallback(OAIHttpRequestWorker *worker);
    void listDialingPermissionsCountryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchDialingPermissionsCountrySignal(OAIVoice_v1_dialing_permissions_dialing_permissions_country_instance summary);
    void listDialingPermissionsCountrySignal(OAIListDialingPermissionsCountryResponse summary);


    void fetchDialingPermissionsCountrySignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_dialing_permissions_dialing_permissions_country_instance summary);
    void listDialingPermissionsCountrySignalFull(OAIHttpRequestWorker *worker, OAIListDialingPermissionsCountryResponse summary);

    Q_DECL_DEPRECATED_X("Use fetchDialingPermissionsCountrySignalError() instead")
    void fetchDialingPermissionsCountrySignalE(OAIVoice_v1_dialing_permissions_dialing_permissions_country_instance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDialingPermissionsCountrySignalError(OAIVoice_v1_dialing_permissions_dialing_permissions_country_instance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDialingPermissionsCountrySignalError() instead")
    void listDialingPermissionsCountrySignalE(OAIListDialingPermissionsCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDialingPermissionsCountrySignalError(OAIListDialingPermissionsCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchDialingPermissionsCountrySignalErrorFull() instead")
    void fetchDialingPermissionsCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDialingPermissionsCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDialingPermissionsCountrySignalErrorFull() instead")
    void listDialingPermissionsCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDialingPermissionsCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
