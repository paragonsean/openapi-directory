/**
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVoiceV1ConnectionPolicyApi_H
#define OAI_OAIVoiceV1ConnectionPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListConnectionPolicyResponse.h"
#include "OAIVoice_v1_connection_policy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVoiceV1ConnectionPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIVoiceV1ConnectionPolicyApi(const int timeOut = 0);
    ~OAIVoiceV1ConnectionPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [optional]
    */
    virtual void createConnectionPolicy(const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteConnectionPolicy(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchConnectionPolicy(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConnectionPolicy(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void updateConnectionPolicy(const QString &sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConnectionPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteConnectionPolicyCallback(OAIHttpRequestWorker *worker);
    void fetchConnectionPolicyCallback(OAIHttpRequestWorker *worker);
    void listConnectionPolicyCallback(OAIHttpRequestWorker *worker);
    void updateConnectionPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConnectionPolicySignal(OAIVoice_v1_connection_policy summary);
    void deleteConnectionPolicySignal();
    void fetchConnectionPolicySignal(OAIVoice_v1_connection_policy summary);
    void listConnectionPolicySignal(OAIListConnectionPolicyResponse summary);
    void updateConnectionPolicySignal(OAIVoice_v1_connection_policy summary);


    void createConnectionPolicySignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy summary);
    void deleteConnectionPolicySignalFull(OAIHttpRequestWorker *worker);
    void fetchConnectionPolicySignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy summary);
    void listConnectionPolicySignalFull(OAIHttpRequestWorker *worker, OAIListConnectionPolicyResponse summary);
    void updateConnectionPolicySignalFull(OAIHttpRequestWorker *worker, OAIVoice_v1_connection_policy summary);

    Q_DECL_DEPRECATED_X("Use createConnectionPolicySignalError() instead")
    void createConnectionPolicySignalE(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionPolicySignalError(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionPolicySignalError() instead")
    void deleteConnectionPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectionPolicySignalError() instead")
    void fetchConnectionPolicySignalE(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectionPolicySignalError(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionPolicySignalError() instead")
    void listConnectionPolicySignalE(OAIListConnectionPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionPolicySignalError(OAIListConnectionPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionPolicySignalError() instead")
    void updateConnectionPolicySignalE(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionPolicySignalError(OAIVoice_v1_connection_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConnectionPolicySignalErrorFull() instead")
    void createConnectionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConnectionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConnectionPolicySignalErrorFull() instead")
    void deleteConnectionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectionPolicySignalErrorFull() instead")
    void fetchConnectionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectionPolicySignalErrorFull() instead")
    void listConnectionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectionPolicySignalErrorFull() instead")
    void updateConnectionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
