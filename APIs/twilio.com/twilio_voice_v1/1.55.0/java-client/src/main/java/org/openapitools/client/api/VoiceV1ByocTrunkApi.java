/*
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListByocTrunkResponse;
import java.net.URI;
import org.openapitools.client.model.VoiceV1ByocTrunk;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoiceV1ByocTrunkApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoiceV1ByocTrunkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoiceV1ByocTrunkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createByocTrunk
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByocTrunkCall(Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ByocTrunks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnamLookupEnabled != null) {
            localVarFormParams.put("CnamLookupEnabled", cnamLookupEnabled);
        }

        if (connectionPolicySid != null) {
            localVarFormParams.put("ConnectionPolicySid", connectionPolicySid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (fromDomainSid != null) {
            localVarFormParams.put("FromDomainSid", fromDomainSid);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (statusCallbackUrl != null) {
            localVarFormParams.put("StatusCallbackUrl", statusCallbackUrl);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createByocTrunkValidateBeforeCall(Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        return createByocTrunkCall(cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * 
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @return VoiceV1ByocTrunk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ByocTrunk createByocTrunk(Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<VoiceV1ByocTrunk> localVarResp = createByocTrunkWithHttpInfo(cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @return ApiResponse&lt;VoiceV1ByocTrunk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ByocTrunk> createByocTrunkWithHttpInfo(Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = createByocTrunkValidateBeforeCall(cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createByocTrunkAsync(Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<VoiceV1ByocTrunk> _callback) throws ApiException {

        okhttp3.Call localVarCall = createByocTrunkValidateBeforeCall(cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteByocTrunk
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByocTrunkCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ByocTrunks/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByocTrunkValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteByocTrunk(Async)");
        }

        return deleteByocTrunkCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteByocTrunk(String sid) throws ApiException {
        deleteByocTrunkWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteByocTrunkWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteByocTrunkValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByocTrunkAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByocTrunkValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchByocTrunk
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchByocTrunkCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ByocTrunks/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchByocTrunkValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchByocTrunk(Async)");
        }

        return fetchByocTrunkCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. (required)
     * @return VoiceV1ByocTrunk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ByocTrunk fetchByocTrunk(String sid) throws ApiException {
        ApiResponse<VoiceV1ByocTrunk> localVarResp = fetchByocTrunkWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. (required)
     * @return ApiResponse&lt;VoiceV1ByocTrunk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ByocTrunk> fetchByocTrunkWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchByocTrunkValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchByocTrunkAsync(String sid, final ApiCallback<VoiceV1ByocTrunk> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchByocTrunkValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listByocTrunk
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listByocTrunkCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ByocTrunks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByocTrunkValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listByocTrunkCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListByocTrunkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListByocTrunkResponse listByocTrunk(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListByocTrunkResponse> localVarResp = listByocTrunkWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListByocTrunkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListByocTrunkResponse> listByocTrunkWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listByocTrunkValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListByocTrunkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listByocTrunkAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListByocTrunkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByocTrunkValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListByocTrunkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateByocTrunk
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. (required)
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateByocTrunkCall(String sid, Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ByocTrunks/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnamLookupEnabled != null) {
            localVarFormParams.put("CnamLookupEnabled", cnamLookupEnabled);
        }

        if (connectionPolicySid != null) {
            localVarFormParams.put("ConnectionPolicySid", connectionPolicySid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (fromDomainSid != null) {
            localVarFormParams.put("FromDomainSid", fromDomainSid);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (statusCallbackUrl != null) {
            localVarFormParams.put("StatusCallbackUrl", statusCallbackUrl);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByocTrunkValidateBeforeCall(String sid, Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateByocTrunk(Async)");
        }

        return updateByocTrunkCall(sid, cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. (required)
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @return VoiceV1ByocTrunk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ByocTrunk updateByocTrunk(String sid, Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<VoiceV1ByocTrunk> localVarResp = updateByocTrunkWithHttpInfo(sid, cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. (required)
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @return ApiResponse&lt;VoiceV1ByocTrunk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ByocTrunk> updateByocTrunkWithHttpInfo(String sid, Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateByocTrunkValidateBeforeCall(sid, cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the BYOC Trunk resource to update. (required)
     * @param cnamLookupEnabled Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the BYOC Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information. (optional)
     * @param connectionPolicySid The SID of the Connection Policy that Twilio will use when routing traffic to your communications infrastructure. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param fromDomainSid The SID of the SIP Domain that should be used in the &#x60;From&#x60; header of originating calls sent to your SIP infrastructure. If your SIP infrastructure allows users to \\\&quot;call back\\\&quot; an incoming call, configure this with a [SIP Domain](https://www.twilio.com/docs/voice/api/sending-sip) to ensure proper routing. If not configured, the from domain will default to \\\&quot;sip.twilio.com\\\&quot;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param statusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceUrl The URL we should call when the BYOC Trunk receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateByocTrunkAsync(String sid, Boolean cnamLookupEnabled, String connectionPolicySid, String friendlyName, String fromDomainSid, String statusCallbackMethod, URI statusCallbackUrl, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<VoiceV1ByocTrunk> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByocTrunkValidateBeforeCall(sid, cnamLookupEnabled, connectionPolicySid, friendlyName, fromDomainSid, statusCallbackMethod, statusCallbackUrl, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ByocTrunk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
