/*
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListConnectionPolicyTargetResponse;
import java.net.URI;
import org.openapitools.client.model.VoiceV1ConnectionPolicyConnectionPolicyTarget;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoiceV1ConnectionPolicyTargetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoiceV1ConnectionPolicyTargetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoiceV1ConnectionPolicyTargetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConnectionPolicyTarget
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (required)
     * @param enabled Whether the Target is enabled. The default is &#x60;true&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionPolicyTargetCall(String connectionPolicySid, URI target, Boolean enabled, String friendlyName, Integer priority, Integer weight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets"
            .replace("{" + "ConnectionPolicySid" + "}", localVarApiClient.escapeString(connectionPolicySid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarFormParams.put("Enabled", enabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (priority != null) {
            localVarFormParams.put("Priority", priority);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        if (weight != null) {
            localVarFormParams.put("Weight", weight);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionPolicyTargetValidateBeforeCall(String connectionPolicySid, URI target, Boolean enabled, String friendlyName, Integer priority, Integer weight, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionPolicySid' is set
        if (connectionPolicySid == null) {
            throw new ApiException("Missing the required parameter 'connectionPolicySid' when calling createConnectionPolicyTarget(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling createConnectionPolicyTarget(Async)");
        }

        return createConnectionPolicyTargetCall(connectionPolicySid, target, enabled, friendlyName, priority, weight, _callback);

    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (required)
     * @param enabled Whether the Target is enabled. The default is &#x60;true&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @return VoiceV1ConnectionPolicyConnectionPolicyTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ConnectionPolicyConnectionPolicyTarget createConnectionPolicyTarget(String connectionPolicySid, URI target, Boolean enabled, String friendlyName, Integer priority, Integer weight) throws ApiException {
        ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> localVarResp = createConnectionPolicyTargetWithHttpInfo(connectionPolicySid, target, enabled, friendlyName, priority, weight);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (required)
     * @param enabled Whether the Target is enabled. The default is &#x60;true&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @return ApiResponse&lt;VoiceV1ConnectionPolicyConnectionPolicyTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> createConnectionPolicyTargetWithHttpInfo(String connectionPolicySid, URI target, Boolean enabled, String friendlyName, Integer priority, Integer weight) throws ApiException {
        okhttp3.Call localVarCall = createConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, target, enabled, friendlyName, priority, weight, null);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (required)
     * @param enabled Whether the Target is enabled. The default is &#x60;true&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive, and the default is 10. The lowest number represents the most important target. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive, and the default is 10. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionPolicyTargetAsync(String connectionPolicySid, URI target, Boolean enabled, String friendlyName, Integer priority, Integer weight, final ApiCallback<VoiceV1ConnectionPolicyConnectionPolicyTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, target, enabled, friendlyName, priority, weight, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnectionPolicyTarget
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionPolicyTargetCall(String connectionPolicySid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
            .replace("{" + "ConnectionPolicySid" + "}", localVarApiClient.escapeString(connectionPolicySid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionPolicyTargetValidateBeforeCall(String connectionPolicySid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionPolicySid' is set
        if (connectionPolicySid == null) {
            throw new ApiException("Missing the required parameter 'connectionPolicySid' when calling deleteConnectionPolicyTarget(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConnectionPolicyTarget(Async)");
        }

        return deleteConnectionPolicyTargetCall(connectionPolicySid, sid, _callback);

    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConnectionPolicyTarget(String connectionPolicySid, String sid) throws ApiException {
        deleteConnectionPolicyTargetWithHttpInfo(connectionPolicySid, sid);
    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConnectionPolicyTargetWithHttpInfo(String connectionPolicySid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionPolicyTargetAsync(String connectionPolicySid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConnectionPolicyTarget
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConnectionPolicyTargetCall(String connectionPolicySid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
            .replace("{" + "ConnectionPolicySid" + "}", localVarApiClient.escapeString(connectionPolicySid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConnectionPolicyTargetValidateBeforeCall(String connectionPolicySid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionPolicySid' is set
        if (connectionPolicySid == null) {
            throw new ApiException("Missing the required parameter 'connectionPolicySid' when calling fetchConnectionPolicyTarget(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConnectionPolicyTarget(Async)");
        }

        return fetchConnectionPolicyTargetCall(connectionPolicySid, sid, _callback);

    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to fetch. (required)
     * @return VoiceV1ConnectionPolicyConnectionPolicyTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ConnectionPolicyConnectionPolicyTarget fetchConnectionPolicyTarget(String connectionPolicySid, String sid) throws ApiException {
        ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> localVarResp = fetchConnectionPolicyTargetWithHttpInfo(connectionPolicySid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to fetch. (required)
     * @return ApiResponse&lt;VoiceV1ConnectionPolicyConnectionPolicyTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> fetchConnectionPolicyTargetWithHttpInfo(String connectionPolicySid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, null);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConnectionPolicyTargetAsync(String connectionPolicySid, String sid, final ApiCallback<VoiceV1ConnectionPolicyConnectionPolicyTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnectionPolicyTarget
     * @param connectionPolicySid The SID of the Connection Policy from which to read the Targets. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionPolicyTargetCall(String connectionPolicySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets"
            .replace("{" + "ConnectionPolicySid" + "}", localVarApiClient.escapeString(connectionPolicySid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectionPolicyTargetValidateBeforeCall(String connectionPolicySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionPolicySid' is set
        if (connectionPolicySid == null) {
            throw new ApiException("Missing the required parameter 'connectionPolicySid' when calling listConnectionPolicyTarget(Async)");
        }

        return listConnectionPolicyTargetCall(connectionPolicySid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy from which to read the Targets. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConnectionPolicyTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConnectionPolicyTargetResponse listConnectionPolicyTarget(String connectionPolicySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConnectionPolicyTargetResponse> localVarResp = listConnectionPolicyTargetWithHttpInfo(connectionPolicySid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy from which to read the Targets. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConnectionPolicyTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConnectionPolicyTargetResponse> listConnectionPolicyTargetWithHttpInfo(String connectionPolicySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConnectionPolicyTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionPolicySid The SID of the Connection Policy from which to read the Targets. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectionPolicyTargetAsync(String connectionPolicySid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConnectionPolicyTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConnectionPolicyTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConnectionPolicyTarget
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to update. (required)
     * @param enabled Whether the Target is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target. (optional)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionPolicyTargetCall(String connectionPolicySid, String sid, Boolean enabled, String friendlyName, Integer priority, URI target, Integer weight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://voice.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}"
            .replace("{" + "ConnectionPolicySid" + "}", localVarApiClient.escapeString(connectionPolicySid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarFormParams.put("Enabled", enabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (priority != null) {
            localVarFormParams.put("Priority", priority);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        if (weight != null) {
            localVarFormParams.put("Weight", weight);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectionPolicyTargetValidateBeforeCall(String connectionPolicySid, String sid, Boolean enabled, String friendlyName, Integer priority, URI target, Integer weight, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionPolicySid' is set
        if (connectionPolicySid == null) {
            throw new ApiException("Missing the required parameter 'connectionPolicySid' when calling updateConnectionPolicyTarget(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConnectionPolicyTarget(Async)");
        }

        return updateConnectionPolicyTargetCall(connectionPolicySid, sid, enabled, friendlyName, priority, target, weight, _callback);

    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to update. (required)
     * @param enabled Whether the Target is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target. (optional)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @return VoiceV1ConnectionPolicyConnectionPolicyTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VoiceV1ConnectionPolicyConnectionPolicyTarget updateConnectionPolicyTarget(String connectionPolicySid, String sid, Boolean enabled, String friendlyName, Integer priority, URI target, Integer weight) throws ApiException {
        ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> localVarResp = updateConnectionPolicyTargetWithHttpInfo(connectionPolicySid, sid, enabled, friendlyName, priority, target, weight);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to update. (required)
     * @param enabled Whether the Target is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target. (optional)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @return ApiResponse&lt;VoiceV1ConnectionPolicyConnectionPolicyTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoiceV1ConnectionPolicyConnectionPolicyTarget> updateConnectionPolicyTargetWithHttpInfo(String connectionPolicySid, String sid, Boolean enabled, String friendlyName, Integer priority, URI target, Integer weight) throws ApiException {
        okhttp3.Call localVarCall = updateConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, enabled, friendlyName, priority, target, weight, null);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionPolicySid The SID of the Connection Policy that owns the Target. (required)
     * @param sid The unique string that we created to identify the Target resource to update. (required)
     * @param enabled Whether the Target is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It is not unique and can be up to 255 characters long. (optional)
     * @param priority The relative importance of the target. Can be an integer from 0 to 65535, inclusive. The lowest number represents the most important target. (optional)
     * @param target The SIP address you want Twilio to route your calls to. This must be a &#x60;sip:&#x60; schema. &#x60;sips&#x60; is NOT supported. (optional)
     * @param weight The value that determines the relative share of the load the Target should receive compared to other Targets with the same priority. Can be an integer from 1 to 65535, inclusive. Targets with higher values receive more load than those with lower ones with the same priority. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConnectionPolicyTargetAsync(String connectionPolicySid, String sid, Boolean enabled, String friendlyName, Integer priority, URI target, Integer weight, final ApiCallback<VoiceV1ConnectionPolicyConnectionPolicyTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectionPolicyTargetValidateBeforeCall(connectionPolicySid, sid, enabled, friendlyName, priority, target, weight, _callback);
        Type localVarReturnType = new TypeToken<VoiceV1ConnectionPolicyConnectionPolicyTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
