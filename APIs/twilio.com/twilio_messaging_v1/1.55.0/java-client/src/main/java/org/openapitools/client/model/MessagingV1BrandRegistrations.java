/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BrandRegistrationsEnumBrandFeedback;
import org.openapitools.client.model.BrandRegistrationsEnumIdentityStatus;
import org.openapitools.client.model.BrandRegistrationsEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagingV1BrandRegistrations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:38.826816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagingV1BrandRegistrations {
  public static final String SERIALIZED_NAME_A2P_PROFILE_BUNDLE_SID = "a2p_profile_bundle_sid";
  @SerializedName(SERIALIZED_NAME_A2P_PROFILE_BUNDLE_SID)
  private String a2pProfileBundleSid;

  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_BRAND_FEEDBACK = "brand_feedback";
  @SerializedName(SERIALIZED_NAME_BRAND_FEEDBACK)
  private List<BrandRegistrationsEnumBrandFeedback> brandFeedback;

  public static final String SERIALIZED_NAME_BRAND_SCORE = "brand_score";
  @SerializedName(SERIALIZED_NAME_BRAND_SCORE)
  private Integer brandScore;

  public static final String SERIALIZED_NAME_BRAND_TYPE = "brand_type";
  @SerializedName(SERIALIZED_NAME_BRAND_TYPE)
  private String brandType;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILE_BUNDLE_SID = "customer_profile_bundle_sid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILE_BUNDLE_SID)
  private String customerProfileBundleSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failure_reason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_GOVERNMENT_ENTITY = "government_entity";
  @SerializedName(SERIALIZED_NAME_GOVERNMENT_ENTITY)
  private Boolean governmentEntity;

  public static final String SERIALIZED_NAME_IDENTITY_STATUS = "identity_status";
  @SerializedName(SERIALIZED_NAME_IDENTITY_STATUS)
  private BrandRegistrationsEnumIdentityStatus identityStatus;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MOCK = "mock";
  @SerializedName(SERIALIZED_NAME_MOCK)
  private Boolean mock;

  public static final String SERIALIZED_NAME_RUSSELL3000 = "russell_3000";
  @SerializedName(SERIALIZED_NAME_RUSSELL3000)
  private Boolean russell3000;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SKIP_AUTOMATIC_SEC_VET = "skip_automatic_sec_vet";
  @SerializedName(SERIALIZED_NAME_SKIP_AUTOMATIC_SEC_VET)
  private Boolean skipAutomaticSecVet;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BrandRegistrationsEnumStatus status;

  public static final String SERIALIZED_NAME_TAX_EXEMPT_STATUS = "tax_exempt_status";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT_STATUS)
  private String taxExemptStatus;

  public static final String SERIALIZED_NAME_TCR_ID = "tcr_id";
  @SerializedName(SERIALIZED_NAME_TCR_ID)
  private String tcrId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public MessagingV1BrandRegistrations() {
  }

  public MessagingV1BrandRegistrations a2pProfileBundleSid(String a2pProfileBundleSid) {
    this.a2pProfileBundleSid = a2pProfileBundleSid;
    return this;
  }

  /**
   * A2P Messaging Profile Bundle BundleSid.
   * @return a2pProfileBundleSid
   */
  @javax.annotation.Nullable
  public String getA2pProfileBundleSid() {
    return a2pProfileBundleSid;
  }

  public void setA2pProfileBundleSid(String a2pProfileBundleSid) {
    this.a2pProfileBundleSid = a2pProfileBundleSid;
  }


  public MessagingV1BrandRegistrations accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public MessagingV1BrandRegistrations brandFeedback(List<BrandRegistrationsEnumBrandFeedback> brandFeedback) {
    this.brandFeedback = brandFeedback;
    return this;
  }

  public MessagingV1BrandRegistrations addBrandFeedbackItem(BrandRegistrationsEnumBrandFeedback brandFeedbackItem) {
    if (this.brandFeedback == null) {
      this.brandFeedback = new ArrayList<>();
    }
    this.brandFeedback.add(brandFeedbackItem);
    return this;
  }

  /**
   * Feedback on how to improve brand score
   * @return brandFeedback
   */
  @javax.annotation.Nullable
  public List<BrandRegistrationsEnumBrandFeedback> getBrandFeedback() {
    return brandFeedback;
  }

  public void setBrandFeedback(List<BrandRegistrationsEnumBrandFeedback> brandFeedback) {
    this.brandFeedback = brandFeedback;
  }


  public MessagingV1BrandRegistrations brandScore(Integer brandScore) {
    this.brandScore = brandScore;
    return this;
  }

  /**
   * The secondary vetting score if it was done. Otherwise, it will be the brand score if it&#39;s returned from TCR. It may be null if no score is available.
   * @return brandScore
   */
  @javax.annotation.Nullable
  public Integer getBrandScore() {
    return brandScore;
  }

  public void setBrandScore(Integer brandScore) {
    this.brandScore = brandScore;
  }


  public MessagingV1BrandRegistrations brandType(String brandType) {
    this.brandType = brandType;
    return this;
  }

  /**
   * Type of brand. One of: \&quot;STANDARD\&quot;, \&quot;SOLE_PROPRIETOR\&quot;. SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.
   * @return brandType
   */
  @javax.annotation.Nullable
  public String getBrandType() {
    return brandType;
  }

  public void setBrandType(String brandType) {
    this.brandType = brandType;
  }


  public MessagingV1BrandRegistrations customerProfileBundleSid(String customerProfileBundleSid) {
    this.customerProfileBundleSid = customerProfileBundleSid;
    return this;
  }

  /**
   * A2P Messaging Profile Bundle BundleSid.
   * @return customerProfileBundleSid
   */
  @javax.annotation.Nullable
  public String getCustomerProfileBundleSid() {
    return customerProfileBundleSid;
  }

  public void setCustomerProfileBundleSid(String customerProfileBundleSid) {
    this.customerProfileBundleSid = customerProfileBundleSid;
  }


  public MessagingV1BrandRegistrations dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public MessagingV1BrandRegistrations dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public MessagingV1BrandRegistrations failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * A reason why brand registration has failed. Only applicable when status is FAILED.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public MessagingV1BrandRegistrations governmentEntity(Boolean governmentEntity) {
    this.governmentEntity = governmentEntity;
    return this;
  }

  /**
   * Identified as a government entity
   * @return governmentEntity
   */
  @javax.annotation.Nullable
  public Boolean getGovernmentEntity() {
    return governmentEntity;
  }

  public void setGovernmentEntity(Boolean governmentEntity) {
    this.governmentEntity = governmentEntity;
  }


  public MessagingV1BrandRegistrations identityStatus(BrandRegistrationsEnumIdentityStatus identityStatus) {
    this.identityStatus = identityStatus;
    return this;
  }

  /**
   * Get identityStatus
   * @return identityStatus
   */
  @javax.annotation.Nullable
  public BrandRegistrationsEnumIdentityStatus getIdentityStatus() {
    return identityStatus;
  }

  public void setIdentityStatus(BrandRegistrationsEnumIdentityStatus identityStatus) {
    this.identityStatus = identityStatus;
  }


  public MessagingV1BrandRegistrations links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public MessagingV1BrandRegistrations mock(Boolean mock) {
    this.mock = mock;
    return this;
  }

  /**
   * A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
   * @return mock
   */
  @javax.annotation.Nullable
  public Boolean getMock() {
    return mock;
  }

  public void setMock(Boolean mock) {
    this.mock = mock;
  }


  public MessagingV1BrandRegistrations russell3000(Boolean russell3000) {
    this.russell3000 = russell3000;
    return this;
  }

  /**
   * Publicly traded company identified in the Russell 3000 Index
   * @return russell3000
   */
  @javax.annotation.Nullable
  public Boolean getRussell3000() {
    return russell3000;
  }

  public void setRussell3000(Boolean russell3000) {
    this.russell3000 = russell3000;
  }


  public MessagingV1BrandRegistrations sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string to identify Brand Registration.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public MessagingV1BrandRegistrations skipAutomaticSecVet(Boolean skipAutomaticSecVet) {
    this.skipAutomaticSecVet = skipAutomaticSecVet;
    return this;
  }

  /**
   * A flag to disable automatic secondary vetting for brands which it would otherwise be done.
   * @return skipAutomaticSecVet
   */
  @javax.annotation.Nullable
  public Boolean getSkipAutomaticSecVet() {
    return skipAutomaticSecVet;
  }

  public void setSkipAutomaticSecVet(Boolean skipAutomaticSecVet) {
    this.skipAutomaticSecVet = skipAutomaticSecVet;
  }


  public MessagingV1BrandRegistrations status(BrandRegistrationsEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public BrandRegistrationsEnumStatus getStatus() {
    return status;
  }

  public void setStatus(BrandRegistrationsEnumStatus status) {
    this.status = status;
  }


  public MessagingV1BrandRegistrations taxExemptStatus(String taxExemptStatus) {
    this.taxExemptStatus = taxExemptStatus;
    return this;
  }

  /**
   * Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.
   * @return taxExemptStatus
   */
  @javax.annotation.Nullable
  public String getTaxExemptStatus() {
    return taxExemptStatus;
  }

  public void setTaxExemptStatus(String taxExemptStatus) {
    this.taxExemptStatus = taxExemptStatus;
  }


  public MessagingV1BrandRegistrations tcrId(String tcrId) {
    this.tcrId = tcrId;
    return this;
  }

  /**
   * Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.
   * @return tcrId
   */
  @javax.annotation.Nullable
  public String getTcrId() {
    return tcrId;
  }

  public void setTcrId(String tcrId) {
    this.tcrId = tcrId;
  }


  public MessagingV1BrandRegistrations url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Brand Registration resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagingV1BrandRegistrations messagingV1BrandRegistrations = (MessagingV1BrandRegistrations) o;
    return Objects.equals(this.a2pProfileBundleSid, messagingV1BrandRegistrations.a2pProfileBundleSid) &&
        Objects.equals(this.accountSid, messagingV1BrandRegistrations.accountSid) &&
        Objects.equals(this.brandFeedback, messagingV1BrandRegistrations.brandFeedback) &&
        Objects.equals(this.brandScore, messagingV1BrandRegistrations.brandScore) &&
        Objects.equals(this.brandType, messagingV1BrandRegistrations.brandType) &&
        Objects.equals(this.customerProfileBundleSid, messagingV1BrandRegistrations.customerProfileBundleSid) &&
        Objects.equals(this.dateCreated, messagingV1BrandRegistrations.dateCreated) &&
        Objects.equals(this.dateUpdated, messagingV1BrandRegistrations.dateUpdated) &&
        Objects.equals(this.failureReason, messagingV1BrandRegistrations.failureReason) &&
        Objects.equals(this.governmentEntity, messagingV1BrandRegistrations.governmentEntity) &&
        Objects.equals(this.identityStatus, messagingV1BrandRegistrations.identityStatus) &&
        Objects.equals(this.links, messagingV1BrandRegistrations.links) &&
        Objects.equals(this.mock, messagingV1BrandRegistrations.mock) &&
        Objects.equals(this.russell3000, messagingV1BrandRegistrations.russell3000) &&
        Objects.equals(this.sid, messagingV1BrandRegistrations.sid) &&
        Objects.equals(this.skipAutomaticSecVet, messagingV1BrandRegistrations.skipAutomaticSecVet) &&
        Objects.equals(this.status, messagingV1BrandRegistrations.status) &&
        Objects.equals(this.taxExemptStatus, messagingV1BrandRegistrations.taxExemptStatus) &&
        Objects.equals(this.tcrId, messagingV1BrandRegistrations.tcrId) &&
        Objects.equals(this.url, messagingV1BrandRegistrations.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(a2pProfileBundleSid, accountSid, brandFeedback, brandScore, brandType, customerProfileBundleSid, dateCreated, dateUpdated, failureReason, governmentEntity, identityStatus, links, mock, russell3000, sid, skipAutomaticSecVet, status, taxExemptStatus, tcrId, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagingV1BrandRegistrations {\n");
    sb.append("    a2pProfileBundleSid: ").append(toIndentedString(a2pProfileBundleSid)).append("\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    brandFeedback: ").append(toIndentedString(brandFeedback)).append("\n");
    sb.append("    brandScore: ").append(toIndentedString(brandScore)).append("\n");
    sb.append("    brandType: ").append(toIndentedString(brandType)).append("\n");
    sb.append("    customerProfileBundleSid: ").append(toIndentedString(customerProfileBundleSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    governmentEntity: ").append(toIndentedString(governmentEntity)).append("\n");
    sb.append("    identityStatus: ").append(toIndentedString(identityStatus)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mock: ").append(toIndentedString(mock)).append("\n");
    sb.append("    russell3000: ").append(toIndentedString(russell3000)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    skipAutomaticSecVet: ").append(toIndentedString(skipAutomaticSecVet)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxExemptStatus: ").append(toIndentedString(taxExemptStatus)).append("\n");
    sb.append("    tcrId: ").append(toIndentedString(tcrId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a2p_profile_bundle_sid");
    openapiFields.add("account_sid");
    openapiFields.add("brand_feedback");
    openapiFields.add("brand_score");
    openapiFields.add("brand_type");
    openapiFields.add("customer_profile_bundle_sid");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("failure_reason");
    openapiFields.add("government_entity");
    openapiFields.add("identity_status");
    openapiFields.add("links");
    openapiFields.add("mock");
    openapiFields.add("russell_3000");
    openapiFields.add("sid");
    openapiFields.add("skip_automatic_sec_vet");
    openapiFields.add("status");
    openapiFields.add("tax_exempt_status");
    openapiFields.add("tcr_id");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagingV1BrandRegistrations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagingV1BrandRegistrations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagingV1BrandRegistrations is not found in the empty JSON string", MessagingV1BrandRegistrations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagingV1BrandRegistrations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagingV1BrandRegistrations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("a2p_profile_bundle_sid") != null && !jsonObj.get("a2p_profile_bundle_sid").isJsonNull()) && !jsonObj.get("a2p_profile_bundle_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `a2p_profile_bundle_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("a2p_profile_bundle_sid").toString()));
      }
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brand_feedback") != null && !jsonObj.get("brand_feedback").isJsonNull() && !jsonObj.get("brand_feedback").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_feedback` to be an array in the JSON string but got `%s`", jsonObj.get("brand_feedback").toString()));
      }
      if ((jsonObj.get("brand_type") != null && !jsonObj.get("brand_type").isJsonNull()) && !jsonObj.get("brand_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_type").toString()));
      }
      if ((jsonObj.get("customer_profile_bundle_sid") != null && !jsonObj.get("customer_profile_bundle_sid").isJsonNull()) && !jsonObj.get("customer_profile_bundle_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_profile_bundle_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_profile_bundle_sid").toString()));
      }
      if ((jsonObj.get("failure_reason") != null && !jsonObj.get("failure_reason").isJsonNull()) && !jsonObj.get("failure_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_reason").toString()));
      }
      if ((jsonObj.get("identity_status") != null && !jsonObj.get("identity_status").isJsonNull()) && !jsonObj.get("identity_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_status").toString()));
      }
      // validate the optional field `identity_status`
      if (jsonObj.get("identity_status") != null && !jsonObj.get("identity_status").isJsonNull()) {
        BrandRegistrationsEnumIdentityStatus.validateJsonElement(jsonObj.get("identity_status"));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        BrandRegistrationsEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("tax_exempt_status") != null && !jsonObj.get("tax_exempt_status").isJsonNull()) && !jsonObj.get("tax_exempt_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_exempt_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_exempt_status").toString()));
      }
      if ((jsonObj.get("tcr_id") != null && !jsonObj.get("tcr_id").isJsonNull()) && !jsonObj.get("tcr_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tcr_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tcr_id").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagingV1BrandRegistrations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagingV1BrandRegistrations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagingV1BrandRegistrations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagingV1BrandRegistrations.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagingV1BrandRegistrations>() {
           @Override
           public void write(JsonWriter out, MessagingV1BrandRegistrations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagingV1BrandRegistrations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagingV1BrandRegistrations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagingV1BrandRegistrations
   * @throws IOException if the JSON string is invalid with respect to MessagingV1BrandRegistrations
   */
  public static MessagingV1BrandRegistrations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagingV1BrandRegistrations.class);
  }

  /**
   * Convert an instance of MessagingV1BrandRegistrations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

