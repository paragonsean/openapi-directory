/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTollfreeVerificationResponse;
import org.openapitools.client.model.MessagingV1TollfreeVerification;
import org.openapitools.client.model.TollfreeVerificationEnumOptInType;
import org.openapitools.client.model.TollfreeVerificationEnumStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingV1TollfreeVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagingV1TollfreeVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingV1TollfreeVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTollfreeVerification
     * @param businessName The name of the business or organization using the Tollfree number. (required)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (required)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (required)
     * @param notificationEmail The email address to receive the notification about the verification result. . (required)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (required)
     * @param optInType  (required)
     * @param productionMessageSample An example of message content, i.e. a sample message. (required)
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (required)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (required)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param customerProfileSid Customer&#39;s Profile Bundle BundleSid. (optional)
     * @param externalReferenceId An optional external reference ID supplied by customer and echoed back on status retrieval. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTollfreeVerificationCall(String businessName, String businessWebsite, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, String tollfreePhoneNumberSid, List<String> useCaseCategories, String useCaseSummary, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String customerProfileSid, String externalReferenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Tollfree/Verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (additionalInformation != null) {
            localVarFormParams.put("AdditionalInformation", additionalInformation);
        }

        if (businessCity != null) {
            localVarFormParams.put("BusinessCity", businessCity);
        }

        if (businessContactEmail != null) {
            localVarFormParams.put("BusinessContactEmail", businessContactEmail);
        }

        if (businessContactFirstName != null) {
            localVarFormParams.put("BusinessContactFirstName", businessContactFirstName);
        }

        if (businessContactLastName != null) {
            localVarFormParams.put("BusinessContactLastName", businessContactLastName);
        }

        if (businessContactPhone != null) {
            localVarFormParams.put("BusinessContactPhone", businessContactPhone);
        }

        if (businessCountry != null) {
            localVarFormParams.put("BusinessCountry", businessCountry);
        }

        if (businessName != null) {
            localVarFormParams.put("BusinessName", businessName);
        }

        if (businessPostalCode != null) {
            localVarFormParams.put("BusinessPostalCode", businessPostalCode);
        }

        if (businessStateProvinceRegion != null) {
            localVarFormParams.put("BusinessStateProvinceRegion", businessStateProvinceRegion);
        }

        if (businessStreetAddress != null) {
            localVarFormParams.put("BusinessStreetAddress", businessStreetAddress);
        }

        if (businessStreetAddress2 != null) {
            localVarFormParams.put("BusinessStreetAddress2", businessStreetAddress2);
        }

        if (businessWebsite != null) {
            localVarFormParams.put("BusinessWebsite", businessWebsite);
        }

        if (customerProfileSid != null) {
            localVarFormParams.put("CustomerProfileSid", customerProfileSid);
        }

        if (externalReferenceId != null) {
            localVarFormParams.put("ExternalReferenceId", externalReferenceId);
        }

        if (messageVolume != null) {
            localVarFormParams.put("MessageVolume", messageVolume);
        }

        if (notificationEmail != null) {
            localVarFormParams.put("NotificationEmail", notificationEmail);
        }

        if (optInImageUrls != null) {
            localVarFormParams.put("OptInImageUrls", optInImageUrls);
        }

        if (optInType != null) {
            localVarFormParams.put("OptInType", optInType);
        }

        if (productionMessageSample != null) {
            localVarFormParams.put("ProductionMessageSample", productionMessageSample);
        }

        if (tollfreePhoneNumberSid != null) {
            localVarFormParams.put("TollfreePhoneNumberSid", tollfreePhoneNumberSid);
        }

        if (useCaseCategories != null) {
            localVarFormParams.put("UseCaseCategories", useCaseCategories);
        }

        if (useCaseSummary != null) {
            localVarFormParams.put("UseCaseSummary", useCaseSummary);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTollfreeVerificationValidateBeforeCall(String businessName, String businessWebsite, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, String tollfreePhoneNumberSid, List<String> useCaseCategories, String useCaseSummary, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String customerProfileSid, String externalReferenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessName' is set
        if (businessName == null) {
            throw new ApiException("Missing the required parameter 'businessName' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'businessWebsite' is set
        if (businessWebsite == null) {
            throw new ApiException("Missing the required parameter 'businessWebsite' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'messageVolume' is set
        if (messageVolume == null) {
            throw new ApiException("Missing the required parameter 'messageVolume' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'notificationEmail' is set
        if (notificationEmail == null) {
            throw new ApiException("Missing the required parameter 'notificationEmail' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'optInImageUrls' is set
        if (optInImageUrls == null) {
            throw new ApiException("Missing the required parameter 'optInImageUrls' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'optInType' is set
        if (optInType == null) {
            throw new ApiException("Missing the required parameter 'optInType' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'productionMessageSample' is set
        if (productionMessageSample == null) {
            throw new ApiException("Missing the required parameter 'productionMessageSample' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'tollfreePhoneNumberSid' is set
        if (tollfreePhoneNumberSid == null) {
            throw new ApiException("Missing the required parameter 'tollfreePhoneNumberSid' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'useCaseCategories' is set
        if (useCaseCategories == null) {
            throw new ApiException("Missing the required parameter 'useCaseCategories' when calling createTollfreeVerification(Async)");
        }

        // verify the required parameter 'useCaseSummary' is set
        if (useCaseSummary == null) {
            throw new ApiException("Missing the required parameter 'useCaseSummary' when calling createTollfreeVerification(Async)");
        }

        return createTollfreeVerificationCall(businessName, businessWebsite, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, tollfreePhoneNumberSid, useCaseCategories, useCaseSummary, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, customerProfileSid, externalReferenceId, _callback);

    }

    /**
     * 
     * 
     * @param businessName The name of the business or organization using the Tollfree number. (required)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (required)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (required)
     * @param notificationEmail The email address to receive the notification about the verification result. . (required)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (required)
     * @param optInType  (required)
     * @param productionMessageSample An example of message content, i.e. a sample message. (required)
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (required)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (required)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param customerProfileSid Customer&#39;s Profile Bundle BundleSid. (optional)
     * @param externalReferenceId An optional external reference ID supplied by customer and echoed back on status retrieval. (optional)
     * @return MessagingV1TollfreeVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1TollfreeVerification createTollfreeVerification(String businessName, String businessWebsite, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, String tollfreePhoneNumberSid, List<String> useCaseCategories, String useCaseSummary, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String customerProfileSid, String externalReferenceId) throws ApiException {
        ApiResponse<MessagingV1TollfreeVerification> localVarResp = createTollfreeVerificationWithHttpInfo(businessName, businessWebsite, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, tollfreePhoneNumberSid, useCaseCategories, useCaseSummary, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, customerProfileSid, externalReferenceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param businessName The name of the business or organization using the Tollfree number. (required)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (required)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (required)
     * @param notificationEmail The email address to receive the notification about the verification result. . (required)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (required)
     * @param optInType  (required)
     * @param productionMessageSample An example of message content, i.e. a sample message. (required)
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (required)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (required)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param customerProfileSid Customer&#39;s Profile Bundle BundleSid. (optional)
     * @param externalReferenceId An optional external reference ID supplied by customer and echoed back on status retrieval. (optional)
     * @return ApiResponse&lt;MessagingV1TollfreeVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1TollfreeVerification> createTollfreeVerificationWithHttpInfo(String businessName, String businessWebsite, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, String tollfreePhoneNumberSid, List<String> useCaseCategories, String useCaseSummary, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String customerProfileSid, String externalReferenceId) throws ApiException {
        okhttp3.Call localVarCall = createTollfreeVerificationValidateBeforeCall(businessName, businessWebsite, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, tollfreePhoneNumberSid, useCaseCategories, useCaseSummary, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, customerProfileSid, externalReferenceId, null);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param businessName The name of the business or organization using the Tollfree number. (required)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (required)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (required)
     * @param notificationEmail The email address to receive the notification about the verification result. . (required)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (required)
     * @param optInType  (required)
     * @param productionMessageSample An example of message content, i.e. a sample message. (required)
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (required)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (required)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param customerProfileSid Customer&#39;s Profile Bundle BundleSid. (optional)
     * @param externalReferenceId An optional external reference ID supplied by customer and echoed back on status retrieval. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTollfreeVerificationAsync(String businessName, String businessWebsite, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, String tollfreePhoneNumberSid, List<String> useCaseCategories, String useCaseSummary, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String customerProfileSid, String externalReferenceId, final ApiCallback<MessagingV1TollfreeVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTollfreeVerificationValidateBeforeCall(businessName, businessWebsite, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, tollfreePhoneNumberSid, useCaseCategories, useCaseSummary, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, customerProfileSid, externalReferenceId, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTollfreeVerification
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTollfreeVerificationCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Tollfree/Verifications/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTollfreeVerificationValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTollfreeVerification(Async)");
        }

        return deleteTollfreeVerificationCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTollfreeVerification(String sid) throws ApiException {
        deleteTollfreeVerificationWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTollfreeVerificationWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTollfreeVerificationValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTollfreeVerificationAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTollfreeVerificationValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTollfreeVerification
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTollfreeVerificationCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Tollfree/Verifications/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTollfreeVerificationValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTollfreeVerification(Async)");
        }

        return fetchTollfreeVerificationCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @return MessagingV1TollfreeVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1TollfreeVerification fetchTollfreeVerification(String sid) throws ApiException {
        ApiResponse<MessagingV1TollfreeVerification> localVarResp = fetchTollfreeVerificationWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @return ApiResponse&lt;MessagingV1TollfreeVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1TollfreeVerification> fetchTollfreeVerificationWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTollfreeVerificationValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTollfreeVerificationAsync(String sid, final ApiCallback<MessagingV1TollfreeVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTollfreeVerificationValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTollfreeVerification
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (optional)
     * @param status The compliance status of the Tollfree Verification record. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTollfreeVerificationCall(String tollfreePhoneNumberSid, TollfreeVerificationEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Tollfree/Verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tollfreePhoneNumberSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TollfreePhoneNumberSid", tollfreePhoneNumberSid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTollfreeVerificationValidateBeforeCall(String tollfreePhoneNumberSid, TollfreeVerificationEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listTollfreeVerificationCall(tollfreePhoneNumberSid, status, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (optional)
     * @param status The compliance status of the Tollfree Verification record. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTollfreeVerificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTollfreeVerificationResponse listTollfreeVerification(String tollfreePhoneNumberSid, TollfreeVerificationEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTollfreeVerificationResponse> localVarResp = listTollfreeVerificationWithHttpInfo(tollfreePhoneNumberSid, status, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (optional)
     * @param status The compliance status of the Tollfree Verification record. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTollfreeVerificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTollfreeVerificationResponse> listTollfreeVerificationWithHttpInfo(String tollfreePhoneNumberSid, TollfreeVerificationEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTollfreeVerificationValidateBeforeCall(tollfreePhoneNumberSid, status, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTollfreeVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification. (optional)
     * @param status The compliance status of the Tollfree Verification record. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTollfreeVerificationAsync(String tollfreePhoneNumberSid, TollfreeVerificationEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTollfreeVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTollfreeVerificationValidateBeforeCall(tollfreePhoneNumberSid, status, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTollfreeVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTollfreeVerification
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessName The name of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (optional)
     * @param editReason Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to &#39;Website fixed&#39;. (optional)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (optional)
     * @param notificationEmail The email address to receive the notification about the verification result. . (optional)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (optional)
     * @param optInType  (optional)
     * @param productionMessageSample An example of message content, i.e. a sample message. (optional)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (optional)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTollfreeVerificationCall(String sid, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessName, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String businessWebsite, String editReason, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, List<String> useCaseCategories, String useCaseSummary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Tollfree/Verifications/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (additionalInformation != null) {
            localVarFormParams.put("AdditionalInformation", additionalInformation);
        }

        if (businessCity != null) {
            localVarFormParams.put("BusinessCity", businessCity);
        }

        if (businessContactEmail != null) {
            localVarFormParams.put("BusinessContactEmail", businessContactEmail);
        }

        if (businessContactFirstName != null) {
            localVarFormParams.put("BusinessContactFirstName", businessContactFirstName);
        }

        if (businessContactLastName != null) {
            localVarFormParams.put("BusinessContactLastName", businessContactLastName);
        }

        if (businessContactPhone != null) {
            localVarFormParams.put("BusinessContactPhone", businessContactPhone);
        }

        if (businessCountry != null) {
            localVarFormParams.put("BusinessCountry", businessCountry);
        }

        if (businessName != null) {
            localVarFormParams.put("BusinessName", businessName);
        }

        if (businessPostalCode != null) {
            localVarFormParams.put("BusinessPostalCode", businessPostalCode);
        }

        if (businessStateProvinceRegion != null) {
            localVarFormParams.put("BusinessStateProvinceRegion", businessStateProvinceRegion);
        }

        if (businessStreetAddress != null) {
            localVarFormParams.put("BusinessStreetAddress", businessStreetAddress);
        }

        if (businessStreetAddress2 != null) {
            localVarFormParams.put("BusinessStreetAddress2", businessStreetAddress2);
        }

        if (businessWebsite != null) {
            localVarFormParams.put("BusinessWebsite", businessWebsite);
        }

        if (editReason != null) {
            localVarFormParams.put("EditReason", editReason);
        }

        if (messageVolume != null) {
            localVarFormParams.put("MessageVolume", messageVolume);
        }

        if (notificationEmail != null) {
            localVarFormParams.put("NotificationEmail", notificationEmail);
        }

        if (optInImageUrls != null) {
            localVarFormParams.put("OptInImageUrls", optInImageUrls);
        }

        if (optInType != null) {
            localVarFormParams.put("OptInType", optInType);
        }

        if (productionMessageSample != null) {
            localVarFormParams.put("ProductionMessageSample", productionMessageSample);
        }

        if (useCaseCategories != null) {
            localVarFormParams.put("UseCaseCategories", useCaseCategories);
        }

        if (useCaseSummary != null) {
            localVarFormParams.put("UseCaseSummary", useCaseSummary);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTollfreeVerificationValidateBeforeCall(String sid, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessName, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String businessWebsite, String editReason, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, List<String> useCaseCategories, String useCaseSummary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateTollfreeVerification(Async)");
        }

        return updateTollfreeVerificationCall(sid, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessName, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, businessWebsite, editReason, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, useCaseCategories, useCaseSummary, _callback);

    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessName The name of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (optional)
     * @param editReason Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to &#39;Website fixed&#39;. (optional)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (optional)
     * @param notificationEmail The email address to receive the notification about the verification result. . (optional)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (optional)
     * @param optInType  (optional)
     * @param productionMessageSample An example of message content, i.e. a sample message. (optional)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (optional)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (optional)
     * @return MessagingV1TollfreeVerification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1TollfreeVerification updateTollfreeVerification(String sid, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessName, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String businessWebsite, String editReason, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, List<String> useCaseCategories, String useCaseSummary) throws ApiException {
        ApiResponse<MessagingV1TollfreeVerification> localVarResp = updateTollfreeVerificationWithHttpInfo(sid, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessName, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, businessWebsite, editReason, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, useCaseCategories, useCaseSummary);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessName The name of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (optional)
     * @param editReason Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to &#39;Website fixed&#39;. (optional)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (optional)
     * @param notificationEmail The email address to receive the notification about the verification result. . (optional)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (optional)
     * @param optInType  (optional)
     * @param productionMessageSample An example of message content, i.e. a sample message. (optional)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (optional)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (optional)
     * @return ApiResponse&lt;MessagingV1TollfreeVerification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1TollfreeVerification> updateTollfreeVerificationWithHttpInfo(String sid, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessName, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String businessWebsite, String editReason, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, List<String> useCaseCategories, String useCaseSummary) throws ApiException {
        okhttp3.Call localVarCall = updateTollfreeVerificationValidateBeforeCall(sid, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessName, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, businessWebsite, editReason, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, useCaseCategories, useCaseSummary, null);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The unique string to identify Tollfree Verification. (required)
     * @param additionalInformation Additional information to be provided for verification. (optional)
     * @param businessCity The city of the business or organization using the Tollfree number. (optional)
     * @param businessContactEmail The email address of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactFirstName The first name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactLastName The last name of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessContactPhone The E.164 formatted phone number of the contact for the business or organization using the Tollfree number. (optional)
     * @param businessCountry The country of the business or organization using the Tollfree number. (optional)
     * @param businessName The name of the business or organization using the Tollfree number. (optional)
     * @param businessPostalCode The postal code of the business or organization using the Tollfree number. (optional)
     * @param businessStateProvinceRegion The state/province/region of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress The address of the business or organization using the Tollfree number. (optional)
     * @param businessStreetAddress2 The address of the business or organization using the Tollfree number. (optional)
     * @param businessWebsite The website of the business or organization using the Tollfree number. (optional)
     * @param editReason Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to &#39;Website fixed&#39;. (optional)
     * @param messageVolume Estimate monthly volume of messages from the Tollfree Number. (optional)
     * @param notificationEmail The email address to receive the notification about the verification result. . (optional)
     * @param optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL. (optional)
     * @param optInType  (optional)
     * @param productionMessageSample An example of message content, i.e. a sample message. (optional)
     * @param useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable.. (optional)
     * @param useCaseSummary Use this to further explain how messaging is used by the business or organization. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTollfreeVerificationAsync(String sid, String additionalInformation, String businessCity, String businessContactEmail, String businessContactFirstName, String businessContactLastName, String businessContactPhone, String businessCountry, String businessName, String businessPostalCode, String businessStateProvinceRegion, String businessStreetAddress, String businessStreetAddress2, String businessWebsite, String editReason, String messageVolume, String notificationEmail, List<String> optInImageUrls, TollfreeVerificationEnumOptInType optInType, String productionMessageSample, List<String> useCaseCategories, String useCaseSummary, final ApiCallback<MessagingV1TollfreeVerification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTollfreeVerificationValidateBeforeCall(sid, additionalInformation, businessCity, businessContactEmail, businessContactFirstName, businessContactLastName, businessContactPhone, businessCountry, businessName, businessPostalCode, businessStateProvinceRegion, businessStreetAddress, businessStreetAddress2, businessWebsite, editReason, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, useCaseCategories, useCaseSummary, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1TollfreeVerification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
