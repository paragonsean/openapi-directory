/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagingV1DomainCertV4
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:38.826816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagingV1DomainCertV4 {
  public static final String SERIALIZED_NAME_CERT_IN_VALIDATION = "cert_in_validation";
  @SerializedName(SERIALIZED_NAME_CERT_IN_VALIDATION)
  private Object certInValidation = null;

  public static final String SERIALIZED_NAME_CERTIFICATE_SID = "certificate_sid";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SID)
  private String certificateSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_EXPIRES = "date_expires";
  @SerializedName(SERIALIZED_NAME_DATE_EXPIRES)
  private OffsetDateTime dateExpires;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domain_name";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private URI domainName;

  public static final String SERIALIZED_NAME_DOMAIN_SID = "domain_sid";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SID)
  private String domainSid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public MessagingV1DomainCertV4() {
  }

  public MessagingV1DomainCertV4 certInValidation(Object certInValidation) {
    this.certInValidation = certInValidation;
    return this;
  }

  /**
   * Optional JSON field describing the status and upload date of a new certificate in the process of validation
   * @return certInValidation
   */
  @javax.annotation.Nullable
  public Object getCertInValidation() {
    return certInValidation;
  }

  public void setCertInValidation(Object certInValidation) {
    this.certInValidation = certInValidation;
  }


  public MessagingV1DomainCertV4 certificateSid(String certificateSid) {
    this.certificateSid = certificateSid;
    return this;
  }

  /**
   * The unique string that we created to identify this Certificate resource.
   * @return certificateSid
   */
  @javax.annotation.Nullable
  public String getCertificateSid() {
    return certificateSid;
  }

  public void setCertificateSid(String certificateSid) {
    this.certificateSid = certificateSid;
  }


  public MessagingV1DomainCertV4 dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date that this Domain was registered to the Twilio platform to create a new Domain object.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public MessagingV1DomainCertV4 dateExpires(OffsetDateTime dateExpires) {
    this.dateExpires = dateExpires;
    return this;
  }

  /**
   * Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.
   * @return dateExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateExpires() {
    return dateExpires;
  }

  public void setDateExpires(OffsetDateTime dateExpires) {
    this.dateExpires = dateExpires;
  }


  public MessagingV1DomainCertV4 dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Date that this Domain was last updated.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public MessagingV1DomainCertV4 domainName(URI domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Full url path for this domain.
   * @return domainName
   */
  @javax.annotation.Nullable
  public URI getDomainName() {
    return domainName;
  }

  public void setDomainName(URI domainName) {
    this.domainName = domainName;
  }


  public MessagingV1DomainCertV4 domainSid(String domainSid) {
    this.domainSid = domainSid;
    return this;
  }

  /**
   * The unique string that we created to identify the Domain resource.
   * @return domainSid
   */
  @javax.annotation.Nullable
  public String getDomainSid() {
    return domainSid;
  }

  public void setDomainSid(String domainSid) {
    this.domainSid = domainSid;
  }


  public MessagingV1DomainCertV4 url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagingV1DomainCertV4 messagingV1DomainCertV4 = (MessagingV1DomainCertV4) o;
    return Objects.equals(this.certInValidation, messagingV1DomainCertV4.certInValidation) &&
        Objects.equals(this.certificateSid, messagingV1DomainCertV4.certificateSid) &&
        Objects.equals(this.dateCreated, messagingV1DomainCertV4.dateCreated) &&
        Objects.equals(this.dateExpires, messagingV1DomainCertV4.dateExpires) &&
        Objects.equals(this.dateUpdated, messagingV1DomainCertV4.dateUpdated) &&
        Objects.equals(this.domainName, messagingV1DomainCertV4.domainName) &&
        Objects.equals(this.domainSid, messagingV1DomainCertV4.domainSid) &&
        Objects.equals(this.url, messagingV1DomainCertV4.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(certInValidation, certificateSid, dateCreated, dateExpires, dateUpdated, domainName, domainSid, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagingV1DomainCertV4 {\n");
    sb.append("    certInValidation: ").append(toIndentedString(certInValidation)).append("\n");
    sb.append("    certificateSid: ").append(toIndentedString(certificateSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateExpires: ").append(toIndentedString(dateExpires)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainSid: ").append(toIndentedString(domainSid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_in_validation");
    openapiFields.add("certificate_sid");
    openapiFields.add("date_created");
    openapiFields.add("date_expires");
    openapiFields.add("date_updated");
    openapiFields.add("domain_name");
    openapiFields.add("domain_sid");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagingV1DomainCertV4
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagingV1DomainCertV4.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagingV1DomainCertV4 is not found in the empty JSON string", MessagingV1DomainCertV4.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagingV1DomainCertV4.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagingV1DomainCertV4` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate_sid") != null && !jsonObj.get("certificate_sid").isJsonNull()) && !jsonObj.get("certificate_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_sid").toString()));
      }
      if ((jsonObj.get("domain_name") != null && !jsonObj.get("domain_name").isJsonNull()) && !jsonObj.get("domain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_name").toString()));
      }
      if ((jsonObj.get("domain_sid") != null && !jsonObj.get("domain_sid").isJsonNull()) && !jsonObj.get("domain_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagingV1DomainCertV4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagingV1DomainCertV4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagingV1DomainCertV4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagingV1DomainCertV4.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagingV1DomainCertV4>() {
           @Override
           public void write(JsonWriter out, MessagingV1DomainCertV4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagingV1DomainCertV4 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagingV1DomainCertV4 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagingV1DomainCertV4
   * @throws IOException if the JSON string is invalid with respect to MessagingV1DomainCertV4
   */
  public static MessagingV1DomainCertV4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagingV1DomainCertV4.class);
  }

  /**
   * Convert an instance of MessagingV1DomainCertV4 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

