/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BrandVettingEnumVettingProvider;
import org.openapitools.client.model.ListBrandVettingResponse;
import org.openapitools.client.model.MessagingV1BrandRegistrationsBrandVetting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingV1BrandVettingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagingV1BrandVettingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingV1BrandVettingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBrandVetting
     * @param brandSid The SID of the Brand Registration resource of the vettings to create . (required)
     * @param vettingProvider  (required)
     * @param vettingId The unique ID of the vetting (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandVettingCall(String brandSid, BrandVettingEnumVettingProvider vettingProvider, String vettingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings"
            .replace("{" + "BrandSid" + "}", localVarApiClient.escapeString(brandSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vettingId != null) {
            localVarFormParams.put("VettingId", vettingId);
        }

        if (vettingProvider != null) {
            localVarFormParams.put("VettingProvider", vettingProvider);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandVettingValidateBeforeCall(String brandSid, BrandVettingEnumVettingProvider vettingProvider, String vettingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandSid' is set
        if (brandSid == null) {
            throw new ApiException("Missing the required parameter 'brandSid' when calling createBrandVetting(Async)");
        }

        // verify the required parameter 'vettingProvider' is set
        if (vettingProvider == null) {
            throw new ApiException("Missing the required parameter 'vettingProvider' when calling createBrandVetting(Async)");
        }

        return createBrandVettingCall(brandSid, vettingProvider, vettingId, _callback);

    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to create . (required)
     * @param vettingProvider  (required)
     * @param vettingId The unique ID of the vetting (optional)
     * @return MessagingV1BrandRegistrationsBrandVetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1BrandRegistrationsBrandVetting createBrandVetting(String brandSid, BrandVettingEnumVettingProvider vettingProvider, String vettingId) throws ApiException {
        ApiResponse<MessagingV1BrandRegistrationsBrandVetting> localVarResp = createBrandVettingWithHttpInfo(brandSid, vettingProvider, vettingId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to create . (required)
     * @param vettingProvider  (required)
     * @param vettingId The unique ID of the vetting (optional)
     * @return ApiResponse&lt;MessagingV1BrandRegistrationsBrandVetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1BrandRegistrationsBrandVetting> createBrandVettingWithHttpInfo(String brandSid, BrandVettingEnumVettingProvider vettingProvider, String vettingId) throws ApiException {
        okhttp3.Call localVarCall = createBrandVettingValidateBeforeCall(brandSid, vettingProvider, vettingId, null);
        Type localVarReturnType = new TypeToken<MessagingV1BrandRegistrationsBrandVetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to create . (required)
     * @param vettingProvider  (required)
     * @param vettingId The unique ID of the vetting (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandVettingAsync(String brandSid, BrandVettingEnumVettingProvider vettingProvider, String vettingId, final ApiCallback<MessagingV1BrandRegistrationsBrandVetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandVettingValidateBeforeCall(brandSid, vettingProvider, vettingId, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1BrandRegistrationsBrandVetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchBrandVetting
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param brandVettingSid The Twilio SID of the third-party vetting record. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchBrandVettingCall(String brandSid, String brandVettingSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}"
            .replace("{" + "BrandSid" + "}", localVarApiClient.escapeString(brandSid.toString()))
            .replace("{" + "BrandVettingSid" + "}", localVarApiClient.escapeString(brandVettingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchBrandVettingValidateBeforeCall(String brandSid, String brandVettingSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandSid' is set
        if (brandSid == null) {
            throw new ApiException("Missing the required parameter 'brandSid' when calling fetchBrandVetting(Async)");
        }

        // verify the required parameter 'brandVettingSid' is set
        if (brandVettingSid == null) {
            throw new ApiException("Missing the required parameter 'brandVettingSid' when calling fetchBrandVetting(Async)");
        }

        return fetchBrandVettingCall(brandSid, brandVettingSid, _callback);

    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param brandVettingSid The Twilio SID of the third-party vetting record. (required)
     * @return MessagingV1BrandRegistrationsBrandVetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1BrandRegistrationsBrandVetting fetchBrandVetting(String brandSid, String brandVettingSid) throws ApiException {
        ApiResponse<MessagingV1BrandRegistrationsBrandVetting> localVarResp = fetchBrandVettingWithHttpInfo(brandSid, brandVettingSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param brandVettingSid The Twilio SID of the third-party vetting record. (required)
     * @return ApiResponse&lt;MessagingV1BrandRegistrationsBrandVetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1BrandRegistrationsBrandVetting> fetchBrandVettingWithHttpInfo(String brandSid, String brandVettingSid) throws ApiException {
        okhttp3.Call localVarCall = fetchBrandVettingValidateBeforeCall(brandSid, brandVettingSid, null);
        Type localVarReturnType = new TypeToken<MessagingV1BrandRegistrationsBrandVetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param brandVettingSid The Twilio SID of the third-party vetting record. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchBrandVettingAsync(String brandSid, String brandVettingSid, final ApiCallback<MessagingV1BrandRegistrationsBrandVetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchBrandVettingValidateBeforeCall(brandSid, brandVettingSid, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1BrandRegistrationsBrandVetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBrandVetting
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param vettingProvider The third-party provider of the vettings to read (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandVettingCall(String brandSid, BrandVettingEnumVettingProvider vettingProvider, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings"
            .replace("{" + "BrandSid" + "}", localVarApiClient.escapeString(brandSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vettingProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VettingProvider", vettingProvider));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBrandVettingValidateBeforeCall(String brandSid, BrandVettingEnumVettingProvider vettingProvider, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandSid' is set
        if (brandSid == null) {
            throw new ApiException("Missing the required parameter 'brandSid' when calling listBrandVetting(Async)");
        }

        return listBrandVettingCall(brandSid, vettingProvider, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param vettingProvider The third-party provider of the vettings to read (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListBrandVettingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBrandVettingResponse listBrandVetting(String brandSid, BrandVettingEnumVettingProvider vettingProvider, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListBrandVettingResponse> localVarResp = listBrandVettingWithHttpInfo(brandSid, vettingProvider, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param vettingProvider The third-party provider of the vettings to read (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListBrandVettingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBrandVettingResponse> listBrandVettingWithHttpInfo(String brandSid, BrandVettingEnumVettingProvider vettingProvider, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listBrandVettingValidateBeforeCall(brandSid, vettingProvider, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListBrandVettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param brandSid The SID of the Brand Registration resource of the vettings to read . (required)
     * @param vettingProvider The third-party provider of the vettings to read (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandVettingAsync(String brandSid, BrandVettingEnumVettingProvider vettingProvider, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListBrandVettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBrandVettingValidateBeforeCall(brandSid, vettingProvider, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListBrandVettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
