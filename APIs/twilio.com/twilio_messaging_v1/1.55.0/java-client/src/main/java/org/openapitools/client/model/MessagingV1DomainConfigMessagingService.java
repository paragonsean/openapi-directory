/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessagingV1DomainConfigMessagingService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:38.826816-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagingV1DomainConfigMessagingService {
  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private URI callbackUrl;

  public static final String SERIALIZED_NAME_CONFIG_SID = "config_sid";
  @SerializedName(SERIALIZED_NAME_CONFIG_SID)
  private String configSid;

  public static final String SERIALIZED_NAME_CONTINUE_ON_FAILURE = "continue_on_failure";
  @SerializedName(SERIALIZED_NAME_CONTINUE_ON_FAILURE)
  private Boolean continueOnFailure;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DOMAIN_SID = "domain_sid";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SID)
  private String domainSid;

  public static final String SERIALIZED_NAME_FALLBACK_URL = "fallback_url";
  @SerializedName(SERIALIZED_NAME_FALLBACK_URL)
  private URI fallbackUrl;

  public static final String SERIALIZED_NAME_MESSAGING_SERVICE_SID = "messaging_service_sid";
  @SerializedName(SERIALIZED_NAME_MESSAGING_SERVICE_SID)
  private String messagingServiceSid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public MessagingV1DomainConfigMessagingService() {
  }

  public MessagingV1DomainConfigMessagingService callbackUrl(URI callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * URL to receive click events to your webhook whenever the recipients click on the shortened links.
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public URI getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(URI callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public MessagingV1DomainConfigMessagingService configSid(String configSid) {
    this.configSid = configSid;
    return this;
  }

  /**
   * The unique string that we created to identify the Domain config (prefix ZK).
   * @return configSid
   */
  @javax.annotation.Nullable
  public String getConfigSid() {
    return configSid;
  }

  public void setConfigSid(String configSid) {
    this.configSid = configSid;
  }


  public MessagingV1DomainConfigMessagingService continueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
    return this;
  }

  /**
   * Boolean field to set customer delivery preference when there is a failure in linkShortening service
   * @return continueOnFailure
   */
  @javax.annotation.Nullable
  public Boolean getContinueOnFailure() {
    return continueOnFailure;
  }

  public void setContinueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
  }


  public MessagingV1DomainConfigMessagingService dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date this Domain Config was created.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public MessagingV1DomainConfigMessagingService dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Date that this Domain Config was last updated.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public MessagingV1DomainConfigMessagingService domainSid(String domainSid) {
    this.domainSid = domainSid;
    return this;
  }

  /**
   * The unique string that we created to identify the Domain resource.
   * @return domainSid
   */
  @javax.annotation.Nullable
  public String getDomainSid() {
    return domainSid;
  }

  public void setDomainSid(String domainSid) {
    this.domainSid = domainSid;
  }


  public MessagingV1DomainConfigMessagingService fallbackUrl(URI fallbackUrl) {
    this.fallbackUrl = fallbackUrl;
    return this;
  }

  /**
   * Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
   * @return fallbackUrl
   */
  @javax.annotation.Nullable
  public URI getFallbackUrl() {
    return fallbackUrl;
  }

  public void setFallbackUrl(URI fallbackUrl) {
    this.fallbackUrl = fallbackUrl;
  }


  public MessagingV1DomainConfigMessagingService messagingServiceSid(String messagingServiceSid) {
    this.messagingServiceSid = messagingServiceSid;
    return this;
  }

  /**
   * The unique string that identifies the messaging service
   * @return messagingServiceSid
   */
  @javax.annotation.Nullable
  public String getMessagingServiceSid() {
    return messagingServiceSid;
  }

  public void setMessagingServiceSid(String messagingServiceSid) {
    this.messagingServiceSid = messagingServiceSid;
  }


  public MessagingV1DomainConfigMessagingService url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagingV1DomainConfigMessagingService messagingV1DomainConfigMessagingService = (MessagingV1DomainConfigMessagingService) o;
    return Objects.equals(this.callbackUrl, messagingV1DomainConfigMessagingService.callbackUrl) &&
        Objects.equals(this.configSid, messagingV1DomainConfigMessagingService.configSid) &&
        Objects.equals(this.continueOnFailure, messagingV1DomainConfigMessagingService.continueOnFailure) &&
        Objects.equals(this.dateCreated, messagingV1DomainConfigMessagingService.dateCreated) &&
        Objects.equals(this.dateUpdated, messagingV1DomainConfigMessagingService.dateUpdated) &&
        Objects.equals(this.domainSid, messagingV1DomainConfigMessagingService.domainSid) &&
        Objects.equals(this.fallbackUrl, messagingV1DomainConfigMessagingService.fallbackUrl) &&
        Objects.equals(this.messagingServiceSid, messagingV1DomainConfigMessagingService.messagingServiceSid) &&
        Objects.equals(this.url, messagingV1DomainConfigMessagingService.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackUrl, configSid, continueOnFailure, dateCreated, dateUpdated, domainSid, fallbackUrl, messagingServiceSid, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagingV1DomainConfigMessagingService {\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    configSid: ").append(toIndentedString(configSid)).append("\n");
    sb.append("    continueOnFailure: ").append(toIndentedString(continueOnFailure)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    domainSid: ").append(toIndentedString(domainSid)).append("\n");
    sb.append("    fallbackUrl: ").append(toIndentedString(fallbackUrl)).append("\n");
    sb.append("    messagingServiceSid: ").append(toIndentedString(messagingServiceSid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_url");
    openapiFields.add("config_sid");
    openapiFields.add("continue_on_failure");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("domain_sid");
    openapiFields.add("fallback_url");
    openapiFields.add("messaging_service_sid");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagingV1DomainConfigMessagingService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagingV1DomainConfigMessagingService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagingV1DomainConfigMessagingService is not found in the empty JSON string", MessagingV1DomainConfigMessagingService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagingV1DomainConfigMessagingService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagingV1DomainConfigMessagingService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if ((jsonObj.get("config_sid") != null && !jsonObj.get("config_sid").isJsonNull()) && !jsonObj.get("config_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_sid").toString()));
      }
      if ((jsonObj.get("domain_sid") != null && !jsonObj.get("domain_sid").isJsonNull()) && !jsonObj.get("domain_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_sid").toString()));
      }
      if ((jsonObj.get("fallback_url") != null && !jsonObj.get("fallback_url").isJsonNull()) && !jsonObj.get("fallback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_url").toString()));
      }
      if ((jsonObj.get("messaging_service_sid") != null && !jsonObj.get("messaging_service_sid").isJsonNull()) && !jsonObj.get("messaging_service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messaging_service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messaging_service_sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagingV1DomainConfigMessagingService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagingV1DomainConfigMessagingService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagingV1DomainConfigMessagingService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagingV1DomainConfigMessagingService.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagingV1DomainConfigMessagingService>() {
           @Override
           public void write(JsonWriter out, MessagingV1DomainConfigMessagingService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagingV1DomainConfigMessagingService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagingV1DomainConfigMessagingService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagingV1DomainConfigMessagingService
   * @throws IOException if the JSON string is invalid with respect to MessagingV1DomainConfigMessagingService
   */
  public static MessagingV1DomainConfigMessagingService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagingV1DomainConfigMessagingService.class);
  }

  /**
   * Convert an instance of MessagingV1DomainConfigMessagingService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

