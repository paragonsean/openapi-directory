/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListUsAppToPersonResponse;
import org.openapitools.client.model.MessagingV1ServiceUsAppToPerson;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagingV1UsAppToPersonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagingV1UsAppToPersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagingV1UsAppToPersonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUsAppToPerson
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to create the resources from. (required)
     * @param brandRegistrationSid A2P Brand Registration SID (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param usAppToPersonUsecase A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] (required)
     * @param ageGated A boolean that specifies whether campaign is age gated or not. (optional)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (optional)
     * @param helpKeywords End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param helpMessage When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param optInKeywords If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum. (optional)
     * @param optInMessage If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum. (optional)
     * @param optOutKeywords End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param optOutMessage Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param subscriberOptIn A boolean that specifies whether campaign has Subscriber Optin or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsAppToPersonCall(String messagingServiceSid, String brandRegistrationSid, String description, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, String usAppToPersonUsecase, Boolean ageGated, Boolean directLending, List<String> helpKeywords, String helpMessage, List<String> optInKeywords, String optInMessage, List<String> optOutKeywords, String optOutMessage, Boolean subscriberOptIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p"
            .replace("{" + "MessagingServiceSid" + "}", localVarApiClient.escapeString(messagingServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGated != null) {
            localVarFormParams.put("AgeGated", ageGated);
        }

        if (brandRegistrationSid != null) {
            localVarFormParams.put("BrandRegistrationSid", brandRegistrationSid);
        }

        if (description != null) {
            localVarFormParams.put("Description", description);
        }

        if (directLending != null) {
            localVarFormParams.put("DirectLending", directLending);
        }

        if (hasEmbeddedLinks != null) {
            localVarFormParams.put("HasEmbeddedLinks", hasEmbeddedLinks);
        }

        if (hasEmbeddedPhone != null) {
            localVarFormParams.put("HasEmbeddedPhone", hasEmbeddedPhone);
        }

        if (helpKeywords != null) {
            localVarFormParams.put("HelpKeywords", helpKeywords);
        }

        if (helpMessage != null) {
            localVarFormParams.put("HelpMessage", helpMessage);
        }

        if (messageFlow != null) {
            localVarFormParams.put("MessageFlow", messageFlow);
        }

        if (messageSamples != null) {
            localVarFormParams.put("MessageSamples", messageSamples);
        }

        if (optInKeywords != null) {
            localVarFormParams.put("OptInKeywords", optInKeywords);
        }

        if (optInMessage != null) {
            localVarFormParams.put("OptInMessage", optInMessage);
        }

        if (optOutKeywords != null) {
            localVarFormParams.put("OptOutKeywords", optOutKeywords);
        }

        if (optOutMessage != null) {
            localVarFormParams.put("OptOutMessage", optOutMessage);
        }

        if (subscriberOptIn != null) {
            localVarFormParams.put("SubscriberOptIn", subscriberOptIn);
        }

        if (usAppToPersonUsecase != null) {
            localVarFormParams.put("UsAppToPersonUsecase", usAppToPersonUsecase);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUsAppToPersonValidateBeforeCall(String messagingServiceSid, String brandRegistrationSid, String description, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, String usAppToPersonUsecase, Boolean ageGated, Boolean directLending, List<String> helpKeywords, String helpMessage, List<String> optInKeywords, String optInMessage, List<String> optOutKeywords, String optOutMessage, Boolean subscriberOptIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messagingServiceSid' is set
        if (messagingServiceSid == null) {
            throw new ApiException("Missing the required parameter 'messagingServiceSid' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'brandRegistrationSid' is set
        if (brandRegistrationSid == null) {
            throw new ApiException("Missing the required parameter 'brandRegistrationSid' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'hasEmbeddedLinks' is set
        if (hasEmbeddedLinks == null) {
            throw new ApiException("Missing the required parameter 'hasEmbeddedLinks' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'hasEmbeddedPhone' is set
        if (hasEmbeddedPhone == null) {
            throw new ApiException("Missing the required parameter 'hasEmbeddedPhone' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'messageFlow' is set
        if (messageFlow == null) {
            throw new ApiException("Missing the required parameter 'messageFlow' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'messageSamples' is set
        if (messageSamples == null) {
            throw new ApiException("Missing the required parameter 'messageSamples' when calling createUsAppToPerson(Async)");
        }

        // verify the required parameter 'usAppToPersonUsecase' is set
        if (usAppToPersonUsecase == null) {
            throw new ApiException("Missing the required parameter 'usAppToPersonUsecase' when calling createUsAppToPerson(Async)");
        }

        return createUsAppToPersonCall(messagingServiceSid, brandRegistrationSid, description, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, usAppToPersonUsecase, ageGated, directLending, helpKeywords, helpMessage, optInKeywords, optInMessage, optOutKeywords, optOutMessage, subscriberOptIn, _callback);

    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to create the resources from. (required)
     * @param brandRegistrationSid A2P Brand Registration SID (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param usAppToPersonUsecase A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] (required)
     * @param ageGated A boolean that specifies whether campaign is age gated or not. (optional)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (optional)
     * @param helpKeywords End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param helpMessage When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param optInKeywords If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum. (optional)
     * @param optInMessage If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum. (optional)
     * @param optOutKeywords End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param optOutMessage Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param subscriberOptIn A boolean that specifies whether campaign has Subscriber Optin or not. (optional)
     * @return MessagingV1ServiceUsAppToPerson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1ServiceUsAppToPerson createUsAppToPerson(String messagingServiceSid, String brandRegistrationSid, String description, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, String usAppToPersonUsecase, Boolean ageGated, Boolean directLending, List<String> helpKeywords, String helpMessage, List<String> optInKeywords, String optInMessage, List<String> optOutKeywords, String optOutMessage, Boolean subscriberOptIn) throws ApiException {
        ApiResponse<MessagingV1ServiceUsAppToPerson> localVarResp = createUsAppToPersonWithHttpInfo(messagingServiceSid, brandRegistrationSid, description, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, usAppToPersonUsecase, ageGated, directLending, helpKeywords, helpMessage, optInKeywords, optInMessage, optOutKeywords, optOutMessage, subscriberOptIn);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to create the resources from. (required)
     * @param brandRegistrationSid A2P Brand Registration SID (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param usAppToPersonUsecase A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] (required)
     * @param ageGated A boolean that specifies whether campaign is age gated or not. (optional)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (optional)
     * @param helpKeywords End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param helpMessage When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param optInKeywords If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum. (optional)
     * @param optInMessage If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum. (optional)
     * @param optOutKeywords End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param optOutMessage Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param subscriberOptIn A boolean that specifies whether campaign has Subscriber Optin or not. (optional)
     * @return ApiResponse&lt;MessagingV1ServiceUsAppToPerson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1ServiceUsAppToPerson> createUsAppToPersonWithHttpInfo(String messagingServiceSid, String brandRegistrationSid, String description, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, String usAppToPersonUsecase, Boolean ageGated, Boolean directLending, List<String> helpKeywords, String helpMessage, List<String> optInKeywords, String optInMessage, List<String> optOutKeywords, String optOutMessage, Boolean subscriberOptIn) throws ApiException {
        okhttp3.Call localVarCall = createUsAppToPersonValidateBeforeCall(messagingServiceSid, brandRegistrationSid, description, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, usAppToPersonUsecase, ageGated, directLending, helpKeywords, helpMessage, optInKeywords, optInMessage, optOutKeywords, optOutMessage, subscriberOptIn, null);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to create the resources from. (required)
     * @param brandRegistrationSid A2P Brand Registration SID (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param usAppToPersonUsecase A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] (required)
     * @param ageGated A boolean that specifies whether campaign is age gated or not. (optional)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (optional)
     * @param helpKeywords End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param helpMessage When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param optInKeywords If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum. (optional)
     * @param optInMessage If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum. (optional)
     * @param optOutKeywords End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum. (optional)
     * @param optOutMessage Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio&#39;s Default or Advanced Opt Out features). 20 character minimum. 320 character maximum. (optional)
     * @param subscriberOptIn A boolean that specifies whether campaign has Subscriber Optin or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUsAppToPersonAsync(String messagingServiceSid, String brandRegistrationSid, String description, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, String usAppToPersonUsecase, Boolean ageGated, Boolean directLending, List<String> helpKeywords, String helpMessage, List<String> optInKeywords, String optInMessage, List<String> optOutKeywords, String optOutMessage, Boolean subscriberOptIn, final ApiCallback<MessagingV1ServiceUsAppToPerson> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUsAppToPersonValidateBeforeCall(messagingServiceSid, brandRegistrationSid, description, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, usAppToPersonUsecase, ageGated, directLending, helpKeywords, helpMessage, optInKeywords, optInMessage, optOutKeywords, optOutMessage, subscriberOptIn, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUsAppToPerson
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to delete the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to delete &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsAppToPersonCall(String messagingServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}"
            .replace("{" + "MessagingServiceSid" + "}", localVarApiClient.escapeString(messagingServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsAppToPersonValidateBeforeCall(String messagingServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messagingServiceSid' is set
        if (messagingServiceSid == null) {
            throw new ApiException("Missing the required parameter 'messagingServiceSid' when calling deleteUsAppToPerson(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteUsAppToPerson(Async)");
        }

        return deleteUsAppToPersonCall(messagingServiceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to delete the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to delete &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUsAppToPerson(String messagingServiceSid, String sid) throws ApiException {
        deleteUsAppToPersonWithHttpInfo(messagingServiceSid, sid);
    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to delete the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to delete &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUsAppToPersonWithHttpInfo(String messagingServiceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to delete the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to delete &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUsAppToPersonAsync(String messagingServiceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUsAppToPerson
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to fetch &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUsAppToPersonCall(String messagingServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}"
            .replace("{" + "MessagingServiceSid" + "}", localVarApiClient.escapeString(messagingServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUsAppToPersonValidateBeforeCall(String messagingServiceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messagingServiceSid' is set
        if (messagingServiceSid == null) {
            throw new ApiException("Missing the required parameter 'messagingServiceSid' when calling fetchUsAppToPerson(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchUsAppToPerson(Async)");
        }

        return fetchUsAppToPersonCall(messagingServiceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to fetch &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @return MessagingV1ServiceUsAppToPerson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1ServiceUsAppToPerson fetchUsAppToPerson(String messagingServiceSid, String sid) throws ApiException {
        ApiResponse<MessagingV1ServiceUsAppToPerson> localVarResp = fetchUsAppToPersonWithHttpInfo(messagingServiceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to fetch &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @return ApiResponse&lt;MessagingV1ServiceUsAppToPerson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1ServiceUsAppToPerson> fetchUsAppToPersonWithHttpInfo(String messagingServiceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, null);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to fetch &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUsAppToPersonAsync(String messagingServiceSid, String sid, final ApiCallback<MessagingV1ServiceUsAppToPerson> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsAppToPerson
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsAppToPersonCall(String messagingServiceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p"
            .replace("{" + "MessagingServiceSid" + "}", localVarApiClient.escapeString(messagingServiceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsAppToPersonValidateBeforeCall(String messagingServiceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messagingServiceSid' is set
        if (messagingServiceSid == null) {
            throw new ApiException("Missing the required parameter 'messagingServiceSid' when calling listUsAppToPerson(Async)");
        }

        return listUsAppToPersonCall(messagingServiceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUsAppToPersonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUsAppToPersonResponse listUsAppToPerson(String messagingServiceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUsAppToPersonResponse> localVarResp = listUsAppToPersonWithHttpInfo(messagingServiceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUsAppToPersonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsAppToPersonResponse> listUsAppToPersonWithHttpInfo(String messagingServiceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUsAppToPersonValidateBeforeCall(messagingServiceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUsAppToPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsAppToPersonAsync(String messagingServiceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUsAppToPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsAppToPersonValidateBeforeCall(messagingServiceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUsAppToPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUsAppToPerson
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to update the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to update &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param ageGated A boolean that specifies whether campaign requires age gate for federally legal content. (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsAppToPersonCall(String messagingServiceSid, String sid, Boolean ageGated, String description, Boolean directLending, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}"
            .replace("{" + "MessagingServiceSid" + "}", localVarApiClient.escapeString(messagingServiceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGated != null) {
            localVarFormParams.put("AgeGated", ageGated);
        }

        if (description != null) {
            localVarFormParams.put("Description", description);
        }

        if (directLending != null) {
            localVarFormParams.put("DirectLending", directLending);
        }

        if (hasEmbeddedLinks != null) {
            localVarFormParams.put("HasEmbeddedLinks", hasEmbeddedLinks);
        }

        if (hasEmbeddedPhone != null) {
            localVarFormParams.put("HasEmbeddedPhone", hasEmbeddedPhone);
        }

        if (messageFlow != null) {
            localVarFormParams.put("MessageFlow", messageFlow);
        }

        if (messageSamples != null) {
            localVarFormParams.put("MessageSamples", messageSamples);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsAppToPersonValidateBeforeCall(String messagingServiceSid, String sid, Boolean ageGated, String description, Boolean directLending, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messagingServiceSid' is set
        if (messagingServiceSid == null) {
            throw new ApiException("Missing the required parameter 'messagingServiceSid' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'ageGated' is set
        if (ageGated == null) {
            throw new ApiException("Missing the required parameter 'ageGated' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'directLending' is set
        if (directLending == null) {
            throw new ApiException("Missing the required parameter 'directLending' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'hasEmbeddedLinks' is set
        if (hasEmbeddedLinks == null) {
            throw new ApiException("Missing the required parameter 'hasEmbeddedLinks' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'hasEmbeddedPhone' is set
        if (hasEmbeddedPhone == null) {
            throw new ApiException("Missing the required parameter 'hasEmbeddedPhone' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'messageFlow' is set
        if (messageFlow == null) {
            throw new ApiException("Missing the required parameter 'messageFlow' when calling updateUsAppToPerson(Async)");
        }

        // verify the required parameter 'messageSamples' is set
        if (messageSamples == null) {
            throw new ApiException("Missing the required parameter 'messageSamples' when calling updateUsAppToPerson(Async)");
        }

        return updateUsAppToPersonCall(messagingServiceSid, sid, ageGated, description, directLending, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, _callback);

    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to update the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to update &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param ageGated A boolean that specifies whether campaign requires age gate for federally legal content. (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @return MessagingV1ServiceUsAppToPerson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MessagingV1ServiceUsAppToPerson updateUsAppToPerson(String messagingServiceSid, String sid, Boolean ageGated, String description, Boolean directLending, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples) throws ApiException {
        ApiResponse<MessagingV1ServiceUsAppToPerson> localVarResp = updateUsAppToPersonWithHttpInfo(messagingServiceSid, sid, ageGated, description, directLending, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to update the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to update &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param ageGated A boolean that specifies whether campaign requires age gate for federally legal content. (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @return ApiResponse&lt;MessagingV1ServiceUsAppToPerson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagingV1ServiceUsAppToPerson> updateUsAppToPersonWithHttpInfo(String messagingServiceSid, String sid, Boolean ageGated, String description, Boolean directLending, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples) throws ApiException {
        okhttp3.Call localVarCall = updateUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, ageGated, description, directLending, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, null);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to update the resource from. (required)
     * @param sid The SID of the US A2P Compliance resource to update &#x60;QE2c6890da8086d771620e9b13fadeba0b&#x60;. (required)
     * @param ageGated A boolean that specifies whether campaign requires age gate for federally legal content. (required)
     * @param description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters. (required)
     * @param directLending A boolean that specifies whether campaign allows direct lending or not. (required)
     * @param hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links. (required)
     * @param hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers. (required)
     * @param messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum. (required)
     * @param messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUsAppToPersonAsync(String messagingServiceSid, String sid, Boolean ageGated, String description, Boolean directLending, Boolean hasEmbeddedLinks, Boolean hasEmbeddedPhone, String messageFlow, List<String> messageSamples, final ApiCallback<MessagingV1ServiceUsAppToPerson> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsAppToPersonValidateBeforeCall(messagingServiceSid, sid, ageGated, description, directLending, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, _callback);
        Type localVarReturnType = new TypeToken<MessagingV1ServiceUsAppToPerson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
