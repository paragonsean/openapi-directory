/*
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListServiceResponse;
import org.openapitools.client.model.MessagingV1Service;
import org.openapitools.client.model.ServiceEnumScanMessageContent;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagingV1ServiceApi
 */
@Disabled
public class MessagingV1ServiceApiTest {

    private final MessagingV1ServiceApi api = new MessagingV1ServiceApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        String friendlyName = null;
        Boolean areaCodeGeomatch = null;
        String fallbackMethod = null;
        Boolean fallbackToLongCode = null;
        URI fallbackUrl = null;
        String inboundMethod = null;
        URI inboundRequestUrl = null;
        Boolean mmsConverter = null;
        ServiceEnumScanMessageContent scanMessageContent = null;
        Boolean smartEncoding = null;
        URI statusCallback = null;
        Boolean stickySender = null;
        Boolean synchronousValidation = null;
        Boolean useInboundWebhookOnNumber = null;
        String usecase = null;
        Integer validityPeriod = null;
        MessagingV1Service response = api.createService(friendlyName, areaCodeGeomatch, fallbackMethod, fallbackToLongCode, fallbackUrl, inboundMethod, inboundRequestUrl, mmsConverter, scanMessageContent, smartEncoding, statusCallback, stickySender, synchronousValidation, useInboundWebhookOnNumber, usecase, validityPeriod);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String sid = null;
        api.deleteService(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceTest() throws ApiException {
        String sid = null;
        MessagingV1Service response = api.fetchService(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceResponse response = api.listService(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String sid = null;
        Boolean areaCodeGeomatch = null;
        String fallbackMethod = null;
        Boolean fallbackToLongCode = null;
        URI fallbackUrl = null;
        String friendlyName = null;
        String inboundMethod = null;
        URI inboundRequestUrl = null;
        Boolean mmsConverter = null;
        ServiceEnumScanMessageContent scanMessageContent = null;
        Boolean smartEncoding = null;
        URI statusCallback = null;
        Boolean stickySender = null;
        Boolean synchronousValidation = null;
        Boolean useInboundWebhookOnNumber = null;
        String usecase = null;
        Integer validityPeriod = null;
        MessagingV1Service response = api.updateService(sid, areaCodeGeomatch, fallbackMethod, fallbackToLongCode, fallbackUrl, friendlyName, inboundMethod, inboundRequestUrl, mmsConverter, scanMessageContent, smartEncoding, statusCallback, stickySender, synchronousValidation, useInboundWebhookOnNumber, usecase, validityPeriod);
        // TODO: test validations
    }

}
