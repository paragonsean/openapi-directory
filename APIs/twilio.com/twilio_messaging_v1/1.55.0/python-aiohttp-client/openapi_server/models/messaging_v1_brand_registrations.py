# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand_registrations_enum_brand_feedback import BrandRegistrationsEnumBrandFeedback
from openapi_server.models.brand_registrations_enum_identity_status import BrandRegistrationsEnumIdentityStatus
from openapi_server.models.brand_registrations_enum_status import BrandRegistrationsEnumStatus
import re
from openapi_server import util


class MessagingV1BrandRegistrations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a2p_profile_bundle_sid: str=None, account_sid: str=None, brand_feedback: List[BrandRegistrationsEnumBrandFeedback]=None, brand_score: int=None, brand_type: str=None, customer_profile_bundle_sid: str=None, date_created: datetime=None, date_updated: datetime=None, failure_reason: str=None, government_entity: bool=None, identity_status: BrandRegistrationsEnumIdentityStatus=None, links: object=None, mock: bool=None, russell_3000: bool=None, sid: str=None, skip_automatic_sec_vet: bool=None, status: BrandRegistrationsEnumStatus=None, tax_exempt_status: str=None, tcr_id: str=None, url: str=None):
        """MessagingV1BrandRegistrations - a model defined in OpenAPI

        :param a2p_profile_bundle_sid: The a2p_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :param account_sid: The account_sid of this MessagingV1BrandRegistrations.
        :param brand_feedback: The brand_feedback of this MessagingV1BrandRegistrations.
        :param brand_score: The brand_score of this MessagingV1BrandRegistrations.
        :param brand_type: The brand_type of this MessagingV1BrandRegistrations.
        :param customer_profile_bundle_sid: The customer_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :param date_created: The date_created of this MessagingV1BrandRegistrations.
        :param date_updated: The date_updated of this MessagingV1BrandRegistrations.
        :param failure_reason: The failure_reason of this MessagingV1BrandRegistrations.
        :param government_entity: The government_entity of this MessagingV1BrandRegistrations.
        :param identity_status: The identity_status of this MessagingV1BrandRegistrations.
        :param links: The links of this MessagingV1BrandRegistrations.
        :param mock: The mock of this MessagingV1BrandRegistrations.
        :param russell_3000: The russell_3000 of this MessagingV1BrandRegistrations.
        :param sid: The sid of this MessagingV1BrandRegistrations.
        :param skip_automatic_sec_vet: The skip_automatic_sec_vet of this MessagingV1BrandRegistrations.
        :param status: The status of this MessagingV1BrandRegistrations.
        :param tax_exempt_status: The tax_exempt_status of this MessagingV1BrandRegistrations.
        :param tcr_id: The tcr_id of this MessagingV1BrandRegistrations.
        :param url: The url of this MessagingV1BrandRegistrations.
        """
        self.openapi_types = {
            'a2p_profile_bundle_sid': str,
            'account_sid': str,
            'brand_feedback': List[BrandRegistrationsEnumBrandFeedback],
            'brand_score': int,
            'brand_type': str,
            'customer_profile_bundle_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'failure_reason': str,
            'government_entity': bool,
            'identity_status': BrandRegistrationsEnumIdentityStatus,
            'links': object,
            'mock': bool,
            'russell_3000': bool,
            'sid': str,
            'skip_automatic_sec_vet': bool,
            'status': BrandRegistrationsEnumStatus,
            'tax_exempt_status': str,
            'tcr_id': str,
            'url': str
        }

        self.attribute_map = {
            'a2p_profile_bundle_sid': 'a2p_profile_bundle_sid',
            'account_sid': 'account_sid',
            'brand_feedback': 'brand_feedback',
            'brand_score': 'brand_score',
            'brand_type': 'brand_type',
            'customer_profile_bundle_sid': 'customer_profile_bundle_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'failure_reason': 'failure_reason',
            'government_entity': 'government_entity',
            'identity_status': 'identity_status',
            'links': 'links',
            'mock': 'mock',
            'russell_3000': 'russell_3000',
            'sid': 'sid',
            'skip_automatic_sec_vet': 'skip_automatic_sec_vet',
            'status': 'status',
            'tax_exempt_status': 'tax_exempt_status',
            'tcr_id': 'tcr_id',
            'url': 'url'
        }

        self._a2p_profile_bundle_sid = a2p_profile_bundle_sid
        self._account_sid = account_sid
        self._brand_feedback = brand_feedback
        self._brand_score = brand_score
        self._brand_type = brand_type
        self._customer_profile_bundle_sid = customer_profile_bundle_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._failure_reason = failure_reason
        self._government_entity = government_entity
        self._identity_status = identity_status
        self._links = links
        self._mock = mock
        self._russell_3000 = russell_3000
        self._sid = sid
        self._skip_automatic_sec_vet = skip_automatic_sec_vet
        self._status = status
        self._tax_exempt_status = tax_exempt_status
        self._tcr_id = tcr_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1BrandRegistrations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.brand_registrations of this MessagingV1BrandRegistrations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a2p_profile_bundle_sid(self):
        """Gets the a2p_profile_bundle_sid of this MessagingV1BrandRegistrations.

        A2P Messaging Profile Bundle BundleSid.

        :return: The a2p_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._a2p_profile_bundle_sid

    @a2p_profile_bundle_sid.setter
    def a2p_profile_bundle_sid(self, a2p_profile_bundle_sid):
        """Sets the a2p_profile_bundle_sid of this MessagingV1BrandRegistrations.

        A2P Messaging Profile Bundle BundleSid.

        :param a2p_profile_bundle_sid: The a2p_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :type a2p_profile_bundle_sid: str
        """
        if a2p_profile_bundle_sid is not None and len(a2p_profile_bundle_sid) > 34:
            raise ValueError("Invalid value for `a2p_profile_bundle_sid`, length must be less than or equal to `34`")
        if a2p_profile_bundle_sid is not None and len(a2p_profile_bundle_sid) < 34:
            raise ValueError("Invalid value for `a2p_profile_bundle_sid`, length must be greater than or equal to `34`")
        if a2p_profile_bundle_sid is not None and not re.search(r'^BU[0-9a-fA-F]{32}$', a2p_profile_bundle_sid):
            raise ValueError("Invalid value for `a2p_profile_bundle_sid`, must be a follow pattern or equal to `/^BU[0-9a-fA-F]{32}$/`")

        self._a2p_profile_bundle_sid = a2p_profile_bundle_sid

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1BrandRegistrations.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.

        :return: The account_sid of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1BrandRegistrations.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.

        :param account_sid: The account_sid of this MessagingV1BrandRegistrations.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def brand_feedback(self):
        """Gets the brand_feedback of this MessagingV1BrandRegistrations.

        Feedback on how to improve brand score

        :return: The brand_feedback of this MessagingV1BrandRegistrations.
        :rtype: List[BrandRegistrationsEnumBrandFeedback]
        """
        return self._brand_feedback

    @brand_feedback.setter
    def brand_feedback(self, brand_feedback):
        """Sets the brand_feedback of this MessagingV1BrandRegistrations.

        Feedback on how to improve brand score

        :param brand_feedback: The brand_feedback of this MessagingV1BrandRegistrations.
        :type brand_feedback: List[BrandRegistrationsEnumBrandFeedback]
        """

        self._brand_feedback = brand_feedback

    @property
    def brand_score(self):
        """Gets the brand_score of this MessagingV1BrandRegistrations.

        The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.

        :return: The brand_score of this MessagingV1BrandRegistrations.
        :rtype: int
        """
        return self._brand_score

    @brand_score.setter
    def brand_score(self, brand_score):
        """Sets the brand_score of this MessagingV1BrandRegistrations.

        The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.

        :param brand_score: The brand_score of this MessagingV1BrandRegistrations.
        :type brand_score: int
        """

        self._brand_score = brand_score

    @property
    def brand_type(self):
        """Gets the brand_type of this MessagingV1BrandRegistrations.

        Type of brand. One of: \"STANDARD\", \"SOLE_PROPRIETOR\". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.

        :return: The brand_type of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._brand_type

    @brand_type.setter
    def brand_type(self, brand_type):
        """Sets the brand_type of this MessagingV1BrandRegistrations.

        Type of brand. One of: \"STANDARD\", \"SOLE_PROPRIETOR\". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.

        :param brand_type: The brand_type of this MessagingV1BrandRegistrations.
        :type brand_type: str
        """

        self._brand_type = brand_type

    @property
    def customer_profile_bundle_sid(self):
        """Gets the customer_profile_bundle_sid of this MessagingV1BrandRegistrations.

        A2P Messaging Profile Bundle BundleSid.

        :return: The customer_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._customer_profile_bundle_sid

    @customer_profile_bundle_sid.setter
    def customer_profile_bundle_sid(self, customer_profile_bundle_sid):
        """Sets the customer_profile_bundle_sid of this MessagingV1BrandRegistrations.

        A2P Messaging Profile Bundle BundleSid.

        :param customer_profile_bundle_sid: The customer_profile_bundle_sid of this MessagingV1BrandRegistrations.
        :type customer_profile_bundle_sid: str
        """
        if customer_profile_bundle_sid is not None and len(customer_profile_bundle_sid) > 34:
            raise ValueError("Invalid value for `customer_profile_bundle_sid`, length must be less than or equal to `34`")
        if customer_profile_bundle_sid is not None and len(customer_profile_bundle_sid) < 34:
            raise ValueError("Invalid value for `customer_profile_bundle_sid`, length must be greater than or equal to `34`")
        if customer_profile_bundle_sid is not None and not re.search(r'^BU[0-9a-fA-F]{32}$', customer_profile_bundle_sid):
            raise ValueError("Invalid value for `customer_profile_bundle_sid`, must be a follow pattern or equal to `/^BU[0-9a-fA-F]{32}$/`")

        self._customer_profile_bundle_sid = customer_profile_bundle_sid

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1BrandRegistrations.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1BrandRegistrations.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1BrandRegistrations.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1BrandRegistrations.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1BrandRegistrations.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1BrandRegistrations.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1BrandRegistrations.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1BrandRegistrations.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def failure_reason(self):
        """Gets the failure_reason of this MessagingV1BrandRegistrations.

        A reason why brand registration has failed. Only applicable when status is FAILED.

        :return: The failure_reason of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this MessagingV1BrandRegistrations.

        A reason why brand registration has failed. Only applicable when status is FAILED.

        :param failure_reason: The failure_reason of this MessagingV1BrandRegistrations.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def government_entity(self):
        """Gets the government_entity of this MessagingV1BrandRegistrations.

        Identified as a government entity

        :return: The government_entity of this MessagingV1BrandRegistrations.
        :rtype: bool
        """
        return self._government_entity

    @government_entity.setter
    def government_entity(self, government_entity):
        """Sets the government_entity of this MessagingV1BrandRegistrations.

        Identified as a government entity

        :param government_entity: The government_entity of this MessagingV1BrandRegistrations.
        :type government_entity: bool
        """

        self._government_entity = government_entity

    @property
    def identity_status(self):
        """Gets the identity_status of this MessagingV1BrandRegistrations.


        :return: The identity_status of this MessagingV1BrandRegistrations.
        :rtype: BrandRegistrationsEnumIdentityStatus
        """
        return self._identity_status

    @identity_status.setter
    def identity_status(self, identity_status):
        """Sets the identity_status of this MessagingV1BrandRegistrations.


        :param identity_status: The identity_status of this MessagingV1BrandRegistrations.
        :type identity_status: BrandRegistrationsEnumIdentityStatus
        """

        self._identity_status = identity_status

    @property
    def links(self):
        """Gets the links of this MessagingV1BrandRegistrations.


        :return: The links of this MessagingV1BrandRegistrations.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MessagingV1BrandRegistrations.


        :param links: The links of this MessagingV1BrandRegistrations.
        :type links: object
        """

        self._links = links

    @property
    def mock(self):
        """Gets the mock of this MessagingV1BrandRegistrations.

        A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.

        :return: The mock of this MessagingV1BrandRegistrations.
        :rtype: bool
        """
        return self._mock

    @mock.setter
    def mock(self, mock):
        """Sets the mock of this MessagingV1BrandRegistrations.

        A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.

        :param mock: The mock of this MessagingV1BrandRegistrations.
        :type mock: bool
        """

        self._mock = mock

    @property
    def russell_3000(self):
        """Gets the russell_3000 of this MessagingV1BrandRegistrations.

        Publicly traded company identified in the Russell 3000 Index

        :return: The russell_3000 of this MessagingV1BrandRegistrations.
        :rtype: bool
        """
        return self._russell_3000

    @russell_3000.setter
    def russell_3000(self, russell_3000):
        """Sets the russell_3000 of this MessagingV1BrandRegistrations.

        Publicly traded company identified in the Russell 3000 Index

        :param russell_3000: The russell_3000 of this MessagingV1BrandRegistrations.
        :type russell_3000: bool
        """

        self._russell_3000 = russell_3000

    @property
    def sid(self):
        """Gets the sid of this MessagingV1BrandRegistrations.

        The unique string to identify Brand Registration.

        :return: The sid of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MessagingV1BrandRegistrations.

        The unique string to identify Brand Registration.

        :param sid: The sid of this MessagingV1BrandRegistrations.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^BN[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^BN[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def skip_automatic_sec_vet(self):
        """Gets the skip_automatic_sec_vet of this MessagingV1BrandRegistrations.

        A flag to disable automatic secondary vetting for brands which it would otherwise be done.

        :return: The skip_automatic_sec_vet of this MessagingV1BrandRegistrations.
        :rtype: bool
        """
        return self._skip_automatic_sec_vet

    @skip_automatic_sec_vet.setter
    def skip_automatic_sec_vet(self, skip_automatic_sec_vet):
        """Sets the skip_automatic_sec_vet of this MessagingV1BrandRegistrations.

        A flag to disable automatic secondary vetting for brands which it would otherwise be done.

        :param skip_automatic_sec_vet: The skip_automatic_sec_vet of this MessagingV1BrandRegistrations.
        :type skip_automatic_sec_vet: bool
        """

        self._skip_automatic_sec_vet = skip_automatic_sec_vet

    @property
    def status(self):
        """Gets the status of this MessagingV1BrandRegistrations.


        :return: The status of this MessagingV1BrandRegistrations.
        :rtype: BrandRegistrationsEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessagingV1BrandRegistrations.


        :param status: The status of this MessagingV1BrandRegistrations.
        :type status: BrandRegistrationsEnumStatus
        """

        self._status = status

    @property
    def tax_exempt_status(self):
        """Gets the tax_exempt_status of this MessagingV1BrandRegistrations.

        Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.

        :return: The tax_exempt_status of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._tax_exempt_status

    @tax_exempt_status.setter
    def tax_exempt_status(self, tax_exempt_status):
        """Sets the tax_exempt_status of this MessagingV1BrandRegistrations.

        Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.

        :param tax_exempt_status: The tax_exempt_status of this MessagingV1BrandRegistrations.
        :type tax_exempt_status: str
        """

        self._tax_exempt_status = tax_exempt_status

    @property
    def tcr_id(self):
        """Gets the tcr_id of this MessagingV1BrandRegistrations.

        Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.

        :return: The tcr_id of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._tcr_id

    @tcr_id.setter
    def tcr_id(self, tcr_id):
        """Sets the tcr_id of this MessagingV1BrandRegistrations.

        Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.

        :param tcr_id: The tcr_id of this MessagingV1BrandRegistrations.
        :type tcr_id: str
        """

        self._tcr_id = tcr_id

    @property
    def url(self):
        """Gets the url of this MessagingV1BrandRegistrations.

        The absolute URL of the Brand Registration resource.

        :return: The url of this MessagingV1BrandRegistrations.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1BrandRegistrations.

        The absolute URL of the Brand Registration resource.

        :param url: The url of this MessagingV1BrandRegistrations.
        :type url: str
        """

        self._url = url
