# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1DomainCertV4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_in_validation: object=None, certificate_sid: str=None, date_created: datetime=None, date_expires: datetime=None, date_updated: datetime=None, domain_name: str=None, domain_sid: str=None, url: str=None):
        """MessagingV1DomainCertV4 - a model defined in OpenAPI

        :param cert_in_validation: The cert_in_validation of this MessagingV1DomainCertV4.
        :param certificate_sid: The certificate_sid of this MessagingV1DomainCertV4.
        :param date_created: The date_created of this MessagingV1DomainCertV4.
        :param date_expires: The date_expires of this MessagingV1DomainCertV4.
        :param date_updated: The date_updated of this MessagingV1DomainCertV4.
        :param domain_name: The domain_name of this MessagingV1DomainCertV4.
        :param domain_sid: The domain_sid of this MessagingV1DomainCertV4.
        :param url: The url of this MessagingV1DomainCertV4.
        """
        self.openapi_types = {
            'cert_in_validation': object,
            'certificate_sid': str,
            'date_created': datetime,
            'date_expires': datetime,
            'date_updated': datetime,
            'domain_name': str,
            'domain_sid': str,
            'url': str
        }

        self.attribute_map = {
            'cert_in_validation': 'cert_in_validation',
            'certificate_sid': 'certificate_sid',
            'date_created': 'date_created',
            'date_expires': 'date_expires',
            'date_updated': 'date_updated',
            'domain_name': 'domain_name',
            'domain_sid': 'domain_sid',
            'url': 'url'
        }

        self._cert_in_validation = cert_in_validation
        self._certificate_sid = certificate_sid
        self._date_created = date_created
        self._date_expires = date_expires
        self._date_updated = date_updated
        self._domain_name = domain_name
        self._domain_sid = domain_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1DomainCertV4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.domain_cert_v4 of this MessagingV1DomainCertV4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_in_validation(self):
        """Gets the cert_in_validation of this MessagingV1DomainCertV4.

        Optional JSON field describing the status and upload date of a new certificate in the process of validation

        :return: The cert_in_validation of this MessagingV1DomainCertV4.
        :rtype: object
        """
        return self._cert_in_validation

    @cert_in_validation.setter
    def cert_in_validation(self, cert_in_validation):
        """Sets the cert_in_validation of this MessagingV1DomainCertV4.

        Optional JSON field describing the status and upload date of a new certificate in the process of validation

        :param cert_in_validation: The cert_in_validation of this MessagingV1DomainCertV4.
        :type cert_in_validation: object
        """

        self._cert_in_validation = cert_in_validation

    @property
    def certificate_sid(self):
        """Gets the certificate_sid of this MessagingV1DomainCertV4.

        The unique string that we created to identify this Certificate resource.

        :return: The certificate_sid of this MessagingV1DomainCertV4.
        :rtype: str
        """
        return self._certificate_sid

    @certificate_sid.setter
    def certificate_sid(self, certificate_sid):
        """Sets the certificate_sid of this MessagingV1DomainCertV4.

        The unique string that we created to identify this Certificate resource.

        :param certificate_sid: The certificate_sid of this MessagingV1DomainCertV4.
        :type certificate_sid: str
        """
        if certificate_sid is not None and len(certificate_sid) > 34:
            raise ValueError("Invalid value for `certificate_sid`, length must be less than or equal to `34`")
        if certificate_sid is not None and len(certificate_sid) < 34:
            raise ValueError("Invalid value for `certificate_sid`, length must be greater than or equal to `34`")
        if certificate_sid is not None and not re.search(r'^CW[0-9a-fA-F]{32}$', certificate_sid):
            raise ValueError("Invalid value for `certificate_sid`, must be a follow pattern or equal to `/^CW[0-9a-fA-F]{32}$/`")

        self._certificate_sid = certificate_sid

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1DomainCertV4.

        Date that this Domain was registered to the Twilio platform to create a new Domain object.

        :return: The date_created of this MessagingV1DomainCertV4.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1DomainCertV4.

        Date that this Domain was registered to the Twilio platform to create a new Domain object.

        :param date_created: The date_created of this MessagingV1DomainCertV4.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_expires(self):
        """Gets the date_expires of this MessagingV1DomainCertV4.

        Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.

        :return: The date_expires of this MessagingV1DomainCertV4.
        :rtype: datetime
        """
        return self._date_expires

    @date_expires.setter
    def date_expires(self, date_expires):
        """Sets the date_expires of this MessagingV1DomainCertV4.

        Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.

        :param date_expires: The date_expires of this MessagingV1DomainCertV4.
        :type date_expires: datetime
        """

        self._date_expires = date_expires

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1DomainCertV4.

        Date that this Domain was last updated.

        :return: The date_updated of this MessagingV1DomainCertV4.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1DomainCertV4.

        Date that this Domain was last updated.

        :param date_updated: The date_updated of this MessagingV1DomainCertV4.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def domain_name(self):
        """Gets the domain_name of this MessagingV1DomainCertV4.

        Full url path for this domain.

        :return: The domain_name of this MessagingV1DomainCertV4.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this MessagingV1DomainCertV4.

        Full url path for this domain.

        :param domain_name: The domain_name of this MessagingV1DomainCertV4.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def domain_sid(self):
        """Gets the domain_sid of this MessagingV1DomainCertV4.

        The unique string that we created to identify the Domain resource.

        :return: The domain_sid of this MessagingV1DomainCertV4.
        :rtype: str
        """
        return self._domain_sid

    @domain_sid.setter
    def domain_sid(self, domain_sid):
        """Sets the domain_sid of this MessagingV1DomainCertV4.

        The unique string that we created to identify the Domain resource.

        :param domain_sid: The domain_sid of this MessagingV1DomainCertV4.
        :type domain_sid: str
        """
        if domain_sid is not None and len(domain_sid) > 34:
            raise ValueError("Invalid value for `domain_sid`, length must be less than or equal to `34`")
        if domain_sid is not None and len(domain_sid) < 34:
            raise ValueError("Invalid value for `domain_sid`, length must be greater than or equal to `34`")
        if domain_sid is not None and not re.search(r'^DN[0-9a-fA-F]{32}$', domain_sid):
            raise ValueError("Invalid value for `domain_sid`, must be a follow pattern or equal to `/^DN[0-9a-fA-F]{32}$/`")

        self._domain_sid = domain_sid

    @property
    def url(self):
        """Gets the url of this MessagingV1DomainCertV4.


        :return: The url of this MessagingV1DomainCertV4.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1DomainCertV4.


        :param url: The url of this MessagingV1DomainCertV4.
        :type url: str
        """

        self._url = url
