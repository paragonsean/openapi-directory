# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1ServiceUsAppToPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, age_gated: bool=None, brand_registration_sid: str=None, campaign_id: str=None, campaign_status: str=None, date_created: datetime=None, date_updated: datetime=None, description: str=None, direct_lending: bool=None, errors: List[object]=None, has_embedded_links: bool=None, has_embedded_phone: bool=None, help_keywords: List[str]=None, help_message: str=None, is_externally_registered: bool=None, message_flow: str=None, message_samples: List[str]=None, messaging_service_sid: str=None, mock: bool=None, opt_in_keywords: List[str]=None, opt_in_message: str=None, opt_out_keywords: List[str]=None, opt_out_message: str=None, rate_limits: object=None, sid: str=None, subscriber_opt_in: bool=None, url: str=None, us_app_to_person_usecase: str=None):
        """MessagingV1ServiceUsAppToPerson - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1ServiceUsAppToPerson.
        :param age_gated: The age_gated of this MessagingV1ServiceUsAppToPerson.
        :param brand_registration_sid: The brand_registration_sid of this MessagingV1ServiceUsAppToPerson.
        :param campaign_id: The campaign_id of this MessagingV1ServiceUsAppToPerson.
        :param campaign_status: The campaign_status of this MessagingV1ServiceUsAppToPerson.
        :param date_created: The date_created of this MessagingV1ServiceUsAppToPerson.
        :param date_updated: The date_updated of this MessagingV1ServiceUsAppToPerson.
        :param description: The description of this MessagingV1ServiceUsAppToPerson.
        :param direct_lending: The direct_lending of this MessagingV1ServiceUsAppToPerson.
        :param errors: The errors of this MessagingV1ServiceUsAppToPerson.
        :param has_embedded_links: The has_embedded_links of this MessagingV1ServiceUsAppToPerson.
        :param has_embedded_phone: The has_embedded_phone of this MessagingV1ServiceUsAppToPerson.
        :param help_keywords: The help_keywords of this MessagingV1ServiceUsAppToPerson.
        :param help_message: The help_message of this MessagingV1ServiceUsAppToPerson.
        :param is_externally_registered: The is_externally_registered of this MessagingV1ServiceUsAppToPerson.
        :param message_flow: The message_flow of this MessagingV1ServiceUsAppToPerson.
        :param message_samples: The message_samples of this MessagingV1ServiceUsAppToPerson.
        :param messaging_service_sid: The messaging_service_sid of this MessagingV1ServiceUsAppToPerson.
        :param mock: The mock of this MessagingV1ServiceUsAppToPerson.
        :param opt_in_keywords: The opt_in_keywords of this MessagingV1ServiceUsAppToPerson.
        :param opt_in_message: The opt_in_message of this MessagingV1ServiceUsAppToPerson.
        :param opt_out_keywords: The opt_out_keywords of this MessagingV1ServiceUsAppToPerson.
        :param opt_out_message: The opt_out_message of this MessagingV1ServiceUsAppToPerson.
        :param rate_limits: The rate_limits of this MessagingV1ServiceUsAppToPerson.
        :param sid: The sid of this MessagingV1ServiceUsAppToPerson.
        :param subscriber_opt_in: The subscriber_opt_in of this MessagingV1ServiceUsAppToPerson.
        :param url: The url of this MessagingV1ServiceUsAppToPerson.
        :param us_app_to_person_usecase: The us_app_to_person_usecase of this MessagingV1ServiceUsAppToPerson.
        """
        self.openapi_types = {
            'account_sid': str,
            'age_gated': bool,
            'brand_registration_sid': str,
            'campaign_id': str,
            'campaign_status': str,
            'date_created': datetime,
            'date_updated': datetime,
            'description': str,
            'direct_lending': bool,
            'errors': List[object],
            'has_embedded_links': bool,
            'has_embedded_phone': bool,
            'help_keywords': List[str],
            'help_message': str,
            'is_externally_registered': bool,
            'message_flow': str,
            'message_samples': List[str],
            'messaging_service_sid': str,
            'mock': bool,
            'opt_in_keywords': List[str],
            'opt_in_message': str,
            'opt_out_keywords': List[str],
            'opt_out_message': str,
            'rate_limits': object,
            'sid': str,
            'subscriber_opt_in': bool,
            'url': str,
            'us_app_to_person_usecase': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'age_gated': 'age_gated',
            'brand_registration_sid': 'brand_registration_sid',
            'campaign_id': 'campaign_id',
            'campaign_status': 'campaign_status',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'description': 'description',
            'direct_lending': 'direct_lending',
            'errors': 'errors',
            'has_embedded_links': 'has_embedded_links',
            'has_embedded_phone': 'has_embedded_phone',
            'help_keywords': 'help_keywords',
            'help_message': 'help_message',
            'is_externally_registered': 'is_externally_registered',
            'message_flow': 'message_flow',
            'message_samples': 'message_samples',
            'messaging_service_sid': 'messaging_service_sid',
            'mock': 'mock',
            'opt_in_keywords': 'opt_in_keywords',
            'opt_in_message': 'opt_in_message',
            'opt_out_keywords': 'opt_out_keywords',
            'opt_out_message': 'opt_out_message',
            'rate_limits': 'rate_limits',
            'sid': 'sid',
            'subscriber_opt_in': 'subscriber_opt_in',
            'url': 'url',
            'us_app_to_person_usecase': 'us_app_to_person_usecase'
        }

        self._account_sid = account_sid
        self._age_gated = age_gated
        self._brand_registration_sid = brand_registration_sid
        self._campaign_id = campaign_id
        self._campaign_status = campaign_status
        self._date_created = date_created
        self._date_updated = date_updated
        self._description = description
        self._direct_lending = direct_lending
        self._errors = errors
        self._has_embedded_links = has_embedded_links
        self._has_embedded_phone = has_embedded_phone
        self._help_keywords = help_keywords
        self._help_message = help_message
        self._is_externally_registered = is_externally_registered
        self._message_flow = message_flow
        self._message_samples = message_samples
        self._messaging_service_sid = messaging_service_sid
        self._mock = mock
        self._opt_in_keywords = opt_in_keywords
        self._opt_in_message = opt_in_message
        self._opt_out_keywords = opt_out_keywords
        self._opt_out_message = opt_out_message
        self._rate_limits = rate_limits
        self._sid = sid
        self._subscriber_opt_in = subscriber_opt_in
        self._url = url
        self._us_app_to_person_usecase = us_app_to_person_usecase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1ServiceUsAppToPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.service.us_app_to_person of this MessagingV1ServiceUsAppToPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1ServiceUsAppToPerson.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Campaign belongs to.

        :return: The account_sid of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1ServiceUsAppToPerson.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Campaign belongs to.

        :param account_sid: The account_sid of this MessagingV1ServiceUsAppToPerson.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def age_gated(self):
        """Gets the age_gated of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign is age gated or not.

        :return: The age_gated of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._age_gated

    @age_gated.setter
    def age_gated(self, age_gated):
        """Sets the age_gated of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign is age gated or not.

        :param age_gated: The age_gated of this MessagingV1ServiceUsAppToPerson.
        :type age_gated: bool
        """

        self._age_gated = age_gated

    @property
    def brand_registration_sid(self):
        """Gets the brand_registration_sid of this MessagingV1ServiceUsAppToPerson.

        The unique string to identify the A2P brand.

        :return: The brand_registration_sid of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._brand_registration_sid

    @brand_registration_sid.setter
    def brand_registration_sid(self, brand_registration_sid):
        """Sets the brand_registration_sid of this MessagingV1ServiceUsAppToPerson.

        The unique string to identify the A2P brand.

        :param brand_registration_sid: The brand_registration_sid of this MessagingV1ServiceUsAppToPerson.
        :type brand_registration_sid: str
        """
        if brand_registration_sid is not None and len(brand_registration_sid) > 34:
            raise ValueError("Invalid value for `brand_registration_sid`, length must be less than or equal to `34`")
        if brand_registration_sid is not None and len(brand_registration_sid) < 34:
            raise ValueError("Invalid value for `brand_registration_sid`, length must be greater than or equal to `34`")
        if brand_registration_sid is not None and not re.search(r'^BN[0-9a-fA-F]{32}$', brand_registration_sid):
            raise ValueError("Invalid value for `brand_registration_sid`, must be a follow pattern or equal to `/^BN[0-9a-fA-F]{32}$/`")

        self._brand_registration_sid = brand_registration_sid

    @property
    def campaign_id(self):
        """Gets the campaign_id of this MessagingV1ServiceUsAppToPerson.

        The Campaign Registry (TCR) Campaign ID.

        :return: The campaign_id of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this MessagingV1ServiceUsAppToPerson.

        The Campaign Registry (TCR) Campaign ID.

        :param campaign_id: The campaign_id of this MessagingV1ServiceUsAppToPerson.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def campaign_status(self):
        """Gets the campaign_status of this MessagingV1ServiceUsAppToPerson.

        Campaign status. Examples: IN_PROGRESS, VERIFIED, FAILED.

        :return: The campaign_status of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._campaign_status

    @campaign_status.setter
    def campaign_status(self, campaign_status):
        """Sets the campaign_status of this MessagingV1ServiceUsAppToPerson.

        Campaign status. Examples: IN_PROGRESS, VERIFIED, FAILED.

        :param campaign_status: The campaign_status of this MessagingV1ServiceUsAppToPerson.
        :type campaign_status: str
        """

        self._campaign_status = campaign_status

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1ServiceUsAppToPerson.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1ServiceUsAppToPerson.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1ServiceUsAppToPerson.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1ServiceUsAppToPerson.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1ServiceUsAppToPerson.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1ServiceUsAppToPerson.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1ServiceUsAppToPerson.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1ServiceUsAppToPerson.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def description(self):
        """Gets the description of this MessagingV1ServiceUsAppToPerson.

        A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.

        :return: The description of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MessagingV1ServiceUsAppToPerson.

        A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.

        :param description: The description of this MessagingV1ServiceUsAppToPerson.
        :type description: str
        """

        self._description = description

    @property
    def direct_lending(self):
        """Gets the direct_lending of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign allows direct lending or not.

        :return: The direct_lending of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._direct_lending

    @direct_lending.setter
    def direct_lending(self, direct_lending):
        """Sets the direct_lending of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign allows direct lending or not.

        :param direct_lending: The direct_lending of this MessagingV1ServiceUsAppToPerson.
        :type direct_lending: bool
        """

        self._direct_lending = direct_lending

    @property
    def errors(self):
        """Gets the errors of this MessagingV1ServiceUsAppToPerson.

        Details indicating why a campaign registration failed. These errors can indicate one or more fields that were incorrect or did not meet review requirements.

        :return: The errors of this MessagingV1ServiceUsAppToPerson.
        :rtype: List[object]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this MessagingV1ServiceUsAppToPerson.

        Details indicating why a campaign registration failed. These errors can indicate one or more fields that were incorrect or did not meet review requirements.

        :param errors: The errors of this MessagingV1ServiceUsAppToPerson.
        :type errors: List[object]
        """

        self._errors = errors

    @property
    def has_embedded_links(self):
        """Gets the has_embedded_links of this MessagingV1ServiceUsAppToPerson.

        Indicate that this SMS campaign will send messages that contain links.

        :return: The has_embedded_links of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._has_embedded_links

    @has_embedded_links.setter
    def has_embedded_links(self, has_embedded_links):
        """Sets the has_embedded_links of this MessagingV1ServiceUsAppToPerson.

        Indicate that this SMS campaign will send messages that contain links.

        :param has_embedded_links: The has_embedded_links of this MessagingV1ServiceUsAppToPerson.
        :type has_embedded_links: bool
        """

        self._has_embedded_links = has_embedded_links

    @property
    def has_embedded_phone(self):
        """Gets the has_embedded_phone of this MessagingV1ServiceUsAppToPerson.

        Indicates that this SMS campaign will send messages that contain phone numbers.

        :return: The has_embedded_phone of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._has_embedded_phone

    @has_embedded_phone.setter
    def has_embedded_phone(self, has_embedded_phone):
        """Sets the has_embedded_phone of this MessagingV1ServiceUsAppToPerson.

        Indicates that this SMS campaign will send messages that contain phone numbers.

        :param has_embedded_phone: The has_embedded_phone of this MessagingV1ServiceUsAppToPerson.
        :type has_embedded_phone: bool
        """

        self._has_embedded_phone = has_embedded_phone

    @property
    def help_keywords(self):
        """Gets the help_keywords of this MessagingV1ServiceUsAppToPerson.

        End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :return: The help_keywords of this MessagingV1ServiceUsAppToPerson.
        :rtype: List[str]
        """
        return self._help_keywords

    @help_keywords.setter
    def help_keywords(self, help_keywords):
        """Sets the help_keywords of this MessagingV1ServiceUsAppToPerson.

        End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :param help_keywords: The help_keywords of this MessagingV1ServiceUsAppToPerson.
        :type help_keywords: List[str]
        """

        self._help_keywords = help_keywords

    @property
    def help_message(self):
        """Gets the help_message of this MessagingV1ServiceUsAppToPerson.

        When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.

        :return: The help_message of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._help_message

    @help_message.setter
    def help_message(self, help_message):
        """Sets the help_message of this MessagingV1ServiceUsAppToPerson.

        When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.

        :param help_message: The help_message of this MessagingV1ServiceUsAppToPerson.
        :type help_message: str
        """

        self._help_message = help_message

    @property
    def is_externally_registered(self):
        """Gets the is_externally_registered of this MessagingV1ServiceUsAppToPerson.

        Indicates whether the campaign was registered externally or not.

        :return: The is_externally_registered of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._is_externally_registered

    @is_externally_registered.setter
    def is_externally_registered(self, is_externally_registered):
        """Sets the is_externally_registered of this MessagingV1ServiceUsAppToPerson.

        Indicates whether the campaign was registered externally or not.

        :param is_externally_registered: The is_externally_registered of this MessagingV1ServiceUsAppToPerson.
        :type is_externally_registered: bool
        """

        self._is_externally_registered = is_externally_registered

    @property
    def message_flow(self):
        """Gets the message_flow of this MessagingV1ServiceUsAppToPerson.

        Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.

        :return: The message_flow of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._message_flow

    @message_flow.setter
    def message_flow(self, message_flow):
        """Sets the message_flow of this MessagingV1ServiceUsAppToPerson.

        Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.

        :param message_flow: The message_flow of this MessagingV1ServiceUsAppToPerson.
        :type message_flow: str
        """

        self._message_flow = message_flow

    @property
    def message_samples(self):
        """Gets the message_samples of this MessagingV1ServiceUsAppToPerson.

        An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars.

        :return: The message_samples of this MessagingV1ServiceUsAppToPerson.
        :rtype: List[str]
        """
        return self._message_samples

    @message_samples.setter
    def message_samples(self, message_samples):
        """Sets the message_samples of this MessagingV1ServiceUsAppToPerson.

        An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars.

        :param message_samples: The message_samples of this MessagingV1ServiceUsAppToPerson.
        :type message_samples: List[str]
        """

        self._message_samples = message_samples

    @property
    def messaging_service_sid(self):
        """Gets the messaging_service_sid of this MessagingV1ServiceUsAppToPerson.

        The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) that the resource is associated with.

        :return: The messaging_service_sid of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._messaging_service_sid

    @messaging_service_sid.setter
    def messaging_service_sid(self, messaging_service_sid):
        """Sets the messaging_service_sid of this MessagingV1ServiceUsAppToPerson.

        The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) that the resource is associated with.

        :param messaging_service_sid: The messaging_service_sid of this MessagingV1ServiceUsAppToPerson.
        :type messaging_service_sid: str
        """
        if messaging_service_sid is not None and len(messaging_service_sid) > 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be less than or equal to `34`")
        if messaging_service_sid is not None and len(messaging_service_sid) < 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be greater than or equal to `34`")
        if messaging_service_sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', messaging_service_sid):
            raise ValueError("Invalid value for `messaging_service_sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._messaging_service_sid = messaging_service_sid

    @property
    def mock(self):
        """Gets the mock of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign is a mock or not. Mock campaigns will be automatically created if using a mock brand. Mock campaigns should only be used for testing purposes.

        :return: The mock of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._mock

    @mock.setter
    def mock(self, mock):
        """Sets the mock of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign is a mock or not. Mock campaigns will be automatically created if using a mock brand. Mock campaigns should only be used for testing purposes.

        :param mock: The mock of this MessagingV1ServiceUsAppToPerson.
        :type mock: bool
        """

        self._mock = mock

    @property
    def opt_in_keywords(self):
        """Gets the opt_in_keywords of this MessagingV1ServiceUsAppToPerson.

        If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.

        :return: The opt_in_keywords of this MessagingV1ServiceUsAppToPerson.
        :rtype: List[str]
        """
        return self._opt_in_keywords

    @opt_in_keywords.setter
    def opt_in_keywords(self, opt_in_keywords):
        """Sets the opt_in_keywords of this MessagingV1ServiceUsAppToPerson.

        If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.

        :param opt_in_keywords: The opt_in_keywords of this MessagingV1ServiceUsAppToPerson.
        :type opt_in_keywords: List[str]
        """

        self._opt_in_keywords = opt_in_keywords

    @property
    def opt_in_message(self):
        """Gets the opt_in_message of this MessagingV1ServiceUsAppToPerson.

        If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.

        :return: The opt_in_message of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._opt_in_message

    @opt_in_message.setter
    def opt_in_message(self, opt_in_message):
        """Sets the opt_in_message of this MessagingV1ServiceUsAppToPerson.

        If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.

        :param opt_in_message: The opt_in_message of this MessagingV1ServiceUsAppToPerson.
        :type opt_in_message: str
        """

        self._opt_in_message = opt_in_message

    @property
    def opt_out_keywords(self):
        """Gets the opt_out_keywords of this MessagingV1ServiceUsAppToPerson.

        End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :return: The opt_out_keywords of this MessagingV1ServiceUsAppToPerson.
        :rtype: List[str]
        """
        return self._opt_out_keywords

    @opt_out_keywords.setter
    def opt_out_keywords(self, opt_out_keywords):
        """Sets the opt_out_keywords of this MessagingV1ServiceUsAppToPerson.

        End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.

        :param opt_out_keywords: The opt_out_keywords of this MessagingV1ServiceUsAppToPerson.
        :type opt_out_keywords: List[str]
        """

        self._opt_out_keywords = opt_out_keywords

    @property
    def opt_out_message(self):
        """Gets the opt_out_message of this MessagingV1ServiceUsAppToPerson.

        Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.

        :return: The opt_out_message of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._opt_out_message

    @opt_out_message.setter
    def opt_out_message(self, opt_out_message):
        """Sets the opt_out_message of this MessagingV1ServiceUsAppToPerson.

        Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.

        :param opt_out_message: The opt_out_message of this MessagingV1ServiceUsAppToPerson.
        :type opt_out_message: str
        """

        self._opt_out_message = opt_out_message

    @property
    def rate_limits(self):
        """Gets the rate_limits of this MessagingV1ServiceUsAppToPerson.

        Rate limit and/or classification set by each carrier, Ex. AT&T or T-Mobile.

        :return: The rate_limits of this MessagingV1ServiceUsAppToPerson.
        :rtype: object
        """
        return self._rate_limits

    @rate_limits.setter
    def rate_limits(self, rate_limits):
        """Sets the rate_limits of this MessagingV1ServiceUsAppToPerson.

        Rate limit and/or classification set by each carrier, Ex. AT&T or T-Mobile.

        :param rate_limits: The rate_limits of this MessagingV1ServiceUsAppToPerson.
        :type rate_limits: object
        """

        self._rate_limits = rate_limits

    @property
    def sid(self):
        """Gets the sid of this MessagingV1ServiceUsAppToPerson.

        The unique string that identifies a US A2P Compliance resource `QE2c6890da8086d771620e9b13fadeba0b`.

        :return: The sid of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MessagingV1ServiceUsAppToPerson.

        The unique string that identifies a US A2P Compliance resource `QE2c6890da8086d771620e9b13fadeba0b`.

        :param sid: The sid of this MessagingV1ServiceUsAppToPerson.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^QE[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^QE[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def subscriber_opt_in(self):
        """Gets the subscriber_opt_in of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign has Subscriber Optin or not.

        :return: The subscriber_opt_in of this MessagingV1ServiceUsAppToPerson.
        :rtype: bool
        """
        return self._subscriber_opt_in

    @subscriber_opt_in.setter
    def subscriber_opt_in(self, subscriber_opt_in):
        """Sets the subscriber_opt_in of this MessagingV1ServiceUsAppToPerson.

        A boolean that specifies whether campaign has Subscriber Optin or not.

        :param subscriber_opt_in: The subscriber_opt_in of this MessagingV1ServiceUsAppToPerson.
        :type subscriber_opt_in: bool
        """

        self._subscriber_opt_in = subscriber_opt_in

    @property
    def url(self):
        """Gets the url of this MessagingV1ServiceUsAppToPerson.

        The absolute URL of the US App to Person resource.

        :return: The url of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1ServiceUsAppToPerson.

        The absolute URL of the US App to Person resource.

        :param url: The url of this MessagingV1ServiceUsAppToPerson.
        :type url: str
        """

        self._url = url

    @property
    def us_app_to_person_usecase(self):
        """Gets the us_app_to_person_usecase of this MessagingV1ServiceUsAppToPerson.

        A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING, SOLE_PROPRIETOR...]. SOLE_PROPRIETOR campaign use cases can only be created by SOLE_PROPRIETOR Brands, and there can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR Brand.

        :return: The us_app_to_person_usecase of this MessagingV1ServiceUsAppToPerson.
        :rtype: str
        """
        return self._us_app_to_person_usecase

    @us_app_to_person_usecase.setter
    def us_app_to_person_usecase(self, us_app_to_person_usecase):
        """Sets the us_app_to_person_usecase of this MessagingV1ServiceUsAppToPerson.

        A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING, SOLE_PROPRIETOR...]. SOLE_PROPRIETOR campaign use cases can only be created by SOLE_PROPRIETOR Brands, and there can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR Brand.

        :param us_app_to_person_usecase: The us_app_to_person_usecase of this MessagingV1ServiceUsAppToPerson.
        :type us_app_to_person_usecase: str
        """

        self._us_app_to_person_usecase = us_app_to_person_usecase
