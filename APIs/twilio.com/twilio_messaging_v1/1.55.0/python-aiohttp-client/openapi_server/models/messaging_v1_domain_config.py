# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1DomainConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, config_sid: str=None, continue_on_failure: bool=None, date_created: datetime=None, date_updated: datetime=None, disable_https: bool=None, domain_sid: str=None, fallback_url: str=None, url: str=None):
        """MessagingV1DomainConfig - a model defined in OpenAPI

        :param callback_url: The callback_url of this MessagingV1DomainConfig.
        :param config_sid: The config_sid of this MessagingV1DomainConfig.
        :param continue_on_failure: The continue_on_failure of this MessagingV1DomainConfig.
        :param date_created: The date_created of this MessagingV1DomainConfig.
        :param date_updated: The date_updated of this MessagingV1DomainConfig.
        :param disable_https: The disable_https of this MessagingV1DomainConfig.
        :param domain_sid: The domain_sid of this MessagingV1DomainConfig.
        :param fallback_url: The fallback_url of this MessagingV1DomainConfig.
        :param url: The url of this MessagingV1DomainConfig.
        """
        self.openapi_types = {
            'callback_url': str,
            'config_sid': str,
            'continue_on_failure': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'disable_https': bool,
            'domain_sid': str,
            'fallback_url': str,
            'url': str
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'config_sid': 'config_sid',
            'continue_on_failure': 'continue_on_failure',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'disable_https': 'disable_https',
            'domain_sid': 'domain_sid',
            'fallback_url': 'fallback_url',
            'url': 'url'
        }

        self._callback_url = callback_url
        self._config_sid = config_sid
        self._continue_on_failure = continue_on_failure
        self._date_created = date_created
        self._date_updated = date_updated
        self._disable_https = disable_https
        self._domain_sid = domain_sid
        self._fallback_url = fallback_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1DomainConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.domain_config of this MessagingV1DomainConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this MessagingV1DomainConfig.

        URL to receive click events to your webhook whenever the recipients click on the shortened links.

        :return: The callback_url of this MessagingV1DomainConfig.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this MessagingV1DomainConfig.

        URL to receive click events to your webhook whenever the recipients click on the shortened links.

        :param callback_url: The callback_url of this MessagingV1DomainConfig.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def config_sid(self):
        """Gets the config_sid of this MessagingV1DomainConfig.

        The unique string that we created to identify the Domain config (prefix ZK).

        :return: The config_sid of this MessagingV1DomainConfig.
        :rtype: str
        """
        return self._config_sid

    @config_sid.setter
    def config_sid(self, config_sid):
        """Sets the config_sid of this MessagingV1DomainConfig.

        The unique string that we created to identify the Domain config (prefix ZK).

        :param config_sid: The config_sid of this MessagingV1DomainConfig.
        :type config_sid: str
        """
        if config_sid is not None and len(config_sid) > 34:
            raise ValueError("Invalid value for `config_sid`, length must be less than or equal to `34`")
        if config_sid is not None and len(config_sid) < 34:
            raise ValueError("Invalid value for `config_sid`, length must be greater than or equal to `34`")
        if config_sid is not None and not re.search(r'^ZK[0-9a-fA-F]{32}$', config_sid):
            raise ValueError("Invalid value for `config_sid`, must be a follow pattern or equal to `/^ZK[0-9a-fA-F]{32}$/`")

        self._config_sid = config_sid

    @property
    def continue_on_failure(self):
        """Gets the continue_on_failure of this MessagingV1DomainConfig.

        Boolean field to set customer delivery preference when there is a failure in linkShortening service

        :return: The continue_on_failure of this MessagingV1DomainConfig.
        :rtype: bool
        """
        return self._continue_on_failure

    @continue_on_failure.setter
    def continue_on_failure(self, continue_on_failure):
        """Sets the continue_on_failure of this MessagingV1DomainConfig.

        Boolean field to set customer delivery preference when there is a failure in linkShortening service

        :param continue_on_failure: The continue_on_failure of this MessagingV1DomainConfig.
        :type continue_on_failure: bool
        """

        self._continue_on_failure = continue_on_failure

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1DomainConfig.

        Date this Domain Config was created.

        :return: The date_created of this MessagingV1DomainConfig.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1DomainConfig.

        Date this Domain Config was created.

        :param date_created: The date_created of this MessagingV1DomainConfig.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1DomainConfig.

        Date that this Domain Config was last updated.

        :return: The date_updated of this MessagingV1DomainConfig.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1DomainConfig.

        Date that this Domain Config was last updated.

        :param date_updated: The date_updated of this MessagingV1DomainConfig.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def disable_https(self):
        """Gets the disable_https of this MessagingV1DomainConfig.

        Customer's choice to send links with/without \"https://\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :return: The disable_https of this MessagingV1DomainConfig.
        :rtype: bool
        """
        return self._disable_https

    @disable_https.setter
    def disable_https(self, disable_https):
        """Sets the disable_https of this MessagingV1DomainConfig.

        Customer's choice to send links with/without \"https://\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :param disable_https: The disable_https of this MessagingV1DomainConfig.
        :type disable_https: bool
        """

        self._disable_https = disable_https

    @property
    def domain_sid(self):
        """Gets the domain_sid of this MessagingV1DomainConfig.

        The unique string that we created to identify the Domain resource.

        :return: The domain_sid of this MessagingV1DomainConfig.
        :rtype: str
        """
        return self._domain_sid

    @domain_sid.setter
    def domain_sid(self, domain_sid):
        """Sets the domain_sid of this MessagingV1DomainConfig.

        The unique string that we created to identify the Domain resource.

        :param domain_sid: The domain_sid of this MessagingV1DomainConfig.
        :type domain_sid: str
        """
        if domain_sid is not None and len(domain_sid) > 34:
            raise ValueError("Invalid value for `domain_sid`, length must be less than or equal to `34`")
        if domain_sid is not None and len(domain_sid) < 34:
            raise ValueError("Invalid value for `domain_sid`, length must be greater than or equal to `34`")
        if domain_sid is not None and not re.search(r'^DN[0-9a-fA-F]{32}$', domain_sid):
            raise ValueError("Invalid value for `domain_sid`, must be a follow pattern or equal to `/^DN[0-9a-fA-F]{32}$/`")

        self._domain_sid = domain_sid

    @property
    def fallback_url(self):
        """Gets the fallback_url of this MessagingV1DomainConfig.

        Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.

        :return: The fallback_url of this MessagingV1DomainConfig.
        :rtype: str
        """
        return self._fallback_url

    @fallback_url.setter
    def fallback_url(self, fallback_url):
        """Sets the fallback_url of this MessagingV1DomainConfig.

        Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.

        :param fallback_url: The fallback_url of this MessagingV1DomainConfig.
        :type fallback_url: str
        """

        self._fallback_url = fallback_url

    @property
    def url(self):
        """Gets the url of this MessagingV1DomainConfig.


        :return: The url of this MessagingV1DomainConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1DomainConfig.


        :param url: The url of this MessagingV1DomainConfig.
        :type url: str
        """

        self._url = url
