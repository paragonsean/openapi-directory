# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1LinkshorteningMessagingServiceDomainAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_sid: str=None, messaging_service_sid: str=None, url: str=None):
        """MessagingV1LinkshorteningMessagingServiceDomainAssociation - a model defined in OpenAPI

        :param domain_sid: The domain_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :param messaging_service_sid: The messaging_service_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :param url: The url of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        """
        self.openapi_types = {
            'domain_sid': str,
            'messaging_service_sid': str,
            'url': str
        }

        self.attribute_map = {
            'domain_sid': 'domain_sid',
            'messaging_service_sid': 'messaging_service_sid',
            'url': 'url'
        }

        self._domain_sid = domain_sid
        self._messaging_service_sid = messaging_service_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1LinkshorteningMessagingServiceDomainAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.linkshortening_messaging_service_domain_association of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_sid(self):
        """Gets the domain_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.

        The unique string that we created to identify the Domain resource.

        :return: The domain_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :rtype: str
        """
        return self._domain_sid

    @domain_sid.setter
    def domain_sid(self, domain_sid):
        """Sets the domain_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.

        The unique string that we created to identify the Domain resource.

        :param domain_sid: The domain_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :type domain_sid: str
        """
        if domain_sid is not None and len(domain_sid) > 34:
            raise ValueError("Invalid value for `domain_sid`, length must be less than or equal to `34`")
        if domain_sid is not None and len(domain_sid) < 34:
            raise ValueError("Invalid value for `domain_sid`, length must be greater than or equal to `34`")
        if domain_sid is not None and not re.search(r'^DN[0-9a-fA-F]{32}$', domain_sid):
            raise ValueError("Invalid value for `domain_sid`, must be a follow pattern or equal to `/^DN[0-9a-fA-F]{32}$/`")

        self._domain_sid = domain_sid

    @property
    def messaging_service_sid(self):
        """Gets the messaging_service_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.

        The unique string that identifies the messaging service

        :return: The messaging_service_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :rtype: str
        """
        return self._messaging_service_sid

    @messaging_service_sid.setter
    def messaging_service_sid(self, messaging_service_sid):
        """Sets the messaging_service_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.

        The unique string that identifies the messaging service

        :param messaging_service_sid: The messaging_service_sid of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :type messaging_service_sid: str
        """
        if messaging_service_sid is not None and len(messaging_service_sid) > 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be less than or equal to `34`")
        if messaging_service_sid is not None and len(messaging_service_sid) < 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be greater than or equal to `34`")
        if messaging_service_sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', messaging_service_sid):
            raise ValueError("Invalid value for `messaging_service_sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._messaging_service_sid = messaging_service_sid

    @property
    def url(self):
        """Gets the url of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.


        :return: The url of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.


        :param url: The url of this MessagingV1LinkshorteningMessagingServiceDomainAssociation.
        :type url: str
        """

        self._url = url
