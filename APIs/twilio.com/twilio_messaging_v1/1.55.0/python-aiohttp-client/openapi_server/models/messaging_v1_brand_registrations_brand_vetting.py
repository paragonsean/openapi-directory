# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand_vetting_enum_vetting_provider import BrandVettingEnumVettingProvider
import re
from openapi_server import util


class MessagingV1BrandRegistrationsBrandVetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, brand_sid: str=None, brand_vetting_sid: str=None, date_created: datetime=None, date_updated: datetime=None, url: str=None, vetting_class: str=None, vetting_id: str=None, vetting_provider: BrandVettingEnumVettingProvider=None, vetting_status: str=None):
        """MessagingV1BrandRegistrationsBrandVetting - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :param brand_sid: The brand_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :param brand_vetting_sid: The brand_vetting_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :param date_created: The date_created of this MessagingV1BrandRegistrationsBrandVetting.
        :param date_updated: The date_updated of this MessagingV1BrandRegistrationsBrandVetting.
        :param url: The url of this MessagingV1BrandRegistrationsBrandVetting.
        :param vetting_class: The vetting_class of this MessagingV1BrandRegistrationsBrandVetting.
        :param vetting_id: The vetting_id of this MessagingV1BrandRegistrationsBrandVetting.
        :param vetting_provider: The vetting_provider of this MessagingV1BrandRegistrationsBrandVetting.
        :param vetting_status: The vetting_status of this MessagingV1BrandRegistrationsBrandVetting.
        """
        self.openapi_types = {
            'account_sid': str,
            'brand_sid': str,
            'brand_vetting_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'url': str,
            'vetting_class': str,
            'vetting_id': str,
            'vetting_provider': BrandVettingEnumVettingProvider,
            'vetting_status': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'brand_sid': 'brand_sid',
            'brand_vetting_sid': 'brand_vetting_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'url': 'url',
            'vetting_class': 'vetting_class',
            'vetting_id': 'vetting_id',
            'vetting_provider': 'vetting_provider',
            'vetting_status': 'vetting_status'
        }

        self._account_sid = account_sid
        self._brand_sid = brand_sid
        self._brand_vetting_sid = brand_vetting_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._url = url
        self._vetting_class = vetting_class
        self._vetting_id = vetting_id
        self._vetting_provider = vetting_provider
        self._vetting_status = vetting_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1BrandRegistrationsBrandVetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.brand_registrations.brand_vetting of this MessagingV1BrandRegistrationsBrandVetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the vetting record.

        :return: The account_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the vetting record.

        :param account_sid: The account_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def brand_sid(self):
        """Gets the brand_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The unique string to identify Brand Registration.

        :return: The brand_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._brand_sid

    @brand_sid.setter
    def brand_sid(self, brand_sid):
        """Sets the brand_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The unique string to identify Brand Registration.

        :param brand_sid: The brand_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :type brand_sid: str
        """
        if brand_sid is not None and len(brand_sid) > 34:
            raise ValueError("Invalid value for `brand_sid`, length must be less than or equal to `34`")
        if brand_sid is not None and len(brand_sid) < 34:
            raise ValueError("Invalid value for `brand_sid`, length must be greater than or equal to `34`")
        if brand_sid is not None and not re.search(r'^BN[0-9a-fA-F]{32}$', brand_sid):
            raise ValueError("Invalid value for `brand_sid`, must be a follow pattern or equal to `/^BN[0-9a-fA-F]{32}$/`")

        self._brand_sid = brand_sid

    @property
    def brand_vetting_sid(self):
        """Gets the brand_vetting_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The Twilio SID of the third-party vetting record.

        :return: The brand_vetting_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._brand_vetting_sid

    @brand_vetting_sid.setter
    def brand_vetting_sid(self, brand_vetting_sid):
        """Sets the brand_vetting_sid of this MessagingV1BrandRegistrationsBrandVetting.

        The Twilio SID of the third-party vetting record.

        :param brand_vetting_sid: The brand_vetting_sid of this MessagingV1BrandRegistrationsBrandVetting.
        :type brand_vetting_sid: str
        """
        if brand_vetting_sid is not None and len(brand_vetting_sid) > 34:
            raise ValueError("Invalid value for `brand_vetting_sid`, length must be less than or equal to `34`")
        if brand_vetting_sid is not None and len(brand_vetting_sid) < 34:
            raise ValueError("Invalid value for `brand_vetting_sid`, length must be greater than or equal to `34`")
        if brand_vetting_sid is not None and not re.search(r'^VT[0-9a-fA-F]{32}$', brand_vetting_sid):
            raise ValueError("Invalid value for `brand_vetting_sid`, must be a follow pattern or equal to `/^VT[0-9a-fA-F]{32}$/`")

        self._brand_vetting_sid = brand_vetting_sid

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1BrandRegistrationsBrandVetting.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1BrandRegistrationsBrandVetting.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1BrandRegistrationsBrandVetting.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1BrandRegistrationsBrandVetting.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1BrandRegistrationsBrandVetting.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1BrandRegistrationsBrandVetting.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def url(self):
        """Gets the url of this MessagingV1BrandRegistrationsBrandVetting.

        The absolute URL of the Brand Vetting resource.

        :return: The url of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1BrandRegistrationsBrandVetting.

        The absolute URL of the Brand Vetting resource.

        :param url: The url of this MessagingV1BrandRegistrationsBrandVetting.
        :type url: str
        """

        self._url = url

    @property
    def vetting_class(self):
        """Gets the vetting_class of this MessagingV1BrandRegistrationsBrandVetting.

        The type of vetting that has been conducted. One of “STANDARD” (Aegis) or “POLITICAL” (Campaign Verify).

        :return: The vetting_class of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._vetting_class

    @vetting_class.setter
    def vetting_class(self, vetting_class):
        """Sets the vetting_class of this MessagingV1BrandRegistrationsBrandVetting.

        The type of vetting that has been conducted. One of “STANDARD” (Aegis) or “POLITICAL” (Campaign Verify).

        :param vetting_class: The vetting_class of this MessagingV1BrandRegistrationsBrandVetting.
        :type vetting_class: str
        """

        self._vetting_class = vetting_class

    @property
    def vetting_id(self):
        """Gets the vetting_id of this MessagingV1BrandRegistrationsBrandVetting.

        The unique identifier of the vetting from the third-party provider.

        :return: The vetting_id of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._vetting_id

    @vetting_id.setter
    def vetting_id(self, vetting_id):
        """Sets the vetting_id of this MessagingV1BrandRegistrationsBrandVetting.

        The unique identifier of the vetting from the third-party provider.

        :param vetting_id: The vetting_id of this MessagingV1BrandRegistrationsBrandVetting.
        :type vetting_id: str
        """

        self._vetting_id = vetting_id

    @property
    def vetting_provider(self):
        """Gets the vetting_provider of this MessagingV1BrandRegistrationsBrandVetting.


        :return: The vetting_provider of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: BrandVettingEnumVettingProvider
        """
        return self._vetting_provider

    @vetting_provider.setter
    def vetting_provider(self, vetting_provider):
        """Sets the vetting_provider of this MessagingV1BrandRegistrationsBrandVetting.


        :param vetting_provider: The vetting_provider of this MessagingV1BrandRegistrationsBrandVetting.
        :type vetting_provider: BrandVettingEnumVettingProvider
        """

        self._vetting_provider = vetting_provider

    @property
    def vetting_status(self):
        """Gets the vetting_status of this MessagingV1BrandRegistrationsBrandVetting.

        The status of the import vetting attempt. One of “PENDING,” “SUCCESS,” or “FAILED”.

        :return: The vetting_status of this MessagingV1BrandRegistrationsBrandVetting.
        :rtype: str
        """
        return self._vetting_status

    @vetting_status.setter
    def vetting_status(self, vetting_status):
        """Sets the vetting_status of this MessagingV1BrandRegistrationsBrandVetting.

        The status of the import vetting attempt. One of “PENDING,” “SUCCESS,” or “FAILED”.

        :param vetting_status: The vetting_status of this MessagingV1BrandRegistrationsBrandVetting.
        :type vetting_status: str
        """

        self._vetting_status = vetting_status
