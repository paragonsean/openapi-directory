# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1BrandRegistrationsBrandRegistrationOtp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, brand_registration_sid: str=None):
        """MessagingV1BrandRegistrationsBrandRegistrationOtp - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        :param brand_registration_sid: The brand_registration_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        """
        self.openapi_types = {
            'account_sid': str,
            'brand_registration_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'brand_registration_sid': 'brand_registration_sid'
        }

        self._account_sid = account_sid
        self._brand_registration_sid = brand_registration_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1BrandRegistrationsBrandRegistrationOtp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.brand_registrations.brand_registration_otp of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.

        :return: The account_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.

        :param account_sid: The account_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def brand_registration_sid(self):
        """Gets the brand_registration_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.

        The unique string to identify Brand Registration of Sole Proprietor Brand

        :return: The brand_registration_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        :rtype: str
        """
        return self._brand_registration_sid

    @brand_registration_sid.setter
    def brand_registration_sid(self, brand_registration_sid):
        """Sets the brand_registration_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.

        The unique string to identify Brand Registration of Sole Proprietor Brand

        :param brand_registration_sid: The brand_registration_sid of this MessagingV1BrandRegistrationsBrandRegistrationOtp.
        :type brand_registration_sid: str
        """
        if brand_registration_sid is not None and len(brand_registration_sid) > 34:
            raise ValueError("Invalid value for `brand_registration_sid`, length must be less than or equal to `34`")
        if brand_registration_sid is not None and len(brand_registration_sid) < 34:
            raise ValueError("Invalid value for `brand_registration_sid`, length must be greater than or equal to `34`")
        if brand_registration_sid is not None and not re.search(r'^BN[0-9a-fA-F]{32}$', brand_registration_sid):
            raise ValueError("Invalid value for `brand_registration_sid`, must be a follow pattern or equal to `/^BN[0-9a-fA-F]{32}$/`")

        self._brand_registration_sid = brand_registration_sid
