# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1ServiceAlphaSender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, alpha_sender: str=None, capabilities: List[str]=None, date_created: datetime=None, date_updated: datetime=None, service_sid: str=None, sid: str=None, url: str=None):
        """MessagingV1ServiceAlphaSender - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1ServiceAlphaSender.
        :param alpha_sender: The alpha_sender of this MessagingV1ServiceAlphaSender.
        :param capabilities: The capabilities of this MessagingV1ServiceAlphaSender.
        :param date_created: The date_created of this MessagingV1ServiceAlphaSender.
        :param date_updated: The date_updated of this MessagingV1ServiceAlphaSender.
        :param service_sid: The service_sid of this MessagingV1ServiceAlphaSender.
        :param sid: The sid of this MessagingV1ServiceAlphaSender.
        :param url: The url of this MessagingV1ServiceAlphaSender.
        """
        self.openapi_types = {
            'account_sid': str,
            'alpha_sender': str,
            'capabilities': List[str],
            'date_created': datetime,
            'date_updated': datetime,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'alpha_sender': 'alpha_sender',
            'capabilities': 'capabilities',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._alpha_sender = alpha_sender
        self._capabilities = capabilities
        self._date_created = date_created
        self._date_updated = date_updated
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1ServiceAlphaSender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.service.alpha_sender of this MessagingV1ServiceAlphaSender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1ServiceAlphaSender.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AlphaSender resource.

        :return: The account_sid of this MessagingV1ServiceAlphaSender.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1ServiceAlphaSender.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AlphaSender resource.

        :param account_sid: The account_sid of this MessagingV1ServiceAlphaSender.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def alpha_sender(self):
        """Gets the alpha_sender of this MessagingV1ServiceAlphaSender.

        The Alphanumeric Sender ID string.

        :return: The alpha_sender of this MessagingV1ServiceAlphaSender.
        :rtype: str
        """
        return self._alpha_sender

    @alpha_sender.setter
    def alpha_sender(self, alpha_sender):
        """Sets the alpha_sender of this MessagingV1ServiceAlphaSender.

        The Alphanumeric Sender ID string.

        :param alpha_sender: The alpha_sender of this MessagingV1ServiceAlphaSender.
        :type alpha_sender: str
        """

        self._alpha_sender = alpha_sender

    @property
    def capabilities(self):
        """Gets the capabilities of this MessagingV1ServiceAlphaSender.

        An array of values that describe whether the number can receive calls or messages. Can be: `SMS`.

        :return: The capabilities of this MessagingV1ServiceAlphaSender.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this MessagingV1ServiceAlphaSender.

        An array of values that describe whether the number can receive calls or messages. Can be: `SMS`.

        :param capabilities: The capabilities of this MessagingV1ServiceAlphaSender.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1ServiceAlphaSender.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1ServiceAlphaSender.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1ServiceAlphaSender.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1ServiceAlphaSender.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1ServiceAlphaSender.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1ServiceAlphaSender.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1ServiceAlphaSender.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1ServiceAlphaSender.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def service_sid(self):
        """Gets the service_sid of this MessagingV1ServiceAlphaSender.

        The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.

        :return: The service_sid of this MessagingV1ServiceAlphaSender.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this MessagingV1ServiceAlphaSender.

        The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.

        :param service_sid: The service_sid of this MessagingV1ServiceAlphaSender.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this MessagingV1ServiceAlphaSender.

        The unique string that we created to identify the AlphaSender resource.

        :return: The sid of this MessagingV1ServiceAlphaSender.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MessagingV1ServiceAlphaSender.

        The unique string that we created to identify the AlphaSender resource.

        :param sid: The sid of this MessagingV1ServiceAlphaSender.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^AI[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^AI[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this MessagingV1ServiceAlphaSender.

        The absolute URL of the AlphaSender resource.

        :return: The url of this MessagingV1ServiceAlphaSender.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1ServiceAlphaSender.

        The absolute URL of the AlphaSender resource.

        :param url: The url of this MessagingV1ServiceAlphaSender.
        :type url: str
        """

        self._url = url
