# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessagingV1ServiceChannelSender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, country_code: str=None, date_created: datetime=None, date_updated: datetime=None, messaging_service_sid: str=None, sender: str=None, sender_type: str=None, sid: str=None, url: str=None):
        """MessagingV1ServiceChannelSender - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1ServiceChannelSender.
        :param country_code: The country_code of this MessagingV1ServiceChannelSender.
        :param date_created: The date_created of this MessagingV1ServiceChannelSender.
        :param date_updated: The date_updated of this MessagingV1ServiceChannelSender.
        :param messaging_service_sid: The messaging_service_sid of this MessagingV1ServiceChannelSender.
        :param sender: The sender of this MessagingV1ServiceChannelSender.
        :param sender_type: The sender_type of this MessagingV1ServiceChannelSender.
        :param sid: The sid of this MessagingV1ServiceChannelSender.
        :param url: The url of this MessagingV1ServiceChannelSender.
        """
        self.openapi_types = {
            'account_sid': str,
            'country_code': str,
            'date_created': datetime,
            'date_updated': datetime,
            'messaging_service_sid': str,
            'sender': str,
            'sender_type': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'country_code': 'country_code',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'messaging_service_sid': 'messaging_service_sid',
            'sender': 'sender',
            'sender_type': 'sender_type',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._country_code = country_code
        self._date_created = date_created
        self._date_updated = date_updated
        self._messaging_service_sid = messaging_service_sid
        self._sender = sender
        self._sender_type = sender_type
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1ServiceChannelSender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.service.channel_sender of this MessagingV1ServiceChannelSender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1ServiceChannelSender.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ChannelSender resource.

        :return: The account_sid of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1ServiceChannelSender.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ChannelSender resource.

        :param account_sid: The account_sid of this MessagingV1ServiceChannelSender.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def country_code(self):
        """Gets the country_code of this MessagingV1ServiceChannelSender.

        The 2-character [ISO Country Code](https://www.iso.org/iso-3166-country-codes.html) of the number.

        :return: The country_code of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MessagingV1ServiceChannelSender.

        The 2-character [ISO Country Code](https://www.iso.org/iso-3166-country-codes.html) of the number.

        :param country_code: The country_code of this MessagingV1ServiceChannelSender.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1ServiceChannelSender.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1ServiceChannelSender.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1ServiceChannelSender.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1ServiceChannelSender.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1ServiceChannelSender.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1ServiceChannelSender.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1ServiceChannelSender.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1ServiceChannelSender.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def messaging_service_sid(self):
        """Gets the messaging_service_sid of this MessagingV1ServiceChannelSender.

        The SID of the [Service](https://www.twilio.com/docs/messaging/services) the resource is associated with.

        :return: The messaging_service_sid of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._messaging_service_sid

    @messaging_service_sid.setter
    def messaging_service_sid(self, messaging_service_sid):
        """Sets the messaging_service_sid of this MessagingV1ServiceChannelSender.

        The SID of the [Service](https://www.twilio.com/docs/messaging/services) the resource is associated with.

        :param messaging_service_sid: The messaging_service_sid of this MessagingV1ServiceChannelSender.
        :type messaging_service_sid: str
        """
        if messaging_service_sid is not None and len(messaging_service_sid) > 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be less than or equal to `34`")
        if messaging_service_sid is not None and len(messaging_service_sid) < 34:
            raise ValueError("Invalid value for `messaging_service_sid`, length must be greater than or equal to `34`")
        if messaging_service_sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', messaging_service_sid):
            raise ValueError("Invalid value for `messaging_service_sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._messaging_service_sid = messaging_service_sid

    @property
    def sender(self):
        """Gets the sender of this MessagingV1ServiceChannelSender.

        The unique string that identifies the sender e.g whatsapp:+123456XXXX.

        :return: The sender of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MessagingV1ServiceChannelSender.

        The unique string that identifies the sender e.g whatsapp:+123456XXXX.

        :param sender: The sender of this MessagingV1ServiceChannelSender.
        :type sender: str
        """

        self._sender = sender

    @property
    def sender_type(self):
        """Gets the sender_type of this MessagingV1ServiceChannelSender.

        A string value that identifies the sender type e.g WhatsApp, Messenger.

        :return: The sender_type of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._sender_type

    @sender_type.setter
    def sender_type(self, sender_type):
        """Sets the sender_type of this MessagingV1ServiceChannelSender.

        A string value that identifies the sender type e.g WhatsApp, Messenger.

        :param sender_type: The sender_type of this MessagingV1ServiceChannelSender.
        :type sender_type: str
        """

        self._sender_type = sender_type

    @property
    def sid(self):
        """Gets the sid of this MessagingV1ServiceChannelSender.

        The unique string that we created to identify the ChannelSender resource.

        :return: The sid of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MessagingV1ServiceChannelSender.

        The unique string that we created to identify the ChannelSender resource.

        :param sid: The sid of this MessagingV1ServiceChannelSender.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^XE[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^XE[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this MessagingV1ServiceChannelSender.

        The absolute URL of the ChannelSender resource.

        :return: The url of this MessagingV1ServiceChannelSender.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1ServiceChannelSender.

        The absolute URL of the ChannelSender resource.

        :param url: The url of this MessagingV1ServiceChannelSender.
        :type url: str
        """

        self._url = url
