# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_enum_scan_message_content import ServiceEnumScanMessageContent
import re
from openapi_server import util


class MessagingV1Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, area_code_geomatch: bool=None, date_created: datetime=None, date_updated: datetime=None, fallback_method: str=None, fallback_to_long_code: bool=None, fallback_url: str=None, friendly_name: str=None, inbound_method: str=None, inbound_request_url: str=None, links: object=None, mms_converter: bool=None, scan_message_content: ServiceEnumScanMessageContent=None, sid: str=None, smart_encoding: bool=None, status_callback: str=None, sticky_sender: bool=None, synchronous_validation: bool=None, url: str=None, us_app_to_person_registered: bool=None, use_inbound_webhook_on_number: bool=None, usecase: str=None, validity_period: int=None):
        """MessagingV1Service - a model defined in OpenAPI

        :param account_sid: The account_sid of this MessagingV1Service.
        :param area_code_geomatch: The area_code_geomatch of this MessagingV1Service.
        :param date_created: The date_created of this MessagingV1Service.
        :param date_updated: The date_updated of this MessagingV1Service.
        :param fallback_method: The fallback_method of this MessagingV1Service.
        :param fallback_to_long_code: The fallback_to_long_code of this MessagingV1Service.
        :param fallback_url: The fallback_url of this MessagingV1Service.
        :param friendly_name: The friendly_name of this MessagingV1Service.
        :param inbound_method: The inbound_method of this MessagingV1Service.
        :param inbound_request_url: The inbound_request_url of this MessagingV1Service.
        :param links: The links of this MessagingV1Service.
        :param mms_converter: The mms_converter of this MessagingV1Service.
        :param scan_message_content: The scan_message_content of this MessagingV1Service.
        :param sid: The sid of this MessagingV1Service.
        :param smart_encoding: The smart_encoding of this MessagingV1Service.
        :param status_callback: The status_callback of this MessagingV1Service.
        :param sticky_sender: The sticky_sender of this MessagingV1Service.
        :param synchronous_validation: The synchronous_validation of this MessagingV1Service.
        :param url: The url of this MessagingV1Service.
        :param us_app_to_person_registered: The us_app_to_person_registered of this MessagingV1Service.
        :param use_inbound_webhook_on_number: The use_inbound_webhook_on_number of this MessagingV1Service.
        :param usecase: The usecase of this MessagingV1Service.
        :param validity_period: The validity_period of this MessagingV1Service.
        """
        self.openapi_types = {
            'account_sid': str,
            'area_code_geomatch': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'fallback_method': str,
            'fallback_to_long_code': bool,
            'fallback_url': str,
            'friendly_name': str,
            'inbound_method': str,
            'inbound_request_url': str,
            'links': object,
            'mms_converter': bool,
            'scan_message_content': ServiceEnumScanMessageContent,
            'sid': str,
            'smart_encoding': bool,
            'status_callback': str,
            'sticky_sender': bool,
            'synchronous_validation': bool,
            'url': str,
            'us_app_to_person_registered': bool,
            'use_inbound_webhook_on_number': bool,
            'usecase': str,
            'validity_period': int
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'area_code_geomatch': 'area_code_geomatch',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'fallback_method': 'fallback_method',
            'fallback_to_long_code': 'fallback_to_long_code',
            'fallback_url': 'fallback_url',
            'friendly_name': 'friendly_name',
            'inbound_method': 'inbound_method',
            'inbound_request_url': 'inbound_request_url',
            'links': 'links',
            'mms_converter': 'mms_converter',
            'scan_message_content': 'scan_message_content',
            'sid': 'sid',
            'smart_encoding': 'smart_encoding',
            'status_callback': 'status_callback',
            'sticky_sender': 'sticky_sender',
            'synchronous_validation': 'synchronous_validation',
            'url': 'url',
            'us_app_to_person_registered': 'us_app_to_person_registered',
            'use_inbound_webhook_on_number': 'use_inbound_webhook_on_number',
            'usecase': 'usecase',
            'validity_period': 'validity_period'
        }

        self._account_sid = account_sid
        self._area_code_geomatch = area_code_geomatch
        self._date_created = date_created
        self._date_updated = date_updated
        self._fallback_method = fallback_method
        self._fallback_to_long_code = fallback_to_long_code
        self._fallback_url = fallback_url
        self._friendly_name = friendly_name
        self._inbound_method = inbound_method
        self._inbound_request_url = inbound_request_url
        self._links = links
        self._mms_converter = mms_converter
        self._scan_message_content = scan_message_content
        self._sid = sid
        self._smart_encoding = smart_encoding
        self._status_callback = status_callback
        self._sticky_sender = sticky_sender
        self._synchronous_validation = synchronous_validation
        self._url = url
        self._us_app_to_person_registered = us_app_to_person_registered
        self._use_inbound_webhook_on_number = use_inbound_webhook_on_number
        self._usecase = usecase
        self._validity_period = validity_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagingV1Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The messaging.v1.service of this MessagingV1Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MessagingV1Service.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.

        :return: The account_sid of this MessagingV1Service.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MessagingV1Service.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.

        :param account_sid: The account_sid of this MessagingV1Service.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def area_code_geomatch(self):
        """Gets the area_code_geomatch of this MessagingV1Service.

        Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/messaging/services#area-code-geomatch) on the Service Instance.

        :return: The area_code_geomatch of this MessagingV1Service.
        :rtype: bool
        """
        return self._area_code_geomatch

    @area_code_geomatch.setter
    def area_code_geomatch(self, area_code_geomatch):
        """Sets the area_code_geomatch of this MessagingV1Service.

        Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/messaging/services#area-code-geomatch) on the Service Instance.

        :param area_code_geomatch: The area_code_geomatch of this MessagingV1Service.
        :type area_code_geomatch: bool
        """

        self._area_code_geomatch = area_code_geomatch

    @property
    def date_created(self):
        """Gets the date_created of this MessagingV1Service.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MessagingV1Service.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MessagingV1Service.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MessagingV1Service.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MessagingV1Service.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MessagingV1Service.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MessagingV1Service.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MessagingV1Service.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def fallback_method(self):
        """Gets the fallback_method of this MessagingV1Service.

        The HTTP method we use to call `fallback_url`. Can be: `GET` or `POST`.

        :return: The fallback_method of this MessagingV1Service.
        :rtype: str
        """
        return self._fallback_method

    @fallback_method.setter
    def fallback_method(self, fallback_method):
        """Sets the fallback_method of this MessagingV1Service.

        The HTTP method we use to call `fallback_url`. Can be: `GET` or `POST`.

        :param fallback_method: The fallback_method of this MessagingV1Service.
        :type fallback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if fallback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `fallback_method` ({0}), must be one of {1}"
                .format(fallback_method, allowed_values)
            )

        self._fallback_method = fallback_method

    @property
    def fallback_to_long_code(self):
        """Gets the fallback_to_long_code of this MessagingV1Service.

        [OBSOLETE] Former feature used to fallback to long code sender after certain short code message failures.

        :return: The fallback_to_long_code of this MessagingV1Service.
        :rtype: bool
        """
        return self._fallback_to_long_code

    @fallback_to_long_code.setter
    def fallback_to_long_code(self, fallback_to_long_code):
        """Sets the fallback_to_long_code of this MessagingV1Service.

        [OBSOLETE] Former feature used to fallback to long code sender after certain short code message failures.

        :param fallback_to_long_code: The fallback_to_long_code of this MessagingV1Service.
        :type fallback_to_long_code: bool
        """

        self._fallback_to_long_code = fallback_to_long_code

    @property
    def fallback_url(self):
        """Gets the fallback_url of this MessagingV1Service.

        The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.

        :return: The fallback_url of this MessagingV1Service.
        :rtype: str
        """
        return self._fallback_url

    @fallback_url.setter
    def fallback_url(self, fallback_url):
        """Sets the fallback_url of this MessagingV1Service.

        The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.

        :param fallback_url: The fallback_url of this MessagingV1Service.
        :type fallback_url: str
        """

        self._fallback_url = fallback_url

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MessagingV1Service.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this MessagingV1Service.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MessagingV1Service.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this MessagingV1Service.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def inbound_method(self):
        """Gets the inbound_method of this MessagingV1Service.

        The HTTP method we use to call `inbound_request_url`. Can be `GET` or `POST`.

        :return: The inbound_method of this MessagingV1Service.
        :rtype: str
        """
        return self._inbound_method

    @inbound_method.setter
    def inbound_method(self, inbound_method):
        """Sets the inbound_method of this MessagingV1Service.

        The HTTP method we use to call `inbound_request_url`. Can be `GET` or `POST`.

        :param inbound_method: The inbound_method of this MessagingV1Service.
        :type inbound_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if inbound_method not in allowed_values:
            raise ValueError(
                "Invalid value for `inbound_method` ({0}), must be one of {1}"
                .format(inbound_method, allowed_values)
            )

        self._inbound_method = inbound_method

    @property
    def inbound_request_url(self):
        """Gets the inbound_request_url of this MessagingV1Service.

        The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.

        :return: The inbound_request_url of this MessagingV1Service.
        :rtype: str
        """
        return self._inbound_request_url

    @inbound_request_url.setter
    def inbound_request_url(self, inbound_request_url):
        """Sets the inbound_request_url of this MessagingV1Service.

        The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.

        :param inbound_request_url: The inbound_request_url of this MessagingV1Service.
        :type inbound_request_url: str
        """

        self._inbound_request_url = inbound_request_url

    @property
    def links(self):
        """Gets the links of this MessagingV1Service.

        The absolute URLs of related resources.

        :return: The links of this MessagingV1Service.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MessagingV1Service.

        The absolute URLs of related resources.

        :param links: The links of this MessagingV1Service.
        :type links: object
        """

        self._links = links

    @property
    def mms_converter(self):
        """Gets the mms_converter of this MessagingV1Service.

        Whether to enable the [MMS Converter](https://www.twilio.com/docs/messaging/services#mms-converter) for messages sent through the Service instance.

        :return: The mms_converter of this MessagingV1Service.
        :rtype: bool
        """
        return self._mms_converter

    @mms_converter.setter
    def mms_converter(self, mms_converter):
        """Sets the mms_converter of this MessagingV1Service.

        Whether to enable the [MMS Converter](https://www.twilio.com/docs/messaging/services#mms-converter) for messages sent through the Service instance.

        :param mms_converter: The mms_converter of this MessagingV1Service.
        :type mms_converter: bool
        """

        self._mms_converter = mms_converter

    @property
    def scan_message_content(self):
        """Gets the scan_message_content of this MessagingV1Service.


        :return: The scan_message_content of this MessagingV1Service.
        :rtype: ServiceEnumScanMessageContent
        """
        return self._scan_message_content

    @scan_message_content.setter
    def scan_message_content(self, scan_message_content):
        """Sets the scan_message_content of this MessagingV1Service.


        :param scan_message_content: The scan_message_content of this MessagingV1Service.
        :type scan_message_content: ServiceEnumScanMessageContent
        """

        self._scan_message_content = scan_message_content

    @property
    def sid(self):
        """Gets the sid of this MessagingV1Service.

        The unique string that we created to identify the Service resource.

        :return: The sid of this MessagingV1Service.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MessagingV1Service.

        The unique string that we created to identify the Service resource.

        :param sid: The sid of this MessagingV1Service.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^MG[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^MG[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def smart_encoding(self):
        """Gets the smart_encoding of this MessagingV1Service.

        Whether to enable [Smart Encoding](https://www.twilio.com/docs/messaging/services#smart-encoding) for messages sent through the Service instance.

        :return: The smart_encoding of this MessagingV1Service.
        :rtype: bool
        """
        return self._smart_encoding

    @smart_encoding.setter
    def smart_encoding(self, smart_encoding):
        """Sets the smart_encoding of this MessagingV1Service.

        Whether to enable [Smart Encoding](https://www.twilio.com/docs/messaging/services#smart-encoding) for messages sent through the Service instance.

        :param smart_encoding: The smart_encoding of this MessagingV1Service.
        :type smart_encoding: bool
        """

        self._smart_encoding = smart_encoding

    @property
    def status_callback(self):
        """Gets the status_callback of this MessagingV1Service.

        The URL we call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.

        :return: The status_callback of this MessagingV1Service.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this MessagingV1Service.

        The URL we call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.

        :param status_callback: The status_callback of this MessagingV1Service.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def sticky_sender(self):
        """Gets the sticky_sender of this MessagingV1Service.

        Whether to enable [Sticky Sender](https://www.twilio.com/docs/messaging/services#sticky-sender) on the Service instance.

        :return: The sticky_sender of this MessagingV1Service.
        :rtype: bool
        """
        return self._sticky_sender

    @sticky_sender.setter
    def sticky_sender(self, sticky_sender):
        """Sets the sticky_sender of this MessagingV1Service.

        Whether to enable [Sticky Sender](https://www.twilio.com/docs/messaging/services#sticky-sender) on the Service instance.

        :param sticky_sender: The sticky_sender of this MessagingV1Service.
        :type sticky_sender: bool
        """

        self._sticky_sender = sticky_sender

    @property
    def synchronous_validation(self):
        """Gets the synchronous_validation of this MessagingV1Service.

        Reserved.

        :return: The synchronous_validation of this MessagingV1Service.
        :rtype: bool
        """
        return self._synchronous_validation

    @synchronous_validation.setter
    def synchronous_validation(self, synchronous_validation):
        """Sets the synchronous_validation of this MessagingV1Service.

        Reserved.

        :param synchronous_validation: The synchronous_validation of this MessagingV1Service.
        :type synchronous_validation: bool
        """

        self._synchronous_validation = synchronous_validation

    @property
    def url(self):
        """Gets the url of this MessagingV1Service.

        The absolute URL of the Service resource.

        :return: The url of this MessagingV1Service.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessagingV1Service.

        The absolute URL of the Service resource.

        :param url: The url of this MessagingV1Service.
        :type url: str
        """

        self._url = url

    @property
    def us_app_to_person_registered(self):
        """Gets the us_app_to_person_registered of this MessagingV1Service.

        Whether US A2P campaign is registered for this Service.

        :return: The us_app_to_person_registered of this MessagingV1Service.
        :rtype: bool
        """
        return self._us_app_to_person_registered

    @us_app_to_person_registered.setter
    def us_app_to_person_registered(self, us_app_to_person_registered):
        """Sets the us_app_to_person_registered of this MessagingV1Service.

        Whether US A2P campaign is registered for this Service.

        :param us_app_to_person_registered: The us_app_to_person_registered of this MessagingV1Service.
        :type us_app_to_person_registered: bool
        """

        self._us_app_to_person_registered = us_app_to_person_registered

    @property
    def use_inbound_webhook_on_number(self):
        """Gets the use_inbound_webhook_on_number of this MessagingV1Service.

        A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.

        :return: The use_inbound_webhook_on_number of this MessagingV1Service.
        :rtype: bool
        """
        return self._use_inbound_webhook_on_number

    @use_inbound_webhook_on_number.setter
    def use_inbound_webhook_on_number(self, use_inbound_webhook_on_number):
        """Sets the use_inbound_webhook_on_number of this MessagingV1Service.

        A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.

        :param use_inbound_webhook_on_number: The use_inbound_webhook_on_number of this MessagingV1Service.
        :type use_inbound_webhook_on_number: bool
        """

        self._use_inbound_webhook_on_number = use_inbound_webhook_on_number

    @property
    def usecase(self):
        """Gets the usecase of this MessagingV1Service.

        A string that describes the scenario in which the Messaging Service will be used. Possible values are `notifications`, `marketing`, `verification`, `discussion`, `poll`, `undeclared`.

        :return: The usecase of this MessagingV1Service.
        :rtype: str
        """
        return self._usecase

    @usecase.setter
    def usecase(self, usecase):
        """Sets the usecase of this MessagingV1Service.

        A string that describes the scenario in which the Messaging Service will be used. Possible values are `notifications`, `marketing`, `verification`, `discussion`, `poll`, `undeclared`.

        :param usecase: The usecase of this MessagingV1Service.
        :type usecase: str
        """

        self._usecase = usecase

    @property
    def validity_period(self):
        """Gets the validity_period of this MessagingV1Service.

        How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.

        :return: The validity_period of this MessagingV1Service.
        :rtype: int
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this MessagingV1Service.

        How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.

        :param validity_period: The validity_period of this MessagingV1Service.
        :type validity_period: int
        """

        self._validity_period = validity_period
