/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessagingV1DomainCertV4 model module.
 * @module model/MessagingV1DomainCertV4
 * @version 1.55.0
 */
class MessagingV1DomainCertV4 {
    /**
     * Constructs a new <code>MessagingV1DomainCertV4</code>.
     * @alias module:model/MessagingV1DomainCertV4
     */
    constructor() { 
        
        MessagingV1DomainCertV4.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessagingV1DomainCertV4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagingV1DomainCertV4} obj Optional instance to populate.
     * @return {module:model/MessagingV1DomainCertV4} The populated <code>MessagingV1DomainCertV4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagingV1DomainCertV4();

            if (data.hasOwnProperty('cert_in_validation')) {
                obj['cert_in_validation'] = ApiClient.convertToType(data['cert_in_validation'], Object);
            }
            if (data.hasOwnProperty('certificate_sid')) {
                obj['certificate_sid'] = ApiClient.convertToType(data['certificate_sid'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_expires')) {
                obj['date_expires'] = ApiClient.convertToType(data['date_expires'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('domain_name')) {
                obj['domain_name'] = ApiClient.convertToType(data['domain_name'], 'String');
            }
            if (data.hasOwnProperty('domain_sid')) {
                obj['domain_sid'] = ApiClient.convertToType(data['domain_sid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagingV1DomainCertV4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagingV1DomainCertV4</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificate_sid'] && !(typeof data['certificate_sid'] === 'string' || data['certificate_sid'] instanceof String)) {
            throw new Error("Expected the field `certificate_sid` to be a primitive type in the JSON string but got " + data['certificate_sid']);
        }
        // ensure the json data is a string
        if (data['domain_name'] && !(typeof data['domain_name'] === 'string' || data['domain_name'] instanceof String)) {
            throw new Error("Expected the field `domain_name` to be a primitive type in the JSON string but got " + data['domain_name']);
        }
        // ensure the json data is a string
        if (data['domain_sid'] && !(typeof data['domain_sid'] === 'string' || data['domain_sid'] instanceof String)) {
            throw new Error("Expected the field `domain_sid` to be a primitive type in the JSON string but got " + data['domain_sid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Optional JSON field describing the status and upload date of a new certificate in the process of validation
 * @member {Object} cert_in_validation
 */
MessagingV1DomainCertV4.prototype['cert_in_validation'] = undefined;

/**
 * The unique string that we created to identify this Certificate resource.
 * @member {String} certificate_sid
 */
MessagingV1DomainCertV4.prototype['certificate_sid'] = undefined;

/**
 * Date that this Domain was registered to the Twilio platform to create a new Domain object.
 * @member {Date} date_created
 */
MessagingV1DomainCertV4.prototype['date_created'] = undefined;

/**
 * Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.
 * @member {Date} date_expires
 */
MessagingV1DomainCertV4.prototype['date_expires'] = undefined;

/**
 * Date that this Domain was last updated.
 * @member {Date} date_updated
 */
MessagingV1DomainCertV4.prototype['date_updated'] = undefined;

/**
 * Full url path for this domain.
 * @member {String} domain_name
 */
MessagingV1DomainCertV4.prototype['domain_name'] = undefined;

/**
 * The unique string that we created to identify the Domain resource.
 * @member {String} domain_sid
 */
MessagingV1DomainCertV4.prototype['domain_sid'] = undefined;

/**
 * @member {String} url
 */
MessagingV1DomainCertV4.prototype['url'] = undefined;






export default MessagingV1DomainCertV4;

