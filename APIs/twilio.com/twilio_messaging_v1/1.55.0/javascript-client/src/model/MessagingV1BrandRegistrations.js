/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrandRegistrationsEnumBrandFeedback from './BrandRegistrationsEnumBrandFeedback';
import BrandRegistrationsEnumIdentityStatus from './BrandRegistrationsEnumIdentityStatus';
import BrandRegistrationsEnumStatus from './BrandRegistrationsEnumStatus';

/**
 * The MessagingV1BrandRegistrations model module.
 * @module model/MessagingV1BrandRegistrations
 * @version 1.55.0
 */
class MessagingV1BrandRegistrations {
    /**
     * Constructs a new <code>MessagingV1BrandRegistrations</code>.
     * @alias module:model/MessagingV1BrandRegistrations
     */
    constructor() { 
        
        MessagingV1BrandRegistrations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessagingV1BrandRegistrations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagingV1BrandRegistrations} obj Optional instance to populate.
     * @return {module:model/MessagingV1BrandRegistrations} The populated <code>MessagingV1BrandRegistrations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagingV1BrandRegistrations();

            if (data.hasOwnProperty('a2p_profile_bundle_sid')) {
                obj['a2p_profile_bundle_sid'] = ApiClient.convertToType(data['a2p_profile_bundle_sid'], 'String');
            }
            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('brand_feedback')) {
                obj['brand_feedback'] = ApiClient.convertToType(data['brand_feedback'], [BrandRegistrationsEnumBrandFeedback]);
            }
            if (data.hasOwnProperty('brand_score')) {
                obj['brand_score'] = ApiClient.convertToType(data['brand_score'], 'Number');
            }
            if (data.hasOwnProperty('brand_type')) {
                obj['brand_type'] = ApiClient.convertToType(data['brand_type'], 'String');
            }
            if (data.hasOwnProperty('customer_profile_bundle_sid')) {
                obj['customer_profile_bundle_sid'] = ApiClient.convertToType(data['customer_profile_bundle_sid'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('failure_reason')) {
                obj['failure_reason'] = ApiClient.convertToType(data['failure_reason'], 'String');
            }
            if (data.hasOwnProperty('government_entity')) {
                obj['government_entity'] = ApiClient.convertToType(data['government_entity'], 'Boolean');
            }
            if (data.hasOwnProperty('identity_status')) {
                obj['identity_status'] = BrandRegistrationsEnumIdentityStatus.constructFromObject(data['identity_status']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('mock')) {
                obj['mock'] = ApiClient.convertToType(data['mock'], 'Boolean');
            }
            if (data.hasOwnProperty('russell_3000')) {
                obj['russell_3000'] = ApiClient.convertToType(data['russell_3000'], 'Boolean');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('skip_automatic_sec_vet')) {
                obj['skip_automatic_sec_vet'] = ApiClient.convertToType(data['skip_automatic_sec_vet'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = BrandRegistrationsEnumStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tax_exempt_status')) {
                obj['tax_exempt_status'] = ApiClient.convertToType(data['tax_exempt_status'], 'String');
            }
            if (data.hasOwnProperty('tcr_id')) {
                obj['tcr_id'] = ApiClient.convertToType(data['tcr_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagingV1BrandRegistrations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagingV1BrandRegistrations</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['a2p_profile_bundle_sid'] && !(typeof data['a2p_profile_bundle_sid'] === 'string' || data['a2p_profile_bundle_sid'] instanceof String)) {
            throw new Error("Expected the field `a2p_profile_bundle_sid` to be a primitive type in the JSON string but got " + data['a2p_profile_bundle_sid']);
        }
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['brand_feedback'])) {
            throw new Error("Expected the field `brand_feedback` to be an array in the JSON data but got " + data['brand_feedback']);
        }
        // ensure the json data is a string
        if (data['brand_type'] && !(typeof data['brand_type'] === 'string' || data['brand_type'] instanceof String)) {
            throw new Error("Expected the field `brand_type` to be a primitive type in the JSON string but got " + data['brand_type']);
        }
        // ensure the json data is a string
        if (data['customer_profile_bundle_sid'] && !(typeof data['customer_profile_bundle_sid'] === 'string' || data['customer_profile_bundle_sid'] instanceof String)) {
            throw new Error("Expected the field `customer_profile_bundle_sid` to be a primitive type in the JSON string but got " + data['customer_profile_bundle_sid']);
        }
        // ensure the json data is a string
        if (data['failure_reason'] && !(typeof data['failure_reason'] === 'string' || data['failure_reason'] instanceof String)) {
            throw new Error("Expected the field `failure_reason` to be a primitive type in the JSON string but got " + data['failure_reason']);
        }
        // ensure the json data is a string
        if (data['identity_status'] && !(typeof data['identity_status'] === 'string' || data['identity_status'] instanceof String)) {
            throw new Error("Expected the field `identity_status` to be a primitive type in the JSON string but got " + data['identity_status']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tax_exempt_status'] && !(typeof data['tax_exempt_status'] === 'string' || data['tax_exempt_status'] instanceof String)) {
            throw new Error("Expected the field `tax_exempt_status` to be a primitive type in the JSON string but got " + data['tax_exempt_status']);
        }
        // ensure the json data is a string
        if (data['tcr_id'] && !(typeof data['tcr_id'] === 'string' || data['tcr_id'] instanceof String)) {
            throw new Error("Expected the field `tcr_id` to be a primitive type in the JSON string but got " + data['tcr_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * A2P Messaging Profile Bundle BundleSid.
 * @member {String} a2p_profile_bundle_sid
 */
MessagingV1BrandRegistrations.prototype['a2p_profile_bundle_sid'] = undefined;

/**
 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.
 * @member {String} account_sid
 */
MessagingV1BrandRegistrations.prototype['account_sid'] = undefined;

/**
 * Feedback on how to improve brand score
 * @member {Array.<module:model/BrandRegistrationsEnumBrandFeedback>} brand_feedback
 */
MessagingV1BrandRegistrations.prototype['brand_feedback'] = undefined;

/**
 * The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.
 * @member {Number} brand_score
 */
MessagingV1BrandRegistrations.prototype['brand_score'] = undefined;

/**
 * Type of brand. One of: \"STANDARD\", \"SOLE_PROPRIETOR\". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.
 * @member {String} brand_type
 */
MessagingV1BrandRegistrations.prototype['brand_type'] = undefined;

/**
 * A2P Messaging Profile Bundle BundleSid.
 * @member {String} customer_profile_bundle_sid
 */
MessagingV1BrandRegistrations.prototype['customer_profile_bundle_sid'] = undefined;

/**
 * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
MessagingV1BrandRegistrations.prototype['date_created'] = undefined;

/**
 * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_updated
 */
MessagingV1BrandRegistrations.prototype['date_updated'] = undefined;

/**
 * A reason why brand registration has failed. Only applicable when status is FAILED.
 * @member {String} failure_reason
 */
MessagingV1BrandRegistrations.prototype['failure_reason'] = undefined;

/**
 * Identified as a government entity
 * @member {Boolean} government_entity
 */
MessagingV1BrandRegistrations.prototype['government_entity'] = undefined;

/**
 * @member {module:model/BrandRegistrationsEnumIdentityStatus} identity_status
 */
MessagingV1BrandRegistrations.prototype['identity_status'] = undefined;

/**
 * @member {Object} links
 */
MessagingV1BrandRegistrations.prototype['links'] = undefined;

/**
 * A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
 * @member {Boolean} mock
 */
MessagingV1BrandRegistrations.prototype['mock'] = undefined;

/**
 * Publicly traded company identified in the Russell 3000 Index
 * @member {Boolean} russell_3000
 */
MessagingV1BrandRegistrations.prototype['russell_3000'] = undefined;

/**
 * The unique string to identify Brand Registration.
 * @member {String} sid
 */
MessagingV1BrandRegistrations.prototype['sid'] = undefined;

/**
 * A flag to disable automatic secondary vetting for brands which it would otherwise be done.
 * @member {Boolean} skip_automatic_sec_vet
 */
MessagingV1BrandRegistrations.prototype['skip_automatic_sec_vet'] = undefined;

/**
 * @member {module:model/BrandRegistrationsEnumStatus} status
 */
MessagingV1BrandRegistrations.prototype['status'] = undefined;

/**
 * Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.
 * @member {String} tax_exempt_status
 */
MessagingV1BrandRegistrations.prototype['tax_exempt_status'] = undefined;

/**
 * Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.
 * @member {String} tcr_id
 */
MessagingV1BrandRegistrations.prototype['tcr_id'] = undefined;

/**
 * The absolute URL of the Brand Registration resource.
 * @member {String} url
 */
MessagingV1BrandRegistrations.prototype['url'] = undefined;






export default MessagingV1BrandRegistrations;

