/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTollfreeVerificationResponse from '../model/ListTollfreeVerificationResponse';
import MessagingV1TollfreeVerification from '../model/MessagingV1TollfreeVerification';
import TollfreeVerificationEnumOptInType from '../model/TollfreeVerificationEnumOptInType';
import TollfreeVerificationEnumStatus from '../model/TollfreeVerificationEnumStatus';

/**
* MessagingV1TollfreeVerification service.
* @module api/MessagingV1TollfreeVerificationApi
* @version 1.55.0
*/
export default class MessagingV1TollfreeVerificationApi {

    /**
    * Constructs a new MessagingV1TollfreeVerificationApi. 
    * @alias module:api/MessagingV1TollfreeVerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTollfreeVerification operation.
     * @callback module:api/MessagingV1TollfreeVerificationApi~createTollfreeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1TollfreeVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} businessName The name of the business or organization using the Tollfree number.
     * @param {String} businessWebsite The website of the business or organization using the Tollfree number.
     * @param {String} messageVolume Estimate monthly volume of messages from the Tollfree Number.
     * @param {String} notificationEmail The email address to receive the notification about the verification result. .
     * @param {Array.<String>} optInImageUrls Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.
     * @param {module:model/TollfreeVerificationEnumOptInType} optInType 
     * @param {String} productionMessageSample An example of message content, i.e. a sample message.
     * @param {String} tollfreePhoneNumberSid The SID of the Phone Number associated with the Tollfree Verification.
     * @param {Array.<String>} useCaseCategories The category of the use case for the Tollfree Number. List as many are applicable..
     * @param {String} useCaseSummary Use this to further explain how messaging is used by the business or organization.
     * @param {Object} opts Optional parameters
     * @param {String} [additionalInformation] Additional information to be provided for verification.
     * @param {String} [businessCity] The city of the business or organization using the Tollfree number.
     * @param {String} [businessContactEmail] The email address of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactFirstName] The first name of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactLastName] The last name of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactPhone] The E.164 formatted phone number of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessCountry] The country of the business or organization using the Tollfree number.
     * @param {String} [businessPostalCode] The postal code of the business or organization using the Tollfree number.
     * @param {String} [businessStateProvinceRegion] The state/province/region of the business or organization using the Tollfree number.
     * @param {String} [businessStreetAddress] The address of the business or organization using the Tollfree number.
     * @param {String} [businessStreetAddress2] The address of the business or organization using the Tollfree number.
     * @param {String} [customerProfileSid] Customer's Profile Bundle BundleSid.
     * @param {String} [externalReferenceId] An optional external reference ID supplied by customer and echoed back on status retrieval.
     * @param {module:api/MessagingV1TollfreeVerificationApi~createTollfreeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1TollfreeVerification}
     */
    createTollfreeVerification(businessName, businessWebsite, messageVolume, notificationEmail, optInImageUrls, optInType, productionMessageSample, tollfreePhoneNumberSid, useCaseCategories, useCaseSummary, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'businessName' is set
      if (businessName === undefined || businessName === null) {
        throw new Error("Missing the required parameter 'businessName' when calling createTollfreeVerification");
      }
      // verify the required parameter 'businessWebsite' is set
      if (businessWebsite === undefined || businessWebsite === null) {
        throw new Error("Missing the required parameter 'businessWebsite' when calling createTollfreeVerification");
      }
      // verify the required parameter 'messageVolume' is set
      if (messageVolume === undefined || messageVolume === null) {
        throw new Error("Missing the required parameter 'messageVolume' when calling createTollfreeVerification");
      }
      // verify the required parameter 'notificationEmail' is set
      if (notificationEmail === undefined || notificationEmail === null) {
        throw new Error("Missing the required parameter 'notificationEmail' when calling createTollfreeVerification");
      }
      // verify the required parameter 'optInImageUrls' is set
      if (optInImageUrls === undefined || optInImageUrls === null) {
        throw new Error("Missing the required parameter 'optInImageUrls' when calling createTollfreeVerification");
      }
      // verify the required parameter 'optInType' is set
      if (optInType === undefined || optInType === null) {
        throw new Error("Missing the required parameter 'optInType' when calling createTollfreeVerification");
      }
      // verify the required parameter 'productionMessageSample' is set
      if (productionMessageSample === undefined || productionMessageSample === null) {
        throw new Error("Missing the required parameter 'productionMessageSample' when calling createTollfreeVerification");
      }
      // verify the required parameter 'tollfreePhoneNumberSid' is set
      if (tollfreePhoneNumberSid === undefined || tollfreePhoneNumberSid === null) {
        throw new Error("Missing the required parameter 'tollfreePhoneNumberSid' when calling createTollfreeVerification");
      }
      // verify the required parameter 'useCaseCategories' is set
      if (useCaseCategories === undefined || useCaseCategories === null) {
        throw new Error("Missing the required parameter 'useCaseCategories' when calling createTollfreeVerification");
      }
      // verify the required parameter 'useCaseSummary' is set
      if (useCaseSummary === undefined || useCaseSummary === null) {
        throw new Error("Missing the required parameter 'useCaseSummary' when calling createTollfreeVerification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AdditionalInformation': opts['additionalInformation'],
        'BusinessCity': opts['businessCity'],
        'BusinessContactEmail': opts['businessContactEmail'],
        'BusinessContactFirstName': opts['businessContactFirstName'],
        'BusinessContactLastName': opts['businessContactLastName'],
        'BusinessContactPhone': opts['businessContactPhone'],
        'BusinessCountry': opts['businessCountry'],
        'BusinessName': businessName,
        'BusinessPostalCode': opts['businessPostalCode'],
        'BusinessStateProvinceRegion': opts['businessStateProvinceRegion'],
        'BusinessStreetAddress': opts['businessStreetAddress'],
        'BusinessStreetAddress2': opts['businessStreetAddress2'],
        'BusinessWebsite': businessWebsite,
        'CustomerProfileSid': opts['customerProfileSid'],
        'ExternalReferenceId': opts['externalReferenceId'],
        'MessageVolume': messageVolume,
        'NotificationEmail': notificationEmail,
        'OptInImageUrls': this.apiClient.buildCollectionParam(optInImageUrls, 'csv'),
        'OptInType': optInType,
        'ProductionMessageSample': productionMessageSample,
        'TollfreePhoneNumberSid': tollfreePhoneNumberSid,
        'UseCaseCategories': this.apiClient.buildCollectionParam(useCaseCategories, 'csv'),
        'UseCaseSummary': useCaseSummary
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1TollfreeVerification;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Tollfree/Verifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTollfreeVerification operation.
     * @callback module:api/MessagingV1TollfreeVerificationApi~deleteTollfreeVerificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string to identify Tollfree Verification.
     * @param {module:api/MessagingV1TollfreeVerificationApi~deleteTollfreeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTollfreeVerification(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTollfreeVerification");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Tollfree/Verifications/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTollfreeVerification operation.
     * @callback module:api/MessagingV1TollfreeVerificationApi~fetchTollfreeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1TollfreeVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string to identify Tollfree Verification.
     * @param {module:api/MessagingV1TollfreeVerificationApi~fetchTollfreeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1TollfreeVerification}
     */
    fetchTollfreeVerification(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTollfreeVerification");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1TollfreeVerification;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Tollfree/Verifications/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTollfreeVerification operation.
     * @callback module:api/MessagingV1TollfreeVerificationApi~listTollfreeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTollfreeVerificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [tollfreePhoneNumberSid] The SID of the Phone Number associated with the Tollfree Verification.
     * @param {module:model/TollfreeVerificationEnumStatus} [status] The compliance status of the Tollfree Verification record.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MessagingV1TollfreeVerificationApi~listTollfreeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTollfreeVerificationResponse}
     */
    listTollfreeVerification(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'TollfreePhoneNumberSid': opts['tollfreePhoneNumberSid'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTollfreeVerificationResponse;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Tollfree/Verifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTollfreeVerification operation.
     * @callback module:api/MessagingV1TollfreeVerificationApi~updateTollfreeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1TollfreeVerification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string to identify Tollfree Verification.
     * @param {Object} opts Optional parameters
     * @param {String} [additionalInformation] Additional information to be provided for verification.
     * @param {String} [businessCity] The city of the business or organization using the Tollfree number.
     * @param {String} [businessContactEmail] The email address of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactFirstName] The first name of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactLastName] The last name of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessContactPhone] The E.164 formatted phone number of the contact for the business or organization using the Tollfree number.
     * @param {String} [businessCountry] The country of the business or organization using the Tollfree number.
     * @param {String} [businessName] The name of the business or organization using the Tollfree number.
     * @param {String} [businessPostalCode] The postal code of the business or organization using the Tollfree number.
     * @param {String} [businessStateProvinceRegion] The state/province/region of the business or organization using the Tollfree number.
     * @param {String} [businessStreetAddress] The address of the business or organization using the Tollfree number.
     * @param {String} [businessStreetAddress2] The address of the business or organization using the Tollfree number.
     * @param {String} [businessWebsite] The website of the business or organization using the Tollfree number.
     * @param {String} [editReason] Describe why the verification is being edited. If the verification was rejected because of a technical issue, such as the website being down, and the issue has been resolved this parameter should be set to something similar to 'Website fixed'.
     * @param {String} [messageVolume] Estimate monthly volume of messages from the Tollfree Number.
     * @param {String} [notificationEmail] The email address to receive the notification about the verification result. .
     * @param {Array.<String>} [optInImageUrls] Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.
     * @param {module:model/TollfreeVerificationEnumOptInType} [optInType] 
     * @param {String} [productionMessageSample] An example of message content, i.e. a sample message.
     * @param {Array.<String>} [useCaseCategories] The category of the use case for the Tollfree Number. List as many are applicable..
     * @param {String} [useCaseSummary] Use this to further explain how messaging is used by the business or organization.
     * @param {module:api/MessagingV1TollfreeVerificationApi~updateTollfreeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1TollfreeVerification}
     */
    updateTollfreeVerification(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTollfreeVerification");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AdditionalInformation': opts['additionalInformation'],
        'BusinessCity': opts['businessCity'],
        'BusinessContactEmail': opts['businessContactEmail'],
        'BusinessContactFirstName': opts['businessContactFirstName'],
        'BusinessContactLastName': opts['businessContactLastName'],
        'BusinessContactPhone': opts['businessContactPhone'],
        'BusinessCountry': opts['businessCountry'],
        'BusinessName': opts['businessName'],
        'BusinessPostalCode': opts['businessPostalCode'],
        'BusinessStateProvinceRegion': opts['businessStateProvinceRegion'],
        'BusinessStreetAddress': opts['businessStreetAddress'],
        'BusinessStreetAddress2': opts['businessStreetAddress2'],
        'BusinessWebsite': opts['businessWebsite'],
        'EditReason': opts['editReason'],
        'MessageVolume': opts['messageVolume'],
        'NotificationEmail': opts['notificationEmail'],
        'OptInImageUrls': this.apiClient.buildCollectionParam(opts['optInImageUrls'], 'csv'),
        'OptInType': opts['optInType'],
        'ProductionMessageSample': opts['productionMessageSample'],
        'UseCaseCategories': this.apiClient.buildCollectionParam(opts['useCaseCategories'], 'csv'),
        'UseCaseSummary': opts['useCaseSummary']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1TollfreeVerification;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Tollfree/Verifications/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
