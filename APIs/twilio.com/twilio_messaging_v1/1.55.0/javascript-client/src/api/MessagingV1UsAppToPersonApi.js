/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListUsAppToPersonResponse from '../model/ListUsAppToPersonResponse';
import MessagingV1ServiceUsAppToPerson from '../model/MessagingV1ServiceUsAppToPerson';

/**
* MessagingV1UsAppToPerson service.
* @module api/MessagingV1UsAppToPersonApi
* @version 1.55.0
*/
export default class MessagingV1UsAppToPersonApi {

    /**
    * Constructs a new MessagingV1UsAppToPersonApi. 
    * @alias module:api/MessagingV1UsAppToPersonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUsAppToPerson operation.
     * @callback module:api/MessagingV1UsAppToPersonApi~createUsAppToPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1ServiceUsAppToPerson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to create the resources from.
     * @param {String} brandRegistrationSid A2P Brand Registration SID
     * @param {String} description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.
     * @param {Boolean} hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links.
     * @param {Boolean} hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers.
     * @param {String} messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.
     * @param {Array.<String>} messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars.
     * @param {String} usAppToPersonUsecase A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..]
     * @param {Object} opts Optional parameters
     * @param {Boolean} [ageGated] A boolean that specifies whether campaign is age gated or not.
     * @param {Boolean} [directLending] A boolean that specifies whether campaign allows direct lending or not.
     * @param {Array.<String>} [helpKeywords] End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
     * @param {String} [helpMessage] When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
     * @param {Array.<String>} [optInKeywords] If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.
     * @param {String} [optInMessage] If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.
     * @param {Array.<String>} [optOutKeywords] End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.
     * @param {String} [optOutMessage] Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.
     * @param {Boolean} [subscriberOptIn] A boolean that specifies whether campaign has Subscriber Optin or not.
     * @param {module:api/MessagingV1UsAppToPersonApi~createUsAppToPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1ServiceUsAppToPerson}
     */
    createUsAppToPerson(messagingServiceSid, brandRegistrationSid, description, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, usAppToPersonUsecase, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling createUsAppToPerson");
      }
      // verify the required parameter 'brandRegistrationSid' is set
      if (brandRegistrationSid === undefined || brandRegistrationSid === null) {
        throw new Error("Missing the required parameter 'brandRegistrationSid' when calling createUsAppToPerson");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling createUsAppToPerson");
      }
      // verify the required parameter 'hasEmbeddedLinks' is set
      if (hasEmbeddedLinks === undefined || hasEmbeddedLinks === null) {
        throw new Error("Missing the required parameter 'hasEmbeddedLinks' when calling createUsAppToPerson");
      }
      // verify the required parameter 'hasEmbeddedPhone' is set
      if (hasEmbeddedPhone === undefined || hasEmbeddedPhone === null) {
        throw new Error("Missing the required parameter 'hasEmbeddedPhone' when calling createUsAppToPerson");
      }
      // verify the required parameter 'messageFlow' is set
      if (messageFlow === undefined || messageFlow === null) {
        throw new Error("Missing the required parameter 'messageFlow' when calling createUsAppToPerson");
      }
      // verify the required parameter 'messageSamples' is set
      if (messageSamples === undefined || messageSamples === null) {
        throw new Error("Missing the required parameter 'messageSamples' when calling createUsAppToPerson");
      }
      // verify the required parameter 'usAppToPersonUsecase' is set
      if (usAppToPersonUsecase === undefined || usAppToPersonUsecase === null) {
        throw new Error("Missing the required parameter 'usAppToPersonUsecase' when calling createUsAppToPerson");
      }

      let pathParams = {
        'MessagingServiceSid': messagingServiceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AgeGated': opts['ageGated'],
        'BrandRegistrationSid': brandRegistrationSid,
        'Description': description,
        'DirectLending': opts['directLending'],
        'HasEmbeddedLinks': hasEmbeddedLinks,
        'HasEmbeddedPhone': hasEmbeddedPhone,
        'HelpKeywords': this.apiClient.buildCollectionParam(opts['helpKeywords'], 'csv'),
        'HelpMessage': opts['helpMessage'],
        'MessageFlow': messageFlow,
        'MessageSamples': this.apiClient.buildCollectionParam(messageSamples, 'csv'),
        'OptInKeywords': this.apiClient.buildCollectionParam(opts['optInKeywords'], 'csv'),
        'OptInMessage': opts['optInMessage'],
        'OptOutKeywords': this.apiClient.buildCollectionParam(opts['optOutKeywords'], 'csv'),
        'OptOutMessage': opts['optOutMessage'],
        'SubscriberOptIn': opts['subscriberOptIn'],
        'UsAppToPersonUsecase': usAppToPersonUsecase
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1ServiceUsAppToPerson;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsAppToPerson operation.
     * @callback module:api/MessagingV1UsAppToPersonApi~deleteUsAppToPersonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to delete the resource from.
     * @param {String} sid The SID of the US A2P Compliance resource to delete `QE2c6890da8086d771620e9b13fadeba0b`.
     * @param {module:api/MessagingV1UsAppToPersonApi~deleteUsAppToPersonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsAppToPerson(messagingServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling deleteUsAppToPerson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteUsAppToPerson");
      }

      let pathParams = {
        'MessagingServiceSid': messagingServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchUsAppToPerson operation.
     * @callback module:api/MessagingV1UsAppToPersonApi~fetchUsAppToPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1ServiceUsAppToPerson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from.
     * @param {String} sid The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`.
     * @param {module:api/MessagingV1UsAppToPersonApi~fetchUsAppToPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1ServiceUsAppToPerson}
     */
    fetchUsAppToPerson(messagingServiceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling fetchUsAppToPerson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchUsAppToPerson");
      }

      let pathParams = {
        'MessagingServiceSid': messagingServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1ServiceUsAppToPerson;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsAppToPerson operation.
     * @callback module:api/MessagingV1UsAppToPersonApi~listUsAppToPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsAppToPersonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to fetch the resource from.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MessagingV1UsAppToPersonApi~listUsAppToPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsAppToPersonResponse}
     */
    listUsAppToPerson(messagingServiceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling listUsAppToPerson");
      }

      let pathParams = {
        'MessagingServiceSid': messagingServiceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsAppToPersonResponse;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsAppToPerson operation.
     * @callback module:api/MessagingV1UsAppToPersonApi~updateUsAppToPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1ServiceUsAppToPerson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} messagingServiceSid The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to update the resource from.
     * @param {String} sid The SID of the US A2P Compliance resource to update `QE2c6890da8086d771620e9b13fadeba0b`.
     * @param {Boolean} ageGated A boolean that specifies whether campaign requires age gate for federally legal content.
     * @param {String} description A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.
     * @param {Boolean} directLending A boolean that specifies whether campaign allows direct lending or not.
     * @param {Boolean} hasEmbeddedLinks Indicates that this SMS campaign will send messages that contain links.
     * @param {Boolean} hasEmbeddedPhone Indicates that this SMS campaign will send messages that contain phone numbers.
     * @param {String} messageFlow Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.
     * @param {Array.<String>} messageSamples An array of sample message strings, min two and max five. Min length for each sample: 20 chars. Max length for each sample: 1024 chars.
     * @param {module:api/MessagingV1UsAppToPersonApi~updateUsAppToPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1ServiceUsAppToPerson}
     */
    updateUsAppToPerson(messagingServiceSid, sid, ageGated, description, directLending, hasEmbeddedLinks, hasEmbeddedPhone, messageFlow, messageSamples, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messagingServiceSid' is set
      if (messagingServiceSid === undefined || messagingServiceSid === null) {
        throw new Error("Missing the required parameter 'messagingServiceSid' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'ageGated' is set
      if (ageGated === undefined || ageGated === null) {
        throw new Error("Missing the required parameter 'ageGated' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'directLending' is set
      if (directLending === undefined || directLending === null) {
        throw new Error("Missing the required parameter 'directLending' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'hasEmbeddedLinks' is set
      if (hasEmbeddedLinks === undefined || hasEmbeddedLinks === null) {
        throw new Error("Missing the required parameter 'hasEmbeddedLinks' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'hasEmbeddedPhone' is set
      if (hasEmbeddedPhone === undefined || hasEmbeddedPhone === null) {
        throw new Error("Missing the required parameter 'hasEmbeddedPhone' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'messageFlow' is set
      if (messageFlow === undefined || messageFlow === null) {
        throw new Error("Missing the required parameter 'messageFlow' when calling updateUsAppToPerson");
      }
      // verify the required parameter 'messageSamples' is set
      if (messageSamples === undefined || messageSamples === null) {
        throw new Error("Missing the required parameter 'messageSamples' when calling updateUsAppToPerson");
      }

      let pathParams = {
        'MessagingServiceSid': messagingServiceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AgeGated': ageGated,
        'Description': description,
        'DirectLending': directLending,
        'HasEmbeddedLinks': hasEmbeddedLinks,
        'HasEmbeddedPhone': hasEmbeddedPhone,
        'MessageFlow': messageFlow,
        'MessageSamples': this.apiClient.buildCollectionParam(messageSamples, 'csv')
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1ServiceUsAppToPerson;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
