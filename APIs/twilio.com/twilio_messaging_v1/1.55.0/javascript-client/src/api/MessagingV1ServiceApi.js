/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListServiceResponse from '../model/ListServiceResponse';
import MessagingV1Service from '../model/MessagingV1Service';
import ServiceEnumScanMessageContent from '../model/ServiceEnumScanMessageContent';

/**
* MessagingV1Service service.
* @module api/MessagingV1ServiceApi
* @version 1.55.0
*/
export default class MessagingV1ServiceApi {

    /**
    * Constructs a new MessagingV1ServiceApi. 
    * @alias module:api/MessagingV1ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/MessagingV1ServiceApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [areaCodeGeomatch] Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/messaging/services#area-code-geomatch) on the Service Instance.
     * @param {module:model/String} [fallbackMethod] The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
     * @param {Boolean} [fallbackToLongCode] [OBSOLETE] Former feature used to fallback to long code sender after certain short code message failures.
     * @param {String} [fallbackUrl] The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.
     * @param {module:model/String} [inboundMethod] The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
     * @param {String} [inboundRequestUrl] The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.
     * @param {Boolean} [mmsConverter] Whether to enable the [MMS Converter](https://www.twilio.com/docs/messaging/services#mms-converter) for messages sent through the Service instance.
     * @param {module:model/ServiceEnumScanMessageContent} [scanMessageContent] 
     * @param {Boolean} [smartEncoding] Whether to enable [Smart Encoding](https://www.twilio.com/docs/messaging/services#smart-encoding) for messages sent through the Service instance.
     * @param {String} [statusCallback] The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.
     * @param {Boolean} [stickySender] Whether to enable [Sticky Sender](https://www.twilio.com/docs/messaging/services#sticky-sender) on the Service instance.
     * @param {Boolean} [synchronousValidation] Reserved.
     * @param {Boolean} [useInboundWebhookOnNumber] A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.
     * @param {String} [usecase] A string that describes the scenario in which the Messaging Service will be used. Possible values are `notifications`, `marketing`, `verification`, `discussion`, `poll`, `undeclared`.
     * @param {Number} [validityPeriod] How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.
     * @param {module:api/MessagingV1ServiceApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1Service}
     */
    createService(friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AreaCodeGeomatch': opts['areaCodeGeomatch'],
        'FallbackMethod': opts['fallbackMethod'],
        'FallbackToLongCode': opts['fallbackToLongCode'],
        'FallbackUrl': opts['fallbackUrl'],
        'FriendlyName': friendlyName,
        'InboundMethod': opts['inboundMethod'],
        'InboundRequestUrl': opts['inboundRequestUrl'],
        'MmsConverter': opts['mmsConverter'],
        'ScanMessageContent': opts['scanMessageContent'],
        'SmartEncoding': opts['smartEncoding'],
        'StatusCallback': opts['statusCallback'],
        'StickySender': opts['stickySender'],
        'SynchronousValidation': opts['synchronousValidation'],
        'UseInboundWebhookOnNumber': opts['useInboundWebhookOnNumber'],
        'Usecase': opts['usecase'],
        'ValidityPeriod': opts['validityPeriod']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1Service;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/MessagingV1ServiceApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Service resource to delete.
     * @param {module:api/MessagingV1ServiceApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchService operation.
     * @callback module:api/MessagingV1ServiceApi~fetchServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Service resource to fetch.
     * @param {module:api/MessagingV1ServiceApi~fetchServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1Service}
     */
    fetchService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1Service;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listService operation.
     * @callback module:api/MessagingV1ServiceApi~listServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MessagingV1ServiceApi~listServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceResponse}
     */
    listService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceResponse;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/MessagingV1ServiceApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Service resource to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [areaCodeGeomatch] Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/messaging/services#area-code-geomatch) on the Service Instance.
     * @param {module:model/String} [fallbackMethod] The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
     * @param {Boolean} [fallbackToLongCode] [OBSOLETE] Former feature used to fallback to long code sender after certain short code message failures.
     * @param {String} [fallbackUrl] The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {module:model/String} [inboundMethod] The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
     * @param {String} [inboundRequestUrl] The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.
     * @param {Boolean} [mmsConverter] Whether to enable the [MMS Converter](https://www.twilio.com/docs/messaging/services#mms-converter) for messages sent through the Service instance.
     * @param {module:model/ServiceEnumScanMessageContent} [scanMessageContent] 
     * @param {Boolean} [smartEncoding] Whether to enable [Smart Encoding](https://www.twilio.com/docs/messaging/services#smart-encoding) for messages sent through the Service instance.
     * @param {String} [statusCallback] The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.
     * @param {Boolean} [stickySender] Whether to enable [Sticky Sender](https://www.twilio.com/docs/messaging/services#sticky-sender) on the Service instance.
     * @param {Boolean} [synchronousValidation] Reserved.
     * @param {Boolean} [useInboundWebhookOnNumber] A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.
     * @param {String} [usecase] A string that describes the scenario in which the Messaging Service will be used. Possible values are `notifications`, `marketing`, `verification`, `discussion`, `poll`, `undeclared`.
     * @param {Number} [validityPeriod] How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.
     * @param {module:api/MessagingV1ServiceApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1Service}
     */
    updateService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AreaCodeGeomatch': opts['areaCodeGeomatch'],
        'FallbackMethod': opts['fallbackMethod'],
        'FallbackToLongCode': opts['fallbackToLongCode'],
        'FallbackUrl': opts['fallbackUrl'],
        'FriendlyName': opts['friendlyName'],
        'InboundMethod': opts['inboundMethod'],
        'InboundRequestUrl': opts['inboundRequestUrl'],
        'MmsConverter': opts['mmsConverter'],
        'ScanMessageContent': opts['scanMessageContent'],
        'SmartEncoding': opts['smartEncoding'],
        'StatusCallback': opts['statusCallback'],
        'StickySender': opts['stickySender'],
        'SynchronousValidation': opts['synchronousValidation'],
        'UseInboundWebhookOnNumber': opts['useInboundWebhookOnNumber'],
        'Usecase': opts['usecase'],
        'ValidityPeriod': opts['validityPeriod']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1Service;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
