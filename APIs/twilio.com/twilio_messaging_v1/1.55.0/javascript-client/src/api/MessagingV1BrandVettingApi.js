/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrandVettingEnumVettingProvider from '../model/BrandVettingEnumVettingProvider';
import ListBrandVettingResponse from '../model/ListBrandVettingResponse';
import MessagingV1BrandRegistrationsBrandVetting from '../model/MessagingV1BrandRegistrationsBrandVetting';

/**
* MessagingV1BrandVetting service.
* @module api/MessagingV1BrandVettingApi
* @version 1.55.0
*/
export default class MessagingV1BrandVettingApi {

    /**
    * Constructs a new MessagingV1BrandVettingApi. 
    * @alias module:api/MessagingV1BrandVettingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBrandVetting operation.
     * @callback module:api/MessagingV1BrandVettingApi~createBrandVettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1BrandRegistrationsBrandVetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} brandSid The SID of the Brand Registration resource of the vettings to create .
     * @param {module:model/BrandVettingEnumVettingProvider} vettingProvider 
     * @param {Object} opts Optional parameters
     * @param {String} [vettingId] The unique ID of the vetting
     * @param {module:api/MessagingV1BrandVettingApi~createBrandVettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1BrandRegistrationsBrandVetting}
     */
    createBrandVetting(brandSid, vettingProvider, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandSid' is set
      if (brandSid === undefined || brandSid === null) {
        throw new Error("Missing the required parameter 'brandSid' when calling createBrandVetting");
      }
      // verify the required parameter 'vettingProvider' is set
      if (vettingProvider === undefined || vettingProvider === null) {
        throw new Error("Missing the required parameter 'vettingProvider' when calling createBrandVetting");
      }

      let pathParams = {
        'BrandSid': brandSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'VettingId': opts['vettingId'],
        'VettingProvider': vettingProvider
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1BrandRegistrationsBrandVetting;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchBrandVetting operation.
     * @callback module:api/MessagingV1BrandVettingApi~fetchBrandVettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1BrandRegistrationsBrandVetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} brandSid The SID of the Brand Registration resource of the vettings to read .
     * @param {String} brandVettingSid The Twilio SID of the third-party vetting record.
     * @param {module:api/MessagingV1BrandVettingApi~fetchBrandVettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1BrandRegistrationsBrandVetting}
     */
    fetchBrandVetting(brandSid, brandVettingSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandSid' is set
      if (brandSid === undefined || brandSid === null) {
        throw new Error("Missing the required parameter 'brandSid' when calling fetchBrandVetting");
      }
      // verify the required parameter 'brandVettingSid' is set
      if (brandVettingSid === undefined || brandVettingSid === null) {
        throw new Error("Missing the required parameter 'brandVettingSid' when calling fetchBrandVetting");
      }

      let pathParams = {
        'BrandSid': brandSid,
        'BrandVettingSid': brandVettingSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1BrandRegistrationsBrandVetting;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrandVetting operation.
     * @callback module:api/MessagingV1BrandVettingApi~listBrandVettingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBrandVettingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} brandSid The SID of the Brand Registration resource of the vettings to read .
     * @param {Object} opts Optional parameters
     * @param {module:model/BrandVettingEnumVettingProvider} [vettingProvider] The third-party provider of the vettings to read
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MessagingV1BrandVettingApi~listBrandVettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBrandVettingResponse}
     */
    listBrandVetting(brandSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandSid' is set
      if (brandSid === undefined || brandSid === null) {
        throw new Error("Missing the required parameter 'brandSid' when calling listBrandVetting");
      }

      let pathParams = {
        'BrandSid': brandSid
      };
      let queryParams = {
        'VettingProvider': opts['vettingProvider'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBrandVettingResponse;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
