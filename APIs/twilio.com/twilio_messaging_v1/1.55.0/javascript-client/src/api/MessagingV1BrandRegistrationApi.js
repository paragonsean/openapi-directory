/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListBrandRegistrationsResponse from '../model/ListBrandRegistrationsResponse';
import MessagingV1BrandRegistrations from '../model/MessagingV1BrandRegistrations';

/**
* MessagingV1BrandRegistration service.
* @module api/MessagingV1BrandRegistrationApi
* @version 1.55.0
*/
export default class MessagingV1BrandRegistrationApi {

    /**
    * Constructs a new MessagingV1BrandRegistrationApi. 
    * @alias module:api/MessagingV1BrandRegistrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBrandRegistrations operation.
     * @callback module:api/MessagingV1BrandRegistrationApi~createBrandRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1BrandRegistrations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} a2PProfileBundleSid A2P Messaging Profile Bundle Sid.
     * @param {String} customerProfileBundleSid Customer Profile Bundle Sid.
     * @param {Object} opts Optional parameters
     * @param {String} [brandType] Type of brand being created. One of: \\\"STANDARD\\\", \\\"SOLE_PROPRIETOR\\\". SOLE_PROPRIETOR is for low volume, SOLE_PROPRIETOR use cases. STANDARD is for all other use cases.
     * @param {Boolean} [mock] A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
     * @param {Boolean} [skipAutomaticSecVet] A flag to disable automatic secondary vetting for brands which it would otherwise be done.
     * @param {module:api/MessagingV1BrandRegistrationApi~createBrandRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1BrandRegistrations}
     */
    createBrandRegistrations(a2PProfileBundleSid, customerProfileBundleSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'a2PProfileBundleSid' is set
      if (a2PProfileBundleSid === undefined || a2PProfileBundleSid === null) {
        throw new Error("Missing the required parameter 'a2PProfileBundleSid' when calling createBrandRegistrations");
      }
      // verify the required parameter 'customerProfileBundleSid' is set
      if (customerProfileBundleSid === undefined || customerProfileBundleSid === null) {
        throw new Error("Missing the required parameter 'customerProfileBundleSid' when calling createBrandRegistrations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'A2PProfileBundleSid': a2PProfileBundleSid,
        'BrandType': opts['brandType'],
        'CustomerProfileBundleSid': customerProfileBundleSid,
        'Mock': opts['mock'],
        'SkipAutomaticSecVet': opts['skipAutomaticSecVet']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MessagingV1BrandRegistrations;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchBrandRegistrations operation.
     * @callback module:api/MessagingV1BrandRegistrationApi~fetchBrandRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1BrandRegistrations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Brand Registration resource to fetch.
     * @param {module:api/MessagingV1BrandRegistrationApi~fetchBrandRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1BrandRegistrations}
     */
    fetchBrandRegistrations(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchBrandRegistrations");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1BrandRegistrations;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrandRegistrations operation.
     * @callback module:api/MessagingV1BrandRegistrationApi~listBrandRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBrandRegistrationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MessagingV1BrandRegistrationApi~listBrandRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBrandRegistrationsResponse}
     */
    listBrandRegistrations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBrandRegistrationsResponse;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrandRegistrations operation.
     * @callback module:api/MessagingV1BrandRegistrationApi~updateBrandRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingV1BrandRegistrations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Brand Registration resource to update.
     * @param {module:api/MessagingV1BrandRegistrationApi~updateBrandRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingV1BrandRegistrations}
     */
    updateBrandRegistrations(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateBrandRegistrations");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessagingV1BrandRegistrations;
      let basePaths = ['https://messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/a2p/BrandRegistrations/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
