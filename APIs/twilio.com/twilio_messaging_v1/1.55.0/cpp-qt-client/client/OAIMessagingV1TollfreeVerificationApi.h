/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagingV1TollfreeVerificationApi_H
#define OAI_OAIMessagingV1TollfreeVerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTollfreeVerificationResponse.h"
#include "OAIMessaging_v1_tollfree_verification.h"
#include "OAITollfree_verification_enum_opt_in_type.h"
#include "OAITollfree_verification_enum_status.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagingV1TollfreeVerificationApi : public QObject {
    Q_OBJECT

public:
    OAIMessagingV1TollfreeVerificationApi(const int timeOut = 0);
    ~OAIMessagingV1TollfreeVerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  business_name QString [required]
    * @param[in]  business_website QString [required]
    * @param[in]  message_volume QString [required]
    * @param[in]  notification_email QString [required]
    * @param[in]  opt_in_image_urls QList<QString> [required]
    * @param[in]  opt_in_type OAITollfree_verification_enum_opt_in_type [required]
    * @param[in]  production_message_sample QString [required]
    * @param[in]  tollfree_phone_number_sid QString [required]
    * @param[in]  use_case_categories QList<QString> [required]
    * @param[in]  use_case_summary QString [required]
    * @param[in]  additional_information QString [optional]
    * @param[in]  business_city QString [optional]
    * @param[in]  business_contact_email QString [optional]
    * @param[in]  business_contact_first_name QString [optional]
    * @param[in]  business_contact_last_name QString [optional]
    * @param[in]  business_contact_phone QString [optional]
    * @param[in]  business_country QString [optional]
    * @param[in]  business_postal_code QString [optional]
    * @param[in]  business_state_province_region QString [optional]
    * @param[in]  business_street_address QString [optional]
    * @param[in]  business_street_address2 QString [optional]
    * @param[in]  customer_profile_sid QString [optional]
    * @param[in]  external_reference_id QString [optional]
    */
    virtual void createTollfreeVerification(const QString &business_name, const QString &business_website, const QString &message_volume, const QString &notification_email, const QList<QString> &opt_in_image_urls, const OAITollfree_verification_enum_opt_in_type &opt_in_type, const QString &production_message_sample, const QString &tollfree_phone_number_sid, const QList<QString> &use_case_categories, const QString &use_case_summary, const ::OpenAPI::OptionalParam<QString> &additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_state_province_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_profile_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_reference_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteTollfreeVerification(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchTollfreeVerification(const QString &sid);

    /**
    * @param[in]  tollfree_phone_number_sid QString [optional]
    * @param[in]  status OAITollfree_verification_enum_status [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTollfreeVerification(const ::OpenAPI::OptionalParam<QString> &tollfree_phone_number_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITollfree_verification_enum_status> &status = ::OpenAPI::OptionalParam<OAITollfree_verification_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  additional_information QString [optional]
    * @param[in]  business_city QString [optional]
    * @param[in]  business_contact_email QString [optional]
    * @param[in]  business_contact_first_name QString [optional]
    * @param[in]  business_contact_last_name QString [optional]
    * @param[in]  business_contact_phone QString [optional]
    * @param[in]  business_country QString [optional]
    * @param[in]  business_name QString [optional]
    * @param[in]  business_postal_code QString [optional]
    * @param[in]  business_state_province_region QString [optional]
    * @param[in]  business_street_address QString [optional]
    * @param[in]  business_street_address2 QString [optional]
    * @param[in]  business_website QString [optional]
    * @param[in]  edit_reason QString [optional]
    * @param[in]  message_volume QString [optional]
    * @param[in]  notification_email QString [optional]
    * @param[in]  opt_in_image_urls QList<QString> [optional]
    * @param[in]  opt_in_type OAITollfree_verification_enum_opt_in_type [optional]
    * @param[in]  production_message_sample QString [optional]
    * @param[in]  use_case_categories QList<QString> [optional]
    * @param[in]  use_case_summary QString [optional]
    */
    virtual void updateTollfreeVerification(const QString &sid, const ::OpenAPI::OptionalParam<QString> &additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_state_province_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &edit_reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notification_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_in_image_urls = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAITollfree_verification_enum_opt_in_type> &opt_in_type = ::OpenAPI::OptionalParam<OAITollfree_verification_enum_opt_in_type>(), const ::OpenAPI::OptionalParam<QString> &production_message_sample = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &use_case_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &use_case_summary = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTollfreeVerificationCallback(OAIHttpRequestWorker *worker);
    void deleteTollfreeVerificationCallback(OAIHttpRequestWorker *worker);
    void fetchTollfreeVerificationCallback(OAIHttpRequestWorker *worker);
    void listTollfreeVerificationCallback(OAIHttpRequestWorker *worker);
    void updateTollfreeVerificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTollfreeVerificationSignal(OAIMessaging_v1_tollfree_verification summary);
    void deleteTollfreeVerificationSignal();
    void fetchTollfreeVerificationSignal(OAIMessaging_v1_tollfree_verification summary);
    void listTollfreeVerificationSignal(OAIListTollfreeVerificationResponse summary);
    void updateTollfreeVerificationSignal(OAIMessaging_v1_tollfree_verification summary);


    void createTollfreeVerificationSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_tollfree_verification summary);
    void deleteTollfreeVerificationSignalFull(OAIHttpRequestWorker *worker);
    void fetchTollfreeVerificationSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_tollfree_verification summary);
    void listTollfreeVerificationSignalFull(OAIHttpRequestWorker *worker, OAIListTollfreeVerificationResponse summary);
    void updateTollfreeVerificationSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_tollfree_verification summary);

    Q_DECL_DEPRECATED_X("Use createTollfreeVerificationSignalError() instead")
    void createTollfreeVerificationSignalE(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTollfreeVerificationSignalError(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTollfreeVerificationSignalError() instead")
    void deleteTollfreeVerificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTollfreeVerificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTollfreeVerificationSignalError() instead")
    void fetchTollfreeVerificationSignalE(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTollfreeVerificationSignalError(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTollfreeVerificationSignalError() instead")
    void listTollfreeVerificationSignalE(OAIListTollfreeVerificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTollfreeVerificationSignalError(OAIListTollfreeVerificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTollfreeVerificationSignalError() instead")
    void updateTollfreeVerificationSignalE(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTollfreeVerificationSignalError(OAIMessaging_v1_tollfree_verification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTollfreeVerificationSignalErrorFull() instead")
    void createTollfreeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTollfreeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTollfreeVerificationSignalErrorFull() instead")
    void deleteTollfreeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTollfreeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTollfreeVerificationSignalErrorFull() instead")
    void fetchTollfreeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTollfreeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTollfreeVerificationSignalErrorFull() instead")
    void listTollfreeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTollfreeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTollfreeVerificationSignalErrorFull() instead")
    void updateTollfreeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTollfreeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
