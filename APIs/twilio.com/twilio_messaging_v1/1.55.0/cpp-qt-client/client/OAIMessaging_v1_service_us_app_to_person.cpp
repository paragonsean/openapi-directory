/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_service_us_app_to_person.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_service_us_app_to_person::OAIMessaging_v1_service_us_app_to_person(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_service_us_app_to_person::OAIMessaging_v1_service_us_app_to_person() {
    this->initializeModel();
}

OAIMessaging_v1_service_us_app_to_person::~OAIMessaging_v1_service_us_app_to_person() {}

void OAIMessaging_v1_service_us_app_to_person::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_age_gated_isSet = false;
    m_age_gated_isValid = false;

    m_brand_registration_sid_isSet = false;
    m_brand_registration_sid_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_campaign_status_isSet = false;
    m_campaign_status_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direct_lending_isSet = false;
    m_direct_lending_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_has_embedded_links_isSet = false;
    m_has_embedded_links_isValid = false;

    m_has_embedded_phone_isSet = false;
    m_has_embedded_phone_isValid = false;

    m_help_keywords_isSet = false;
    m_help_keywords_isValid = false;

    m_help_message_isSet = false;
    m_help_message_isValid = false;

    m_is_externally_registered_isSet = false;
    m_is_externally_registered_isValid = false;

    m_message_flow_isSet = false;
    m_message_flow_isValid = false;

    m_message_samples_isSet = false;
    m_message_samples_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_mock_isSet = false;
    m_mock_isValid = false;

    m_opt_in_keywords_isSet = false;
    m_opt_in_keywords_isValid = false;

    m_opt_in_message_isSet = false;
    m_opt_in_message_isValid = false;

    m_opt_out_keywords_isSet = false;
    m_opt_out_keywords_isValid = false;

    m_opt_out_message_isSet = false;
    m_opt_out_message_isValid = false;

    m_rate_limits_isSet = false;
    m_rate_limits_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_subscriber_opt_in_isSet = false;
    m_subscriber_opt_in_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_us_app_to_person_usecase_isSet = false;
    m_us_app_to_person_usecase_isValid = false;
}

void OAIMessaging_v1_service_us_app_to_person::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_service_us_app_to_person::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_age_gated_isValid = ::OpenAPI::fromJsonValue(m_age_gated, json[QString("age_gated")]);
    m_age_gated_isSet = !json[QString("age_gated")].isNull() && m_age_gated_isValid;

    m_brand_registration_sid_isValid = ::OpenAPI::fromJsonValue(m_brand_registration_sid, json[QString("brand_registration_sid")]);
    m_brand_registration_sid_isSet = !json[QString("brand_registration_sid")].isNull() && m_brand_registration_sid_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_campaign_status_isValid = ::OpenAPI::fromJsonValue(m_campaign_status, json[QString("campaign_status")]);
    m_campaign_status_isSet = !json[QString("campaign_status")].isNull() && m_campaign_status_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direct_lending_isValid = ::OpenAPI::fromJsonValue(m_direct_lending, json[QString("direct_lending")]);
    m_direct_lending_isSet = !json[QString("direct_lending")].isNull() && m_direct_lending_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_has_embedded_links_isValid = ::OpenAPI::fromJsonValue(m_has_embedded_links, json[QString("has_embedded_links")]);
    m_has_embedded_links_isSet = !json[QString("has_embedded_links")].isNull() && m_has_embedded_links_isValid;

    m_has_embedded_phone_isValid = ::OpenAPI::fromJsonValue(m_has_embedded_phone, json[QString("has_embedded_phone")]);
    m_has_embedded_phone_isSet = !json[QString("has_embedded_phone")].isNull() && m_has_embedded_phone_isValid;

    m_help_keywords_isValid = ::OpenAPI::fromJsonValue(m_help_keywords, json[QString("help_keywords")]);
    m_help_keywords_isSet = !json[QString("help_keywords")].isNull() && m_help_keywords_isValid;

    m_help_message_isValid = ::OpenAPI::fromJsonValue(m_help_message, json[QString("help_message")]);
    m_help_message_isSet = !json[QString("help_message")].isNull() && m_help_message_isValid;

    m_is_externally_registered_isValid = ::OpenAPI::fromJsonValue(m_is_externally_registered, json[QString("is_externally_registered")]);
    m_is_externally_registered_isSet = !json[QString("is_externally_registered")].isNull() && m_is_externally_registered_isValid;

    m_message_flow_isValid = ::OpenAPI::fromJsonValue(m_message_flow, json[QString("message_flow")]);
    m_message_flow_isSet = !json[QString("message_flow")].isNull() && m_message_flow_isValid;

    m_message_samples_isValid = ::OpenAPI::fromJsonValue(m_message_samples, json[QString("message_samples")]);
    m_message_samples_isSet = !json[QString("message_samples")].isNull() && m_message_samples_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_mock_isValid = ::OpenAPI::fromJsonValue(m_mock, json[QString("mock")]);
    m_mock_isSet = !json[QString("mock")].isNull() && m_mock_isValid;

    m_opt_in_keywords_isValid = ::OpenAPI::fromJsonValue(m_opt_in_keywords, json[QString("opt_in_keywords")]);
    m_opt_in_keywords_isSet = !json[QString("opt_in_keywords")].isNull() && m_opt_in_keywords_isValid;

    m_opt_in_message_isValid = ::OpenAPI::fromJsonValue(m_opt_in_message, json[QString("opt_in_message")]);
    m_opt_in_message_isSet = !json[QString("opt_in_message")].isNull() && m_opt_in_message_isValid;

    m_opt_out_keywords_isValid = ::OpenAPI::fromJsonValue(m_opt_out_keywords, json[QString("opt_out_keywords")]);
    m_opt_out_keywords_isSet = !json[QString("opt_out_keywords")].isNull() && m_opt_out_keywords_isValid;

    m_opt_out_message_isValid = ::OpenAPI::fromJsonValue(m_opt_out_message, json[QString("opt_out_message")]);
    m_opt_out_message_isSet = !json[QString("opt_out_message")].isNull() && m_opt_out_message_isValid;

    m_rate_limits_isValid = ::OpenAPI::fromJsonValue(m_rate_limits, json[QString("rate_limits")]);
    m_rate_limits_isSet = !json[QString("rate_limits")].isNull() && m_rate_limits_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_subscriber_opt_in_isValid = ::OpenAPI::fromJsonValue(m_subscriber_opt_in, json[QString("subscriber_opt_in")]);
    m_subscriber_opt_in_isSet = !json[QString("subscriber_opt_in")].isNull() && m_subscriber_opt_in_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_us_app_to_person_usecase_isValid = ::OpenAPI::fromJsonValue(m_us_app_to_person_usecase, json[QString("us_app_to_person_usecase")]);
    m_us_app_to_person_usecase_isSet = !json[QString("us_app_to_person_usecase")].isNull() && m_us_app_to_person_usecase_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_service_us_app_to_person::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_age_gated_isSet) {
        obj.insert(QString("age_gated"), ::OpenAPI::toJsonValue(m_age_gated));
    }
    if (m_brand_registration_sid_isSet) {
        obj.insert(QString("brand_registration_sid"), ::OpenAPI::toJsonValue(m_brand_registration_sid));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_campaign_status_isSet) {
        obj.insert(QString("campaign_status"), ::OpenAPI::toJsonValue(m_campaign_status));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direct_lending_isSet) {
        obj.insert(QString("direct_lending"), ::OpenAPI::toJsonValue(m_direct_lending));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_has_embedded_links_isSet) {
        obj.insert(QString("has_embedded_links"), ::OpenAPI::toJsonValue(m_has_embedded_links));
    }
    if (m_has_embedded_phone_isSet) {
        obj.insert(QString("has_embedded_phone"), ::OpenAPI::toJsonValue(m_has_embedded_phone));
    }
    if (m_help_keywords.size() > 0) {
        obj.insert(QString("help_keywords"), ::OpenAPI::toJsonValue(m_help_keywords));
    }
    if (m_help_message_isSet) {
        obj.insert(QString("help_message"), ::OpenAPI::toJsonValue(m_help_message));
    }
    if (m_is_externally_registered_isSet) {
        obj.insert(QString("is_externally_registered"), ::OpenAPI::toJsonValue(m_is_externally_registered));
    }
    if (m_message_flow_isSet) {
        obj.insert(QString("message_flow"), ::OpenAPI::toJsonValue(m_message_flow));
    }
    if (m_message_samples.size() > 0) {
        obj.insert(QString("message_samples"), ::OpenAPI::toJsonValue(m_message_samples));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_mock_isSet) {
        obj.insert(QString("mock"), ::OpenAPI::toJsonValue(m_mock));
    }
    if (m_opt_in_keywords.size() > 0) {
        obj.insert(QString("opt_in_keywords"), ::OpenAPI::toJsonValue(m_opt_in_keywords));
    }
    if (m_opt_in_message_isSet) {
        obj.insert(QString("opt_in_message"), ::OpenAPI::toJsonValue(m_opt_in_message));
    }
    if (m_opt_out_keywords.size() > 0) {
        obj.insert(QString("opt_out_keywords"), ::OpenAPI::toJsonValue(m_opt_out_keywords));
    }
    if (m_opt_out_message_isSet) {
        obj.insert(QString("opt_out_message"), ::OpenAPI::toJsonValue(m_opt_out_message));
    }
    if (m_rate_limits_isSet) {
        obj.insert(QString("rate_limits"), ::OpenAPI::toJsonValue(m_rate_limits));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_subscriber_opt_in_isSet) {
        obj.insert(QString("subscriber_opt_in"), ::OpenAPI::toJsonValue(m_subscriber_opt_in));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_us_app_to_person_usecase_isSet) {
        obj.insert(QString("us_app_to_person_usecase"), ::OpenAPI::toJsonValue(m_us_app_to_person_usecase));
    }
    return obj;
}

QString OAIMessaging_v1_service_us_app_to_person::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_service_us_app_to_person::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isAgeGated() const {
    return m_age_gated;
}
void OAIMessaging_v1_service_us_app_to_person::setAgeGated(const bool &age_gated) {
    m_age_gated = age_gated;
    m_age_gated_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_age_gated_Set() const{
    return m_age_gated_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_age_gated_Valid() const{
    return m_age_gated_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getBrandRegistrationSid() const {
    return m_brand_registration_sid;
}
void OAIMessaging_v1_service_us_app_to_person::setBrandRegistrationSid(const QString &brand_registration_sid) {
    m_brand_registration_sid = brand_registration_sid;
    m_brand_registration_sid_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_brand_registration_sid_Set() const{
    return m_brand_registration_sid_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_brand_registration_sid_Valid() const{
    return m_brand_registration_sid_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getCampaignId() const {
    return m_campaign_id;
}
void OAIMessaging_v1_service_us_app_to_person::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getCampaignStatus() const {
    return m_campaign_status;
}
void OAIMessaging_v1_service_us_app_to_person::setCampaignStatus(const QString &campaign_status) {
    m_campaign_status = campaign_status;
    m_campaign_status_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_campaign_status_Set() const{
    return m_campaign_status_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_campaign_status_Valid() const{
    return m_campaign_status_isValid;
}

QDateTime OAIMessaging_v1_service_us_app_to_person::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_service_us_app_to_person::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_service_us_app_to_person::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_service_us_app_to_person::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getDescription() const {
    return m_description;
}
void OAIMessaging_v1_service_us_app_to_person::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isDirectLending() const {
    return m_direct_lending;
}
void OAIMessaging_v1_service_us_app_to_person::setDirectLending(const bool &direct_lending) {
    m_direct_lending = direct_lending;
    m_direct_lending_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_direct_lending_Set() const{
    return m_direct_lending_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_direct_lending_Valid() const{
    return m_direct_lending_isValid;
}

QList<QJsonValue> OAIMessaging_v1_service_us_app_to_person::getErrors() const {
    return m_errors;
}
void OAIMessaging_v1_service_us_app_to_person::setErrors(const QList<QJsonValue> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isHasEmbeddedLinks() const {
    return m_has_embedded_links;
}
void OAIMessaging_v1_service_us_app_to_person::setHasEmbeddedLinks(const bool &has_embedded_links) {
    m_has_embedded_links = has_embedded_links;
    m_has_embedded_links_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_has_embedded_links_Set() const{
    return m_has_embedded_links_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_has_embedded_links_Valid() const{
    return m_has_embedded_links_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isHasEmbeddedPhone() const {
    return m_has_embedded_phone;
}
void OAIMessaging_v1_service_us_app_to_person::setHasEmbeddedPhone(const bool &has_embedded_phone) {
    m_has_embedded_phone = has_embedded_phone;
    m_has_embedded_phone_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_has_embedded_phone_Set() const{
    return m_has_embedded_phone_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_has_embedded_phone_Valid() const{
    return m_has_embedded_phone_isValid;
}

QList<QString> OAIMessaging_v1_service_us_app_to_person::getHelpKeywords() const {
    return m_help_keywords;
}
void OAIMessaging_v1_service_us_app_to_person::setHelpKeywords(const QList<QString> &help_keywords) {
    m_help_keywords = help_keywords;
    m_help_keywords_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_help_keywords_Set() const{
    return m_help_keywords_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_help_keywords_Valid() const{
    return m_help_keywords_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getHelpMessage() const {
    return m_help_message;
}
void OAIMessaging_v1_service_us_app_to_person::setHelpMessage(const QString &help_message) {
    m_help_message = help_message;
    m_help_message_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_help_message_Set() const{
    return m_help_message_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_help_message_Valid() const{
    return m_help_message_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isIsExternallyRegistered() const {
    return m_is_externally_registered;
}
void OAIMessaging_v1_service_us_app_to_person::setIsExternallyRegistered(const bool &is_externally_registered) {
    m_is_externally_registered = is_externally_registered;
    m_is_externally_registered_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_is_externally_registered_Set() const{
    return m_is_externally_registered_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_is_externally_registered_Valid() const{
    return m_is_externally_registered_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getMessageFlow() const {
    return m_message_flow;
}
void OAIMessaging_v1_service_us_app_to_person::setMessageFlow(const QString &message_flow) {
    m_message_flow = message_flow;
    m_message_flow_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_message_flow_Set() const{
    return m_message_flow_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_message_flow_Valid() const{
    return m_message_flow_isValid;
}

QList<QString> OAIMessaging_v1_service_us_app_to_person::getMessageSamples() const {
    return m_message_samples;
}
void OAIMessaging_v1_service_us_app_to_person::setMessageSamples(const QList<QString> &message_samples) {
    m_message_samples = message_samples;
    m_message_samples_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_message_samples_Set() const{
    return m_message_samples_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_message_samples_Valid() const{
    return m_message_samples_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAIMessaging_v1_service_us_app_to_person::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isMock() const {
    return m_mock;
}
void OAIMessaging_v1_service_us_app_to_person::setMock(const bool &mock) {
    m_mock = mock;
    m_mock_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_mock_Set() const{
    return m_mock_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_mock_Valid() const{
    return m_mock_isValid;
}

QList<QString> OAIMessaging_v1_service_us_app_to_person::getOptInKeywords() const {
    return m_opt_in_keywords;
}
void OAIMessaging_v1_service_us_app_to_person::setOptInKeywords(const QList<QString> &opt_in_keywords) {
    m_opt_in_keywords = opt_in_keywords;
    m_opt_in_keywords_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_in_keywords_Set() const{
    return m_opt_in_keywords_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_in_keywords_Valid() const{
    return m_opt_in_keywords_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getOptInMessage() const {
    return m_opt_in_message;
}
void OAIMessaging_v1_service_us_app_to_person::setOptInMessage(const QString &opt_in_message) {
    m_opt_in_message = opt_in_message;
    m_opt_in_message_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_in_message_Set() const{
    return m_opt_in_message_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_in_message_Valid() const{
    return m_opt_in_message_isValid;
}

QList<QString> OAIMessaging_v1_service_us_app_to_person::getOptOutKeywords() const {
    return m_opt_out_keywords;
}
void OAIMessaging_v1_service_us_app_to_person::setOptOutKeywords(const QList<QString> &opt_out_keywords) {
    m_opt_out_keywords = opt_out_keywords;
    m_opt_out_keywords_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_out_keywords_Set() const{
    return m_opt_out_keywords_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_out_keywords_Valid() const{
    return m_opt_out_keywords_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getOptOutMessage() const {
    return m_opt_out_message;
}
void OAIMessaging_v1_service_us_app_to_person::setOptOutMessage(const QString &opt_out_message) {
    m_opt_out_message = opt_out_message;
    m_opt_out_message_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_out_message_Set() const{
    return m_opt_out_message_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_opt_out_message_Valid() const{
    return m_opt_out_message_isValid;
}

QJsonValue OAIMessaging_v1_service_us_app_to_person::getRateLimits() const {
    return m_rate_limits;
}
void OAIMessaging_v1_service_us_app_to_person::setRateLimits(const QJsonValue &rate_limits) {
    m_rate_limits = rate_limits;
    m_rate_limits_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_rate_limits_Set() const{
    return m_rate_limits_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_rate_limits_Valid() const{
    return m_rate_limits_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getSid() const {
    return m_sid;
}
void OAIMessaging_v1_service_us_app_to_person::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isSubscriberOptIn() const {
    return m_subscriber_opt_in;
}
void OAIMessaging_v1_service_us_app_to_person::setSubscriberOptIn(const bool &subscriber_opt_in) {
    m_subscriber_opt_in = subscriber_opt_in;
    m_subscriber_opt_in_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_subscriber_opt_in_Set() const{
    return m_subscriber_opt_in_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_subscriber_opt_in_Valid() const{
    return m_subscriber_opt_in_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_service_us_app_to_person::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMessaging_v1_service_us_app_to_person::getUsAppToPersonUsecase() const {
    return m_us_app_to_person_usecase;
}
void OAIMessaging_v1_service_us_app_to_person::setUsAppToPersonUsecase(const QString &us_app_to_person_usecase) {
    m_us_app_to_person_usecase = us_app_to_person_usecase;
    m_us_app_to_person_usecase_isSet = true;
}

bool OAIMessaging_v1_service_us_app_to_person::is_us_app_to_person_usecase_Set() const{
    return m_us_app_to_person_usecase_isSet;
}

bool OAIMessaging_v1_service_us_app_to_person::is_us_app_to_person_usecase_Valid() const{
    return m_us_app_to_person_usecase_isValid;
}

bool OAIMessaging_v1_service_us_app_to_person::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_gated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_registration_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_lending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_embedded_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_embedded_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_externally_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_opt_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_us_app_to_person_usecase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_service_us_app_to_person::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
