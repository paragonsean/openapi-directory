/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_external_campaign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_external_campaign::OAIMessaging_v1_external_campaign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_external_campaign::OAIMessaging_v1_external_campaign() {
    this->initializeModel();
}

OAIMessaging_v1_external_campaign::~OAIMessaging_v1_external_campaign() {}

void OAIMessaging_v1_external_campaign::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;
}

void OAIMessaging_v1_external_campaign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_external_campaign::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;
}

QString OAIMessaging_v1_external_campaign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_external_campaign::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    return obj;
}

QString OAIMessaging_v1_external_campaign::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_external_campaign::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_external_campaign::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_external_campaign::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIMessaging_v1_external_campaign::getCampaignId() const {
    return m_campaign_id;
}
void OAIMessaging_v1_external_campaign::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIMessaging_v1_external_campaign::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIMessaging_v1_external_campaign::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QDateTime OAIMessaging_v1_external_campaign::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_external_campaign::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_external_campaign::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_external_campaign::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIMessaging_v1_external_campaign::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAIMessaging_v1_external_campaign::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAIMessaging_v1_external_campaign::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAIMessaging_v1_external_campaign::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

QString OAIMessaging_v1_external_campaign::getSid() const {
    return m_sid;
}
void OAIMessaging_v1_external_campaign::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMessaging_v1_external_campaign::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMessaging_v1_external_campaign::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIMessaging_v1_external_campaign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_external_campaign::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
