/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_service::OAIMessaging_v1_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_service::OAIMessaging_v1_service() {
    this->initializeModel();
}

OAIMessaging_v1_service::~OAIMessaging_v1_service() {}

void OAIMessaging_v1_service::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_area_code_geomatch_isSet = false;
    m_area_code_geomatch_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_fallback_method_isSet = false;
    m_fallback_method_isValid = false;

    m_fallback_to_long_code_isSet = false;
    m_fallback_to_long_code_isValid = false;

    m_fallback_url_isSet = false;
    m_fallback_url_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_inbound_method_isSet = false;
    m_inbound_method_isValid = false;

    m_inbound_request_url_isSet = false;
    m_inbound_request_url_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mms_converter_isSet = false;
    m_mms_converter_isValid = false;

    m_scan_message_content_isSet = false;
    m_scan_message_content_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_smart_encoding_isSet = false;
    m_smart_encoding_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_sticky_sender_isSet = false;
    m_sticky_sender_isValid = false;

    m_synchronous_validation_isSet = false;
    m_synchronous_validation_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_us_app_to_person_registered_isSet = false;
    m_us_app_to_person_registered_isValid = false;

    m_use_inbound_webhook_on_number_isSet = false;
    m_use_inbound_webhook_on_number_isValid = false;

    m_usecase_isSet = false;
    m_usecase_isValid = false;

    m_validity_period_isSet = false;
    m_validity_period_isValid = false;
}

void OAIMessaging_v1_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_service::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_area_code_geomatch_isValid = ::OpenAPI::fromJsonValue(m_area_code_geomatch, json[QString("area_code_geomatch")]);
    m_area_code_geomatch_isSet = !json[QString("area_code_geomatch")].isNull() && m_area_code_geomatch_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_fallback_method_isValid = ::OpenAPI::fromJsonValue(m_fallback_method, json[QString("fallback_method")]);
    m_fallback_method_isSet = !json[QString("fallback_method")].isNull() && m_fallback_method_isValid;

    m_fallback_to_long_code_isValid = ::OpenAPI::fromJsonValue(m_fallback_to_long_code, json[QString("fallback_to_long_code")]);
    m_fallback_to_long_code_isSet = !json[QString("fallback_to_long_code")].isNull() && m_fallback_to_long_code_isValid;

    m_fallback_url_isValid = ::OpenAPI::fromJsonValue(m_fallback_url, json[QString("fallback_url")]);
    m_fallback_url_isSet = !json[QString("fallback_url")].isNull() && m_fallback_url_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_inbound_method_isValid = ::OpenAPI::fromJsonValue(m_inbound_method, json[QString("inbound_method")]);
    m_inbound_method_isSet = !json[QString("inbound_method")].isNull() && m_inbound_method_isValid;

    m_inbound_request_url_isValid = ::OpenAPI::fromJsonValue(m_inbound_request_url, json[QString("inbound_request_url")]);
    m_inbound_request_url_isSet = !json[QString("inbound_request_url")].isNull() && m_inbound_request_url_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mms_converter_isValid = ::OpenAPI::fromJsonValue(m_mms_converter, json[QString("mms_converter")]);
    m_mms_converter_isSet = !json[QString("mms_converter")].isNull() && m_mms_converter_isValid;

    m_scan_message_content_isValid = ::OpenAPI::fromJsonValue(m_scan_message_content, json[QString("scan_message_content")]);
    m_scan_message_content_isSet = !json[QString("scan_message_content")].isNull() && m_scan_message_content_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_smart_encoding_isValid = ::OpenAPI::fromJsonValue(m_smart_encoding, json[QString("smart_encoding")]);
    m_smart_encoding_isSet = !json[QString("smart_encoding")].isNull() && m_smart_encoding_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_sticky_sender_isValid = ::OpenAPI::fromJsonValue(m_sticky_sender, json[QString("sticky_sender")]);
    m_sticky_sender_isSet = !json[QString("sticky_sender")].isNull() && m_sticky_sender_isValid;

    m_synchronous_validation_isValid = ::OpenAPI::fromJsonValue(m_synchronous_validation, json[QString("synchronous_validation")]);
    m_synchronous_validation_isSet = !json[QString("synchronous_validation")].isNull() && m_synchronous_validation_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_us_app_to_person_registered_isValid = ::OpenAPI::fromJsonValue(m_us_app_to_person_registered, json[QString("us_app_to_person_registered")]);
    m_us_app_to_person_registered_isSet = !json[QString("us_app_to_person_registered")].isNull() && m_us_app_to_person_registered_isValid;

    m_use_inbound_webhook_on_number_isValid = ::OpenAPI::fromJsonValue(m_use_inbound_webhook_on_number, json[QString("use_inbound_webhook_on_number")]);
    m_use_inbound_webhook_on_number_isSet = !json[QString("use_inbound_webhook_on_number")].isNull() && m_use_inbound_webhook_on_number_isValid;

    m_usecase_isValid = ::OpenAPI::fromJsonValue(m_usecase, json[QString("usecase")]);
    m_usecase_isSet = !json[QString("usecase")].isNull() && m_usecase_isValid;

    m_validity_period_isValid = ::OpenAPI::fromJsonValue(m_validity_period, json[QString("validity_period")]);
    m_validity_period_isSet = !json[QString("validity_period")].isNull() && m_validity_period_isValid;
}

QString OAIMessaging_v1_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_service::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_area_code_geomatch_isSet) {
        obj.insert(QString("area_code_geomatch"), ::OpenAPI::toJsonValue(m_area_code_geomatch));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_fallback_method_isSet) {
        obj.insert(QString("fallback_method"), ::OpenAPI::toJsonValue(m_fallback_method));
    }
    if (m_fallback_to_long_code_isSet) {
        obj.insert(QString("fallback_to_long_code"), ::OpenAPI::toJsonValue(m_fallback_to_long_code));
    }
    if (m_fallback_url_isSet) {
        obj.insert(QString("fallback_url"), ::OpenAPI::toJsonValue(m_fallback_url));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_inbound_method_isSet) {
        obj.insert(QString("inbound_method"), ::OpenAPI::toJsonValue(m_inbound_method));
    }
    if (m_inbound_request_url_isSet) {
        obj.insert(QString("inbound_request_url"), ::OpenAPI::toJsonValue(m_inbound_request_url));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mms_converter_isSet) {
        obj.insert(QString("mms_converter"), ::OpenAPI::toJsonValue(m_mms_converter));
    }
    if (m_scan_message_content.isSet()) {
        obj.insert(QString("scan_message_content"), ::OpenAPI::toJsonValue(m_scan_message_content));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_smart_encoding_isSet) {
        obj.insert(QString("smart_encoding"), ::OpenAPI::toJsonValue(m_smart_encoding));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_sticky_sender_isSet) {
        obj.insert(QString("sticky_sender"), ::OpenAPI::toJsonValue(m_sticky_sender));
    }
    if (m_synchronous_validation_isSet) {
        obj.insert(QString("synchronous_validation"), ::OpenAPI::toJsonValue(m_synchronous_validation));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_us_app_to_person_registered_isSet) {
        obj.insert(QString("us_app_to_person_registered"), ::OpenAPI::toJsonValue(m_us_app_to_person_registered));
    }
    if (m_use_inbound_webhook_on_number_isSet) {
        obj.insert(QString("use_inbound_webhook_on_number"), ::OpenAPI::toJsonValue(m_use_inbound_webhook_on_number));
    }
    if (m_usecase_isSet) {
        obj.insert(QString("usecase"), ::OpenAPI::toJsonValue(m_usecase));
    }
    if (m_validity_period_isSet) {
        obj.insert(QString("validity_period"), ::OpenAPI::toJsonValue(m_validity_period));
    }
    return obj;
}

QString OAIMessaging_v1_service::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_service::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_service::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_service::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIMessaging_v1_service::isAreaCodeGeomatch() const {
    return m_area_code_geomatch;
}
void OAIMessaging_v1_service::setAreaCodeGeomatch(const bool &area_code_geomatch) {
    m_area_code_geomatch = area_code_geomatch;
    m_area_code_geomatch_isSet = true;
}

bool OAIMessaging_v1_service::is_area_code_geomatch_Set() const{
    return m_area_code_geomatch_isSet;
}

bool OAIMessaging_v1_service::is_area_code_geomatch_Valid() const{
    return m_area_code_geomatch_isValid;
}

QDateTime OAIMessaging_v1_service::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_service::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_service::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_service::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_service::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_service::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_service::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_service::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIMessaging_v1_service::getFallbackMethod() const {
    return m_fallback_method;
}
void OAIMessaging_v1_service::setFallbackMethod(const QString &fallback_method) {
    m_fallback_method = fallback_method;
    m_fallback_method_isSet = true;
}

bool OAIMessaging_v1_service::is_fallback_method_Set() const{
    return m_fallback_method_isSet;
}

bool OAIMessaging_v1_service::is_fallback_method_Valid() const{
    return m_fallback_method_isValid;
}

bool OAIMessaging_v1_service::isFallbackToLongCode() const {
    return m_fallback_to_long_code;
}
void OAIMessaging_v1_service::setFallbackToLongCode(const bool &fallback_to_long_code) {
    m_fallback_to_long_code = fallback_to_long_code;
    m_fallback_to_long_code_isSet = true;
}

bool OAIMessaging_v1_service::is_fallback_to_long_code_Set() const{
    return m_fallback_to_long_code_isSet;
}

bool OAIMessaging_v1_service::is_fallback_to_long_code_Valid() const{
    return m_fallback_to_long_code_isValid;
}

QString OAIMessaging_v1_service::getFallbackUrl() const {
    return m_fallback_url;
}
void OAIMessaging_v1_service::setFallbackUrl(const QString &fallback_url) {
    m_fallback_url = fallback_url;
    m_fallback_url_isSet = true;
}

bool OAIMessaging_v1_service::is_fallback_url_Set() const{
    return m_fallback_url_isSet;
}

bool OAIMessaging_v1_service::is_fallback_url_Valid() const{
    return m_fallback_url_isValid;
}

QString OAIMessaging_v1_service::getFriendlyName() const {
    return m_friendly_name;
}
void OAIMessaging_v1_service::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIMessaging_v1_service::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIMessaging_v1_service::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIMessaging_v1_service::getInboundMethod() const {
    return m_inbound_method;
}
void OAIMessaging_v1_service::setInboundMethod(const QString &inbound_method) {
    m_inbound_method = inbound_method;
    m_inbound_method_isSet = true;
}

bool OAIMessaging_v1_service::is_inbound_method_Set() const{
    return m_inbound_method_isSet;
}

bool OAIMessaging_v1_service::is_inbound_method_Valid() const{
    return m_inbound_method_isValid;
}

QString OAIMessaging_v1_service::getInboundRequestUrl() const {
    return m_inbound_request_url;
}
void OAIMessaging_v1_service::setInboundRequestUrl(const QString &inbound_request_url) {
    m_inbound_request_url = inbound_request_url;
    m_inbound_request_url_isSet = true;
}

bool OAIMessaging_v1_service::is_inbound_request_url_Set() const{
    return m_inbound_request_url_isSet;
}

bool OAIMessaging_v1_service::is_inbound_request_url_Valid() const{
    return m_inbound_request_url_isValid;
}

OAIObject OAIMessaging_v1_service::getLinks() const {
    return m_links;
}
void OAIMessaging_v1_service::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMessaging_v1_service::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMessaging_v1_service::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIMessaging_v1_service::isMmsConverter() const {
    return m_mms_converter;
}
void OAIMessaging_v1_service::setMmsConverter(const bool &mms_converter) {
    m_mms_converter = mms_converter;
    m_mms_converter_isSet = true;
}

bool OAIMessaging_v1_service::is_mms_converter_Set() const{
    return m_mms_converter_isSet;
}

bool OAIMessaging_v1_service::is_mms_converter_Valid() const{
    return m_mms_converter_isValid;
}

OAIService_enum_scan_message_content OAIMessaging_v1_service::getScanMessageContent() const {
    return m_scan_message_content;
}
void OAIMessaging_v1_service::setScanMessageContent(const OAIService_enum_scan_message_content &scan_message_content) {
    m_scan_message_content = scan_message_content;
    m_scan_message_content_isSet = true;
}

bool OAIMessaging_v1_service::is_scan_message_content_Set() const{
    return m_scan_message_content_isSet;
}

bool OAIMessaging_v1_service::is_scan_message_content_Valid() const{
    return m_scan_message_content_isValid;
}

QString OAIMessaging_v1_service::getSid() const {
    return m_sid;
}
void OAIMessaging_v1_service::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMessaging_v1_service::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMessaging_v1_service::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIMessaging_v1_service::isSmartEncoding() const {
    return m_smart_encoding;
}
void OAIMessaging_v1_service::setSmartEncoding(const bool &smart_encoding) {
    m_smart_encoding = smart_encoding;
    m_smart_encoding_isSet = true;
}

bool OAIMessaging_v1_service::is_smart_encoding_Set() const{
    return m_smart_encoding_isSet;
}

bool OAIMessaging_v1_service::is_smart_encoding_Valid() const{
    return m_smart_encoding_isValid;
}

QString OAIMessaging_v1_service::getStatusCallback() const {
    return m_status_callback;
}
void OAIMessaging_v1_service::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIMessaging_v1_service::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIMessaging_v1_service::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

bool OAIMessaging_v1_service::isStickySender() const {
    return m_sticky_sender;
}
void OAIMessaging_v1_service::setStickySender(const bool &sticky_sender) {
    m_sticky_sender = sticky_sender;
    m_sticky_sender_isSet = true;
}

bool OAIMessaging_v1_service::is_sticky_sender_Set() const{
    return m_sticky_sender_isSet;
}

bool OAIMessaging_v1_service::is_sticky_sender_Valid() const{
    return m_sticky_sender_isValid;
}

bool OAIMessaging_v1_service::isSynchronousValidation() const {
    return m_synchronous_validation;
}
void OAIMessaging_v1_service::setSynchronousValidation(const bool &synchronous_validation) {
    m_synchronous_validation = synchronous_validation;
    m_synchronous_validation_isSet = true;
}

bool OAIMessaging_v1_service::is_synchronous_validation_Set() const{
    return m_synchronous_validation_isSet;
}

bool OAIMessaging_v1_service::is_synchronous_validation_Valid() const{
    return m_synchronous_validation_isValid;
}

QString OAIMessaging_v1_service::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_service::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_service::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_service::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMessaging_v1_service::isUsAppToPersonRegistered() const {
    return m_us_app_to_person_registered;
}
void OAIMessaging_v1_service::setUsAppToPersonRegistered(const bool &us_app_to_person_registered) {
    m_us_app_to_person_registered = us_app_to_person_registered;
    m_us_app_to_person_registered_isSet = true;
}

bool OAIMessaging_v1_service::is_us_app_to_person_registered_Set() const{
    return m_us_app_to_person_registered_isSet;
}

bool OAIMessaging_v1_service::is_us_app_to_person_registered_Valid() const{
    return m_us_app_to_person_registered_isValid;
}

bool OAIMessaging_v1_service::isUseInboundWebhookOnNumber() const {
    return m_use_inbound_webhook_on_number;
}
void OAIMessaging_v1_service::setUseInboundWebhookOnNumber(const bool &use_inbound_webhook_on_number) {
    m_use_inbound_webhook_on_number = use_inbound_webhook_on_number;
    m_use_inbound_webhook_on_number_isSet = true;
}

bool OAIMessaging_v1_service::is_use_inbound_webhook_on_number_Set() const{
    return m_use_inbound_webhook_on_number_isSet;
}

bool OAIMessaging_v1_service::is_use_inbound_webhook_on_number_Valid() const{
    return m_use_inbound_webhook_on_number_isValid;
}

QString OAIMessaging_v1_service::getUsecase() const {
    return m_usecase;
}
void OAIMessaging_v1_service::setUsecase(const QString &usecase) {
    m_usecase = usecase;
    m_usecase_isSet = true;
}

bool OAIMessaging_v1_service::is_usecase_Set() const{
    return m_usecase_isSet;
}

bool OAIMessaging_v1_service::is_usecase_Valid() const{
    return m_usecase_isValid;
}

qint32 OAIMessaging_v1_service::getValidityPeriod() const {
    return m_validity_period;
}
void OAIMessaging_v1_service::setValidityPeriod(const qint32 &validity_period) {
    m_validity_period = validity_period;
    m_validity_period_isSet = true;
}

bool OAIMessaging_v1_service::is_validity_period_Set() const{
    return m_validity_period_isSet;
}

bool OAIMessaging_v1_service::is_validity_period_Valid() const{
    return m_validity_period_isValid;
}

bool OAIMessaging_v1_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_code_geomatch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_to_long_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mms_converter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_message_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronous_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_us_app_to_person_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_inbound_webhook_on_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usecase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
