/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_domain_cert_v4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_domain_cert_v4::OAIMessaging_v1_domain_cert_v4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_domain_cert_v4::OAIMessaging_v1_domain_cert_v4() {
    this->initializeModel();
}

OAIMessaging_v1_domain_cert_v4::~OAIMessaging_v1_domain_cert_v4() {}

void OAIMessaging_v1_domain_cert_v4::initializeModel() {

    m_cert_in_validation_isSet = false;
    m_cert_in_validation_isValid = false;

    m_certificate_sid_isSet = false;
    m_certificate_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_expires_isSet = false;
    m_date_expires_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_sid_isSet = false;
    m_domain_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMessaging_v1_domain_cert_v4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_domain_cert_v4::fromJsonObject(QJsonObject json) {

    m_cert_in_validation_isValid = ::OpenAPI::fromJsonValue(m_cert_in_validation, json[QString("cert_in_validation")]);
    m_cert_in_validation_isSet = !json[QString("cert_in_validation")].isNull() && m_cert_in_validation_isValid;

    m_certificate_sid_isValid = ::OpenAPI::fromJsonValue(m_certificate_sid, json[QString("certificate_sid")]);
    m_certificate_sid_isSet = !json[QString("certificate_sid")].isNull() && m_certificate_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_expires_isValid = ::OpenAPI::fromJsonValue(m_date_expires, json[QString("date_expires")]);
    m_date_expires_isSet = !json[QString("date_expires")].isNull() && m_date_expires_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domain_name")]);
    m_domain_name_isSet = !json[QString("domain_name")].isNull() && m_domain_name_isValid;

    m_domain_sid_isValid = ::OpenAPI::fromJsonValue(m_domain_sid, json[QString("domain_sid")]);
    m_domain_sid_isSet = !json[QString("domain_sid")].isNull() && m_domain_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMessaging_v1_domain_cert_v4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_domain_cert_v4::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_in_validation_isSet) {
        obj.insert(QString("cert_in_validation"), ::OpenAPI::toJsonValue(m_cert_in_validation));
    }
    if (m_certificate_sid_isSet) {
        obj.insert(QString("certificate_sid"), ::OpenAPI::toJsonValue(m_certificate_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_expires_isSet) {
        obj.insert(QString("date_expires"), ::OpenAPI::toJsonValue(m_date_expires));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domain_name"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_sid_isSet) {
        obj.insert(QString("domain_sid"), ::OpenAPI::toJsonValue(m_domain_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QJsonValue OAIMessaging_v1_domain_cert_v4::getCertInValidation() const {
    return m_cert_in_validation;
}
void OAIMessaging_v1_domain_cert_v4::setCertInValidation(const QJsonValue &cert_in_validation) {
    m_cert_in_validation = cert_in_validation;
    m_cert_in_validation_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_cert_in_validation_Set() const{
    return m_cert_in_validation_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_cert_in_validation_Valid() const{
    return m_cert_in_validation_isValid;
}

QString OAIMessaging_v1_domain_cert_v4::getCertificateSid() const {
    return m_certificate_sid;
}
void OAIMessaging_v1_domain_cert_v4::setCertificateSid(const QString &certificate_sid) {
    m_certificate_sid = certificate_sid;
    m_certificate_sid_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_certificate_sid_Set() const{
    return m_certificate_sid_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_certificate_sid_Valid() const{
    return m_certificate_sid_isValid;
}

QDateTime OAIMessaging_v1_domain_cert_v4::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_domain_cert_v4::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_domain_cert_v4::getDateExpires() const {
    return m_date_expires;
}
void OAIMessaging_v1_domain_cert_v4::setDateExpires(const QDateTime &date_expires) {
    m_date_expires = date_expires;
    m_date_expires_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_expires_Set() const{
    return m_date_expires_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_expires_Valid() const{
    return m_date_expires_isValid;
}

QDateTime OAIMessaging_v1_domain_cert_v4::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_domain_cert_v4::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIMessaging_v1_domain_cert_v4::getDomainName() const {
    return m_domain_name;
}
void OAIMessaging_v1_domain_cert_v4::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIMessaging_v1_domain_cert_v4::getDomainSid() const {
    return m_domain_sid;
}
void OAIMessaging_v1_domain_cert_v4::setDomainSid(const QString &domain_sid) {
    m_domain_sid = domain_sid;
    m_domain_sid_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_domain_sid_Set() const{
    return m_domain_sid_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_domain_sid_Valid() const{
    return m_domain_sid_isValid;
}

QString OAIMessaging_v1_domain_cert_v4::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_domain_cert_v4::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_domain_cert_v4::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_domain_cert_v4::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMessaging_v1_domain_cert_v4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_in_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_domain_cert_v4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
