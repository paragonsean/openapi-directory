/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessaging_v1_brand_registrations.h
 *
 * 
 */

#ifndef OAIMessaging_v1_brand_registrations_H
#define OAIMessaging_v1_brand_registrations_H

#include <QJsonObject>

#include "OAIBrand_registrations_enum_brand_feedback.h"
#include "OAIBrand_registrations_enum_identity_status.h"
#include "OAIBrand_registrations_enum_status.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMessaging_v1_brand_registrations : public OAIObject {
public:
    OAIMessaging_v1_brand_registrations();
    OAIMessaging_v1_brand_registrations(QString json);
    ~OAIMessaging_v1_brand_registrations() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getA2pProfileBundleSid() const;
    void setA2pProfileBundleSid(const QString &a2p_profile_bundle_sid);
    bool is_a2p_profile_bundle_sid_Set() const;
    bool is_a2p_profile_bundle_sid_Valid() const;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QList<OAIBrand_registrations_enum_brand_feedback> getBrandFeedback() const;
    void setBrandFeedback(const QList<OAIBrand_registrations_enum_brand_feedback> &brand_feedback);
    bool is_brand_feedback_Set() const;
    bool is_brand_feedback_Valid() const;

    qint32 getBrandScore() const;
    void setBrandScore(const qint32 &brand_score);
    bool is_brand_score_Set() const;
    bool is_brand_score_Valid() const;

    QString getBrandType() const;
    void setBrandType(const QString &brand_type);
    bool is_brand_type_Set() const;
    bool is_brand_type_Valid() const;

    QString getCustomerProfileBundleSid() const;
    void setCustomerProfileBundleSid(const QString &customer_profile_bundle_sid);
    bool is_customer_profile_bundle_sid_Set() const;
    bool is_customer_profile_bundle_sid_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    bool isGovernmentEntity() const;
    void setGovernmentEntity(const bool &government_entity);
    bool is_government_entity_Set() const;
    bool is_government_entity_Valid() const;

    OAIBrand_registrations_enum_identity_status getIdentityStatus() const;
    void setIdentityStatus(const OAIBrand_registrations_enum_identity_status &identity_status);
    bool is_identity_status_Set() const;
    bool is_identity_status_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    bool isMock() const;
    void setMock(const bool &mock);
    bool is_mock_Set() const;
    bool is_mock_Valid() const;

    bool isRussell3000() const;
    void setRussell3000(const bool &russell_3000);
    bool is_russell_3000_Set() const;
    bool is_russell_3000_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    bool isSkipAutomaticSecVet() const;
    void setSkipAutomaticSecVet(const bool &skip_automatic_sec_vet);
    bool is_skip_automatic_sec_vet_Set() const;
    bool is_skip_automatic_sec_vet_Valid() const;

    OAIBrand_registrations_enum_status getStatus() const;
    void setStatus(const OAIBrand_registrations_enum_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTaxExemptStatus() const;
    void setTaxExemptStatus(const QString &tax_exempt_status);
    bool is_tax_exempt_status_Set() const;
    bool is_tax_exempt_status_Valid() const;

    QString getTcrId() const;
    void setTcrId(const QString &tcr_id);
    bool is_tcr_id_Set() const;
    bool is_tcr_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_a2p_profile_bundle_sid;
    bool m_a2p_profile_bundle_sid_isSet;
    bool m_a2p_profile_bundle_sid_isValid;

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QList<OAIBrand_registrations_enum_brand_feedback> m_brand_feedback;
    bool m_brand_feedback_isSet;
    bool m_brand_feedback_isValid;

    qint32 m_brand_score;
    bool m_brand_score_isSet;
    bool m_brand_score_isValid;

    QString m_brand_type;
    bool m_brand_type_isSet;
    bool m_brand_type_isValid;

    QString m_customer_profile_bundle_sid;
    bool m_customer_profile_bundle_sid_isSet;
    bool m_customer_profile_bundle_sid_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    bool m_government_entity;
    bool m_government_entity_isSet;
    bool m_government_entity_isValid;

    OAIBrand_registrations_enum_identity_status m_identity_status;
    bool m_identity_status_isSet;
    bool m_identity_status_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    bool m_mock;
    bool m_mock_isSet;
    bool m_mock_isValid;

    bool m_russell_3000;
    bool m_russell_3000_isSet;
    bool m_russell_3000_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    bool m_skip_automatic_sec_vet;
    bool m_skip_automatic_sec_vet_isSet;
    bool m_skip_automatic_sec_vet_isValid;

    OAIBrand_registrations_enum_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tax_exempt_status;
    bool m_tax_exempt_status_isSet;
    bool m_tax_exempt_status_isValid;

    QString m_tcr_id;
    bool m_tcr_id_isSet;
    bool m_tcr_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessaging_v1_brand_registrations)

#endif // OAIMessaging_v1_brand_registrations_H
