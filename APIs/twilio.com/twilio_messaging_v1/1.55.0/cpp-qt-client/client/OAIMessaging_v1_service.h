/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessaging_v1_service.h
 *
 * 
 */

#ifndef OAIMessaging_v1_service_H
#define OAIMessaging_v1_service_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIService_enum_scan_message_content.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMessaging_v1_service : public OAIObject {
public:
    OAIMessaging_v1_service();
    OAIMessaging_v1_service(QString json);
    ~OAIMessaging_v1_service() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    bool isAreaCodeGeomatch() const;
    void setAreaCodeGeomatch(const bool &area_code_geomatch);
    bool is_area_code_geomatch_Set() const;
    bool is_area_code_geomatch_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getFallbackMethod() const;
    void setFallbackMethod(const QString &fallback_method);
    bool is_fallback_method_Set() const;
    bool is_fallback_method_Valid() const;

    bool isFallbackToLongCode() const;
    void setFallbackToLongCode(const bool &fallback_to_long_code);
    bool is_fallback_to_long_code_Set() const;
    bool is_fallback_to_long_code_Valid() const;

    QString getFallbackUrl() const;
    void setFallbackUrl(const QString &fallback_url);
    bool is_fallback_url_Set() const;
    bool is_fallback_url_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getInboundMethod() const;
    void setInboundMethod(const QString &inbound_method);
    bool is_inbound_method_Set() const;
    bool is_inbound_method_Valid() const;

    QString getInboundRequestUrl() const;
    void setInboundRequestUrl(const QString &inbound_request_url);
    bool is_inbound_request_url_Set() const;
    bool is_inbound_request_url_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    bool isMmsConverter() const;
    void setMmsConverter(const bool &mms_converter);
    bool is_mms_converter_Set() const;
    bool is_mms_converter_Valid() const;

    OAIService_enum_scan_message_content getScanMessageContent() const;
    void setScanMessageContent(const OAIService_enum_scan_message_content &scan_message_content);
    bool is_scan_message_content_Set() const;
    bool is_scan_message_content_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    bool isSmartEncoding() const;
    void setSmartEncoding(const bool &smart_encoding);
    bool is_smart_encoding_Set() const;
    bool is_smart_encoding_Valid() const;

    QString getStatusCallback() const;
    void setStatusCallback(const QString &status_callback);
    bool is_status_callback_Set() const;
    bool is_status_callback_Valid() const;

    bool isStickySender() const;
    void setStickySender(const bool &sticky_sender);
    bool is_sticky_sender_Set() const;
    bool is_sticky_sender_Valid() const;

    bool isSynchronousValidation() const;
    void setSynchronousValidation(const bool &synchronous_validation);
    bool is_synchronous_validation_Set() const;
    bool is_synchronous_validation_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    bool isUsAppToPersonRegistered() const;
    void setUsAppToPersonRegistered(const bool &us_app_to_person_registered);
    bool is_us_app_to_person_registered_Set() const;
    bool is_us_app_to_person_registered_Valid() const;

    bool isUseInboundWebhookOnNumber() const;
    void setUseInboundWebhookOnNumber(const bool &use_inbound_webhook_on_number);
    bool is_use_inbound_webhook_on_number_Set() const;
    bool is_use_inbound_webhook_on_number_Valid() const;

    QString getUsecase() const;
    void setUsecase(const QString &usecase);
    bool is_usecase_Set() const;
    bool is_usecase_Valid() const;

    qint32 getValidityPeriod() const;
    void setValidityPeriod(const qint32 &validity_period);
    bool is_validity_period_Set() const;
    bool is_validity_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    bool m_area_code_geomatch;
    bool m_area_code_geomatch_isSet;
    bool m_area_code_geomatch_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_fallback_method;
    bool m_fallback_method_isSet;
    bool m_fallback_method_isValid;

    bool m_fallback_to_long_code;
    bool m_fallback_to_long_code_isSet;
    bool m_fallback_to_long_code_isValid;

    QString m_fallback_url;
    bool m_fallback_url_isSet;
    bool m_fallback_url_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_inbound_method;
    bool m_inbound_method_isSet;
    bool m_inbound_method_isValid;

    QString m_inbound_request_url;
    bool m_inbound_request_url_isSet;
    bool m_inbound_request_url_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    bool m_mms_converter;
    bool m_mms_converter_isSet;
    bool m_mms_converter_isValid;

    OAIService_enum_scan_message_content m_scan_message_content;
    bool m_scan_message_content_isSet;
    bool m_scan_message_content_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    bool m_smart_encoding;
    bool m_smart_encoding_isSet;
    bool m_smart_encoding_isValid;

    QString m_status_callback;
    bool m_status_callback_isSet;
    bool m_status_callback_isValid;

    bool m_sticky_sender;
    bool m_sticky_sender_isSet;
    bool m_sticky_sender_isValid;

    bool m_synchronous_validation;
    bool m_synchronous_validation_isSet;
    bool m_synchronous_validation_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    bool m_us_app_to_person_registered;
    bool m_us_app_to_person_registered_isSet;
    bool m_us_app_to_person_registered_isValid;

    bool m_use_inbound_webhook_on_number;
    bool m_use_inbound_webhook_on_number_isSet;
    bool m_use_inbound_webhook_on_number_isValid;

    QString m_usecase;
    bool m_usecase_isSet;
    bool m_usecase_isValid;

    qint32 m_validity_period;
    bool m_validity_period_isSet;
    bool m_validity_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessaging_v1_service)

#endif // OAIMessaging_v1_service_H
