/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagingV1UsAppToPersonApi_H
#define OAI_OAIMessagingV1UsAppToPersonApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListUsAppToPersonResponse.h"
#include "OAIMessaging_v1_service_us_app_to_person.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagingV1UsAppToPersonApi : public QObject {
    Q_OBJECT

public:
    OAIMessagingV1UsAppToPersonApi(const int timeOut = 0);
    ~OAIMessagingV1UsAppToPersonApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  messaging_service_sid QString [required]
    * @param[in]  brand_registration_sid QString [required]
    * @param[in]  description QString [required]
    * @param[in]  has_embedded_links bool [required]
    * @param[in]  has_embedded_phone bool [required]
    * @param[in]  message_flow QString [required]
    * @param[in]  message_samples QList<QString> [required]
    * @param[in]  us_app_to_person_usecase QString [required]
    * @param[in]  age_gated bool [optional]
    * @param[in]  direct_lending bool [optional]
    * @param[in]  help_keywords QList<QString> [optional]
    * @param[in]  help_message QString [optional]
    * @param[in]  opt_in_keywords QList<QString> [optional]
    * @param[in]  opt_in_message QString [optional]
    * @param[in]  opt_out_keywords QList<QString> [optional]
    * @param[in]  opt_out_message QString [optional]
    * @param[in]  subscriber_opt_in bool [optional]
    */
    virtual void createUsAppToPerson(const QString &messaging_service_sid, const QString &brand_registration_sid, const QString &description, const bool &has_embedded_links, const bool &has_embedded_phone, const QString &message_flow, const QList<QString> &message_samples, const QString &us_app_to_person_usecase, const ::OpenAPI::OptionalParam<bool> &age_gated = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &direct_lending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &help_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &help_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_in_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &opt_in_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_out_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &opt_out_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &subscriber_opt_in = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  messaging_service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteUsAppToPerson(const QString &messaging_service_sid, const QString &sid);

    /**
    * @param[in]  messaging_service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchUsAppToPerson(const QString &messaging_service_sid, const QString &sid);

    /**
    * @param[in]  messaging_service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listUsAppToPerson(const QString &messaging_service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  messaging_service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  age_gated bool [required]
    * @param[in]  description QString [required]
    * @param[in]  direct_lending bool [required]
    * @param[in]  has_embedded_links bool [required]
    * @param[in]  has_embedded_phone bool [required]
    * @param[in]  message_flow QString [required]
    * @param[in]  message_samples QList<QString> [required]
    */
    virtual void updateUsAppToPerson(const QString &messaging_service_sid, const QString &sid, const bool &age_gated, const QString &description, const bool &direct_lending, const bool &has_embedded_links, const bool &has_embedded_phone, const QString &message_flow, const QList<QString> &message_samples);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUsAppToPersonCallback(OAIHttpRequestWorker *worker);
    void deleteUsAppToPersonCallback(OAIHttpRequestWorker *worker);
    void fetchUsAppToPersonCallback(OAIHttpRequestWorker *worker);
    void listUsAppToPersonCallback(OAIHttpRequestWorker *worker);
    void updateUsAppToPersonCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUsAppToPersonSignal(OAIMessaging_v1_service_us_app_to_person summary);
    void deleteUsAppToPersonSignal();
    void fetchUsAppToPersonSignal(OAIMessaging_v1_service_us_app_to_person summary);
    void listUsAppToPersonSignal(OAIListUsAppToPersonResponse summary);
    void updateUsAppToPersonSignal(OAIMessaging_v1_service_us_app_to_person summary);


    void createUsAppToPersonSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_service_us_app_to_person summary);
    void deleteUsAppToPersonSignalFull(OAIHttpRequestWorker *worker);
    void fetchUsAppToPersonSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_service_us_app_to_person summary);
    void listUsAppToPersonSignalFull(OAIHttpRequestWorker *worker, OAIListUsAppToPersonResponse summary);
    void updateUsAppToPersonSignalFull(OAIHttpRequestWorker *worker, OAIMessaging_v1_service_us_app_to_person summary);

    Q_DECL_DEPRECATED_X("Use createUsAppToPersonSignalError() instead")
    void createUsAppToPersonSignalE(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsAppToPersonSignalError(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsAppToPersonSignalError() instead")
    void deleteUsAppToPersonSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsAppToPersonSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUsAppToPersonSignalError() instead")
    void fetchUsAppToPersonSignalE(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUsAppToPersonSignalError(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsAppToPersonSignalError() instead")
    void listUsAppToPersonSignalE(OAIListUsAppToPersonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsAppToPersonSignalError(OAIListUsAppToPersonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsAppToPersonSignalError() instead")
    void updateUsAppToPersonSignalE(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsAppToPersonSignalError(OAIMessaging_v1_service_us_app_to_person summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUsAppToPersonSignalErrorFull() instead")
    void createUsAppToPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsAppToPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsAppToPersonSignalErrorFull() instead")
    void deleteUsAppToPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsAppToPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUsAppToPersonSignalErrorFull() instead")
    void fetchUsAppToPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUsAppToPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsAppToPersonSignalErrorFull() instead")
    void listUsAppToPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsAppToPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsAppToPersonSignalErrorFull() instead")
    void updateUsAppToPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsAppToPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
