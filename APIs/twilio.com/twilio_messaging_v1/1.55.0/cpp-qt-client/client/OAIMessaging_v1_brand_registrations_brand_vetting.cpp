/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_brand_registrations_brand_vetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_brand_registrations_brand_vetting::OAIMessaging_v1_brand_registrations_brand_vetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_brand_registrations_brand_vetting::OAIMessaging_v1_brand_registrations_brand_vetting() {
    this->initializeModel();
}

OAIMessaging_v1_brand_registrations_brand_vetting::~OAIMessaging_v1_brand_registrations_brand_vetting() {}

void OAIMessaging_v1_brand_registrations_brand_vetting::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_brand_sid_isSet = false;
    m_brand_sid_isValid = false;

    m_brand_vetting_sid_isSet = false;
    m_brand_vetting_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vetting_class_isSet = false;
    m_vetting_class_isValid = false;

    m_vetting_id_isSet = false;
    m_vetting_id_isValid = false;

    m_vetting_provider_isSet = false;
    m_vetting_provider_isValid = false;

    m_vetting_status_isSet = false;
    m_vetting_status_isValid = false;
}

void OAIMessaging_v1_brand_registrations_brand_vetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_brand_registrations_brand_vetting::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_brand_sid_isValid = ::OpenAPI::fromJsonValue(m_brand_sid, json[QString("brand_sid")]);
    m_brand_sid_isSet = !json[QString("brand_sid")].isNull() && m_brand_sid_isValid;

    m_brand_vetting_sid_isValid = ::OpenAPI::fromJsonValue(m_brand_vetting_sid, json[QString("brand_vetting_sid")]);
    m_brand_vetting_sid_isSet = !json[QString("brand_vetting_sid")].isNull() && m_brand_vetting_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vetting_class_isValid = ::OpenAPI::fromJsonValue(m_vetting_class, json[QString("vetting_class")]);
    m_vetting_class_isSet = !json[QString("vetting_class")].isNull() && m_vetting_class_isValid;

    m_vetting_id_isValid = ::OpenAPI::fromJsonValue(m_vetting_id, json[QString("vetting_id")]);
    m_vetting_id_isSet = !json[QString("vetting_id")].isNull() && m_vetting_id_isValid;

    m_vetting_provider_isValid = ::OpenAPI::fromJsonValue(m_vetting_provider, json[QString("vetting_provider")]);
    m_vetting_provider_isSet = !json[QString("vetting_provider")].isNull() && m_vetting_provider_isValid;

    m_vetting_status_isValid = ::OpenAPI::fromJsonValue(m_vetting_status, json[QString("vetting_status")]);
    m_vetting_status_isSet = !json[QString("vetting_status")].isNull() && m_vetting_status_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_brand_registrations_brand_vetting::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_brand_sid_isSet) {
        obj.insert(QString("brand_sid"), ::OpenAPI::toJsonValue(m_brand_sid));
    }
    if (m_brand_vetting_sid_isSet) {
        obj.insert(QString("brand_vetting_sid"), ::OpenAPI::toJsonValue(m_brand_vetting_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vetting_class_isSet) {
        obj.insert(QString("vetting_class"), ::OpenAPI::toJsonValue(m_vetting_class));
    }
    if (m_vetting_id_isSet) {
        obj.insert(QString("vetting_id"), ::OpenAPI::toJsonValue(m_vetting_id));
    }
    if (m_vetting_provider.isSet()) {
        obj.insert(QString("vetting_provider"), ::OpenAPI::toJsonValue(m_vetting_provider));
    }
    if (m_vetting_status_isSet) {
        obj.insert(QString("vetting_status"), ::OpenAPI::toJsonValue(m_vetting_status));
    }
    return obj;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getBrandSid() const {
    return m_brand_sid;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setBrandSid(const QString &brand_sid) {
    m_brand_sid = brand_sid;
    m_brand_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_brand_sid_Set() const{
    return m_brand_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_brand_sid_Valid() const{
    return m_brand_sid_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getBrandVettingSid() const {
    return m_brand_vetting_sid;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setBrandVettingSid(const QString &brand_vetting_sid) {
    m_brand_vetting_sid = brand_vetting_sid;
    m_brand_vetting_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_brand_vetting_sid_Set() const{
    return m_brand_vetting_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_brand_vetting_sid_Valid() const{
    return m_brand_vetting_sid_isValid;
}

QDateTime OAIMessaging_v1_brand_registrations_brand_vetting::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_brand_registrations_brand_vetting::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getVettingClass() const {
    return m_vetting_class;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setVettingClass(const QString &vetting_class) {
    m_vetting_class = vetting_class;
    m_vetting_class_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_class_Set() const{
    return m_vetting_class_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_class_Valid() const{
    return m_vetting_class_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getVettingId() const {
    return m_vetting_id;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setVettingId(const QString &vetting_id) {
    m_vetting_id = vetting_id;
    m_vetting_id_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_id_Set() const{
    return m_vetting_id_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_id_Valid() const{
    return m_vetting_id_isValid;
}

OAIBrand_vetting_enum_vetting_provider OAIMessaging_v1_brand_registrations_brand_vetting::getVettingProvider() const {
    return m_vetting_provider;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setVettingProvider(const OAIBrand_vetting_enum_vetting_provider &vetting_provider) {
    m_vetting_provider = vetting_provider;
    m_vetting_provider_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_provider_Set() const{
    return m_vetting_provider_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_provider_Valid() const{
    return m_vetting_provider_isValid;
}

QString OAIMessaging_v1_brand_registrations_brand_vetting::getVettingStatus() const {
    return m_vetting_status;
}
void OAIMessaging_v1_brand_registrations_brand_vetting::setVettingStatus(const QString &vetting_status) {
    m_vetting_status = vetting_status;
    m_vetting_status_isSet = true;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_status_Set() const{
    return m_vetting_status_isSet;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::is_vetting_status_Valid() const{
    return m_vetting_status_isValid;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_vetting_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vetting_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vetting_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vetting_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vetting_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_brand_registrations_brand_vetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
