/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_tollfree_verification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_tollfree_verification::OAIMessaging_v1_tollfree_verification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_tollfree_verification::OAIMessaging_v1_tollfree_verification() {
    this->initializeModel();
}

OAIMessaging_v1_tollfree_verification::~OAIMessaging_v1_tollfree_verification() {}

void OAIMessaging_v1_tollfree_verification::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_business_city_isSet = false;
    m_business_city_isValid = false;

    m_business_contact_email_isSet = false;
    m_business_contact_email_isValid = false;

    m_business_contact_first_name_isSet = false;
    m_business_contact_first_name_isValid = false;

    m_business_contact_last_name_isSet = false;
    m_business_contact_last_name_isValid = false;

    m_business_contact_phone_isSet = false;
    m_business_contact_phone_isValid = false;

    m_business_country_isSet = false;
    m_business_country_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_business_postal_code_isSet = false;
    m_business_postal_code_isValid = false;

    m_business_state_province_region_isSet = false;
    m_business_state_province_region_isValid = false;

    m_business_street_address_isSet = false;
    m_business_street_address_isValid = false;

    m_business_street_address2_isSet = false;
    m_business_street_address2_isValid = false;

    m_business_website_isSet = false;
    m_business_website_isValid = false;

    m_customer_profile_sid_isSet = false;
    m_customer_profile_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_edit_allowed_isSet = false;
    m_edit_allowed_isValid = false;

    m_edit_expiration_isSet = false;
    m_edit_expiration_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_external_reference_id_isSet = false;
    m_external_reference_id_isValid = false;

    m_message_volume_isSet = false;
    m_message_volume_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_opt_in_image_urls_isSet = false;
    m_opt_in_image_urls_isValid = false;

    m_opt_in_type_isSet = false;
    m_opt_in_type_isValid = false;

    m_production_message_sample_isSet = false;
    m_production_message_sample_isValid = false;

    m_regulated_item_sid_isSet = false;
    m_regulated_item_sid_isValid = false;

    m_rejection_reason_isSet = false;
    m_rejection_reason_isValid = false;

    m_rejection_reasons_isSet = false;
    m_rejection_reasons_isValid = false;

    m_resource_links_isSet = false;
    m_resource_links_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tollfree_phone_number_sid_isSet = false;
    m_tollfree_phone_number_sid_isValid = false;

    m_trust_product_sid_isSet = false;
    m_trust_product_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_use_case_categories_isSet = false;
    m_use_case_categories_isValid = false;

    m_use_case_summary_isSet = false;
    m_use_case_summary_isValid = false;
}

void OAIMessaging_v1_tollfree_verification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_tollfree_verification::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additional_information")]);
    m_additional_information_isSet = !json[QString("additional_information")].isNull() && m_additional_information_isValid;

    m_business_city_isValid = ::OpenAPI::fromJsonValue(m_business_city, json[QString("business_city")]);
    m_business_city_isSet = !json[QString("business_city")].isNull() && m_business_city_isValid;

    m_business_contact_email_isValid = ::OpenAPI::fromJsonValue(m_business_contact_email, json[QString("business_contact_email")]);
    m_business_contact_email_isSet = !json[QString("business_contact_email")].isNull() && m_business_contact_email_isValid;

    m_business_contact_first_name_isValid = ::OpenAPI::fromJsonValue(m_business_contact_first_name, json[QString("business_contact_first_name")]);
    m_business_contact_first_name_isSet = !json[QString("business_contact_first_name")].isNull() && m_business_contact_first_name_isValid;

    m_business_contact_last_name_isValid = ::OpenAPI::fromJsonValue(m_business_contact_last_name, json[QString("business_contact_last_name")]);
    m_business_contact_last_name_isSet = !json[QString("business_contact_last_name")].isNull() && m_business_contact_last_name_isValid;

    m_business_contact_phone_isValid = ::OpenAPI::fromJsonValue(m_business_contact_phone, json[QString("business_contact_phone")]);
    m_business_contact_phone_isSet = !json[QString("business_contact_phone")].isNull() && m_business_contact_phone_isValid;

    m_business_country_isValid = ::OpenAPI::fromJsonValue(m_business_country, json[QString("business_country")]);
    m_business_country_isSet = !json[QString("business_country")].isNull() && m_business_country_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("business_name")]);
    m_business_name_isSet = !json[QString("business_name")].isNull() && m_business_name_isValid;

    m_business_postal_code_isValid = ::OpenAPI::fromJsonValue(m_business_postal_code, json[QString("business_postal_code")]);
    m_business_postal_code_isSet = !json[QString("business_postal_code")].isNull() && m_business_postal_code_isValid;

    m_business_state_province_region_isValid = ::OpenAPI::fromJsonValue(m_business_state_province_region, json[QString("business_state_province_region")]);
    m_business_state_province_region_isSet = !json[QString("business_state_province_region")].isNull() && m_business_state_province_region_isValid;

    m_business_street_address_isValid = ::OpenAPI::fromJsonValue(m_business_street_address, json[QString("business_street_address")]);
    m_business_street_address_isSet = !json[QString("business_street_address")].isNull() && m_business_street_address_isValid;

    m_business_street_address2_isValid = ::OpenAPI::fromJsonValue(m_business_street_address2, json[QString("business_street_address2")]);
    m_business_street_address2_isSet = !json[QString("business_street_address2")].isNull() && m_business_street_address2_isValid;

    m_business_website_isValid = ::OpenAPI::fromJsonValue(m_business_website, json[QString("business_website")]);
    m_business_website_isSet = !json[QString("business_website")].isNull() && m_business_website_isValid;

    m_customer_profile_sid_isValid = ::OpenAPI::fromJsonValue(m_customer_profile_sid, json[QString("customer_profile_sid")]);
    m_customer_profile_sid_isSet = !json[QString("customer_profile_sid")].isNull() && m_customer_profile_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_edit_allowed_isValid = ::OpenAPI::fromJsonValue(m_edit_allowed, json[QString("edit_allowed")]);
    m_edit_allowed_isSet = !json[QString("edit_allowed")].isNull() && m_edit_allowed_isValid;

    m_edit_expiration_isValid = ::OpenAPI::fromJsonValue(m_edit_expiration, json[QString("edit_expiration")]);
    m_edit_expiration_isSet = !json[QString("edit_expiration")].isNull() && m_edit_expiration_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_external_reference_id_isValid = ::OpenAPI::fromJsonValue(m_external_reference_id, json[QString("external_reference_id")]);
    m_external_reference_id_isSet = !json[QString("external_reference_id")].isNull() && m_external_reference_id_isValid;

    m_message_volume_isValid = ::OpenAPI::fromJsonValue(m_message_volume, json[QString("message_volume")]);
    m_message_volume_isSet = !json[QString("message_volume")].isNull() && m_message_volume_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("notification_email")]);
    m_notification_email_isSet = !json[QString("notification_email")].isNull() && m_notification_email_isValid;

    m_opt_in_image_urls_isValid = ::OpenAPI::fromJsonValue(m_opt_in_image_urls, json[QString("opt_in_image_urls")]);
    m_opt_in_image_urls_isSet = !json[QString("opt_in_image_urls")].isNull() && m_opt_in_image_urls_isValid;

    m_opt_in_type_isValid = ::OpenAPI::fromJsonValue(m_opt_in_type, json[QString("opt_in_type")]);
    m_opt_in_type_isSet = !json[QString("opt_in_type")].isNull() && m_opt_in_type_isValid;

    m_production_message_sample_isValid = ::OpenAPI::fromJsonValue(m_production_message_sample, json[QString("production_message_sample")]);
    m_production_message_sample_isSet = !json[QString("production_message_sample")].isNull() && m_production_message_sample_isValid;

    m_regulated_item_sid_isValid = ::OpenAPI::fromJsonValue(m_regulated_item_sid, json[QString("regulated_item_sid")]);
    m_regulated_item_sid_isSet = !json[QString("regulated_item_sid")].isNull() && m_regulated_item_sid_isValid;

    m_rejection_reason_isValid = ::OpenAPI::fromJsonValue(m_rejection_reason, json[QString("rejection_reason")]);
    m_rejection_reason_isSet = !json[QString("rejection_reason")].isNull() && m_rejection_reason_isValid;

    m_rejection_reasons_isValid = ::OpenAPI::fromJsonValue(m_rejection_reasons, json[QString("rejection_reasons")]);
    m_rejection_reasons_isSet = !json[QString("rejection_reasons")].isNull() && m_rejection_reasons_isValid;

    m_resource_links_isValid = ::OpenAPI::fromJsonValue(m_resource_links, json[QString("resource_links")]);
    m_resource_links_isSet = !json[QString("resource_links")].isNull() && m_resource_links_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tollfree_phone_number_sid_isValid = ::OpenAPI::fromJsonValue(m_tollfree_phone_number_sid, json[QString("tollfree_phone_number_sid")]);
    m_tollfree_phone_number_sid_isSet = !json[QString("tollfree_phone_number_sid")].isNull() && m_tollfree_phone_number_sid_isValid;

    m_trust_product_sid_isValid = ::OpenAPI::fromJsonValue(m_trust_product_sid, json[QString("trust_product_sid")]);
    m_trust_product_sid_isSet = !json[QString("trust_product_sid")].isNull() && m_trust_product_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_use_case_categories_isValid = ::OpenAPI::fromJsonValue(m_use_case_categories, json[QString("use_case_categories")]);
    m_use_case_categories_isSet = !json[QString("use_case_categories")].isNull() && m_use_case_categories_isValid;

    m_use_case_summary_isValid = ::OpenAPI::fromJsonValue(m_use_case_summary, json[QString("use_case_summary")]);
    m_use_case_summary_isSet = !json[QString("use_case_summary")].isNull() && m_use_case_summary_isValid;
}

QString OAIMessaging_v1_tollfree_verification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_tollfree_verification::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_additional_information_isSet) {
        obj.insert(QString("additional_information"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_business_city_isSet) {
        obj.insert(QString("business_city"), ::OpenAPI::toJsonValue(m_business_city));
    }
    if (m_business_contact_email_isSet) {
        obj.insert(QString("business_contact_email"), ::OpenAPI::toJsonValue(m_business_contact_email));
    }
    if (m_business_contact_first_name_isSet) {
        obj.insert(QString("business_contact_first_name"), ::OpenAPI::toJsonValue(m_business_contact_first_name));
    }
    if (m_business_contact_last_name_isSet) {
        obj.insert(QString("business_contact_last_name"), ::OpenAPI::toJsonValue(m_business_contact_last_name));
    }
    if (m_business_contact_phone_isSet) {
        obj.insert(QString("business_contact_phone"), ::OpenAPI::toJsonValue(m_business_contact_phone));
    }
    if (m_business_country_isSet) {
        obj.insert(QString("business_country"), ::OpenAPI::toJsonValue(m_business_country));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("business_name"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_business_postal_code_isSet) {
        obj.insert(QString("business_postal_code"), ::OpenAPI::toJsonValue(m_business_postal_code));
    }
    if (m_business_state_province_region_isSet) {
        obj.insert(QString("business_state_province_region"), ::OpenAPI::toJsonValue(m_business_state_province_region));
    }
    if (m_business_street_address_isSet) {
        obj.insert(QString("business_street_address"), ::OpenAPI::toJsonValue(m_business_street_address));
    }
    if (m_business_street_address2_isSet) {
        obj.insert(QString("business_street_address2"), ::OpenAPI::toJsonValue(m_business_street_address2));
    }
    if (m_business_website_isSet) {
        obj.insert(QString("business_website"), ::OpenAPI::toJsonValue(m_business_website));
    }
    if (m_customer_profile_sid_isSet) {
        obj.insert(QString("customer_profile_sid"), ::OpenAPI::toJsonValue(m_customer_profile_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_edit_allowed_isSet) {
        obj.insert(QString("edit_allowed"), ::OpenAPI::toJsonValue(m_edit_allowed));
    }
    if (m_edit_expiration_isSet) {
        obj.insert(QString("edit_expiration"), ::OpenAPI::toJsonValue(m_edit_expiration));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_external_reference_id_isSet) {
        obj.insert(QString("external_reference_id"), ::OpenAPI::toJsonValue(m_external_reference_id));
    }
    if (m_message_volume_isSet) {
        obj.insert(QString("message_volume"), ::OpenAPI::toJsonValue(m_message_volume));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("notification_email"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_opt_in_image_urls.size() > 0) {
        obj.insert(QString("opt_in_image_urls"), ::OpenAPI::toJsonValue(m_opt_in_image_urls));
    }
    if (m_opt_in_type.isSet()) {
        obj.insert(QString("opt_in_type"), ::OpenAPI::toJsonValue(m_opt_in_type));
    }
    if (m_production_message_sample_isSet) {
        obj.insert(QString("production_message_sample"), ::OpenAPI::toJsonValue(m_production_message_sample));
    }
    if (m_regulated_item_sid_isSet) {
        obj.insert(QString("regulated_item_sid"), ::OpenAPI::toJsonValue(m_regulated_item_sid));
    }
    if (m_rejection_reason_isSet) {
        obj.insert(QString("rejection_reason"), ::OpenAPI::toJsonValue(m_rejection_reason));
    }
    if (m_rejection_reasons.size() > 0) {
        obj.insert(QString("rejection_reasons"), ::OpenAPI::toJsonValue(m_rejection_reasons));
    }
    if (m_resource_links_isSet) {
        obj.insert(QString("resource_links"), ::OpenAPI::toJsonValue(m_resource_links));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tollfree_phone_number_sid_isSet) {
        obj.insert(QString("tollfree_phone_number_sid"), ::OpenAPI::toJsonValue(m_tollfree_phone_number_sid));
    }
    if (m_trust_product_sid_isSet) {
        obj.insert(QString("trust_product_sid"), ::OpenAPI::toJsonValue(m_trust_product_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_use_case_categories.size() > 0) {
        obj.insert(QString("use_case_categories"), ::OpenAPI::toJsonValue(m_use_case_categories));
    }
    if (m_use_case_summary_isSet) {
        obj.insert(QString("use_case_summary"), ::OpenAPI::toJsonValue(m_use_case_summary));
    }
    return obj;
}

QString OAIMessaging_v1_tollfree_verification::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_tollfree_verification::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getAdditionalInformation() const {
    return m_additional_information;
}
void OAIMessaging_v1_tollfree_verification::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessCity() const {
    return m_business_city;
}
void OAIMessaging_v1_tollfree_verification::setBusinessCity(const QString &business_city) {
    m_business_city = business_city;
    m_business_city_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_city_Set() const{
    return m_business_city_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_city_Valid() const{
    return m_business_city_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessContactEmail() const {
    return m_business_contact_email;
}
void OAIMessaging_v1_tollfree_verification::setBusinessContactEmail(const QString &business_contact_email) {
    m_business_contact_email = business_contact_email;
    m_business_contact_email_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_email_Set() const{
    return m_business_contact_email_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_email_Valid() const{
    return m_business_contact_email_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessContactFirstName() const {
    return m_business_contact_first_name;
}
void OAIMessaging_v1_tollfree_verification::setBusinessContactFirstName(const QString &business_contact_first_name) {
    m_business_contact_first_name = business_contact_first_name;
    m_business_contact_first_name_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_first_name_Set() const{
    return m_business_contact_first_name_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_first_name_Valid() const{
    return m_business_contact_first_name_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessContactLastName() const {
    return m_business_contact_last_name;
}
void OAIMessaging_v1_tollfree_verification::setBusinessContactLastName(const QString &business_contact_last_name) {
    m_business_contact_last_name = business_contact_last_name;
    m_business_contact_last_name_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_last_name_Set() const{
    return m_business_contact_last_name_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_last_name_Valid() const{
    return m_business_contact_last_name_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessContactPhone() const {
    return m_business_contact_phone;
}
void OAIMessaging_v1_tollfree_verification::setBusinessContactPhone(const QString &business_contact_phone) {
    m_business_contact_phone = business_contact_phone;
    m_business_contact_phone_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_phone_Set() const{
    return m_business_contact_phone_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_contact_phone_Valid() const{
    return m_business_contact_phone_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessCountry() const {
    return m_business_country;
}
void OAIMessaging_v1_tollfree_verification::setBusinessCountry(const QString &business_country) {
    m_business_country = business_country;
    m_business_country_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_country_Set() const{
    return m_business_country_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_country_Valid() const{
    return m_business_country_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessName() const {
    return m_business_name;
}
void OAIMessaging_v1_tollfree_verification::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessPostalCode() const {
    return m_business_postal_code;
}
void OAIMessaging_v1_tollfree_verification::setBusinessPostalCode(const QString &business_postal_code) {
    m_business_postal_code = business_postal_code;
    m_business_postal_code_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_postal_code_Set() const{
    return m_business_postal_code_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_postal_code_Valid() const{
    return m_business_postal_code_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessStateProvinceRegion() const {
    return m_business_state_province_region;
}
void OAIMessaging_v1_tollfree_verification::setBusinessStateProvinceRegion(const QString &business_state_province_region) {
    m_business_state_province_region = business_state_province_region;
    m_business_state_province_region_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_state_province_region_Set() const{
    return m_business_state_province_region_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_state_province_region_Valid() const{
    return m_business_state_province_region_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessStreetAddress() const {
    return m_business_street_address;
}
void OAIMessaging_v1_tollfree_verification::setBusinessStreetAddress(const QString &business_street_address) {
    m_business_street_address = business_street_address;
    m_business_street_address_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_street_address_Set() const{
    return m_business_street_address_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_street_address_Valid() const{
    return m_business_street_address_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessStreetAddress2() const {
    return m_business_street_address2;
}
void OAIMessaging_v1_tollfree_verification::setBusinessStreetAddress2(const QString &business_street_address2) {
    m_business_street_address2 = business_street_address2;
    m_business_street_address2_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_street_address2_Set() const{
    return m_business_street_address2_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_street_address2_Valid() const{
    return m_business_street_address2_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getBusinessWebsite() const {
    return m_business_website;
}
void OAIMessaging_v1_tollfree_verification::setBusinessWebsite(const QString &business_website) {
    m_business_website = business_website;
    m_business_website_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_business_website_Set() const{
    return m_business_website_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_business_website_Valid() const{
    return m_business_website_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getCustomerProfileSid() const {
    return m_customer_profile_sid;
}
void OAIMessaging_v1_tollfree_verification::setCustomerProfileSid(const QString &customer_profile_sid) {
    m_customer_profile_sid = customer_profile_sid;
    m_customer_profile_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_customer_profile_sid_Set() const{
    return m_customer_profile_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_customer_profile_sid_Valid() const{
    return m_customer_profile_sid_isValid;
}

QDateTime OAIMessaging_v1_tollfree_verification::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_tollfree_verification::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_tollfree_verification::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_tollfree_verification::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIMessaging_v1_tollfree_verification::isEditAllowed() const {
    return m_edit_allowed;
}
void OAIMessaging_v1_tollfree_verification::setEditAllowed(const bool &edit_allowed) {
    m_edit_allowed = edit_allowed;
    m_edit_allowed_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_edit_allowed_Set() const{
    return m_edit_allowed_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_edit_allowed_Valid() const{
    return m_edit_allowed_isValid;
}

QDateTime OAIMessaging_v1_tollfree_verification::getEditExpiration() const {
    return m_edit_expiration;
}
void OAIMessaging_v1_tollfree_verification::setEditExpiration(const QDateTime &edit_expiration) {
    m_edit_expiration = edit_expiration;
    m_edit_expiration_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_edit_expiration_Set() const{
    return m_edit_expiration_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_edit_expiration_Valid() const{
    return m_edit_expiration_isValid;
}

qint32 OAIMessaging_v1_tollfree_verification::getErrorCode() const {
    return m_error_code;
}
void OAIMessaging_v1_tollfree_verification::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getExternalReferenceId() const {
    return m_external_reference_id;
}
void OAIMessaging_v1_tollfree_verification::setExternalReferenceId(const QString &external_reference_id) {
    m_external_reference_id = external_reference_id;
    m_external_reference_id_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_external_reference_id_Set() const{
    return m_external_reference_id_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_external_reference_id_Valid() const{
    return m_external_reference_id_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getMessageVolume() const {
    return m_message_volume;
}
void OAIMessaging_v1_tollfree_verification::setMessageVolume(const QString &message_volume) {
    m_message_volume = message_volume;
    m_message_volume_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_message_volume_Set() const{
    return m_message_volume_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_message_volume_Valid() const{
    return m_message_volume_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getNotificationEmail() const {
    return m_notification_email;
}
void OAIMessaging_v1_tollfree_verification::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

QList<QString> OAIMessaging_v1_tollfree_verification::getOptInImageUrls() const {
    return m_opt_in_image_urls;
}
void OAIMessaging_v1_tollfree_verification::setOptInImageUrls(const QList<QString> &opt_in_image_urls) {
    m_opt_in_image_urls = opt_in_image_urls;
    m_opt_in_image_urls_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_opt_in_image_urls_Set() const{
    return m_opt_in_image_urls_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_opt_in_image_urls_Valid() const{
    return m_opt_in_image_urls_isValid;
}

OAITollfree_verification_enum_opt_in_type OAIMessaging_v1_tollfree_verification::getOptInType() const {
    return m_opt_in_type;
}
void OAIMessaging_v1_tollfree_verification::setOptInType(const OAITollfree_verification_enum_opt_in_type &opt_in_type) {
    m_opt_in_type = opt_in_type;
    m_opt_in_type_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_opt_in_type_Set() const{
    return m_opt_in_type_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_opt_in_type_Valid() const{
    return m_opt_in_type_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getProductionMessageSample() const {
    return m_production_message_sample;
}
void OAIMessaging_v1_tollfree_verification::setProductionMessageSample(const QString &production_message_sample) {
    m_production_message_sample = production_message_sample;
    m_production_message_sample_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_production_message_sample_Set() const{
    return m_production_message_sample_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_production_message_sample_Valid() const{
    return m_production_message_sample_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getRegulatedItemSid() const {
    return m_regulated_item_sid;
}
void OAIMessaging_v1_tollfree_verification::setRegulatedItemSid(const QString &regulated_item_sid) {
    m_regulated_item_sid = regulated_item_sid;
    m_regulated_item_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_regulated_item_sid_Set() const{
    return m_regulated_item_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_regulated_item_sid_Valid() const{
    return m_regulated_item_sid_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getRejectionReason() const {
    return m_rejection_reason;
}
void OAIMessaging_v1_tollfree_verification::setRejectionReason(const QString &rejection_reason) {
    m_rejection_reason = rejection_reason;
    m_rejection_reason_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_rejection_reason_Set() const{
    return m_rejection_reason_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_rejection_reason_Valid() const{
    return m_rejection_reason_isValid;
}

QList<QJsonValue> OAIMessaging_v1_tollfree_verification::getRejectionReasons() const {
    return m_rejection_reasons;
}
void OAIMessaging_v1_tollfree_verification::setRejectionReasons(const QList<QJsonValue> &rejection_reasons) {
    m_rejection_reasons = rejection_reasons;
    m_rejection_reasons_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_rejection_reasons_Set() const{
    return m_rejection_reasons_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_rejection_reasons_Valid() const{
    return m_rejection_reasons_isValid;
}

QJsonValue OAIMessaging_v1_tollfree_verification::getResourceLinks() const {
    return m_resource_links;
}
void OAIMessaging_v1_tollfree_verification::setResourceLinks(const QJsonValue &resource_links) {
    m_resource_links = resource_links;
    m_resource_links_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_resource_links_Set() const{
    return m_resource_links_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_resource_links_Valid() const{
    return m_resource_links_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getSid() const {
    return m_sid;
}
void OAIMessaging_v1_tollfree_verification::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_sid_Valid() const{
    return m_sid_isValid;
}

OAITollfree_verification_enum_status OAIMessaging_v1_tollfree_verification::getStatus() const {
    return m_status;
}
void OAIMessaging_v1_tollfree_verification::setStatus(const OAITollfree_verification_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getTollfreePhoneNumberSid() const {
    return m_tollfree_phone_number_sid;
}
void OAIMessaging_v1_tollfree_verification::setTollfreePhoneNumberSid(const QString &tollfree_phone_number_sid) {
    m_tollfree_phone_number_sid = tollfree_phone_number_sid;
    m_tollfree_phone_number_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_tollfree_phone_number_sid_Set() const{
    return m_tollfree_phone_number_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_tollfree_phone_number_sid_Valid() const{
    return m_tollfree_phone_number_sid_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getTrustProductSid() const {
    return m_trust_product_sid;
}
void OAIMessaging_v1_tollfree_verification::setTrustProductSid(const QString &trust_product_sid) {
    m_trust_product_sid = trust_product_sid;
    m_trust_product_sid_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_trust_product_sid_Set() const{
    return m_trust_product_sid_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_trust_product_sid_Valid() const{
    return m_trust_product_sid_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_tollfree_verification::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_url_Valid() const{
    return m_url_isValid;
}

QList<QString> OAIMessaging_v1_tollfree_verification::getUseCaseCategories() const {
    return m_use_case_categories;
}
void OAIMessaging_v1_tollfree_verification::setUseCaseCategories(const QList<QString> &use_case_categories) {
    m_use_case_categories = use_case_categories;
    m_use_case_categories_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_use_case_categories_Set() const{
    return m_use_case_categories_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_use_case_categories_Valid() const{
    return m_use_case_categories_isValid;
}

QString OAIMessaging_v1_tollfree_verification::getUseCaseSummary() const {
    return m_use_case_summary;
}
void OAIMessaging_v1_tollfree_verification::setUseCaseSummary(const QString &use_case_summary) {
    m_use_case_summary = use_case_summary;
    m_use_case_summary_isSet = true;
}

bool OAIMessaging_v1_tollfree_verification::is_use_case_summary_Set() const{
    return m_use_case_summary_isSet;
}

bool OAIMessaging_v1_tollfree_verification::is_use_case_summary_Valid() const{
    return m_use_case_summary_isValid;
}

bool OAIMessaging_v1_tollfree_verification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_contact_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_contact_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_contact_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_state_province_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_street_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_profile_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_image_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_message_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulated_item_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tollfree_phone_number_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_product_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_case_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_case_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_tollfree_verification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
