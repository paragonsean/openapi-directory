/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrand_registrations_enum_brand_feedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrand_registrations_enum_brand_feedback::OAIBrand_registrations_enum_brand_feedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrand_registrations_enum_brand_feedback::OAIBrand_registrations_enum_brand_feedback() {
    this->initializeModel();
}

OAIBrand_registrations_enum_brand_feedback::~OAIBrand_registrations_enum_brand_feedback() {}

void OAIBrand_registrations_enum_brand_feedback::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBrand_registrations_enum_brand_feedback::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBrand_registrations_enum_brand_feedback::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TAX_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBrand_registrations_enum_brand_feedback::TAX_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOCK_SYMBOL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBrand_registrations_enum_brand_feedback::STOCK_SYMBOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONPROFIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBrand_registrations_enum_brand_feedback::NONPROFIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GOVERNMENT_ENTITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBrand_registrations_enum_brand_feedback::GOVERNMENT_ENTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBrand_registrations_enum_brand_feedback::OTHERS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBrand_registrations_enum_brand_feedback::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBrand_registrations_enum_brand_feedback::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBrand_registrations_enum_brand_feedback::TAX_ID:
            val = "TAX_ID";
            break;
        case eOAIBrand_registrations_enum_brand_feedback::STOCK_SYMBOL:
            val = "STOCK_SYMBOL";
            break;
        case eOAIBrand_registrations_enum_brand_feedback::NONPROFIT:
            val = "NONPROFIT";
            break;
        case eOAIBrand_registrations_enum_brand_feedback::GOVERNMENT_ENTITY:
            val = "GOVERNMENT_ENTITY";
            break;
        case eOAIBrand_registrations_enum_brand_feedback::OTHERS:
            val = "OTHERS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBrand_registrations_enum_brand_feedback::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBrand_registrations_enum_brand_feedback::eOAIBrand_registrations_enum_brand_feedback OAIBrand_registrations_enum_brand_feedback::getValue() const {
    return m_value;
}

void OAIBrand_registrations_enum_brand_feedback::setValue(const OAIBrand_registrations_enum_brand_feedback::eOAIBrand_registrations_enum_brand_feedback& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBrand_registrations_enum_brand_feedback::isSet() const {
    
    return m_value_isSet;
}

bool OAIBrand_registrations_enum_brand_feedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
