/**
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessaging_v1_brand_registrations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessaging_v1_brand_registrations::OAIMessaging_v1_brand_registrations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessaging_v1_brand_registrations::OAIMessaging_v1_brand_registrations() {
    this->initializeModel();
}

OAIMessaging_v1_brand_registrations::~OAIMessaging_v1_brand_registrations() {}

void OAIMessaging_v1_brand_registrations::initializeModel() {

    m_a2p_profile_bundle_sid_isSet = false;
    m_a2p_profile_bundle_sid_isValid = false;

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_brand_feedback_isSet = false;
    m_brand_feedback_isValid = false;

    m_brand_score_isSet = false;
    m_brand_score_isValid = false;

    m_brand_type_isSet = false;
    m_brand_type_isValid = false;

    m_customer_profile_bundle_sid_isSet = false;
    m_customer_profile_bundle_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_government_entity_isSet = false;
    m_government_entity_isValid = false;

    m_identity_status_isSet = false;
    m_identity_status_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mock_isSet = false;
    m_mock_isValid = false;

    m_russell_3000_isSet = false;
    m_russell_3000_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_skip_automatic_sec_vet_isSet = false;
    m_skip_automatic_sec_vet_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_exempt_status_isSet = false;
    m_tax_exempt_status_isValid = false;

    m_tcr_id_isSet = false;
    m_tcr_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMessaging_v1_brand_registrations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessaging_v1_brand_registrations::fromJsonObject(QJsonObject json) {

    m_a2p_profile_bundle_sid_isValid = ::OpenAPI::fromJsonValue(m_a2p_profile_bundle_sid, json[QString("a2p_profile_bundle_sid")]);
    m_a2p_profile_bundle_sid_isSet = !json[QString("a2p_profile_bundle_sid")].isNull() && m_a2p_profile_bundle_sid_isValid;

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_brand_feedback_isValid = ::OpenAPI::fromJsonValue(m_brand_feedback, json[QString("brand_feedback")]);
    m_brand_feedback_isSet = !json[QString("brand_feedback")].isNull() && m_brand_feedback_isValid;

    m_brand_score_isValid = ::OpenAPI::fromJsonValue(m_brand_score, json[QString("brand_score")]);
    m_brand_score_isSet = !json[QString("brand_score")].isNull() && m_brand_score_isValid;

    m_brand_type_isValid = ::OpenAPI::fromJsonValue(m_brand_type, json[QString("brand_type")]);
    m_brand_type_isSet = !json[QString("brand_type")].isNull() && m_brand_type_isValid;

    m_customer_profile_bundle_sid_isValid = ::OpenAPI::fromJsonValue(m_customer_profile_bundle_sid, json[QString("customer_profile_bundle_sid")]);
    m_customer_profile_bundle_sid_isSet = !json[QString("customer_profile_bundle_sid")].isNull() && m_customer_profile_bundle_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failure_reason")]);
    m_failure_reason_isSet = !json[QString("failure_reason")].isNull() && m_failure_reason_isValid;

    m_government_entity_isValid = ::OpenAPI::fromJsonValue(m_government_entity, json[QString("government_entity")]);
    m_government_entity_isSet = !json[QString("government_entity")].isNull() && m_government_entity_isValid;

    m_identity_status_isValid = ::OpenAPI::fromJsonValue(m_identity_status, json[QString("identity_status")]);
    m_identity_status_isSet = !json[QString("identity_status")].isNull() && m_identity_status_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mock_isValid = ::OpenAPI::fromJsonValue(m_mock, json[QString("mock")]);
    m_mock_isSet = !json[QString("mock")].isNull() && m_mock_isValid;

    m_russell_3000_isValid = ::OpenAPI::fromJsonValue(m_russell_3000, json[QString("russell_3000")]);
    m_russell_3000_isSet = !json[QString("russell_3000")].isNull() && m_russell_3000_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_skip_automatic_sec_vet_isValid = ::OpenAPI::fromJsonValue(m_skip_automatic_sec_vet, json[QString("skip_automatic_sec_vet")]);
    m_skip_automatic_sec_vet_isSet = !json[QString("skip_automatic_sec_vet")].isNull() && m_skip_automatic_sec_vet_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_exempt_status_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt_status, json[QString("tax_exempt_status")]);
    m_tax_exempt_status_isSet = !json[QString("tax_exempt_status")].isNull() && m_tax_exempt_status_isValid;

    m_tcr_id_isValid = ::OpenAPI::fromJsonValue(m_tcr_id, json[QString("tcr_id")]);
    m_tcr_id_isSet = !json[QString("tcr_id")].isNull() && m_tcr_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMessaging_v1_brand_registrations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessaging_v1_brand_registrations::asJsonObject() const {
    QJsonObject obj;
    if (m_a2p_profile_bundle_sid_isSet) {
        obj.insert(QString("a2p_profile_bundle_sid"), ::OpenAPI::toJsonValue(m_a2p_profile_bundle_sid));
    }
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_brand_feedback.size() > 0) {
        obj.insert(QString("brand_feedback"), ::OpenAPI::toJsonValue(m_brand_feedback));
    }
    if (m_brand_score_isSet) {
        obj.insert(QString("brand_score"), ::OpenAPI::toJsonValue(m_brand_score));
    }
    if (m_brand_type_isSet) {
        obj.insert(QString("brand_type"), ::OpenAPI::toJsonValue(m_brand_type));
    }
    if (m_customer_profile_bundle_sid_isSet) {
        obj.insert(QString("customer_profile_bundle_sid"), ::OpenAPI::toJsonValue(m_customer_profile_bundle_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failure_reason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_government_entity_isSet) {
        obj.insert(QString("government_entity"), ::OpenAPI::toJsonValue(m_government_entity));
    }
    if (m_identity_status.isSet()) {
        obj.insert(QString("identity_status"), ::OpenAPI::toJsonValue(m_identity_status));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mock_isSet) {
        obj.insert(QString("mock"), ::OpenAPI::toJsonValue(m_mock));
    }
    if (m_russell_3000_isSet) {
        obj.insert(QString("russell_3000"), ::OpenAPI::toJsonValue(m_russell_3000));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_skip_automatic_sec_vet_isSet) {
        obj.insert(QString("skip_automatic_sec_vet"), ::OpenAPI::toJsonValue(m_skip_automatic_sec_vet));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_exempt_status_isSet) {
        obj.insert(QString("tax_exempt_status"), ::OpenAPI::toJsonValue(m_tax_exempt_status));
    }
    if (m_tcr_id_isSet) {
        obj.insert(QString("tcr_id"), ::OpenAPI::toJsonValue(m_tcr_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMessaging_v1_brand_registrations::getA2pProfileBundleSid() const {
    return m_a2p_profile_bundle_sid;
}
void OAIMessaging_v1_brand_registrations::setA2pProfileBundleSid(const QString &a2p_profile_bundle_sid) {
    m_a2p_profile_bundle_sid = a2p_profile_bundle_sid;
    m_a2p_profile_bundle_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_a2p_profile_bundle_sid_Set() const{
    return m_a2p_profile_bundle_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_a2p_profile_bundle_sid_Valid() const{
    return m_a2p_profile_bundle_sid_isValid;
}

QString OAIMessaging_v1_brand_registrations::getAccountSid() const {
    return m_account_sid;
}
void OAIMessaging_v1_brand_registrations::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<OAIBrand_registrations_enum_brand_feedback> OAIMessaging_v1_brand_registrations::getBrandFeedback() const {
    return m_brand_feedback;
}
void OAIMessaging_v1_brand_registrations::setBrandFeedback(const QList<OAIBrand_registrations_enum_brand_feedback> &brand_feedback) {
    m_brand_feedback = brand_feedback;
    m_brand_feedback_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_brand_feedback_Set() const{
    return m_brand_feedback_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_brand_feedback_Valid() const{
    return m_brand_feedback_isValid;
}

qint32 OAIMessaging_v1_brand_registrations::getBrandScore() const {
    return m_brand_score;
}
void OAIMessaging_v1_brand_registrations::setBrandScore(const qint32 &brand_score) {
    m_brand_score = brand_score;
    m_brand_score_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_brand_score_Set() const{
    return m_brand_score_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_brand_score_Valid() const{
    return m_brand_score_isValid;
}

QString OAIMessaging_v1_brand_registrations::getBrandType() const {
    return m_brand_type;
}
void OAIMessaging_v1_brand_registrations::setBrandType(const QString &brand_type) {
    m_brand_type = brand_type;
    m_brand_type_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_brand_type_Set() const{
    return m_brand_type_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_brand_type_Valid() const{
    return m_brand_type_isValid;
}

QString OAIMessaging_v1_brand_registrations::getCustomerProfileBundleSid() const {
    return m_customer_profile_bundle_sid;
}
void OAIMessaging_v1_brand_registrations::setCustomerProfileBundleSid(const QString &customer_profile_bundle_sid) {
    m_customer_profile_bundle_sid = customer_profile_bundle_sid;
    m_customer_profile_bundle_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_customer_profile_bundle_sid_Set() const{
    return m_customer_profile_bundle_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_customer_profile_bundle_sid_Valid() const{
    return m_customer_profile_bundle_sid_isValid;
}

QDateTime OAIMessaging_v1_brand_registrations::getDateCreated() const {
    return m_date_created;
}
void OAIMessaging_v1_brand_registrations::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMessaging_v1_brand_registrations::getDateUpdated() const {
    return m_date_updated;
}
void OAIMessaging_v1_brand_registrations::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIMessaging_v1_brand_registrations::getFailureReason() const {
    return m_failure_reason;
}
void OAIMessaging_v1_brand_registrations::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIMessaging_v1_brand_registrations::isGovernmentEntity() const {
    return m_government_entity;
}
void OAIMessaging_v1_brand_registrations::setGovernmentEntity(const bool &government_entity) {
    m_government_entity = government_entity;
    m_government_entity_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_government_entity_Set() const{
    return m_government_entity_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_government_entity_Valid() const{
    return m_government_entity_isValid;
}

OAIBrand_registrations_enum_identity_status OAIMessaging_v1_brand_registrations::getIdentityStatus() const {
    return m_identity_status;
}
void OAIMessaging_v1_brand_registrations::setIdentityStatus(const OAIBrand_registrations_enum_identity_status &identity_status) {
    m_identity_status = identity_status;
    m_identity_status_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_identity_status_Set() const{
    return m_identity_status_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_identity_status_Valid() const{
    return m_identity_status_isValid;
}

OAIObject OAIMessaging_v1_brand_registrations::getLinks() const {
    return m_links;
}
void OAIMessaging_v1_brand_registrations::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIMessaging_v1_brand_registrations::isMock() const {
    return m_mock;
}
void OAIMessaging_v1_brand_registrations::setMock(const bool &mock) {
    m_mock = mock;
    m_mock_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_mock_Set() const{
    return m_mock_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_mock_Valid() const{
    return m_mock_isValid;
}

bool OAIMessaging_v1_brand_registrations::isRussell3000() const {
    return m_russell_3000;
}
void OAIMessaging_v1_brand_registrations::setRussell3000(const bool &russell_3000) {
    m_russell_3000 = russell_3000;
    m_russell_3000_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_russell_3000_Set() const{
    return m_russell_3000_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_russell_3000_Valid() const{
    return m_russell_3000_isValid;
}

QString OAIMessaging_v1_brand_registrations::getSid() const {
    return m_sid;
}
void OAIMessaging_v1_brand_registrations::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAIMessaging_v1_brand_registrations::isSkipAutomaticSecVet() const {
    return m_skip_automatic_sec_vet;
}
void OAIMessaging_v1_brand_registrations::setSkipAutomaticSecVet(const bool &skip_automatic_sec_vet) {
    m_skip_automatic_sec_vet = skip_automatic_sec_vet;
    m_skip_automatic_sec_vet_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_skip_automatic_sec_vet_Set() const{
    return m_skip_automatic_sec_vet_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_skip_automatic_sec_vet_Valid() const{
    return m_skip_automatic_sec_vet_isValid;
}

OAIBrand_registrations_enum_status OAIMessaging_v1_brand_registrations::getStatus() const {
    return m_status;
}
void OAIMessaging_v1_brand_registrations::setStatus(const OAIBrand_registrations_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessaging_v1_brand_registrations::getTaxExemptStatus() const {
    return m_tax_exempt_status;
}
void OAIMessaging_v1_brand_registrations::setTaxExemptStatus(const QString &tax_exempt_status) {
    m_tax_exempt_status = tax_exempt_status;
    m_tax_exempt_status_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_tax_exempt_status_Set() const{
    return m_tax_exempt_status_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_tax_exempt_status_Valid() const{
    return m_tax_exempt_status_isValid;
}

QString OAIMessaging_v1_brand_registrations::getTcrId() const {
    return m_tcr_id;
}
void OAIMessaging_v1_brand_registrations::setTcrId(const QString &tcr_id) {
    m_tcr_id = tcr_id;
    m_tcr_id_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_tcr_id_Set() const{
    return m_tcr_id_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_tcr_id_Valid() const{
    return m_tcr_id_isValid;
}

QString OAIMessaging_v1_brand_registrations::getUrl() const {
    return m_url;
}
void OAIMessaging_v1_brand_registrations::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMessaging_v1_brand_registrations::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMessaging_v1_brand_registrations::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMessaging_v1_brand_registrations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a2p_profile_bundle_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_feedback.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_profile_bundle_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_government_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_russell_3000_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_automatic_sec_vet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcr_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessaging_v1_brand_registrations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
