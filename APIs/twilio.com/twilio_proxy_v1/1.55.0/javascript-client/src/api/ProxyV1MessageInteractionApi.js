/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMessageInteractionResponse from '../model/ListMessageInteractionResponse';
import ProxyV1ServiceSessionParticipantMessageInteraction from '../model/ProxyV1ServiceSessionParticipantMessageInteraction';

/**
* ProxyV1MessageInteraction service.
* @module api/ProxyV1MessageInteractionApi
* @version 1.55.0
*/
export default class ProxyV1MessageInteractionApi {

    /**
    * Constructs a new ProxyV1MessageInteractionApi. 
    * @alias module:api/ProxyV1MessageInteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessageInteraction operation.
     * @callback module:api/ProxyV1MessageInteractionApi~createMessageInteractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyV1ServiceSessionParticipantMessageInteraction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
     * @param {String} sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) resource.
     * @param {String} participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource.
     * @param {Object} opts Optional parameters
     * @param {String} [body] The message to send to the participant
     * @param {Array.<String>} [mediaUrl] Reserved. Not currently supported.
     * @param {module:api/ProxyV1MessageInteractionApi~createMessageInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyV1ServiceSessionParticipantMessageInteraction}
     */
    createMessageInteraction(serviceSid, sessionSid, participantSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createMessageInteraction");
      }
      // verify the required parameter 'sessionSid' is set
      if (sessionSid === undefined || sessionSid === null) {
        throw new Error("Missing the required parameter 'sessionSid' when calling createMessageInteraction");
      }
      // verify the required parameter 'participantSid' is set
      if (participantSid === undefined || participantSid === null) {
        throw new Error("Missing the required parameter 'participantSid' when calling createMessageInteraction");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'SessionSid': sessionSid,
        'ParticipantSid': participantSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Body': opts['body'],
        'MediaUrl': this.apiClient.buildCollectionParam(opts['mediaUrl'], 'csv')
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ProxyV1ServiceSessionParticipantMessageInteraction;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMessageInteraction operation.
     * @callback module:api/ProxyV1MessageInteractionApi~fetchMessageInteractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyV1ServiceSessionParticipantMessageInteraction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to fetch.
     * @param {String} sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) of the resource to fetch.
     * @param {String} participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) resource.
     * @param {String} sid The Twilio-provided string that uniquely identifies the MessageInteraction resource to fetch.
     * @param {module:api/ProxyV1MessageInteractionApi~fetchMessageInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyV1ServiceSessionParticipantMessageInteraction}
     */
    fetchMessageInteraction(serviceSid, sessionSid, participantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchMessageInteraction");
      }
      // verify the required parameter 'sessionSid' is set
      if (sessionSid === undefined || sessionSid === null) {
        throw new Error("Missing the required parameter 'sessionSid' when calling fetchMessageInteraction");
      }
      // verify the required parameter 'participantSid' is set
      if (participantSid === undefined || participantSid === null) {
        throw new Error("Missing the required parameter 'participantSid' when calling fetchMessageInteraction");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMessageInteraction");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'SessionSid': sessionSid,
        'ParticipantSid': participantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProxyV1ServiceSessionParticipantMessageInteraction;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessageInteraction operation.
     * @callback module:api/ProxyV1MessageInteractionApi~listMessageInteractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessageInteractionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from.
     * @param {String} sessionSid The SID of the parent [Session](https://www.twilio.com/docs/proxy/api/session) to read the resources from.
     * @param {String} participantSid The SID of the [Participant](https://www.twilio.com/docs/proxy/api/participant) to read the resources from.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ProxyV1MessageInteractionApi~listMessageInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessageInteractionResponse}
     */
    listMessageInteraction(serviceSid, sessionSid, participantSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listMessageInteraction");
      }
      // verify the required parameter 'sessionSid' is set
      if (sessionSid === undefined || sessionSid === null) {
        throw new Error("Missing the required parameter 'sessionSid' when calling listMessageInteraction");
      }
      // verify the required parameter 'participantSid' is set
      if (participantSid === undefined || participantSid === null) {
        throw new Error("Missing the required parameter 'participantSid' when calling listMessageInteraction");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'SessionSid': sessionSid,
        'ParticipantSid': participantSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessageInteractionResponse;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
