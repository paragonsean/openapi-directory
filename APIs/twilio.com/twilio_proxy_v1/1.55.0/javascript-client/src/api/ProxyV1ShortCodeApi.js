/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListShortCodeResponse from '../model/ListShortCodeResponse';
import ProxyV1ServiceShortCode from '../model/ProxyV1ServiceShortCode';

/**
* ProxyV1ShortCode service.
* @module api/ProxyV1ShortCodeApi
* @version 1.55.0
*/
export default class ProxyV1ShortCodeApi {

    /**
    * Constructs a new ProxyV1ShortCodeApi. 
    * @alias module:api/ProxyV1ShortCodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createShortCode operation.
     * @callback module:api/ProxyV1ShortCodeApi~createShortCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyV1ServiceShortCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Short Code to the Proxy Number Pool for the Service.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource.
     * @param {String} sid The SID of a Twilio [ShortCode](https://www.twilio.com/en-us/messaging/channels/sms/short-codes) resource that represents the short code you would like to assign to your Proxy Service.
     * @param {module:api/ProxyV1ShortCodeApi~createShortCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyV1ServiceShortCode}
     */
    createShortCode(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createShortCode");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling createShortCode");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Sid': sid
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ProxyV1ServiceShortCode;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/ShortCodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteShortCode operation.
     * @callback module:api/ProxyV1ShortCodeApi~deleteShortCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Short Code from a Service.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) resource to delete the ShortCode resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the ShortCode resource to delete.
     * @param {module:api/ProxyV1ShortCodeApi~deleteShortCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteShortCode(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteShortCode");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteShortCode");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchShortCode operation.
     * @callback module:api/ProxyV1ShortCodeApi~fetchShortCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyV1ServiceShortCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Short Code.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to fetch the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the ShortCode resource to fetch.
     * @param {module:api/ProxyV1ShortCodeApi~fetchShortCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyV1ServiceShortCode}
     */
    fetchShortCode(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchShortCode");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchShortCode");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProxyV1ServiceShortCode;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listShortCode operation.
     * @callback module:api/ProxyV1ShortCodeApi~listShortCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShortCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) to read the resources from.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ProxyV1ShortCodeApi~listShortCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShortCodeResponse}
     */
    listShortCode(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listShortCode");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShortCodeResponse;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/ShortCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShortCode operation.
     * @callback module:api/ProxyV1ShortCodeApi~updateShortCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyV1ServiceShortCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Short Code.
     * @param {String} serviceSid The SID of the parent [Service](https://www.twilio.com/docs/proxy/api/service) of the resource to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the ShortCode resource to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isReserved] Whether the short code should be reserved and not be assigned to a participant using proxy pool logic. See [Reserved Phone Numbers](https://www.twilio.com/docs/proxy/reserved-phone-numbers) for more information.
     * @param {module:api/ProxyV1ShortCodeApi~updateShortCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyV1ServiceShortCode}
     */
    updateShortCode(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateShortCode");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateShortCode");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'IsReserved': opts['isReserved']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ProxyV1ServiceShortCode;
      let basePaths = ['https://proxy.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
