# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.session_enum_mode import SessionEnumMode
from openapi_server.models.session_enum_status import SessionEnumStatus
import re
from openapi_server import util


class ProxyV1ServiceSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, closed_reason: str=None, date_created: datetime=None, date_ended: datetime=None, date_expiry: datetime=None, date_last_interaction: datetime=None, date_started: datetime=None, date_updated: datetime=None, links: object=None, mode: SessionEnumMode=None, service_sid: str=None, sid: str=None, status: SessionEnumStatus=None, ttl: int=None, unique_name: str=None, url: str=None):
        """ProxyV1ServiceSession - a model defined in OpenAPI

        :param account_sid: The account_sid of this ProxyV1ServiceSession.
        :param closed_reason: The closed_reason of this ProxyV1ServiceSession.
        :param date_created: The date_created of this ProxyV1ServiceSession.
        :param date_ended: The date_ended of this ProxyV1ServiceSession.
        :param date_expiry: The date_expiry of this ProxyV1ServiceSession.
        :param date_last_interaction: The date_last_interaction of this ProxyV1ServiceSession.
        :param date_started: The date_started of this ProxyV1ServiceSession.
        :param date_updated: The date_updated of this ProxyV1ServiceSession.
        :param links: The links of this ProxyV1ServiceSession.
        :param mode: The mode of this ProxyV1ServiceSession.
        :param service_sid: The service_sid of this ProxyV1ServiceSession.
        :param sid: The sid of this ProxyV1ServiceSession.
        :param status: The status of this ProxyV1ServiceSession.
        :param ttl: The ttl of this ProxyV1ServiceSession.
        :param unique_name: The unique_name of this ProxyV1ServiceSession.
        :param url: The url of this ProxyV1ServiceSession.
        """
        self.openapi_types = {
            'account_sid': str,
            'closed_reason': str,
            'date_created': datetime,
            'date_ended': datetime,
            'date_expiry': datetime,
            'date_last_interaction': datetime,
            'date_started': datetime,
            'date_updated': datetime,
            'links': object,
            'mode': SessionEnumMode,
            'service_sid': str,
            'sid': str,
            'status': SessionEnumStatus,
            'ttl': int,
            'unique_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'closed_reason': 'closed_reason',
            'date_created': 'date_created',
            'date_ended': 'date_ended',
            'date_expiry': 'date_expiry',
            'date_last_interaction': 'date_last_interaction',
            'date_started': 'date_started',
            'date_updated': 'date_updated',
            'links': 'links',
            'mode': 'mode',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'status': 'status',
            'ttl': 'ttl',
            'unique_name': 'unique_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._closed_reason = closed_reason
        self._date_created = date_created
        self._date_ended = date_ended
        self._date_expiry = date_expiry
        self._date_last_interaction = date_last_interaction
        self._date_started = date_started
        self._date_updated = date_updated
        self._links = links
        self._mode = mode
        self._service_sid = service_sid
        self._sid = sid
        self._status = status
        self._ttl = ttl
        self._unique_name = unique_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProxyV1ServiceSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The proxy.v1.service.session of this ProxyV1ServiceSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ProxyV1ServiceSession.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Session resource.

        :return: The account_sid of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ProxyV1ServiceSession.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Session resource.

        :param account_sid: The account_sid of this ProxyV1ServiceSession.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def closed_reason(self):
        """Gets the closed_reason of this ProxyV1ServiceSession.

        The reason the Session ended.

        :return: The closed_reason of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._closed_reason

    @closed_reason.setter
    def closed_reason(self, closed_reason):
        """Sets the closed_reason of this ProxyV1ServiceSession.

        The reason the Session ended.

        :param closed_reason: The closed_reason of this ProxyV1ServiceSession.
        :type closed_reason: str
        """

        self._closed_reason = closed_reason

    @property
    def date_created(self):
        """Gets the date_created of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was created.

        :return: The date_created of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was created.

        :param date_created: The date_created of this ProxyV1ServiceSession.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_ended(self):
        """Gets the date_ended of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session ended.

        :return: The date_ended of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_ended

    @date_ended.setter
    def date_ended(self, date_ended):
        """Sets the date_ended of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session ended.

        :param date_ended: The date_ended of this ProxyV1ServiceSession.
        :type date_ended: datetime
        """

        self._date_ended = date_ended

    @property
    def date_expiry(self):
        """Gets the date_expiry of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session should expire. If this is value is present, it overrides the `ttl` value.

        :return: The date_expiry of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_expiry

    @date_expiry.setter
    def date_expiry(self, date_expiry):
        """Sets the date_expiry of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session should expire. If this is value is present, it overrides the `ttl` value.

        :param date_expiry: The date_expiry of this ProxyV1ServiceSession.
        :type date_expiry: datetime
        """

        self._date_expiry = date_expiry

    @property
    def date_last_interaction(self):
        """Gets the date_last_interaction of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session last had an interaction.

        :return: The date_last_interaction of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_last_interaction

    @date_last_interaction.setter
    def date_last_interaction(self, date_last_interaction):
        """Sets the date_last_interaction of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session last had an interaction.

        :param date_last_interaction: The date_last_interaction of this ProxyV1ServiceSession.
        :type date_last_interaction: datetime
        """

        self._date_last_interaction = date_last_interaction

    @property
    def date_started(self):
        """Gets the date_started of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session started.

        :return: The date_started of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_started

    @date_started.setter
    def date_started(self, date_started):
        """Sets the date_started of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session started.

        :param date_started: The date_started of this ProxyV1ServiceSession.
        :type date_started: datetime
        """

        self._date_started = date_started

    @property
    def date_updated(self):
        """Gets the date_updated of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was last updated.

        :return: The date_updated of this ProxyV1ServiceSession.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ProxyV1ServiceSession.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was last updated.

        :param date_updated: The date_updated of this ProxyV1ServiceSession.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def links(self):
        """Gets the links of this ProxyV1ServiceSession.

        The URLs of resources related to the Session.

        :return: The links of this ProxyV1ServiceSession.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ProxyV1ServiceSession.

        The URLs of resources related to the Session.

        :param links: The links of this ProxyV1ServiceSession.
        :type links: object
        """

        self._links = links

    @property
    def mode(self):
        """Gets the mode of this ProxyV1ServiceSession.


        :return: The mode of this ProxyV1ServiceSession.
        :rtype: SessionEnumMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ProxyV1ServiceSession.


        :param mode: The mode of this ProxyV1ServiceSession.
        :type mode: SessionEnumMode
        """

        self._mode = mode

    @property
    def service_sid(self):
        """Gets the service_sid of this ProxyV1ServiceSession.

        The SID of the [Service](https://www.twilio.com/docs/proxy/api/service) the session is associated with.

        :return: The service_sid of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ProxyV1ServiceSession.

        The SID of the [Service](https://www.twilio.com/docs/proxy/api/service) the session is associated with.

        :param service_sid: The service_sid of this ProxyV1ServiceSession.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^KS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^KS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ProxyV1ServiceSession.

        The unique string that we created to identify the Session resource.

        :return: The sid of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ProxyV1ServiceSession.

        The unique string that we created to identify the Session resource.

        :param sid: The sid of this ProxyV1ServiceSession.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^KC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^KC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this ProxyV1ServiceSession.


        :return: The status of this ProxyV1ServiceSession.
        :rtype: SessionEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProxyV1ServiceSession.


        :param status: The status of this ProxyV1ServiceSession.
        :type status: SessionEnumStatus
        """

        self._status = status

    @property
    def ttl(self):
        """Gets the ttl of this ProxyV1ServiceSession.

        The time, in seconds, when the session will expire. The time is measured from the last Session create or the Session's last Interaction.

        :return: The ttl of this ProxyV1ServiceSession.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ProxyV1ServiceSession.

        The time, in seconds, when the session will expire. The time is measured from the last Session create or the Session's last Interaction.

        :param ttl: The ttl of this ProxyV1ServiceSession.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def unique_name(self):
        """Gets the unique_name of this ProxyV1ServiceSession.

        An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. Supports UTF-8 characters. **This value should not have PII.**

        :return: The unique_name of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this ProxyV1ServiceSession.

        An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. Supports UTF-8 characters. **This value should not have PII.**

        :param unique_name: The unique_name of this ProxyV1ServiceSession.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this ProxyV1ServiceSession.

        The absolute URL of the Session resource.

        :return: The url of this ProxyV1ServiceSession.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProxyV1ServiceSession.

        The absolute URL of the Session resource.

        :param url: The url of this ProxyV1ServiceSession.
        :type url: str
        """

        self._url = url
