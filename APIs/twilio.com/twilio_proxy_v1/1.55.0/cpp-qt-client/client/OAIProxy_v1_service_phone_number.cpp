/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxy_v1_service_phone_number.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxy_v1_service_phone_number::OAIProxy_v1_service_phone_number(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxy_v1_service_phone_number::OAIProxy_v1_service_phone_number() {
    this->initializeModel();
}

OAIProxy_v1_service_phone_number::~OAIProxy_v1_service_phone_number() {}

void OAIProxy_v1_service_phone_number::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_is_reserved_isSet = false;
    m_is_reserved_isValid = false;

    m_iso_country_isSet = false;
    m_iso_country_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProxy_v1_service_phone_number::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxy_v1_service_phone_number::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("in_use")]);
    m_in_use_isSet = !json[QString("in_use")].isNull() && m_in_use_isValid;

    m_is_reserved_isValid = ::OpenAPI::fromJsonValue(m_is_reserved, json[QString("is_reserved")]);
    m_is_reserved_isSet = !json[QString("is_reserved")].isNull() && m_is_reserved_isValid;

    m_iso_country_isValid = ::OpenAPI::fromJsonValue(m_iso_country, json[QString("iso_country")]);
    m_iso_country_isSet = !json[QString("iso_country")].isNull() && m_iso_country_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProxy_v1_service_phone_number::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxy_v1_service_phone_number::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_in_use_isSet) {
        obj.insert(QString("in_use"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_is_reserved_isSet) {
        obj.insert(QString("is_reserved"), ::OpenAPI::toJsonValue(m_is_reserved));
    }
    if (m_iso_country_isSet) {
        obj.insert(QString("iso_country"), ::OpenAPI::toJsonValue(m_iso_country));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProxy_v1_service_phone_number::getAccountSid() const {
    return m_account_sid;
}
void OAIProxy_v1_service_phone_number::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIProxy_v1_service_phone_number::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIProxy_v1_service_phone_number_capabilities OAIProxy_v1_service_phone_number::getCapabilities() const {
    return m_capabilities;
}
void OAIProxy_v1_service_phone_number::setCapabilities(const OAIProxy_v1_service_phone_number_capabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIProxy_v1_service_phone_number::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QDateTime OAIProxy_v1_service_phone_number::getDateCreated() const {
    return m_date_created;
}
void OAIProxy_v1_service_phone_number::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIProxy_v1_service_phone_number::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIProxy_v1_service_phone_number::getDateUpdated() const {
    return m_date_updated;
}
void OAIProxy_v1_service_phone_number::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIProxy_v1_service_phone_number::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIProxy_v1_service_phone_number::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProxy_v1_service_phone_number::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProxy_v1_service_phone_number::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

qint32 OAIProxy_v1_service_phone_number::getInUse() const {
    return m_in_use;
}
void OAIProxy_v1_service_phone_number::setInUse(const qint32 &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAIProxy_v1_service_phone_number::is_in_use_Valid() const{
    return m_in_use_isValid;
}

bool OAIProxy_v1_service_phone_number::isIsReserved() const {
    return m_is_reserved;
}
void OAIProxy_v1_service_phone_number::setIsReserved(const bool &is_reserved) {
    m_is_reserved = is_reserved;
    m_is_reserved_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_is_reserved_Set() const{
    return m_is_reserved_isSet;
}

bool OAIProxy_v1_service_phone_number::is_is_reserved_Valid() const{
    return m_is_reserved_isValid;
}

QString OAIProxy_v1_service_phone_number::getIsoCountry() const {
    return m_iso_country;
}
void OAIProxy_v1_service_phone_number::setIsoCountry(const QString &iso_country) {
    m_iso_country = iso_country;
    m_iso_country_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_iso_country_Set() const{
    return m_iso_country_isSet;
}

bool OAIProxy_v1_service_phone_number::is_iso_country_Valid() const{
    return m_iso_country_isValid;
}

QString OAIProxy_v1_service_phone_number::getPhoneNumber() const {
    return m_phone_number;
}
void OAIProxy_v1_service_phone_number::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIProxy_v1_service_phone_number::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIProxy_v1_service_phone_number::getServiceSid() const {
    return m_service_sid;
}
void OAIProxy_v1_service_phone_number::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIProxy_v1_service_phone_number::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIProxy_v1_service_phone_number::getSid() const {
    return m_sid;
}
void OAIProxy_v1_service_phone_number::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIProxy_v1_service_phone_number::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIProxy_v1_service_phone_number::getUrl() const {
    return m_url;
}
void OAIProxy_v1_service_phone_number::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProxy_v1_service_phone_number::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProxy_v1_service_phone_number::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProxy_v1_service_phone_number::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxy_v1_service_phone_number::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
