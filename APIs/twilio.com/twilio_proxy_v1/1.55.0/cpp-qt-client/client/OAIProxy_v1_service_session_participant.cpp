/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxy_v1_service_session_participant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxy_v1_service_session_participant::OAIProxy_v1_service_session_participant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxy_v1_service_session_participant::OAIProxy_v1_service_session_participant() {
    this->initializeModel();
}

OAIProxy_v1_service_session_participant::~OAIProxy_v1_service_session_participant() {}

void OAIProxy_v1_service_session_participant::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_deleted_isSet = false;
    m_date_deleted_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_proxy_identifier_isSet = false;
    m_proxy_identifier_isValid = false;

    m_proxy_identifier_sid_isSet = false;
    m_proxy_identifier_sid_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_session_sid_isSet = false;
    m_session_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProxy_v1_service_session_participant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxy_v1_service_session_participant::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_deleted_isValid = ::OpenAPI::fromJsonValue(m_date_deleted, json[QString("date_deleted")]);
    m_date_deleted_isSet = !json[QString("date_deleted")].isNull() && m_date_deleted_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_proxy_identifier_isValid = ::OpenAPI::fromJsonValue(m_proxy_identifier, json[QString("proxy_identifier")]);
    m_proxy_identifier_isSet = !json[QString("proxy_identifier")].isNull() && m_proxy_identifier_isValid;

    m_proxy_identifier_sid_isValid = ::OpenAPI::fromJsonValue(m_proxy_identifier_sid, json[QString("proxy_identifier_sid")]);
    m_proxy_identifier_sid_isSet = !json[QString("proxy_identifier_sid")].isNull() && m_proxy_identifier_sid_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_session_sid_isValid = ::OpenAPI::fromJsonValue(m_session_sid, json[QString("session_sid")]);
    m_session_sid_isSet = !json[QString("session_sid")].isNull() && m_session_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProxy_v1_service_session_participant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxy_v1_service_session_participant::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_deleted_isSet) {
        obj.insert(QString("date_deleted"), ::OpenAPI::toJsonValue(m_date_deleted));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_proxy_identifier_isSet) {
        obj.insert(QString("proxy_identifier"), ::OpenAPI::toJsonValue(m_proxy_identifier));
    }
    if (m_proxy_identifier_sid_isSet) {
        obj.insert(QString("proxy_identifier_sid"), ::OpenAPI::toJsonValue(m_proxy_identifier_sid));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_session_sid_isSet) {
        obj.insert(QString("session_sid"), ::OpenAPI::toJsonValue(m_session_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProxy_v1_service_session_participant::getAccountSid() const {
    return m_account_sid;
}
void OAIProxy_v1_service_session_participant::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIProxy_v1_service_session_participant::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIProxy_v1_service_session_participant::getDateCreated() const {
    return m_date_created;
}
void OAIProxy_v1_service_session_participant::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIProxy_v1_service_session_participant::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIProxy_v1_service_session_participant::getDateDeleted() const {
    return m_date_deleted;
}
void OAIProxy_v1_service_session_participant::setDateDeleted(const QDateTime &date_deleted) {
    m_date_deleted = date_deleted;
    m_date_deleted_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_date_deleted_Set() const{
    return m_date_deleted_isSet;
}

bool OAIProxy_v1_service_session_participant::is_date_deleted_Valid() const{
    return m_date_deleted_isValid;
}

QDateTime OAIProxy_v1_service_session_participant::getDateUpdated() const {
    return m_date_updated;
}
void OAIProxy_v1_service_session_participant::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIProxy_v1_service_session_participant::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIProxy_v1_service_session_participant::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProxy_v1_service_session_participant::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProxy_v1_service_session_participant::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIProxy_v1_service_session_participant::getIdentifier() const {
    return m_identifier;
}
void OAIProxy_v1_service_session_participant::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIProxy_v1_service_session_participant::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIObject OAIProxy_v1_service_session_participant::getLinks() const {
    return m_links;
}
void OAIProxy_v1_service_session_participant::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProxy_v1_service_session_participant::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIProxy_v1_service_session_participant::getProxyIdentifier() const {
    return m_proxy_identifier;
}
void OAIProxy_v1_service_session_participant::setProxyIdentifier(const QString &proxy_identifier) {
    m_proxy_identifier = proxy_identifier;
    m_proxy_identifier_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_proxy_identifier_Set() const{
    return m_proxy_identifier_isSet;
}

bool OAIProxy_v1_service_session_participant::is_proxy_identifier_Valid() const{
    return m_proxy_identifier_isValid;
}

QString OAIProxy_v1_service_session_participant::getProxyIdentifierSid() const {
    return m_proxy_identifier_sid;
}
void OAIProxy_v1_service_session_participant::setProxyIdentifierSid(const QString &proxy_identifier_sid) {
    m_proxy_identifier_sid = proxy_identifier_sid;
    m_proxy_identifier_sid_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_proxy_identifier_sid_Set() const{
    return m_proxy_identifier_sid_isSet;
}

bool OAIProxy_v1_service_session_participant::is_proxy_identifier_sid_Valid() const{
    return m_proxy_identifier_sid_isValid;
}

QString OAIProxy_v1_service_session_participant::getServiceSid() const {
    return m_service_sid;
}
void OAIProxy_v1_service_session_participant::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIProxy_v1_service_session_participant::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIProxy_v1_service_session_participant::getSessionSid() const {
    return m_session_sid;
}
void OAIProxy_v1_service_session_participant::setSessionSid(const QString &session_sid) {
    m_session_sid = session_sid;
    m_session_sid_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_session_sid_Set() const{
    return m_session_sid_isSet;
}

bool OAIProxy_v1_service_session_participant::is_session_sid_Valid() const{
    return m_session_sid_isValid;
}

QString OAIProxy_v1_service_session_participant::getSid() const {
    return m_sid;
}
void OAIProxy_v1_service_session_participant::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIProxy_v1_service_session_participant::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIProxy_v1_service_session_participant::getUrl() const {
    return m_url;
}
void OAIProxy_v1_service_session_participant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProxy_v1_service_session_participant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProxy_v1_service_session_participant::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProxy_v1_service_session_participant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_identifier_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxy_v1_service_session_participant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
