/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxy_v1_service_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxy_v1_service_session::OAIProxy_v1_service_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxy_v1_service_session::OAIProxy_v1_service_session() {
    this->initializeModel();
}

OAIProxy_v1_service_session::~OAIProxy_v1_service_session() {}

void OAIProxy_v1_service_session::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_closed_reason_isSet = false;
    m_closed_reason_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_ended_isSet = false;
    m_date_ended_isValid = false;

    m_date_expiry_isSet = false;
    m_date_expiry_isValid = false;

    m_date_last_interaction_isSet = false;
    m_date_last_interaction_isValid = false;

    m_date_started_isSet = false;
    m_date_started_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProxy_v1_service_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxy_v1_service_session::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_closed_reason_isValid = ::OpenAPI::fromJsonValue(m_closed_reason, json[QString("closed_reason")]);
    m_closed_reason_isSet = !json[QString("closed_reason")].isNull() && m_closed_reason_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_ended_isValid = ::OpenAPI::fromJsonValue(m_date_ended, json[QString("date_ended")]);
    m_date_ended_isSet = !json[QString("date_ended")].isNull() && m_date_ended_isValid;

    m_date_expiry_isValid = ::OpenAPI::fromJsonValue(m_date_expiry, json[QString("date_expiry")]);
    m_date_expiry_isSet = !json[QString("date_expiry")].isNull() && m_date_expiry_isValid;

    m_date_last_interaction_isValid = ::OpenAPI::fromJsonValue(m_date_last_interaction, json[QString("date_last_interaction")]);
    m_date_last_interaction_isSet = !json[QString("date_last_interaction")].isNull() && m_date_last_interaction_isValid;

    m_date_started_isValid = ::OpenAPI::fromJsonValue(m_date_started, json[QString("date_started")]);
    m_date_started_isSet = !json[QString("date_started")].isNull() && m_date_started_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProxy_v1_service_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxy_v1_service_session::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_closed_reason_isSet) {
        obj.insert(QString("closed_reason"), ::OpenAPI::toJsonValue(m_closed_reason));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_ended_isSet) {
        obj.insert(QString("date_ended"), ::OpenAPI::toJsonValue(m_date_ended));
    }
    if (m_date_expiry_isSet) {
        obj.insert(QString("date_expiry"), ::OpenAPI::toJsonValue(m_date_expiry));
    }
    if (m_date_last_interaction_isSet) {
        obj.insert(QString("date_last_interaction"), ::OpenAPI::toJsonValue(m_date_last_interaction));
    }
    if (m_date_started_isSet) {
        obj.insert(QString("date_started"), ::OpenAPI::toJsonValue(m_date_started));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProxy_v1_service_session::getAccountSid() const {
    return m_account_sid;
}
void OAIProxy_v1_service_session::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIProxy_v1_service_session::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIProxy_v1_service_session::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIProxy_v1_service_session::getClosedReason() const {
    return m_closed_reason;
}
void OAIProxy_v1_service_session::setClosedReason(const QString &closed_reason) {
    m_closed_reason = closed_reason;
    m_closed_reason_isSet = true;
}

bool OAIProxy_v1_service_session::is_closed_reason_Set() const{
    return m_closed_reason_isSet;
}

bool OAIProxy_v1_service_session::is_closed_reason_Valid() const{
    return m_closed_reason_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateCreated() const {
    return m_date_created;
}
void OAIProxy_v1_service_session::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIProxy_v1_service_session::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateEnded() const {
    return m_date_ended;
}
void OAIProxy_v1_service_session::setDateEnded(const QDateTime &date_ended) {
    m_date_ended = date_ended;
    m_date_ended_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_ended_Set() const{
    return m_date_ended_isSet;
}

bool OAIProxy_v1_service_session::is_date_ended_Valid() const{
    return m_date_ended_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateExpiry() const {
    return m_date_expiry;
}
void OAIProxy_v1_service_session::setDateExpiry(const QDateTime &date_expiry) {
    m_date_expiry = date_expiry;
    m_date_expiry_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_expiry_Set() const{
    return m_date_expiry_isSet;
}

bool OAIProxy_v1_service_session::is_date_expiry_Valid() const{
    return m_date_expiry_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateLastInteraction() const {
    return m_date_last_interaction;
}
void OAIProxy_v1_service_session::setDateLastInteraction(const QDateTime &date_last_interaction) {
    m_date_last_interaction = date_last_interaction;
    m_date_last_interaction_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_last_interaction_Set() const{
    return m_date_last_interaction_isSet;
}

bool OAIProxy_v1_service_session::is_date_last_interaction_Valid() const{
    return m_date_last_interaction_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateStarted() const {
    return m_date_started;
}
void OAIProxy_v1_service_session::setDateStarted(const QDateTime &date_started) {
    m_date_started = date_started;
    m_date_started_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_started_Set() const{
    return m_date_started_isSet;
}

bool OAIProxy_v1_service_session::is_date_started_Valid() const{
    return m_date_started_isValid;
}

QDateTime OAIProxy_v1_service_session::getDateUpdated() const {
    return m_date_updated;
}
void OAIProxy_v1_service_session::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIProxy_v1_service_session::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIProxy_v1_service_session::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

OAIObject OAIProxy_v1_service_session::getLinks() const {
    return m_links;
}
void OAIProxy_v1_service_session::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProxy_v1_service_session::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProxy_v1_service_session::is_links_Valid() const{
    return m_links_isValid;
}

OAISession_enum_mode OAIProxy_v1_service_session::getMode() const {
    return m_mode;
}
void OAIProxy_v1_service_session::setMode(const OAISession_enum_mode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIProxy_v1_service_session::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIProxy_v1_service_session::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIProxy_v1_service_session::getServiceSid() const {
    return m_service_sid;
}
void OAIProxy_v1_service_session::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIProxy_v1_service_session::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIProxy_v1_service_session::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIProxy_v1_service_session::getSid() const {
    return m_sid;
}
void OAIProxy_v1_service_session::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIProxy_v1_service_session::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIProxy_v1_service_session::is_sid_Valid() const{
    return m_sid_isValid;
}

OAISession_enum_status OAIProxy_v1_service_session::getStatus() const {
    return m_status;
}
void OAIProxy_v1_service_session::setStatus(const OAISession_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProxy_v1_service_session::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProxy_v1_service_session::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIProxy_v1_service_session::getTtl() const {
    return m_ttl;
}
void OAIProxy_v1_service_session::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIProxy_v1_service_session::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIProxy_v1_service_session::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIProxy_v1_service_session::getUniqueName() const {
    return m_unique_name;
}
void OAIProxy_v1_service_session::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIProxy_v1_service_session::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIProxy_v1_service_session::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIProxy_v1_service_session::getUrl() const {
    return m_url;
}
void OAIProxy_v1_service_session::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProxy_v1_service_session::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProxy_v1_service_session::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProxy_v1_service_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_ended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxy_v1_service_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
