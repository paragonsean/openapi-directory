/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProxyV1ParticipantApi_H
#define OAI_OAIProxyV1ParticipantApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListParticipantResponse.h"
#include "OAIProxy_v1_service_session_participant.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProxyV1ParticipantApi : public QObject {
    Q_OBJECT

public:
    OAIProxyV1ParticipantApi(const int timeOut = 0);
    ~OAIProxyV1ParticipantApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  session_sid QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  proxy_identifier QString [optional]
    * @param[in]  proxy_identifier_sid QString [optional]
    */
    virtual void createParticipant(const QString &service_sid, const QString &session_sid, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_identifier_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  session_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteParticipant(const QString &service_sid, const QString &session_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  session_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchParticipant(const QString &service_sid, const QString &session_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  session_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listParticipant(const QString &service_sid, const QString &session_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createParticipantCallback(OAIHttpRequestWorker *worker);
    void deleteParticipantCallback(OAIHttpRequestWorker *worker);
    void fetchParticipantCallback(OAIHttpRequestWorker *worker);
    void listParticipantCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createParticipantSignal(OAIProxy_v1_service_session_participant summary);
    void deleteParticipantSignal();
    void fetchParticipantSignal(OAIProxy_v1_service_session_participant summary);
    void listParticipantSignal(OAIListParticipantResponse summary);


    void createParticipantSignalFull(OAIHttpRequestWorker *worker, OAIProxy_v1_service_session_participant summary);
    void deleteParticipantSignalFull(OAIHttpRequestWorker *worker);
    void fetchParticipantSignalFull(OAIHttpRequestWorker *worker, OAIProxy_v1_service_session_participant summary);
    void listParticipantSignalFull(OAIHttpRequestWorker *worker, OAIListParticipantResponse summary);

    Q_DECL_DEPRECATED_X("Use createParticipantSignalError() instead")
    void createParticipantSignalE(OAIProxy_v1_service_session_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createParticipantSignalError(OAIProxy_v1_service_session_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteParticipantSignalError() instead")
    void deleteParticipantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteParticipantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchParticipantSignalError() instead")
    void fetchParticipantSignalE(OAIProxy_v1_service_session_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchParticipantSignalError(OAIProxy_v1_service_session_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listParticipantSignalError() instead")
    void listParticipantSignalE(OAIListParticipantResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listParticipantSignalError(OAIListParticipantResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createParticipantSignalErrorFull() instead")
    void createParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteParticipantSignalErrorFull() instead")
    void deleteParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchParticipantSignalErrorFull() instead")
    void fetchParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listParticipantSignalErrorFull() instead")
    void listParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
