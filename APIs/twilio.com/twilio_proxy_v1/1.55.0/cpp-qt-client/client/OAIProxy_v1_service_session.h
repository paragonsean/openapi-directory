/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProxy_v1_service_session.h
 *
 * 
 */

#ifndef OAIProxy_v1_service_session_H
#define OAIProxy_v1_service_session_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAISession_enum_mode.h"
#include "OAISession_enum_status.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProxy_v1_service_session : public OAIObject {
public:
    OAIProxy_v1_service_session();
    OAIProxy_v1_service_session(QString json);
    ~OAIProxy_v1_service_session() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QString getClosedReason() const;
    void setClosedReason(const QString &closed_reason);
    bool is_closed_reason_Set() const;
    bool is_closed_reason_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateEnded() const;
    void setDateEnded(const QDateTime &date_ended);
    bool is_date_ended_Set() const;
    bool is_date_ended_Valid() const;

    QDateTime getDateExpiry() const;
    void setDateExpiry(const QDateTime &date_expiry);
    bool is_date_expiry_Set() const;
    bool is_date_expiry_Valid() const;

    QDateTime getDateLastInteraction() const;
    void setDateLastInteraction(const QDateTime &date_last_interaction);
    bool is_date_last_interaction_Set() const;
    bool is_date_last_interaction_Valid() const;

    QDateTime getDateStarted() const;
    void setDateStarted(const QDateTime &date_started);
    bool is_date_started_Set() const;
    bool is_date_started_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAISession_enum_mode getMode() const;
    void setMode(const OAISession_enum_mode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getServiceSid() const;
    void setServiceSid(const QString &service_sid);
    bool is_service_sid_Set() const;
    bool is_service_sid_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    OAISession_enum_status getStatus() const;
    void setStatus(const OAISession_enum_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getTtl() const;
    void setTtl(const qint32 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    QString getUniqueName() const;
    void setUniqueName(const QString &unique_name);
    bool is_unique_name_Set() const;
    bool is_unique_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QString m_closed_reason;
    bool m_closed_reason_isSet;
    bool m_closed_reason_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_ended;
    bool m_date_ended_isSet;
    bool m_date_ended_isValid;

    QDateTime m_date_expiry;
    bool m_date_expiry_isSet;
    bool m_date_expiry_isValid;

    QDateTime m_date_last_interaction;
    bool m_date_last_interaction_isSet;
    bool m_date_last_interaction_isValid;

    QDateTime m_date_started;
    bool m_date_started_isSet;
    bool m_date_started_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAISession_enum_mode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_service_sid;
    bool m_service_sid_isSet;
    bool m_service_sid_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    OAISession_enum_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    QString m_unique_name;
    bool m_unique_name_isSet;
    bool m_unique_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProxy_v1_service_session)

#endif // OAIProxy_v1_service_session_H
