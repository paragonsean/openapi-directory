/**
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProxyV1SessionApi_H
#define OAI_OAIProxyV1SessionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSessionResponse.h"
#include "OAIProxy_v1_service_session.h"
#include "OAISession_enum_mode.h"
#include "OAISession_enum_status.h"
#include <QJsonValue>
#include <QDateTime>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProxyV1SessionApi : public QObject {
    Q_OBJECT

public:
    OAIProxyV1SessionApi(const int timeOut = 0);
    ~OAIProxyV1SessionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  date_expiry QDateTime [optional]
    * @param[in]  mode OAISession_enum_mode [optional]
    * @param[in]  participants QList<QJsonValue> [optional]
    * @param[in]  status OAISession_enum_status [optional]
    * @param[in]  ttl qint32 [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createSession(const QString &service_sid, const ::OpenAPI::OptionalParam<QDateTime> &date_expiry = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAISession_enum_mode> &mode = ::OpenAPI::OptionalParam<OAISession_enum_mode>(), const ::OpenAPI::OptionalParam<QList<QJsonValue>> &participants = ::OpenAPI::OptionalParam<QList<QJsonValue>>(), const ::OpenAPI::OptionalParam<OAISession_enum_status> &status = ::OpenAPI::OptionalParam<OAISession_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSession(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSession(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSession(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  date_expiry QDateTime [optional]
    * @param[in]  status OAISession_enum_status [optional]
    * @param[in]  ttl qint32 [optional]
    */
    virtual void updateSession(const QString &service_sid, const QString &sid, const ::OpenAPI::OptionalParam<QDateTime> &date_expiry = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAISession_enum_status> &status = ::OpenAPI::OptionalParam<OAISession_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSessionCallback(OAIHttpRequestWorker *worker);
    void deleteSessionCallback(OAIHttpRequestWorker *worker);
    void fetchSessionCallback(OAIHttpRequestWorker *worker);
    void listSessionCallback(OAIHttpRequestWorker *worker);
    void updateSessionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSessionSignal(OAIProxy_v1_service_session summary);
    void deleteSessionSignal();
    void fetchSessionSignal(OAIProxy_v1_service_session summary);
    void listSessionSignal(OAIListSessionResponse summary);
    void updateSessionSignal(OAIProxy_v1_service_session summary);


    void createSessionSignalFull(OAIHttpRequestWorker *worker, OAIProxy_v1_service_session summary);
    void deleteSessionSignalFull(OAIHttpRequestWorker *worker);
    void fetchSessionSignalFull(OAIHttpRequestWorker *worker, OAIProxy_v1_service_session summary);
    void listSessionSignalFull(OAIHttpRequestWorker *worker, OAIListSessionResponse summary);
    void updateSessionSignalFull(OAIHttpRequestWorker *worker, OAIProxy_v1_service_session summary);

    Q_DECL_DEPRECATED_X("Use createSessionSignalError() instead")
    void createSessionSignalE(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionSignalError(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionSignalError() instead")
    void deleteSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSessionSignalError() instead")
    void fetchSessionSignalE(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSessionSignalError(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionSignalError() instead")
    void listSessionSignalE(OAIListSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionSignalError(OAIListSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionSignalError() instead")
    void updateSessionSignalE(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionSignalError(OAIProxy_v1_service_session summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSessionSignalErrorFull() instead")
    void createSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSessionSignalErrorFull() instead")
    void deleteSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSessionSignalErrorFull() instead")
    void fetchSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSessionSignalErrorFull() instead")
    void listSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionSignalErrorFull() instead")
    void updateSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
