/*
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SessionEnumMode;
import org.openapitools.client.model.SessionEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProxyV1ServiceSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:15.956900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProxyV1ServiceSession {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CLOSED_REASON = "closed_reason";
  @SerializedName(SERIALIZED_NAME_CLOSED_REASON)
  private String closedReason;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_ENDED = "date_ended";
  @SerializedName(SERIALIZED_NAME_DATE_ENDED)
  private OffsetDateTime dateEnded;

  public static final String SERIALIZED_NAME_DATE_EXPIRY = "date_expiry";
  @SerializedName(SERIALIZED_NAME_DATE_EXPIRY)
  private OffsetDateTime dateExpiry;

  public static final String SERIALIZED_NAME_DATE_LAST_INTERACTION = "date_last_interaction";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_INTERACTION)
  private OffsetDateTime dateLastInteraction;

  public static final String SERIALIZED_NAME_DATE_STARTED = "date_started";
  @SerializedName(SERIALIZED_NAME_DATE_STARTED)
  private OffsetDateTime dateStarted;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private SessionEnumMode mode;

  public static final String SERIALIZED_NAME_SERVICE_SID = "service_sid";
  @SerializedName(SERIALIZED_NAME_SERVICE_SID)
  private String serviceSid;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SessionEnumStatus status;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "unique_name";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public ProxyV1ServiceSession() {
  }

  public ProxyV1ServiceSession accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Session resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ProxyV1ServiceSession closedReason(String closedReason) {
    this.closedReason = closedReason;
    return this;
  }

  /**
   * The reason the Session ended.
   * @return closedReason
   */
  @javax.annotation.Nullable
  public String getClosedReason() {
    return closedReason;
  }

  public void setClosedReason(String closedReason) {
    this.closedReason = closedReason;
  }


  public ProxyV1ServiceSession dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was created.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ProxyV1ServiceSession dateEnded(OffsetDateTime dateEnded) {
    this.dateEnded = dateEnded;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session ended.
   * @return dateEnded
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateEnded() {
    return dateEnded;
  }

  public void setDateEnded(OffsetDateTime dateEnded) {
    this.dateEnded = dateEnded;
  }


  public ProxyV1ServiceSession dateExpiry(OffsetDateTime dateExpiry) {
    this.dateExpiry = dateExpiry;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session should expire. If this is value is present, it overrides the &#x60;ttl&#x60; value.
   * @return dateExpiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateExpiry() {
    return dateExpiry;
  }

  public void setDateExpiry(OffsetDateTime dateExpiry) {
    this.dateExpiry = dateExpiry;
  }


  public ProxyV1ServiceSession dateLastInteraction(OffsetDateTime dateLastInteraction) {
    this.dateLastInteraction = dateLastInteraction;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session last had an interaction.
   * @return dateLastInteraction
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastInteraction() {
    return dateLastInteraction;
  }

  public void setDateLastInteraction(OffsetDateTime dateLastInteraction) {
    this.dateLastInteraction = dateLastInteraction;
  }


  public ProxyV1ServiceSession dateStarted(OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the Session started.
   * @return dateStarted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateStarted() {
    return dateStarted;
  }

  public void setDateStarted(OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
  }


  public ProxyV1ServiceSession dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time in GMT when the resource was last updated.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ProxyV1ServiceSession links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of resources related to the Session.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public ProxyV1ServiceSession mode(SessionEnumMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public SessionEnumMode getMode() {
    return mode;
  }

  public void setMode(SessionEnumMode mode) {
    this.mode = mode;
  }


  public ProxyV1ServiceSession serviceSid(String serviceSid) {
    this.serviceSid = serviceSid;
    return this;
  }

  /**
   * The SID of the [Service](https://www.twilio.com/docs/proxy/api/service) the session is associated with.
   * @return serviceSid
   */
  @javax.annotation.Nullable
  public String getServiceSid() {
    return serviceSid;
  }

  public void setServiceSid(String serviceSid) {
    this.serviceSid = serviceSid;
  }


  public ProxyV1ServiceSession sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Session resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public ProxyV1ServiceSession status(SessionEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SessionEnumStatus getStatus() {
    return status;
  }

  public void setStatus(SessionEnumStatus status) {
    this.status = status;
  }


  public ProxyV1ServiceSession ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The time, in seconds, when the session will expire. The time is measured from the last Session create or the Session&#39;s last Interaction.
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public ProxyV1ServiceSession uniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
    return this;
  }

  /**
   * An application-defined string that uniquely identifies the resource. This value must be 191 characters or fewer in length and be unique. Supports UTF-8 characters. **This value should not have PII.**
   * @return uniqueName
   */
  @javax.annotation.Nullable
  public String getUniqueName() {
    return uniqueName;
  }

  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }


  public ProxyV1ServiceSession url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Session resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyV1ServiceSession proxyV1ServiceSession = (ProxyV1ServiceSession) o;
    return Objects.equals(this.accountSid, proxyV1ServiceSession.accountSid) &&
        Objects.equals(this.closedReason, proxyV1ServiceSession.closedReason) &&
        Objects.equals(this.dateCreated, proxyV1ServiceSession.dateCreated) &&
        Objects.equals(this.dateEnded, proxyV1ServiceSession.dateEnded) &&
        Objects.equals(this.dateExpiry, proxyV1ServiceSession.dateExpiry) &&
        Objects.equals(this.dateLastInteraction, proxyV1ServiceSession.dateLastInteraction) &&
        Objects.equals(this.dateStarted, proxyV1ServiceSession.dateStarted) &&
        Objects.equals(this.dateUpdated, proxyV1ServiceSession.dateUpdated) &&
        Objects.equals(this.links, proxyV1ServiceSession.links) &&
        Objects.equals(this.mode, proxyV1ServiceSession.mode) &&
        Objects.equals(this.serviceSid, proxyV1ServiceSession.serviceSid) &&
        Objects.equals(this.sid, proxyV1ServiceSession.sid) &&
        Objects.equals(this.status, proxyV1ServiceSession.status) &&
        Objects.equals(this.ttl, proxyV1ServiceSession.ttl) &&
        Objects.equals(this.uniqueName, proxyV1ServiceSession.uniqueName) &&
        Objects.equals(this.url, proxyV1ServiceSession.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, closedReason, dateCreated, dateEnded, dateExpiry, dateLastInteraction, dateStarted, dateUpdated, links, mode, serviceSid, sid, status, ttl, uniqueName, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyV1ServiceSession {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    closedReason: ").append(toIndentedString(closedReason)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateEnded: ").append(toIndentedString(dateEnded)).append("\n");
    sb.append("    dateExpiry: ").append(toIndentedString(dateExpiry)).append("\n");
    sb.append("    dateLastInteraction: ").append(toIndentedString(dateLastInteraction)).append("\n");
    sb.append("    dateStarted: ").append(toIndentedString(dateStarted)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    serviceSid: ").append(toIndentedString(serviceSid)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("closed_reason");
    openapiFields.add("date_created");
    openapiFields.add("date_ended");
    openapiFields.add("date_expiry");
    openapiFields.add("date_last_interaction");
    openapiFields.add("date_started");
    openapiFields.add("date_updated");
    openapiFields.add("links");
    openapiFields.add("mode");
    openapiFields.add("service_sid");
    openapiFields.add("sid");
    openapiFields.add("status");
    openapiFields.add("ttl");
    openapiFields.add("unique_name");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProxyV1ServiceSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProxyV1ServiceSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProxyV1ServiceSession is not found in the empty JSON string", ProxyV1ServiceSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProxyV1ServiceSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProxyV1ServiceSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("closed_reason") != null && !jsonObj.get("closed_reason").isJsonNull()) && !jsonObj.get("closed_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_reason").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        SessionEnumMode.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("service_sid") != null && !jsonObj.get("service_sid").isJsonNull()) && !jsonObj.get("service_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_sid").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        SessionEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("unique_name") != null && !jsonObj.get("unique_name").isJsonNull()) && !jsonObj.get("unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProxyV1ServiceSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProxyV1ServiceSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProxyV1ServiceSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProxyV1ServiceSession.class));

       return (TypeAdapter<T>) new TypeAdapter<ProxyV1ServiceSession>() {
           @Override
           public void write(JsonWriter out, ProxyV1ServiceSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProxyV1ServiceSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProxyV1ServiceSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProxyV1ServiceSession
   * @throws IOException if the JSON string is invalid with respect to ProxyV1ServiceSession
   */
  public static ProxyV1ServiceSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProxyV1ServiceSession.class);
  }

  /**
   * Convert an instance of ProxyV1ServiceSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

