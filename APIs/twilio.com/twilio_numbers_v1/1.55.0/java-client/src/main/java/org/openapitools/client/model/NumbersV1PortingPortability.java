/*
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.PortingPortabilityEnumNumberType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NumbersV1PortingPortability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:24.714574-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NumbersV1PortingPortability {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_MESSAGING_CARRIER = "messaging_carrier";
  @SerializedName(SERIALIZED_NAME_MESSAGING_CARRIER)
  private String messagingCarrier;

  public static final String SERIALIZED_NAME_NOT_PORTABLE_REASON = "not_portable_reason";
  @SerializedName(SERIALIZED_NAME_NOT_PORTABLE_REASON)
  private String notPortableReason;

  public static final String SERIALIZED_NAME_NOT_PORTABLE_REASON_CODE = "not_portable_reason_code";
  @SerializedName(SERIALIZED_NAME_NOT_PORTABLE_REASON_CODE)
  private Integer notPortableReasonCode;

  public static final String SERIALIZED_NAME_NUMBER_TYPE = "number_type";
  @SerializedName(SERIALIZED_NAME_NUMBER_TYPE)
  private PortingPortabilityEnumNumberType numberType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PIN_AND_ACCOUNT_NUMBER_REQUIRED = "pin_and_account_number_required";
  @SerializedName(SERIALIZED_NAME_PIN_AND_ACCOUNT_NUMBER_REQUIRED)
  private Boolean pinAndAccountNumberRequired;

  public static final String SERIALIZED_NAME_PORTABLE = "portable";
  @SerializedName(SERIALIZED_NAME_PORTABLE)
  private Boolean portable;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VOICE_CARRIER = "voice_carrier";
  @SerializedName(SERIALIZED_NAME_VOICE_CARRIER)
  private String voiceCarrier;

  public NumbersV1PortingPortability() {
  }

  public NumbersV1PortingPortability accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The target account sid to which the number will be ported
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public NumbersV1PortingPortability country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country the phone number belongs to.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public NumbersV1PortingPortability messagingCarrier(String messagingCarrier) {
    this.messagingCarrier = messagingCarrier;
    return this;
  }

  /**
   * Current messaging carrier of the phone number
   * @return messagingCarrier
   */
  @javax.annotation.Nullable
  public String getMessagingCarrier() {
    return messagingCarrier;
  }

  public void setMessagingCarrier(String messagingCarrier) {
    this.messagingCarrier = messagingCarrier;
  }


  public NumbersV1PortingPortability notPortableReason(String notPortableReason) {
    this.notPortableReason = notPortableReason;
    return this;
  }

  /**
   * Reason why the phone number cannot be ported into Twilio, &#x60;null&#x60; otherwise.
   * @return notPortableReason
   */
  @javax.annotation.Nullable
  public String getNotPortableReason() {
    return notPortableReason;
  }

  public void setNotPortableReason(String notPortableReason) {
    this.notPortableReason = notPortableReason;
  }


  public NumbersV1PortingPortability notPortableReasonCode(Integer notPortableReasonCode) {
    this.notPortableReasonCode = notPortableReasonCode;
    return this;
  }

  /**
   * The Portability Reason Code for the phone number if it cannot be ported into Twilio, &#x60;null&#x60; otherwise. One of &#x60;22131&#x60;, &#x60;22132&#x60;, &#x60;22130&#x60;, &#x60;22133&#x60;, &#x60;22102&#x60; or &#x60;22135&#x60;.
   * @return notPortableReasonCode
   */
  @javax.annotation.Nullable
  public Integer getNotPortableReasonCode() {
    return notPortableReasonCode;
  }

  public void setNotPortableReasonCode(Integer notPortableReasonCode) {
    this.notPortableReasonCode = notPortableReasonCode;
  }


  public NumbersV1PortingPortability numberType(PortingPortabilityEnumNumberType numberType) {
    this.numberType = numberType;
    return this;
  }

  /**
   * Get numberType
   * @return numberType
   */
  @javax.annotation.Nullable
  public PortingPortabilityEnumNumberType getNumberType() {
    return numberType;
  }

  public void setNumberType(PortingPortabilityEnumNumberType numberType) {
    this.numberType = numberType;
  }


  public NumbersV1PortingPortability phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number which portability is to be checked. Phone numbers are in E.164 format (e.g. +16175551212).
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public NumbersV1PortingPortability pinAndAccountNumberRequired(Boolean pinAndAccountNumberRequired) {
    this.pinAndAccountNumberRequired = pinAndAccountNumberRequired;
    return this;
  }

  /**
   * Boolean flag specifying if PIN and account number is required for the phone number.
   * @return pinAndAccountNumberRequired
   */
  @javax.annotation.Nullable
  public Boolean getPinAndAccountNumberRequired() {
    return pinAndAccountNumberRequired;
  }

  public void setPinAndAccountNumberRequired(Boolean pinAndAccountNumberRequired) {
    this.pinAndAccountNumberRequired = pinAndAccountNumberRequired;
  }


  public NumbersV1PortingPortability portable(Boolean portable) {
    this.portable = portable;
    return this;
  }

  /**
   * Boolean flag specifying if phone number is portable or not.
   * @return portable
   */
  @javax.annotation.Nullable
  public Boolean getPortable() {
    return portable;
  }

  public void setPortable(Boolean portable) {
    this.portable = portable;
  }


  public NumbersV1PortingPortability url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * This is the url of the request that you&#39;re trying to reach out to locate the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public NumbersV1PortingPortability voiceCarrier(String voiceCarrier) {
    this.voiceCarrier = voiceCarrier;
    return this;
  }

  /**
   * Current voice carrier of the phone number
   * @return voiceCarrier
   */
  @javax.annotation.Nullable
  public String getVoiceCarrier() {
    return voiceCarrier;
  }

  public void setVoiceCarrier(String voiceCarrier) {
    this.voiceCarrier = voiceCarrier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumbersV1PortingPortability numbersV1PortingPortability = (NumbersV1PortingPortability) o;
    return Objects.equals(this.accountSid, numbersV1PortingPortability.accountSid) &&
        Objects.equals(this.country, numbersV1PortingPortability.country) &&
        Objects.equals(this.messagingCarrier, numbersV1PortingPortability.messagingCarrier) &&
        Objects.equals(this.notPortableReason, numbersV1PortingPortability.notPortableReason) &&
        Objects.equals(this.notPortableReasonCode, numbersV1PortingPortability.notPortableReasonCode) &&
        Objects.equals(this.numberType, numbersV1PortingPortability.numberType) &&
        Objects.equals(this.phoneNumber, numbersV1PortingPortability.phoneNumber) &&
        Objects.equals(this.pinAndAccountNumberRequired, numbersV1PortingPortability.pinAndAccountNumberRequired) &&
        Objects.equals(this.portable, numbersV1PortingPortability.portable) &&
        Objects.equals(this.url, numbersV1PortingPortability.url) &&
        Objects.equals(this.voiceCarrier, numbersV1PortingPortability.voiceCarrier);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, country, messagingCarrier, notPortableReason, notPortableReasonCode, numberType, phoneNumber, pinAndAccountNumberRequired, portable, url, voiceCarrier);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumbersV1PortingPortability {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    messagingCarrier: ").append(toIndentedString(messagingCarrier)).append("\n");
    sb.append("    notPortableReason: ").append(toIndentedString(notPortableReason)).append("\n");
    sb.append("    notPortableReasonCode: ").append(toIndentedString(notPortableReasonCode)).append("\n");
    sb.append("    numberType: ").append(toIndentedString(numberType)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    pinAndAccountNumberRequired: ").append(toIndentedString(pinAndAccountNumberRequired)).append("\n");
    sb.append("    portable: ").append(toIndentedString(portable)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    voiceCarrier: ").append(toIndentedString(voiceCarrier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("country");
    openapiFields.add("messaging_carrier");
    openapiFields.add("not_portable_reason");
    openapiFields.add("not_portable_reason_code");
    openapiFields.add("number_type");
    openapiFields.add("phone_number");
    openapiFields.add("pin_and_account_number_required");
    openapiFields.add("portable");
    openapiFields.add("url");
    openapiFields.add("voice_carrier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumbersV1PortingPortability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumbersV1PortingPortability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumbersV1PortingPortability is not found in the empty JSON string", NumbersV1PortingPortability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumbersV1PortingPortability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumbersV1PortingPortability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("messaging_carrier") != null && !jsonObj.get("messaging_carrier").isJsonNull()) && !jsonObj.get("messaging_carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messaging_carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messaging_carrier").toString()));
      }
      if ((jsonObj.get("not_portable_reason") != null && !jsonObj.get("not_portable_reason").isJsonNull()) && !jsonObj.get("not_portable_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_portable_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_portable_reason").toString()));
      }
      if ((jsonObj.get("number_type") != null && !jsonObj.get("number_type").isJsonNull()) && !jsonObj.get("number_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_type").toString()));
      }
      // validate the optional field `number_type`
      if (jsonObj.get("number_type") != null && !jsonObj.get("number_type").isJsonNull()) {
        PortingPortabilityEnumNumberType.validateJsonElement(jsonObj.get("number_type"));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("voice_carrier") != null && !jsonObj.get("voice_carrier").isJsonNull()) && !jsonObj.get("voice_carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_carrier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumbersV1PortingPortability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumbersV1PortingPortability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumbersV1PortingPortability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumbersV1PortingPortability.class));

       return (TypeAdapter<T>) new TypeAdapter<NumbersV1PortingPortability>() {
           @Override
           public void write(JsonWriter out, NumbersV1PortingPortability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumbersV1PortingPortability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumbersV1PortingPortability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumbersV1PortingPortability
   * @throws IOException if the JSON string is invalid with respect to NumbersV1PortingPortability
   */
  public static NumbersV1PortingPortability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumbersV1PortingPortability.class);
  }

  /**
   * Convert an instance of NumbersV1PortingPortability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

