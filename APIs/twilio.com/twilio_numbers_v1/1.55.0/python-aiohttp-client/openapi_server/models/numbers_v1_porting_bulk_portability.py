# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.porting_bulk_portability_enum_status import PortingBulkPortabilityEnumStatus
import re
from openapi_server import util


class NumbersV1PortingBulkPortability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datetime_created: datetime=None, phone_numbers: List[object]=None, sid: str=None, status: PortingBulkPortabilityEnumStatus=None, url: str=None):
        """NumbersV1PortingBulkPortability - a model defined in OpenAPI

        :param datetime_created: The datetime_created of this NumbersV1PortingBulkPortability.
        :param phone_numbers: The phone_numbers of this NumbersV1PortingBulkPortability.
        :param sid: The sid of this NumbersV1PortingBulkPortability.
        :param status: The status of this NumbersV1PortingBulkPortability.
        :param url: The url of this NumbersV1PortingBulkPortability.
        """
        self.openapi_types = {
            'datetime_created': datetime,
            'phone_numbers': List[object],
            'sid': str,
            'status': PortingBulkPortabilityEnumStatus,
            'url': str
        }

        self.attribute_map = {
            'datetime_created': 'datetime_created',
            'phone_numbers': 'phone_numbers',
            'sid': 'sid',
            'status': 'status',
            'url': 'url'
        }

        self._datetime_created = datetime_created
        self._phone_numbers = phone_numbers
        self._sid = sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumbersV1PortingBulkPortability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The numbers.v1.porting_bulk_portability of this NumbersV1PortingBulkPortability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datetime_created(self):
        """Gets the datetime_created of this NumbersV1PortingBulkPortability.

        The date that the Portability check was created, given in ISO 8601 format.

        :return: The datetime_created of this NumbersV1PortingBulkPortability.
        :rtype: datetime
        """
        return self._datetime_created

    @datetime_created.setter
    def datetime_created(self, datetime_created):
        """Sets the datetime_created of this NumbersV1PortingBulkPortability.

        The date that the Portability check was created, given in ISO 8601 format.

        :param datetime_created: The datetime_created of this NumbersV1PortingBulkPortability.
        :type datetime_created: datetime
        """

        self._datetime_created = datetime_created

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this NumbersV1PortingBulkPortability.

        Contains a list with all the information of the requested phone numbers. Each phone number contains the following properties: `phone_number`: The phone number which portability is to be checked. `portable`: Boolean flag specifying if phone number is portable or not. `not_portable_reason`: Reason why the phone number cannot be ported into Twilio, `null` otherwise. `not_portable_reason_code`: The Portability Reason Code for the phone number if it cannot be ported in Twilio, `null` otherwise. `pin_and_account_number_required`: Boolean flag specifying if PIN and account number is required for the phone number. `number_type`: The type of the requested phone number. `country` Country the phone number belongs to. `messaging_carrier` Current messaging carrier of the phone number. `voice_carrier` Current voice carrier of the phone number.

        :return: The phone_numbers of this NumbersV1PortingBulkPortability.
        :rtype: List[object]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this NumbersV1PortingBulkPortability.

        Contains a list with all the information of the requested phone numbers. Each phone number contains the following properties: `phone_number`: The phone number which portability is to be checked. `portable`: Boolean flag specifying if phone number is portable or not. `not_portable_reason`: Reason why the phone number cannot be ported into Twilio, `null` otherwise. `not_portable_reason_code`: The Portability Reason Code for the phone number if it cannot be ported in Twilio, `null` otherwise. `pin_and_account_number_required`: Boolean flag specifying if PIN and account number is required for the phone number. `number_type`: The type of the requested phone number. `country` Country the phone number belongs to. `messaging_carrier` Current messaging carrier of the phone number. `voice_carrier` Current voice carrier of the phone number.

        :param phone_numbers: The phone_numbers of this NumbersV1PortingBulkPortability.
        :type phone_numbers: List[object]
        """

        self._phone_numbers = phone_numbers

    @property
    def sid(self):
        """Gets the sid of this NumbersV1PortingBulkPortability.

        A 34 character string that uniquely identifies this Portability check.

        :return: The sid of this NumbersV1PortingBulkPortability.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NumbersV1PortingBulkPortability.

        A 34 character string that uniquely identifies this Portability check.

        :param sid: The sid of this NumbersV1PortingBulkPortability.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^KZ[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^KZ[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this NumbersV1PortingBulkPortability.


        :return: The status of this NumbersV1PortingBulkPortability.
        :rtype: PortingBulkPortabilityEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NumbersV1PortingBulkPortability.


        :param status: The status of this NumbersV1PortingBulkPortability.
        :type status: PortingBulkPortabilityEnumStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this NumbersV1PortingBulkPortability.

        This is the url of the request that you're trying to reach out to locate the resource.

        :return: The url of this NumbersV1PortingBulkPortability.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NumbersV1PortingBulkPortability.

        This is the url of the request that you're trying to reach out to locate the resource.

        :param url: The url of this NumbersV1PortingBulkPortability.
        :type url: str
        """

        self._url = url
