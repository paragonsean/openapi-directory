# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.porting_portability_enum_number_type import PortingPortabilityEnumNumberType
import re
from openapi_server import util


class NumbersV1PortingPortability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, country: str=None, messaging_carrier: str=None, not_portable_reason: str=None, not_portable_reason_code: int=None, number_type: PortingPortabilityEnumNumberType=None, phone_number: str=None, pin_and_account_number_required: bool=None, portable: bool=None, url: str=None, voice_carrier: str=None):
        """NumbersV1PortingPortability - a model defined in OpenAPI

        :param account_sid: The account_sid of this NumbersV1PortingPortability.
        :param country: The country of this NumbersV1PortingPortability.
        :param messaging_carrier: The messaging_carrier of this NumbersV1PortingPortability.
        :param not_portable_reason: The not_portable_reason of this NumbersV1PortingPortability.
        :param not_portable_reason_code: The not_portable_reason_code of this NumbersV1PortingPortability.
        :param number_type: The number_type of this NumbersV1PortingPortability.
        :param phone_number: The phone_number of this NumbersV1PortingPortability.
        :param pin_and_account_number_required: The pin_and_account_number_required of this NumbersV1PortingPortability.
        :param portable: The portable of this NumbersV1PortingPortability.
        :param url: The url of this NumbersV1PortingPortability.
        :param voice_carrier: The voice_carrier of this NumbersV1PortingPortability.
        """
        self.openapi_types = {
            'account_sid': str,
            'country': str,
            'messaging_carrier': str,
            'not_portable_reason': str,
            'not_portable_reason_code': int,
            'number_type': PortingPortabilityEnumNumberType,
            'phone_number': str,
            'pin_and_account_number_required': bool,
            'portable': bool,
            'url': str,
            'voice_carrier': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'country': 'country',
            'messaging_carrier': 'messaging_carrier',
            'not_portable_reason': 'not_portable_reason',
            'not_portable_reason_code': 'not_portable_reason_code',
            'number_type': 'number_type',
            'phone_number': 'phone_number',
            'pin_and_account_number_required': 'pin_and_account_number_required',
            'portable': 'portable',
            'url': 'url',
            'voice_carrier': 'voice_carrier'
        }

        self._account_sid = account_sid
        self._country = country
        self._messaging_carrier = messaging_carrier
        self._not_portable_reason = not_portable_reason
        self._not_portable_reason_code = not_portable_reason_code
        self._number_type = number_type
        self._phone_number = phone_number
        self._pin_and_account_number_required = pin_and_account_number_required
        self._portable = portable
        self._url = url
        self._voice_carrier = voice_carrier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumbersV1PortingPortability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The numbers.v1.porting_portability of this NumbersV1PortingPortability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this NumbersV1PortingPortability.

        The target account sid to which the number will be ported

        :return: The account_sid of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this NumbersV1PortingPortability.

        The target account sid to which the number will be ported

        :param account_sid: The account_sid of this NumbersV1PortingPortability.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def country(self):
        """Gets the country of this NumbersV1PortingPortability.

        Country the phone number belongs to.

        :return: The country of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NumbersV1PortingPortability.

        Country the phone number belongs to.

        :param country: The country of this NumbersV1PortingPortability.
        :type country: str
        """

        self._country = country

    @property
    def messaging_carrier(self):
        """Gets the messaging_carrier of this NumbersV1PortingPortability.

        Current messaging carrier of the phone number

        :return: The messaging_carrier of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._messaging_carrier

    @messaging_carrier.setter
    def messaging_carrier(self, messaging_carrier):
        """Sets the messaging_carrier of this NumbersV1PortingPortability.

        Current messaging carrier of the phone number

        :param messaging_carrier: The messaging_carrier of this NumbersV1PortingPortability.
        :type messaging_carrier: str
        """

        self._messaging_carrier = messaging_carrier

    @property
    def not_portable_reason(self):
        """Gets the not_portable_reason of this NumbersV1PortingPortability.

        Reason why the phone number cannot be ported into Twilio, `null` otherwise.

        :return: The not_portable_reason of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._not_portable_reason

    @not_portable_reason.setter
    def not_portable_reason(self, not_portable_reason):
        """Sets the not_portable_reason of this NumbersV1PortingPortability.

        Reason why the phone number cannot be ported into Twilio, `null` otherwise.

        :param not_portable_reason: The not_portable_reason of this NumbersV1PortingPortability.
        :type not_portable_reason: str
        """

        self._not_portable_reason = not_portable_reason

    @property
    def not_portable_reason_code(self):
        """Gets the not_portable_reason_code of this NumbersV1PortingPortability.

        The Portability Reason Code for the phone number if it cannot be ported into Twilio, `null` otherwise. One of `22131`, `22132`, `22130`, `22133`, `22102` or `22135`.

        :return: The not_portable_reason_code of this NumbersV1PortingPortability.
        :rtype: int
        """
        return self._not_portable_reason_code

    @not_portable_reason_code.setter
    def not_portable_reason_code(self, not_portable_reason_code):
        """Sets the not_portable_reason_code of this NumbersV1PortingPortability.

        The Portability Reason Code for the phone number if it cannot be ported into Twilio, `null` otherwise. One of `22131`, `22132`, `22130`, `22133`, `22102` or `22135`.

        :param not_portable_reason_code: The not_portable_reason_code of this NumbersV1PortingPortability.
        :type not_portable_reason_code: int
        """

        self._not_portable_reason_code = not_portable_reason_code

    @property
    def number_type(self):
        """Gets the number_type of this NumbersV1PortingPortability.


        :return: The number_type of this NumbersV1PortingPortability.
        :rtype: PortingPortabilityEnumNumberType
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this NumbersV1PortingPortability.


        :param number_type: The number_type of this NumbersV1PortingPortability.
        :type number_type: PortingPortabilityEnumNumberType
        """

        self._number_type = number_type

    @property
    def phone_number(self):
        """Gets the phone_number of this NumbersV1PortingPortability.

        The phone number which portability is to be checked. Phone numbers are in E.164 format (e.g. +16175551212).

        :return: The phone_number of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this NumbersV1PortingPortability.

        The phone number which portability is to be checked. Phone numbers are in E.164 format (e.g. +16175551212).

        :param phone_number: The phone_number of this NumbersV1PortingPortability.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def pin_and_account_number_required(self):
        """Gets the pin_and_account_number_required of this NumbersV1PortingPortability.

        Boolean flag specifying if PIN and account number is required for the phone number.

        :return: The pin_and_account_number_required of this NumbersV1PortingPortability.
        :rtype: bool
        """
        return self._pin_and_account_number_required

    @pin_and_account_number_required.setter
    def pin_and_account_number_required(self, pin_and_account_number_required):
        """Sets the pin_and_account_number_required of this NumbersV1PortingPortability.

        Boolean flag specifying if PIN and account number is required for the phone number.

        :param pin_and_account_number_required: The pin_and_account_number_required of this NumbersV1PortingPortability.
        :type pin_and_account_number_required: bool
        """

        self._pin_and_account_number_required = pin_and_account_number_required

    @property
    def portable(self):
        """Gets the portable of this NumbersV1PortingPortability.

        Boolean flag specifying if phone number is portable or not.

        :return: The portable of this NumbersV1PortingPortability.
        :rtype: bool
        """
        return self._portable

    @portable.setter
    def portable(self, portable):
        """Sets the portable of this NumbersV1PortingPortability.

        Boolean flag specifying if phone number is portable or not.

        :param portable: The portable of this NumbersV1PortingPortability.
        :type portable: bool
        """

        self._portable = portable

    @property
    def url(self):
        """Gets the url of this NumbersV1PortingPortability.

        This is the url of the request that you're trying to reach out to locate the resource.

        :return: The url of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NumbersV1PortingPortability.

        This is the url of the request that you're trying to reach out to locate the resource.

        :param url: The url of this NumbersV1PortingPortability.
        :type url: str
        """

        self._url = url

    @property
    def voice_carrier(self):
        """Gets the voice_carrier of this NumbersV1PortingPortability.

        Current voice carrier of the phone number

        :return: The voice_carrier of this NumbersV1PortingPortability.
        :rtype: str
        """
        return self._voice_carrier

    @voice_carrier.setter
    def voice_carrier(self, voice_carrier):
        """Sets the voice_carrier of this NumbersV1PortingPortability.

        Current voice carrier of the phone number

        :param voice_carrier: The voice_carrier of this NumbersV1PortingPortability.
        :type voice_carrier: str
        """

        self._voice_carrier = voice_carrier
