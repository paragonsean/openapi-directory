/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulk_eligibility_enum_eligibility_sub_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulk_eligibility_enum_eligibility_sub_status::OAIBulk_eligibility_enum_eligibility_sub_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulk_eligibility_enum_eligibility_sub_status::OAIBulk_eligibility_enum_eligibility_sub_status() {
    this->initializeModel();
}

OAIBulk_eligibility_enum_eligibility_sub_status::~OAIBulk_eligibility_enum_eligibility_sub_status() {}

void OAIBulk_eligibility_enum_eligibility_sub_status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBulk_eligibility_enum_eligibility_sub_status::fromJson(QString jsonString) {
    
    if ( jsonString.compare("country-ineligible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::COUNTRY_INELIGIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("number-format-ineligible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::NUMBER_FORMAT_INELIGIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("number-type-ineligible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::NUMBER_TYPE_INELIGIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("carrier-ineligible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::CARRIER_INELIGIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("already-in-twilio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::ALREADY_IN_TWILIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("internal-processing-error", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::INTERNAL_PROCESSING_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("invalid-phone-number", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::INVALID_PHONE_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("invalid-hosting-account-sid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::INVALID_HOSTING_ACCOUNT_SID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eligible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::ELIGIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eligible-by-manual-process", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulk_eligibility_enum_eligibility_sub_status::ELIGIBLE_BY_MANUAL_PROCESS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBulk_eligibility_enum_eligibility_sub_status::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBulk_eligibility_enum_eligibility_sub_status::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBulk_eligibility_enum_eligibility_sub_status::COUNTRY_INELIGIBLE:
            val = "country-ineligible";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::NUMBER_FORMAT_INELIGIBLE:
            val = "number-format-ineligible";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::NUMBER_TYPE_INELIGIBLE:
            val = "number-type-ineligible";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::CARRIER_INELIGIBLE:
            val = "carrier-ineligible";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::ALREADY_IN_TWILIO:
            val = "already-in-twilio";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::INTERNAL_PROCESSING_ERROR:
            val = "internal-processing-error";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::INVALID_PHONE_NUMBER:
            val = "invalid-phone-number";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::INVALID_HOSTING_ACCOUNT_SID:
            val = "invalid-hosting-account-sid";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::ELIGIBLE:
            val = "eligible";
            break;
        case eOAIBulk_eligibility_enum_eligibility_sub_status::ELIGIBLE_BY_MANUAL_PROCESS:
            val = "eligible-by-manual-process";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBulk_eligibility_enum_eligibility_sub_status::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBulk_eligibility_enum_eligibility_sub_status::eOAIBulk_eligibility_enum_eligibility_sub_status OAIBulk_eligibility_enum_eligibility_sub_status::getValue() const {
    return m_value;
}

void OAIBulk_eligibility_enum_eligibility_sub_status::setValue(const OAIBulk_eligibility_enum_eligibility_sub_status::eOAIBulk_eligibility_enum_eligibility_sub_status& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBulk_eligibility_enum_eligibility_sub_status::isSet() const {
    
    return m_value_isSet;
}

bool OAIBulk_eligibility_enum_eligibility_sub_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
