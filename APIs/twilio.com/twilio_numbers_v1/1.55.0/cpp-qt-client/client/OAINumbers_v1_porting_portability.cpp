/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v1_porting_portability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v1_porting_portability::OAINumbers_v1_porting_portability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v1_porting_portability::OAINumbers_v1_porting_portability() {
    this->initializeModel();
}

OAINumbers_v1_porting_portability::~OAINumbers_v1_porting_portability() {}

void OAINumbers_v1_porting_portability::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_messaging_carrier_isSet = false;
    m_messaging_carrier_isValid = false;

    m_not_portable_reason_isSet = false;
    m_not_portable_reason_isValid = false;

    m_not_portable_reason_code_isSet = false;
    m_not_portable_reason_code_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_pin_and_account_number_required_isSet = false;
    m_pin_and_account_number_required_isValid = false;

    m_portable_isSet = false;
    m_portable_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_voice_carrier_isSet = false;
    m_voice_carrier_isValid = false;
}

void OAINumbers_v1_porting_portability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v1_porting_portability::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_messaging_carrier_isValid = ::OpenAPI::fromJsonValue(m_messaging_carrier, json[QString("messaging_carrier")]);
    m_messaging_carrier_isSet = !json[QString("messaging_carrier")].isNull() && m_messaging_carrier_isValid;

    m_not_portable_reason_isValid = ::OpenAPI::fromJsonValue(m_not_portable_reason, json[QString("not_portable_reason")]);
    m_not_portable_reason_isSet = !json[QString("not_portable_reason")].isNull() && m_not_portable_reason_isValid;

    m_not_portable_reason_code_isValid = ::OpenAPI::fromJsonValue(m_not_portable_reason_code, json[QString("not_portable_reason_code")]);
    m_not_portable_reason_code_isSet = !json[QString("not_portable_reason_code")].isNull() && m_not_portable_reason_code_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("number_type")]);
    m_number_type_isSet = !json[QString("number_type")].isNull() && m_number_type_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_pin_and_account_number_required_isValid = ::OpenAPI::fromJsonValue(m_pin_and_account_number_required, json[QString("pin_and_account_number_required")]);
    m_pin_and_account_number_required_isSet = !json[QString("pin_and_account_number_required")].isNull() && m_pin_and_account_number_required_isValid;

    m_portable_isValid = ::OpenAPI::fromJsonValue(m_portable, json[QString("portable")]);
    m_portable_isSet = !json[QString("portable")].isNull() && m_portable_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_voice_carrier_isValid = ::OpenAPI::fromJsonValue(m_voice_carrier, json[QString("voice_carrier")]);
    m_voice_carrier_isSet = !json[QString("voice_carrier")].isNull() && m_voice_carrier_isValid;
}

QString OAINumbers_v1_porting_portability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v1_porting_portability::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_messaging_carrier_isSet) {
        obj.insert(QString("messaging_carrier"), ::OpenAPI::toJsonValue(m_messaging_carrier));
    }
    if (m_not_portable_reason_isSet) {
        obj.insert(QString("not_portable_reason"), ::OpenAPI::toJsonValue(m_not_portable_reason));
    }
    if (m_not_portable_reason_code_isSet) {
        obj.insert(QString("not_portable_reason_code"), ::OpenAPI::toJsonValue(m_not_portable_reason_code));
    }
    if (m_number_type.isSet()) {
        obj.insert(QString("number_type"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_pin_and_account_number_required_isSet) {
        obj.insert(QString("pin_and_account_number_required"), ::OpenAPI::toJsonValue(m_pin_and_account_number_required));
    }
    if (m_portable_isSet) {
        obj.insert(QString("portable"), ::OpenAPI::toJsonValue(m_portable));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_voice_carrier_isSet) {
        obj.insert(QString("voice_carrier"), ::OpenAPI::toJsonValue(m_voice_carrier));
    }
    return obj;
}

QString OAINumbers_v1_porting_portability::getAccountSid() const {
    return m_account_sid;
}
void OAINumbers_v1_porting_portability::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINumbers_v1_porting_portability::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAINumbers_v1_porting_portability::getCountry() const {
    return m_country;
}
void OAINumbers_v1_porting_portability::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_country_Set() const{
    return m_country_isSet;
}

bool OAINumbers_v1_porting_portability::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINumbers_v1_porting_portability::getMessagingCarrier() const {
    return m_messaging_carrier;
}
void OAINumbers_v1_porting_portability::setMessagingCarrier(const QString &messaging_carrier) {
    m_messaging_carrier = messaging_carrier;
    m_messaging_carrier_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_messaging_carrier_Set() const{
    return m_messaging_carrier_isSet;
}

bool OAINumbers_v1_porting_portability::is_messaging_carrier_Valid() const{
    return m_messaging_carrier_isValid;
}

QString OAINumbers_v1_porting_portability::getNotPortableReason() const {
    return m_not_portable_reason;
}
void OAINumbers_v1_porting_portability::setNotPortableReason(const QString &not_portable_reason) {
    m_not_portable_reason = not_portable_reason;
    m_not_portable_reason_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_not_portable_reason_Set() const{
    return m_not_portable_reason_isSet;
}

bool OAINumbers_v1_porting_portability::is_not_portable_reason_Valid() const{
    return m_not_portable_reason_isValid;
}

qint32 OAINumbers_v1_porting_portability::getNotPortableReasonCode() const {
    return m_not_portable_reason_code;
}
void OAINumbers_v1_porting_portability::setNotPortableReasonCode(const qint32 &not_portable_reason_code) {
    m_not_portable_reason_code = not_portable_reason_code;
    m_not_portable_reason_code_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_not_portable_reason_code_Set() const{
    return m_not_portable_reason_code_isSet;
}

bool OAINumbers_v1_porting_portability::is_not_portable_reason_code_Valid() const{
    return m_not_portable_reason_code_isValid;
}

OAIPorting_portability_enum_number_type OAINumbers_v1_porting_portability::getNumberType() const {
    return m_number_type;
}
void OAINumbers_v1_porting_portability::setNumberType(const OAIPorting_portability_enum_number_type &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAINumbers_v1_porting_portability::is_number_type_Valid() const{
    return m_number_type_isValid;
}

QString OAINumbers_v1_porting_portability::getPhoneNumber() const {
    return m_phone_number;
}
void OAINumbers_v1_porting_portability::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAINumbers_v1_porting_portability::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAINumbers_v1_porting_portability::isPinAndAccountNumberRequired() const {
    return m_pin_and_account_number_required;
}
void OAINumbers_v1_porting_portability::setPinAndAccountNumberRequired(const bool &pin_and_account_number_required) {
    m_pin_and_account_number_required = pin_and_account_number_required;
    m_pin_and_account_number_required_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_pin_and_account_number_required_Set() const{
    return m_pin_and_account_number_required_isSet;
}

bool OAINumbers_v1_porting_portability::is_pin_and_account_number_required_Valid() const{
    return m_pin_and_account_number_required_isValid;
}

bool OAINumbers_v1_porting_portability::isPortable() const {
    return m_portable;
}
void OAINumbers_v1_porting_portability::setPortable(const bool &portable) {
    m_portable = portable;
    m_portable_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_portable_Set() const{
    return m_portable_isSet;
}

bool OAINumbers_v1_porting_portability::is_portable_Valid() const{
    return m_portable_isValid;
}

QString OAINumbers_v1_porting_portability::getUrl() const {
    return m_url;
}
void OAINumbers_v1_porting_portability::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v1_porting_portability::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINumbers_v1_porting_portability::getVoiceCarrier() const {
    return m_voice_carrier;
}
void OAINumbers_v1_porting_portability::setVoiceCarrier(const QString &voice_carrier) {
    m_voice_carrier = voice_carrier;
    m_voice_carrier_isSet = true;
}

bool OAINumbers_v1_porting_portability::is_voice_carrier_Set() const{
    return m_voice_carrier_isSet;
}

bool OAINumbers_v1_porting_portability::is_voice_carrier_Valid() const{
    return m_voice_carrier_isValid;
}

bool OAINumbers_v1_porting_portability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_portable_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_portable_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_and_account_number_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v1_porting_portability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
