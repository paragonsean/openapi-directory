/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v1_porting_bulk_portability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v1_porting_bulk_portability::OAINumbers_v1_porting_bulk_portability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v1_porting_bulk_portability::OAINumbers_v1_porting_bulk_portability() {
    this->initializeModel();
}

OAINumbers_v1_porting_bulk_portability::~OAINumbers_v1_porting_bulk_portability() {}

void OAINumbers_v1_porting_bulk_portability::initializeModel() {

    m_datetime_created_isSet = false;
    m_datetime_created_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v1_porting_bulk_portability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v1_porting_bulk_portability::fromJsonObject(QJsonObject json) {

    m_datetime_created_isValid = ::OpenAPI::fromJsonValue(m_datetime_created, json[QString("datetime_created")]);
    m_datetime_created_isSet = !json[QString("datetime_created")].isNull() && m_datetime_created_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phone_numbers")]);
    m_phone_numbers_isSet = !json[QString("phone_numbers")].isNull() && m_phone_numbers_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v1_porting_bulk_portability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v1_porting_bulk_portability::asJsonObject() const {
    QJsonObject obj;
    if (m_datetime_created_isSet) {
        obj.insert(QString("datetime_created"), ::OpenAPI::toJsonValue(m_datetime_created));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phone_numbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAINumbers_v1_porting_bulk_portability::getDatetimeCreated() const {
    return m_datetime_created;
}
void OAINumbers_v1_porting_bulk_portability::setDatetimeCreated(const QDateTime &datetime_created) {
    m_datetime_created = datetime_created;
    m_datetime_created_isSet = true;
}

bool OAINumbers_v1_porting_bulk_portability::is_datetime_created_Set() const{
    return m_datetime_created_isSet;
}

bool OAINumbers_v1_porting_bulk_portability::is_datetime_created_Valid() const{
    return m_datetime_created_isValid;
}

QList<QJsonValue> OAINumbers_v1_porting_bulk_portability::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAINumbers_v1_porting_bulk_portability::setPhoneNumbers(const QList<QJsonValue> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAINumbers_v1_porting_bulk_portability::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAINumbers_v1_porting_bulk_portability::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QString OAINumbers_v1_porting_bulk_portability::getSid() const {
    return m_sid;
}
void OAINumbers_v1_porting_bulk_portability::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINumbers_v1_porting_bulk_portability::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINumbers_v1_porting_bulk_portability::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIPorting_bulk_portability_enum_status OAINumbers_v1_porting_bulk_portability::getStatus() const {
    return m_status;
}
void OAINumbers_v1_porting_bulk_portability::setStatus(const OAIPorting_bulk_portability_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINumbers_v1_porting_bulk_portability::is_status_Set() const{
    return m_status_isSet;
}

bool OAINumbers_v1_porting_bulk_portability::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINumbers_v1_porting_bulk_portability::getUrl() const {
    return m_url;
}
void OAINumbers_v1_porting_bulk_portability::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v1_porting_bulk_portability::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v1_porting_bulk_portability::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v1_porting_bulk_portability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datetime_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v1_porting_bulk_portability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
