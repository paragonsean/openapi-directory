/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v1_porting_port_in_fetch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v1_porting_port_in_fetch::OAINumbers_v1_porting_port_in_fetch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v1_porting_port_in_fetch::OAINumbers_v1_porting_port_in_fetch() {
    this->initializeModel();
}

OAINumbers_v1_porting_port_in_fetch::~OAINumbers_v1_porting_port_in_fetch() {}

void OAINumbers_v1_porting_port_in_fetch::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_losing_carrier_information_isSet = false;
    m_losing_carrier_information_isValid = false;

    m_notification_emails_isSet = false;
    m_notification_emails_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_port_in_request_sid_isSet = false;
    m_port_in_request_sid_isValid = false;

    m_target_port_in_date_isSet = false;
    m_target_port_in_date_isValid = false;

    m_target_port_in_time_range_end_isSet = false;
    m_target_port_in_time_range_end_isValid = false;

    m_target_port_in_time_range_start_isSet = false;
    m_target_port_in_time_range_start_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v1_porting_port_in_fetch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v1_porting_port_in_fetch::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_losing_carrier_information_isValid = ::OpenAPI::fromJsonValue(m_losing_carrier_information, json[QString("losing_carrier_information")]);
    m_losing_carrier_information_isSet = !json[QString("losing_carrier_information")].isNull() && m_losing_carrier_information_isValid;

    m_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_notification_emails, json[QString("notification_emails")]);
    m_notification_emails_isSet = !json[QString("notification_emails")].isNull() && m_notification_emails_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phone_numbers")]);
    m_phone_numbers_isSet = !json[QString("phone_numbers")].isNull() && m_phone_numbers_isValid;

    m_port_in_request_sid_isValid = ::OpenAPI::fromJsonValue(m_port_in_request_sid, json[QString("port_in_request_sid")]);
    m_port_in_request_sid_isSet = !json[QString("port_in_request_sid")].isNull() && m_port_in_request_sid_isValid;

    m_target_port_in_date_isValid = ::OpenAPI::fromJsonValue(m_target_port_in_date, json[QString("target_port_in_date")]);
    m_target_port_in_date_isSet = !json[QString("target_port_in_date")].isNull() && m_target_port_in_date_isValid;

    m_target_port_in_time_range_end_isValid = ::OpenAPI::fromJsonValue(m_target_port_in_time_range_end, json[QString("target_port_in_time_range_end")]);
    m_target_port_in_time_range_end_isSet = !json[QString("target_port_in_time_range_end")].isNull() && m_target_port_in_time_range_end_isValid;

    m_target_port_in_time_range_start_isValid = ::OpenAPI::fromJsonValue(m_target_port_in_time_range_start, json[QString("target_port_in_time_range_start")]);
    m_target_port_in_time_range_start_isSet = !json[QString("target_port_in_time_range_start")].isNull() && m_target_port_in_time_range_start_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v1_porting_port_in_fetch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v1_porting_port_in_fetch::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_losing_carrier_information_isSet) {
        obj.insert(QString("losing_carrier_information"), ::OpenAPI::toJsonValue(m_losing_carrier_information));
    }
    if (m_notification_emails.size() > 0) {
        obj.insert(QString("notification_emails"), ::OpenAPI::toJsonValue(m_notification_emails));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phone_numbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_port_in_request_sid_isSet) {
        obj.insert(QString("port_in_request_sid"), ::OpenAPI::toJsonValue(m_port_in_request_sid));
    }
    if (m_target_port_in_date_isSet) {
        obj.insert(QString("target_port_in_date"), ::OpenAPI::toJsonValue(m_target_port_in_date));
    }
    if (m_target_port_in_time_range_end_isSet) {
        obj.insert(QString("target_port_in_time_range_end"), ::OpenAPI::toJsonValue(m_target_port_in_time_range_end));
    }
    if (m_target_port_in_time_range_start_isSet) {
        obj.insert(QString("target_port_in_time_range_start"), ::OpenAPI::toJsonValue(m_target_port_in_time_range_start));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINumbers_v1_porting_port_in_fetch::getAccountSid() const {
    return m_account_sid;
}
void OAINumbers_v1_porting_port_in_fetch::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QString> OAINumbers_v1_porting_port_in_fetch::getDocuments() const {
    return m_documents;
}
void OAINumbers_v1_porting_port_in_fetch::setDocuments(const QList<QString> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_documents_Valid() const{
    return m_documents_isValid;
}

QJsonValue OAINumbers_v1_porting_port_in_fetch::getLosingCarrierInformation() const {
    return m_losing_carrier_information;
}
void OAINumbers_v1_porting_port_in_fetch::setLosingCarrierInformation(const QJsonValue &losing_carrier_information) {
    m_losing_carrier_information = losing_carrier_information;
    m_losing_carrier_information_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_losing_carrier_information_Set() const{
    return m_losing_carrier_information_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_losing_carrier_information_Valid() const{
    return m_losing_carrier_information_isValid;
}

QList<QString> OAINumbers_v1_porting_port_in_fetch::getNotificationEmails() const {
    return m_notification_emails;
}
void OAINumbers_v1_porting_port_in_fetch::setNotificationEmails(const QList<QString> &notification_emails) {
    m_notification_emails = notification_emails;
    m_notification_emails_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_notification_emails_Set() const{
    return m_notification_emails_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_notification_emails_Valid() const{
    return m_notification_emails_isValid;
}

QList<QJsonValue> OAINumbers_v1_porting_port_in_fetch::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAINumbers_v1_porting_port_in_fetch::setPhoneNumbers(const QList<QJsonValue> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QString OAINumbers_v1_porting_port_in_fetch::getPortInRequestSid() const {
    return m_port_in_request_sid;
}
void OAINumbers_v1_porting_port_in_fetch::setPortInRequestSid(const QString &port_in_request_sid) {
    m_port_in_request_sid = port_in_request_sid;
    m_port_in_request_sid_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_port_in_request_sid_Set() const{
    return m_port_in_request_sid_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_port_in_request_sid_Valid() const{
    return m_port_in_request_sid_isValid;
}

QDate OAINumbers_v1_porting_port_in_fetch::getTargetPortInDate() const {
    return m_target_port_in_date;
}
void OAINumbers_v1_porting_port_in_fetch::setTargetPortInDate(const QDate &target_port_in_date) {
    m_target_port_in_date = target_port_in_date;
    m_target_port_in_date_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_date_Set() const{
    return m_target_port_in_date_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_date_Valid() const{
    return m_target_port_in_date_isValid;
}

QString OAINumbers_v1_porting_port_in_fetch::getTargetPortInTimeRangeEnd() const {
    return m_target_port_in_time_range_end;
}
void OAINumbers_v1_porting_port_in_fetch::setTargetPortInTimeRangeEnd(const QString &target_port_in_time_range_end) {
    m_target_port_in_time_range_end = target_port_in_time_range_end;
    m_target_port_in_time_range_end_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_time_range_end_Set() const{
    return m_target_port_in_time_range_end_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_time_range_end_Valid() const{
    return m_target_port_in_time_range_end_isValid;
}

QString OAINumbers_v1_porting_port_in_fetch::getTargetPortInTimeRangeStart() const {
    return m_target_port_in_time_range_start;
}
void OAINumbers_v1_porting_port_in_fetch::setTargetPortInTimeRangeStart(const QString &target_port_in_time_range_start) {
    m_target_port_in_time_range_start = target_port_in_time_range_start;
    m_target_port_in_time_range_start_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_time_range_start_Set() const{
    return m_target_port_in_time_range_start_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_target_port_in_time_range_start_Valid() const{
    return m_target_port_in_time_range_start_isValid;
}

QString OAINumbers_v1_porting_port_in_fetch::getUrl() const {
    return m_url;
}
void OAINumbers_v1_porting_port_in_fetch::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v1_porting_port_in_fetch::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v1_porting_port_in_fetch::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v1_porting_port_in_fetch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_losing_carrier_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_in_request_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_port_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_port_in_time_range_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_port_in_time_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v1_porting_port_in_fetch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
