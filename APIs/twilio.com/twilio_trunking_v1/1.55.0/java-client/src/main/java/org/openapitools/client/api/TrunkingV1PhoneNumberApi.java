/*
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListPhoneNumberResponse;
import org.openapitools.client.model.TrunkingV1TrunkPhoneNumber;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrunkingV1PhoneNumberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrunkingV1PhoneNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrunkingV1PhoneNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPhoneNumber
     * @param trunkSid The SID of the Trunk to associate the phone number with. (required)
     * @param phoneNumberSid The SID of the [Incoming Phone Number](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) that you want to associate with the trunk. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPhoneNumberCall(String trunkSid, String phoneNumberSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trunking.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Trunks/{TrunkSid}/PhoneNumbers"
            .replace("{" + "TrunkSid" + "}", localVarApiClient.escapeString(trunkSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumberSid != null) {
            localVarFormParams.put("PhoneNumberSid", phoneNumberSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneNumberValidateBeforeCall(String trunkSid, String phoneNumberSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trunkSid' is set
        if (trunkSid == null) {
            throw new ApiException("Missing the required parameter 'trunkSid' when calling createPhoneNumber(Async)");
        }

        // verify the required parameter 'phoneNumberSid' is set
        if (phoneNumberSid == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberSid' when calling createPhoneNumber(Async)");
        }

        return createPhoneNumberCall(trunkSid, phoneNumberSid, _callback);

    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk to associate the phone number with. (required)
     * @param phoneNumberSid The SID of the [Incoming Phone Number](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) that you want to associate with the trunk. (required)
     * @return TrunkingV1TrunkPhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrunkingV1TrunkPhoneNumber createPhoneNumber(String trunkSid, String phoneNumberSid) throws ApiException {
        ApiResponse<TrunkingV1TrunkPhoneNumber> localVarResp = createPhoneNumberWithHttpInfo(trunkSid, phoneNumberSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk to associate the phone number with. (required)
     * @param phoneNumberSid The SID of the [Incoming Phone Number](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) that you want to associate with the trunk. (required)
     * @return ApiResponse&lt;TrunkingV1TrunkPhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrunkingV1TrunkPhoneNumber> createPhoneNumberWithHttpInfo(String trunkSid, String phoneNumberSid) throws ApiException {
        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(trunkSid, phoneNumberSid, null);
        Type localVarReturnType = new TypeToken<TrunkingV1TrunkPhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param trunkSid The SID of the Trunk to associate the phone number with. (required)
     * @param phoneNumberSid The SID of the [Incoming Phone Number](https://www.twilio.com/docs/phone-numbers/api/incomingphonenumber-resource) that you want to associate with the trunk. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPhoneNumberAsync(String trunkSid, String phoneNumberSid, final ApiCallback<TrunkingV1TrunkPhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(trunkSid, phoneNumberSid, _callback);
        Type localVarReturnType = new TypeToken<TrunkingV1TrunkPhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePhoneNumber
     * @param trunkSid The SID of the Trunk from which to delete the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePhoneNumberCall(String trunkSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trunking.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}"
            .replace("{" + "TrunkSid" + "}", localVarApiClient.escapeString(trunkSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePhoneNumberValidateBeforeCall(String trunkSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trunkSid' is set
        if (trunkSid == null) {
            throw new ApiException("Missing the required parameter 'trunkSid' when calling deletePhoneNumber(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deletePhoneNumber(Async)");
        }

        return deletePhoneNumberCall(trunkSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to delete the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePhoneNumber(String trunkSid, String sid) throws ApiException {
        deletePhoneNumberWithHttpInfo(trunkSid, sid);
    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to delete the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePhoneNumberWithHttpInfo(String trunkSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(trunkSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param trunkSid The SID of the Trunk from which to delete the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePhoneNumberAsync(String trunkSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(trunkSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPhoneNumber
     * @param trunkSid The SID of the Trunk from which to fetch the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPhoneNumberCall(String trunkSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trunking.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Trunks/{TrunkSid}/PhoneNumbers/{Sid}"
            .replace("{" + "TrunkSid" + "}", localVarApiClient.escapeString(trunkSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPhoneNumberValidateBeforeCall(String trunkSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trunkSid' is set
        if (trunkSid == null) {
            throw new ApiException("Missing the required parameter 'trunkSid' when calling fetchPhoneNumber(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchPhoneNumber(Async)");
        }

        return fetchPhoneNumberCall(trunkSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to fetch the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to fetch. (required)
     * @return TrunkingV1TrunkPhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrunkingV1TrunkPhoneNumber fetchPhoneNumber(String trunkSid, String sid) throws ApiException {
        ApiResponse<TrunkingV1TrunkPhoneNumber> localVarResp = fetchPhoneNumberWithHttpInfo(trunkSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to fetch the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to fetch. (required)
     * @return ApiResponse&lt;TrunkingV1TrunkPhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrunkingV1TrunkPhoneNumber> fetchPhoneNumberWithHttpInfo(String trunkSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchPhoneNumberValidateBeforeCall(trunkSid, sid, null);
        Type localVarReturnType = new TypeToken<TrunkingV1TrunkPhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param trunkSid The SID of the Trunk from which to fetch the PhoneNumber resource. (required)
     * @param sid The unique string that we created to identify the PhoneNumber resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPhoneNumberAsync(String trunkSid, String sid, final ApiCallback<TrunkingV1TrunkPhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPhoneNumberValidateBeforeCall(trunkSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrunkingV1TrunkPhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPhoneNumber
     * @param trunkSid The SID of the Trunk from which to read the PhoneNumber resources. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberCall(String trunkSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trunking.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Trunks/{TrunkSid}/PhoneNumbers"
            .replace("{" + "TrunkSid" + "}", localVarApiClient.escapeString(trunkSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPhoneNumberValidateBeforeCall(String trunkSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trunkSid' is set
        if (trunkSid == null) {
            throw new ApiException("Missing the required parameter 'trunkSid' when calling listPhoneNumber(Async)");
        }

        return listPhoneNumberCall(trunkSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to read the PhoneNumber resources. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListPhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumberResponse listPhoneNumber(String trunkSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListPhoneNumberResponse> localVarResp = listPhoneNumberWithHttpInfo(trunkSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param trunkSid The SID of the Trunk from which to read the PhoneNumber resources. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListPhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumberResponse> listPhoneNumberWithHttpInfo(String trunkSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listPhoneNumberValidateBeforeCall(trunkSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param trunkSid The SID of the Trunk from which to read the PhoneNumber resources. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberAsync(String trunkSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListPhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPhoneNumberValidateBeforeCall(trunkSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
