/*
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrunkEnumTransferCallerId;
import org.openapitools.client.model.TrunkEnumTransferSetting;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrunkingV1Trunk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:11.077333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrunkingV1Trunk {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private String authType;

  public static final String SERIALIZED_NAME_AUTH_TYPE_SET = "auth_type_set";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE_SET)
  private List<String> authTypeSet;

  public static final String SERIALIZED_NAME_CNAM_LOOKUP_ENABLED = "cnam_lookup_enabled";
  @SerializedName(SERIALIZED_NAME_CNAM_LOOKUP_ENABLED)
  private Boolean cnamLookupEnabled;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  /**
   * The HTTP method we use to call the &#x60;disaster_recovery_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;.
   */
  @JsonAdapter(DisasterRecoveryMethodEnum.Adapter.class)
  public enum DisasterRecoveryMethodEnum {
    HEAD("HEAD"),
    
    GET("GET"),
    
    POST("POST"),
    
    PATCH("PATCH"),
    
    PUT("PUT"),
    
    DELETE("DELETE");

    private String value;

    DisasterRecoveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisasterRecoveryMethodEnum fromValue(String value) {
      for (DisasterRecoveryMethodEnum b : DisasterRecoveryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DisasterRecoveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisasterRecoveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisasterRecoveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisasterRecoveryMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisasterRecoveryMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISASTER_RECOVERY_METHOD = "disaster_recovery_method";
  @SerializedName(SERIALIZED_NAME_DISASTER_RECOVERY_METHOD)
  private DisasterRecoveryMethodEnum disasterRecoveryMethod;

  public static final String SERIALIZED_NAME_DISASTER_RECOVERY_URL = "disaster_recovery_url";
  @SerializedName(SERIALIZED_NAME_DISASTER_RECOVERY_URL)
  private URI disasterRecoveryUrl;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domain_name";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private Object recording = null;

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private Boolean secure;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TRANSFER_CALLER_ID = "transfer_caller_id";
  @SerializedName(SERIALIZED_NAME_TRANSFER_CALLER_ID)
  private TrunkEnumTransferCallerId transferCallerId;

  public static final String SERIALIZED_NAME_TRANSFER_MODE = "transfer_mode";
  @SerializedName(SERIALIZED_NAME_TRANSFER_MODE)
  private TrunkEnumTransferSetting transferMode;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public TrunkingV1Trunk() {
  }

  public TrunkingV1Trunk accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Trunk resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public TrunkingV1Trunk authType(String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * The types of authentication mapped to the domain. Can be: &#x60;IP_ACL&#x60; and &#x60;CREDENTIAL_LIST&#x60;. If both are mapped, the values are returned in a comma delimited list. If empty, the domain will not receive any traffic.
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(String authType) {
    this.authType = authType;
  }


  public TrunkingV1Trunk authTypeSet(List<String> authTypeSet) {
    this.authTypeSet = authTypeSet;
    return this;
  }

  public TrunkingV1Trunk addAuthTypeSetItem(String authTypeSetItem) {
    if (this.authTypeSet == null) {
      this.authTypeSet = new ArrayList<>();
    }
    this.authTypeSet.add(authTypeSetItem);
    return this;
  }

  /**
   * Reserved.
   * @return authTypeSet
   */
  @javax.annotation.Nullable
  public List<String> getAuthTypeSet() {
    return authTypeSet;
  }

  public void setAuthTypeSet(List<String> authTypeSet) {
    this.authTypeSet = authTypeSet;
  }


  public TrunkingV1Trunk cnamLookupEnabled(Boolean cnamLookupEnabled) {
    this.cnamLookupEnabled = cnamLookupEnabled;
    return this;
  }

  /**
   * Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If enabled, all inbound calls to the SIP Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
   * @return cnamLookupEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCnamLookupEnabled() {
    return cnamLookupEnabled;
  }

  public void setCnamLookupEnabled(Boolean cnamLookupEnabled) {
    this.cnamLookupEnabled = cnamLookupEnabled;
  }


  public TrunkingV1Trunk dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TrunkingV1Trunk dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public TrunkingV1Trunk disasterRecoveryMethod(DisasterRecoveryMethodEnum disasterRecoveryMethod) {
    this.disasterRecoveryMethod = disasterRecoveryMethod;
    return this;
  }

  /**
   * The HTTP method we use to call the &#x60;disaster_recovery_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;.
   * @return disasterRecoveryMethod
   */
  @javax.annotation.Nullable
  public DisasterRecoveryMethodEnum getDisasterRecoveryMethod() {
    return disasterRecoveryMethod;
  }

  public void setDisasterRecoveryMethod(DisasterRecoveryMethodEnum disasterRecoveryMethod) {
    this.disasterRecoveryMethod = disasterRecoveryMethod;
  }


  public TrunkingV1Trunk disasterRecoveryUrl(URI disasterRecoveryUrl) {
    this.disasterRecoveryUrl = disasterRecoveryUrl;
    return this;
  }

  /**
   * The URL we call using the &#x60;disaster_recovery_method&#x60; if an error occurs while sending SIP traffic towards the configured Origination URL. We retrieve TwiML from this URL and execute the instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking#disaster-recovery) for more information.
   * @return disasterRecoveryUrl
   */
  @javax.annotation.Nullable
  public URI getDisasterRecoveryUrl() {
    return disasterRecoveryUrl;
  }

  public void setDisasterRecoveryUrl(URI disasterRecoveryUrl) {
    this.disasterRecoveryUrl = disasterRecoveryUrl;
  }


  public TrunkingV1Trunk domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and &#x60;-&#x60; and must end with &#x60;pstn.twilio.com&#x60;. See [Termination Settings](https://www.twilio.com/docs/sip-trunking#termination) for more information.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public TrunkingV1Trunk friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The string that you assigned to describe the resource.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public TrunkingV1Trunk links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of related resources.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public TrunkingV1Trunk recording(Object recording) {
    this.recording = recording;
    return this;
  }

  /**
   * The recording settings for the trunk. Can be: &#x60;do-not-record&#x60;, &#x60;record-from-ringing&#x60;, &#x60;record-from-answer&#x60;. If set to &#x60;record-from-ringing&#x60; or &#x60;record-from-answer&#x60;, all calls going through the trunk will be recorded. The only way to change recording parameters is on a sub-resource of a Trunk after it has been created. e.g.&#x60;/Trunks/[Trunk_SID]/Recording -XPOST -d&#39;Mode&#x3D;record-from-answer&#39;&#x60;. See [Recording](https://www.twilio.com/docs/sip-trunking#recording) for more information.
   * @return recording
   */
  @javax.annotation.Nullable
  public Object getRecording() {
    return recording;
  }

  public void setRecording(Object recording) {
    this.recording = recording;
  }


  public TrunkingV1Trunk secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  /**
   * Whether Secure Trunking is enabled for the trunk. If enabled, all calls going through the trunk will be secure using SRTP for media and TLS for signaling. If disabled, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking#securetrunking) for more information.
   * @return secure
   */
  @javax.annotation.Nullable
  public Boolean getSecure() {
    return secure;
  }

  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public TrunkingV1Trunk sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Trunk resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public TrunkingV1Trunk transferCallerId(TrunkEnumTransferCallerId transferCallerId) {
    this.transferCallerId = transferCallerId;
    return this;
  }

  /**
   * Get transferCallerId
   * @return transferCallerId
   */
  @javax.annotation.Nullable
  public TrunkEnumTransferCallerId getTransferCallerId() {
    return transferCallerId;
  }

  public void setTransferCallerId(TrunkEnumTransferCallerId transferCallerId) {
    this.transferCallerId = transferCallerId;
  }


  public TrunkingV1Trunk transferMode(TrunkEnumTransferSetting transferMode) {
    this.transferMode = transferMode;
    return this;
  }

  /**
   * Get transferMode
   * @return transferMode
   */
  @javax.annotation.Nullable
  public TrunkEnumTransferSetting getTransferMode() {
    return transferMode;
  }

  public void setTransferMode(TrunkEnumTransferSetting transferMode) {
    this.transferMode = transferMode;
  }


  public TrunkingV1Trunk url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrunkingV1Trunk trunkingV1Trunk = (TrunkingV1Trunk) o;
    return Objects.equals(this.accountSid, trunkingV1Trunk.accountSid) &&
        Objects.equals(this.authType, trunkingV1Trunk.authType) &&
        Objects.equals(this.authTypeSet, trunkingV1Trunk.authTypeSet) &&
        Objects.equals(this.cnamLookupEnabled, trunkingV1Trunk.cnamLookupEnabled) &&
        Objects.equals(this.dateCreated, trunkingV1Trunk.dateCreated) &&
        Objects.equals(this.dateUpdated, trunkingV1Trunk.dateUpdated) &&
        Objects.equals(this.disasterRecoveryMethod, trunkingV1Trunk.disasterRecoveryMethod) &&
        Objects.equals(this.disasterRecoveryUrl, trunkingV1Trunk.disasterRecoveryUrl) &&
        Objects.equals(this.domainName, trunkingV1Trunk.domainName) &&
        Objects.equals(this.friendlyName, trunkingV1Trunk.friendlyName) &&
        Objects.equals(this.links, trunkingV1Trunk.links) &&
        Objects.equals(this.recording, trunkingV1Trunk.recording) &&
        Objects.equals(this.secure, trunkingV1Trunk.secure) &&
        Objects.equals(this.sid, trunkingV1Trunk.sid) &&
        Objects.equals(this.transferCallerId, trunkingV1Trunk.transferCallerId) &&
        Objects.equals(this.transferMode, trunkingV1Trunk.transferMode) &&
        Objects.equals(this.url, trunkingV1Trunk.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, authType, authTypeSet, cnamLookupEnabled, dateCreated, dateUpdated, disasterRecoveryMethod, disasterRecoveryUrl, domainName, friendlyName, links, recording, secure, sid, transferCallerId, transferMode, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrunkingV1Trunk {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authTypeSet: ").append(toIndentedString(authTypeSet)).append("\n");
    sb.append("    cnamLookupEnabled: ").append(toIndentedString(cnamLookupEnabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    disasterRecoveryMethod: ").append(toIndentedString(disasterRecoveryMethod)).append("\n");
    sb.append("    disasterRecoveryUrl: ").append(toIndentedString(disasterRecoveryUrl)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    transferCallerId: ").append(toIndentedString(transferCallerId)).append("\n");
    sb.append("    transferMode: ").append(toIndentedString(transferMode)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("auth_type");
    openapiFields.add("auth_type_set");
    openapiFields.add("cnam_lookup_enabled");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("disaster_recovery_method");
    openapiFields.add("disaster_recovery_url");
    openapiFields.add("domain_name");
    openapiFields.add("friendly_name");
    openapiFields.add("links");
    openapiFields.add("recording");
    openapiFields.add("secure");
    openapiFields.add("sid");
    openapiFields.add("transfer_caller_id");
    openapiFields.add("transfer_mode");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrunkingV1Trunk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrunkingV1Trunk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrunkingV1Trunk is not found in the empty JSON string", TrunkingV1Trunk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrunkingV1Trunk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrunkingV1Trunk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) && !jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("auth_type_set") != null && !jsonObj.get("auth_type_set").isJsonNull() && !jsonObj.get("auth_type_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type_set` to be an array in the JSON string but got `%s`", jsonObj.get("auth_type_set").toString()));
      }
      if ((jsonObj.get("disaster_recovery_method") != null && !jsonObj.get("disaster_recovery_method").isJsonNull()) && !jsonObj.get("disaster_recovery_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disaster_recovery_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disaster_recovery_method").toString()));
      }
      // validate the optional field `disaster_recovery_method`
      if (jsonObj.get("disaster_recovery_method") != null && !jsonObj.get("disaster_recovery_method").isJsonNull()) {
        DisasterRecoveryMethodEnum.validateJsonElement(jsonObj.get("disaster_recovery_method"));
      }
      if ((jsonObj.get("disaster_recovery_url") != null && !jsonObj.get("disaster_recovery_url").isJsonNull()) && !jsonObj.get("disaster_recovery_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disaster_recovery_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disaster_recovery_url").toString()));
      }
      if ((jsonObj.get("domain_name") != null && !jsonObj.get("domain_name").isJsonNull()) && !jsonObj.get("domain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_name").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("transfer_caller_id") != null && !jsonObj.get("transfer_caller_id").isJsonNull()) && !jsonObj.get("transfer_caller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_caller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_caller_id").toString()));
      }
      // validate the optional field `transfer_caller_id`
      if (jsonObj.get("transfer_caller_id") != null && !jsonObj.get("transfer_caller_id").isJsonNull()) {
        TrunkEnumTransferCallerId.validateJsonElement(jsonObj.get("transfer_caller_id"));
      }
      if ((jsonObj.get("transfer_mode") != null && !jsonObj.get("transfer_mode").isJsonNull()) && !jsonObj.get("transfer_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_mode").toString()));
      }
      // validate the optional field `transfer_mode`
      if (jsonObj.get("transfer_mode") != null && !jsonObj.get("transfer_mode").isJsonNull()) {
        TrunkEnumTransferSetting.validateJsonElement(jsonObj.get("transfer_mode"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrunkingV1Trunk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrunkingV1Trunk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrunkingV1Trunk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrunkingV1Trunk.class));

       return (TypeAdapter<T>) new TypeAdapter<TrunkingV1Trunk>() {
           @Override
           public void write(JsonWriter out, TrunkingV1Trunk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrunkingV1Trunk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrunkingV1Trunk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrunkingV1Trunk
   * @throws IOException if the JSON string is invalid with respect to TrunkingV1Trunk
   */
  public static TrunkingV1Trunk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrunkingV1Trunk.class);
  }

  /**
   * Convert an instance of TrunkingV1Trunk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

