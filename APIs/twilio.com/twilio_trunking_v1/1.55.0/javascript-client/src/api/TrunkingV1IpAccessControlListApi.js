/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListIpAccessControlListResponse from '../model/ListIpAccessControlListResponse';
import TrunkingV1TrunkIpAccessControlList from '../model/TrunkingV1TrunkIpAccessControlList';

/**
* TrunkingV1IpAccessControlList service.
* @module api/TrunkingV1IpAccessControlListApi
* @version 1.55.0
*/
export default class TrunkingV1IpAccessControlListApi {

    /**
    * Constructs a new TrunkingV1IpAccessControlListApi. 
    * @alias module:api/TrunkingV1IpAccessControlListApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIpAccessControlList operation.
     * @callback module:api/TrunkingV1IpAccessControlListApi~createIpAccessControlListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrunkingV1TrunkIpAccessControlList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate an IP Access Control List with a Trunk
     * @param {String} trunkSid The SID of the Trunk to associate the IP Access Control List with.
     * @param {String} ipAccessControlListSid The SID of the [IP Access Control List](https://www.twilio.com/docs/voice/sip/api/sip-ipaccesscontrollist-resource) that you want to associate with the trunk.
     * @param {module:api/TrunkingV1IpAccessControlListApi~createIpAccessControlListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrunkingV1TrunkIpAccessControlList}
     */
    createIpAccessControlList(trunkSid, ipAccessControlListSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trunkSid' is set
      if (trunkSid === undefined || trunkSid === null) {
        throw new Error("Missing the required parameter 'trunkSid' when calling createIpAccessControlList");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling createIpAccessControlList");
      }

      let pathParams = {
        'TrunkSid': trunkSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'IpAccessControlListSid': ipAccessControlListSid
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TrunkingV1TrunkIpAccessControlList;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{TrunkSid}/IpAccessControlLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIpAccessControlList operation.
     * @callback module:api/TrunkingV1IpAccessControlListApi~deleteIpAccessControlListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an associated IP Access Control List from a Trunk
     * @param {String} trunkSid The SID of the Trunk from which to delete the IP Access Control List.
     * @param {String} sid The unique string that we created to identify the IpAccessControlList resource to delete.
     * @param {module:api/TrunkingV1IpAccessControlListApi~deleteIpAccessControlListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIpAccessControlList(trunkSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trunkSid' is set
      if (trunkSid === undefined || trunkSid === null) {
        throw new Error("Missing the required parameter 'trunkSid' when calling deleteIpAccessControlList");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteIpAccessControlList");
      }

      let pathParams = {
        'TrunkSid': trunkSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchIpAccessControlList operation.
     * @callback module:api/TrunkingV1IpAccessControlListApi~fetchIpAccessControlListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrunkingV1TrunkIpAccessControlList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} trunkSid The SID of the Trunk from which to fetch the IP Access Control List.
     * @param {String} sid The unique string that we created to identify the IpAccessControlList resource to fetch.
     * @param {module:api/TrunkingV1IpAccessControlListApi~fetchIpAccessControlListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrunkingV1TrunkIpAccessControlList}
     */
    fetchIpAccessControlList(trunkSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trunkSid' is set
      if (trunkSid === undefined || trunkSid === null) {
        throw new Error("Missing the required parameter 'trunkSid' when calling fetchIpAccessControlList");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchIpAccessControlList");
      }

      let pathParams = {
        'TrunkSid': trunkSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrunkingV1TrunkIpAccessControlList;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listIpAccessControlList operation.
     * @callback module:api/TrunkingV1IpAccessControlListApi~listIpAccessControlListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIpAccessControlListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all IP Access Control Lists for a Trunk
     * @param {String} trunkSid The SID of the Trunk from which to read the IP Access Control Lists.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TrunkingV1IpAccessControlListApi~listIpAccessControlListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIpAccessControlListResponse}
     */
    listIpAccessControlList(trunkSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trunkSid' is set
      if (trunkSid === undefined || trunkSid === null) {
        throw new Error("Missing the required parameter 'trunkSid' when calling listIpAccessControlList");
      }

      let pathParams = {
        'TrunkSid': trunkSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIpAccessControlListResponse;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{TrunkSid}/IpAccessControlLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
