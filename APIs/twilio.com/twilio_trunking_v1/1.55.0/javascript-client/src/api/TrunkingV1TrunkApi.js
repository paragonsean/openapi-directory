/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTrunkResponse from '../model/ListTrunkResponse';
import TrunkEnumTransferCallerId from '../model/TrunkEnumTransferCallerId';
import TrunkEnumTransferSetting from '../model/TrunkEnumTransferSetting';
import TrunkingV1Trunk from '../model/TrunkingV1Trunk';

/**
* TrunkingV1Trunk service.
* @module api/TrunkingV1TrunkApi
* @version 1.55.0
*/
export default class TrunkingV1TrunkApi {

    /**
    * Constructs a new TrunkingV1TrunkApi. 
    * @alias module:api/TrunkingV1TrunkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTrunk operation.
     * @callback module:api/TrunkingV1TrunkApi~createTrunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrunkingV1Trunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cnamLookupEnabled] Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If enabled, all inbound calls to the SIP Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     * @param {module:model/String} [disasterRecoveryMethod] The HTTP method we should use to call the `disaster_recovery_url`. Can be: `GET` or `POST`.
     * @param {String} [disasterRecoveryUrl] The URL we should call using the `disaster_recovery_method` if an error occurs while sending SIP traffic towards the configured Origination URL. We retrieve TwiML from the URL and execute the instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking#disaster-recovery) for more information.
     * @param {String} [domainName] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking#termination) for more information.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {Boolean} [secure] Whether Secure Trunking is enabled for the trunk. If enabled, all calls going through the trunk will be secure using SRTP for media and TLS for signaling. If disabled, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking#securetrunking) for more information.
     * @param {module:model/TrunkEnumTransferCallerId} [transferCallerId] 
     * @param {module:model/TrunkEnumTransferSetting} [transferMode] 
     * @param {module:api/TrunkingV1TrunkApi~createTrunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrunkingV1Trunk}
     */
    createTrunk(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CnamLookupEnabled': opts['cnamLookupEnabled'],
        'DisasterRecoveryMethod': opts['disasterRecoveryMethod'],
        'DisasterRecoveryUrl': opts['disasterRecoveryUrl'],
        'DomainName': opts['domainName'],
        'FriendlyName': opts['friendlyName'],
        'Secure': opts['secure'],
        'TransferCallerId': opts['transferCallerId'],
        'TransferMode': opts['transferMode']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TrunkingV1Trunk;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrunk operation.
     * @callback module:api/TrunkingV1TrunkApi~deleteTrunkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string that we created to identify the Trunk resource to delete.
     * @param {module:api/TrunkingV1TrunkApi~deleteTrunkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrunk(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTrunk");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTrunk operation.
     * @callback module:api/TrunkingV1TrunkApi~fetchTrunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrunkingV1Trunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string that we created to identify the Trunk resource to fetch.
     * @param {module:api/TrunkingV1TrunkApi~fetchTrunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrunkingV1Trunk}
     */
    fetchTrunk(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTrunk");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrunkingV1Trunk;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrunk operation.
     * @callback module:api/TrunkingV1TrunkApi~listTrunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrunkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TrunkingV1TrunkApi~listTrunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrunkResponse}
     */
    listTrunk(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTrunkResponse;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrunk operation.
     * @callback module:api/TrunkingV1TrunkApi~updateTrunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrunkingV1Trunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string that we created to identify the OriginationUrl resource to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cnamLookupEnabled] Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If enabled, all inbound calls to the SIP Trunk from the United States and Canada automatically perform a CNAM Lookup and display Caller ID data on your phone. See [CNAM Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for more information.
     * @param {module:model/String} [disasterRecoveryMethod] The HTTP method we should use to call the `disaster_recovery_url`. Can be: `GET` or `POST`.
     * @param {String} [disasterRecoveryUrl] The URL we should call using the `disaster_recovery_method` if an error occurs while sending SIP traffic towards the configured Origination URL. We retrieve TwiML from the URL and execute the instructions like any other normal TwiML call. See [Disaster Recovery](https://www.twilio.com/docs/sip-trunking#disaster-recovery) for more information.
     * @param {String} [domainName] The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and `-` and must end with `pstn.twilio.com`. See [Termination Settings](https://www.twilio.com/docs/sip-trunking#termination) for more information.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {Boolean} [secure] Whether Secure Trunking is enabled for the trunk. If enabled, all calls going through the trunk will be secure using SRTP for media and TLS for signaling. If disabled, then RTP will be used for media. See [Secure Trunking](https://www.twilio.com/docs/sip-trunking#securetrunking) for more information.
     * @param {module:model/TrunkEnumTransferCallerId} [transferCallerId] 
     * @param {module:model/TrunkEnumTransferSetting} [transferMode] 
     * @param {module:api/TrunkingV1TrunkApi~updateTrunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrunkingV1Trunk}
     */
    updateTrunk(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTrunk");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CnamLookupEnabled': opts['cnamLookupEnabled'],
        'DisasterRecoveryMethod': opts['disasterRecoveryMethod'],
        'DisasterRecoveryUrl': opts['disasterRecoveryUrl'],
        'DomainName': opts['domainName'],
        'FriendlyName': opts['friendlyName'],
        'Secure': opts['secure'],
        'TransferCallerId': opts['transferCallerId'],
        'TransferMode': opts['transferMode']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TrunkingV1Trunk;
      let basePaths = ['https://trunking.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Trunks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
