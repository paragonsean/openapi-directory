/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrunkingV1OriginationUrlApi_H
#define OAI_OAITrunkingV1OriginationUrlApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListOriginationUrlResponse.h"
#include "OAITrunking_v1_trunk_origination_url.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrunkingV1OriginationUrlApi : public QObject {
    Q_OBJECT

public:
    OAITrunkingV1OriginationUrlApi(const int timeOut = 0);
    ~OAITrunkingV1OriginationUrlApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  enabled bool [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  priority qint32 [required]
    * @param[in]  sip_url QString [required]
    * @param[in]  weight qint32 [required]
    */
    virtual void createOriginationUrl(const QString &trunk_sid, const bool &enabled, const QString &friendly_name, const qint32 &priority, const QString &sip_url, const qint32 &weight);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteOriginationUrl(const QString &trunk_sid, const QString &sid);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchOriginationUrl(const QString &trunk_sid, const QString &sid);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listOriginationUrl(const QString &trunk_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  sip_url QString [optional]
    * @param[in]  weight qint32 [optional]
    */
    virtual void updateOriginationUrl(const QString &trunk_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sip_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &weight = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOriginationUrlCallback(OAIHttpRequestWorker *worker);
    void deleteOriginationUrlCallback(OAIHttpRequestWorker *worker);
    void fetchOriginationUrlCallback(OAIHttpRequestWorker *worker);
    void listOriginationUrlCallback(OAIHttpRequestWorker *worker);
    void updateOriginationUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOriginationUrlSignal(OAITrunking_v1_trunk_origination_url summary);
    void deleteOriginationUrlSignal();
    void fetchOriginationUrlSignal(OAITrunking_v1_trunk_origination_url summary);
    void listOriginationUrlSignal(OAIListOriginationUrlResponse summary);
    void updateOriginationUrlSignal(OAITrunking_v1_trunk_origination_url summary);


    void createOriginationUrlSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk_origination_url summary);
    void deleteOriginationUrlSignalFull(OAIHttpRequestWorker *worker);
    void fetchOriginationUrlSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk_origination_url summary);
    void listOriginationUrlSignalFull(OAIHttpRequestWorker *worker, OAIListOriginationUrlResponse summary);
    void updateOriginationUrlSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk_origination_url summary);

    Q_DECL_DEPRECATED_X("Use createOriginationUrlSignalError() instead")
    void createOriginationUrlSignalE(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOriginationUrlSignalError(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOriginationUrlSignalError() instead")
    void deleteOriginationUrlSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOriginationUrlSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchOriginationUrlSignalError() instead")
    void fetchOriginationUrlSignalE(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchOriginationUrlSignalError(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOriginationUrlSignalError() instead")
    void listOriginationUrlSignalE(OAIListOriginationUrlResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOriginationUrlSignalError(OAIListOriginationUrlResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOriginationUrlSignalError() instead")
    void updateOriginationUrlSignalE(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOriginationUrlSignalError(OAITrunking_v1_trunk_origination_url summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOriginationUrlSignalErrorFull() instead")
    void createOriginationUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOriginationUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOriginationUrlSignalErrorFull() instead")
    void deleteOriginationUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOriginationUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchOriginationUrlSignalErrorFull() instead")
    void fetchOriginationUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchOriginationUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOriginationUrlSignalErrorFull() instead")
    void listOriginationUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOriginationUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOriginationUrlSignalErrorFull() instead")
    void updateOriginationUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOriginationUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
