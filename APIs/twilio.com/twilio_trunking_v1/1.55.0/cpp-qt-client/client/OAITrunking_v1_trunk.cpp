/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrunking_v1_trunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrunking_v1_trunk::OAITrunking_v1_trunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrunking_v1_trunk::OAITrunking_v1_trunk() {
    this->initializeModel();
}

OAITrunking_v1_trunk::~OAITrunking_v1_trunk() {}

void OAITrunking_v1_trunk::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_auth_type_set_isSet = false;
    m_auth_type_set_isValid = false;

    m_cnam_lookup_enabled_isSet = false;
    m_cnam_lookup_enabled_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_disaster_recovery_method_isSet = false;
    m_disaster_recovery_method_isValid = false;

    m_disaster_recovery_url_isSet = false;
    m_disaster_recovery_url_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_secure_isSet = false;
    m_secure_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_transfer_caller_id_isSet = false;
    m_transfer_caller_id_isValid = false;

    m_transfer_mode_isSet = false;
    m_transfer_mode_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITrunking_v1_trunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrunking_v1_trunk::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("auth_type")]);
    m_auth_type_isSet = !json[QString("auth_type")].isNull() && m_auth_type_isValid;

    m_auth_type_set_isValid = ::OpenAPI::fromJsonValue(m_auth_type_set, json[QString("auth_type_set")]);
    m_auth_type_set_isSet = !json[QString("auth_type_set")].isNull() && m_auth_type_set_isValid;

    m_cnam_lookup_enabled_isValid = ::OpenAPI::fromJsonValue(m_cnam_lookup_enabled, json[QString("cnam_lookup_enabled")]);
    m_cnam_lookup_enabled_isSet = !json[QString("cnam_lookup_enabled")].isNull() && m_cnam_lookup_enabled_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_disaster_recovery_method_isValid = ::OpenAPI::fromJsonValue(m_disaster_recovery_method, json[QString("disaster_recovery_method")]);
    m_disaster_recovery_method_isSet = !json[QString("disaster_recovery_method")].isNull() && m_disaster_recovery_method_isValid;

    m_disaster_recovery_url_isValid = ::OpenAPI::fromJsonValue(m_disaster_recovery_url, json[QString("disaster_recovery_url")]);
    m_disaster_recovery_url_isSet = !json[QString("disaster_recovery_url")].isNull() && m_disaster_recovery_url_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domain_name")]);
    m_domain_name_isSet = !json[QString("domain_name")].isNull() && m_domain_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_secure_isValid = ::OpenAPI::fromJsonValue(m_secure, json[QString("secure")]);
    m_secure_isSet = !json[QString("secure")].isNull() && m_secure_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_transfer_caller_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_caller_id, json[QString("transfer_caller_id")]);
    m_transfer_caller_id_isSet = !json[QString("transfer_caller_id")].isNull() && m_transfer_caller_id_isValid;

    m_transfer_mode_isValid = ::OpenAPI::fromJsonValue(m_transfer_mode, json[QString("transfer_mode")]);
    m_transfer_mode_isSet = !json[QString("transfer_mode")].isNull() && m_transfer_mode_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITrunking_v1_trunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrunking_v1_trunk::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("auth_type"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_auth_type_set.size() > 0) {
        obj.insert(QString("auth_type_set"), ::OpenAPI::toJsonValue(m_auth_type_set));
    }
    if (m_cnam_lookup_enabled_isSet) {
        obj.insert(QString("cnam_lookup_enabled"), ::OpenAPI::toJsonValue(m_cnam_lookup_enabled));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_disaster_recovery_method_isSet) {
        obj.insert(QString("disaster_recovery_method"), ::OpenAPI::toJsonValue(m_disaster_recovery_method));
    }
    if (m_disaster_recovery_url_isSet) {
        obj.insert(QString("disaster_recovery_url"), ::OpenAPI::toJsonValue(m_disaster_recovery_url));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domain_name"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_recording_isSet) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_secure_isSet) {
        obj.insert(QString("secure"), ::OpenAPI::toJsonValue(m_secure));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_transfer_caller_id.isSet()) {
        obj.insert(QString("transfer_caller_id"), ::OpenAPI::toJsonValue(m_transfer_caller_id));
    }
    if (m_transfer_mode.isSet()) {
        obj.insert(QString("transfer_mode"), ::OpenAPI::toJsonValue(m_transfer_mode));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITrunking_v1_trunk::getAccountSid() const {
    return m_account_sid;
}
void OAITrunking_v1_trunk::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAITrunking_v1_trunk::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAITrunking_v1_trunk::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAITrunking_v1_trunk::getAuthType() const {
    return m_auth_type;
}
void OAITrunking_v1_trunk::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAITrunking_v1_trunk::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAITrunking_v1_trunk::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QList<QString> OAITrunking_v1_trunk::getAuthTypeSet() const {
    return m_auth_type_set;
}
void OAITrunking_v1_trunk::setAuthTypeSet(const QList<QString> &auth_type_set) {
    m_auth_type_set = auth_type_set;
    m_auth_type_set_isSet = true;
}

bool OAITrunking_v1_trunk::is_auth_type_set_Set() const{
    return m_auth_type_set_isSet;
}

bool OAITrunking_v1_trunk::is_auth_type_set_Valid() const{
    return m_auth_type_set_isValid;
}

bool OAITrunking_v1_trunk::isCnamLookupEnabled() const {
    return m_cnam_lookup_enabled;
}
void OAITrunking_v1_trunk::setCnamLookupEnabled(const bool &cnam_lookup_enabled) {
    m_cnam_lookup_enabled = cnam_lookup_enabled;
    m_cnam_lookup_enabled_isSet = true;
}

bool OAITrunking_v1_trunk::is_cnam_lookup_enabled_Set() const{
    return m_cnam_lookup_enabled_isSet;
}

bool OAITrunking_v1_trunk::is_cnam_lookup_enabled_Valid() const{
    return m_cnam_lookup_enabled_isValid;
}

QDateTime OAITrunking_v1_trunk::getDateCreated() const {
    return m_date_created;
}
void OAITrunking_v1_trunk::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITrunking_v1_trunk::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITrunking_v1_trunk::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITrunking_v1_trunk::getDateUpdated() const {
    return m_date_updated;
}
void OAITrunking_v1_trunk::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAITrunking_v1_trunk::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAITrunking_v1_trunk::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAITrunking_v1_trunk::getDisasterRecoveryMethod() const {
    return m_disaster_recovery_method;
}
void OAITrunking_v1_trunk::setDisasterRecoveryMethod(const QString &disaster_recovery_method) {
    m_disaster_recovery_method = disaster_recovery_method;
    m_disaster_recovery_method_isSet = true;
}

bool OAITrunking_v1_trunk::is_disaster_recovery_method_Set() const{
    return m_disaster_recovery_method_isSet;
}

bool OAITrunking_v1_trunk::is_disaster_recovery_method_Valid() const{
    return m_disaster_recovery_method_isValid;
}

QString OAITrunking_v1_trunk::getDisasterRecoveryUrl() const {
    return m_disaster_recovery_url;
}
void OAITrunking_v1_trunk::setDisasterRecoveryUrl(const QString &disaster_recovery_url) {
    m_disaster_recovery_url = disaster_recovery_url;
    m_disaster_recovery_url_isSet = true;
}

bool OAITrunking_v1_trunk::is_disaster_recovery_url_Set() const{
    return m_disaster_recovery_url_isSet;
}

bool OAITrunking_v1_trunk::is_disaster_recovery_url_Valid() const{
    return m_disaster_recovery_url_isValid;
}

QString OAITrunking_v1_trunk::getDomainName() const {
    return m_domain_name;
}
void OAITrunking_v1_trunk::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAITrunking_v1_trunk::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAITrunking_v1_trunk::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAITrunking_v1_trunk::getFriendlyName() const {
    return m_friendly_name;
}
void OAITrunking_v1_trunk::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITrunking_v1_trunk::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITrunking_v1_trunk::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIObject OAITrunking_v1_trunk::getLinks() const {
    return m_links;
}
void OAITrunking_v1_trunk::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITrunking_v1_trunk::is_links_Set() const{
    return m_links_isSet;
}

bool OAITrunking_v1_trunk::is_links_Valid() const{
    return m_links_isValid;
}

QJsonValue OAITrunking_v1_trunk::getRecording() const {
    return m_recording;
}
void OAITrunking_v1_trunk::setRecording(const QJsonValue &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAITrunking_v1_trunk::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAITrunking_v1_trunk::is_recording_Valid() const{
    return m_recording_isValid;
}

bool OAITrunking_v1_trunk::isSecure() const {
    return m_secure;
}
void OAITrunking_v1_trunk::setSecure(const bool &secure) {
    m_secure = secure;
    m_secure_isSet = true;
}

bool OAITrunking_v1_trunk::is_secure_Set() const{
    return m_secure_isSet;
}

bool OAITrunking_v1_trunk::is_secure_Valid() const{
    return m_secure_isValid;
}

QString OAITrunking_v1_trunk::getSid() const {
    return m_sid;
}
void OAITrunking_v1_trunk::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAITrunking_v1_trunk::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAITrunking_v1_trunk::is_sid_Valid() const{
    return m_sid_isValid;
}

OAITrunk_enum_transfer_caller_id OAITrunking_v1_trunk::getTransferCallerId() const {
    return m_transfer_caller_id;
}
void OAITrunking_v1_trunk::setTransferCallerId(const OAITrunk_enum_transfer_caller_id &transfer_caller_id) {
    m_transfer_caller_id = transfer_caller_id;
    m_transfer_caller_id_isSet = true;
}

bool OAITrunking_v1_trunk::is_transfer_caller_id_Set() const{
    return m_transfer_caller_id_isSet;
}

bool OAITrunking_v1_trunk::is_transfer_caller_id_Valid() const{
    return m_transfer_caller_id_isValid;
}

OAITrunk_enum_transfer_setting OAITrunking_v1_trunk::getTransferMode() const {
    return m_transfer_mode;
}
void OAITrunking_v1_trunk::setTransferMode(const OAITrunk_enum_transfer_setting &transfer_mode) {
    m_transfer_mode = transfer_mode;
    m_transfer_mode_isSet = true;
}

bool OAITrunking_v1_trunk::is_transfer_mode_Set() const{
    return m_transfer_mode_isSet;
}

bool OAITrunking_v1_trunk::is_transfer_mode_Valid() const{
    return m_transfer_mode_isValid;
}

QString OAITrunking_v1_trunk::getUrl() const {
    return m_url;
}
void OAITrunking_v1_trunk::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITrunking_v1_trunk::is_url_Set() const{
    return m_url_isSet;
}

bool OAITrunking_v1_trunk::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITrunking_v1_trunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnam_lookup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disaster_recovery_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disaster_recovery_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_caller_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrunking_v1_trunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
