/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrunkingV1OriginationUrlApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITrunkingV1OriginationUrlApi::OAITrunkingV1OriginationUrlApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITrunkingV1OriginationUrlApi::~OAITrunkingV1OriginationUrlApi() {
}

void OAITrunkingV1OriginationUrlApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createOriginationUrl", serverConf);
    _serverIndices.insert("createOriginationUrl", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteOriginationUrl", serverConf);
    _serverIndices.insert("deleteOriginationUrl", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchOriginationUrl", serverConf);
    _serverIndices.insert("fetchOriginationUrl", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listOriginationUrl", serverConf);
    _serverIndices.insert("listOriginationUrl", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trunking.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateOriginationUrl", serverConf);
    _serverIndices.insert("updateOriginationUrl", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITrunkingV1OriginationUrlApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITrunkingV1OriginationUrlApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITrunkingV1OriginationUrlApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITrunkingV1OriginationUrlApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITrunkingV1OriginationUrlApi::setUsername(const QString &username) {
    _username = username;
}

void OAITrunkingV1OriginationUrlApi::setPassword(const QString &password) {
    _password = password;
}


void OAITrunkingV1OriginationUrlApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITrunkingV1OriginationUrlApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITrunkingV1OriginationUrlApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITrunkingV1OriginationUrlApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITrunkingV1OriginationUrlApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITrunkingV1OriginationUrlApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITrunkingV1OriginationUrlApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITrunkingV1OriginationUrlApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITrunkingV1OriginationUrlApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITrunkingV1OriginationUrlApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITrunkingV1OriginationUrlApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITrunkingV1OriginationUrlApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITrunkingV1OriginationUrlApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITrunkingV1OriginationUrlApi::createOriginationUrl(const QString &trunk_sid, const bool &enabled, const QString &friendly_name, const qint32 &priority, const QString &sip_url, const qint32 &weight) {
    QString fullPath = QString(_serverConfigs["createOriginationUrl"][_serverIndices.value("createOriginationUrl")].URL()+"/v1/Trunks/{TrunkSid}/OriginationUrls");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString trunk_sidPathParam("{");
        trunk_sidPathParam.append("TrunkSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TrunkSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TrunkSid"+pathSuffix : pathPrefix;
        fullPath.replace(trunk_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trunk_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("Enabled", ::OpenAPI::toStringValue(enabled));
    }
    
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name));
    }
    
    {
        input.add_var("Priority", ::OpenAPI::toStringValue(priority));
    }
    
    {
        input.add_var("SipUrl", ::OpenAPI::toStringValue(sip_url));
    }
    
    {
        input.add_var("Weight", ::OpenAPI::toStringValue(weight));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrunkingV1OriginationUrlApi::createOriginationUrlCallback);
    connect(this, &OAITrunkingV1OriginationUrlApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrunkingV1OriginationUrlApi::createOriginationUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITrunking_v1_trunk_origination_url output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createOriginationUrlSignal(output);
        Q_EMIT createOriginationUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createOriginationUrlSignalE(output, error_type, error_str);
        Q_EMIT createOriginationUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createOriginationUrlSignalError(output, error_type, error_str);
        Q_EMIT createOriginationUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrunkingV1OriginationUrlApi::deleteOriginationUrl(const QString &trunk_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteOriginationUrl"][_serverIndices.value("deleteOriginationUrl")].URL()+"/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString trunk_sidPathParam("{");
        trunk_sidPathParam.append("TrunkSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TrunkSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TrunkSid"+pathSuffix : pathPrefix;
        fullPath.replace(trunk_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trunk_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrunkingV1OriginationUrlApi::deleteOriginationUrlCallback);
    connect(this, &OAITrunkingV1OriginationUrlApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrunkingV1OriginationUrlApi::deleteOriginationUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteOriginationUrlSignal();
        Q_EMIT deleteOriginationUrlSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteOriginationUrlSignalE(error_type, error_str);
        Q_EMIT deleteOriginationUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteOriginationUrlSignalError(error_type, error_str);
        Q_EMIT deleteOriginationUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrunkingV1OriginationUrlApi::fetchOriginationUrl(const QString &trunk_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchOriginationUrl"][_serverIndices.value("fetchOriginationUrl")].URL()+"/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString trunk_sidPathParam("{");
        trunk_sidPathParam.append("TrunkSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TrunkSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TrunkSid"+pathSuffix : pathPrefix;
        fullPath.replace(trunk_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trunk_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrunkingV1OriginationUrlApi::fetchOriginationUrlCallback);
    connect(this, &OAITrunkingV1OriginationUrlApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrunkingV1OriginationUrlApi::fetchOriginationUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITrunking_v1_trunk_origination_url output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchOriginationUrlSignal(output);
        Q_EMIT fetchOriginationUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchOriginationUrlSignalE(output, error_type, error_str);
        Q_EMIT fetchOriginationUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchOriginationUrlSignalError(output, error_type, error_str);
        Q_EMIT fetchOriginationUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrunkingV1OriginationUrlApi::listOriginationUrl(const QString &trunk_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listOriginationUrl"][_serverIndices.value("listOriginationUrl")].URL()+"/v1/Trunks/{TrunkSid}/OriginationUrls");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString trunk_sidPathParam("{");
        trunk_sidPathParam.append("TrunkSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TrunkSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TrunkSid"+pathSuffix : pathPrefix;
        fullPath.replace(trunk_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trunk_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrunkingV1OriginationUrlApi::listOriginationUrlCallback);
    connect(this, &OAITrunkingV1OriginationUrlApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrunkingV1OriginationUrlApi::listOriginationUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListOriginationUrlResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listOriginationUrlSignal(output);
        Q_EMIT listOriginationUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listOriginationUrlSignalE(output, error_type, error_str);
        Q_EMIT listOriginationUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listOriginationUrlSignalError(output, error_type, error_str);
        Q_EMIT listOriginationUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrunkingV1OriginationUrlApi::updateOriginationUrl(const QString &trunk_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &enabled, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<qint32> &priority, const ::OpenAPI::OptionalParam<QString> &sip_url, const ::OpenAPI::OptionalParam<qint32> &weight) {
    QString fullPath = QString(_serverConfigs["updateOriginationUrl"][_serverIndices.value("updateOriginationUrl")].URL()+"/v1/Trunks/{TrunkSid}/OriginationUrls/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString trunk_sidPathParam("{");
        trunk_sidPathParam.append("TrunkSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TrunkSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TrunkSid"+pathSuffix : pathPrefix;
        fullPath.replace(trunk_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(trunk_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (enabled.hasValue())
    {
        input.add_var("Enabled", ::OpenAPI::toStringValue(enabled.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    if (priority.hasValue())
    {
        input.add_var("Priority", ::OpenAPI::toStringValue(priority.value()));
    }
    if (sip_url.hasValue())
    {
        input.add_var("SipUrl", ::OpenAPI::toStringValue(sip_url.value()));
    }
    if (weight.hasValue())
    {
        input.add_var("Weight", ::OpenAPI::toStringValue(weight.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrunkingV1OriginationUrlApi::updateOriginationUrlCallback);
    connect(this, &OAITrunkingV1OriginationUrlApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrunkingV1OriginationUrlApi::updateOriginationUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITrunking_v1_trunk_origination_url output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateOriginationUrlSignal(output);
        Q_EMIT updateOriginationUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateOriginationUrlSignalE(output, error_type, error_str);
        Q_EMIT updateOriginationUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateOriginationUrlSignalError(output, error_type, error_str);
        Q_EMIT updateOriginationUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrunkingV1OriginationUrlApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
