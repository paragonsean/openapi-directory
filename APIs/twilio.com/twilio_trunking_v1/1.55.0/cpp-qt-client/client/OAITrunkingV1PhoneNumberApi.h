/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrunkingV1PhoneNumberApi_H
#define OAI_OAITrunkingV1PhoneNumberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListPhoneNumberResponse.h"
#include "OAITrunking_v1_trunk_phone_number.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrunkingV1PhoneNumberApi : public QObject {
    Q_OBJECT

public:
    OAITrunkingV1PhoneNumberApi(const int timeOut = 0);
    ~OAITrunkingV1PhoneNumberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  phone_number_sid QString [required]
    */
    virtual void createPhoneNumber(const QString &trunk_sid, const QString &phone_number_sid);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deletePhoneNumber(const QString &trunk_sid, const QString &sid);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchPhoneNumber(const QString &trunk_sid, const QString &sid);

    /**
    * @param[in]  trunk_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPhoneNumber(const QString &trunk_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void deletePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void fetchPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void listPhoneNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPhoneNumberSignal(OAITrunking_v1_trunk_phone_number summary);
    void deletePhoneNumberSignal();
    void fetchPhoneNumberSignal(OAITrunking_v1_trunk_phone_number summary);
    void listPhoneNumberSignal(OAIListPhoneNumberResponse summary);


    void createPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk_phone_number summary);
    void deletePhoneNumberSignalFull(OAIHttpRequestWorker *worker);
    void fetchPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk_phone_number summary);
    void listPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIListPhoneNumberResponse summary);

    Q_DECL_DEPRECATED_X("Use createPhoneNumberSignalError() instead")
    void createPhoneNumberSignalE(OAITrunking_v1_trunk_phone_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPhoneNumberSignalError(OAITrunking_v1_trunk_phone_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePhoneNumberSignalError() instead")
    void deletePhoneNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePhoneNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPhoneNumberSignalError() instead")
    void fetchPhoneNumberSignalE(OAITrunking_v1_trunk_phone_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPhoneNumberSignalError(OAITrunking_v1_trunk_phone_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberSignalError() instead")
    void listPhoneNumberSignalE(OAIListPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberSignalError(OAIListPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPhoneNumberSignalErrorFull() instead")
    void createPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePhoneNumberSignalErrorFull() instead")
    void deletePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPhoneNumberSignalErrorFull() instead")
    void fetchPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberSignalErrorFull() instead")
    void listPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
