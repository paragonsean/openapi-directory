/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrunkingV1TrunkApi_H
#define OAI_OAITrunkingV1TrunkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTrunkResponse.h"
#include "OAITrunk_enum_transfer_caller_id.h"
#include "OAITrunk_enum_transfer_setting.h"
#include "OAITrunking_v1_trunk.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrunkingV1TrunkApi : public QObject {
    Q_OBJECT

public:
    OAITrunkingV1TrunkApi(const int timeOut = 0);
    ~OAITrunkingV1TrunkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cnam_lookup_enabled bool [optional]
    * @param[in]  disaster_recovery_method QString [optional]
    * @param[in]  disaster_recovery_url QString [optional]
    * @param[in]  domain_name QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  secure bool [optional]
    * @param[in]  transfer_caller_id OAITrunk_enum_transfer_caller_id [optional]
    * @param[in]  transfer_mode OAITrunk_enum_transfer_setting [optional]
    */
    virtual void createTrunk(const ::OpenAPI::OptionalParam<bool> &cnam_lookup_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disaster_recovery_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disaster_recovery_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &secure = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_caller_id> &transfer_caller_id = ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_caller_id>(), const ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_setting> &transfer_mode = ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_setting>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteTrunk(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchTrunk(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTrunk(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  cnam_lookup_enabled bool [optional]
    * @param[in]  disaster_recovery_method QString [optional]
    * @param[in]  disaster_recovery_url QString [optional]
    * @param[in]  domain_name QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  secure bool [optional]
    * @param[in]  transfer_caller_id OAITrunk_enum_transfer_caller_id [optional]
    * @param[in]  transfer_mode OAITrunk_enum_transfer_setting [optional]
    */
    virtual void updateTrunk(const QString &sid, const ::OpenAPI::OptionalParam<bool> &cnam_lookup_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disaster_recovery_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disaster_recovery_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &secure = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_caller_id> &transfer_caller_id = ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_caller_id>(), const ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_setting> &transfer_mode = ::OpenAPI::OptionalParam<OAITrunk_enum_transfer_setting>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTrunkCallback(OAIHttpRequestWorker *worker);
    void deleteTrunkCallback(OAIHttpRequestWorker *worker);
    void fetchTrunkCallback(OAIHttpRequestWorker *worker);
    void listTrunkCallback(OAIHttpRequestWorker *worker);
    void updateTrunkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTrunkSignal(OAITrunking_v1_trunk summary);
    void deleteTrunkSignal();
    void fetchTrunkSignal(OAITrunking_v1_trunk summary);
    void listTrunkSignal(OAIListTrunkResponse summary);
    void updateTrunkSignal(OAITrunking_v1_trunk summary);


    void createTrunkSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk summary);
    void deleteTrunkSignalFull(OAIHttpRequestWorker *worker);
    void fetchTrunkSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk summary);
    void listTrunkSignalFull(OAIHttpRequestWorker *worker, OAIListTrunkResponse summary);
    void updateTrunkSignalFull(OAIHttpRequestWorker *worker, OAITrunking_v1_trunk summary);

    Q_DECL_DEPRECATED_X("Use createTrunkSignalError() instead")
    void createTrunkSignalE(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrunkSignalError(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrunkSignalError() instead")
    void deleteTrunkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrunkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrunkSignalError() instead")
    void fetchTrunkSignalE(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrunkSignalError(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrunkSignalError() instead")
    void listTrunkSignalE(OAIListTrunkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrunkSignalError(OAIListTrunkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrunkSignalError() instead")
    void updateTrunkSignalE(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrunkSignalError(OAITrunking_v1_trunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTrunkSignalErrorFull() instead")
    void createTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrunkSignalErrorFull() instead")
    void deleteTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrunkSignalErrorFull() instead")
    void fetchTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrunkSignalErrorFull() instead")
    void listTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrunkSignalErrorFull() instead")
    void updateTrunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
