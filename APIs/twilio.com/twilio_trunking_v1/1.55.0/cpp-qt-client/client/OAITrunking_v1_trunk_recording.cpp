/**
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrunking_v1_trunk_recording.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrunking_v1_trunk_recording::OAITrunking_v1_trunk_recording(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrunking_v1_trunk_recording::OAITrunking_v1_trunk_recording() {
    this->initializeModel();
}

OAITrunking_v1_trunk_recording::~OAITrunking_v1_trunk_recording() {}

void OAITrunking_v1_trunk_recording::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;
}

void OAITrunking_v1_trunk_recording::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrunking_v1_trunk_recording::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;
}

QString OAITrunking_v1_trunk_recording::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrunking_v1_trunk_recording::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_trim.isSet()) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    return obj;
}

OAIRecording_enum_recording_mode OAITrunking_v1_trunk_recording::getMode() const {
    return m_mode;
}
void OAITrunking_v1_trunk_recording::setMode(const OAIRecording_enum_recording_mode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITrunking_v1_trunk_recording::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITrunking_v1_trunk_recording::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIRecording_enum_recording_trim OAITrunking_v1_trunk_recording::getTrim() const {
    return m_trim;
}
void OAITrunking_v1_trunk_recording::setTrim(const OAIRecording_enum_recording_trim &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAITrunking_v1_trunk_recording::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAITrunking_v1_trunk_recording::is_trim_Valid() const{
    return m_trim_isValid;
}

bool OAITrunking_v1_trunk_recording::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrunking_v1_trunk_recording::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
