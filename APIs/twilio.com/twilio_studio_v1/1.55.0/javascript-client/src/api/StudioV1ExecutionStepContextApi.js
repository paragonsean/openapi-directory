/**
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StudioV1FlowExecutionExecutionStepExecutionStepContext from '../model/StudioV1FlowExecutionExecutionStepExecutionStepContext';

/**
* StudioV1ExecutionStepContext service.
* @module api/StudioV1ExecutionStepContextApi
* @version 1.55.0
*/
export default class StudioV1ExecutionStepContextApi {

    /**
    * Constructs a new StudioV1ExecutionStepContextApi. 
    * @alias module:api/StudioV1ExecutionStepContextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchExecutionStepContext operation.
     * @callback module:api/StudioV1ExecutionStepContextApi~fetchExecutionStepContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudioV1FlowExecutionExecutionStepExecutionStepContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the context for an Execution Step.
     * @param {String} flowSid The SID of the Flow with the Step to fetch.
     * @param {String} executionSid The SID of the Execution resource with the Step to fetch.
     * @param {String} stepSid The SID of the Step to fetch.
     * @param {module:api/StudioV1ExecutionStepContextApi~fetchExecutionStepContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudioV1FlowExecutionExecutionStepExecutionStepContext}
     */
    fetchExecutionStepContext(flowSid, executionSid, stepSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling fetchExecutionStepContext");
      }
      // verify the required parameter 'executionSid' is set
      if (executionSid === undefined || executionSid === null) {
        throw new Error("Missing the required parameter 'executionSid' when calling fetchExecutionStepContext");
      }
      // verify the required parameter 'stepSid' is set
      if (stepSid === undefined || stepSid === null) {
        throw new Error("Missing the required parameter 'stepSid' when calling fetchExecutionStepContext");
      }

      let pathParams = {
        'FlowSid': flowSid,
        'ExecutionSid': executionSid,
        'StepSid': stepSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudioV1FlowExecutionExecutionStepExecutionStepContext;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
