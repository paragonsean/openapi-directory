/**
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExecutionEnumStatus from '../model/ExecutionEnumStatus';
import ListExecutionResponse from '../model/ListExecutionResponse';
import StudioV1FlowExecution from '../model/StudioV1FlowExecution';

/**
* StudioV1Execution service.
* @module api/StudioV1ExecutionApi
* @version 1.55.0
*/
export default class StudioV1ExecutionApi {

    /**
    * Constructs a new StudioV1ExecutionApi. 
    * @alias module:api/StudioV1ExecutionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExecution operation.
     * @callback module:api/StudioV1ExecutionApi~createExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudioV1FlowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers a new Execution for the Flow
     * @param {String} flowSid The SID of the Excecution's Flow.
     * @param {String} from The Twilio phone number to send messages or initiate calls from during the Flow's Execution. Available as variable `{{flow.channel.address}}`. For SMS, this can also be a Messaging Service SID.
     * @param {String} to The Contact phone number to start a Studio Flow Execution, available as variable `{{contact.channel.address}}`.
     * @param {Object} opts Optional parameters
     * @param {Object} [parameters] JSON data that will be added to the Flow's context and that can be accessed as variables inside your Flow. For example, if you pass in `Parameters={\\\"name\\\":\\\"Zeke\\\"}`, a widget in your Flow can reference the variable `{{flow.data.name}}`, which returns \\\"Zeke\\\". Note: the JSON value must explicitly be passed as a string, not as a hash object. Depending on your particular HTTP library, you may need to add quotes or URL encode the JSON string.
     * @param {module:api/StudioV1ExecutionApi~createExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudioV1FlowExecution}
     */
    createExecution(flowSid, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling createExecution");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling createExecution");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createExecution");
      }

      let pathParams = {
        'FlowSid': flowSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'From': from,
        'Parameters': opts['parameters'],
        'To': to
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = StudioV1FlowExecution;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExecution operation.
     * @callback module:api/StudioV1ExecutionApi~deleteExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Execution and all Steps relating to it.
     * @param {String} flowSid The SID of the Flow with the Execution resources to delete.
     * @param {String} sid The SID of the Execution resource to delete.
     * @param {module:api/StudioV1ExecutionApi~deleteExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExecution(flowSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling deleteExecution");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteExecution");
      }

      let pathParams = {
        'FlowSid': flowSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchExecution operation.
     * @callback module:api/StudioV1ExecutionApi~fetchExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudioV1FlowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Execution
     * @param {String} flowSid The SID of the Flow with the Execution resource to fetch
     * @param {String} sid The SID of the Execution resource to fetch.
     * @param {module:api/StudioV1ExecutionApi~fetchExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudioV1FlowExecution}
     */
    fetchExecution(flowSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling fetchExecution");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchExecution");
      }

      let pathParams = {
        'FlowSid': flowSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudioV1FlowExecution;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecution operation.
     * @callback module:api/StudioV1ExecutionApi~listExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Executions for the Flow.
     * @param {String} flowSid The SID of the Flow with the Execution resources to read.
     * @param {Object} opts Optional parameters
     * @param {Date} [dateCreatedFrom] Only show Execution resources starting on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
     * @param {Date} [dateCreatedTo] Only show Execution resources starting before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/StudioV1ExecutionApi~listExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExecutionResponse}
     */
    listExecution(flowSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling listExecution");
      }

      let pathParams = {
        'FlowSid': flowSid
      };
      let queryParams = {
        'DateCreatedFrom': opts['dateCreatedFrom'],
        'DateCreatedTo': opts['dateCreatedTo'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListExecutionResponse;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExecution operation.
     * @callback module:api/StudioV1ExecutionApi~updateExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudioV1FlowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of an Execution to `ended`.
     * @param {String} flowSid The SID of the Flow with the Execution resources to update.
     * @param {String} sid The SID of the Execution resource to update.
     * @param {module:model/ExecutionEnumStatus} status 
     * @param {module:api/StudioV1ExecutionApi~updateExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StudioV1FlowExecution}
     */
    updateExecution(flowSid, sid, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowSid' is set
      if (flowSid === undefined || flowSid === null) {
        throw new Error("Missing the required parameter 'flowSid' when calling updateExecution");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateExecution");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateExecution");
      }

      let pathParams = {
        'FlowSid': flowSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Status': status
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = StudioV1FlowExecution;
      let basePaths = ['https://studio.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Flows/{FlowSid}/Executions/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
