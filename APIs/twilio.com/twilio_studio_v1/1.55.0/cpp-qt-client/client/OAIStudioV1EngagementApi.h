/**
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStudioV1EngagementApi_H
#define OAI_OAIStudioV1EngagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListEngagementResponse.h"
#include "OAIStudio_v1_flow_engagement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStudioV1EngagementApi : public QObject {
    Q_OBJECT

public:
    OAIStudioV1EngagementApi(const int timeOut = 0);
    ~OAIStudioV1EngagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  parameters QJsonValue [optional]
    */
    virtual void createEngagement(const QString &flow_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QJsonValue> &parameters = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteEngagement(const QString &flow_sid, const QString &sid);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchEngagement(const QString &flow_sid, const QString &sid);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listEngagement(const QString &flow_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEngagementCallback(OAIHttpRequestWorker *worker);
    void deleteEngagementCallback(OAIHttpRequestWorker *worker);
    void fetchEngagementCallback(OAIHttpRequestWorker *worker);
    void listEngagementCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEngagementSignal(OAIStudio_v1_flow_engagement summary);
    void deleteEngagementSignal();
    void fetchEngagementSignal(OAIStudio_v1_flow_engagement summary);
    void listEngagementSignal(OAIListEngagementResponse summary);


    void createEngagementSignalFull(OAIHttpRequestWorker *worker, OAIStudio_v1_flow_engagement summary);
    void deleteEngagementSignalFull(OAIHttpRequestWorker *worker);
    void fetchEngagementSignalFull(OAIHttpRequestWorker *worker, OAIStudio_v1_flow_engagement summary);
    void listEngagementSignalFull(OAIHttpRequestWorker *worker, OAIListEngagementResponse summary);

    Q_DECL_DEPRECATED_X("Use createEngagementSignalError() instead")
    void createEngagementSignalE(OAIStudio_v1_flow_engagement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEngagementSignalError(OAIStudio_v1_flow_engagement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEngagementSignalError() instead")
    void deleteEngagementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEngagementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchEngagementSignalError() instead")
    void fetchEngagementSignalE(OAIStudio_v1_flow_engagement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchEngagementSignalError(OAIStudio_v1_flow_engagement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEngagementSignalError() instead")
    void listEngagementSignalE(OAIListEngagementResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEngagementSignalError(OAIListEngagementResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEngagementSignalErrorFull() instead")
    void createEngagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEngagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEngagementSignalErrorFull() instead")
    void deleteEngagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEngagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchEngagementSignalErrorFull() instead")
    void fetchEngagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchEngagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEngagementSignalErrorFull() instead")
    void listEngagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEngagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
