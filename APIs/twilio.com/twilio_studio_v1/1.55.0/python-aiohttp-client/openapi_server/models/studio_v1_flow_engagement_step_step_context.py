# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StudioV1FlowEngagementStepStepContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, context: object=None, engagement_sid: str=None, flow_sid: str=None, step_sid: str=None, url: str=None):
        """StudioV1FlowEngagementStepStepContext - a model defined in OpenAPI

        :param account_sid: The account_sid of this StudioV1FlowEngagementStepStepContext.
        :param context: The context of this StudioV1FlowEngagementStepStepContext.
        :param engagement_sid: The engagement_sid of this StudioV1FlowEngagementStepStepContext.
        :param flow_sid: The flow_sid of this StudioV1FlowEngagementStepStepContext.
        :param step_sid: The step_sid of this StudioV1FlowEngagementStepStepContext.
        :param url: The url of this StudioV1FlowEngagementStepStepContext.
        """
        self.openapi_types = {
            'account_sid': str,
            'context': object,
            'engagement_sid': str,
            'flow_sid': str,
            'step_sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'context': 'context',
            'engagement_sid': 'engagement_sid',
            'flow_sid': 'flow_sid',
            'step_sid': 'step_sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._context = context
        self._engagement_sid = engagement_sid
        self._flow_sid = flow_sid
        self._step_sid = step_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StudioV1FlowEngagementStepStepContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The studio.v1.flow.engagement.step.step_context of this StudioV1FlowEngagementStepStepContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the StepContext resource.

        :return: The account_sid of this StudioV1FlowEngagementStepStepContext.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the StepContext resource.

        :param account_sid: The account_sid of this StudioV1FlowEngagementStepStepContext.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def context(self):
        """Gets the context of this StudioV1FlowEngagementStepStepContext.

        The current state of the Flow's Execution. As a flow executes, we save its state in this context. We save data that your widgets can access as variables in configuration fields or in text areas as variable substitution.

        :return: The context of this StudioV1FlowEngagementStepStepContext.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this StudioV1FlowEngagementStepStepContext.

        The current state of the Flow's Execution. As a flow executes, we save its state in this context. We save data that your widgets can access as variables in configuration fields or in text areas as variable substitution.

        :param context: The context of this StudioV1FlowEngagementStepStepContext.
        :type context: object
        """

        self._context = context

    @property
    def engagement_sid(self):
        """Gets the engagement_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Engagement.

        :return: The engagement_sid of this StudioV1FlowEngagementStepStepContext.
        :rtype: str
        """
        return self._engagement_sid

    @engagement_sid.setter
    def engagement_sid(self, engagement_sid):
        """Sets the engagement_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Engagement.

        :param engagement_sid: The engagement_sid of this StudioV1FlowEngagementStepStepContext.
        :type engagement_sid: str
        """
        if engagement_sid is not None and len(engagement_sid) > 34:
            raise ValueError("Invalid value for `engagement_sid`, length must be less than or equal to `34`")
        if engagement_sid is not None and len(engagement_sid) < 34:
            raise ValueError("Invalid value for `engagement_sid`, length must be greater than or equal to `34`")
        if engagement_sid is not None and not re.search(r'^FN[0-9a-fA-F]{32}$', engagement_sid):
            raise ValueError("Invalid value for `engagement_sid`, must be a follow pattern or equal to `/^FN[0-9a-fA-F]{32}$/`")

        self._engagement_sid = engagement_sid

    @property
    def flow_sid(self):
        """Gets the flow_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Flow.

        :return: The flow_sid of this StudioV1FlowEngagementStepStepContext.
        :rtype: str
        """
        return self._flow_sid

    @flow_sid.setter
    def flow_sid(self, flow_sid):
        """Sets the flow_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Flow.

        :param flow_sid: The flow_sid of this StudioV1FlowEngagementStepStepContext.
        :type flow_sid: str
        """
        if flow_sid is not None and len(flow_sid) > 34:
            raise ValueError("Invalid value for `flow_sid`, length must be less than or equal to `34`")
        if flow_sid is not None and len(flow_sid) < 34:
            raise ValueError("Invalid value for `flow_sid`, length must be greater than or equal to `34`")
        if flow_sid is not None and not re.search(r'^FW[0-9a-fA-F]{32}$', flow_sid):
            raise ValueError("Invalid value for `flow_sid`, must be a follow pattern or equal to `/^FW[0-9a-fA-F]{32}$/`")

        self._flow_sid = flow_sid

    @property
    def step_sid(self):
        """Gets the step_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Step the context is associated with.

        :return: The step_sid of this StudioV1FlowEngagementStepStepContext.
        :rtype: str
        """
        return self._step_sid

    @step_sid.setter
    def step_sid(self, step_sid):
        """Sets the step_sid of this StudioV1FlowEngagementStepStepContext.

        The SID of the Step the context is associated with.

        :param step_sid: The step_sid of this StudioV1FlowEngagementStepStepContext.
        :type step_sid: str
        """
        if step_sid is not None and len(step_sid) > 34:
            raise ValueError("Invalid value for `step_sid`, length must be less than or equal to `34`")
        if step_sid is not None and len(step_sid) < 34:
            raise ValueError("Invalid value for `step_sid`, length must be greater than or equal to `34`")
        if step_sid is not None and not re.search(r'^FT[0-9a-fA-F]{32}$', step_sid):
            raise ValueError("Invalid value for `step_sid`, must be a follow pattern or equal to `/^FT[0-9a-fA-F]{32}$/`")

        self._step_sid = step_sid

    @property
    def url(self):
        """Gets the url of this StudioV1FlowEngagementStepStepContext.

        The absolute URL of the resource.

        :return: The url of this StudioV1FlowEngagementStepStepContext.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StudioV1FlowEngagementStepStepContext.

        The absolute URL of the resource.

        :param url: The url of this StudioV1FlowEngagementStepStepContext.
        :type url: str
        """

        self._url = url
