# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StudioV1FlowEngagementEngagementContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, context: object=None, engagement_sid: str=None, flow_sid: str=None, url: str=None):
        """StudioV1FlowEngagementEngagementContext - a model defined in OpenAPI

        :param account_sid: The account_sid of this StudioV1FlowEngagementEngagementContext.
        :param context: The context of this StudioV1FlowEngagementEngagementContext.
        :param engagement_sid: The engagement_sid of this StudioV1FlowEngagementEngagementContext.
        :param flow_sid: The flow_sid of this StudioV1FlowEngagementEngagementContext.
        :param url: The url of this StudioV1FlowEngagementEngagementContext.
        """
        self.openapi_types = {
            'account_sid': str,
            'context': object,
            'engagement_sid': str,
            'flow_sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'context': 'context',
            'engagement_sid': 'engagement_sid',
            'flow_sid': 'flow_sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._context = context
        self._engagement_sid = engagement_sid
        self._flow_sid = flow_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StudioV1FlowEngagementEngagementContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The studio.v1.flow.engagement.engagement_context of this StudioV1FlowEngagementEngagementContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Account.

        :return: The account_sid of this StudioV1FlowEngagementEngagementContext.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Account.

        :param account_sid: The account_sid of this StudioV1FlowEngagementEngagementContext.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def context(self):
        """Gets the context of this StudioV1FlowEngagementEngagementContext.

        As your flow executes, we save the state in what's called the Flow Context. Any data in the flow context can be accessed by your widgets as variables, either in configuration fields or in text areas as variable substitution.

        :return: The context of this StudioV1FlowEngagementEngagementContext.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this StudioV1FlowEngagementEngagementContext.

        As your flow executes, we save the state in what's called the Flow Context. Any data in the flow context can be accessed by your widgets as variables, either in configuration fields or in text areas as variable substitution.

        :param context: The context of this StudioV1FlowEngagementEngagementContext.
        :type context: object
        """

        self._context = context

    @property
    def engagement_sid(self):
        """Gets the engagement_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Engagement.

        :return: The engagement_sid of this StudioV1FlowEngagementEngagementContext.
        :rtype: str
        """
        return self._engagement_sid

    @engagement_sid.setter
    def engagement_sid(self, engagement_sid):
        """Sets the engagement_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Engagement.

        :param engagement_sid: The engagement_sid of this StudioV1FlowEngagementEngagementContext.
        :type engagement_sid: str
        """
        if engagement_sid is not None and len(engagement_sid) > 34:
            raise ValueError("Invalid value for `engagement_sid`, length must be less than or equal to `34`")
        if engagement_sid is not None and len(engagement_sid) < 34:
            raise ValueError("Invalid value for `engagement_sid`, length must be greater than or equal to `34`")
        if engagement_sid is not None and not re.search(r'^FN[0-9a-fA-F]{32}$', engagement_sid):
            raise ValueError("Invalid value for `engagement_sid`, must be a follow pattern or equal to `/^FN[0-9a-fA-F]{32}$/`")

        self._engagement_sid = engagement_sid

    @property
    def flow_sid(self):
        """Gets the flow_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Flow.

        :return: The flow_sid of this StudioV1FlowEngagementEngagementContext.
        :rtype: str
        """
        return self._flow_sid

    @flow_sid.setter
    def flow_sid(self, flow_sid):
        """Sets the flow_sid of this StudioV1FlowEngagementEngagementContext.

        The SID of the Flow.

        :param flow_sid: The flow_sid of this StudioV1FlowEngagementEngagementContext.
        :type flow_sid: str
        """
        if flow_sid is not None and len(flow_sid) > 34:
            raise ValueError("Invalid value for `flow_sid`, length must be less than or equal to `34`")
        if flow_sid is not None and len(flow_sid) < 34:
            raise ValueError("Invalid value for `flow_sid`, length must be greater than or equal to `34`")
        if flow_sid is not None and not re.search(r'^FW[0-9a-fA-F]{32}$', flow_sid):
            raise ValueError("Invalid value for `flow_sid`, must be a follow pattern or equal to `/^FW[0-9a-fA-F]{32}$/`")

        self._flow_sid = flow_sid

    @property
    def url(self):
        """Gets the url of this StudioV1FlowEngagementEngagementContext.

        The URL of the resource.

        :return: The url of this StudioV1FlowEngagementEngagementContext.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StudioV1FlowEngagementEngagementContext.

        The URL of the resource.

        :param url: The url of this StudioV1FlowEngagementEngagementContext.
        :type url: str
        """

        self._url = url
