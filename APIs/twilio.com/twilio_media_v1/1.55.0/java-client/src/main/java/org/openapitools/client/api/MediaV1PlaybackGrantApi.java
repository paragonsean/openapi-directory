/*
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaV1PlaybackGrantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaV1PlaybackGrantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaV1PlaybackGrantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPlayerStreamerPlaybackGrant
     * @param sid The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant (required)
     * @param accessControlAllowOrigin The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain. (optional)
     * @param ttl The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlayerStreamerPlaybackGrantCall(String sid, String accessControlAllowOrigin, Integer ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://media.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/PlayerStreamers/{Sid}/PlaybackGrant"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessControlAllowOrigin != null) {
            localVarFormParams.put("AccessControlAllowOrigin", accessControlAllowOrigin);
        }

        if (ttl != null) {
            localVarFormParams.put("Ttl", ttl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlayerStreamerPlaybackGrantValidateBeforeCall(String sid, String accessControlAllowOrigin, Integer ttl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling createPlayerStreamerPlaybackGrant(Async)");
        }

        return createPlayerStreamerPlaybackGrantCall(sid, accessControlAllowOrigin, ttl, _callback);

    }

    /**
     * 
     * 
     * @param sid The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant (required)
     * @param accessControlAllowOrigin The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain. (optional)
     * @param ttl The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds. (optional)
     * @return MediaV1PlayerStreamerPlayerStreamerPlaybackGrant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MediaV1PlayerStreamerPlayerStreamerPlaybackGrant createPlayerStreamerPlaybackGrant(String sid, String accessControlAllowOrigin, Integer ttl) throws ApiException {
        ApiResponse<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> localVarResp = createPlayerStreamerPlaybackGrantWithHttpInfo(sid, accessControlAllowOrigin, ttl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant (required)
     * @param accessControlAllowOrigin The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain. (optional)
     * @param ttl The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds. (optional)
     * @return ApiResponse&lt;MediaV1PlayerStreamerPlayerStreamerPlaybackGrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> createPlayerStreamerPlaybackGrantWithHttpInfo(String sid, String accessControlAllowOrigin, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = createPlayerStreamerPlaybackGrantValidateBeforeCall(sid, accessControlAllowOrigin, ttl, null);
        Type localVarReturnType = new TypeToken<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant (required)
     * @param accessControlAllowOrigin The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain. (optional)
     * @param ttl The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPlayerStreamerPlaybackGrantAsync(String sid, String accessControlAllowOrigin, Integer ttl, final ApiCallback<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlayerStreamerPlaybackGrantValidateBeforeCall(sid, accessControlAllowOrigin, ttl, _callback);
        Type localVarReturnType = new TypeToken<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPlayerStreamerPlaybackGrant
     * @param sid The SID of the PlayerStreamer resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPlayerStreamerPlaybackGrantCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://media.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/PlayerStreamers/{Sid}/PlaybackGrant"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPlayerStreamerPlaybackGrantValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchPlayerStreamerPlaybackGrant(Async)");
        }

        return fetchPlayerStreamerPlaybackGrantCall(sid, _callback);

    }

    /**
     * 
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param sid The SID of the PlayerStreamer resource to fetch. (required)
     * @return MediaV1PlayerStreamerPlayerStreamerPlaybackGrant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MediaV1PlayerStreamerPlayerStreamerPlaybackGrant fetchPlayerStreamerPlaybackGrant(String sid) throws ApiException {
        ApiResponse<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> localVarResp = fetchPlayerStreamerPlaybackGrantWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param sid The SID of the PlayerStreamer resource to fetch. (required)
     * @return ApiResponse&lt;MediaV1PlayerStreamerPlayerStreamerPlaybackGrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> fetchPlayerStreamerPlaybackGrantWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchPlayerStreamerPlaybackGrantValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param sid The SID of the PlayerStreamer resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPlayerStreamerPlaybackGrantAsync(String sid, final ApiCallback<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPlayerStreamerPlaybackGrantValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<MediaV1PlayerStreamerPlayerStreamerPlaybackGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
