/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListPlayerStreamerResponse from '../model/ListPlayerStreamerResponse';
import MediaV1PlayerStreamer from '../model/MediaV1PlayerStreamer';
import PlayerStreamerEnumOrder from '../model/PlayerStreamerEnumOrder';
import PlayerStreamerEnumStatus from '../model/PlayerStreamerEnumStatus';
import PlayerStreamerEnumUpdateStatus from '../model/PlayerStreamerEnumUpdateStatus';

/**
* MediaV1PlayerStreamer service.
* @module api/MediaV1PlayerStreamerApi
* @version 1.55.0
*/
export default class MediaV1PlayerStreamerApi {

    /**
    * Constructs a new MediaV1PlayerStreamerApi. 
    * @alias module:api/MediaV1PlayerStreamerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPlayerStreamer operation.
     * @callback module:api/MediaV1PlayerStreamerApi~createPlayerStreamerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1PlayerStreamer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxDuration] The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
     * @param {String} [statusCallback] The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
     * @param {Boolean} [video] Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
     * @param {module:api/MediaV1PlayerStreamerApi~createPlayerStreamerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1PlayerStreamer}
     */
    createPlayerStreamer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'MaxDuration': opts['maxDuration'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'Video': opts['video']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MediaV1PlayerStreamer;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchPlayerStreamer operation.
     * @callback module:api/MediaV1PlayerStreamerApi~fetchPlayerStreamerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1PlayerStreamer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single PlayerStreamer resource identified by a SID.
     * @param {String} sid The SID of the PlayerStreamer resource to fetch.
     * @param {module:api/MediaV1PlayerStreamerApi~fetchPlayerStreamerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1PlayerStreamer}
     */
    fetchPlayerStreamer(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchPlayerStreamer");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaV1PlayerStreamer;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listPlayerStreamer operation.
     * @callback module:api/MediaV1PlayerStreamerApi~listPlayerStreamerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPlayerStreamerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of PlayerStreamers.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlayerStreamerEnumOrder} [order] The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
     * @param {module:model/PlayerStreamerEnumStatus} [status] Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MediaV1PlayerStreamerApi~listPlayerStreamerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPlayerStreamerResponse}
     */
    listPlayerStreamer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Order': opts['order'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPlayerStreamerResponse;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlayerStreamer operation.
     * @callback module:api/MediaV1PlayerStreamerApi~updatePlayerStreamerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1PlayerStreamer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a PlayerStreamer resource identified by a SID.
     * @param {String} sid The SID of the PlayerStreamer resource to update.
     * @param {module:model/PlayerStreamerEnumUpdateStatus} status 
     * @param {module:api/MediaV1PlayerStreamerApi~updatePlayerStreamerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1PlayerStreamer}
     */
    updatePlayerStreamer(sid, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updatePlayerStreamer");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updatePlayerStreamer");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Status': status
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MediaV1PlayerStreamer;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
