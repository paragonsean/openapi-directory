/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMediaRecordingResponse from '../model/ListMediaRecordingResponse';
import MediaRecordingEnumOrder from '../model/MediaRecordingEnumOrder';
import MediaRecordingEnumStatus from '../model/MediaRecordingEnumStatus';
import MediaV1MediaRecording from '../model/MediaV1MediaRecording';

/**
* MediaV1MediaRecording service.
* @module api/MediaV1MediaRecordingApi
* @version 1.55.0
*/
export default class MediaV1MediaRecordingApi {

    /**
    * Constructs a new MediaV1MediaRecordingApi. 
    * @alias module:api/MediaV1MediaRecordingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMediaRecording operation.
     * @callback module:api/MediaV1MediaRecordingApi~deleteMediaRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a MediaRecording resource identified by a SID.
     * @param {String} sid The SID of the MediaRecording resource to delete.
     * @param {module:api/MediaV1MediaRecordingApi~deleteMediaRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMediaRecording(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteMediaRecording");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaRecordings/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMediaRecording operation.
     * @callback module:api/MediaV1MediaRecordingApi~fetchMediaRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1MediaRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single MediaRecording resource identified by a SID.
     * @param {String} sid The SID of the MediaRecording resource to fetch.
     * @param {module:api/MediaV1MediaRecordingApi~fetchMediaRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1MediaRecording}
     */
    fetchMediaRecording(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMediaRecording");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaV1MediaRecording;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaRecordings/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaRecording operation.
     * @callback module:api/MediaV1MediaRecordingApi~listMediaRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMediaRecordingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of MediaRecordings.
     * @param {Object} opts Optional parameters
     * @param {module:model/MediaRecordingEnumOrder} [order] The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
     * @param {module:model/MediaRecordingEnumStatus} [status] Status to filter by, with possible values `processing`, `completed`, `deleted`, or `failed`.
     * @param {String} [processorSid] SID of a MediaProcessor to filter by.
     * @param {String} [sourceSid] SID of a MediaRecording source to filter by.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MediaV1MediaRecordingApi~listMediaRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMediaRecordingResponse}
     */
    listMediaRecording(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Order': opts['order'],
        'Status': opts['status'],
        'ProcessorSid': opts['processorSid'],
        'SourceSid': opts['sourceSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaRecordingResponse;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaRecordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
