/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMediaProcessorResponse from '../model/ListMediaProcessorResponse';
import MediaProcessorEnumOrder from '../model/MediaProcessorEnumOrder';
import MediaProcessorEnumStatus from '../model/MediaProcessorEnumStatus';
import MediaProcessorEnumUpdateStatus from '../model/MediaProcessorEnumUpdateStatus';
import MediaV1MediaProcessor from '../model/MediaV1MediaProcessor';

/**
* MediaV1MediaProcessor service.
* @module api/MediaV1MediaProcessorApi
* @version 1.55.0
*/
export default class MediaV1MediaProcessorApi {

    /**
    * Constructs a new MediaV1MediaProcessorApi. 
    * @alias module:api/MediaV1MediaProcessorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMediaProcessor operation.
     * @callback module:api/MediaV1MediaProcessorApi~createMediaProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1MediaProcessor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} extension The [Media Extension](/docs/live/media-extensions-overview) name or URL. Ex: `video-composer-v2`
     * @param {String} extensionContext The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/media-extensions-overview) you are using for more information about the context to send.
     * @param {Object} opts Optional parameters
     * @param {Object} [extensionEnvironment] User-defined environment variables for the Media Extension, represented as a JSON dictionary of key/value strings. See the documentation for the specific [Media Extension](/docs/live/media-extensions-overview) you are using for more information about whether you need to provide this.
     * @param {Number} [maxDuration] The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming.
     * @param {String} [statusCallback] The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/api/status-callbacks) for details.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
     * @param {module:api/MediaV1MediaProcessorApi~createMediaProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1MediaProcessor}
     */
    createMediaProcessor(extension, extensionContext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling createMediaProcessor");
      }
      // verify the required parameter 'extensionContext' is set
      if (extensionContext === undefined || extensionContext === null) {
        throw new Error("Missing the required parameter 'extensionContext' when calling createMediaProcessor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Extension': extension,
        'ExtensionContext': extensionContext,
        'ExtensionEnvironment': opts['extensionEnvironment'],
        'MaxDuration': opts['maxDuration'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MediaV1MediaProcessor;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaProcessors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMediaProcessor operation.
     * @callback module:api/MediaV1MediaProcessorApi~fetchMediaProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1MediaProcessor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single MediaProcessor resource identified by a SID.
     * @param {String} sid The SID of the MediaProcessor resource to fetch.
     * @param {module:api/MediaV1MediaProcessorApi~fetchMediaProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1MediaProcessor}
     */
    fetchMediaProcessor(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMediaProcessor");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaV1MediaProcessor;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaProcessors/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaProcessor operation.
     * @callback module:api/MediaV1MediaProcessorApi~listMediaProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMediaProcessorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of MediaProcessors.
     * @param {Object} opts Optional parameters
     * @param {module:model/MediaProcessorEnumOrder} [order] The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
     * @param {module:model/MediaProcessorEnumStatus} [status] Status to filter by, with possible values `started`, `ended` or `failed`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/MediaV1MediaProcessorApi~listMediaProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMediaProcessorResponse}
     */
    listMediaProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Order': opts['order'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaProcessorResponse;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaProcessors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMediaProcessor operation.
     * @callback module:api/MediaV1MediaProcessorApi~updateMediaProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1MediaProcessor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a MediaProcessor resource identified by a SID.
     * @param {String} sid The SID of the MediaProcessor resource to update.
     * @param {module:model/MediaProcessorEnumUpdateStatus} status 
     * @param {module:api/MediaV1MediaProcessorApi~updateMediaProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1MediaProcessor}
     */
    updateMediaProcessor(sid, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateMediaProcessor");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateMediaProcessor");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Status': status
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MediaV1MediaProcessor;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/MediaProcessors/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
