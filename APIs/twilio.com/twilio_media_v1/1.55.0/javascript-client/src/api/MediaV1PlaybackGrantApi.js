/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaV1PlayerStreamerPlayerStreamerPlaybackGrant from '../model/MediaV1PlayerStreamerPlayerStreamerPlaybackGrant';

/**
* MediaV1PlaybackGrant service.
* @module api/MediaV1PlaybackGrantApi
* @version 1.55.0
*/
export default class MediaV1PlaybackGrantApi {

    /**
    * Constructs a new MediaV1PlaybackGrantApi. 
    * @alias module:api/MediaV1PlaybackGrantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPlayerStreamerPlaybackGrant operation.
     * @callback module:api/MediaV1PlaybackGrantApi~createPlayerStreamerPlaybackGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1PlayerStreamerPlayerStreamerPlaybackGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The unique string generated to identify the PlayerStreamer resource associated with this PlaybackGrant
     * @param {Object} opts Optional parameters
     * @param {String} [accessControlAllowOrigin] The full origin URL where the livestream can be streamed. If this is not provided, it can be streamed from any domain.
     * @param {Number} [ttl] The time to live of the PlaybackGrant. Default value is 15 seconds. Maximum value is 60 seconds.
     * @param {module:api/MediaV1PlaybackGrantApi~createPlayerStreamerPlaybackGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1PlayerStreamerPlayerStreamerPlaybackGrant}
     */
    createPlayerStreamerPlaybackGrant(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling createPlayerStreamerPlaybackGrant");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AccessControlAllowOrigin': opts['accessControlAllowOrigin'],
        'Ttl': opts['ttl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MediaV1PlayerStreamerPlayerStreamerPlaybackGrant;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers/{Sid}/PlaybackGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchPlayerStreamerPlaybackGrant operation.
     * @callback module:api/MediaV1PlaybackGrantApi~fetchPlayerStreamerPlaybackGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaV1PlayerStreamerPlayerStreamerPlaybackGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
     * @param {String} sid The SID of the PlayerStreamer resource to fetch.
     * @param {module:api/MediaV1PlaybackGrantApi~fetchPlayerStreamerPlaybackGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaV1PlayerStreamerPlayerStreamerPlaybackGrant}
     */
    fetchPlayerStreamerPlaybackGrant(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchPlayerStreamerPlaybackGrant");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaV1PlayerStreamerPlayerStreamerPlaybackGrant;
      let basePaths = ['https://media.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PlayerStreamers/{Sid}/PlaybackGrant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
