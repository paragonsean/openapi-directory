# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_recording_enum_format import MediaRecordingEnumFormat
from openapi_server.models.media_recording_enum_status import MediaRecordingEnumStatus
import re
from openapi_server import util


class MediaV1MediaRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, duration: int=None, format: MediaRecordingEnumFormat=None, links: object=None, media_size: int=None, processor_sid: str=None, resolution: str=None, sid: str=None, source_sid: str=None, status: MediaRecordingEnumStatus=None, status_callback: str=None, status_callback_method: str=None, url: str=None):
        """MediaV1MediaRecording - a model defined in OpenAPI

        :param account_sid: The account_sid of this MediaV1MediaRecording.
        :param date_created: The date_created of this MediaV1MediaRecording.
        :param date_updated: The date_updated of this MediaV1MediaRecording.
        :param duration: The duration of this MediaV1MediaRecording.
        :param format: The format of this MediaV1MediaRecording.
        :param links: The links of this MediaV1MediaRecording.
        :param media_size: The media_size of this MediaV1MediaRecording.
        :param processor_sid: The processor_sid of this MediaV1MediaRecording.
        :param resolution: The resolution of this MediaV1MediaRecording.
        :param sid: The sid of this MediaV1MediaRecording.
        :param source_sid: The source_sid of this MediaV1MediaRecording.
        :param status: The status of this MediaV1MediaRecording.
        :param status_callback: The status_callback of this MediaV1MediaRecording.
        :param status_callback_method: The status_callback_method of this MediaV1MediaRecording.
        :param url: The url of this MediaV1MediaRecording.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'duration': int,
            'format': MediaRecordingEnumFormat,
            'links': object,
            'media_size': int,
            'processor_sid': str,
            'resolution': str,
            'sid': str,
            'source_sid': str,
            'status': MediaRecordingEnumStatus,
            'status_callback': str,
            'status_callback_method': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'duration': 'duration',
            'format': 'format',
            'links': 'links',
            'media_size': 'media_size',
            'processor_sid': 'processor_sid',
            'resolution': 'resolution',
            'sid': 'sid',
            'source_sid': 'source_sid',
            'status': 'status',
            'status_callback': 'status_callback',
            'status_callback_method': 'status_callback_method',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._duration = duration
        self._format = format
        self._links = links
        self._media_size = media_size
        self._processor_sid = processor_sid
        self._resolution = resolution
        self._sid = sid
        self._source_sid = source_sid
        self._status = status
        self._status_callback = status_callback
        self._status_callback_method = status_callback_method
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaV1MediaRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The media.v1.media_recording of this MediaV1MediaRecording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MediaV1MediaRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaRecording resource.

        :return: The account_sid of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MediaV1MediaRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaRecording resource.

        :param account_sid: The account_sid of this MediaV1MediaRecording.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this MediaV1MediaRecording.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MediaV1MediaRecording.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MediaV1MediaRecording.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MediaV1MediaRecording.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MediaV1MediaRecording.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MediaV1MediaRecording.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MediaV1MediaRecording.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MediaV1MediaRecording.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def duration(self):
        """Gets the duration of this MediaV1MediaRecording.

        The duration of the MediaRecording in seconds.

        :return: The duration of this MediaV1MediaRecording.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MediaV1MediaRecording.

        The duration of the MediaRecording in seconds.

        :param duration: The duration of this MediaV1MediaRecording.
        :type duration: int
        """

        self._duration = duration

    @property
    def format(self):
        """Gets the format of this MediaV1MediaRecording.


        :return: The format of this MediaV1MediaRecording.
        :rtype: MediaRecordingEnumFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MediaV1MediaRecording.


        :param format: The format of this MediaV1MediaRecording.
        :type format: MediaRecordingEnumFormat
        """

        self._format = format

    @property
    def links(self):
        """Gets the links of this MediaV1MediaRecording.

        The URLs of related resources.

        :return: The links of this MediaV1MediaRecording.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MediaV1MediaRecording.

        The URLs of related resources.

        :param links: The links of this MediaV1MediaRecording.
        :type links: object
        """

        self._links = links

    @property
    def media_size(self):
        """Gets the media_size of this MediaV1MediaRecording.

        The size of the recording media in bytes.

        :return: The media_size of this MediaV1MediaRecording.
        :rtype: int
        """
        return self._media_size

    @media_size.setter
    def media_size(self, media_size):
        """Sets the media_size of this MediaV1MediaRecording.

        The size of the recording media in bytes.

        :param media_size: The media_size of this MediaV1MediaRecording.
        :type media_size: int
        """

        self._media_size = media_size

    @property
    def processor_sid(self):
        """Gets the processor_sid of this MediaV1MediaRecording.

        The SID of the MediaProcessor resource which produced the MediaRecording.

        :return: The processor_sid of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._processor_sid

    @processor_sid.setter
    def processor_sid(self, processor_sid):
        """Sets the processor_sid of this MediaV1MediaRecording.

        The SID of the MediaProcessor resource which produced the MediaRecording.

        :param processor_sid: The processor_sid of this MediaV1MediaRecording.
        :type processor_sid: str
        """
        if processor_sid is not None and len(processor_sid) > 34:
            raise ValueError("Invalid value for `processor_sid`, length must be less than or equal to `34`")
        if processor_sid is not None and len(processor_sid) < 34:
            raise ValueError("Invalid value for `processor_sid`, length must be greater than or equal to `34`")
        if processor_sid is not None and not re.search(r'^ZX[0-9a-fA-F]{32}$', processor_sid):
            raise ValueError("Invalid value for `processor_sid`, must be a follow pattern or equal to `/^ZX[0-9a-fA-F]{32}$/`")

        self._processor_sid = processor_sid

    @property
    def resolution(self):
        """Gets the resolution of this MediaV1MediaRecording.

        The dimensions of the video image in pixels expressed as columns (width) and rows (height).

        :return: The resolution of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this MediaV1MediaRecording.

        The dimensions of the video image in pixels expressed as columns (width) and rows (height).

        :param resolution: The resolution of this MediaV1MediaRecording.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def sid(self):
        """Gets the sid of this MediaV1MediaRecording.

        The unique string generated to identify the MediaRecording resource.

        :return: The sid of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MediaV1MediaRecording.

        The unique string generated to identify the MediaRecording resource.

        :param sid: The sid of this MediaV1MediaRecording.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^KV[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^KV[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def source_sid(self):
        """Gets the source_sid of this MediaV1MediaRecording.

        The SID of the resource that generated the original media track(s) of the MediaRecording.

        :return: The source_sid of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._source_sid

    @source_sid.setter
    def source_sid(self, source_sid):
        """Sets the source_sid of this MediaV1MediaRecording.

        The SID of the resource that generated the original media track(s) of the MediaRecording.

        :param source_sid: The source_sid of this MediaV1MediaRecording.
        :type source_sid: str
        """
        if source_sid is not None and len(source_sid) > 34:
            raise ValueError("Invalid value for `source_sid`, length must be less than or equal to `34`")
        if source_sid is not None and len(source_sid) < 34:
            raise ValueError("Invalid value for `source_sid`, length must be greater than or equal to `34`")
        if source_sid is not None and not re.search(r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', source_sid):
            raise ValueError("Invalid value for `source_sid`, must be a follow pattern or equal to `/^[a-zA-Z]{2}[0-9a-fA-F]{32}$/`")

        self._source_sid = source_sid

    @property
    def status(self):
        """Gets the status of this MediaV1MediaRecording.


        :return: The status of this MediaV1MediaRecording.
        :rtype: MediaRecordingEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MediaV1MediaRecording.


        :param status: The status of this MediaV1MediaRecording.
        :type status: MediaRecordingEnumStatus
        """

        self._status = status

    @property
    def status_callback(self):
        """Gets the status_callback of this MediaV1MediaRecording.

        The URL to which Twilio will send asynchronous webhook requests for every MediaRecording event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.

        :return: The status_callback of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this MediaV1MediaRecording.

        The URL to which Twilio will send asynchronous webhook requests for every MediaRecording event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.

        :param status_callback: The status_callback of this MediaV1MediaRecording.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def status_callback_method(self):
        """Gets the status_callback_method of this MediaV1MediaRecording.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :return: The status_callback_method of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._status_callback_method

    @status_callback_method.setter
    def status_callback_method(self, status_callback_method):
        """Sets the status_callback_method of this MediaV1MediaRecording.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :param status_callback_method: The status_callback_method of this MediaV1MediaRecording.
        :type status_callback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if status_callback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `status_callback_method` ({0}), must be one of {1}"
                .format(status_callback_method, allowed_values)
            )

        self._status_callback_method = status_callback_method

    @property
    def url(self):
        """Gets the url of this MediaV1MediaRecording.

        The absolute URL of the resource.

        :return: The url of this MediaV1MediaRecording.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaV1MediaRecording.

        The absolute URL of the resource.

        :param url: The url of this MediaV1MediaRecording.
        :type url: str
        """

        self._url = url
