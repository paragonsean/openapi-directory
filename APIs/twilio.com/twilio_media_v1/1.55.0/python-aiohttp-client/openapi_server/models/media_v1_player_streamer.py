# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.player_streamer_enum_ended_reason import PlayerStreamerEnumEndedReason
from openapi_server.models.player_streamer_enum_status import PlayerStreamerEnumStatus
import re
from openapi_server import util


class MediaV1PlayerStreamer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, ended_reason: PlayerStreamerEnumEndedReason=None, links: object=None, max_duration: int=None, sid: str=None, status: PlayerStreamerEnumStatus=None, status_callback: str=None, status_callback_method: str=None, url: str=None, video: bool=None):
        """MediaV1PlayerStreamer - a model defined in OpenAPI

        :param account_sid: The account_sid of this MediaV1PlayerStreamer.
        :param date_created: The date_created of this MediaV1PlayerStreamer.
        :param date_updated: The date_updated of this MediaV1PlayerStreamer.
        :param ended_reason: The ended_reason of this MediaV1PlayerStreamer.
        :param links: The links of this MediaV1PlayerStreamer.
        :param max_duration: The max_duration of this MediaV1PlayerStreamer.
        :param sid: The sid of this MediaV1PlayerStreamer.
        :param status: The status of this MediaV1PlayerStreamer.
        :param status_callback: The status_callback of this MediaV1PlayerStreamer.
        :param status_callback_method: The status_callback_method of this MediaV1PlayerStreamer.
        :param url: The url of this MediaV1PlayerStreamer.
        :param video: The video of this MediaV1PlayerStreamer.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'ended_reason': PlayerStreamerEnumEndedReason,
            'links': object,
            'max_duration': int,
            'sid': str,
            'status': PlayerStreamerEnumStatus,
            'status_callback': str,
            'status_callback_method': str,
            'url': str,
            'video': bool
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'ended_reason': 'ended_reason',
            'links': 'links',
            'max_duration': 'max_duration',
            'sid': 'sid',
            'status': 'status',
            'status_callback': 'status_callback',
            'status_callback_method': 'status_callback_method',
            'url': 'url',
            'video': 'video'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._ended_reason = ended_reason
        self._links = links
        self._max_duration = max_duration
        self._sid = sid
        self._status = status
        self._status_callback = status_callback
        self._status_callback_method = status_callback_method
        self._url = url
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaV1PlayerStreamer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The media.v1.player_streamer of this MediaV1PlayerStreamer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MediaV1PlayerStreamer.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PlayerStreamer resource.

        :return: The account_sid of this MediaV1PlayerStreamer.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MediaV1PlayerStreamer.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PlayerStreamer resource.

        :param account_sid: The account_sid of this MediaV1PlayerStreamer.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this MediaV1PlayerStreamer.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MediaV1PlayerStreamer.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MediaV1PlayerStreamer.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MediaV1PlayerStreamer.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MediaV1PlayerStreamer.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MediaV1PlayerStreamer.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MediaV1PlayerStreamer.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MediaV1PlayerStreamer.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def ended_reason(self):
        """Gets the ended_reason of this MediaV1PlayerStreamer.


        :return: The ended_reason of this MediaV1PlayerStreamer.
        :rtype: PlayerStreamerEnumEndedReason
        """
        return self._ended_reason

    @ended_reason.setter
    def ended_reason(self, ended_reason):
        """Sets the ended_reason of this MediaV1PlayerStreamer.


        :param ended_reason: The ended_reason of this MediaV1PlayerStreamer.
        :type ended_reason: PlayerStreamerEnumEndedReason
        """

        self._ended_reason = ended_reason

    @property
    def links(self):
        """Gets the links of this MediaV1PlayerStreamer.

        The URLs of related resources.

        :return: The links of this MediaV1PlayerStreamer.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MediaV1PlayerStreamer.

        The URLs of related resources.

        :param links: The links of this MediaV1PlayerStreamer.
        :type links: object
        """

        self._links = links

    @property
    def max_duration(self):
        """Gets the max_duration of this MediaV1PlayerStreamer.

        The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.

        :return: The max_duration of this MediaV1PlayerStreamer.
        :rtype: int
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this MediaV1PlayerStreamer.

        The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.

        :param max_duration: The max_duration of this MediaV1PlayerStreamer.
        :type max_duration: int
        """

        self._max_duration = max_duration

    @property
    def sid(self):
        """Gets the sid of this MediaV1PlayerStreamer.

        The unique string generated to identify the PlayerStreamer resource.

        :return: The sid of this MediaV1PlayerStreamer.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MediaV1PlayerStreamer.

        The unique string generated to identify the PlayerStreamer resource.

        :param sid: The sid of this MediaV1PlayerStreamer.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^VJ[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^VJ[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this MediaV1PlayerStreamer.


        :return: The status of this MediaV1PlayerStreamer.
        :rtype: PlayerStreamerEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MediaV1PlayerStreamer.


        :param status: The status of this MediaV1PlayerStreamer.
        :type status: PlayerStreamerEnumStatus
        """

        self._status = status

    @property
    def status_callback(self):
        """Gets the status_callback of this MediaV1PlayerStreamer.

        The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.

        :return: The status_callback of this MediaV1PlayerStreamer.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this MediaV1PlayerStreamer.

        The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.

        :param status_callback: The status_callback of this MediaV1PlayerStreamer.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def status_callback_method(self):
        """Gets the status_callback_method of this MediaV1PlayerStreamer.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :return: The status_callback_method of this MediaV1PlayerStreamer.
        :rtype: str
        """
        return self._status_callback_method

    @status_callback_method.setter
    def status_callback_method(self, status_callback_method):
        """Sets the status_callback_method of this MediaV1PlayerStreamer.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :param status_callback_method: The status_callback_method of this MediaV1PlayerStreamer.
        :type status_callback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if status_callback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `status_callback_method` ({0}), must be one of {1}"
                .format(status_callback_method, allowed_values)
            )

        self._status_callback_method = status_callback_method

    @property
    def url(self):
        """Gets the url of this MediaV1PlayerStreamer.

        The absolute URL of the resource.

        :return: The url of this MediaV1PlayerStreamer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaV1PlayerStreamer.

        The absolute URL of the resource.

        :param url: The url of this MediaV1PlayerStreamer.
        :type url: str
        """

        self._url = url

    @property
    def video(self):
        """Gets the video of this MediaV1PlayerStreamer.

        Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.

        :return: The video of this MediaV1PlayerStreamer.
        :rtype: bool
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this MediaV1PlayerStreamer.

        Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.

        :param video: The video of this MediaV1PlayerStreamer.
        :type video: bool
        """

        self._video = video
