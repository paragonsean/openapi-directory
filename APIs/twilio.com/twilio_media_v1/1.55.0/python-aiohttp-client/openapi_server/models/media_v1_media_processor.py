# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_processor_enum_status import MediaProcessorEnumStatus
import re
from openapi_server import util


class MediaV1MediaProcessor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, ended_reason: str=None, extension: str=None, extension_context: str=None, max_duration: int=None, sid: str=None, status: MediaProcessorEnumStatus=None, status_callback: str=None, status_callback_method: str=None, url: str=None):
        """MediaV1MediaProcessor - a model defined in OpenAPI

        :param account_sid: The account_sid of this MediaV1MediaProcessor.
        :param date_created: The date_created of this MediaV1MediaProcessor.
        :param date_updated: The date_updated of this MediaV1MediaProcessor.
        :param ended_reason: The ended_reason of this MediaV1MediaProcessor.
        :param extension: The extension of this MediaV1MediaProcessor.
        :param extension_context: The extension_context of this MediaV1MediaProcessor.
        :param max_duration: The max_duration of this MediaV1MediaProcessor.
        :param sid: The sid of this MediaV1MediaProcessor.
        :param status: The status of this MediaV1MediaProcessor.
        :param status_callback: The status_callback of this MediaV1MediaProcessor.
        :param status_callback_method: The status_callback_method of this MediaV1MediaProcessor.
        :param url: The url of this MediaV1MediaProcessor.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'ended_reason': str,
            'extension': str,
            'extension_context': str,
            'max_duration': int,
            'sid': str,
            'status': MediaProcessorEnumStatus,
            'status_callback': str,
            'status_callback_method': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'ended_reason': 'ended_reason',
            'extension': 'extension',
            'extension_context': 'extension_context',
            'max_duration': 'max_duration',
            'sid': 'sid',
            'status': 'status',
            'status_callback': 'status_callback',
            'status_callback_method': 'status_callback_method',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._ended_reason = ended_reason
        self._extension = extension
        self._extension_context = extension_context
        self._max_duration = max_duration
        self._sid = sid
        self._status = status
        self._status_callback = status_callback
        self._status_callback_method = status_callback_method
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaV1MediaProcessor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The media.v1.media_processor of this MediaV1MediaProcessor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MediaV1MediaProcessor.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaProcessor resource.

        :return: The account_sid of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MediaV1MediaProcessor.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaProcessor resource.

        :param account_sid: The account_sid of this MediaV1MediaProcessor.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this MediaV1MediaProcessor.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MediaV1MediaProcessor.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MediaV1MediaProcessor.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MediaV1MediaProcessor.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MediaV1MediaProcessor.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MediaV1MediaProcessor.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MediaV1MediaProcessor.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MediaV1MediaProcessor.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def ended_reason(self):
        """Gets the ended_reason of this MediaV1MediaProcessor.

        The reason why a MediaProcessor ended. When a MediaProcessor is in progress, will be `null`. When a MediaProcessor is completed, can be `ended-via-api`, `max-duration-exceeded`, `error-loading-extension`, `error-streaming-media` or `internal-service-error`. See [ended reasons](/docs/live/api/mediaprocessors#mediaprocessor-ended-reason-values) for more details.

        :return: The ended_reason of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._ended_reason

    @ended_reason.setter
    def ended_reason(self, ended_reason):
        """Sets the ended_reason of this MediaV1MediaProcessor.

        The reason why a MediaProcessor ended. When a MediaProcessor is in progress, will be `null`. When a MediaProcessor is completed, can be `ended-via-api`, `max-duration-exceeded`, `error-loading-extension`, `error-streaming-media` or `internal-service-error`. See [ended reasons](/docs/live/api/mediaprocessors#mediaprocessor-ended-reason-values) for more details.

        :param ended_reason: The ended_reason of this MediaV1MediaProcessor.
        :type ended_reason: str
        """

        self._ended_reason = ended_reason

    @property
    def extension(self):
        """Gets the extension of this MediaV1MediaProcessor.

        The [Media Extension](/docs/live/media-extensions-overview) name or URL. Ex: `video-composer-v2`

        :return: The extension of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this MediaV1MediaProcessor.

        The [Media Extension](/docs/live/media-extensions-overview) name or URL. Ex: `video-composer-v2`

        :param extension: The extension of this MediaV1MediaProcessor.
        :type extension: str
        """

        self._extension = extension

    @property
    def extension_context(self):
        """Gets the extension_context of this MediaV1MediaProcessor.

        The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/media-extensions-overview) you are using for more information about the context to send.

        :return: The extension_context of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._extension_context

    @extension_context.setter
    def extension_context(self, extension_context):
        """Sets the extension_context of this MediaV1MediaProcessor.

        The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/media-extensions-overview) you are using for more information about the context to send.

        :param extension_context: The extension_context of this MediaV1MediaProcessor.
        :type extension_context: str
        """

        self._extension_context = extension_context

    @property
    def max_duration(self):
        """Gets the max_duration of this MediaV1MediaProcessor.

        The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming.

        :return: The max_duration of this MediaV1MediaProcessor.
        :rtype: int
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this MediaV1MediaProcessor.

        The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming.

        :param max_duration: The max_duration of this MediaV1MediaProcessor.
        :type max_duration: int
        """

        self._max_duration = max_duration

    @property
    def sid(self):
        """Gets the sid of this MediaV1MediaProcessor.

        The unique string generated to identify the MediaProcessor resource.

        :return: The sid of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MediaV1MediaProcessor.

        The unique string generated to identify the MediaProcessor resource.

        :param sid: The sid of this MediaV1MediaProcessor.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^ZX[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^ZX[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this MediaV1MediaProcessor.


        :return: The status of this MediaV1MediaProcessor.
        :rtype: MediaProcessorEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MediaV1MediaProcessor.


        :param status: The status of this MediaV1MediaProcessor.
        :type status: MediaProcessorEnumStatus
        """

        self._status = status

    @property
    def status_callback(self):
        """Gets the status_callback of this MediaV1MediaProcessor.

        The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/api/status-callbacks) for details.

        :return: The status_callback of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this MediaV1MediaProcessor.

        The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/api/status-callbacks) for details.

        :param status_callback: The status_callback of this MediaV1MediaProcessor.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def status_callback_method(self):
        """Gets the status_callback_method of this MediaV1MediaProcessor.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :return: The status_callback_method of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._status_callback_method

    @status_callback_method.setter
    def status_callback_method(self, status_callback_method):
        """Sets the status_callback_method of this MediaV1MediaProcessor.

        The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.

        :param status_callback_method: The status_callback_method of this MediaV1MediaProcessor.
        :type status_callback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if status_callback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `status_callback_method` ({0}), must be one of {1}"
                .format(status_callback_method, allowed_values)
            )

        self._status_callback_method = status_callback_method

    @property
    def url(self):
        """Gets the url of this MediaV1MediaProcessor.

        The absolute URL of the resource.

        :return: The url of this MediaV1MediaProcessor.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaV1MediaProcessor.

        The absolute URL of the resource.

        :param url: The url of this MediaV1MediaProcessor.
        :type url: str
        """

        self._url = url
