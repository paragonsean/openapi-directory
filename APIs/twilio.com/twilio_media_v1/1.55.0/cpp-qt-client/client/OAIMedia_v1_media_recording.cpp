/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMedia_v1_media_recording.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMedia_v1_media_recording::OAIMedia_v1_media_recording(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMedia_v1_media_recording::OAIMedia_v1_media_recording() {
    this->initializeModel();
}

OAIMedia_v1_media_recording::~OAIMedia_v1_media_recording() {}

void OAIMedia_v1_media_recording::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_media_size_isSet = false;
    m_media_size_isValid = false;

    m_processor_sid_isSet = false;
    m_processor_sid_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_source_sid_isSet = false;
    m_source_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMedia_v1_media_recording::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMedia_v1_media_recording::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_media_size_isValid = ::OpenAPI::fromJsonValue(m_media_size, json[QString("media_size")]);
    m_media_size_isSet = !json[QString("media_size")].isNull() && m_media_size_isValid;

    m_processor_sid_isValid = ::OpenAPI::fromJsonValue(m_processor_sid, json[QString("processor_sid")]);
    m_processor_sid_isSet = !json[QString("processor_sid")].isNull() && m_processor_sid_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_source_sid_isValid = ::OpenAPI::fromJsonValue(m_source_sid, json[QString("source_sid")]);
    m_source_sid_isSet = !json[QString("source_sid")].isNull() && m_source_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMedia_v1_media_recording::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMedia_v1_media_recording::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_media_size_isSet) {
        obj.insert(QString("media_size"), ::OpenAPI::toJsonValue(m_media_size));
    }
    if (m_processor_sid_isSet) {
        obj.insert(QString("processor_sid"), ::OpenAPI::toJsonValue(m_processor_sid));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_source_sid_isSet) {
        obj.insert(QString("source_sid"), ::OpenAPI::toJsonValue(m_source_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMedia_v1_media_recording::getAccountSid() const {
    return m_account_sid;
}
void OAIMedia_v1_media_recording::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIMedia_v1_media_recording::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIMedia_v1_media_recording::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIMedia_v1_media_recording::getDateCreated() const {
    return m_date_created;
}
void OAIMedia_v1_media_recording::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMedia_v1_media_recording::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMedia_v1_media_recording::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIMedia_v1_media_recording::getDateUpdated() const {
    return m_date_updated;
}
void OAIMedia_v1_media_recording::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIMedia_v1_media_recording::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIMedia_v1_media_recording::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIMedia_v1_media_recording::getDuration() const {
    return m_duration;
}
void OAIMedia_v1_media_recording::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMedia_v1_media_recording::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMedia_v1_media_recording::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIMedia_recording_enum_format OAIMedia_v1_media_recording::getFormat() const {
    return m_format;
}
void OAIMedia_v1_media_recording::setFormat(const OAIMedia_recording_enum_format &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIMedia_v1_media_recording::is_format_Set() const{
    return m_format_isSet;
}

bool OAIMedia_v1_media_recording::is_format_Valid() const{
    return m_format_isValid;
}

OAIObject OAIMedia_v1_media_recording::getLinks() const {
    return m_links;
}
void OAIMedia_v1_media_recording::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIMedia_v1_media_recording::is_links_Set() const{
    return m_links_isSet;
}

bool OAIMedia_v1_media_recording::is_links_Valid() const{
    return m_links_isValid;
}

qint64 OAIMedia_v1_media_recording::getMediaSize() const {
    return m_media_size;
}
void OAIMedia_v1_media_recording::setMediaSize(const qint64 &media_size) {
    m_media_size = media_size;
    m_media_size_isSet = true;
}

bool OAIMedia_v1_media_recording::is_media_size_Set() const{
    return m_media_size_isSet;
}

bool OAIMedia_v1_media_recording::is_media_size_Valid() const{
    return m_media_size_isValid;
}

QString OAIMedia_v1_media_recording::getProcessorSid() const {
    return m_processor_sid;
}
void OAIMedia_v1_media_recording::setProcessorSid(const QString &processor_sid) {
    m_processor_sid = processor_sid;
    m_processor_sid_isSet = true;
}

bool OAIMedia_v1_media_recording::is_processor_sid_Set() const{
    return m_processor_sid_isSet;
}

bool OAIMedia_v1_media_recording::is_processor_sid_Valid() const{
    return m_processor_sid_isValid;
}

QString OAIMedia_v1_media_recording::getResolution() const {
    return m_resolution;
}
void OAIMedia_v1_media_recording::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIMedia_v1_media_recording::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIMedia_v1_media_recording::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIMedia_v1_media_recording::getSid() const {
    return m_sid;
}
void OAIMedia_v1_media_recording::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIMedia_v1_media_recording::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIMedia_v1_media_recording::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIMedia_v1_media_recording::getSourceSid() const {
    return m_source_sid;
}
void OAIMedia_v1_media_recording::setSourceSid(const QString &source_sid) {
    m_source_sid = source_sid;
    m_source_sid_isSet = true;
}

bool OAIMedia_v1_media_recording::is_source_sid_Set() const{
    return m_source_sid_isSet;
}

bool OAIMedia_v1_media_recording::is_source_sid_Valid() const{
    return m_source_sid_isValid;
}

OAIMedia_recording_enum_status OAIMedia_v1_media_recording::getStatus() const {
    return m_status;
}
void OAIMedia_v1_media_recording::setStatus(const OAIMedia_recording_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMedia_v1_media_recording::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMedia_v1_media_recording::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMedia_v1_media_recording::getStatusCallback() const {
    return m_status_callback;
}
void OAIMedia_v1_media_recording::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIMedia_v1_media_recording::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIMedia_v1_media_recording::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIMedia_v1_media_recording::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIMedia_v1_media_recording::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIMedia_v1_media_recording::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIMedia_v1_media_recording::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

QString OAIMedia_v1_media_recording::getUrl() const {
    return m_url;
}
void OAIMedia_v1_media_recording::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMedia_v1_media_recording::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMedia_v1_media_recording::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMedia_v1_media_recording::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMedia_v1_media_recording::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
