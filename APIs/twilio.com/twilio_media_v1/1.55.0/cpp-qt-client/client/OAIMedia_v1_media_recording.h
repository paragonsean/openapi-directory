/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMedia_v1_media_recording.h
 *
 * 
 */

#ifndef OAIMedia_v1_media_recording_H
#define OAIMedia_v1_media_recording_H

#include <QJsonObject>

#include "OAIMedia_recording_enum_format.h"
#include "OAIMedia_recording_enum_status.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMedia_v1_media_recording : public OAIObject {
public:
    OAIMedia_v1_media_recording();
    OAIMedia_v1_media_recording(QString json);
    ~OAIMedia_v1_media_recording() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    OAIMedia_recording_enum_format getFormat() const;
    void setFormat(const OAIMedia_recording_enum_format &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint64 getMediaSize() const;
    void setMediaSize(const qint64 &media_size);
    bool is_media_size_Set() const;
    bool is_media_size_Valid() const;

    QString getProcessorSid() const;
    void setProcessorSid(const QString &processor_sid);
    bool is_processor_sid_Set() const;
    bool is_processor_sid_Valid() const;

    QString getResolution() const;
    void setResolution(const QString &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    QString getSourceSid() const;
    void setSourceSid(const QString &source_sid);
    bool is_source_sid_Set() const;
    bool is_source_sid_Valid() const;

    OAIMedia_recording_enum_status getStatus() const;
    void setStatus(const OAIMedia_recording_enum_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusCallback() const;
    void setStatusCallback(const QString &status_callback);
    bool is_status_callback_Set() const;
    bool is_status_callback_Valid() const;

    QString getStatusCallbackMethod() const;
    void setStatusCallbackMethod(const QString &status_callback_method);
    bool is_status_callback_method_Set() const;
    bool is_status_callback_method_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    OAIMedia_recording_enum_format m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint64 m_media_size;
    bool m_media_size_isSet;
    bool m_media_size_isValid;

    QString m_processor_sid;
    bool m_processor_sid_isSet;
    bool m_processor_sid_isValid;

    QString m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    QString m_source_sid;
    bool m_source_sid_isSet;
    bool m_source_sid_isValid;

    OAIMedia_recording_enum_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_callback;
    bool m_status_callback_isSet;
    bool m_status_callback_isValid;

    QString m_status_callback_method;
    bool m_status_callback_method_isSet;
    bool m_status_callback_method_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMedia_v1_media_recording)

#endif // OAIMedia_v1_media_recording_H
