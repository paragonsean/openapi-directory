/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer_streamer_enum_ended_reason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer_streamer_enum_ended_reason::OAIPlayer_streamer_enum_ended_reason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer_streamer_enum_ended_reason::OAIPlayer_streamer_enum_ended_reason() {
    this->initializeModel();
}

OAIPlayer_streamer_enum_ended_reason::~OAIPlayer_streamer_enum_ended_reason() {}

void OAIPlayer_streamer_enum_ended_reason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlayer_streamer_enum_ended_reason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlayer_streamer_enum_ended_reason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ended-via-api", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayer_streamer_enum_ended_reason::ENDED_VIA_API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("max-duration-exceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayer_streamer_enum_ended_reason::MAX_DURATION_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stream-disconnected-by-source", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayer_streamer_enum_ended_reason::STREAM_DISCONNECTED_BY_SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unexpected-failure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlayer_streamer_enum_ended_reason::UNEXPECTED_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlayer_streamer_enum_ended_reason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlayer_streamer_enum_ended_reason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlayer_streamer_enum_ended_reason::ENDED_VIA_API:
            val = "ended-via-api";
            break;
        case eOAIPlayer_streamer_enum_ended_reason::MAX_DURATION_EXCEEDED:
            val = "max-duration-exceeded";
            break;
        case eOAIPlayer_streamer_enum_ended_reason::STREAM_DISCONNECTED_BY_SOURCE:
            val = "stream-disconnected-by-source";
            break;
        case eOAIPlayer_streamer_enum_ended_reason::UNEXPECTED_FAILURE:
            val = "unexpected-failure";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlayer_streamer_enum_ended_reason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlayer_streamer_enum_ended_reason::eOAIPlayer_streamer_enum_ended_reason OAIPlayer_streamer_enum_ended_reason::getValue() const {
    return m_value;
}

void OAIPlayer_streamer_enum_ended_reason::setValue(const OAIPlayer_streamer_enum_ended_reason::eOAIPlayer_streamer_enum_ended_reason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlayer_streamer_enum_ended_reason::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlayer_streamer_enum_ended_reason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
