/**
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaV1PlayerStreamerApi_H
#define OAI_OAIMediaV1PlayerStreamerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListPlayerStreamerResponse.h"
#include "OAIMedia_v1_player_streamer.h"
#include "OAIPlayer_streamer_enum_order.h"
#include "OAIPlayer_streamer_enum_status.h"
#include "OAIPlayer_streamer_enum_update_status.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaV1PlayerStreamerApi : public QObject {
    Q_OBJECT

public:
    OAIMediaV1PlayerStreamerApi(const int timeOut = 0);
    ~OAIMediaV1PlayerStreamerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  max_duration qint32 [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  video bool [optional]
    */
    virtual void createPlayerStreamer(const ::OpenAPI::OptionalParam<qint32> &max_duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &video = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchPlayerStreamer(const QString &sid);

    /**
    * @param[in]  order OAIPlayer_streamer_enum_order [optional]
    * @param[in]  status OAIPlayer_streamer_enum_status [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPlayerStreamer(const ::OpenAPI::OptionalParam<OAIPlayer_streamer_enum_order> &order = ::OpenAPI::OptionalParam<OAIPlayer_streamer_enum_order>(), const ::OpenAPI::OptionalParam<OAIPlayer_streamer_enum_status> &status = ::OpenAPI::OptionalParam<OAIPlayer_streamer_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  status OAIPlayer_streamer_enum_update_status [required]
    */
    virtual void updatePlayerStreamer(const QString &sid, const OAIPlayer_streamer_enum_update_status &status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPlayerStreamerCallback(OAIHttpRequestWorker *worker);
    void fetchPlayerStreamerCallback(OAIHttpRequestWorker *worker);
    void listPlayerStreamerCallback(OAIHttpRequestWorker *worker);
    void updatePlayerStreamerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPlayerStreamerSignal(OAIMedia_v1_player_streamer summary);
    void fetchPlayerStreamerSignal(OAIMedia_v1_player_streamer summary);
    void listPlayerStreamerSignal(OAIListPlayerStreamerResponse summary);
    void updatePlayerStreamerSignal(OAIMedia_v1_player_streamer summary);


    void createPlayerStreamerSignalFull(OAIHttpRequestWorker *worker, OAIMedia_v1_player_streamer summary);
    void fetchPlayerStreamerSignalFull(OAIHttpRequestWorker *worker, OAIMedia_v1_player_streamer summary);
    void listPlayerStreamerSignalFull(OAIHttpRequestWorker *worker, OAIListPlayerStreamerResponse summary);
    void updatePlayerStreamerSignalFull(OAIHttpRequestWorker *worker, OAIMedia_v1_player_streamer summary);

    Q_DECL_DEPRECATED_X("Use createPlayerStreamerSignalError() instead")
    void createPlayerStreamerSignalE(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlayerStreamerSignalError(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPlayerStreamerSignalError() instead")
    void fetchPlayerStreamerSignalE(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPlayerStreamerSignalError(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayerStreamerSignalError() instead")
    void listPlayerStreamerSignalE(OAIListPlayerStreamerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayerStreamerSignalError(OAIListPlayerStreamerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerStreamerSignalError() instead")
    void updatePlayerStreamerSignalE(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerStreamerSignalError(OAIMedia_v1_player_streamer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPlayerStreamerSignalErrorFull() instead")
    void createPlayerStreamerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPlayerStreamerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPlayerStreamerSignalErrorFull() instead")
    void fetchPlayerStreamerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPlayerStreamerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPlayerStreamerSignalErrorFull() instead")
    void listPlayerStreamerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPlayerStreamerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePlayerStreamerSignalErrorFull() instead")
    void updatePlayerStreamerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePlayerStreamerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
