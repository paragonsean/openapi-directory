/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsV1SubscribedEventApi_H
#define OAI_OAIEventsV1SubscribedEventApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvents_v1_subscription_subscribed_event.h"
#include "OAIListSubscribedEventResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsV1SubscribedEventApi : public QObject {
    Q_OBJECT

public:
    OAIEventsV1SubscribedEventApi(const int timeOut = 0);
    ~OAIEventsV1SubscribedEventApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_sid QString [required]
    * @param[in]  type QString [required]
    * @param[in]  schema_version qint32 [optional]
    */
    virtual void createSubscribedEvent(const QString &subscription_sid, const QString &type, const ::OpenAPI::OptionalParam<qint32> &schema_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_sid QString [required]
    * @param[in]  type QString [required]
    */
    virtual void deleteSubscribedEvent(const QString &subscription_sid, const QString &type);

    /**
    * @param[in]  subscription_sid QString [required]
    * @param[in]  type QString [required]
    */
    virtual void fetchSubscribedEvent(const QString &subscription_sid, const QString &type);

    /**
    * @param[in]  subscription_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSubscribedEvent(const QString &subscription_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_sid QString [required]
    * @param[in]  type QString [required]
    * @param[in]  schema_version qint32 [optional]
    */
    virtual void updateSubscribedEvent(const QString &subscription_sid, const QString &type, const ::OpenAPI::OptionalParam<qint32> &schema_version = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSubscribedEventCallback(OAIHttpRequestWorker *worker);
    void deleteSubscribedEventCallback(OAIHttpRequestWorker *worker);
    void fetchSubscribedEventCallback(OAIHttpRequestWorker *worker);
    void listSubscribedEventCallback(OAIHttpRequestWorker *worker);
    void updateSubscribedEventCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSubscribedEventSignal(OAIEvents_v1_subscription_subscribed_event summary);
    void deleteSubscribedEventSignal();
    void fetchSubscribedEventSignal(OAIEvents_v1_subscription_subscribed_event summary);
    void listSubscribedEventSignal(OAIListSubscribedEventResponse summary);
    void updateSubscribedEventSignal(OAIEvents_v1_subscription_subscribed_event summary);


    void createSubscribedEventSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_subscription_subscribed_event summary);
    void deleteSubscribedEventSignalFull(OAIHttpRequestWorker *worker);
    void fetchSubscribedEventSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_subscription_subscribed_event summary);
    void listSubscribedEventSignalFull(OAIHttpRequestWorker *worker, OAIListSubscribedEventResponse summary);
    void updateSubscribedEventSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_subscription_subscribed_event summary);

    Q_DECL_DEPRECATED_X("Use createSubscribedEventSignalError() instead")
    void createSubscribedEventSignalE(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscribedEventSignalError(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedEventSignalError() instead")
    void deleteSubscribedEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSubscribedEventSignalError() instead")
    void fetchSubscribedEventSignalE(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSubscribedEventSignalError(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedEventSignalError() instead")
    void listSubscribedEventSignalE(OAIListSubscribedEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedEventSignalError(OAIListSubscribedEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedEventSignalError() instead")
    void updateSubscribedEventSignalE(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedEventSignalError(OAIEvents_v1_subscription_subscribed_event summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSubscribedEventSignalErrorFull() instead")
    void createSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedEventSignalErrorFull() instead")
    void deleteSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSubscribedEventSignalErrorFull() instead")
    void fetchSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedEventSignalErrorFull() instead")
    void listSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedEventSignalErrorFull() instead")
    void updateSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
