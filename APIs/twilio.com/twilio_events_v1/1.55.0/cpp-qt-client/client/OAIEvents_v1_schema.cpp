/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvents_v1_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvents_v1_schema::OAIEvents_v1_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvents_v1_schema::OAIEvents_v1_schema() {
    this->initializeModel();
}

OAIEvents_v1_schema::~OAIEvents_v1_schema() {}

void OAIEvents_v1_schema::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_version_isSet = false;
    m_latest_version_isValid = false;

    m_latest_version_date_created_isSet = false;
    m_latest_version_date_created_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEvents_v1_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvents_v1_schema::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_version_isValid = ::OpenAPI::fromJsonValue(m_latest_version, json[QString("latest_version")]);
    m_latest_version_isSet = !json[QString("latest_version")].isNull() && m_latest_version_isValid;

    m_latest_version_date_created_isValid = ::OpenAPI::fromJsonValue(m_latest_version_date_created, json[QString("latest_version_date_created")]);
    m_latest_version_date_created_isSet = !json[QString("latest_version_date_created")].isNull() && m_latest_version_date_created_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEvents_v1_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvents_v1_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_version_isSet) {
        obj.insert(QString("latest_version"), ::OpenAPI::toJsonValue(m_latest_version));
    }
    if (m_latest_version_date_created_isSet) {
        obj.insert(QString("latest_version_date_created"), ::OpenAPI::toJsonValue(m_latest_version_date_created));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIEvents_v1_schema::getId() const {
    return m_id;
}
void OAIEvents_v1_schema::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvents_v1_schema::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvents_v1_schema::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIEvents_v1_schema::getLatestVersion() const {
    return m_latest_version;
}
void OAIEvents_v1_schema::setLatestVersion(const qint32 &latest_version) {
    m_latest_version = latest_version;
    m_latest_version_isSet = true;
}

bool OAIEvents_v1_schema::is_latest_version_Set() const{
    return m_latest_version_isSet;
}

bool OAIEvents_v1_schema::is_latest_version_Valid() const{
    return m_latest_version_isValid;
}

QDateTime OAIEvents_v1_schema::getLatestVersionDateCreated() const {
    return m_latest_version_date_created;
}
void OAIEvents_v1_schema::setLatestVersionDateCreated(const QDateTime &latest_version_date_created) {
    m_latest_version_date_created = latest_version_date_created;
    m_latest_version_date_created_isSet = true;
}

bool OAIEvents_v1_schema::is_latest_version_date_created_Set() const{
    return m_latest_version_date_created_isSet;
}

bool OAIEvents_v1_schema::is_latest_version_date_created_Valid() const{
    return m_latest_version_date_created_isValid;
}

OAIObject OAIEvents_v1_schema::getLinks() const {
    return m_links;
}
void OAIEvents_v1_schema::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIEvents_v1_schema::is_links_Set() const{
    return m_links_isSet;
}

bool OAIEvents_v1_schema::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIEvents_v1_schema::getUrl() const {
    return m_url;
}
void OAIEvents_v1_schema::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEvents_v1_schema::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEvents_v1_schema::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEvents_v1_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvents_v1_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
