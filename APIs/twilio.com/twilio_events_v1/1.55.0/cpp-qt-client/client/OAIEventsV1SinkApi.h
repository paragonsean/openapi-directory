/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsV1SinkApi_H
#define OAI_OAIEventsV1SinkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvents_v1_sink.h"
#include "OAIListSinkResponse.h"
#include "OAISink_enum_sink_type.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsV1SinkApi : public QObject {
    Q_OBJECT

public:
    OAIEventsV1SinkApi(const int timeOut = 0);
    ~OAIEventsV1SinkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  description QString [required]
    * @param[in]  sink_configuration QJsonValue [required]
    * @param[in]  sink_type OAISink_enum_sink_type [required]
    */
    virtual void createSink(const QString &description, const QJsonValue &sink_configuration, const OAISink_enum_sink_type &sink_type);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteSink(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchSink(const QString &sid);

    /**
    * @param[in]  in_use bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSink(const ::OpenAPI::OptionalParam<bool> &in_use = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  description QString [required]
    */
    virtual void updateSink(const QString &sid, const QString &description);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSinkCallback(OAIHttpRequestWorker *worker);
    void deleteSinkCallback(OAIHttpRequestWorker *worker);
    void fetchSinkCallback(OAIHttpRequestWorker *worker);
    void listSinkCallback(OAIHttpRequestWorker *worker);
    void updateSinkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSinkSignal(OAIEvents_v1_sink summary);
    void deleteSinkSignal();
    void fetchSinkSignal(OAIEvents_v1_sink summary);
    void listSinkSignal(OAIListSinkResponse summary);
    void updateSinkSignal(OAIEvents_v1_sink summary);


    void createSinkSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_sink summary);
    void deleteSinkSignalFull(OAIHttpRequestWorker *worker);
    void fetchSinkSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_sink summary);
    void listSinkSignalFull(OAIHttpRequestWorker *worker, OAIListSinkResponse summary);
    void updateSinkSignalFull(OAIHttpRequestWorker *worker, OAIEvents_v1_sink summary);

    Q_DECL_DEPRECATED_X("Use createSinkSignalError() instead")
    void createSinkSignalE(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSinkSignalError(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSinkSignalError() instead")
    void deleteSinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSinkSignalError() instead")
    void fetchSinkSignalE(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSinkSignalError(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSinkSignalError() instead")
    void listSinkSignalE(OAIListSinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSinkSignalError(OAIListSinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSinkSignalError() instead")
    void updateSinkSignalE(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSinkSignalError(OAIEvents_v1_sink summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSinkSignalErrorFull() instead")
    void createSinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSinkSignalErrorFull() instead")
    void deleteSinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSinkSignalErrorFull() instead")
    void fetchSinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSinkSignalErrorFull() instead")
    void listSinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSinkSignalErrorFull() instead")
    void updateSinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
