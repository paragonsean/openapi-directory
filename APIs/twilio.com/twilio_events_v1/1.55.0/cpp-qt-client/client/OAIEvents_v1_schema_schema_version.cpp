/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvents_v1_schema_schema_version.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvents_v1_schema_schema_version::OAIEvents_v1_schema_schema_version(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvents_v1_schema_schema_version::OAIEvents_v1_schema_schema_version() {
    this->initializeModel();
}

OAIEvents_v1_schema_schema_version::~OAIEvents_v1_schema_schema_version() {}

void OAIEvents_v1_schema_schema_version::initializeModel() {

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEvents_v1_schema_schema_version::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvents_v1_schema_schema_version::fromJsonObject(QJsonObject json) {

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schema_version")]);
    m_schema_version_isSet = !json[QString("schema_version")].isNull() && m_schema_version_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEvents_v1_schema_schema_version::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvents_v1_schema_schema_version::asJsonObject() const {
    QJsonObject obj;
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schema_version"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIEvents_v1_schema_schema_version::getDateCreated() const {
    return m_date_created;
}
void OAIEvents_v1_schema_schema_version::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIEvents_v1_schema_schema_version::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIEvents_v1_schema_schema_version::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIEvents_v1_schema_schema_version::getId() const {
    return m_id;
}
void OAIEvents_v1_schema_schema_version::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvents_v1_schema_schema_version::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvents_v1_schema_schema_version::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvents_v1_schema_schema_version::getRaw() const {
    return m_raw;
}
void OAIEvents_v1_schema_schema_version::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIEvents_v1_schema_schema_version::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIEvents_v1_schema_schema_version::is_raw_Valid() const{
    return m_raw_isValid;
}

qint32 OAIEvents_v1_schema_schema_version::getSchemaVersion() const {
    return m_schema_version;
}
void OAIEvents_v1_schema_schema_version::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIEvents_v1_schema_schema_version::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIEvents_v1_schema_schema_version::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIEvents_v1_schema_schema_version::getUrl() const {
    return m_url;
}
void OAIEvents_v1_schema_schema_version::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEvents_v1_schema_schema_version::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEvents_v1_schema_schema_version::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEvents_v1_schema_schema_version::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvents_v1_schema_schema_version::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
