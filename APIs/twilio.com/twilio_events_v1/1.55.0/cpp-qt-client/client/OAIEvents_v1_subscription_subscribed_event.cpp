/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvents_v1_subscription_subscribed_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvents_v1_subscription_subscribed_event::OAIEvents_v1_subscription_subscribed_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvents_v1_subscription_subscribed_event::OAIEvents_v1_subscription_subscribed_event() {
    this->initializeModel();
}

OAIEvents_v1_subscription_subscribed_event::~OAIEvents_v1_subscription_subscribed_event() {}

void OAIEvents_v1_subscription_subscribed_event::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_subscription_sid_isSet = false;
    m_subscription_sid_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEvents_v1_subscription_subscribed_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvents_v1_subscription_subscribed_event::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schema_version")]);
    m_schema_version_isSet = !json[QString("schema_version")].isNull() && m_schema_version_isValid;

    m_subscription_sid_isValid = ::OpenAPI::fromJsonValue(m_subscription_sid, json[QString("subscription_sid")]);
    m_subscription_sid_isSet = !json[QString("subscription_sid")].isNull() && m_subscription_sid_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEvents_v1_subscription_subscribed_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvents_v1_subscription_subscribed_event::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schema_version"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_subscription_sid_isSet) {
        obj.insert(QString("subscription_sid"), ::OpenAPI::toJsonValue(m_subscription_sid));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIEvents_v1_subscription_subscribed_event::getAccountSid() const {
    return m_account_sid;
}
void OAIEvents_v1_subscription_subscribed_event::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIEvents_v1_subscription_subscribed_event::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIEvents_v1_subscription_subscribed_event::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

qint32 OAIEvents_v1_subscription_subscribed_event::getSchemaVersion() const {
    return m_schema_version;
}
void OAIEvents_v1_subscription_subscribed_event::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIEvents_v1_subscription_subscribed_event::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIEvents_v1_subscription_subscribed_event::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIEvents_v1_subscription_subscribed_event::getSubscriptionSid() const {
    return m_subscription_sid;
}
void OAIEvents_v1_subscription_subscribed_event::setSubscriptionSid(const QString &subscription_sid) {
    m_subscription_sid = subscription_sid;
    m_subscription_sid_isSet = true;
}

bool OAIEvents_v1_subscription_subscribed_event::is_subscription_sid_Set() const{
    return m_subscription_sid_isSet;
}

bool OAIEvents_v1_subscription_subscribed_event::is_subscription_sid_Valid() const{
    return m_subscription_sid_isValid;
}

QString OAIEvents_v1_subscription_subscribed_event::getType() const {
    return m_type;
}
void OAIEvents_v1_subscription_subscribed_event::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvents_v1_subscription_subscribed_event::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvents_v1_subscription_subscribed_event::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEvents_v1_subscription_subscribed_event::getUrl() const {
    return m_url;
}
void OAIEvents_v1_subscription_subscribed_event::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEvents_v1_subscription_subscribed_event::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEvents_v1_subscription_subscribed_event::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEvents_v1_subscription_subscribed_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvents_v1_subscription_subscribed_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
