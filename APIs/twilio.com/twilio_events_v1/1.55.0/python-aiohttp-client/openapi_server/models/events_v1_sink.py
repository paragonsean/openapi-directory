# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sink_enum_sink_type import SinkEnumSinkType
from openapi_server.models.sink_enum_status import SinkEnumStatus
import re
from openapi_server import util


class EventsV1Sink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_created: datetime=None, date_updated: datetime=None, description: str=None, links: object=None, sid: str=None, sink_configuration: object=None, sink_type: SinkEnumSinkType=None, status: SinkEnumStatus=None, url: str=None):
        """EventsV1Sink - a model defined in OpenAPI

        :param date_created: The date_created of this EventsV1Sink.
        :param date_updated: The date_updated of this EventsV1Sink.
        :param description: The description of this EventsV1Sink.
        :param links: The links of this EventsV1Sink.
        :param sid: The sid of this EventsV1Sink.
        :param sink_configuration: The sink_configuration of this EventsV1Sink.
        :param sink_type: The sink_type of this EventsV1Sink.
        :param status: The status of this EventsV1Sink.
        :param url: The url of this EventsV1Sink.
        """
        self.openapi_types = {
            'date_created': datetime,
            'date_updated': datetime,
            'description': str,
            'links': object,
            'sid': str,
            'sink_configuration': object,
            'sink_type': SinkEnumSinkType,
            'status': SinkEnumStatus,
            'url': str
        }

        self.attribute_map = {
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'description': 'description',
            'links': 'links',
            'sid': 'sid',
            'sink_configuration': 'sink_configuration',
            'sink_type': 'sink_type',
            'status': 'status',
            'url': 'url'
        }

        self._date_created = date_created
        self._date_updated = date_updated
        self._description = description
        self._links = links
        self._sid = sid
        self._sink_configuration = sink_configuration
        self._sink_type = sink_type
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsV1Sink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The events.v1.sink of this EventsV1Sink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_created(self):
        """Gets the date_created of this EventsV1Sink.

        The date that this Sink was created, given in ISO 8601 format.

        :return: The date_created of this EventsV1Sink.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EventsV1Sink.

        The date that this Sink was created, given in ISO 8601 format.

        :param date_created: The date_created of this EventsV1Sink.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this EventsV1Sink.

        The date that this Sink was updated, given in ISO 8601 format.

        :return: The date_updated of this EventsV1Sink.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this EventsV1Sink.

        The date that this Sink was updated, given in ISO 8601 format.

        :param date_updated: The date_updated of this EventsV1Sink.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def description(self):
        """Gets the description of this EventsV1Sink.

        A human readable description for the Sink

        :return: The description of this EventsV1Sink.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventsV1Sink.

        A human readable description for the Sink

        :param description: The description of this EventsV1Sink.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this EventsV1Sink.

        Contains a dictionary of URL links to nested resources of this Sink.

        :return: The links of this EventsV1Sink.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EventsV1Sink.

        Contains a dictionary of URL links to nested resources of this Sink.

        :param links: The links of this EventsV1Sink.
        :type links: object
        """

        self._links = links

    @property
    def sid(self):
        """Gets the sid of this EventsV1Sink.

        A 34 character string that uniquely identifies this Sink.

        :return: The sid of this EventsV1Sink.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this EventsV1Sink.

        A 34 character string that uniquely identifies this Sink.

        :param sid: The sid of this EventsV1Sink.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^DG[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^DG[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sink_configuration(self):
        """Gets the sink_configuration of this EventsV1Sink.

        The information required for Twilio to connect to the provided Sink encoded as JSON.

        :return: The sink_configuration of this EventsV1Sink.
        :rtype: object
        """
        return self._sink_configuration

    @sink_configuration.setter
    def sink_configuration(self, sink_configuration):
        """Sets the sink_configuration of this EventsV1Sink.

        The information required for Twilio to connect to the provided Sink encoded as JSON.

        :param sink_configuration: The sink_configuration of this EventsV1Sink.
        :type sink_configuration: object
        """

        self._sink_configuration = sink_configuration

    @property
    def sink_type(self):
        """Gets the sink_type of this EventsV1Sink.


        :return: The sink_type of this EventsV1Sink.
        :rtype: SinkEnumSinkType
        """
        return self._sink_type

    @sink_type.setter
    def sink_type(self, sink_type):
        """Sets the sink_type of this EventsV1Sink.


        :param sink_type: The sink_type of this EventsV1Sink.
        :type sink_type: SinkEnumSinkType
        """

        self._sink_type = sink_type

    @property
    def status(self):
        """Gets the status of this EventsV1Sink.


        :return: The status of this EventsV1Sink.
        :rtype: SinkEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventsV1Sink.


        :param status: The status of this EventsV1Sink.
        :type status: SinkEnumStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this EventsV1Sink.

        The URL of this resource.

        :return: The url of this EventsV1Sink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventsV1Sink.

        The URL of this resource.

        :param url: The url of this EventsV1Sink.
        :type url: str
        """

        self._url = url
