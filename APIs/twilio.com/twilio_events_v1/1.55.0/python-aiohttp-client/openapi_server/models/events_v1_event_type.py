# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsV1EventType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_created: datetime=None, date_updated: datetime=None, description: str=None, links: object=None, schema_id: str=None, type: str=None, url: str=None):
        """EventsV1EventType - a model defined in OpenAPI

        :param date_created: The date_created of this EventsV1EventType.
        :param date_updated: The date_updated of this EventsV1EventType.
        :param description: The description of this EventsV1EventType.
        :param links: The links of this EventsV1EventType.
        :param schema_id: The schema_id of this EventsV1EventType.
        :param type: The type of this EventsV1EventType.
        :param url: The url of this EventsV1EventType.
        """
        self.openapi_types = {
            'date_created': datetime,
            'date_updated': datetime,
            'description': str,
            'links': object,
            'schema_id': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'description': 'description',
            'links': 'links',
            'schema_id': 'schema_id',
            'type': 'type',
            'url': 'url'
        }

        self._date_created = date_created
        self._date_updated = date_updated
        self._description = description
        self._links = links
        self._schema_id = schema_id
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsV1EventType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The events.v1.event_type of this EventsV1EventType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_created(self):
        """Gets the date_created of this EventsV1EventType.

        The date that this Event Type was created, given in ISO 8601 format.

        :return: The date_created of this EventsV1EventType.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EventsV1EventType.

        The date that this Event Type was created, given in ISO 8601 format.

        :param date_created: The date_created of this EventsV1EventType.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this EventsV1EventType.

        The date that this Event Type was updated, given in ISO 8601 format.

        :return: The date_updated of this EventsV1EventType.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this EventsV1EventType.

        The date that this Event Type was updated, given in ISO 8601 format.

        :param date_updated: The date_updated of this EventsV1EventType.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def description(self):
        """Gets the description of this EventsV1EventType.

        A human readable description for this Event Type.

        :return: The description of this EventsV1EventType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventsV1EventType.

        A human readable description for this Event Type.

        :param description: The description of this EventsV1EventType.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this EventsV1EventType.


        :return: The links of this EventsV1EventType.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EventsV1EventType.


        :param links: The links of this EventsV1EventType.
        :type links: object
        """

        self._links = links

    @property
    def schema_id(self):
        """Gets the schema_id of this EventsV1EventType.

        A string that uniquely identifies the Schema this Event Type adheres to.

        :return: The schema_id of this EventsV1EventType.
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this EventsV1EventType.

        A string that uniquely identifies the Schema this Event Type adheres to.

        :param schema_id: The schema_id of this EventsV1EventType.
        :type schema_id: str
        """

        self._schema_id = schema_id

    @property
    def type(self):
        """Gets the type of this EventsV1EventType.

        A string that uniquely identifies this Event Type.

        :return: The type of this EventsV1EventType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsV1EventType.

        A string that uniquely identifies this Event Type.

        :param type: The type of this EventsV1EventType.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this EventsV1EventType.

        The URL of this resource.

        :return: The url of this EventsV1EventType.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventsV1EventType.

        The URL of this resource.

        :param url: The url of this EventsV1EventType.
        :type url: str
        """

        self._url = url
