# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EventsV1SubscriptionSubscribedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, schema_version: int=None, subscription_sid: str=None, type: str=None, url: str=None):
        """EventsV1SubscriptionSubscribedEvent - a model defined in OpenAPI

        :param account_sid: The account_sid of this EventsV1SubscriptionSubscribedEvent.
        :param schema_version: The schema_version of this EventsV1SubscriptionSubscribedEvent.
        :param subscription_sid: The subscription_sid of this EventsV1SubscriptionSubscribedEvent.
        :param type: The type of this EventsV1SubscriptionSubscribedEvent.
        :param url: The url of this EventsV1SubscriptionSubscribedEvent.
        """
        self.openapi_types = {
            'account_sid': str,
            'schema_version': int,
            'subscription_sid': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'schema_version': 'schema_version',
            'subscription_sid': 'subscription_sid',
            'type': 'type',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._schema_version = schema_version
        self._subscription_sid = subscription_sid
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsV1SubscriptionSubscribedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The events.v1.subscription.subscribed_event of this EventsV1SubscriptionSubscribedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this EventsV1SubscriptionSubscribedEvent.

        The unique SID identifier of the Account.

        :return: The account_sid of this EventsV1SubscriptionSubscribedEvent.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this EventsV1SubscriptionSubscribedEvent.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this EventsV1SubscriptionSubscribedEvent.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def schema_version(self):
        """Gets the schema_version of this EventsV1SubscriptionSubscribedEvent.

        The schema version that the Subscription should use.

        :return: The schema_version of this EventsV1SubscriptionSubscribedEvent.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this EventsV1SubscriptionSubscribedEvent.

        The schema version that the Subscription should use.

        :param schema_version: The schema_version of this EventsV1SubscriptionSubscribedEvent.
        :type schema_version: int
        """

        self._schema_version = schema_version

    @property
    def subscription_sid(self):
        """Gets the subscription_sid of this EventsV1SubscriptionSubscribedEvent.

        The unique SID identifier of the Subscription.

        :return: The subscription_sid of this EventsV1SubscriptionSubscribedEvent.
        :rtype: str
        """
        return self._subscription_sid

    @subscription_sid.setter
    def subscription_sid(self, subscription_sid):
        """Sets the subscription_sid of this EventsV1SubscriptionSubscribedEvent.

        The unique SID identifier of the Subscription.

        :param subscription_sid: The subscription_sid of this EventsV1SubscriptionSubscribedEvent.
        :type subscription_sid: str
        """
        if subscription_sid is not None and len(subscription_sid) > 34:
            raise ValueError("Invalid value for `subscription_sid`, length must be less than or equal to `34`")
        if subscription_sid is not None and len(subscription_sid) < 34:
            raise ValueError("Invalid value for `subscription_sid`, length must be greater than or equal to `34`")
        if subscription_sid is not None and not re.search(r'^DF[0-9a-fA-F]{32}$', subscription_sid):
            raise ValueError("Invalid value for `subscription_sid`, must be a follow pattern or equal to `/^DF[0-9a-fA-F]{32}$/`")

        self._subscription_sid = subscription_sid

    @property
    def type(self):
        """Gets the type of this EventsV1SubscriptionSubscribedEvent.

        Type of event being subscribed to.

        :return: The type of this EventsV1SubscriptionSubscribedEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsV1SubscriptionSubscribedEvent.

        Type of event being subscribed to.

        :param type: The type of this EventsV1SubscriptionSubscribedEvent.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this EventsV1SubscriptionSubscribedEvent.

        The URL of this resource.

        :return: The url of this EventsV1SubscriptionSubscribedEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventsV1SubscriptionSubscribedEvent.

        The URL of this resource.

        :param url: The url of this EventsV1SubscriptionSubscribedEvent.
        :type url: str
        """

        self._url = url
