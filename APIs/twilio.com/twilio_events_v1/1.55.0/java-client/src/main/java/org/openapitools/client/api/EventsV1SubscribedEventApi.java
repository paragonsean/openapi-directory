/*
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventsV1SubscriptionSubscribedEvent;
import org.openapitools.client.model.ListSubscribedEventResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsV1SubscribedEventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsV1SubscribedEventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsV1SubscribedEventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSubscribedEvent
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscribedEventCall(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://events.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents"
            .replace("{" + "SubscriptionSid" + "}", localVarApiClient.escapeString(subscriptionSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaVersion != null) {
            localVarFormParams.put("SchemaVersion", schemaVersion);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscribedEventValidateBeforeCall(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionSid' is set
        if (subscriptionSid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionSid' when calling createSubscribedEvent(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createSubscribedEvent(Async)");
        }

        return createSubscribedEventCall(subscriptionSid, type, schemaVersion, _callback);

    }

    /**
     * 
     * Add an event type to a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @return EventsV1SubscriptionSubscribedEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public EventsV1SubscriptionSubscribedEvent createSubscribedEvent(String subscriptionSid, String type, Integer schemaVersion) throws ApiException {
        ApiResponse<EventsV1SubscriptionSubscribedEvent> localVarResp = createSubscribedEventWithHttpInfo(subscriptionSid, type, schemaVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Add an event type to a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @return ApiResponse&lt;EventsV1SubscriptionSubscribedEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsV1SubscriptionSubscribedEvent> createSubscribedEventWithHttpInfo(String subscriptionSid, String type, Integer schemaVersion) throws ApiException {
        okhttp3.Call localVarCall = createSubscribedEventValidateBeforeCall(subscriptionSid, type, schemaVersion, null);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an event type to a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscribedEventAsync(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback<EventsV1SubscriptionSubscribedEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscribedEventValidateBeforeCall(subscriptionSid, type, schemaVersion, _callback);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscribedEvent
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscribedEventCall(String subscriptionSid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://events.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}"
            .replace("{" + "SubscriptionSid" + "}", localVarApiClient.escapeString(subscriptionSid.toString()))
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscribedEventValidateBeforeCall(String subscriptionSid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionSid' is set
        if (subscriptionSid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionSid' when calling deleteSubscribedEvent(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteSubscribedEvent(Async)");
        }

        return deleteSubscribedEventCall(subscriptionSid, type, _callback);

    }

    /**
     * 
     * Remove an event type from a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSubscribedEvent(String subscriptionSid, String type) throws ApiException {
        deleteSubscribedEventWithHttpInfo(subscriptionSid, type);
    }

    /**
     * 
     * Remove an event type from a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSubscribedEventWithHttpInfo(String subscriptionSid, String type) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscribedEventValidateBeforeCall(subscriptionSid, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an event type from a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscribedEventAsync(String subscriptionSid, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscribedEventValidateBeforeCall(subscriptionSid, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSubscribedEvent
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSubscribedEventCall(String subscriptionSid, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://events.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}"
            .replace("{" + "SubscriptionSid" + "}", localVarApiClient.escapeString(subscriptionSid.toString()))
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSubscribedEventValidateBeforeCall(String subscriptionSid, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionSid' is set
        if (subscriptionSid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionSid' when calling fetchSubscribedEvent(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling fetchSubscribedEvent(Async)");
        }

        return fetchSubscribedEventCall(subscriptionSid, type, _callback);

    }

    /**
     * 
     * Read an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @return EventsV1SubscriptionSubscribedEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EventsV1SubscriptionSubscribedEvent fetchSubscribedEvent(String subscriptionSid, String type) throws ApiException {
        ApiResponse<EventsV1SubscriptionSubscribedEvent> localVarResp = fetchSubscribedEventWithHttpInfo(subscriptionSid, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Read an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @return ApiResponse&lt;EventsV1SubscriptionSubscribedEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsV1SubscriptionSubscribedEvent> fetchSubscribedEventWithHttpInfo(String subscriptionSid, String type) throws ApiException {
        okhttp3.Call localVarCall = fetchSubscribedEventValidateBeforeCall(subscriptionSid, type, null);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSubscribedEventAsync(String subscriptionSid, String type, final ApiCallback<EventsV1SubscriptionSubscribedEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSubscribedEventValidateBeforeCall(subscriptionSid, type, _callback);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubscribedEvent
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedEventCall(String subscriptionSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://events.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents"
            .replace("{" + "SubscriptionSid" + "}", localVarApiClient.escapeString(subscriptionSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscribedEventValidateBeforeCall(String subscriptionSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionSid' is set
        if (subscriptionSid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionSid' when calling listSubscribedEvent(Async)");
        }

        return listSubscribedEventCall(subscriptionSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Subscribed Event types for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSubscribedEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscribedEventResponse listSubscribedEvent(String subscriptionSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSubscribedEventResponse> localVarResp = listSubscribedEventWithHttpInfo(subscriptionSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Subscribed Event types for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSubscribedEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscribedEventResponse> listSubscribedEventWithHttpInfo(String subscriptionSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSubscribedEventValidateBeforeCall(subscriptionSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSubscribedEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Subscribed Event types for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedEventAsync(String subscriptionSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSubscribedEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscribedEventValidateBeforeCall(subscriptionSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSubscribedEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscribedEvent
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscribedEventCall(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://events.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}"
            .replace("{" + "SubscriptionSid" + "}", localVarApiClient.escapeString(subscriptionSid.toString()))
            .replace("{" + "Type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaVersion != null) {
            localVarFormParams.put("SchemaVersion", schemaVersion);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscribedEventValidateBeforeCall(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionSid' is set
        if (subscriptionSid == null) {
            throw new ApiException("Missing the required parameter 'subscriptionSid' when calling updateSubscribedEvent(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateSubscribedEvent(Async)");
        }

        return updateSubscribedEventCall(subscriptionSid, type, schemaVersion, _callback);

    }

    /**
     * 
     * Update an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @return EventsV1SubscriptionSubscribedEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EventsV1SubscriptionSubscribedEvent updateSubscribedEvent(String subscriptionSid, String type, Integer schemaVersion) throws ApiException {
        ApiResponse<EventsV1SubscriptionSubscribedEvent> localVarResp = updateSubscribedEventWithHttpInfo(subscriptionSid, type, schemaVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @return ApiResponse&lt;EventsV1SubscriptionSubscribedEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsV1SubscriptionSubscribedEvent> updateSubscribedEventWithHttpInfo(String subscriptionSid, String type, Integer schemaVersion) throws ApiException {
        okhttp3.Call localVarCall = updateSubscribedEventValidateBeforeCall(subscriptionSid, type, schemaVersion, null);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Event for a Subscription.
     * @param subscriptionSid The unique SID identifier of the Subscription. (required)
     * @param type Type of event being subscribed to. (required)
     * @param schemaVersion The schema version that the Subscription should use. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscribedEventAsync(String subscriptionSid, String type, Integer schemaVersion, final ApiCallback<EventsV1SubscriptionSubscribedEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscribedEventValidateBeforeCall(subscriptionSid, type, schemaVersion, _callback);
        Type localVarReturnType = new TypeToken<EventsV1SubscriptionSubscribedEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
