/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SinkEnumSinkType from './SinkEnumSinkType';
import SinkEnumStatus from './SinkEnumStatus';

/**
 * The EventsV1Sink model module.
 * @module model/EventsV1Sink
 * @version 1.55.0
 */
class EventsV1Sink {
    /**
     * Constructs a new <code>EventsV1Sink</code>.
     * @alias module:model/EventsV1Sink
     */
    constructor() { 
        
        EventsV1Sink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsV1Sink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsV1Sink} obj Optional instance to populate.
     * @return {module:model/EventsV1Sink} The populated <code>EventsV1Sink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsV1Sink();

            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('sink_configuration')) {
                obj['sink_configuration'] = ApiClient.convertToType(data['sink_configuration'], Object);
            }
            if (data.hasOwnProperty('sink_type')) {
                obj['sink_type'] = SinkEnumSinkType.constructFromObject(data['sink_type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SinkEnumStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsV1Sink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsV1Sink</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['sink_type'] && !(typeof data['sink_type'] === 'string' || data['sink_type'] instanceof String)) {
            throw new Error("Expected the field `sink_type` to be a primitive type in the JSON string but got " + data['sink_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The date that this Sink was created, given in ISO 8601 format.
 * @member {Date} date_created
 */
EventsV1Sink.prototype['date_created'] = undefined;

/**
 * The date that this Sink was updated, given in ISO 8601 format.
 * @member {Date} date_updated
 */
EventsV1Sink.prototype['date_updated'] = undefined;

/**
 * A human readable description for the Sink
 * @member {String} description
 */
EventsV1Sink.prototype['description'] = undefined;

/**
 * Contains a dictionary of URL links to nested resources of this Sink.
 * @member {Object} links
 */
EventsV1Sink.prototype['links'] = undefined;

/**
 * A 34 character string that uniquely identifies this Sink.
 * @member {String} sid
 */
EventsV1Sink.prototype['sid'] = undefined;

/**
 * The information required for Twilio to connect to the provided Sink encoded as JSON.
 * @member {Object} sink_configuration
 */
EventsV1Sink.prototype['sink_configuration'] = undefined;

/**
 * @member {module:model/SinkEnumSinkType} sink_type
 */
EventsV1Sink.prototype['sink_type'] = undefined;

/**
 * @member {module:model/SinkEnumStatus} status
 */
EventsV1Sink.prototype['status'] = undefined;

/**
 * The URL of this resource.
 * @member {String} url
 */
EventsV1Sink.prototype['url'] = undefined;






export default EventsV1Sink;

