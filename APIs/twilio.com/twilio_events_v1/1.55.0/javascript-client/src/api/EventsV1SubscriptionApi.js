/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventsV1Subscription from '../model/EventsV1Subscription';
import ListSubscriptionResponse from '../model/ListSubscriptionResponse';

/**
* EventsV1Subscription service.
* @module api/EventsV1SubscriptionApi
* @version 1.55.0
*/
export default class EventsV1SubscriptionApi {

    /**
    * Constructs a new EventsV1SubscriptionApi. 
    * @alias module:api/EventsV1SubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/EventsV1SubscriptionApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Subscription.
     * @param {String} description A human readable description for the Subscription **This value should not contain PII.**
     * @param {String} sinkSid The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.
     * @param {Array.<Object>} types An array of objects containing the subscribed Event Types
     * @param {module:api/EventsV1SubscriptionApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Subscription}
     */
    createSubscription(description, sinkSid, types, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling createSubscription");
      }
      // verify the required parameter 'sinkSid' is set
      if (sinkSid === undefined || sinkSid === null) {
        throw new Error("Missing the required parameter 'sinkSid' when calling createSubscription");
      }
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling createSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Description': description,
        'SinkSid': sinkSid,
        'Types': this.apiClient.buildCollectionParam(types, 'csv')
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = EventsV1Subscription;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscription operation.
     * @callback module:api/EventsV1SubscriptionApi~deleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Subscription.
     * @param {String} sid A 34 character string that uniquely identifies this Subscription.
     * @param {module:api/EventsV1SubscriptionApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscription(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSubscription");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Subscriptions/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSubscription operation.
     * @callback module:api/EventsV1SubscriptionApi~fetchSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Subscription.
     * @param {String} sid A 34 character string that uniquely identifies this Subscription.
     * @param {module:api/EventsV1SubscriptionApi~fetchSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Subscription}
     */
    fetchSubscription(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSubscription");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsV1Subscription;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Subscriptions/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubscription operation.
     * @callback module:api/EventsV1SubscriptionApi~listSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a paginated list of Subscriptions belonging to the account used to make the request.
     * @param {Object} opts Optional parameters
     * @param {String} [sinkSid] The SID of the sink that the list of Subscriptions should be filtered by.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/EventsV1SubscriptionApi~listSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscriptionResponse}
     */
    listSubscription(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'SinkSid': opts['sinkSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionResponse;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscription operation.
     * @callback module:api/EventsV1SubscriptionApi~updateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Subscription.
     * @param {String} sid A 34 character string that uniquely identifies this Subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [description] A human readable description for the Subscription.
     * @param {String} [sinkSid] The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.
     * @param {module:api/EventsV1SubscriptionApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Subscription}
     */
    updateSubscription(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSubscription");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Description': opts['description'],
        'SinkSid': opts['sinkSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = EventsV1Subscription;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Subscriptions/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
