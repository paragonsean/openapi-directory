/**
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventsV1Sink from '../model/EventsV1Sink';
import ListSinkResponse from '../model/ListSinkResponse';
import SinkEnumSinkType from '../model/SinkEnumSinkType';

/**
* EventsV1Sink service.
* @module api/EventsV1SinkApi
* @version 1.55.0
*/
export default class EventsV1SinkApi {

    /**
    * Constructs a new EventsV1SinkApi. 
    * @alias module:api/EventsV1SinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSink operation.
     * @callback module:api/EventsV1SinkApi~createSinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Sink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Sink
     * @param {String} description A human readable description for the Sink **This value should not contain PII.**
     * @param {Object} sinkConfiguration The information required for Twilio to connect to the provided Sink encoded as JSON.
     * @param {module:model/SinkEnumSinkType} sinkType 
     * @param {module:api/EventsV1SinkApi~createSinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Sink}
     */
    createSink(description, sinkConfiguration, sinkType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling createSink");
      }
      // verify the required parameter 'sinkConfiguration' is set
      if (sinkConfiguration === undefined || sinkConfiguration === null) {
        throw new Error("Missing the required parameter 'sinkConfiguration' when calling createSink");
      }
      // verify the required parameter 'sinkType' is set
      if (sinkType === undefined || sinkType === null) {
        throw new Error("Missing the required parameter 'sinkType' when calling createSink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Description': description,
        'SinkConfiguration': sinkConfiguration,
        'SinkType': sinkType
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = EventsV1Sink;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSink operation.
     * @callback module:api/EventsV1SinkApi~deleteSinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Sink.
     * @param {String} sid A 34 character string that uniquely identifies this Sink.
     * @param {module:api/EventsV1SinkApi~deleteSinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSink(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSink");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sinks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSink operation.
     * @callback module:api/EventsV1SinkApi~fetchSinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Sink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Sink.
     * @param {String} sid A 34 character string that uniquely identifies this Sink.
     * @param {module:api/EventsV1SinkApi~fetchSinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Sink}
     */
    fetchSink(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSink");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsV1Sink;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sinks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSink operation.
     * @callback module:api/EventsV1SinkApi~listSinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a paginated list of Sinks belonging to the account used to make the request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [inUse] A boolean query parameter filtering the results to return sinks used/not used by a subscription.
     * @param {String} [status] A String query parameter filtering the results by status `initialized`, `validating`, `active` or `failed`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/EventsV1SinkApi~listSinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSinkResponse}
     */
    listSink(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'InUse': opts['inUse'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSinkResponse;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sinks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSink operation.
     * @callback module:api/EventsV1SinkApi~updateSinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsV1Sink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Sink
     * @param {String} sid A 34 character string that uniquely identifies this Sink.
     * @param {String} description A human readable description for the Sink **This value should not contain PII.**
     * @param {module:api/EventsV1SinkApi~updateSinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsV1Sink}
     */
    updateSink(sid, description, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSink");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling updateSink");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Description': description
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = EventsV1Sink;
      let basePaths = ['https://events.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sinks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
