/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1WorkspaceApi_H
#define OAI_OAITaskrouterV1WorkspaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWorkspaceResponse.h"
#include "OAITaskrouter_v1_workspace.h"
#include "OAIWorkspace_enum_queue_order.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1WorkspaceApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1WorkspaceApi(const int timeOut = 0);
    ~OAITaskrouterV1WorkspaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [required]
    * @param[in]  event_callback_url QString [optional]
    * @param[in]  events_filter QString [optional]
    * @param[in]  multi_task_enabled bool [optional]
    * @param[in]  prioritize_queue_order OAIWorkspace_enum_queue_order [optional]
    * @param[in]  r_template QString [optional]
    */
    virtual void createWorkspace(const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &event_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &events_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &multi_task_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIWorkspace_enum_queue_order> &prioritize_queue_order = ::OpenAPI::OptionalParam<OAIWorkspace_enum_queue_order>(), const ::OpenAPI::OptionalParam<QString> &r_template = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteWorkspace(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchWorkspace(const QString &sid);

    /**
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWorkspace(const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  default_activity_sid QString [optional]
    * @param[in]  event_callback_url QString [optional]
    * @param[in]  events_filter QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  multi_task_enabled bool [optional]
    * @param[in]  prioritize_queue_order OAIWorkspace_enum_queue_order [optional]
    * @param[in]  timeout_activity_sid QString [optional]
    */
    virtual void updateWorkspace(const QString &sid, const ::OpenAPI::OptionalParam<QString> &default_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &events_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &multi_task_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIWorkspace_enum_queue_order> &prioritize_queue_order = ::OpenAPI::OptionalParam<OAIWorkspace_enum_queue_order>(), const ::OpenAPI::OptionalParam<QString> &timeout_activity_sid = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkspaceCallback(OAIHttpRequestWorker *worker);
    void deleteWorkspaceCallback(OAIHttpRequestWorker *worker);
    void fetchWorkspaceCallback(OAIHttpRequestWorker *worker);
    void listWorkspaceCallback(OAIHttpRequestWorker *worker);
    void updateWorkspaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkspaceSignal(OAITaskrouter_v1_workspace summary);
    void deleteWorkspaceSignal();
    void fetchWorkspaceSignal(OAITaskrouter_v1_workspace summary);
    void listWorkspaceSignal(OAIListWorkspaceResponse summary);
    void updateWorkspaceSignal(OAITaskrouter_v1_workspace summary);


    void createWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace summary);
    void deleteWorkspaceSignalFull(OAIHttpRequestWorker *worker);
    void fetchWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace summary);
    void listWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIListWorkspaceResponse summary);
    void updateWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace summary);

    Q_DECL_DEPRECATED_X("Use createWorkspaceSignalError() instead")
    void createWorkspaceSignalE(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkspaceSignalError(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkspaceSignalError() instead")
    void deleteWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkspaceSignalError() instead")
    void fetchWorkspaceSignalE(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkspaceSignalError(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkspaceSignalError() instead")
    void listWorkspaceSignalE(OAIListWorkspaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkspaceSignalError(OAIListWorkspaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceSignalError() instead")
    void updateWorkspaceSignalE(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceSignalError(OAITaskrouter_v1_workspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkspaceSignalErrorFull() instead")
    void createWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkspaceSignalErrorFull() instead")
    void deleteWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkspaceSignalErrorFull() instead")
    void fetchWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkspaceSignalErrorFull() instead")
    void listWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkspaceSignalErrorFull() instead")
    void updateWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
