/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1WorkerApi_H
#define OAI_OAITaskrouterV1WorkerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWorkerResponse.h"
#include "OAITaskrouter_v1_workspace_worker.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1WorkerApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1WorkerApi(const int timeOut = 0);
    ~OAITaskrouterV1WorkerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  activity_sid QString [optional]
    * @param[in]  attributes QString [optional]
    */
    virtual void createWorker(const QString &workspace_sid, const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteWorker(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchWorker(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  activity_name QString [optional]
    * @param[in]  activity_sid QString [optional]
    * @param[in]  available QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  target_workers_expression QString [optional]
    * @param[in]  task_queue_name QString [optional]
    * @param[in]  task_queue_sid QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWorker(const QString &workspace_sid, const ::OpenAPI::OptionalParam<QString> &activity_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &available = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_workers_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_queue_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_queue_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  activity_sid QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  reject_pending_reservations bool [optional]
    */
    virtual void updateWorker(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reject_pending_reservations = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkerCallback(OAIHttpRequestWorker *worker);
    void deleteWorkerCallback(OAIHttpRequestWorker *worker);
    void fetchWorkerCallback(OAIHttpRequestWorker *worker);
    void listWorkerCallback(OAIHttpRequestWorker *worker);
    void updateWorkerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkerSignal(OAITaskrouter_v1_workspace_worker summary);
    void deleteWorkerSignal();
    void fetchWorkerSignal(OAITaskrouter_v1_workspace_worker summary);
    void listWorkerSignal(OAIListWorkerResponse summary);
    void updateWorkerSignal(OAITaskrouter_v1_workspace_worker summary);


    void createWorkerSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker summary);
    void deleteWorkerSignalFull(OAIHttpRequestWorker *worker);
    void fetchWorkerSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker summary);
    void listWorkerSignalFull(OAIHttpRequestWorker *worker, OAIListWorkerResponse summary);
    void updateWorkerSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker summary);

    Q_DECL_DEPRECATED_X("Use createWorkerSignalError() instead")
    void createWorkerSignalE(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkerSignalError(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkerSignalError() instead")
    void deleteWorkerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkerSignalError() instead")
    void fetchWorkerSignalE(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerSignalError(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerSignalError() instead")
    void listWorkerSignalE(OAIListWorkerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerSignalError(OAIListWorkerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerSignalError() instead")
    void updateWorkerSignalE(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerSignalError(OAITaskrouter_v1_workspace_worker summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkerSignalErrorFull() instead")
    void createWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkerSignalErrorFull() instead")
    void deleteWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkerSignalErrorFull() instead")
    void fetchWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerSignalErrorFull() instead")
    void listWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerSignalErrorFull() instead")
    void updateWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
