/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskrouter_v1_workspace_activity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskrouter_v1_workspace_activity::OAITaskrouter_v1_workspace_activity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskrouter_v1_workspace_activity::OAITaskrouter_v1_workspace_activity() {
    this->initializeModel();
}

OAITaskrouter_v1_workspace_activity::~OAITaskrouter_v1_workspace_activity() {}

void OAITaskrouter_v1_workspace_activity::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workspace_sid_isSet = false;
    m_workspace_sid_isValid = false;
}

void OAITaskrouter_v1_workspace_activity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskrouter_v1_workspace_activity::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workspace_sid_isValid = ::OpenAPI::fromJsonValue(m_workspace_sid, json[QString("workspace_sid")]);
    m_workspace_sid_isSet = !json[QString("workspace_sid")].isNull() && m_workspace_sid_isValid;
}

QString OAITaskrouter_v1_workspace_activity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskrouter_v1_workspace_activity::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workspace_sid_isSet) {
        obj.insert(QString("workspace_sid"), ::OpenAPI::toJsonValue(m_workspace_sid));
    }
    return obj;
}

QString OAITaskrouter_v1_workspace_activity::getAccountSid() const {
    return m_account_sid;
}
void OAITaskrouter_v1_workspace_activity::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAITaskrouter_v1_workspace_activity::isAvailable() const {
    return m_available;
}
void OAITaskrouter_v1_workspace_activity::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_available_Set() const{
    return m_available_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_available_Valid() const{
    return m_available_isValid;
}

QDateTime OAITaskrouter_v1_workspace_activity::getDateCreated() const {
    return m_date_created;
}
void OAITaskrouter_v1_workspace_activity::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITaskrouter_v1_workspace_activity::getDateUpdated() const {
    return m_date_updated;
}
void OAITaskrouter_v1_workspace_activity::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAITaskrouter_v1_workspace_activity::getFriendlyName() const {
    return m_friendly_name;
}
void OAITaskrouter_v1_workspace_activity::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIObject OAITaskrouter_v1_workspace_activity::getLinks() const {
    return m_links;
}
void OAITaskrouter_v1_workspace_activity::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_links_Set() const{
    return m_links_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_links_Valid() const{
    return m_links_isValid;
}

QString OAITaskrouter_v1_workspace_activity::getSid() const {
    return m_sid;
}
void OAITaskrouter_v1_workspace_activity::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAITaskrouter_v1_workspace_activity::getUrl() const {
    return m_url;
}
void OAITaskrouter_v1_workspace_activity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITaskrouter_v1_workspace_activity::getWorkspaceSid() const {
    return m_workspace_sid;
}
void OAITaskrouter_v1_workspace_activity::setWorkspaceSid(const QString &workspace_sid) {
    m_workspace_sid = workspace_sid;
    m_workspace_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_activity::is_workspace_sid_Set() const{
    return m_workspace_sid_isSet;
}

bool OAITaskrouter_v1_workspace_activity::is_workspace_sid_Valid() const{
    return m_workspace_sid_isValid;
}

bool OAITaskrouter_v1_workspace_activity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskrouter_v1_workspace_activity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
