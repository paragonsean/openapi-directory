/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1WorkerChannelApi_H
#define OAI_OAITaskrouterV1WorkerChannelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWorkerChannelResponse.h"
#include "OAITaskrouter_v1_workspace_worker_worker_channel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1WorkerChannelApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1WorkerChannelApi(const int timeOut = 0);
    ~OAITaskrouterV1WorkerChannelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchWorkerChannel(const QString &workspace_sid, const QString &worker_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWorkerChannel(const QString &workspace_sid, const QString &worker_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  available bool [optional]
    * @param[in]  capacity qint32 [optional]
    */
    virtual void updateWorkerChannel(const QString &workspace_sid, const QString &worker_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &capacity = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchWorkerChannelCallback(OAIHttpRequestWorker *worker);
    void listWorkerChannelCallback(OAIHttpRequestWorker *worker);
    void updateWorkerChannelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchWorkerChannelSignal(OAITaskrouter_v1_workspace_worker_worker_channel summary);
    void listWorkerChannelSignal(OAIListWorkerChannelResponse summary);
    void updateWorkerChannelSignal(OAITaskrouter_v1_workspace_worker_worker_channel summary);


    void fetchWorkerChannelSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker_worker_channel summary);
    void listWorkerChannelSignalFull(OAIHttpRequestWorker *worker, OAIListWorkerChannelResponse summary);
    void updateWorkerChannelSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker_worker_channel summary);

    Q_DECL_DEPRECATED_X("Use fetchWorkerChannelSignalError() instead")
    void fetchWorkerChannelSignalE(OAITaskrouter_v1_workspace_worker_worker_channel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerChannelSignalError(OAITaskrouter_v1_workspace_worker_worker_channel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerChannelSignalError() instead")
    void listWorkerChannelSignalE(OAIListWorkerChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerChannelSignalError(OAIListWorkerChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerChannelSignalError() instead")
    void updateWorkerChannelSignalE(OAITaskrouter_v1_workspace_worker_worker_channel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerChannelSignalError(OAITaskrouter_v1_workspace_worker_worker_channel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchWorkerChannelSignalErrorFull() instead")
    void fetchWorkerChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerChannelSignalErrorFull() instead")
    void listWorkerChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerChannelSignalErrorFull() instead")
    void updateWorkerChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
