/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask_reservation_enum_conference_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask_reservation_enum_conference_event::OAITask_reservation_enum_conference_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask_reservation_enum_conference_event::OAITask_reservation_enum_conference_event() {
    this->initializeModel();
}

OAITask_reservation_enum_conference_event::~OAITask_reservation_enum_conference_event() {}

void OAITask_reservation_enum_conference_event::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITask_reservation_enum_conference_event::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITask_reservation_enum_conference_event::fromJson(QString jsonString) {
    
    if ( jsonString.compare("start", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("end", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::END;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("join", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::JOIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("leave", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::LEAVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mute", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::MUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hold", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::HOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("speaker", Qt::CaseInsensitive) == 0) {
        m_value = eOAITask_reservation_enum_conference_event::SPEAKER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITask_reservation_enum_conference_event::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITask_reservation_enum_conference_event::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITask_reservation_enum_conference_event::START:
            val = "start";
            break;
        case eOAITask_reservation_enum_conference_event::END:
            val = "end";
            break;
        case eOAITask_reservation_enum_conference_event::JOIN:
            val = "join";
            break;
        case eOAITask_reservation_enum_conference_event::LEAVE:
            val = "leave";
            break;
        case eOAITask_reservation_enum_conference_event::MUTE:
            val = "mute";
            break;
        case eOAITask_reservation_enum_conference_event::HOLD:
            val = "hold";
            break;
        case eOAITask_reservation_enum_conference_event::SPEAKER:
            val = "speaker";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITask_reservation_enum_conference_event::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITask_reservation_enum_conference_event::eOAITask_reservation_enum_conference_event OAITask_reservation_enum_conference_event::getValue() const {
    return m_value;
}

void OAITask_reservation_enum_conference_event::setValue(const OAITask_reservation_enum_conference_event::eOAITask_reservation_enum_conference_event& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITask_reservation_enum_conference_event::isSet() const {
    
    return m_value_isSet;
}

bool OAITask_reservation_enum_conference_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
