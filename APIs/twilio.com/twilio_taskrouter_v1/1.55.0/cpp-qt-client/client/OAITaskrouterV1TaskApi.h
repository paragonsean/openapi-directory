/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1TaskApi_H
#define OAI_OAITaskrouterV1TaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTaskResponse.h"
#include "OAITask_enum_status.h"
#include "OAITaskrouter_v1_workspace_task.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1TaskApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1TaskApi(const int timeOut = 0);
    ~OAITaskrouterV1TaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  attributes QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  task_channel QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  virtual_start_time QDateTime [optional]
    * @param[in]  workflow_sid QString [optional]
    */
    virtual void createTask(const QString &workspace_sid, const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &task_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &virtual_start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &workflow_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteTask(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTask(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  priority qint32 [optional]
    * @param[in]  assignment_status QList<QString> [optional]
    * @param[in]  workflow_sid QString [optional]
    * @param[in]  workflow_name QString [optional]
    * @param[in]  task_queue_sid QString [optional]
    * @param[in]  task_queue_name QString [optional]
    * @param[in]  evaluate_task_attributes QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  has_addons bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTask(const QString &workspace_sid, const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &assignment_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &workflow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_queue_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_queue_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &evaluate_task_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_addons = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  assignment_status OAITask_enum_status [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  priority qint32 [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  task_channel QString [optional]
    * @param[in]  virtual_start_time QDateTime [optional]
    */
    virtual void updateTask(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITask_enum_status> &assignment_status = ::OpenAPI::OptionalParam<OAITask_enum_status>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &virtual_start_time = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTaskCallback(OAIHttpRequestWorker *worker);
    void deleteTaskCallback(OAIHttpRequestWorker *worker);
    void fetchTaskCallback(OAIHttpRequestWorker *worker);
    void listTaskCallback(OAIHttpRequestWorker *worker);
    void updateTaskCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTaskSignal(OAITaskrouter_v1_workspace_task summary);
    void deleteTaskSignal();
    void fetchTaskSignal(OAITaskrouter_v1_workspace_task summary);
    void listTaskSignal(OAIListTaskResponse summary);
    void updateTaskSignal(OAITaskrouter_v1_workspace_task summary);


    void createTaskSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task summary);
    void deleteTaskSignalFull(OAIHttpRequestWorker *worker);
    void fetchTaskSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task summary);
    void listTaskSignalFull(OAIHttpRequestWorker *worker, OAIListTaskResponse summary);
    void updateTaskSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task summary);

    Q_DECL_DEPRECATED_X("Use createTaskSignalError() instead")
    void createTaskSignalE(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalError(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskSignalError() instead")
    void deleteTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTaskSignalError() instead")
    void fetchTaskSignalE(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskSignalError(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskSignalError() instead")
    void listTaskSignalE(OAIListTaskResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskSignalError(OAIListTaskResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalError() instead")
    void updateTaskSignalE(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalError(OAITaskrouter_v1_workspace_task summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTaskSignalErrorFull() instead")
    void createTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskSignalErrorFull() instead")
    void deleteTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTaskSignalErrorFull() instead")
    void fetchTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskSignalErrorFull() instead")
    void listTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalErrorFull() instead")
    void updateTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
