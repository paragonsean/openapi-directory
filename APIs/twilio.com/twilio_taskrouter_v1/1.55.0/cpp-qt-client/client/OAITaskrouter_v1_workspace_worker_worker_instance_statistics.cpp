/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskrouter_v1_workspace_worker_worker_instance_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskrouter_v1_workspace_worker_worker_instance_statistics::OAITaskrouter_v1_workspace_worker_worker_instance_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskrouter_v1_workspace_worker_worker_instance_statistics::OAITaskrouter_v1_workspace_worker_worker_instance_statistics() {
    this->initializeModel();
}

OAITaskrouter_v1_workspace_worker_worker_instance_statistics::~OAITaskrouter_v1_workspace_worker_worker_instance_statistics() {}

void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_cumulative_isSet = false;
    m_cumulative_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_worker_sid_isSet = false;
    m_worker_sid_isValid = false;

    m_workspace_sid_isSet = false;
    m_workspace_sid_isValid = false;
}

void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_cumulative_isValid = ::OpenAPI::fromJsonValue(m_cumulative, json[QString("cumulative")]);
    m_cumulative_isSet = !json[QString("cumulative")].isNull() && m_cumulative_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_worker_sid_isValid = ::OpenAPI::fromJsonValue(m_worker_sid, json[QString("worker_sid")]);
    m_worker_sid_isSet = !json[QString("worker_sid")].isNull() && m_worker_sid_isValid;

    m_workspace_sid_isValid = ::OpenAPI::fromJsonValue(m_workspace_sid, json[QString("workspace_sid")]);
    m_workspace_sid_isSet = !json[QString("workspace_sid")].isNull() && m_workspace_sid_isValid;
}

QString OAITaskrouter_v1_workspace_worker_worker_instance_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskrouter_v1_workspace_worker_worker_instance_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_cumulative_isSet) {
        obj.insert(QString("cumulative"), ::OpenAPI::toJsonValue(m_cumulative));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_worker_sid_isSet) {
        obj.insert(QString("worker_sid"), ::OpenAPI::toJsonValue(m_worker_sid));
    }
    if (m_workspace_sid_isSet) {
        obj.insert(QString("workspace_sid"), ::OpenAPI::toJsonValue(m_workspace_sid));
    }
    return obj;
}

QString OAITaskrouter_v1_workspace_worker_worker_instance_statistics::getAccountSid() const {
    return m_account_sid;
}
void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAITaskrouter_v1_workspace_worker_worker_instance_statistics::getCumulative() const {
    return m_cumulative;
}
void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::setCumulative(const QJsonValue &cumulative) {
    m_cumulative = cumulative;
    m_cumulative_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_cumulative_Set() const{
    return m_cumulative_isSet;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_cumulative_Valid() const{
    return m_cumulative_isValid;
}

QString OAITaskrouter_v1_workspace_worker_worker_instance_statistics::getUrl() const {
    return m_url;
}
void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITaskrouter_v1_workspace_worker_worker_instance_statistics::getWorkerSid() const {
    return m_worker_sid;
}
void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::setWorkerSid(const QString &worker_sid) {
    m_worker_sid = worker_sid;
    m_worker_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_worker_sid_Set() const{
    return m_worker_sid_isSet;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_worker_sid_Valid() const{
    return m_worker_sid_isValid;
}

QString OAITaskrouter_v1_workspace_worker_worker_instance_statistics::getWorkspaceSid() const {
    return m_workspace_sid;
}
void OAITaskrouter_v1_workspace_worker_worker_instance_statistics::setWorkspaceSid(const QString &workspace_sid) {
    m_workspace_sid = workspace_sid;
    m_workspace_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_workspace_sid_Set() const{
    return m_workspace_sid_isSet;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::is_workspace_sid_Valid() const{
    return m_workspace_sid_isValid;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskrouter_v1_workspace_worker_worker_instance_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
