/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorker_reservation_enum_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorker_reservation_enum_status::OAIWorker_reservation_enum_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorker_reservation_enum_status::OAIWorker_reservation_enum_status() {
    this->initializeModel();
}

OAIWorker_reservation_enum_status::~OAIWorker_reservation_enum_status() {}

void OAIWorker_reservation_enum_status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIWorker_reservation_enum_status::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIWorker_reservation_enum_status::fromJson(QString jsonString) {
    
    if ( jsonString.compare("pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("timeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rescinded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::RESCINDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("wrapping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::WRAPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorker_reservation_enum_status::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIWorker_reservation_enum_status::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIWorker_reservation_enum_status::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIWorker_reservation_enum_status::PENDING:
            val = "pending";
            break;
        case eOAIWorker_reservation_enum_status::ACCEPTED:
            val = "accepted";
            break;
        case eOAIWorker_reservation_enum_status::REJECTED:
            val = "rejected";
            break;
        case eOAIWorker_reservation_enum_status::TIMEOUT:
            val = "timeout";
            break;
        case eOAIWorker_reservation_enum_status::CANCELED:
            val = "canceled";
            break;
        case eOAIWorker_reservation_enum_status::RESCINDED:
            val = "rescinded";
            break;
        case eOAIWorker_reservation_enum_status::WRAPPING:
            val = "wrapping";
            break;
        case eOAIWorker_reservation_enum_status::COMPLETED:
            val = "completed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIWorker_reservation_enum_status::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIWorker_reservation_enum_status::eOAIWorker_reservation_enum_status OAIWorker_reservation_enum_status::getValue() const {
    return m_value;
}

void OAIWorker_reservation_enum_status::setValue(const OAIWorker_reservation_enum_status::eOAIWorker_reservation_enum_status& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIWorker_reservation_enum_status::isSet() const {
    
    return m_value_isSet;
}

bool OAIWorker_reservation_enum_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
