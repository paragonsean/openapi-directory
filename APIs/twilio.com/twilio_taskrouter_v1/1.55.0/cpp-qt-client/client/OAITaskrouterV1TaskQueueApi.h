/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1TaskQueueApi_H
#define OAI_OAITaskrouterV1TaskQueueApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTaskQueueResponse.h"
#include "OAITask_queue_enum_task_order.h"
#include "OAITaskrouter_v1_workspace_task_queue.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1TaskQueueApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1TaskQueueApi(const int timeOut = 0);
    ~OAITaskrouterV1TaskQueueApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  assignment_activity_sid QString [optional]
    * @param[in]  max_reserved_workers qint32 [optional]
    * @param[in]  reservation_activity_sid QString [optional]
    * @param[in]  target_workers QString [optional]
    * @param[in]  task_order OAITask_queue_enum_task_order [optional]
    */
    virtual void createTaskQueue(const QString &workspace_sid, const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &assignment_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_reserved_workers = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &reservation_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_workers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITask_queue_enum_task_order> &task_order = ::OpenAPI::OptionalParam<OAITask_queue_enum_task_order>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteTaskQueue(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTaskQueue(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  evaluate_worker_attributes QString [optional]
    * @param[in]  worker_sid QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTaskQueue(const QString &workspace_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &evaluate_worker_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &worker_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  assignment_activity_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  max_reserved_workers qint32 [optional]
    * @param[in]  reservation_activity_sid QString [optional]
    * @param[in]  target_workers QString [optional]
    * @param[in]  task_order OAITask_queue_enum_task_order [optional]
    */
    virtual void updateTaskQueue(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &assignment_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_reserved_workers = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &reservation_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_workers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITask_queue_enum_task_order> &task_order = ::OpenAPI::OptionalParam<OAITask_queue_enum_task_order>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTaskQueueCallback(OAIHttpRequestWorker *worker);
    void deleteTaskQueueCallback(OAIHttpRequestWorker *worker);
    void fetchTaskQueueCallback(OAIHttpRequestWorker *worker);
    void listTaskQueueCallback(OAIHttpRequestWorker *worker);
    void updateTaskQueueCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTaskQueueSignal(OAITaskrouter_v1_workspace_task_queue summary);
    void deleteTaskQueueSignal();
    void fetchTaskQueueSignal(OAITaskrouter_v1_workspace_task_queue summary);
    void listTaskQueueSignal(OAIListTaskQueueResponse summary);
    void updateTaskQueueSignal(OAITaskrouter_v1_workspace_task_queue summary);


    void createTaskQueueSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task_queue summary);
    void deleteTaskQueueSignalFull(OAIHttpRequestWorker *worker);
    void fetchTaskQueueSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task_queue summary);
    void listTaskQueueSignalFull(OAIHttpRequestWorker *worker, OAIListTaskQueueResponse summary);
    void updateTaskQueueSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task_queue summary);

    Q_DECL_DEPRECATED_X("Use createTaskQueueSignalError() instead")
    void createTaskQueueSignalE(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskQueueSignalError(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskQueueSignalError() instead")
    void deleteTaskQueueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskQueueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTaskQueueSignalError() instead")
    void fetchTaskQueueSignalE(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskQueueSignalError(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskQueueSignalError() instead")
    void listTaskQueueSignalE(OAIListTaskQueueResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskQueueSignalError(OAIListTaskQueueResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskQueueSignalError() instead")
    void updateTaskQueueSignalE(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskQueueSignalError(OAITaskrouter_v1_workspace_task_queue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTaskQueueSignalErrorFull() instead")
    void createTaskQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskQueueSignalErrorFull() instead")
    void deleteTaskQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTaskQueueSignalErrorFull() instead")
    void fetchTaskQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskQueueSignalErrorFull() instead")
    void listTaskQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskQueueSignalErrorFull() instead")
    void updateTaskQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
