/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaskrouter_v1_workspace_task.h
 *
 * 
 */

#ifndef OAITaskrouter_v1_workspace_task_H
#define OAITaskrouter_v1_workspace_task_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAITask_enum_status.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITaskrouter_v1_workspace_task : public OAIObject {
public:
    OAITaskrouter_v1_workspace_task();
    OAITaskrouter_v1_workspace_task(QString json);
    ~OAITaskrouter_v1_workspace_task() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QString getAddons() const;
    void setAddons(const QString &addons);
    bool is_addons_Set() const;
    bool is_addons_Valid() const;

    qint32 getAge() const;
    void setAge(const qint32 &age);
    bool is_age_Set() const;
    bool is_age_Valid() const;

    OAITask_enum_status getAssignmentStatus() const;
    void setAssignmentStatus(const OAITask_enum_status &assignment_status);
    bool is_assignment_status_Set() const;
    bool is_assignment_status_Valid() const;

    QString getAttributes() const;
    void setAttributes(const QString &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    QString getTaskChannelSid() const;
    void setTaskChannelSid(const QString &task_channel_sid);
    bool is_task_channel_sid_Set() const;
    bool is_task_channel_sid_Valid() const;

    QString getTaskChannelUniqueName() const;
    void setTaskChannelUniqueName(const QString &task_channel_unique_name);
    bool is_task_channel_unique_name_Set() const;
    bool is_task_channel_unique_name_Valid() const;

    QDateTime getTaskQueueEnteredDate() const;
    void setTaskQueueEnteredDate(const QDateTime &task_queue_entered_date);
    bool is_task_queue_entered_date_Set() const;
    bool is_task_queue_entered_date_Valid() const;

    QString getTaskQueueFriendlyName() const;
    void setTaskQueueFriendlyName(const QString &task_queue_friendly_name);
    bool is_task_queue_friendly_name_Set() const;
    bool is_task_queue_friendly_name_Valid() const;

    QString getTaskQueueSid() const;
    void setTaskQueueSid(const QString &task_queue_sid);
    bool is_task_queue_sid_Set() const;
    bool is_task_queue_sid_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QDateTime getVirtualStartTime() const;
    void setVirtualStartTime(const QDateTime &virtual_start_time);
    bool is_virtual_start_time_Set() const;
    bool is_virtual_start_time_Valid() const;

    QString getWorkflowFriendlyName() const;
    void setWorkflowFriendlyName(const QString &workflow_friendly_name);
    bool is_workflow_friendly_name_Set() const;
    bool is_workflow_friendly_name_Valid() const;

    QString getWorkflowSid() const;
    void setWorkflowSid(const QString &workflow_sid);
    bool is_workflow_sid_Set() const;
    bool is_workflow_sid_Valid() const;

    QString getWorkspaceSid() const;
    void setWorkspaceSid(const QString &workspace_sid);
    bool is_workspace_sid_Set() const;
    bool is_workspace_sid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QString m_addons;
    bool m_addons_isSet;
    bool m_addons_isValid;

    qint32 m_age;
    bool m_age_isSet;
    bool m_age_isValid;

    OAITask_enum_status m_assignment_status;
    bool m_assignment_status_isSet;
    bool m_assignment_status_isValid;

    QString m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    QString m_task_channel_sid;
    bool m_task_channel_sid_isSet;
    bool m_task_channel_sid_isValid;

    QString m_task_channel_unique_name;
    bool m_task_channel_unique_name_isSet;
    bool m_task_channel_unique_name_isValid;

    QDateTime m_task_queue_entered_date;
    bool m_task_queue_entered_date_isSet;
    bool m_task_queue_entered_date_isValid;

    QString m_task_queue_friendly_name;
    bool m_task_queue_friendly_name_isSet;
    bool m_task_queue_friendly_name_isValid;

    QString m_task_queue_sid;
    bool m_task_queue_sid_isSet;
    bool m_task_queue_sid_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QDateTime m_virtual_start_time;
    bool m_virtual_start_time_isSet;
    bool m_virtual_start_time_isValid;

    QString m_workflow_friendly_name;
    bool m_workflow_friendly_name_isSet;
    bool m_workflow_friendly_name_isValid;

    QString m_workflow_sid;
    bool m_workflow_sid_isSet;
    bool m_workflow_sid_isValid;

    QString m_workspace_sid;
    bool m_workspace_sid_isSet;
    bool m_workspace_sid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaskrouter_v1_workspace_task)

#endif // OAITaskrouter_v1_workspace_task_H
