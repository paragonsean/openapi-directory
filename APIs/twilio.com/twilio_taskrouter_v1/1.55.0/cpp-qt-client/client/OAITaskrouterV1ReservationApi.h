/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1ReservationApi_H
#define OAI_OAITaskrouterV1ReservationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTaskReservationResponse.h"
#include "OAIListWorkerReservationResponse.h"
#include "OAITask_reservation_enum_call_status.h"
#include "OAITask_reservation_enum_conference_event.h"
#include "OAITask_reservation_enum_status.h"
#include "OAITask_reservation_enum_supervisor_mode.h"
#include "OAITaskrouter_v1_workspace_task_task_reservation.h"
#include "OAITaskrouter_v1_workspace_worker_worker_reservation.h"
#include "OAIWorker_reservation_enum_call_status.h"
#include "OAIWorker_reservation_enum_conference_event.h"
#include "OAIWorker_reservation_enum_status.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1ReservationApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1ReservationApi(const int timeOut = 0);
    ~OAITaskrouterV1ReservationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  task_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTaskReservation(const QString &workspace_sid, const QString &task_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  task_sid QString [required]
    * @param[in]  reservation_status OAITask_reservation_enum_status [optional]
    * @param[in]  worker_sid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTaskReservation(const QString &workspace_sid, const QString &task_sid, const ::OpenAPI::OptionalParam<OAITask_reservation_enum_status> &reservation_status = ::OpenAPI::OptionalParam<OAITask_reservation_enum_status>(), const ::OpenAPI::OptionalParam<QString> &worker_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  reservation_status OAIWorker_reservation_enum_status [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status> &reservation_status = ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  task_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  beep QString [optional]
    * @param[in]  beep_on_customer_entrance bool [optional]
    * @param[in]  call_accept bool [optional]
    * @param[in]  call_from QString [optional]
    * @param[in]  call_record QString [optional]
    * @param[in]  call_status_callback_url QString [optional]
    * @param[in]  call_timeout qint32 [optional]
    * @param[in]  call_to QString [optional]
    * @param[in]  call_url QString [optional]
    * @param[in]  conference_record QString [optional]
    * @param[in]  conference_recording_status_callback QString [optional]
    * @param[in]  conference_recording_status_callback_method QString [optional]
    * @param[in]  conference_status_callback QString [optional]
    * @param[in]  conference_status_callback_event QList<OAITask_reservation_enum_conference_event> [optional]
    * @param[in]  conference_status_callback_method QString [optional]
    * @param[in]  conference_trim QString [optional]
    * @param[in]  dequeue_from QString [optional]
    * @param[in]  dequeue_post_work_activity_sid QString [optional]
    * @param[in]  dequeue_record QString [optional]
    * @param[in]  dequeue_status_callback_event QList<QString> [optional]
    * @param[in]  dequeue_status_callback_url QString [optional]
    * @param[in]  dequeue_timeout qint32 [optional]
    * @param[in]  dequeue_to QString [optional]
    * @param[in]  early_media bool [optional]
    * @param[in]  end_conference_on_customer_exit bool [optional]
    * @param[in]  end_conference_on_exit bool [optional]
    * @param[in]  from QString [optional]
    * @param[in]  instruction QString [optional]
    * @param[in]  jitter_buffer_size QString [optional]
    * @param[in]  max_participants qint32 [optional]
    * @param[in]  muted bool [optional]
    * @param[in]  post_work_activity_sid QString [optional]
    * @param[in]  record bool [optional]
    * @param[in]  recording_channels QString [optional]
    * @param[in]  recording_status_callback QString [optional]
    * @param[in]  recording_status_callback_method QString [optional]
    * @param[in]  redirect_accept bool [optional]
    * @param[in]  redirect_call_sid QString [optional]
    * @param[in]  redirect_url QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  reservation_status OAITask_reservation_enum_status [optional]
    * @param[in]  sip_auth_password QString [optional]
    * @param[in]  sip_auth_username QString [optional]
    * @param[in]  start_conference_on_enter bool [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_event QList<OAITask_reservation_enum_call_status> [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  supervisor QString [optional]
    * @param[in]  supervisor_mode OAITask_reservation_enum_supervisor_mode [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  to QString [optional]
    * @param[in]  wait_method QString [optional]
    * @param[in]  wait_url QString [optional]
    * @param[in]  worker_activity_sid QString [optional]
    */
    virtual void updateTaskReservation(const QString &workspace_sid, const QString &task_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &beep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &beep_on_customer_entrance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &call_accept = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &call_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &call_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &call_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_conference_event>> &conference_status_callback_event = ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_conference_event>>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_post_work_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &dequeue_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &dequeue_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &dequeue_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &dequeue_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &early_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_customer_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instruction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_participants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &post_work_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &record = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recording_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &redirect_accept = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &redirect_call_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITask_reservation_enum_status> &reservation_status = ::OpenAPI::OptionalParam<OAITask_reservation_enum_status>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_call_status>> &status_callback_event = ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_call_status>>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &supervisor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITask_reservation_enum_supervisor_mode> &supervisor_mode = ::OpenAPI::OptionalParam<OAITask_reservation_enum_supervisor_mode>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &worker_activity_sid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  worker_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  beep QString [optional]
    * @param[in]  beep_on_customer_entrance bool [optional]
    * @param[in]  call_accept bool [optional]
    * @param[in]  call_from QString [optional]
    * @param[in]  call_record QString [optional]
    * @param[in]  call_status_callback_url QString [optional]
    * @param[in]  call_timeout qint32 [optional]
    * @param[in]  call_to QString [optional]
    * @param[in]  call_url QString [optional]
    * @param[in]  conference_record QString [optional]
    * @param[in]  conference_recording_status_callback QString [optional]
    * @param[in]  conference_recording_status_callback_method QString [optional]
    * @param[in]  conference_status_callback QString [optional]
    * @param[in]  conference_status_callback_event QList<OAIWorker_reservation_enum_conference_event> [optional]
    * @param[in]  conference_status_callback_method QString [optional]
    * @param[in]  conference_trim QString [optional]
    * @param[in]  dequeue_from QString [optional]
    * @param[in]  dequeue_post_work_activity_sid QString [optional]
    * @param[in]  dequeue_record QString [optional]
    * @param[in]  dequeue_status_callback_event QList<QString> [optional]
    * @param[in]  dequeue_status_callback_url QString [optional]
    * @param[in]  dequeue_timeout qint32 [optional]
    * @param[in]  dequeue_to QString [optional]
    * @param[in]  early_media bool [optional]
    * @param[in]  end_conference_on_customer_exit bool [optional]
    * @param[in]  end_conference_on_exit bool [optional]
    * @param[in]  from QString [optional]
    * @param[in]  instruction QString [optional]
    * @param[in]  jitter_buffer_size QString [optional]
    * @param[in]  max_participants qint32 [optional]
    * @param[in]  muted bool [optional]
    * @param[in]  post_work_activity_sid QString [optional]
    * @param[in]  record bool [optional]
    * @param[in]  recording_channels QString [optional]
    * @param[in]  recording_status_callback QString [optional]
    * @param[in]  recording_status_callback_method QString [optional]
    * @param[in]  redirect_accept bool [optional]
    * @param[in]  redirect_call_sid QString [optional]
    * @param[in]  redirect_url QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  reservation_status OAIWorker_reservation_enum_status [optional]
    * @param[in]  sip_auth_password QString [optional]
    * @param[in]  sip_auth_username QString [optional]
    * @param[in]  start_conference_on_enter bool [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_event QList<OAIWorker_reservation_enum_call_status> [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  to QString [optional]
    * @param[in]  wait_method QString [optional]
    * @param[in]  wait_url QString [optional]
    * @param[in]  worker_activity_sid QString [optional]
    */
    virtual void updateWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &beep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &beep_on_customer_entrance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &call_accept = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &call_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &call_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &call_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_conference_event>> &conference_status_callback_event = ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_conference_event>>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_post_work_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dequeue_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &dequeue_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &dequeue_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &dequeue_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &dequeue_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &early_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_customer_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instruction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_participants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &post_work_activity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &record = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recording_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &redirect_accept = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &redirect_call_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status> &reservation_status = ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_call_status>> &status_callback_event = ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_call_status>>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &worker_activity_sid = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchTaskReservationCallback(OAIHttpRequestWorker *worker);
    void fetchWorkerReservationCallback(OAIHttpRequestWorker *worker);
    void listTaskReservationCallback(OAIHttpRequestWorker *worker);
    void listWorkerReservationCallback(OAIHttpRequestWorker *worker);
    void updateTaskReservationCallback(OAIHttpRequestWorker *worker);
    void updateWorkerReservationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchTaskReservationSignal(OAITaskrouter_v1_workspace_task_task_reservation summary);
    void fetchWorkerReservationSignal(OAITaskrouter_v1_workspace_worker_worker_reservation summary);
    void listTaskReservationSignal(OAIListTaskReservationResponse summary);
    void listWorkerReservationSignal(OAIListWorkerReservationResponse summary);
    void updateTaskReservationSignal(OAITaskrouter_v1_workspace_task_task_reservation summary);
    void updateWorkerReservationSignal(OAITaskrouter_v1_workspace_worker_worker_reservation summary);


    void fetchTaskReservationSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task_task_reservation summary);
    void fetchWorkerReservationSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker_worker_reservation summary);
    void listTaskReservationSignalFull(OAIHttpRequestWorker *worker, OAIListTaskReservationResponse summary);
    void listWorkerReservationSignalFull(OAIHttpRequestWorker *worker, OAIListWorkerReservationResponse summary);
    void updateTaskReservationSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_task_task_reservation summary);
    void updateWorkerReservationSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_worker_worker_reservation summary);

    Q_DECL_DEPRECATED_X("Use fetchTaskReservationSignalError() instead")
    void fetchTaskReservationSignalE(OAITaskrouter_v1_workspace_task_task_reservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskReservationSignalError(OAITaskrouter_v1_workspace_task_task_reservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkerReservationSignalError() instead")
    void fetchWorkerReservationSignalE(OAITaskrouter_v1_workspace_worker_worker_reservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerReservationSignalError(OAITaskrouter_v1_workspace_worker_worker_reservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskReservationSignalError() instead")
    void listTaskReservationSignalE(OAIListTaskReservationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskReservationSignalError(OAIListTaskReservationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerReservationSignalError() instead")
    void listWorkerReservationSignalE(OAIListWorkerReservationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerReservationSignalError(OAIListWorkerReservationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskReservationSignalError() instead")
    void updateTaskReservationSignalE(OAITaskrouter_v1_workspace_task_task_reservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskReservationSignalError(OAITaskrouter_v1_workspace_task_task_reservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerReservationSignalError() instead")
    void updateWorkerReservationSignalE(OAITaskrouter_v1_workspace_worker_worker_reservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerReservationSignalError(OAITaskrouter_v1_workspace_worker_worker_reservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchTaskReservationSignalErrorFull() instead")
    void fetchTaskReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTaskReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkerReservationSignalErrorFull() instead")
    void fetchWorkerReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkerReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTaskReservationSignalErrorFull() instead")
    void listTaskReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTaskReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkerReservationSignalErrorFull() instead")
    void listWorkerReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkerReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskReservationSignalErrorFull() instead")
    void updateTaskReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkerReservationSignalErrorFull() instead")
    void updateWorkerReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkerReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
