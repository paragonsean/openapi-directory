/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskrouter_v1_workspace_task.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskrouter_v1_workspace_task::OAITaskrouter_v1_workspace_task(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskrouter_v1_workspace_task::OAITaskrouter_v1_workspace_task() {
    this->initializeModel();
}

OAITaskrouter_v1_workspace_task::~OAITaskrouter_v1_workspace_task() {}

void OAITaskrouter_v1_workspace_task::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_addons_isSet = false;
    m_addons_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_assignment_status_isSet = false;
    m_assignment_status_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_task_channel_sid_isSet = false;
    m_task_channel_sid_isValid = false;

    m_task_channel_unique_name_isSet = false;
    m_task_channel_unique_name_isValid = false;

    m_task_queue_entered_date_isSet = false;
    m_task_queue_entered_date_isValid = false;

    m_task_queue_friendly_name_isSet = false;
    m_task_queue_friendly_name_isValid = false;

    m_task_queue_sid_isSet = false;
    m_task_queue_sid_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_virtual_start_time_isSet = false;
    m_virtual_start_time_isValid = false;

    m_workflow_friendly_name_isSet = false;
    m_workflow_friendly_name_isValid = false;

    m_workflow_sid_isSet = false;
    m_workflow_sid_isValid = false;

    m_workspace_sid_isSet = false;
    m_workspace_sid_isValid = false;
}

void OAITaskrouter_v1_workspace_task::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskrouter_v1_workspace_task::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_addons_isValid = ::OpenAPI::fromJsonValue(m_addons, json[QString("addons")]);
    m_addons_isSet = !json[QString("addons")].isNull() && m_addons_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_assignment_status_isValid = ::OpenAPI::fromJsonValue(m_assignment_status, json[QString("assignment_status")]);
    m_assignment_status_isSet = !json[QString("assignment_status")].isNull() && m_assignment_status_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_task_channel_sid_isValid = ::OpenAPI::fromJsonValue(m_task_channel_sid, json[QString("task_channel_sid")]);
    m_task_channel_sid_isSet = !json[QString("task_channel_sid")].isNull() && m_task_channel_sid_isValid;

    m_task_channel_unique_name_isValid = ::OpenAPI::fromJsonValue(m_task_channel_unique_name, json[QString("task_channel_unique_name")]);
    m_task_channel_unique_name_isSet = !json[QString("task_channel_unique_name")].isNull() && m_task_channel_unique_name_isValid;

    m_task_queue_entered_date_isValid = ::OpenAPI::fromJsonValue(m_task_queue_entered_date, json[QString("task_queue_entered_date")]);
    m_task_queue_entered_date_isSet = !json[QString("task_queue_entered_date")].isNull() && m_task_queue_entered_date_isValid;

    m_task_queue_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_task_queue_friendly_name, json[QString("task_queue_friendly_name")]);
    m_task_queue_friendly_name_isSet = !json[QString("task_queue_friendly_name")].isNull() && m_task_queue_friendly_name_isValid;

    m_task_queue_sid_isValid = ::OpenAPI::fromJsonValue(m_task_queue_sid, json[QString("task_queue_sid")]);
    m_task_queue_sid_isSet = !json[QString("task_queue_sid")].isNull() && m_task_queue_sid_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_virtual_start_time_isValid = ::OpenAPI::fromJsonValue(m_virtual_start_time, json[QString("virtual_start_time")]);
    m_virtual_start_time_isSet = !json[QString("virtual_start_time")].isNull() && m_virtual_start_time_isValid;

    m_workflow_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_workflow_friendly_name, json[QString("workflow_friendly_name")]);
    m_workflow_friendly_name_isSet = !json[QString("workflow_friendly_name")].isNull() && m_workflow_friendly_name_isValid;

    m_workflow_sid_isValid = ::OpenAPI::fromJsonValue(m_workflow_sid, json[QString("workflow_sid")]);
    m_workflow_sid_isSet = !json[QString("workflow_sid")].isNull() && m_workflow_sid_isValid;

    m_workspace_sid_isValid = ::OpenAPI::fromJsonValue(m_workspace_sid, json[QString("workspace_sid")]);
    m_workspace_sid_isSet = !json[QString("workspace_sid")].isNull() && m_workspace_sid_isValid;
}

QString OAITaskrouter_v1_workspace_task::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskrouter_v1_workspace_task::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_addons_isSet) {
        obj.insert(QString("addons"), ::OpenAPI::toJsonValue(m_addons));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_assignment_status.isSet()) {
        obj.insert(QString("assignment_status"), ::OpenAPI::toJsonValue(m_assignment_status));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_task_channel_sid_isSet) {
        obj.insert(QString("task_channel_sid"), ::OpenAPI::toJsonValue(m_task_channel_sid));
    }
    if (m_task_channel_unique_name_isSet) {
        obj.insert(QString("task_channel_unique_name"), ::OpenAPI::toJsonValue(m_task_channel_unique_name));
    }
    if (m_task_queue_entered_date_isSet) {
        obj.insert(QString("task_queue_entered_date"), ::OpenAPI::toJsonValue(m_task_queue_entered_date));
    }
    if (m_task_queue_friendly_name_isSet) {
        obj.insert(QString("task_queue_friendly_name"), ::OpenAPI::toJsonValue(m_task_queue_friendly_name));
    }
    if (m_task_queue_sid_isSet) {
        obj.insert(QString("task_queue_sid"), ::OpenAPI::toJsonValue(m_task_queue_sid));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_virtual_start_time_isSet) {
        obj.insert(QString("virtual_start_time"), ::OpenAPI::toJsonValue(m_virtual_start_time));
    }
    if (m_workflow_friendly_name_isSet) {
        obj.insert(QString("workflow_friendly_name"), ::OpenAPI::toJsonValue(m_workflow_friendly_name));
    }
    if (m_workflow_sid_isSet) {
        obj.insert(QString("workflow_sid"), ::OpenAPI::toJsonValue(m_workflow_sid));
    }
    if (m_workspace_sid_isSet) {
        obj.insert(QString("workspace_sid"), ::OpenAPI::toJsonValue(m_workspace_sid));
    }
    return obj;
}

QString OAITaskrouter_v1_workspace_task::getAccountSid() const {
    return m_account_sid;
}
void OAITaskrouter_v1_workspace_task::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAITaskrouter_v1_workspace_task::getAddons() const {
    return m_addons;
}
void OAITaskrouter_v1_workspace_task::setAddons(const QString &addons) {
    m_addons = addons;
    m_addons_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_addons_Set() const{
    return m_addons_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_addons_Valid() const{
    return m_addons_isValid;
}

qint32 OAITaskrouter_v1_workspace_task::getAge() const {
    return m_age;
}
void OAITaskrouter_v1_workspace_task::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_age_Set() const{
    return m_age_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_age_Valid() const{
    return m_age_isValid;
}

OAITask_enum_status OAITaskrouter_v1_workspace_task::getAssignmentStatus() const {
    return m_assignment_status;
}
void OAITaskrouter_v1_workspace_task::setAssignmentStatus(const OAITask_enum_status &assignment_status) {
    m_assignment_status = assignment_status;
    m_assignment_status_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_assignment_status_Set() const{
    return m_assignment_status_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_assignment_status_Valid() const{
    return m_assignment_status_isValid;
}

QString OAITaskrouter_v1_workspace_task::getAttributes() const {
    return m_attributes;
}
void OAITaskrouter_v1_workspace_task::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QDateTime OAITaskrouter_v1_workspace_task::getDateCreated() const {
    return m_date_created;
}
void OAITaskrouter_v1_workspace_task::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITaskrouter_v1_workspace_task::getDateUpdated() const {
    return m_date_updated;
}
void OAITaskrouter_v1_workspace_task::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

OAIObject OAITaskrouter_v1_workspace_task::getLinks() const {
    return m_links;
}
void OAITaskrouter_v1_workspace_task::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_links_Set() const{
    return m_links_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAITaskrouter_v1_workspace_task::getPriority() const {
    return m_priority;
}
void OAITaskrouter_v1_workspace_task::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAITaskrouter_v1_workspace_task::getReason() const {
    return m_reason;
}
void OAITaskrouter_v1_workspace_task::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAITaskrouter_v1_workspace_task::getSid() const {
    return m_sid;
}
void OAITaskrouter_v1_workspace_task::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAITaskrouter_v1_workspace_task::getTaskChannelSid() const {
    return m_task_channel_sid;
}
void OAITaskrouter_v1_workspace_task::setTaskChannelSid(const QString &task_channel_sid) {
    m_task_channel_sid = task_channel_sid;
    m_task_channel_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_task_channel_sid_Set() const{
    return m_task_channel_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_task_channel_sid_Valid() const{
    return m_task_channel_sid_isValid;
}

QString OAITaskrouter_v1_workspace_task::getTaskChannelUniqueName() const {
    return m_task_channel_unique_name;
}
void OAITaskrouter_v1_workspace_task::setTaskChannelUniqueName(const QString &task_channel_unique_name) {
    m_task_channel_unique_name = task_channel_unique_name;
    m_task_channel_unique_name_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_task_channel_unique_name_Set() const{
    return m_task_channel_unique_name_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_task_channel_unique_name_Valid() const{
    return m_task_channel_unique_name_isValid;
}

QDateTime OAITaskrouter_v1_workspace_task::getTaskQueueEnteredDate() const {
    return m_task_queue_entered_date;
}
void OAITaskrouter_v1_workspace_task::setTaskQueueEnteredDate(const QDateTime &task_queue_entered_date) {
    m_task_queue_entered_date = task_queue_entered_date;
    m_task_queue_entered_date_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_entered_date_Set() const{
    return m_task_queue_entered_date_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_entered_date_Valid() const{
    return m_task_queue_entered_date_isValid;
}

QString OAITaskrouter_v1_workspace_task::getTaskQueueFriendlyName() const {
    return m_task_queue_friendly_name;
}
void OAITaskrouter_v1_workspace_task::setTaskQueueFriendlyName(const QString &task_queue_friendly_name) {
    m_task_queue_friendly_name = task_queue_friendly_name;
    m_task_queue_friendly_name_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_friendly_name_Set() const{
    return m_task_queue_friendly_name_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_friendly_name_Valid() const{
    return m_task_queue_friendly_name_isValid;
}

QString OAITaskrouter_v1_workspace_task::getTaskQueueSid() const {
    return m_task_queue_sid;
}
void OAITaskrouter_v1_workspace_task::setTaskQueueSid(const QString &task_queue_sid) {
    m_task_queue_sid = task_queue_sid;
    m_task_queue_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_sid_Set() const{
    return m_task_queue_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_task_queue_sid_Valid() const{
    return m_task_queue_sid_isValid;
}

qint32 OAITaskrouter_v1_workspace_task::getTimeout() const {
    return m_timeout;
}
void OAITaskrouter_v1_workspace_task::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAITaskrouter_v1_workspace_task::getUrl() const {
    return m_url;
}
void OAITaskrouter_v1_workspace_task::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_url_Valid() const{
    return m_url_isValid;
}

QDateTime OAITaskrouter_v1_workspace_task::getVirtualStartTime() const {
    return m_virtual_start_time;
}
void OAITaskrouter_v1_workspace_task::setVirtualStartTime(const QDateTime &virtual_start_time) {
    m_virtual_start_time = virtual_start_time;
    m_virtual_start_time_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_virtual_start_time_Set() const{
    return m_virtual_start_time_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_virtual_start_time_Valid() const{
    return m_virtual_start_time_isValid;
}

QString OAITaskrouter_v1_workspace_task::getWorkflowFriendlyName() const {
    return m_workflow_friendly_name;
}
void OAITaskrouter_v1_workspace_task::setWorkflowFriendlyName(const QString &workflow_friendly_name) {
    m_workflow_friendly_name = workflow_friendly_name;
    m_workflow_friendly_name_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_workflow_friendly_name_Set() const{
    return m_workflow_friendly_name_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_workflow_friendly_name_Valid() const{
    return m_workflow_friendly_name_isValid;
}

QString OAITaskrouter_v1_workspace_task::getWorkflowSid() const {
    return m_workflow_sid;
}
void OAITaskrouter_v1_workspace_task::setWorkflowSid(const QString &workflow_sid) {
    m_workflow_sid = workflow_sid;
    m_workflow_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_workflow_sid_Set() const{
    return m_workflow_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_workflow_sid_Valid() const{
    return m_workflow_sid_isValid;
}

QString OAITaskrouter_v1_workspace_task::getWorkspaceSid() const {
    return m_workspace_sid;
}
void OAITaskrouter_v1_workspace_task::setWorkspaceSid(const QString &workspace_sid) {
    m_workspace_sid = workspace_sid;
    m_workspace_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_task::is_workspace_sid_Set() const{
    return m_workspace_sid_isSet;
}

bool OAITaskrouter_v1_workspace_task::is_workspace_sid_Valid() const{
    return m_workspace_sid_isValid;
}

bool OAITaskrouter_v1_workspace_task::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_channel_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_channel_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_queue_entered_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_queue_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_queue_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskrouter_v1_workspace_task::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
