/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics() {
    this->initializeModel();
}

OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::~OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics() {}

void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_activity_durations_isSet = false;
    m_activity_durations_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_reservations_accepted_isSet = false;
    m_reservations_accepted_isValid = false;

    m_reservations_canceled_isSet = false;
    m_reservations_canceled_isValid = false;

    m_reservations_created_isSet = false;
    m_reservations_created_isValid = false;

    m_reservations_rejected_isSet = false;
    m_reservations_rejected_isValid = false;

    m_reservations_rescinded_isSet = false;
    m_reservations_rescinded_isValid = false;

    m_reservations_timed_out_isSet = false;
    m_reservations_timed_out_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workspace_sid_isSet = false;
    m_workspace_sid_isValid = false;
}

void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_activity_durations_isValid = ::OpenAPI::fromJsonValue(m_activity_durations, json[QString("activity_durations")]);
    m_activity_durations_isSet = !json[QString("activity_durations")].isNull() && m_activity_durations_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_reservations_accepted_isValid = ::OpenAPI::fromJsonValue(m_reservations_accepted, json[QString("reservations_accepted")]);
    m_reservations_accepted_isSet = !json[QString("reservations_accepted")].isNull() && m_reservations_accepted_isValid;

    m_reservations_canceled_isValid = ::OpenAPI::fromJsonValue(m_reservations_canceled, json[QString("reservations_canceled")]);
    m_reservations_canceled_isSet = !json[QString("reservations_canceled")].isNull() && m_reservations_canceled_isValid;

    m_reservations_created_isValid = ::OpenAPI::fromJsonValue(m_reservations_created, json[QString("reservations_created")]);
    m_reservations_created_isSet = !json[QString("reservations_created")].isNull() && m_reservations_created_isValid;

    m_reservations_rejected_isValid = ::OpenAPI::fromJsonValue(m_reservations_rejected, json[QString("reservations_rejected")]);
    m_reservations_rejected_isSet = !json[QString("reservations_rejected")].isNull() && m_reservations_rejected_isValid;

    m_reservations_rescinded_isValid = ::OpenAPI::fromJsonValue(m_reservations_rescinded, json[QString("reservations_rescinded")]);
    m_reservations_rescinded_isSet = !json[QString("reservations_rescinded")].isNull() && m_reservations_rescinded_isValid;

    m_reservations_timed_out_isValid = ::OpenAPI::fromJsonValue(m_reservations_timed_out, json[QString("reservations_timed_out")]);
    m_reservations_timed_out_isSet = !json[QString("reservations_timed_out")].isNull() && m_reservations_timed_out_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workspace_sid_isValid = ::OpenAPI::fromJsonValue(m_workspace_sid, json[QString("workspace_sid")]);
    m_workspace_sid_isSet = !json[QString("workspace_sid")].isNull() && m_workspace_sid_isValid;
}

QString OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_activity_durations.size() > 0) {
        obj.insert(QString("activity_durations"), ::OpenAPI::toJsonValue(m_activity_durations));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_reservations_accepted_isSet) {
        obj.insert(QString("reservations_accepted"), ::OpenAPI::toJsonValue(m_reservations_accepted));
    }
    if (m_reservations_canceled_isSet) {
        obj.insert(QString("reservations_canceled"), ::OpenAPI::toJsonValue(m_reservations_canceled));
    }
    if (m_reservations_created_isSet) {
        obj.insert(QString("reservations_created"), ::OpenAPI::toJsonValue(m_reservations_created));
    }
    if (m_reservations_rejected_isSet) {
        obj.insert(QString("reservations_rejected"), ::OpenAPI::toJsonValue(m_reservations_rejected));
    }
    if (m_reservations_rescinded_isSet) {
        obj.insert(QString("reservations_rescinded"), ::OpenAPI::toJsonValue(m_reservations_rescinded));
    }
    if (m_reservations_timed_out_isSet) {
        obj.insert(QString("reservations_timed_out"), ::OpenAPI::toJsonValue(m_reservations_timed_out));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workspace_sid_isSet) {
        obj.insert(QString("workspace_sid"), ::OpenAPI::toJsonValue(m_workspace_sid));
    }
    return obj;
}

QString OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getAccountSid() const {
    return m_account_sid;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QJsonValue> OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getActivityDurations() const {
    return m_activity_durations;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setActivityDurations(const QList<QJsonValue> &activity_durations) {
    m_activity_durations = activity_durations;
    m_activity_durations_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_activity_durations_Set() const{
    return m_activity_durations_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_activity_durations_Valid() const{
    return m_activity_durations_isValid;
}

QDateTime OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getEndTime() const {
    return m_end_time;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsAccepted() const {
    return m_reservations_accepted;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsAccepted(const qint32 &reservations_accepted) {
    m_reservations_accepted = reservations_accepted;
    m_reservations_accepted_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_accepted_Set() const{
    return m_reservations_accepted_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_accepted_Valid() const{
    return m_reservations_accepted_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsCanceled() const {
    return m_reservations_canceled;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsCanceled(const qint32 &reservations_canceled) {
    m_reservations_canceled = reservations_canceled;
    m_reservations_canceled_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_canceled_Set() const{
    return m_reservations_canceled_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_canceled_Valid() const{
    return m_reservations_canceled_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsCreated() const {
    return m_reservations_created;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsCreated(const qint32 &reservations_created) {
    m_reservations_created = reservations_created;
    m_reservations_created_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_created_Set() const{
    return m_reservations_created_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_created_Valid() const{
    return m_reservations_created_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsRejected() const {
    return m_reservations_rejected;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsRejected(const qint32 &reservations_rejected) {
    m_reservations_rejected = reservations_rejected;
    m_reservations_rejected_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_rejected_Set() const{
    return m_reservations_rejected_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_rejected_Valid() const{
    return m_reservations_rejected_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsRescinded() const {
    return m_reservations_rescinded;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsRescinded(const qint32 &reservations_rescinded) {
    m_reservations_rescinded = reservations_rescinded;
    m_reservations_rescinded_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_rescinded_Set() const{
    return m_reservations_rescinded_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_rescinded_Valid() const{
    return m_reservations_rescinded_isValid;
}

qint32 OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getReservationsTimedOut() const {
    return m_reservations_timed_out;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setReservationsTimedOut(const qint32 &reservations_timed_out) {
    m_reservations_timed_out = reservations_timed_out;
    m_reservations_timed_out_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_timed_out_Set() const{
    return m_reservations_timed_out_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_reservations_timed_out_Valid() const{
    return m_reservations_timed_out_isValid;
}

QDateTime OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getStartTime() const {
    return m_start_time;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getUrl() const {
    return m_url;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_url_Set() const{
    return m_url_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_url_Valid() const{
    return m_url_isValid;
}

QString OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::getWorkspaceSid() const {
    return m_workspace_sid;
}
void OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::setWorkspaceSid(const QString &workspace_sid) {
    m_workspace_sid = workspace_sid;
    m_workspace_sid_isSet = true;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_workspace_sid_Set() const{
    return m_workspace_sid_isSet;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::is_workspace_sid_Valid() const{
    return m_workspace_sid_isValid;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_durations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_rejected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_rescinded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations_timed_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskrouter_v1_workspace_worker_workers_cumulative_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
