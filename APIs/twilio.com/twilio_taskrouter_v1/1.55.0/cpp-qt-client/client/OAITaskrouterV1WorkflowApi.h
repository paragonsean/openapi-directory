/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1WorkflowApi_H
#define OAI_OAITaskrouterV1WorkflowApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWorkflowResponse.h"
#include "OAITaskrouter_v1_workspace_workflow.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1WorkflowApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1WorkflowApi(const int timeOut = 0);
    ~OAITaskrouterV1WorkflowApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  configuration QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  assignment_callback_url QString [optional]
    * @param[in]  fallback_assignment_callback_url QString [optional]
    * @param[in]  task_reservation_timeout qint32 [optional]
    */
    virtual void createWorkflow(const QString &workspace_sid, const QString &configuration, const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &assignment_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fallback_assignment_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &task_reservation_timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteWorkflow(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchWorkflow(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listWorkflow(const QString &workspace_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  assignment_callback_url QString [optional]
    * @param[in]  configuration QString [optional]
    * @param[in]  fallback_assignment_callback_url QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  re_evaluate_tasks QString [optional]
    * @param[in]  task_reservation_timeout qint32 [optional]
    */
    virtual void updateWorkflow(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &assignment_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fallback_assignment_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &re_evaluate_tasks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &task_reservation_timeout = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWorkflowCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowCallback(OAIHttpRequestWorker *worker);
    void fetchWorkflowCallback(OAIHttpRequestWorker *worker);
    void listWorkflowCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWorkflowSignal(OAITaskrouter_v1_workspace_workflow summary);
    void deleteWorkflowSignal();
    void fetchWorkflowSignal(OAITaskrouter_v1_workspace_workflow summary);
    void listWorkflowSignal(OAIListWorkflowResponse summary);
    void updateWorkflowSignal(OAITaskrouter_v1_workspace_workflow summary);


    void createWorkflowSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_workflow summary);
    void deleteWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void fetchWorkflowSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_workflow summary);
    void listWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIListWorkflowResponse summary);
    void updateWorkflowSignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_workflow summary);

    Q_DECL_DEPRECATED_X("Use createWorkflowSignalError() instead")
    void createWorkflowSignalE(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSignalError(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSignalError() instead")
    void deleteWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkflowSignalError() instead")
    void fetchWorkflowSignalE(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkflowSignalError(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkflowSignalError() instead")
    void listWorkflowSignalE(OAIListWorkflowResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkflowSignalError(OAIListWorkflowResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSignalError() instead")
    void updateWorkflowSignalE(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSignalError(OAITaskrouter_v1_workspace_workflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWorkflowSignalErrorFull() instead")
    void createWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSignalErrorFull() instead")
    void deleteWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchWorkflowSignalErrorFull() instead")
    void fetchWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWorkflowSignalErrorFull() instead")
    void listWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSignalErrorFull() instead")
    void updateWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
