/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaskrouter_v1_workspace_workspace_cumulative_statistics.h
 *
 * 
 */

#ifndef OAITaskrouter_v1_workspace_workspace_cumulative_statistics_H
#define OAITaskrouter_v1_workspace_workspace_cumulative_statistics_H

#include <QJsonObject>

#include <QDateTime>
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITaskrouter_v1_workspace_workspace_cumulative_statistics : public OAIObject {
public:
    OAITaskrouter_v1_workspace_workspace_cumulative_statistics();
    OAITaskrouter_v1_workspace_workspace_cumulative_statistics(QString json);
    ~OAITaskrouter_v1_workspace_workspace_cumulative_statistics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    qint32 getAvgTaskAcceptanceTime() const;
    void setAvgTaskAcceptanceTime(const qint32 &avg_task_acceptance_time);
    bool is_avg_task_acceptance_time_Set() const;
    bool is_avg_task_acceptance_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getReservationsAccepted() const;
    void setReservationsAccepted(const qint32 &reservations_accepted);
    bool is_reservations_accepted_Set() const;
    bool is_reservations_accepted_Valid() const;

    qint32 getReservationsCanceled() const;
    void setReservationsCanceled(const qint32 &reservations_canceled);
    bool is_reservations_canceled_Set() const;
    bool is_reservations_canceled_Valid() const;

    qint32 getReservationsCreated() const;
    void setReservationsCreated(const qint32 &reservations_created);
    bool is_reservations_created_Set() const;
    bool is_reservations_created_Valid() const;

    qint32 getReservationsRejected() const;
    void setReservationsRejected(const qint32 &reservations_rejected);
    bool is_reservations_rejected_Set() const;
    bool is_reservations_rejected_Valid() const;

    qint32 getReservationsRescinded() const;
    void setReservationsRescinded(const qint32 &reservations_rescinded);
    bool is_reservations_rescinded_Set() const;
    bool is_reservations_rescinded_Valid() const;

    qint32 getReservationsTimedOut() const;
    void setReservationsTimedOut(const qint32 &reservations_timed_out);
    bool is_reservations_timed_out_Set() const;
    bool is_reservations_timed_out_Valid() const;

    QJsonValue getSplitByWaitTime() const;
    void setSplitByWaitTime(const QJsonValue &split_by_wait_time);
    bool is_split_by_wait_time_Set() const;
    bool is_split_by_wait_time_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getTasksCanceled() const;
    void setTasksCanceled(const qint32 &tasks_canceled);
    bool is_tasks_canceled_Set() const;
    bool is_tasks_canceled_Valid() const;

    qint32 getTasksCompleted() const;
    void setTasksCompleted(const qint32 &tasks_completed);
    bool is_tasks_completed_Set() const;
    bool is_tasks_completed_Valid() const;

    qint32 getTasksCreated() const;
    void setTasksCreated(const qint32 &tasks_created);
    bool is_tasks_created_Set() const;
    bool is_tasks_created_Valid() const;

    qint32 getTasksDeleted() const;
    void setTasksDeleted(const qint32 &tasks_deleted);
    bool is_tasks_deleted_Set() const;
    bool is_tasks_deleted_Valid() const;

    qint32 getTasksMoved() const;
    void setTasksMoved(const qint32 &tasks_moved);
    bool is_tasks_moved_Set() const;
    bool is_tasks_moved_Valid() const;

    qint32 getTasksTimedOutInWorkflow() const;
    void setTasksTimedOutInWorkflow(const qint32 &tasks_timed_out_in_workflow);
    bool is_tasks_timed_out_in_workflow_Set() const;
    bool is_tasks_timed_out_in_workflow_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QJsonValue getWaitDurationUntilAccepted() const;
    void setWaitDurationUntilAccepted(const QJsonValue &wait_duration_until_accepted);
    bool is_wait_duration_until_accepted_Set() const;
    bool is_wait_duration_until_accepted_Valid() const;

    QJsonValue getWaitDurationUntilCanceled() const;
    void setWaitDurationUntilCanceled(const QJsonValue &wait_duration_until_canceled);
    bool is_wait_duration_until_canceled_Set() const;
    bool is_wait_duration_until_canceled_Valid() const;

    QString getWorkspaceSid() const;
    void setWorkspaceSid(const QString &workspace_sid);
    bool is_workspace_sid_Set() const;
    bool is_workspace_sid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    qint32 m_avg_task_acceptance_time;
    bool m_avg_task_acceptance_time_isSet;
    bool m_avg_task_acceptance_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_reservations_accepted;
    bool m_reservations_accepted_isSet;
    bool m_reservations_accepted_isValid;

    qint32 m_reservations_canceled;
    bool m_reservations_canceled_isSet;
    bool m_reservations_canceled_isValid;

    qint32 m_reservations_created;
    bool m_reservations_created_isSet;
    bool m_reservations_created_isValid;

    qint32 m_reservations_rejected;
    bool m_reservations_rejected_isSet;
    bool m_reservations_rejected_isValid;

    qint32 m_reservations_rescinded;
    bool m_reservations_rescinded_isSet;
    bool m_reservations_rescinded_isValid;

    qint32 m_reservations_timed_out;
    bool m_reservations_timed_out_isSet;
    bool m_reservations_timed_out_isValid;

    QJsonValue m_split_by_wait_time;
    bool m_split_by_wait_time_isSet;
    bool m_split_by_wait_time_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_tasks_canceled;
    bool m_tasks_canceled_isSet;
    bool m_tasks_canceled_isValid;

    qint32 m_tasks_completed;
    bool m_tasks_completed_isSet;
    bool m_tasks_completed_isValid;

    qint32 m_tasks_created;
    bool m_tasks_created_isSet;
    bool m_tasks_created_isValid;

    qint32 m_tasks_deleted;
    bool m_tasks_deleted_isSet;
    bool m_tasks_deleted_isValid;

    qint32 m_tasks_moved;
    bool m_tasks_moved_isSet;
    bool m_tasks_moved_isValid;

    qint32 m_tasks_timed_out_in_workflow;
    bool m_tasks_timed_out_in_workflow_isSet;
    bool m_tasks_timed_out_in_workflow_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QJsonValue m_wait_duration_until_accepted;
    bool m_wait_duration_until_accepted_isSet;
    bool m_wait_duration_until_accepted_isValid;

    QJsonValue m_wait_duration_until_canceled;
    bool m_wait_duration_until_canceled_isSet;
    bool m_wait_duration_until_canceled_isValid;

    QString m_workspace_sid;
    bool m_workspace_sid_isSet;
    bool m_workspace_sid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaskrouter_v1_workspace_workspace_cumulative_statistics)

#endif // OAITaskrouter_v1_workspace_workspace_cumulative_statistics_H
