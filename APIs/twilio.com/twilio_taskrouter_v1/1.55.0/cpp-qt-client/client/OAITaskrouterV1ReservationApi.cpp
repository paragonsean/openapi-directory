/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskrouterV1ReservationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITaskrouterV1ReservationApi::OAITaskrouterV1ReservationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITaskrouterV1ReservationApi::~OAITaskrouterV1ReservationApi() {
}

void OAITaskrouterV1ReservationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchTaskReservation", serverConf);
    _serverIndices.insert("fetchTaskReservation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchWorkerReservation", serverConf);
    _serverIndices.insert("fetchWorkerReservation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listTaskReservation", serverConf);
    _serverIndices.insert("listTaskReservation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listWorkerReservation", serverConf);
    _serverIndices.insert("listWorkerReservation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateTaskReservation", serverConf);
    _serverIndices.insert("updateTaskReservation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://taskrouter.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateWorkerReservation", serverConf);
    _serverIndices.insert("updateWorkerReservation", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITaskrouterV1ReservationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITaskrouterV1ReservationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITaskrouterV1ReservationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITaskrouterV1ReservationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITaskrouterV1ReservationApi::setUsername(const QString &username) {
    _username = username;
}

void OAITaskrouterV1ReservationApi::setPassword(const QString &password) {
    _password = password;
}


void OAITaskrouterV1ReservationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITaskrouterV1ReservationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITaskrouterV1ReservationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITaskrouterV1ReservationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskrouterV1ReservationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskrouterV1ReservationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITaskrouterV1ReservationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITaskrouterV1ReservationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITaskrouterV1ReservationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITaskrouterV1ReservationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITaskrouterV1ReservationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITaskrouterV1ReservationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITaskrouterV1ReservationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITaskrouterV1ReservationApi::fetchTaskReservation(const QString &workspace_sid, const QString &task_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchTaskReservation"][_serverIndices.value("fetchTaskReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString task_sidPathParam("{");
        task_sidPathParam.append("TaskSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TaskSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TaskSid"+pathSuffix : pathPrefix;
        fullPath.replace(task_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::fetchTaskReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::fetchTaskReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskrouter_v1_workspace_task_task_reservation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchTaskReservationSignal(output);
        Q_EMIT fetchTaskReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchTaskReservationSignalE(output, error_type, error_str);
        Q_EMIT fetchTaskReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchTaskReservationSignalError(output, error_type, error_str);
        Q_EMIT fetchTaskReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::fetchWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchWorkerReservation"][_serverIndices.value("fetchWorkerReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString worker_sidPathParam("{");
        worker_sidPathParam.append("WorkerSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkerSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkerSid"+pathSuffix : pathPrefix;
        fullPath.replace(worker_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(worker_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::fetchWorkerReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::fetchWorkerReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskrouter_v1_workspace_worker_worker_reservation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchWorkerReservationSignal(output);
        Q_EMIT fetchWorkerReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchWorkerReservationSignalE(output, error_type, error_str);
        Q_EMIT fetchWorkerReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchWorkerReservationSignalError(output, error_type, error_str);
        Q_EMIT fetchWorkerReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::listTaskReservation(const QString &workspace_sid, const QString &task_sid, const ::OpenAPI::OptionalParam<OAITask_reservation_enum_status> &reservation_status, const ::OpenAPI::OptionalParam<QString> &worker_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listTaskReservation"][_serverIndices.value("listTaskReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString task_sidPathParam("{");
        task_sidPathParam.append("TaskSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TaskSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TaskSid"+pathSuffix : pathPrefix;
        fullPath.replace(task_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (reservation_status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ReservationStatus", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ReservationStatus")).append(querySuffix).append(QUrl::toPercentEncoding(reservation_status.stringValue()));
    }
    if (worker_sid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "WorkerSid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("WorkerSid")).append(querySuffix).append(QUrl::toPercentEncoding(worker_sid.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::listTaskReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::listTaskReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListTaskReservationResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listTaskReservationSignal(output);
        Q_EMIT listTaskReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listTaskReservationSignalE(output, error_type, error_str);
        Q_EMIT listTaskReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listTaskReservationSignalError(output, error_type, error_str);
        Q_EMIT listTaskReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::listWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status> &reservation_status, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listWorkerReservation"][_serverIndices.value("listWorkerReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString worker_sidPathParam("{");
        worker_sidPathParam.append("WorkerSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkerSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkerSid"+pathSuffix : pathPrefix;
        fullPath.replace(worker_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(worker_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (reservation_status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ReservationStatus", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ReservationStatus")).append(querySuffix).append(QUrl::toPercentEncoding(reservation_status.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::listWorkerReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::listWorkerReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListWorkerReservationResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listWorkerReservationSignal(output);
        Q_EMIT listWorkerReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listWorkerReservationSignalE(output, error_type, error_str);
        Q_EMIT listWorkerReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listWorkerReservationSignalError(output, error_type, error_str);
        Q_EMIT listWorkerReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::updateTaskReservation(const QString &workspace_sid, const QString &task_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match, const ::OpenAPI::OptionalParam<QString> &beep, const ::OpenAPI::OptionalParam<bool> &beep_on_customer_entrance, const ::OpenAPI::OptionalParam<bool> &call_accept, const ::OpenAPI::OptionalParam<QString> &call_from, const ::OpenAPI::OptionalParam<QString> &call_record, const ::OpenAPI::OptionalParam<QString> &call_status_callback_url, const ::OpenAPI::OptionalParam<qint32> &call_timeout, const ::OpenAPI::OptionalParam<QString> &call_to, const ::OpenAPI::OptionalParam<QString> &call_url, const ::OpenAPI::OptionalParam<QString> &conference_record, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_status_callback, const ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_conference_event>> &conference_status_callback_event, const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_trim, const ::OpenAPI::OptionalParam<QString> &dequeue_from, const ::OpenAPI::OptionalParam<QString> &dequeue_post_work_activity_sid, const ::OpenAPI::OptionalParam<QString> &dequeue_record, const ::OpenAPI::OptionalParam<QList<QString>> &dequeue_status_callback_event, const ::OpenAPI::OptionalParam<QString> &dequeue_status_callback_url, const ::OpenAPI::OptionalParam<qint32> &dequeue_timeout, const ::OpenAPI::OptionalParam<QString> &dequeue_to, const ::OpenAPI::OptionalParam<bool> &early_media, const ::OpenAPI::OptionalParam<bool> &end_conference_on_customer_exit, const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit, const ::OpenAPI::OptionalParam<QString> &from, const ::OpenAPI::OptionalParam<QString> &instruction, const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size, const ::OpenAPI::OptionalParam<qint32> &max_participants, const ::OpenAPI::OptionalParam<bool> &muted, const ::OpenAPI::OptionalParam<QString> &post_work_activity_sid, const ::OpenAPI::OptionalParam<bool> &record, const ::OpenAPI::OptionalParam<QString> &recording_channels, const ::OpenAPI::OptionalParam<QString> &recording_status_callback, const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method, const ::OpenAPI::OptionalParam<bool> &redirect_accept, const ::OpenAPI::OptionalParam<QString> &redirect_call_sid, const ::OpenAPI::OptionalParam<QString> &redirect_url, const ::OpenAPI::OptionalParam<QString> &region, const ::OpenAPI::OptionalParam<OAITask_reservation_enum_status> &reservation_status, const ::OpenAPI::OptionalParam<QString> &sip_auth_password, const ::OpenAPI::OptionalParam<QString> &sip_auth_username, const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QList<OAITask_reservation_enum_call_status>> &status_callback_event, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<QString> &supervisor, const ::OpenAPI::OptionalParam<OAITask_reservation_enum_supervisor_mode> &supervisor_mode, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &to, const ::OpenAPI::OptionalParam<QString> &wait_method, const ::OpenAPI::OptionalParam<QString> &wait_url, const ::OpenAPI::OptionalParam<QString> &worker_activity_sid) {
    QString fullPath = QString(_serverConfigs["updateTaskReservation"][_serverIndices.value("updateTaskReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString task_sidPathParam("{");
        task_sidPathParam.append("TaskSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TaskSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TaskSid"+pathSuffix : pathPrefix;
        fullPath.replace(task_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (beep.hasValue())
    {
        input.add_var("Beep", ::OpenAPI::toStringValue(beep.value()));
    }
    if (beep_on_customer_entrance.hasValue())
    {
        input.add_var("BeepOnCustomerEntrance", ::OpenAPI::toStringValue(beep_on_customer_entrance.value()));
    }
    if (call_accept.hasValue())
    {
        input.add_var("CallAccept", ::OpenAPI::toStringValue(call_accept.value()));
    }
    if (call_from.hasValue())
    {
        input.add_var("CallFrom", ::OpenAPI::toStringValue(call_from.value()));
    }
    if (call_record.hasValue())
    {
        input.add_var("CallRecord", ::OpenAPI::toStringValue(call_record.value()));
    }
    if (call_status_callback_url.hasValue())
    {
        input.add_var("CallStatusCallbackUrl", ::OpenAPI::toStringValue(call_status_callback_url.value()));
    }
    if (call_timeout.hasValue())
    {
        input.add_var("CallTimeout", ::OpenAPI::toStringValue(call_timeout.value()));
    }
    if (call_to.hasValue())
    {
        input.add_var("CallTo", ::OpenAPI::toStringValue(call_to.value()));
    }
    if (call_url.hasValue())
    {
        input.add_var("CallUrl", ::OpenAPI::toStringValue(call_url.value()));
    }
    if (conference_record.hasValue())
    {
        input.add_var("ConferenceRecord", ::OpenAPI::toStringValue(conference_record.value()));
    }
    if (conference_recording_status_callback.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallback", ::OpenAPI::toStringValue(conference_recording_status_callback.value()));
    }
    if (conference_recording_status_callback_method.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallbackMethod", ::OpenAPI::toStringValue(conference_recording_status_callback_method.value()));
    }
    if (conference_status_callback.hasValue())
    {
        input.add_var("ConferenceStatusCallback", ::OpenAPI::toStringValue(conference_status_callback.value()));
    }
    if (conference_status_callback_event.hasValue())
    {
        input.add_var("ConferenceStatusCallbackEvent", ::OpenAPI::toStringValue(conference_status_callback_event.value()));
    }
    if (conference_status_callback_method.hasValue())
    {
        input.add_var("ConferenceStatusCallbackMethod", ::OpenAPI::toStringValue(conference_status_callback_method.value()));
    }
    if (conference_trim.hasValue())
    {
        input.add_var("ConferenceTrim", ::OpenAPI::toStringValue(conference_trim.value()));
    }
    if (dequeue_from.hasValue())
    {
        input.add_var("DequeueFrom", ::OpenAPI::toStringValue(dequeue_from.value()));
    }
    if (dequeue_post_work_activity_sid.hasValue())
    {
        input.add_var("DequeuePostWorkActivitySid", ::OpenAPI::toStringValue(dequeue_post_work_activity_sid.value()));
    }
    if (dequeue_record.hasValue())
    {
        input.add_var("DequeueRecord", ::OpenAPI::toStringValue(dequeue_record.value()));
    }
    if (dequeue_status_callback_event.hasValue())
    {
        input.add_var("DequeueStatusCallbackEvent", ::OpenAPI::toStringValue(dequeue_status_callback_event.value()));
    }
    if (dequeue_status_callback_url.hasValue())
    {
        input.add_var("DequeueStatusCallbackUrl", ::OpenAPI::toStringValue(dequeue_status_callback_url.value()));
    }
    if (dequeue_timeout.hasValue())
    {
        input.add_var("DequeueTimeout", ::OpenAPI::toStringValue(dequeue_timeout.value()));
    }
    if (dequeue_to.hasValue())
    {
        input.add_var("DequeueTo", ::OpenAPI::toStringValue(dequeue_to.value()));
    }
    if (early_media.hasValue())
    {
        input.add_var("EarlyMedia", ::OpenAPI::toStringValue(early_media.value()));
    }
    if (end_conference_on_customer_exit.hasValue())
    {
        input.add_var("EndConferenceOnCustomerExit", ::OpenAPI::toStringValue(end_conference_on_customer_exit.value()));
    }
    if (end_conference_on_exit.hasValue())
    {
        input.add_var("EndConferenceOnExit", ::OpenAPI::toStringValue(end_conference_on_exit.value()));
    }
    if (from.hasValue())
    {
        input.add_var("From", ::OpenAPI::toStringValue(from.value()));
    }
    if (instruction.hasValue())
    {
        input.add_var("Instruction", ::OpenAPI::toStringValue(instruction.value()));
    }
    if (jitter_buffer_size.hasValue())
    {
        input.add_var("JitterBufferSize", ::OpenAPI::toStringValue(jitter_buffer_size.value()));
    }
    if (max_participants.hasValue())
    {
        input.add_var("MaxParticipants", ::OpenAPI::toStringValue(max_participants.value()));
    }
    if (muted.hasValue())
    {
        input.add_var("Muted", ::OpenAPI::toStringValue(muted.value()));
    }
    if (post_work_activity_sid.hasValue())
    {
        input.add_var("PostWorkActivitySid", ::OpenAPI::toStringValue(post_work_activity_sid.value()));
    }
    if (record.hasValue())
    {
        input.add_var("Record", ::OpenAPI::toStringValue(record.value()));
    }
    if (recording_channels.hasValue())
    {
        input.add_var("RecordingChannels", ::OpenAPI::toStringValue(recording_channels.value()));
    }
    if (recording_status_callback.hasValue())
    {
        input.add_var("RecordingStatusCallback", ::OpenAPI::toStringValue(recording_status_callback.value()));
    }
    if (recording_status_callback_method.hasValue())
    {
        input.add_var("RecordingStatusCallbackMethod", ::OpenAPI::toStringValue(recording_status_callback_method.value()));
    }
    if (redirect_accept.hasValue())
    {
        input.add_var("RedirectAccept", ::OpenAPI::toStringValue(redirect_accept.value()));
    }
    if (redirect_call_sid.hasValue())
    {
        input.add_var("RedirectCallSid", ::OpenAPI::toStringValue(redirect_call_sid.value()));
    }
    if (redirect_url.hasValue())
    {
        input.add_var("RedirectUrl", ::OpenAPI::toStringValue(redirect_url.value()));
    }
    if (region.hasValue())
    {
        input.add_var("Region", ::OpenAPI::toStringValue(region.value()));
    }
    if (reservation_status.hasValue())
    {
        input.add_var("ReservationStatus", ::OpenAPI::toStringValue(reservation_status.value()));
    }
    if (sip_auth_password.hasValue())
    {
        input.add_var("SipAuthPassword", ::OpenAPI::toStringValue(sip_auth_password.value()));
    }
    if (sip_auth_username.hasValue())
    {
        input.add_var("SipAuthUsername", ::OpenAPI::toStringValue(sip_auth_username.value()));
    }
    if (start_conference_on_enter.hasValue())
    {
        input.add_var("StartConferenceOnEnter", ::OpenAPI::toStringValue(start_conference_on_enter.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_event.hasValue())
    {
        input.add_var("StatusCallbackEvent", ::OpenAPI::toStringValue(status_callback_event.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (supervisor.hasValue())
    {
        input.add_var("Supervisor", ::OpenAPI::toStringValue(supervisor.value()));
    }
    if (supervisor_mode.hasValue())
    {
        input.add_var("SupervisorMode", ::OpenAPI::toStringValue(supervisor_mode.value()));
    }
    if (timeout.hasValue())
    {
        input.add_var("Timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    if (to.hasValue())
    {
        input.add_var("To", ::OpenAPI::toStringValue(to.value()));
    }
    if (wait_method.hasValue())
    {
        input.add_var("WaitMethod", ::OpenAPI::toStringValue(wait_method.value()));
    }
    if (wait_url.hasValue())
    {
        input.add_var("WaitUrl", ::OpenAPI::toStringValue(wait_url.value()));
    }
    if (worker_activity_sid.hasValue())
    {
        input.add_var("WorkerActivitySid", ::OpenAPI::toStringValue(worker_activity_sid.value()));
    }

    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("If-Match", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::updateTaskReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::updateTaskReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskrouter_v1_workspace_task_task_reservation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateTaskReservationSignal(output);
        Q_EMIT updateTaskReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateTaskReservationSignalE(output, error_type, error_str);
        Q_EMIT updateTaskReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateTaskReservationSignalError(output, error_type, error_str);
        Q_EMIT updateTaskReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::updateWorkerReservation(const QString &workspace_sid, const QString &worker_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &if_match, const ::OpenAPI::OptionalParam<QString> &beep, const ::OpenAPI::OptionalParam<bool> &beep_on_customer_entrance, const ::OpenAPI::OptionalParam<bool> &call_accept, const ::OpenAPI::OptionalParam<QString> &call_from, const ::OpenAPI::OptionalParam<QString> &call_record, const ::OpenAPI::OptionalParam<QString> &call_status_callback_url, const ::OpenAPI::OptionalParam<qint32> &call_timeout, const ::OpenAPI::OptionalParam<QString> &call_to, const ::OpenAPI::OptionalParam<QString> &call_url, const ::OpenAPI::OptionalParam<QString> &conference_record, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_status_callback, const ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_conference_event>> &conference_status_callback_event, const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_trim, const ::OpenAPI::OptionalParam<QString> &dequeue_from, const ::OpenAPI::OptionalParam<QString> &dequeue_post_work_activity_sid, const ::OpenAPI::OptionalParam<QString> &dequeue_record, const ::OpenAPI::OptionalParam<QList<QString>> &dequeue_status_callback_event, const ::OpenAPI::OptionalParam<QString> &dequeue_status_callback_url, const ::OpenAPI::OptionalParam<qint32> &dequeue_timeout, const ::OpenAPI::OptionalParam<QString> &dequeue_to, const ::OpenAPI::OptionalParam<bool> &early_media, const ::OpenAPI::OptionalParam<bool> &end_conference_on_customer_exit, const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit, const ::OpenAPI::OptionalParam<QString> &from, const ::OpenAPI::OptionalParam<QString> &instruction, const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size, const ::OpenAPI::OptionalParam<qint32> &max_participants, const ::OpenAPI::OptionalParam<bool> &muted, const ::OpenAPI::OptionalParam<QString> &post_work_activity_sid, const ::OpenAPI::OptionalParam<bool> &record, const ::OpenAPI::OptionalParam<QString> &recording_channels, const ::OpenAPI::OptionalParam<QString> &recording_status_callback, const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method, const ::OpenAPI::OptionalParam<bool> &redirect_accept, const ::OpenAPI::OptionalParam<QString> &redirect_call_sid, const ::OpenAPI::OptionalParam<QString> &redirect_url, const ::OpenAPI::OptionalParam<QString> &region, const ::OpenAPI::OptionalParam<OAIWorker_reservation_enum_status> &reservation_status, const ::OpenAPI::OptionalParam<QString> &sip_auth_password, const ::OpenAPI::OptionalParam<QString> &sip_auth_username, const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QList<OAIWorker_reservation_enum_call_status>> &status_callback_event, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &to, const ::OpenAPI::OptionalParam<QString> &wait_method, const ::OpenAPI::OptionalParam<QString> &wait_url, const ::OpenAPI::OptionalParam<QString> &worker_activity_sid) {
    QString fullPath = QString(_serverConfigs["updateWorkerReservation"][_serverIndices.value("updateWorkerReservation")].URL()+"/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString workspace_sidPathParam("{");
        workspace_sidPathParam.append("WorkspaceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkspaceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkspaceSid"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_sid)));
    }
    
    {
        QString worker_sidPathParam("{");
        worker_sidPathParam.append("WorkerSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "WorkerSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"WorkerSid"+pathSuffix : pathPrefix;
        fullPath.replace(worker_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(worker_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (beep.hasValue())
    {
        input.add_var("Beep", ::OpenAPI::toStringValue(beep.value()));
    }
    if (beep_on_customer_entrance.hasValue())
    {
        input.add_var("BeepOnCustomerEntrance", ::OpenAPI::toStringValue(beep_on_customer_entrance.value()));
    }
    if (call_accept.hasValue())
    {
        input.add_var("CallAccept", ::OpenAPI::toStringValue(call_accept.value()));
    }
    if (call_from.hasValue())
    {
        input.add_var("CallFrom", ::OpenAPI::toStringValue(call_from.value()));
    }
    if (call_record.hasValue())
    {
        input.add_var("CallRecord", ::OpenAPI::toStringValue(call_record.value()));
    }
    if (call_status_callback_url.hasValue())
    {
        input.add_var("CallStatusCallbackUrl", ::OpenAPI::toStringValue(call_status_callback_url.value()));
    }
    if (call_timeout.hasValue())
    {
        input.add_var("CallTimeout", ::OpenAPI::toStringValue(call_timeout.value()));
    }
    if (call_to.hasValue())
    {
        input.add_var("CallTo", ::OpenAPI::toStringValue(call_to.value()));
    }
    if (call_url.hasValue())
    {
        input.add_var("CallUrl", ::OpenAPI::toStringValue(call_url.value()));
    }
    if (conference_record.hasValue())
    {
        input.add_var("ConferenceRecord", ::OpenAPI::toStringValue(conference_record.value()));
    }
    if (conference_recording_status_callback.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallback", ::OpenAPI::toStringValue(conference_recording_status_callback.value()));
    }
    if (conference_recording_status_callback_method.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallbackMethod", ::OpenAPI::toStringValue(conference_recording_status_callback_method.value()));
    }
    if (conference_status_callback.hasValue())
    {
        input.add_var("ConferenceStatusCallback", ::OpenAPI::toStringValue(conference_status_callback.value()));
    }
    if (conference_status_callback_event.hasValue())
    {
        input.add_var("ConferenceStatusCallbackEvent", ::OpenAPI::toStringValue(conference_status_callback_event.value()));
    }
    if (conference_status_callback_method.hasValue())
    {
        input.add_var("ConferenceStatusCallbackMethod", ::OpenAPI::toStringValue(conference_status_callback_method.value()));
    }
    if (conference_trim.hasValue())
    {
        input.add_var("ConferenceTrim", ::OpenAPI::toStringValue(conference_trim.value()));
    }
    if (dequeue_from.hasValue())
    {
        input.add_var("DequeueFrom", ::OpenAPI::toStringValue(dequeue_from.value()));
    }
    if (dequeue_post_work_activity_sid.hasValue())
    {
        input.add_var("DequeuePostWorkActivitySid", ::OpenAPI::toStringValue(dequeue_post_work_activity_sid.value()));
    }
    if (dequeue_record.hasValue())
    {
        input.add_var("DequeueRecord", ::OpenAPI::toStringValue(dequeue_record.value()));
    }
    if (dequeue_status_callback_event.hasValue())
    {
        input.add_var("DequeueStatusCallbackEvent", ::OpenAPI::toStringValue(dequeue_status_callback_event.value()));
    }
    if (dequeue_status_callback_url.hasValue())
    {
        input.add_var("DequeueStatusCallbackUrl", ::OpenAPI::toStringValue(dequeue_status_callback_url.value()));
    }
    if (dequeue_timeout.hasValue())
    {
        input.add_var("DequeueTimeout", ::OpenAPI::toStringValue(dequeue_timeout.value()));
    }
    if (dequeue_to.hasValue())
    {
        input.add_var("DequeueTo", ::OpenAPI::toStringValue(dequeue_to.value()));
    }
    if (early_media.hasValue())
    {
        input.add_var("EarlyMedia", ::OpenAPI::toStringValue(early_media.value()));
    }
    if (end_conference_on_customer_exit.hasValue())
    {
        input.add_var("EndConferenceOnCustomerExit", ::OpenAPI::toStringValue(end_conference_on_customer_exit.value()));
    }
    if (end_conference_on_exit.hasValue())
    {
        input.add_var("EndConferenceOnExit", ::OpenAPI::toStringValue(end_conference_on_exit.value()));
    }
    if (from.hasValue())
    {
        input.add_var("From", ::OpenAPI::toStringValue(from.value()));
    }
    if (instruction.hasValue())
    {
        input.add_var("Instruction", ::OpenAPI::toStringValue(instruction.value()));
    }
    if (jitter_buffer_size.hasValue())
    {
        input.add_var("JitterBufferSize", ::OpenAPI::toStringValue(jitter_buffer_size.value()));
    }
    if (max_participants.hasValue())
    {
        input.add_var("MaxParticipants", ::OpenAPI::toStringValue(max_participants.value()));
    }
    if (muted.hasValue())
    {
        input.add_var("Muted", ::OpenAPI::toStringValue(muted.value()));
    }
    if (post_work_activity_sid.hasValue())
    {
        input.add_var("PostWorkActivitySid", ::OpenAPI::toStringValue(post_work_activity_sid.value()));
    }
    if (record.hasValue())
    {
        input.add_var("Record", ::OpenAPI::toStringValue(record.value()));
    }
    if (recording_channels.hasValue())
    {
        input.add_var("RecordingChannels", ::OpenAPI::toStringValue(recording_channels.value()));
    }
    if (recording_status_callback.hasValue())
    {
        input.add_var("RecordingStatusCallback", ::OpenAPI::toStringValue(recording_status_callback.value()));
    }
    if (recording_status_callback_method.hasValue())
    {
        input.add_var("RecordingStatusCallbackMethod", ::OpenAPI::toStringValue(recording_status_callback_method.value()));
    }
    if (redirect_accept.hasValue())
    {
        input.add_var("RedirectAccept", ::OpenAPI::toStringValue(redirect_accept.value()));
    }
    if (redirect_call_sid.hasValue())
    {
        input.add_var("RedirectCallSid", ::OpenAPI::toStringValue(redirect_call_sid.value()));
    }
    if (redirect_url.hasValue())
    {
        input.add_var("RedirectUrl", ::OpenAPI::toStringValue(redirect_url.value()));
    }
    if (region.hasValue())
    {
        input.add_var("Region", ::OpenAPI::toStringValue(region.value()));
    }
    if (reservation_status.hasValue())
    {
        input.add_var("ReservationStatus", ::OpenAPI::toStringValue(reservation_status.value()));
    }
    if (sip_auth_password.hasValue())
    {
        input.add_var("SipAuthPassword", ::OpenAPI::toStringValue(sip_auth_password.value()));
    }
    if (sip_auth_username.hasValue())
    {
        input.add_var("SipAuthUsername", ::OpenAPI::toStringValue(sip_auth_username.value()));
    }
    if (start_conference_on_enter.hasValue())
    {
        input.add_var("StartConferenceOnEnter", ::OpenAPI::toStringValue(start_conference_on_enter.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_event.hasValue())
    {
        input.add_var("StatusCallbackEvent", ::OpenAPI::toStringValue(status_callback_event.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (timeout.hasValue())
    {
        input.add_var("Timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    if (to.hasValue())
    {
        input.add_var("To", ::OpenAPI::toStringValue(to.value()));
    }
    if (wait_method.hasValue())
    {
        input.add_var("WaitMethod", ::OpenAPI::toStringValue(wait_method.value()));
    }
    if (wait_url.hasValue())
    {
        input.add_var("WaitUrl", ::OpenAPI::toStringValue(wait_url.value()));
    }
    if (worker_activity_sid.hasValue())
    {
        input.add_var("WorkerActivitySid", ::OpenAPI::toStringValue(worker_activity_sid.value()));
    }

    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("If-Match", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskrouterV1ReservationApi::updateWorkerReservationCallback);
    connect(this, &OAITaskrouterV1ReservationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskrouterV1ReservationApi::updateWorkerReservationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskrouter_v1_workspace_worker_worker_reservation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateWorkerReservationSignal(output);
        Q_EMIT updateWorkerReservationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateWorkerReservationSignalE(output, error_type, error_str);
        Q_EMIT updateWorkerReservationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateWorkerReservationSignalError(output, error_type, error_str);
        Q_EMIT updateWorkerReservationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskrouterV1ReservationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
