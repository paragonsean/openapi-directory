/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskrouterV1ActivityApi_H
#define OAI_OAITaskrouterV1ActivityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListActivityResponse.h"
#include "OAITaskrouter_v1_workspace_activity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskrouterV1ActivityApi : public QObject {
    Q_OBJECT

public:
    OAITaskrouterV1ActivityApi(const int timeOut = 0);
    ~OAITaskrouterV1ActivityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  available bool [optional]
    */
    virtual void createActivity(const QString &workspace_sid, const QString &friendly_name, const ::OpenAPI::OptionalParam<bool> &available = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteActivity(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchActivity(const QString &workspace_sid, const QString &sid);

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  available QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listActivity(const QString &workspace_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &available = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void updateActivity(const QString &workspace_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createActivityCallback(OAIHttpRequestWorker *worker);
    void deleteActivityCallback(OAIHttpRequestWorker *worker);
    void fetchActivityCallback(OAIHttpRequestWorker *worker);
    void listActivityCallback(OAIHttpRequestWorker *worker);
    void updateActivityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createActivitySignal(OAITaskrouter_v1_workspace_activity summary);
    void deleteActivitySignal();
    void fetchActivitySignal(OAITaskrouter_v1_workspace_activity summary);
    void listActivitySignal(OAIListActivityResponse summary);
    void updateActivitySignal(OAITaskrouter_v1_workspace_activity summary);


    void createActivitySignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_activity summary);
    void deleteActivitySignalFull(OAIHttpRequestWorker *worker);
    void fetchActivitySignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_activity summary);
    void listActivitySignalFull(OAIHttpRequestWorker *worker, OAIListActivityResponse summary);
    void updateActivitySignalFull(OAIHttpRequestWorker *worker, OAITaskrouter_v1_workspace_activity summary);

    Q_DECL_DEPRECATED_X("Use createActivitySignalError() instead")
    void createActivitySignalE(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createActivitySignalError(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActivitySignalError() instead")
    void deleteActivitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActivitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchActivitySignalError() instead")
    void fetchActivitySignalE(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchActivitySignalError(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActivitySignalError() instead")
    void listActivitySignalE(OAIListActivityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listActivitySignalError(OAIListActivityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActivitySignalError() instead")
    void updateActivitySignalE(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActivitySignalError(OAITaskrouter_v1_workspace_activity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createActivitySignalErrorFull() instead")
    void createActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActivitySignalErrorFull() instead")
    void deleteActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchActivitySignalErrorFull() instead")
    void fetchActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActivitySignalErrorFull() instead")
    void listActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActivitySignalErrorFull() instead")
    void updateActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
