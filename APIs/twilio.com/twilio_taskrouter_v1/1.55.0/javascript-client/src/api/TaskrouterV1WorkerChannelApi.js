/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListWorkerChannelResponse from '../model/ListWorkerChannelResponse';
import TaskrouterV1WorkspaceWorkerWorkerChannel from '../model/TaskrouterV1WorkspaceWorkerWorkerChannel';

/**
* TaskrouterV1WorkerChannel service.
* @module api/TaskrouterV1WorkerChannelApi
* @version 1.55.0
*/
export default class TaskrouterV1WorkerChannelApi {

    /**
    * Constructs a new TaskrouterV1WorkerChannelApi. 
    * @alias module:api/TaskrouterV1WorkerChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchWorkerChannel operation.
     * @callback module:api/TaskrouterV1WorkerChannelApi~fetchWorkerChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkerWorkerChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerChannel to fetch.
     * @param {String} workerSid The SID of the Worker with the WorkerChannel to fetch.
     * @param {String} sid The SID of the WorkerChannel to fetch.
     * @param {module:api/TaskrouterV1WorkerChannelApi~fetchWorkerChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkerWorkerChannel}
     */
    fetchWorkerChannel(workspaceSid, workerSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchWorkerChannel");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling fetchWorkerChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWorkerChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkerWorkerChannel;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkerChannel operation.
     * @callback module:api/TaskrouterV1WorkerChannelApi~listWorkerChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkerChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerChannels to read.
     * @param {String} workerSid The SID of the Worker with the WorkerChannels to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1WorkerChannelApi~listWorkerChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkerChannelResponse}
     */
    listWorkerChannel(workspaceSid, workerSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listWorkerChannel");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling listWorkerChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkerChannelResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkerChannel operation.
     * @callback module:api/TaskrouterV1WorkerChannelApi~updateWorkerChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkerWorkerChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerChannel to update.
     * @param {String} workerSid The SID of the Worker with the WorkerChannel to update.
     * @param {String} sid The SID of the WorkerChannel to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [available] Whether the WorkerChannel is available. Set to `false` to prevent the Worker from receiving any new Tasks of this TaskChannel type.
     * @param {Number} [capacity] The total number of Tasks that the Worker should handle for the TaskChannel type. TaskRouter creates reservations for Tasks of this TaskChannel type up to the specified capacity. If the capacity is 0, no new reservations will be created.
     * @param {module:api/TaskrouterV1WorkerChannelApi~updateWorkerChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkerWorkerChannel}
     */
    updateWorkerChannel(workspaceSid, workerSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateWorkerChannel");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling updateWorkerChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWorkerChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Available': opts['available'],
        'Capacity': opts['capacity']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkerWorkerChannel;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
