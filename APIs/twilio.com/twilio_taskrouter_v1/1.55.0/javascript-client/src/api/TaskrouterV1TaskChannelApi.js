/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTaskChannelResponse from '../model/ListTaskChannelResponse';
import TaskrouterV1WorkspaceTaskChannel from '../model/TaskrouterV1WorkspaceTaskChannel';

/**
* TaskrouterV1TaskChannel service.
* @module api/TaskrouterV1TaskChannelApi
* @version 1.55.0
*/
export default class TaskrouterV1TaskChannelApi {

    /**
    * Constructs a new TaskrouterV1TaskChannelApi. 
    * @alias module:api/TaskrouterV1TaskChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaskChannel operation.
     * @callback module:api/TaskrouterV1TaskChannelApi~createTaskChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace that the new Task Channel belongs to.
     * @param {String} friendlyName A descriptive string that you create to describe the Task Channel. It can be up to 64 characters long.
     * @param {String} uniqueName An application-defined string that uniquely identifies the Task Channel, such as `voice` or `sms`.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [channelOptimizedRouting] Whether the Task Channel should prioritize Workers that have been idle. If `true`, Workers that have been idle the longest are prioritized.
     * @param {module:api/TaskrouterV1TaskChannelApi~createTaskChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskChannel}
     */
    createTaskChannel(workspaceSid, friendlyName, uniqueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling createTaskChannel");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createTaskChannel");
      }
      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling createTaskChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChannelOptimizedRouting': opts['channelOptimizedRouting'],
        'FriendlyName': friendlyName,
        'UniqueName': uniqueName
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskChannel;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskChannel operation.
     * @callback module:api/TaskrouterV1TaskChannelApi~deleteTaskChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task Channel to delete.
     * @param {String} sid The SID of the Task Channel resource to delete.
     * @param {module:api/TaskrouterV1TaskChannelApi~deleteTaskChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaskChannel(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling deleteTaskChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTaskChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTaskChannel operation.
     * @callback module:api/TaskrouterV1TaskChannelApi~fetchTaskChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task Channel to fetch.
     * @param {String} sid The SID of the Task Channel resource to fetch.
     * @param {module:api/TaskrouterV1TaskChannelApi~fetchTaskChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskChannel}
     */
    fetchTaskChannel(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchTaskChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTaskChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskChannel;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskChannel operation.
     * @callback module:api/TaskrouterV1TaskChannelApi~listTaskChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task Channel to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1TaskChannelApi~listTaskChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskChannelResponse}
     */
    listTaskChannel(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listTaskChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTaskChannelResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskChannels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskChannel operation.
     * @callback module:api/TaskrouterV1TaskChannelApi~updateTaskChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task Channel to update.
     * @param {String} sid The SID of the Task Channel resource to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [channelOptimizedRouting] Whether the TaskChannel should prioritize Workers that have been idle. If `true`, Workers that have been idle the longest are prioritized.
     * @param {String} [friendlyName] A descriptive string that you create to describe the Task Channel. It can be up to 64 characters long.
     * @param {module:api/TaskrouterV1TaskChannelApi~updateTaskChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskChannel}
     */
    updateTaskChannel(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateTaskChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTaskChannel");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChannelOptimizedRouting': opts['channelOptimizedRouting'],
        'FriendlyName': opts['friendlyName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskChannel;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
