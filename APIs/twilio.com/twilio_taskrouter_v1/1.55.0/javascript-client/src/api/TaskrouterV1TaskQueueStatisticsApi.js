/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics from '../model/TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics';

/**
* TaskrouterV1TaskQueueStatistics service.
* @module api/TaskrouterV1TaskQueueStatisticsApi
* @version 1.55.0
*/
export default class TaskrouterV1TaskQueueStatisticsApi {

    /**
    * Constructs a new TaskrouterV1TaskQueueStatisticsApi. 
    * @alias module:api/TaskrouterV1TaskQueueStatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchTaskQueueStatistics operation.
     * @callback module:api/TaskrouterV1TaskQueueStatisticsApi~fetchTaskQueueStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskQueue to fetch.
     * @param {String} taskQueueSid The SID of the TaskQueue for which to fetch statistics.
     * @param {Object} opts Optional parameters
     * @param {Date} [endDate] Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
     * @param {Number} [minutes] Only calculate statistics since this many minutes in the past. The default is 15 minutes.
     * @param {Date} [startDate] Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param {String} [taskChannel] Only calculate real-time and cumulative statistics for the specified TaskChannel. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
     * @param {String} [splitByWaitTime] A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed.
     * @param {module:api/TaskrouterV1TaskQueueStatisticsApi~fetchTaskQueueStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics}
     */
    fetchTaskQueueStatistics(workspaceSid, taskQueueSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchTaskQueueStatistics");
      }
      // verify the required parameter 'taskQueueSid' is set
      if (taskQueueSid === undefined || taskQueueSid === null) {
        throw new Error("Missing the required parameter 'taskQueueSid' when calling fetchTaskQueueStatistics");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'TaskQueueSid': taskQueueSid
      };
      let queryParams = {
        'EndDate': opts['endDate'],
        'Minutes': opts['minutes'],
        'StartDate': opts['startDate'],
        'TaskChannel': opts['taskChannel'],
        'SplitByWaitTime': opts['splitByWaitTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
