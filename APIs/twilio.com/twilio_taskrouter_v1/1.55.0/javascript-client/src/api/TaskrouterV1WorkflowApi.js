/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListWorkflowResponse from '../model/ListWorkflowResponse';
import TaskrouterV1WorkspaceWorkflow from '../model/TaskrouterV1WorkspaceWorkflow';

/**
* TaskrouterV1Workflow service.
* @module api/TaskrouterV1WorkflowApi
* @version 1.55.0
*/
export default class TaskrouterV1WorkflowApi {

    /**
    * Constructs a new TaskrouterV1WorkflowApi. 
    * @alias module:api/TaskrouterV1WorkflowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkflow operation.
     * @callback module:api/TaskrouterV1WorkflowApi~createWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace that the new Workflow to create belongs to.
     * @param {String} configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
     * @param {String} friendlyName A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
     * @param {Object} opts Optional parameters
     * @param {String} [assignmentCallbackUrl] The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
     * @param {String} [fallbackAssignmentCallbackUrl] The URL that we should call when a call to the `assignment_callback_url` fails.
     * @param {Number} [taskReservationTimeout] How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
     * @param {module:api/TaskrouterV1WorkflowApi~createWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkflow}
     */
    createWorkflow(workspaceSid, configuration, friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling createWorkflow");
      }
      // verify the required parameter 'configuration' is set
      if (configuration === undefined || configuration === null) {
        throw new Error("Missing the required parameter 'configuration' when calling createWorkflow");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createWorkflow");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AssignmentCallbackUrl': opts['assignmentCallbackUrl'],
        'Configuration': configuration,
        'FallbackAssignmentCallbackUrl': opts['fallbackAssignmentCallbackUrl'],
        'FriendlyName': friendlyName,
        'TaskReservationTimeout': opts['taskReservationTimeout']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkflow;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflow operation.
     * @callback module:api/TaskrouterV1WorkflowApi~deleteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Workflow to delete.
     * @param {String} sid The SID of the Workflow resource to delete.
     * @param {module:api/TaskrouterV1WorkflowApi~deleteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflow(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling deleteWorkflow");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteWorkflow");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchWorkflow operation.
     * @callback module:api/TaskrouterV1WorkflowApi~fetchWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Workflow to fetch.
     * @param {String} sid The SID of the Workflow resource to fetch.
     * @param {module:api/TaskrouterV1WorkflowApi~fetchWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkflow}
     */
    fetchWorkflow(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchWorkflow");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWorkflow");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkflow;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkflow operation.
     * @callback module:api/TaskrouterV1WorkflowApi~listWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Workflow to read.
     * @param {Object} opts Optional parameters
     * @param {String} [friendlyName] The `friendly_name` of the Workflow resources to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1WorkflowApi~listWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkflowResponse}
     */
    listWorkflow(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listWorkflow");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
        'FriendlyName': opts['friendlyName'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkflowResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflow operation.
     * @callback module:api/TaskrouterV1WorkflowApi~updateWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Workflow to update.
     * @param {String} sid The SID of the Workflow resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [assignmentCallbackUrl] The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details.
     * @param {String} [configuration] A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information.
     * @param {String} [fallbackAssignmentCallbackUrl] The URL that we should call when a call to the `assignment_callback_url` fails.
     * @param {String} [friendlyName] A descriptive string that you create to describe the Workflow resource. For example, `Inbound Call Workflow` or `2014 Outbound Campaign`.
     * @param {String} [reEvaluateTasks] Whether or not to re-evaluate Tasks. The default is `false`, which means Tasks in the Workflow will not be processed through the assignment loop again.
     * @param {Number} [taskReservationTimeout] How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to `86,400` (24 hours) and the default is `120`.
     * @param {module:api/TaskrouterV1WorkflowApi~updateWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkflow}
     */
    updateWorkflow(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateWorkflow");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWorkflow");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AssignmentCallbackUrl': opts['assignmentCallbackUrl'],
        'Configuration': opts['configuration'],
        'FallbackAssignmentCallbackUrl': opts['fallbackAssignmentCallbackUrl'],
        'FriendlyName': opts['friendlyName'],
        'ReEvaluateTasks': opts['reEvaluateTasks'],
        'TaskReservationTimeout': opts['taskReservationTimeout']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkflow;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
