/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTaskQueueResponse from '../model/ListTaskQueueResponse';
import TaskQueueEnumTaskOrder from '../model/TaskQueueEnumTaskOrder';
import TaskrouterV1WorkspaceTaskQueue from '../model/TaskrouterV1WorkspaceTaskQueue';

/**
* TaskrouterV1TaskQueue service.
* @module api/TaskrouterV1TaskQueueApi
* @version 1.55.0
*/
export default class TaskrouterV1TaskQueueApi {

    /**
    * Constructs a new TaskrouterV1TaskQueueApi. 
    * @alias module:api/TaskrouterV1TaskQueueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTaskQueue operation.
     * @callback module:api/TaskrouterV1TaskQueueApi~createTaskQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskQueue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace that the new TaskQueue belongs to.
     * @param {String} friendlyName A descriptive string that you create to describe the TaskQueue. For example `Support-Tier 1`, `Sales`, or `Escalation`.
     * @param {Object} opts Optional parameters
     * @param {String} [assignmentActivitySid] The SID of the Activity to assign Workers when a task is assigned to them.
     * @param {Number} [maxReservedWorkers] The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1.
     * @param {String} [reservationActivitySid] The SID of the Activity to assign Workers when a task is reserved for them.
     * @param {String} [targetWorkers] A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, `'\\\"language\\\" == \\\"spanish\\\"'`. The default value is `1==1`. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers).
     * @param {module:model/TaskQueueEnumTaskOrder} [taskOrder] 
     * @param {module:api/TaskrouterV1TaskQueueApi~createTaskQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskQueue}
     */
    createTaskQueue(workspaceSid, friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling createTaskQueue");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createTaskQueue");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AssignmentActivitySid': opts['assignmentActivitySid'],
        'FriendlyName': friendlyName,
        'MaxReservedWorkers': opts['maxReservedWorkers'],
        'ReservationActivitySid': opts['reservationActivitySid'],
        'TargetWorkers': opts['targetWorkers'],
        'TaskOrder': opts['taskOrder']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskQueue;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskQueue operation.
     * @callback module:api/TaskrouterV1TaskQueueApi~deleteTaskQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskQueue to delete.
     * @param {String} sid The SID of the TaskQueue resource to delete.
     * @param {module:api/TaskrouterV1TaskQueueApi~deleteTaskQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaskQueue(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling deleteTaskQueue");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTaskQueue");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTaskQueue operation.
     * @callback module:api/TaskrouterV1TaskQueueApi~fetchTaskQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskQueue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskQueue to fetch.
     * @param {String} sid The SID of the TaskQueue resource to fetch.
     * @param {module:api/TaskrouterV1TaskQueueApi~fetchTaskQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskQueue}
     */
    fetchTaskQueue(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchTaskQueue");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTaskQueue");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskQueue;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskQueue operation.
     * @callback module:api/TaskrouterV1TaskQueueApi~listTaskQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskQueue to read.
     * @param {Object} opts Optional parameters
     * @param {String} [friendlyName] The `friendly_name` of the TaskQueue resources to read.
     * @param {String} [evaluateWorkerAttributes] The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter.
     * @param {String} [workerSid] The SID of the Worker with the TaskQueue resources to read.
     * @param {String} [ordering] Sorting parameter for TaskQueues
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1TaskQueueApi~listTaskQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskQueueResponse}
     */
    listTaskQueue(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listTaskQueue");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
        'FriendlyName': opts['friendlyName'],
        'EvaluateWorkerAttributes': opts['evaluateWorkerAttributes'],
        'WorkerSid': opts['workerSid'],
        'Ordering': opts['ordering'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTaskQueueResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskQueue operation.
     * @callback module:api/TaskrouterV1TaskQueueApi~updateTaskQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskQueue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskQueue to update.
     * @param {String} sid The SID of the TaskQueue resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [assignmentActivitySid] The SID of the Activity to assign Workers when a task is assigned for them.
     * @param {String} [friendlyName] A descriptive string that you create to describe the TaskQueue. For example `Support-Tier 1`, `Sales`, or `Escalation`.
     * @param {Number} [maxReservedWorkers] The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50.
     * @param {String} [reservationActivitySid] The SID of the Activity to assign Workers when a task is reserved for them.
     * @param {String} [targetWorkers] A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example '\\\"language\\\" == \\\"spanish\\\"' If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below.
     * @param {module:model/TaskQueueEnumTaskOrder} [taskOrder] 
     * @param {module:api/TaskrouterV1TaskQueueApi~updateTaskQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskQueue}
     */
    updateTaskQueue(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateTaskQueue");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTaskQueue");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AssignmentActivitySid': opts['assignmentActivitySid'],
        'FriendlyName': opts['friendlyName'],
        'MaxReservedWorkers': opts['maxReservedWorkers'],
        'ReservationActivitySid': opts['reservationActivitySid'],
        'TargetWorkers': opts['targetWorkers'],
        'TaskOrder': opts['taskOrder']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskQueue;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
