/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListEventResponse from '../model/ListEventResponse';
import TaskrouterV1WorkspaceEvent from '../model/TaskrouterV1WorkspaceEvent';

/**
* TaskrouterV1Event service.
* @module api/TaskrouterV1EventApi
* @version 1.55.0
*/
export default class TaskrouterV1EventApi {

    /**
    * Constructs a new TaskrouterV1EventApi. 
    * @alias module:api/TaskrouterV1EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchEvent operation.
     * @callback module:api/TaskrouterV1EventApi~fetchEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Event to fetch.
     * @param {String} sid The SID of the Event resource to fetch.
     * @param {module:api/TaskrouterV1EventApi~fetchEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceEvent}
     */
    fetchEvent(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchEvent");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchEvent");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceEvent;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Events/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvent operation.
     * @callback module:api/TaskrouterV1EventApi~listEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace.
     * @param {Object} opts Optional parameters
     * @param {Date} [endDate] Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
     * @param {String} [eventType] The type of Events to read. Returns only Events of the type specified.
     * @param {Number} [minutes] The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is `15` minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted.
     * @param {String} [reservationSid] The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation.
     * @param {Date} [startDate] Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted.
     * @param {String} [taskQueueSid] The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue.
     * @param {String} [taskSid] The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task.
     * @param {String} [workerSid] The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker.
     * @param {String} [workflowSid] The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow.
     * @param {String} [taskChannel] The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel.
     * @param {String} [sid] The SID of the Event resource to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1EventApi~listEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventResponse}
     */
    listEvent(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listEvent");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
        'EndDate': opts['endDate'],
        'EventType': opts['eventType'],
        'Minutes': opts['minutes'],
        'ReservationSid': opts['reservationSid'],
        'StartDate': opts['startDate'],
        'TaskQueueSid': opts['taskQueueSid'],
        'TaskSid': opts['taskSid'],
        'WorkerSid': opts['workerSid'],
        'WorkflowSid': opts['workflowSid'],
        'TaskChannel': opts['taskChannel'],
        'Sid': opts['sid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEventResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
