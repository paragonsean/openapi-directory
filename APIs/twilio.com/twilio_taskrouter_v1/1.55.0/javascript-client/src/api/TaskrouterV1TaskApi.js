/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTaskResponse from '../model/ListTaskResponse';
import TaskEnumStatus from '../model/TaskEnumStatus';
import TaskrouterV1WorkspaceTask from '../model/TaskrouterV1WorkspaceTask';

/**
* TaskrouterV1Task service.
* @module api/TaskrouterV1TaskApi
* @version 1.55.0
*/
export default class TaskrouterV1TaskApi {

    /**
    * Constructs a new TaskrouterV1TaskApi. 
    * @alias module:api/TaskrouterV1TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/TaskrouterV1TaskApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace that the new Task belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] A URL-encoded JSON string with the attributes of the new task. This value is passed to the Workflow's `assignment_callback_url` when the Task is assigned to a Worker. For example: `{ \\\"task_type\\\": \\\"call\\\", \\\"twilio_call_sid\\\": \\\"CAxxx\\\", \\\"customer_ticket_number\\\": \\\"12345\\\" }`.
     * @param {Number} [priority] The priority to assign the new task and override the default. When supplied, the new Task will have this priority unless it matches a Workflow Target with a Priority set. When not supplied, the new Task will have the priority of the matching Workflow Target. Value can be 0 to 2^31^ (2,147,483,647).
     * @param {String} [taskChannel] When MultiTasking is enabled, specify the TaskChannel by passing either its `unique_name` or `sid`. Default value is `default`.
     * @param {Number} [timeout] The amount of time in seconds the new task can live before being assigned. Can be up to a maximum of 2 weeks (1,209,600 seconds). The default value is 24 hours (86,400 seconds). On timeout, the `task.canceled` event will fire with description `Task TTL Exceeded`.
     * @param {Date} [virtualStartTime] The virtual start time to assign the new task and override the default. When supplied, the new task will have this virtual start time. When not supplied, the new task will have the virtual start time equal to `date_created`. Value can't be in the future.
     * @param {String} [workflowSid] The SID of the Workflow that you would like to handle routing for the new Task. If there is only one Workflow defined for the Workspace that you are posting the new task to, this parameter is optional.
     * @param {module:api/TaskrouterV1TaskApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTask}
     */
    createTask(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling createTask");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Priority': opts['priority'],
        'TaskChannel': opts['taskChannel'],
        'Timeout': opts['timeout'],
        'VirtualStartTime': opts['virtualStartTime'],
        'WorkflowSid': opts['workflowSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTask;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/TaskrouterV1TaskApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task to delete.
     * @param {String} sid The SID of the Task resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] If provided, deletes this Task if (and only if) the [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header of the Task matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match).
     * @param {module:api/TaskrouterV1TaskApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTask(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling deleteTask");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTask");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTask operation.
     * @callback module:api/TaskrouterV1TaskApi~fetchTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task to fetch.
     * @param {String} sid The SID of the Task resource to fetch.
     * @param {module:api/TaskrouterV1TaskApi~fetchTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTask}
     */
    fetchTask(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchTask");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTask");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTask;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTask operation.
     * @callback module:api/TaskrouterV1TaskApi~listTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Tasks to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [priority] The priority value of the Tasks to read. Returns the list of all Tasks in the Workspace with the specified priority.
     * @param {Array.<String>} [assignmentStatus] The `assignment_status` of the Tasks you want to read. Can be: `pending`, `reserved`, `assigned`, `canceled`, `wrapping`, or `completed`. Returns all Tasks in the Workspace with the specified `assignment_status`.
     * @param {String} [workflowSid] The SID of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this SID.
     * @param {String} [workflowName] The friendly name of the Workflow with the Tasks to read. Returns the Tasks controlled by the Workflow identified by this friendly name.
     * @param {String} [taskQueueSid] The SID of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this SID.
     * @param {String} [taskQueueName] The `friendly_name` of the TaskQueue with the Tasks to read. Returns the Tasks waiting in the TaskQueue identified by this friendly name.
     * @param {String} [evaluateTaskAttributes] The attributes of the Tasks to read. Returns the Tasks that match the attributes specified in this parameter.
     * @param {String} [ordering] How to order the returned Task resources. By default, Tasks are sorted by ascending DateCreated. This value is specified as: `Attribute:Order`, where `Attribute` can be either `DateCreated`, `Priority`, or `VirtualStartTime` and `Order` can be either `asc` or `desc`. For example, `Priority:desc` returns Tasks ordered in descending order of their Priority. Pairings of sort orders can be specified in a comma-separated list such as `Priority:desc,DateCreated:asc`, which returns the Tasks in descending Priority order and ascending DateCreated Order. The only ordering pairing not allowed is DateCreated and VirtualStartTime.
     * @param {Boolean} [hasAddons] Whether to read Tasks with Add-ons. If `true`, returns only Tasks with Add-ons. If `false`, returns only Tasks without Add-ons.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1TaskApi~listTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskResponse}
     */
    listTask(workspaceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listTask");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid
      };
      let queryParams = {
        'Priority': opts['priority'],
        'AssignmentStatus': this.apiClient.buildCollectionParam(opts['assignmentStatus'], 'multi'),
        'WorkflowSid': opts['workflowSid'],
        'WorkflowName': opts['workflowName'],
        'TaskQueueSid': opts['taskQueueSid'],
        'TaskQueueName': opts['taskQueueName'],
        'EvaluateTaskAttributes': opts['evaluateTaskAttributes'],
        'Ordering': opts['ordering'],
        'HasAddons': opts['hasAddons'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTaskResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/TaskrouterV1TaskApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the Task to update.
     * @param {String} sid The SID of the Task resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] If provided, applies this mutation if (and only if) the [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header of the Task matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match).
     * @param {module:model/TaskEnumStatus} [assignmentStatus] 
     * @param {String} [attributes] The JSON string that describes the custom attributes of the task.
     * @param {Number} [priority] The Task's new priority value. When supplied, the Task takes on the specified priority unless it matches a Workflow Target with a Priority set. Value can be 0 to 2^31^ (2,147,483,647).
     * @param {String} [reason] The reason that the Task was canceled or completed. This parameter is required only if the Task is canceled or completed. Setting this value queues the task for deletion and logs the reason.
     * @param {String} [taskChannel] When MultiTasking is enabled, specify the TaskChannel with the task to update. Can be the TaskChannel's SID or its `unique_name`, such as `voice`, `sms`, or `default`.
     * @param {Date} [virtualStartTime] The task's new virtual start time value. When supplied, the Task takes on the specified virtual start time. Value can't be in the future.
     * @param {module:api/TaskrouterV1TaskApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTask}
     */
    updateTask(workspaceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateTask");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTask");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
        'AssignmentStatus': opts['assignmentStatus'],
        'Attributes': opts['attributes'],
        'Priority': opts['priority'],
        'Reason': opts['reason'],
        'TaskChannel': opts['taskChannel'],
        'VirtualStartTime': opts['virtualStartTime']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTask;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
