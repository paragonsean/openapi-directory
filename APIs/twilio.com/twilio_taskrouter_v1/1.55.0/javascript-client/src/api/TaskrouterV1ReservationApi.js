/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTaskReservationResponse from '../model/ListTaskReservationResponse';
import ListWorkerReservationResponse from '../model/ListWorkerReservationResponse';
import TaskReservationEnumCallStatus from '../model/TaskReservationEnumCallStatus';
import TaskReservationEnumConferenceEvent from '../model/TaskReservationEnumConferenceEvent';
import TaskReservationEnumStatus from '../model/TaskReservationEnumStatus';
import TaskReservationEnumSupervisorMode from '../model/TaskReservationEnumSupervisorMode';
import TaskrouterV1WorkspaceTaskTaskReservation from '../model/TaskrouterV1WorkspaceTaskTaskReservation';
import TaskrouterV1WorkspaceWorkerWorkerReservation from '../model/TaskrouterV1WorkspaceWorkerWorkerReservation';
import WorkerReservationEnumCallStatus from '../model/WorkerReservationEnumCallStatus';
import WorkerReservationEnumConferenceEvent from '../model/WorkerReservationEnumConferenceEvent';
import WorkerReservationEnumStatus from '../model/WorkerReservationEnumStatus';

/**
* TaskrouterV1Reservation service.
* @module api/TaskrouterV1ReservationApi
* @version 1.55.0
*/
export default class TaskrouterV1ReservationApi {

    /**
    * Constructs a new TaskrouterV1ReservationApi. 
    * @alias module:api/TaskrouterV1ReservationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchTaskReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~fetchTaskReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskTaskReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskReservation resource to fetch.
     * @param {String} taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch.
     * @param {String} sid The SID of the TaskReservation resource to fetch.
     * @param {module:api/TaskrouterV1ReservationApi~fetchTaskReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskTaskReservation}
     */
    fetchTaskReservation(workspaceSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchTaskReservation");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling fetchTaskReservation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTaskReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskTaskReservation;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchWorkerReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~fetchWorkerReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkerWorkerReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch.
     * @param {String} workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch.
     * @param {String} sid The SID of the WorkerReservation resource to fetch.
     * @param {module:api/TaskrouterV1ReservationApi~fetchWorkerReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkerWorkerReservation}
     */
    fetchWorkerReservation(workspaceSid, workerSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling fetchWorkerReservation");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling fetchWorkerReservation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWorkerReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkerWorkerReservation;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~listTaskReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskReservation resources to read.
     * @param {String} taskSid The SID of the reserved Task resource with the TaskReservation resources to read.
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskReservationEnumStatus} [reservationStatus] Returns the list of reservations for a task with a specified ReservationStatus.  Can be: `pending`, `accepted`, `rejected`, or `timeout`.
     * @param {String} [workerSid] The SID of the reserved Worker resource to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1ReservationApi~listTaskReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskReservationResponse}
     */
    listTaskReservation(workspaceSid, taskSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listTaskReservation");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling listTaskReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'TaskSid': taskSid
      };
      let queryParams = {
        'ReservationStatus': opts['reservationStatus'],
        'WorkerSid': opts['workerSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTaskReservationResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkerReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~listWorkerReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkerReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerReservation resources to read.
     * @param {String} workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read.
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkerReservationEnumStatus} [reservationStatus] Returns the list of reservations for a worker with a specified ReservationStatus. Can be: `pending`, `accepted`, `rejected`, `timeout`, `canceled`, or `rescinded`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/TaskrouterV1ReservationApi~listWorkerReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkerReservationResponse}
     */
    listWorkerReservation(workspaceSid, workerSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling listWorkerReservation");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling listWorkerReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid
      };
      let queryParams = {
        'ReservationStatus': opts['reservationStatus'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkerReservationResponse;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~updateTaskReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceTaskTaskReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the TaskReservation resources to update.
     * @param {String} taskSid The SID of the reserved Task resource with the TaskReservation resources to update.
     * @param {String} sid The SID of the TaskReservation resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The If-Match HTTP request header
     * @param {String} [beep] Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     * @param {Boolean} [beepOnCustomerEntrance] Whether to play a notification beep when the customer joins.
     * @param {Boolean} [callAccept] Whether to accept a reservation when executing a Call instruction.
     * @param {String} [callFrom] The Caller ID of the outbound call when executing a Call instruction.
     * @param {String} [callRecord] Whether to record both legs of a call when executing a Call instruction or which leg to record.
     * @param {String} [callStatusCallbackUrl] The URL to call  for the completed call event when executing a Call instruction.
     * @param {Number} [callTimeout] Timeout for call when executing a Call instruction.
     * @param {String} [callTo] The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {String} [callUrl] TwiML URI executed on answering the worker's leg as a result of the Call instruction.
     * @param {String} [conferenceRecord] Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     * @param {String} [conferenceRecordingStatusCallback] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     * @param {module:model/String} [conferenceRecordingStatusCallbackMethod] The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceStatusCallback] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     * @param {Array.<module:model/TaskReservationEnumConferenceEvent>} [conferenceStatusCallbackEvent] The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
     * @param {module:model/String} [conferenceStatusCallbackMethod] The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceTrim] How to trim the leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     * @param {String} [dequeueFrom] The Caller ID of the call to the worker when executing a Dequeue instruction.
     * @param {String} [dequeuePostWorkActivitySid] The SID of the Activity resource to start after executing a Dequeue instruction.
     * @param {String} [dequeueRecord] Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
     * @param {Array.<String>} [dequeueStatusCallbackEvent] The Call progress events sent via webhooks as a result of a Dequeue instruction.
     * @param {String} [dequeueStatusCallbackUrl] The Callback URL for completed call event when executing a Dequeue instruction.
     * @param {Number} [dequeueTimeout] Timeout for call when executing a Dequeue instruction.
     * @param {String} [dequeueTo] The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {Boolean} [earlyMedia] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
     * @param {Boolean} [endConferenceOnCustomerExit] Whether to end the conference when the customer leaves.
     * @param {Boolean} [endConferenceOnExit] Whether to end the conference when the agent leaves.
     * @param {String} [from] The Caller ID of the call to the worker when executing a Conference instruction.
     * @param {String} [instruction] The assignment instruction for reservation.
     * @param {String} [jitterBufferSize] The jitter buffer size for conference. Can be: `small`, `medium`, `large`, `off`.
     * @param {Number} [maxParticipants] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     * @param {Boolean} [muted] Whether the agent is muted in the conference. The default is `false`.
     * @param {String} [postWorkActivitySid] The new worker activity SID after executing a Conference instruction.
     * @param {Boolean} [record] Whether to record the participant and their conferences, including the time between conferences. The default is `false`.
     * @param {String} [recordingChannels] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     * @param {String} [recordingStatusCallback] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     * @param {module:model/String} [recordingStatusCallbackMethod] The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {Boolean} [redirectAccept] Whether the reservation should be accepted when executing a Redirect instruction.
     * @param {String} [redirectCallSid] The Call SID of the call parked in the queue when executing a Redirect instruction.
     * @param {String} [redirectUrl] TwiML URI to redirect the call to when executing the Redirect instruction.
     * @param {String} [region] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     * @param {module:model/TaskReservationEnumStatus} [reservationStatus] 
     * @param {String} [sipAuthPassword] The SIP password for authentication.
     * @param {String} [sipAuthUsername] The SIP username used for authentication.
     * @param {Boolean} [startConferenceOnEnter] Whether to start the conference when the participant joins, if it has not already started. The default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application.
     * @param {Array.<module:model/TaskReservationEnumCallStatus>} [statusCallbackEvent] The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     * @param {String} [supervisor] The Supervisor SID/URI when executing the Supervise instruction.
     * @param {module:model/TaskReservationEnumSupervisorMode} [supervisorMode] 
     * @param {Number} [timeout] Timeout for call when executing a Conference instruction.
     * @param {String} [to] The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {module:model/String} [waitMethod] The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * @param {String} [waitUrl] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * @param {String} [workerActivitySid] The new worker activity SID if rejecting a reservation.
     * @param {module:api/TaskrouterV1ReservationApi~updateTaskReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceTaskTaskReservation}
     */
    updateTaskReservation(workspaceSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateTaskReservation");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling updateTaskReservation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateTaskReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
        'Beep': opts['beep'],
        'BeepOnCustomerEntrance': opts['beepOnCustomerEntrance'],
        'CallAccept': opts['callAccept'],
        'CallFrom': opts['callFrom'],
        'CallRecord': opts['callRecord'],
        'CallStatusCallbackUrl': opts['callStatusCallbackUrl'],
        'CallTimeout': opts['callTimeout'],
        'CallTo': opts['callTo'],
        'CallUrl': opts['callUrl'],
        'ConferenceRecord': opts['conferenceRecord'],
        'ConferenceRecordingStatusCallback': opts['conferenceRecordingStatusCallback'],
        'ConferenceRecordingStatusCallbackMethod': opts['conferenceRecordingStatusCallbackMethod'],
        'ConferenceStatusCallback': opts['conferenceStatusCallback'],
        'ConferenceStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['conferenceStatusCallbackEvent'], 'csv'),
        'ConferenceStatusCallbackMethod': opts['conferenceStatusCallbackMethod'],
        'ConferenceTrim': opts['conferenceTrim'],
        'DequeueFrom': opts['dequeueFrom'],
        'DequeuePostWorkActivitySid': opts['dequeuePostWorkActivitySid'],
        'DequeueRecord': opts['dequeueRecord'],
        'DequeueStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['dequeueStatusCallbackEvent'], 'csv'),
        'DequeueStatusCallbackUrl': opts['dequeueStatusCallbackUrl'],
        'DequeueTimeout': opts['dequeueTimeout'],
        'DequeueTo': opts['dequeueTo'],
        'EarlyMedia': opts['earlyMedia'],
        'EndConferenceOnCustomerExit': opts['endConferenceOnCustomerExit'],
        'EndConferenceOnExit': opts['endConferenceOnExit'],
        'From': opts['from'],
        'Instruction': opts['instruction'],
        'JitterBufferSize': opts['jitterBufferSize'],
        'MaxParticipants': opts['maxParticipants'],
        'Muted': opts['muted'],
        'PostWorkActivitySid': opts['postWorkActivitySid'],
        'Record': opts['record'],
        'RecordingChannels': opts['recordingChannels'],
        'RecordingStatusCallback': opts['recordingStatusCallback'],
        'RecordingStatusCallbackMethod': opts['recordingStatusCallbackMethod'],
        'RedirectAccept': opts['redirectAccept'],
        'RedirectCallSid': opts['redirectCallSid'],
        'RedirectUrl': opts['redirectUrl'],
        'Region': opts['region'],
        'ReservationStatus': opts['reservationStatus'],
        'SipAuthPassword': opts['sipAuthPassword'],
        'SipAuthUsername': opts['sipAuthUsername'],
        'StartConferenceOnEnter': opts['startConferenceOnEnter'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackEvent': this.apiClient.buildCollectionParam(opts['statusCallbackEvent'], 'csv'),
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'Supervisor': opts['supervisor'],
        'SupervisorMode': opts['supervisorMode'],
        'Timeout': opts['timeout'],
        'To': opts['to'],
        'WaitMethod': opts['waitMethod'],
        'WaitUrl': opts['waitUrl'],
        'WorkerActivitySid': opts['workerActivitySid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceTaskTaskReservation;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkerReservation operation.
     * @callback module:api/TaskrouterV1ReservationApi~updateWorkerReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskrouterV1WorkspaceWorkerWorkerReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} workspaceSid The SID of the Workspace with the WorkerReservation resources to update.
     * @param {String} workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update.
     * @param {String} sid The SID of the WorkerReservation resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The If-Match HTTP request header
     * @param {String} [beep] Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     * @param {Boolean} [beepOnCustomerEntrance] Whether to play a notification beep when the customer joins.
     * @param {Boolean} [callAccept] Whether to accept a reservation when executing a Call instruction.
     * @param {String} [callFrom] The Caller ID of the outbound call when executing a Call instruction.
     * @param {String} [callRecord] Whether to record both legs of a call when executing a Call instruction.
     * @param {String} [callStatusCallbackUrl] The URL to call for the completed call event when executing a Call instruction.
     * @param {Number} [callTimeout] The timeout for a call when executing a Call instruction.
     * @param {String} [callTo] The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {String} [callUrl] TwiML URI executed on answering the worker's leg as a result of the Call instruction.
     * @param {String} [conferenceRecord] Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     * @param {String} [conferenceRecordingStatusCallback] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     * @param {module:model/String} [conferenceRecordingStatusCallbackMethod] The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceStatusCallback] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     * @param {Array.<module:model/WorkerReservationEnumConferenceEvent>} [conferenceStatusCallbackEvent] The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
     * @param {module:model/String} [conferenceStatusCallbackMethod] The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceTrim] Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     * @param {String} [dequeueFrom] The caller ID of the call to the worker when executing a Dequeue instruction.
     * @param {String} [dequeuePostWorkActivitySid] The SID of the Activity resource to start after executing a Dequeue instruction.
     * @param {String} [dequeueRecord] Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
     * @param {Array.<String>} [dequeueStatusCallbackEvent] The call progress events sent via webhooks as a result of a Dequeue instruction.
     * @param {String} [dequeueStatusCallbackUrl] The callback URL for completed call event when executing a Dequeue instruction.
     * @param {Number} [dequeueTimeout] The timeout for call when executing a Dequeue instruction.
     * @param {String} [dequeueTo] The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {Boolean} [earlyMedia] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
     * @param {Boolean} [endConferenceOnCustomerExit] Whether to end the conference when the customer leaves.
     * @param {Boolean} [endConferenceOnExit] Whether to end the conference when the agent leaves.
     * @param {String} [from] The caller ID of the call to the worker when executing a Conference instruction.
     * @param {String} [instruction] The assignment instruction for the reservation.
     * @param {String} [jitterBufferSize] The jitter buffer size for conference. Can be: `small`, `medium`, `large`, `off`.
     * @param {Number} [maxParticipants] The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     * @param {Boolean} [muted] Whether the agent is muted in the conference. Defaults to `false`.
     * @param {String} [postWorkActivitySid] The new worker activity SID after executing a Conference instruction.
     * @param {Boolean} [record] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     * @param {String} [recordingChannels] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     * @param {String} [recordingStatusCallback] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     * @param {module:model/String} [recordingStatusCallbackMethod] The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {Boolean} [redirectAccept] Whether the reservation should be accepted when executing a Redirect instruction.
     * @param {String} [redirectCallSid] The Call SID of the call parked in the queue when executing a Redirect instruction.
     * @param {String} [redirectUrl] TwiML URI to redirect the call to when executing the Redirect instruction.
     * @param {String} [region] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     * @param {module:model/WorkerReservationEnumStatus} [reservationStatus] 
     * @param {String} [sipAuthPassword] The SIP password for authentication.
     * @param {String} [sipAuthUsername] The SIP username used for authentication.
     * @param {Boolean} [startConferenceOnEnter] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application.
     * @param {Array.<module:model/WorkerReservationEnumCallStatus>} [statusCallbackEvent] The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     * @param {Number} [timeout] The timeout for a call when executing a Conference instruction.
     * @param {String} [to] The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * @param {module:model/String} [waitMethod] The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * @param {String} [waitUrl] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * @param {String} [workerActivitySid] The new worker activity SID if rejecting a reservation.
     * @param {module:api/TaskrouterV1ReservationApi~updateWorkerReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskrouterV1WorkspaceWorkerWorkerReservation}
     */
    updateWorkerReservation(workspaceSid, workerSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSid' is set
      if (workspaceSid === undefined || workspaceSid === null) {
        throw new Error("Missing the required parameter 'workspaceSid' when calling updateWorkerReservation");
      }
      // verify the required parameter 'workerSid' is set
      if (workerSid === undefined || workerSid === null) {
        throw new Error("Missing the required parameter 'workerSid' when calling updateWorkerReservation");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWorkerReservation");
      }

      let pathParams = {
        'WorkspaceSid': workspaceSid,
        'WorkerSid': workerSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
        'Beep': opts['beep'],
        'BeepOnCustomerEntrance': opts['beepOnCustomerEntrance'],
        'CallAccept': opts['callAccept'],
        'CallFrom': opts['callFrom'],
        'CallRecord': opts['callRecord'],
        'CallStatusCallbackUrl': opts['callStatusCallbackUrl'],
        'CallTimeout': opts['callTimeout'],
        'CallTo': opts['callTo'],
        'CallUrl': opts['callUrl'],
        'ConferenceRecord': opts['conferenceRecord'],
        'ConferenceRecordingStatusCallback': opts['conferenceRecordingStatusCallback'],
        'ConferenceRecordingStatusCallbackMethod': opts['conferenceRecordingStatusCallbackMethod'],
        'ConferenceStatusCallback': opts['conferenceStatusCallback'],
        'ConferenceStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['conferenceStatusCallbackEvent'], 'csv'),
        'ConferenceStatusCallbackMethod': opts['conferenceStatusCallbackMethod'],
        'ConferenceTrim': opts['conferenceTrim'],
        'DequeueFrom': opts['dequeueFrom'],
        'DequeuePostWorkActivitySid': opts['dequeuePostWorkActivitySid'],
        'DequeueRecord': opts['dequeueRecord'],
        'DequeueStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['dequeueStatusCallbackEvent'], 'csv'),
        'DequeueStatusCallbackUrl': opts['dequeueStatusCallbackUrl'],
        'DequeueTimeout': opts['dequeueTimeout'],
        'DequeueTo': opts['dequeueTo'],
        'EarlyMedia': opts['earlyMedia'],
        'EndConferenceOnCustomerExit': opts['endConferenceOnCustomerExit'],
        'EndConferenceOnExit': opts['endConferenceOnExit'],
        'From': opts['from'],
        'Instruction': opts['instruction'],
        'JitterBufferSize': opts['jitterBufferSize'],
        'MaxParticipants': opts['maxParticipants'],
        'Muted': opts['muted'],
        'PostWorkActivitySid': opts['postWorkActivitySid'],
        'Record': opts['record'],
        'RecordingChannels': opts['recordingChannels'],
        'RecordingStatusCallback': opts['recordingStatusCallback'],
        'RecordingStatusCallbackMethod': opts['recordingStatusCallbackMethod'],
        'RedirectAccept': opts['redirectAccept'],
        'RedirectCallSid': opts['redirectCallSid'],
        'RedirectUrl': opts['redirectUrl'],
        'Region': opts['region'],
        'ReservationStatus': opts['reservationStatus'],
        'SipAuthPassword': opts['sipAuthPassword'],
        'SipAuthUsername': opts['sipAuthUsername'],
        'StartConferenceOnEnter': opts['startConferenceOnEnter'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackEvent': this.apiClient.buildCollectionParam(opts['statusCallbackEvent'], 'csv'),
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'Timeout': opts['timeout'],
        'To': opts['to'],
        'WaitMethod': opts['waitMethod'],
        'WaitUrl': opts['waitUrl'],
        'WorkerActivitySid': opts['workerActivitySid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TaskrouterV1WorkspaceWorkerWorkerReservation;
      let basePaths = ['https://taskrouter.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
