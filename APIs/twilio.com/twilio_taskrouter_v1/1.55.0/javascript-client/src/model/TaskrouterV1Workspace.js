/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkspaceEnumQueueOrder from './WorkspaceEnumQueueOrder';

/**
 * The TaskrouterV1Workspace model module.
 * @module model/TaskrouterV1Workspace
 * @version 1.55.0
 */
class TaskrouterV1Workspace {
    /**
     * Constructs a new <code>TaskrouterV1Workspace</code>.
     * @alias module:model/TaskrouterV1Workspace
     */
    constructor() { 
        
        TaskrouterV1Workspace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskrouterV1Workspace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskrouterV1Workspace} obj Optional instance to populate.
     * @return {module:model/TaskrouterV1Workspace} The populated <code>TaskrouterV1Workspace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskrouterV1Workspace();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('default_activity_name')) {
                obj['default_activity_name'] = ApiClient.convertToType(data['default_activity_name'], 'String');
            }
            if (data.hasOwnProperty('default_activity_sid')) {
                obj['default_activity_sid'] = ApiClient.convertToType(data['default_activity_sid'], 'String');
            }
            if (data.hasOwnProperty('event_callback_url')) {
                obj['event_callback_url'] = ApiClient.convertToType(data['event_callback_url'], 'String');
            }
            if (data.hasOwnProperty('events_filter')) {
                obj['events_filter'] = ApiClient.convertToType(data['events_filter'], 'String');
            }
            if (data.hasOwnProperty('friendly_name')) {
                obj['friendly_name'] = ApiClient.convertToType(data['friendly_name'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('multi_task_enabled')) {
                obj['multi_task_enabled'] = ApiClient.convertToType(data['multi_task_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('prioritize_queue_order')) {
                obj['prioritize_queue_order'] = WorkspaceEnumQueueOrder.constructFromObject(data['prioritize_queue_order']);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('timeout_activity_name')) {
                obj['timeout_activity_name'] = ApiClient.convertToType(data['timeout_activity_name'], 'String');
            }
            if (data.hasOwnProperty('timeout_activity_sid')) {
                obj['timeout_activity_sid'] = ApiClient.convertToType(data['timeout_activity_sid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskrouterV1Workspace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskrouterV1Workspace</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['default_activity_name'] && !(typeof data['default_activity_name'] === 'string' || data['default_activity_name'] instanceof String)) {
            throw new Error("Expected the field `default_activity_name` to be a primitive type in the JSON string but got " + data['default_activity_name']);
        }
        // ensure the json data is a string
        if (data['default_activity_sid'] && !(typeof data['default_activity_sid'] === 'string' || data['default_activity_sid'] instanceof String)) {
            throw new Error("Expected the field `default_activity_sid` to be a primitive type in the JSON string but got " + data['default_activity_sid']);
        }
        // ensure the json data is a string
        if (data['event_callback_url'] && !(typeof data['event_callback_url'] === 'string' || data['event_callback_url'] instanceof String)) {
            throw new Error("Expected the field `event_callback_url` to be a primitive type in the JSON string but got " + data['event_callback_url']);
        }
        // ensure the json data is a string
        if (data['events_filter'] && !(typeof data['events_filter'] === 'string' || data['events_filter'] instanceof String)) {
            throw new Error("Expected the field `events_filter` to be a primitive type in the JSON string but got " + data['events_filter']);
        }
        // ensure the json data is a string
        if (data['friendly_name'] && !(typeof data['friendly_name'] === 'string' || data['friendly_name'] instanceof String)) {
            throw new Error("Expected the field `friendly_name` to be a primitive type in the JSON string but got " + data['friendly_name']);
        }
        // ensure the json data is a string
        if (data['prioritize_queue_order'] && !(typeof data['prioritize_queue_order'] === 'string' || data['prioritize_queue_order'] instanceof String)) {
            throw new Error("Expected the field `prioritize_queue_order` to be a primitive type in the JSON string but got " + data['prioritize_queue_order']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['timeout_activity_name'] && !(typeof data['timeout_activity_name'] === 'string' || data['timeout_activity_name'] instanceof String)) {
            throw new Error("Expected the field `timeout_activity_name` to be a primitive type in the JSON string but got " + data['timeout_activity_name']);
        }
        // ensure the json data is a string
        if (data['timeout_activity_sid'] && !(typeof data['timeout_activity_sid'] === 'string' || data['timeout_activity_sid'] instanceof String)) {
            throw new Error("Expected the field `timeout_activity_sid` to be a primitive type in the JSON string but got " + data['timeout_activity_sid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
 * @member {String} account_sid
 */
TaskrouterV1Workspace.prototype['account_sid'] = undefined;

/**
 * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
TaskrouterV1Workspace.prototype['date_created'] = undefined;

/**
 * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_updated
 */
TaskrouterV1Workspace.prototype['date_updated'] = undefined;

/**
 * The name of the default activity.
 * @member {String} default_activity_name
 */
TaskrouterV1Workspace.prototype['default_activity_name'] = undefined;

/**
 * The SID of the Activity that will be used when new Workers are created in the Workspace.
 * @member {String} default_activity_sid
 */
TaskrouterV1Workspace.prototype['default_activity_sid'] = undefined;

/**
 * The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
 * @member {String} event_callback_url
 */
TaskrouterV1Workspace.prototype['event_callback_url'] = undefined;

/**
 * The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
 * @member {String} events_filter
 */
TaskrouterV1Workspace.prototype['events_filter'] = undefined;

/**
 * The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.
 * @member {String} friendly_name
 */
TaskrouterV1Workspace.prototype['friendly_name'] = undefined;

/**
 * The URLs of related resources.
 * @member {Object} links
 */
TaskrouterV1Workspace.prototype['links'] = undefined;

/**
 * Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
 * @member {Boolean} multi_task_enabled
 */
TaskrouterV1Workspace.prototype['multi_task_enabled'] = undefined;

/**
 * @member {module:model/WorkspaceEnumQueueOrder} prioritize_queue_order
 */
TaskrouterV1Workspace.prototype['prioritize_queue_order'] = undefined;

/**
 * The unique string that we created to identify the Workspace resource.
 * @member {String} sid
 */
TaskrouterV1Workspace.prototype['sid'] = undefined;

/**
 * The name of the timeout activity.
 * @member {String} timeout_activity_name
 */
TaskrouterV1Workspace.prototype['timeout_activity_name'] = undefined;

/**
 * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
 * @member {String} timeout_activity_sid
 */
TaskrouterV1Workspace.prototype['timeout_activity_sid'] = undefined;

/**
 * The absolute URL of the Workspace resource.
 * @member {String} url
 */
TaskrouterV1Workspace.prototype['url'] = undefined;






export default TaskrouterV1Workspace;

