/**
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TwilioTaskrouter);
  }
}(this, function(expect, TwilioTaskrouter) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskrouterV1WorkspaceTask', function() {
    it('should create an instance of TaskrouterV1WorkspaceTask', function() {
      // uncomment below and update the code to test TaskrouterV1WorkspaceTask
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be.a(TwilioTaskrouter.TaskrouterV1WorkspaceTask);
    });

    it('should have the property accountSid (base name: "account_sid")', function() {
      // uncomment below and update the code to test the property accountSid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property addons (base name: "addons")', function() {
      // uncomment below and update the code to test the property addons
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property age (base name: "age")', function() {
      // uncomment below and update the code to test the property age
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property assignmentStatus (base name: "assignment_status")', function() {
      // uncomment below and update the code to test the property assignmentStatus
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "date_created")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property dateUpdated (base name: "date_updated")', function() {
      // uncomment below and update the code to test the property dateUpdated
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property sid (base name: "sid")', function() {
      // uncomment below and update the code to test the property sid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property taskChannelSid (base name: "task_channel_sid")', function() {
      // uncomment below and update the code to test the property taskChannelSid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property taskChannelUniqueName (base name: "task_channel_unique_name")', function() {
      // uncomment below and update the code to test the property taskChannelUniqueName
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property taskQueueEnteredDate (base name: "task_queue_entered_date")', function() {
      // uncomment below and update the code to test the property taskQueueEnteredDate
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property taskQueueFriendlyName (base name: "task_queue_friendly_name")', function() {
      // uncomment below and update the code to test the property taskQueueFriendlyName
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property taskQueueSid (base name: "task_queue_sid")', function() {
      // uncomment below and update the code to test the property taskQueueSid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property virtualStartTime (base name: "virtual_start_time")', function() {
      // uncomment below and update the code to test the property virtualStartTime
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property workflowFriendlyName (base name: "workflow_friendly_name")', function() {
      // uncomment below and update the code to test the property workflowFriendlyName
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property workflowSid (base name: "workflow_sid")', function() {
      // uncomment below and update the code to test the property workflowSid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

    it('should have the property workspaceSid (base name: "workspace_sid")', function() {
      // uncomment below and update the code to test the property workspaceSid
      //var instance = new TwilioTaskrouter.TaskrouterV1WorkspaceTask();
      //expect(instance).to.be();
    });

  });

}));
