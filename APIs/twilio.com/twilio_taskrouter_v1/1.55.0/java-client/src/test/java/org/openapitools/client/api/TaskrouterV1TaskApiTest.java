/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListTaskResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TaskEnumStatus;
import org.openapitools.client.model.TaskrouterV1WorkspaceTask;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskrouterV1TaskApi
 */
@Disabled
public class TaskrouterV1TaskApiTest {

    private final TaskrouterV1TaskApi api = new TaskrouterV1TaskApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        String workspaceSid = null;
        String attributes = null;
        Integer priority = null;
        String taskChannel = null;
        Integer timeout = null;
        OffsetDateTime virtualStartTime = null;
        String workflowSid = null;
        TaskrouterV1WorkspaceTask response = api.createTask(workspaceSid, attributes, priority, taskChannel, timeout, virtualStartTime, workflowSid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String workspaceSid = null;
        String sid = null;
        String ifMatch = null;
        api.deleteTask(workspaceSid, sid, ifMatch);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTaskTest() throws ApiException {
        String workspaceSid = null;
        String sid = null;
        TaskrouterV1WorkspaceTask response = api.fetchTask(workspaceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskTest() throws ApiException {
        String workspaceSid = null;
        Integer priority = null;
        List<String> assignmentStatus = null;
        String workflowSid = null;
        String workflowName = null;
        String taskQueueSid = null;
        String taskQueueName = null;
        String evaluateTaskAttributes = null;
        String ordering = null;
        Boolean hasAddons = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTaskResponse response = api.listTask(workspaceSid, priority, assignmentStatus, workflowSid, workflowName, taskQueueSid, taskQueueName, evaluateTaskAttributes, ordering, hasAddons, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String workspaceSid = null;
        String sid = null;
        String ifMatch = null;
        TaskEnumStatus assignmentStatus = null;
        String attributes = null;
        Integer priority = null;
        String reason = null;
        String taskChannel = null;
        OffsetDateTime virtualStartTime = null;
        TaskrouterV1WorkspaceTask response = api.updateTask(workspaceSid, sid, ifMatch, assignmentStatus, attributes, priority, reason, taskChannel, virtualStartTime);
        // TODO: test validations
    }

}
