/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListTaskReservationResponse;
import org.openapitools.client.model.ListWorkerReservationResponse;
import org.openapitools.client.model.TaskReservationEnumCallStatus;
import org.openapitools.client.model.TaskReservationEnumConferenceEvent;
import org.openapitools.client.model.TaskReservationEnumStatus;
import org.openapitools.client.model.TaskReservationEnumSupervisorMode;
import org.openapitools.client.model.TaskrouterV1WorkspaceTaskTaskReservation;
import org.openapitools.client.model.TaskrouterV1WorkspaceWorkerWorkerReservation;
import java.net.URI;
import org.openapitools.client.model.WorkerReservationEnumCallStatus;
import org.openapitools.client.model.WorkerReservationEnumConferenceEvent;
import org.openapitools.client.model.WorkerReservationEnumStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskrouterV1ReservationApi
 */
@Disabled
public class TaskrouterV1ReservationApiTest {

    private final TaskrouterV1ReservationApi api = new TaskrouterV1ReservationApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTaskReservationTest() throws ApiException {
        String workspaceSid = null;
        String taskSid = null;
        String sid = null;
        TaskrouterV1WorkspaceTaskTaskReservation response = api.fetchTaskReservation(workspaceSid, taskSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchWorkerReservationTest() throws ApiException {
        String workspaceSid = null;
        String workerSid = null;
        String sid = null;
        TaskrouterV1WorkspaceWorkerWorkerReservation response = api.fetchWorkerReservation(workspaceSid, workerSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskReservationTest() throws ApiException {
        String workspaceSid = null;
        String taskSid = null;
        TaskReservationEnumStatus reservationStatus = null;
        String workerSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTaskReservationResponse response = api.listTaskReservation(workspaceSid, taskSid, reservationStatus, workerSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkerReservationTest() throws ApiException {
        String workspaceSid = null;
        String workerSid = null;
        WorkerReservationEnumStatus reservationStatus = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListWorkerReservationResponse response = api.listWorkerReservation(workspaceSid, workerSid, reservationStatus, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskReservationTest() throws ApiException {
        String workspaceSid = null;
        String taskSid = null;
        String sid = null;
        String ifMatch = null;
        String beep = null;
        Boolean beepOnCustomerEntrance = null;
        Boolean callAccept = null;
        String callFrom = null;
        String callRecord = null;
        URI callStatusCallbackUrl = null;
        Integer callTimeout = null;
        String callTo = null;
        URI callUrl = null;
        String conferenceRecord = null;
        URI conferenceRecordingStatusCallback = null;
        String conferenceRecordingStatusCallbackMethod = null;
        URI conferenceStatusCallback = null;
        List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent = null;
        String conferenceStatusCallbackMethod = null;
        String conferenceTrim = null;
        String dequeueFrom = null;
        String dequeuePostWorkActivitySid = null;
        String dequeueRecord = null;
        List<String> dequeueStatusCallbackEvent = null;
        URI dequeueStatusCallbackUrl = null;
        Integer dequeueTimeout = null;
        String dequeueTo = null;
        Boolean earlyMedia = null;
        Boolean endConferenceOnCustomerExit = null;
        Boolean endConferenceOnExit = null;
        String from = null;
        String instruction = null;
        String jitterBufferSize = null;
        Integer maxParticipants = null;
        Boolean muted = null;
        String postWorkActivitySid = null;
        Boolean record = null;
        String recordingChannels = null;
        URI recordingStatusCallback = null;
        String recordingStatusCallbackMethod = null;
        Boolean redirectAccept = null;
        String redirectCallSid = null;
        URI redirectUrl = null;
        String region = null;
        TaskReservationEnumStatus reservationStatus = null;
        String sipAuthPassword = null;
        String sipAuthUsername = null;
        Boolean startConferenceOnEnter = null;
        URI statusCallback = null;
        List<TaskReservationEnumCallStatus> statusCallbackEvent = null;
        String statusCallbackMethod = null;
        String supervisor = null;
        TaskReservationEnumSupervisorMode supervisorMode = null;
        Integer timeout = null;
        String to = null;
        String waitMethod = null;
        URI waitUrl = null;
        String workerActivitySid = null;
        TaskrouterV1WorkspaceTaskTaskReservation response = api.updateTaskReservation(workspaceSid, taskSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, supervisor, supervisorMode, timeout, to, waitMethod, waitUrl, workerActivitySid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkerReservationTest() throws ApiException {
        String workspaceSid = null;
        String workerSid = null;
        String sid = null;
        String ifMatch = null;
        String beep = null;
        Boolean beepOnCustomerEntrance = null;
        Boolean callAccept = null;
        String callFrom = null;
        String callRecord = null;
        URI callStatusCallbackUrl = null;
        Integer callTimeout = null;
        String callTo = null;
        URI callUrl = null;
        String conferenceRecord = null;
        URI conferenceRecordingStatusCallback = null;
        String conferenceRecordingStatusCallbackMethod = null;
        URI conferenceStatusCallback = null;
        List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent = null;
        String conferenceStatusCallbackMethod = null;
        String conferenceTrim = null;
        String dequeueFrom = null;
        String dequeuePostWorkActivitySid = null;
        String dequeueRecord = null;
        List<String> dequeueStatusCallbackEvent = null;
        URI dequeueStatusCallbackUrl = null;
        Integer dequeueTimeout = null;
        String dequeueTo = null;
        Boolean earlyMedia = null;
        Boolean endConferenceOnCustomerExit = null;
        Boolean endConferenceOnExit = null;
        String from = null;
        String instruction = null;
        String jitterBufferSize = null;
        Integer maxParticipants = null;
        Boolean muted = null;
        String postWorkActivitySid = null;
        Boolean record = null;
        String recordingChannels = null;
        URI recordingStatusCallback = null;
        String recordingStatusCallbackMethod = null;
        Boolean redirectAccept = null;
        String redirectCallSid = null;
        URI redirectUrl = null;
        String region = null;
        WorkerReservationEnumStatus reservationStatus = null;
        String sipAuthPassword = null;
        String sipAuthUsername = null;
        Boolean startConferenceOnEnter = null;
        URI statusCallback = null;
        List<WorkerReservationEnumCallStatus> statusCallbackEvent = null;
        String statusCallbackMethod = null;
        Integer timeout = null;
        String to = null;
        String waitMethod = null;
        URI waitUrl = null;
        String workerActivitySid = null;
        TaskrouterV1WorkspaceWorkerWorkerReservation response = api.updateWorkerReservation(workspaceSid, workerSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeout, to, waitMethod, waitUrl, workerActivitySid);
        // TODO: test validations
    }

}
