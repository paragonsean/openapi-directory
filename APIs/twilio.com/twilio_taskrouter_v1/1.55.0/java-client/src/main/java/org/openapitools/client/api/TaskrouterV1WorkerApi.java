/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListWorkerResponse;
import org.openapitools.client.model.TaskrouterV1WorkspaceWorker;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1WorkerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1WorkerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1WorkerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWorker
     * @param workspaceSid The SID of the Workspace that the new Worker belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the new Worker. It can be up to 64 characters long. (required)
     * @param activitySid The SID of a valid Activity that will describe the new Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. If not provided, the new Worker&#39;s initial state is the &#x60;default_activity_sid&#x60; configured on the Workspace. (optional)
     * @param attributes A valid JSON string that describes the new Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkerCall(String workspaceSid, String friendlyName, String activitySid, String attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activitySid != null) {
            localVarFormParams.put("ActivitySid", activitySid);
        }

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkerValidateBeforeCall(String workspaceSid, String friendlyName, String activitySid, String attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling createWorker(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createWorker(Async)");
        }

        return createWorkerCall(workspaceSid, friendlyName, activitySid, attributes, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new Worker belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the new Worker. It can be up to 64 characters long. (required)
     * @param activitySid The SID of a valid Activity that will describe the new Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. If not provided, the new Worker&#39;s initial state is the &#x60;default_activity_sid&#x60; configured on the Workspace. (optional)
     * @param attributes A valid JSON string that describes the new Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @return TaskrouterV1WorkspaceWorker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorker createWorker(String workspaceSid, String friendlyName, String activitySid, String attributes) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorker> localVarResp = createWorkerWithHttpInfo(workspaceSid, friendlyName, activitySid, attributes);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new Worker belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the new Worker. It can be up to 64 characters long. (required)
     * @param activitySid The SID of a valid Activity that will describe the new Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. If not provided, the new Worker&#39;s initial state is the &#x60;default_activity_sid&#x60; configured on the Workspace. (optional)
     * @param attributes A valid JSON string that describes the new Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorker> createWorkerWithHttpInfo(String workspaceSid, String friendlyName, String activitySid, String attributes) throws ApiException {
        okhttp3.Call localVarCall = createWorkerValidateBeforeCall(workspaceSid, friendlyName, activitySid, attributes, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace that the new Worker belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the new Worker. It can be up to 64 characters long. (required)
     * @param activitySid The SID of a valid Activity that will describe the new Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. If not provided, the new Worker&#39;s initial state is the &#x60;default_activity_sid&#x60; configured on the Workspace. (optional)
     * @param attributes A valid JSON string that describes the new Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkerAsync(String workspaceSid, String friendlyName, String activitySid, String attributes, final ApiCallback<TaskrouterV1WorkspaceWorker> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkerValidateBeforeCall(workspaceSid, friendlyName, activitySid, attributes, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorker
     * @param workspaceSid The SID of the Workspace with the Worker to delete. (required)
     * @param sid The SID of the Worker resource to delete. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkerCall(String workspaceSid, String sid, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkerValidateBeforeCall(String workspaceSid, String sid, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling deleteWorker(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteWorker(Async)");
        }

        return deleteWorkerCall(workspaceSid, sid, ifMatch, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to delete. (required)
     * @param sid The SID of the Worker resource to delete. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorker(String workspaceSid, String sid, String ifMatch) throws ApiException {
        deleteWorkerWithHttpInfo(workspaceSid, sid, ifMatch);
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to delete. (required)
     * @param sid The SID of the Worker resource to delete. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkerWithHttpInfo(String workspaceSid, String sid, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkerValidateBeforeCall(workspaceSid, sid, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to delete. (required)
     * @param sid The SID of the Worker resource to delete. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkerAsync(String workspaceSid, String sid, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkerValidateBeforeCall(workspaceSid, sid, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchWorker
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param sid The SID of the Worker resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWorkerValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchWorker(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWorker(Async)");
        }

        return fetchWorkerCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param sid The SID of the Worker resource to fetch. (required)
     * @return TaskrouterV1WorkspaceWorker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorker fetchWorker(String workspaceSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorker> localVarResp = fetchWorkerWithHttpInfo(workspaceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param sid The SID of the Worker resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorker> fetchWorkerWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWorkerValidateBeforeCall(workspaceSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param sid The SID of the Worker resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerAsync(String workspaceSid, String sid, final ApiCallback<TaskrouterV1WorkspaceWorker> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWorkerValidateBeforeCall(workspaceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWorker
     * @param workspaceSid The SID of the Workspace with the Workers to read. (required)
     * @param activityName The &#x60;activity_name&#x60; of the Worker resources to read. (optional)
     * @param activitySid The &#x60;activity_sid&#x60; of the Worker resources to read. (optional)
     * @param available Whether to return only Worker resources that are available or unavailable. Can be &#x60;true&#x60;, &#x60;1&#x60;, or &#x60;yes&#x60; to return Worker resources that are available, and &#x60;false&#x60;, or any value returns the Worker resources that are not available. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Worker resources to read. (optional)
     * @param targetWorkersExpression Filter by Workers that would match an expression. In addition to fields in the workers&#39; attributes, the expression can include the following worker fields: &#x60;sid&#x60;, &#x60;friendly_name&#x60;, &#x60;activity_sid&#x60;, or &#x60;activity_name&#x60; (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param taskQueueSid The SID of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param ordering Sorting parameter for Workers (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkerCall(String workspaceSid, String activityName, String activitySid, String available, String friendlyName, String targetWorkersExpression, String taskQueueName, String taskQueueSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActivityName", activityName));
        }

        if (activitySid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActivitySid", activitySid));
        }

        if (available != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Available", available));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (targetWorkersExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetWorkersExpression", targetWorkersExpression));
        }

        if (taskQueueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskQueueName", taskQueueName));
        }

        if (taskQueueSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskQueueSid", taskQueueSid));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Ordering", ordering));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkerValidateBeforeCall(String workspaceSid, String activityName, String activitySid, String available, String friendlyName, String targetWorkersExpression, String taskQueueName, String taskQueueSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listWorker(Async)");
        }

        return listWorkerCall(workspaceSid, activityName, activitySid, available, friendlyName, targetWorkersExpression, taskQueueName, taskQueueSid, ordering, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workers to read. (required)
     * @param activityName The &#x60;activity_name&#x60; of the Worker resources to read. (optional)
     * @param activitySid The &#x60;activity_sid&#x60; of the Worker resources to read. (optional)
     * @param available Whether to return only Worker resources that are available or unavailable. Can be &#x60;true&#x60;, &#x60;1&#x60;, or &#x60;yes&#x60; to return Worker resources that are available, and &#x60;false&#x60;, or any value returns the Worker resources that are not available. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Worker resources to read. (optional)
     * @param targetWorkersExpression Filter by Workers that would match an expression. In addition to fields in the workers&#39; attributes, the expression can include the following worker fields: &#x60;sid&#x60;, &#x60;friendly_name&#x60;, &#x60;activity_sid&#x60;, or &#x60;activity_name&#x60; (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param taskQueueSid The SID of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param ordering Sorting parameter for Workers (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWorkerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkerResponse listWorker(String workspaceSid, String activityName, String activitySid, String available, String friendlyName, String targetWorkersExpression, String taskQueueName, String taskQueueSid, String ordering, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWorkerResponse> localVarResp = listWorkerWithHttpInfo(workspaceSid, activityName, activitySid, available, friendlyName, targetWorkersExpression, taskQueueName, taskQueueSid, ordering, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workers to read. (required)
     * @param activityName The &#x60;activity_name&#x60; of the Worker resources to read. (optional)
     * @param activitySid The &#x60;activity_sid&#x60; of the Worker resources to read. (optional)
     * @param available Whether to return only Worker resources that are available or unavailable. Can be &#x60;true&#x60;, &#x60;1&#x60;, or &#x60;yes&#x60; to return Worker resources that are available, and &#x60;false&#x60;, or any value returns the Worker resources that are not available. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Worker resources to read. (optional)
     * @param targetWorkersExpression Filter by Workers that would match an expression. In addition to fields in the workers&#39; attributes, the expression can include the following worker fields: &#x60;sid&#x60;, &#x60;friendly_name&#x60;, &#x60;activity_sid&#x60;, or &#x60;activity_name&#x60; (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param taskQueueSid The SID of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param ordering Sorting parameter for Workers (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWorkerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWorkerResponse> listWorkerWithHttpInfo(String workspaceSid, String activityName, String activitySid, String available, String friendlyName, String targetWorkersExpression, String taskQueueName, String taskQueueSid, String ordering, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWorkerValidateBeforeCall(workspaceSid, activityName, activitySid, available, friendlyName, targetWorkersExpression, taskQueueName, taskQueueSid, ordering, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWorkerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Workers to read. (required)
     * @param activityName The &#x60;activity_name&#x60; of the Worker resources to read. (optional)
     * @param activitySid The &#x60;activity_sid&#x60; of the Worker resources to read. (optional)
     * @param available Whether to return only Worker resources that are available or unavailable. Can be &#x60;true&#x60;, &#x60;1&#x60;, or &#x60;yes&#x60; to return Worker resources that are available, and &#x60;false&#x60;, or any value returns the Worker resources that are not available. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Worker resources to read. (optional)
     * @param targetWorkersExpression Filter by Workers that would match an expression. In addition to fields in the workers&#39; attributes, the expression can include the following worker fields: &#x60;sid&#x60;, &#x60;friendly_name&#x60;, &#x60;activity_sid&#x60;, or &#x60;activity_name&#x60; (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param taskQueueSid The SID of the TaskQueue that the Workers to read are eligible for. (optional)
     * @param ordering Sorting parameter for Workers (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkerAsync(String workspaceSid, String activityName, String activitySid, String available, String friendlyName, String targetWorkersExpression, String taskQueueName, String taskQueueSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWorkerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkerValidateBeforeCall(workspaceSid, activityName, activitySid, available, friendlyName, targetWorkersExpression, taskQueueName, taskQueueSid, ordering, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWorkerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorker
     * @param workspaceSid The SID of the Workspace with the Worker to update. (required)
     * @param sid The SID of the Worker resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param activitySid The SID of a valid Activity that will describe the Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. (optional)
     * @param attributes The JSON string that describes the Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param friendlyName A descriptive string that you create to describe the Worker. It can be up to 64 characters long. (optional)
     * @param rejectPendingReservations Whether to reject the Worker&#39;s pending reservations. This option is only valid if the Worker&#39;s new [Activity](https://www.twilio.com/docs/taskrouter/api/activity) resource has its &#x60;availability&#x60; property set to &#x60;False&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkerCall(String workspaceSid, String sid, String ifMatch, String activitySid, String attributes, String friendlyName, Boolean rejectPendingReservations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activitySid != null) {
            localVarFormParams.put("ActivitySid", activitySid);
        }

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (rejectPendingReservations != null) {
            localVarFormParams.put("RejectPendingReservations", rejectPendingReservations);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkerValidateBeforeCall(String workspaceSid, String sid, String ifMatch, String activitySid, String attributes, String friendlyName, Boolean rejectPendingReservations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling updateWorker(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWorker(Async)");
        }

        return updateWorkerCall(workspaceSid, sid, ifMatch, activitySid, attributes, friendlyName, rejectPendingReservations, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to update. (required)
     * @param sid The SID of the Worker resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param activitySid The SID of a valid Activity that will describe the Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. (optional)
     * @param attributes The JSON string that describes the Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param friendlyName A descriptive string that you create to describe the Worker. It can be up to 64 characters long. (optional)
     * @param rejectPendingReservations Whether to reject the Worker&#39;s pending reservations. This option is only valid if the Worker&#39;s new [Activity](https://www.twilio.com/docs/taskrouter/api/activity) resource has its &#x60;availability&#x60; property set to &#x60;False&#x60;. (optional)
     * @return TaskrouterV1WorkspaceWorker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorker updateWorker(String workspaceSid, String sid, String ifMatch, String activitySid, String attributes, String friendlyName, Boolean rejectPendingReservations) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorker> localVarResp = updateWorkerWithHttpInfo(workspaceSid, sid, ifMatch, activitySid, attributes, friendlyName, rejectPendingReservations);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to update. (required)
     * @param sid The SID of the Worker resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param activitySid The SID of a valid Activity that will describe the Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. (optional)
     * @param attributes The JSON string that describes the Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param friendlyName A descriptive string that you create to describe the Worker. It can be up to 64 characters long. (optional)
     * @param rejectPendingReservations Whether to reject the Worker&#39;s pending reservations. This option is only valid if the Worker&#39;s new [Activity](https://www.twilio.com/docs/taskrouter/api/activity) resource has its &#x60;availability&#x60; property set to &#x60;False&#x60;. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorker> updateWorkerWithHttpInfo(String workspaceSid, String sid, String ifMatch, String activitySid, String attributes, String friendlyName, Boolean rejectPendingReservations) throws ApiException {
        okhttp3.Call localVarCall = updateWorkerValidateBeforeCall(workspaceSid, sid, ifMatch, activitySid, attributes, friendlyName, rejectPendingReservations, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to update. (required)
     * @param sid The SID of the Worker resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param activitySid The SID of a valid Activity that will describe the Worker&#39;s initial state. See [Activities](https://www.twilio.com/docs/taskrouter/api/activity) for more information. (optional)
     * @param attributes The JSON string that describes the Worker. For example: &#x60;{ \\\&quot;email\\\&quot;: \\\&quot;Bob@example.com\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;+5095551234\\\&quot; }&#x60;. This data is passed to the &#x60;assignment_callback_url&#x60; when TaskRouter assigns a Task to the Worker. Defaults to {}. (optional)
     * @param friendlyName A descriptive string that you create to describe the Worker. It can be up to 64 characters long. (optional)
     * @param rejectPendingReservations Whether to reject the Worker&#39;s pending reservations. This option is only valid if the Worker&#39;s new [Activity](https://www.twilio.com/docs/taskrouter/api/activity) resource has its &#x60;availability&#x60; property set to &#x60;False&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkerAsync(String workspaceSid, String sid, String ifMatch, String activitySid, String attributes, String friendlyName, Boolean rejectPendingReservations, final ApiCallback<TaskrouterV1WorkspaceWorker> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkerValidateBeforeCall(workspaceSid, sid, ifMatch, activitySid, attributes, friendlyName, rejectPendingReservations, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
