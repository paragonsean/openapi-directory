/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTaskReservationResponse;
import org.openapitools.client.model.ListWorkerReservationResponse;
import org.openapitools.client.model.TaskReservationEnumCallStatus;
import org.openapitools.client.model.TaskReservationEnumConferenceEvent;
import org.openapitools.client.model.TaskReservationEnumStatus;
import org.openapitools.client.model.TaskReservationEnumSupervisorMode;
import org.openapitools.client.model.TaskrouterV1WorkspaceTaskTaskReservation;
import org.openapitools.client.model.TaskrouterV1WorkspaceWorkerWorkerReservation;
import java.net.URI;
import org.openapitools.client.model.WorkerReservationEnumCallStatus;
import org.openapitools.client.model.WorkerReservationEnumConferenceEvent;
import org.openapitools.client.model.WorkerReservationEnumStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1ReservationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1ReservationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1ReservationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchTaskReservation
     * @param workspaceSid The SID of the Workspace with the TaskReservation resource to fetch. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch. (required)
     * @param sid The SID of the TaskReservation resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTaskReservationCall(String workspaceSid, String taskSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "TaskSid" + "}", localVarApiClient.escapeString(taskSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTaskReservationValidateBeforeCall(String workspaceSid, String taskSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchTaskReservation(Async)");
        }

        // verify the required parameter 'taskSid' is set
        if (taskSid == null) {
            throw new ApiException("Missing the required parameter 'taskSid' when calling fetchTaskReservation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTaskReservation(Async)");
        }

        return fetchTaskReservationCall(workspaceSid, taskSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resource to fetch. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch. (required)
     * @param sid The SID of the TaskReservation resource to fetch. (required)
     * @return TaskrouterV1WorkspaceTaskTaskReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceTaskTaskReservation fetchTaskReservation(String workspaceSid, String taskSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceTaskTaskReservation> localVarResp = fetchTaskReservationWithHttpInfo(workspaceSid, taskSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resource to fetch. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch. (required)
     * @param sid The SID of the TaskReservation resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceTaskTaskReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceTaskTaskReservation> fetchTaskReservationWithHttpInfo(String workspaceSid, String taskSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTaskReservationValidateBeforeCall(workspaceSid, taskSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskTaskReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resource to fetch. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resource to fetch. (required)
     * @param sid The SID of the TaskReservation resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTaskReservationAsync(String workspaceSid, String taskSid, String sid, final ApiCallback<TaskrouterV1WorkspaceTaskTaskReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTaskReservationValidateBeforeCall(workspaceSid, taskSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskTaskReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchWorkerReservation
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch. (required)
     * @param sid The SID of the WorkerReservation resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerReservationCall(String workspaceSid, String workerSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "WorkerSid" + "}", localVarApiClient.escapeString(workerSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWorkerReservationValidateBeforeCall(String workspaceSid, String workerSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchWorkerReservation(Async)");
        }

        // verify the required parameter 'workerSid' is set
        if (workerSid == null) {
            throw new ApiException("Missing the required parameter 'workerSid' when calling fetchWorkerReservation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWorkerReservation(Async)");
        }

        return fetchWorkerReservationCall(workspaceSid, workerSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch. (required)
     * @param sid The SID of the WorkerReservation resource to fetch. (required)
     * @return TaskrouterV1WorkspaceWorkerWorkerReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkerWorkerReservation fetchWorkerReservation(String workspaceSid, String workerSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkerWorkerReservation> localVarResp = fetchWorkerReservationWithHttpInfo(workspaceSid, workerSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch. (required)
     * @param sid The SID of the WorkerReservation resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkerWorkerReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkerWorkerReservation> fetchWorkerReservationWithHttpInfo(String workspaceSid, String workerSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWorkerReservationValidateBeforeCall(workspaceSid, workerSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resource to fetch. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resource to fetch. (required)
     * @param sid The SID of the WorkerReservation resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerReservationAsync(String workspaceSid, String workerSid, String sid, final ApiCallback<TaskrouterV1WorkspaceWorkerWorkerReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWorkerReservationValidateBeforeCall(workspaceSid, workerSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTaskReservation
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to read. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a task with a specified ReservationStatus.  Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, or &#x60;timeout&#x60;. (optional)
     * @param workerSid The SID of the reserved Worker resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskReservationCall(String workspaceSid, String taskSid, TaskReservationEnumStatus reservationStatus, String workerSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "TaskSid" + "}", localVarApiClient.escapeString(taskSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reservationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservationStatus", reservationStatus));
        }

        if (workerSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WorkerSid", workerSid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskReservationValidateBeforeCall(String workspaceSid, String taskSid, TaskReservationEnumStatus reservationStatus, String workerSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listTaskReservation(Async)");
        }

        // verify the required parameter 'taskSid' is set
        if (taskSid == null) {
            throw new ApiException("Missing the required parameter 'taskSid' when calling listTaskReservation(Async)");
        }

        return listTaskReservationCall(workspaceSid, taskSid, reservationStatus, workerSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to read. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a task with a specified ReservationStatus.  Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, or &#x60;timeout&#x60;. (optional)
     * @param workerSid The SID of the reserved Worker resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTaskReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskReservationResponse listTaskReservation(String workspaceSid, String taskSid, TaskReservationEnumStatus reservationStatus, String workerSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTaskReservationResponse> localVarResp = listTaskReservationWithHttpInfo(workspaceSid, taskSid, reservationStatus, workerSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to read. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a task with a specified ReservationStatus.  Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, or &#x60;timeout&#x60;. (optional)
     * @param workerSid The SID of the reserved Worker resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTaskReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTaskReservationResponse> listTaskReservationWithHttpInfo(String workspaceSid, String taskSid, TaskReservationEnumStatus reservationStatus, String workerSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTaskReservationValidateBeforeCall(workspaceSid, taskSid, reservationStatus, workerSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTaskReservationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to read. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a task with a specified ReservationStatus.  Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, or &#x60;timeout&#x60;. (optional)
     * @param workerSid The SID of the reserved Worker resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskReservationAsync(String workspaceSid, String taskSid, TaskReservationEnumStatus reservationStatus, String workerSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTaskReservationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskReservationValidateBeforeCall(workspaceSid, taskSid, reservationStatus, workerSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTaskReservationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWorkerReservation
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to read. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a worker with a specified ReservationStatus. Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, &#x60;timeout&#x60;, &#x60;canceled&#x60;, or &#x60;rescinded&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkerReservationCall(String workspaceSid, String workerSid, WorkerReservationEnumStatus reservationStatus, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "WorkerSid" + "}", localVarApiClient.escapeString(workerSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reservationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservationStatus", reservationStatus));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkerReservationValidateBeforeCall(String workspaceSid, String workerSid, WorkerReservationEnumStatus reservationStatus, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listWorkerReservation(Async)");
        }

        // verify the required parameter 'workerSid' is set
        if (workerSid == null) {
            throw new ApiException("Missing the required parameter 'workerSid' when calling listWorkerReservation(Async)");
        }

        return listWorkerReservationCall(workspaceSid, workerSid, reservationStatus, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to read. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a worker with a specified ReservationStatus. Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, &#x60;timeout&#x60;, &#x60;canceled&#x60;, or &#x60;rescinded&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWorkerReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkerReservationResponse listWorkerReservation(String workspaceSid, String workerSid, WorkerReservationEnumStatus reservationStatus, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWorkerReservationResponse> localVarResp = listWorkerReservationWithHttpInfo(workspaceSid, workerSid, reservationStatus, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to read. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a worker with a specified ReservationStatus. Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, &#x60;timeout&#x60;, &#x60;canceled&#x60;, or &#x60;rescinded&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWorkerReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWorkerReservationResponse> listWorkerReservationWithHttpInfo(String workspaceSid, String workerSid, WorkerReservationEnumStatus reservationStatus, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWorkerReservationValidateBeforeCall(workspaceSid, workerSid, reservationStatus, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWorkerReservationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to read. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to read. (required)
     * @param reservationStatus Returns the list of reservations for a worker with a specified ReservationStatus. Can be: &#x60;pending&#x60;, &#x60;accepted&#x60;, &#x60;rejected&#x60;, &#x60;timeout&#x60;, &#x60;canceled&#x60;, or &#x60;rescinded&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkerReservationAsync(String workspaceSid, String workerSid, WorkerReservationEnumStatus reservationStatus, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWorkerReservationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkerReservationValidateBeforeCall(workspaceSid, workerSid, reservationStatus, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWorkerReservationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskReservation
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to update. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to update. (required)
     * @param sid The SID of the TaskReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction or which leg to record. (optional)
     * @param callStatusCallbackUrl The URL to call  for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout Timeout for call when executing a Call instruction. (optional)
     * @param callTo The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim How to trim the leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The Caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The Call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The Callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout Timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The Caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. The default is &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. The default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. The default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param supervisor The Supervisor SID/URI when executing the Supervise instruction. (optional)
     * @param supervisorMode  (optional)
     * @param timeout Timeout for call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskReservationCall(String workspaceSid, String taskSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, TaskReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<TaskReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, String supervisor, TaskReservationEnumSupervisorMode supervisorMode, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "TaskSid" + "}", localVarApiClient.escapeString(taskSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beep != null) {
            localVarFormParams.put("Beep", beep);
        }

        if (beepOnCustomerEntrance != null) {
            localVarFormParams.put("BeepOnCustomerEntrance", beepOnCustomerEntrance);
        }

        if (callAccept != null) {
            localVarFormParams.put("CallAccept", callAccept);
        }

        if (callFrom != null) {
            localVarFormParams.put("CallFrom", callFrom);
        }

        if (callRecord != null) {
            localVarFormParams.put("CallRecord", callRecord);
        }

        if (callStatusCallbackUrl != null) {
            localVarFormParams.put("CallStatusCallbackUrl", callStatusCallbackUrl);
        }

        if (callTimeout != null) {
            localVarFormParams.put("CallTimeout", callTimeout);
        }

        if (callTo != null) {
            localVarFormParams.put("CallTo", callTo);
        }

        if (callUrl != null) {
            localVarFormParams.put("CallUrl", callUrl);
        }

        if (conferenceRecord != null) {
            localVarFormParams.put("ConferenceRecord", conferenceRecord);
        }

        if (conferenceRecordingStatusCallback != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallback", conferenceRecordingStatusCallback);
        }

        if (conferenceRecordingStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallbackMethod", conferenceRecordingStatusCallbackMethod);
        }

        if (conferenceStatusCallback != null) {
            localVarFormParams.put("ConferenceStatusCallback", conferenceStatusCallback);
        }

        if (conferenceStatusCallbackEvent != null) {
            localVarFormParams.put("ConferenceStatusCallbackEvent", conferenceStatusCallbackEvent);
        }

        if (conferenceStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceStatusCallbackMethod", conferenceStatusCallbackMethod);
        }

        if (conferenceTrim != null) {
            localVarFormParams.put("ConferenceTrim", conferenceTrim);
        }

        if (dequeueFrom != null) {
            localVarFormParams.put("DequeueFrom", dequeueFrom);
        }

        if (dequeuePostWorkActivitySid != null) {
            localVarFormParams.put("DequeuePostWorkActivitySid", dequeuePostWorkActivitySid);
        }

        if (dequeueRecord != null) {
            localVarFormParams.put("DequeueRecord", dequeueRecord);
        }

        if (dequeueStatusCallbackEvent != null) {
            localVarFormParams.put("DequeueStatusCallbackEvent", dequeueStatusCallbackEvent);
        }

        if (dequeueStatusCallbackUrl != null) {
            localVarFormParams.put("DequeueStatusCallbackUrl", dequeueStatusCallbackUrl);
        }

        if (dequeueTimeout != null) {
            localVarFormParams.put("DequeueTimeout", dequeueTimeout);
        }

        if (dequeueTo != null) {
            localVarFormParams.put("DequeueTo", dequeueTo);
        }

        if (earlyMedia != null) {
            localVarFormParams.put("EarlyMedia", earlyMedia);
        }

        if (endConferenceOnCustomerExit != null) {
            localVarFormParams.put("EndConferenceOnCustomerExit", endConferenceOnCustomerExit);
        }

        if (endConferenceOnExit != null) {
            localVarFormParams.put("EndConferenceOnExit", endConferenceOnExit);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (instruction != null) {
            localVarFormParams.put("Instruction", instruction);
        }

        if (jitterBufferSize != null) {
            localVarFormParams.put("JitterBufferSize", jitterBufferSize);
        }

        if (maxParticipants != null) {
            localVarFormParams.put("MaxParticipants", maxParticipants);
        }

        if (muted != null) {
            localVarFormParams.put("Muted", muted);
        }

        if (postWorkActivitySid != null) {
            localVarFormParams.put("PostWorkActivitySid", postWorkActivitySid);
        }

        if (record != null) {
            localVarFormParams.put("Record", record);
        }

        if (recordingChannels != null) {
            localVarFormParams.put("RecordingChannels", recordingChannels);
        }

        if (recordingStatusCallback != null) {
            localVarFormParams.put("RecordingStatusCallback", recordingStatusCallback);
        }

        if (recordingStatusCallbackMethod != null) {
            localVarFormParams.put("RecordingStatusCallbackMethod", recordingStatusCallbackMethod);
        }

        if (redirectAccept != null) {
            localVarFormParams.put("RedirectAccept", redirectAccept);
        }

        if (redirectCallSid != null) {
            localVarFormParams.put("RedirectCallSid", redirectCallSid);
        }

        if (redirectUrl != null) {
            localVarFormParams.put("RedirectUrl", redirectUrl);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (reservationStatus != null) {
            localVarFormParams.put("ReservationStatus", reservationStatus);
        }

        if (sipAuthPassword != null) {
            localVarFormParams.put("SipAuthPassword", sipAuthPassword);
        }

        if (sipAuthUsername != null) {
            localVarFormParams.put("SipAuthUsername", sipAuthUsername);
        }

        if (startConferenceOnEnter != null) {
            localVarFormParams.put("StartConferenceOnEnter", startConferenceOnEnter);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackEvent != null) {
            localVarFormParams.put("StatusCallbackEvent", statusCallbackEvent);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (supervisor != null) {
            localVarFormParams.put("Supervisor", supervisor);
        }

        if (supervisorMode != null) {
            localVarFormParams.put("SupervisorMode", supervisorMode);
        }

        if (timeout != null) {
            localVarFormParams.put("Timeout", timeout);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        if (waitMethod != null) {
            localVarFormParams.put("WaitMethod", waitMethod);
        }

        if (waitUrl != null) {
            localVarFormParams.put("WaitUrl", waitUrl);
        }

        if (workerActivitySid != null) {
            localVarFormParams.put("WorkerActivitySid", workerActivitySid);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskReservationValidateBeforeCall(String workspaceSid, String taskSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, TaskReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<TaskReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, String supervisor, TaskReservationEnumSupervisorMode supervisorMode, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling updateTaskReservation(Async)");
        }

        // verify the required parameter 'taskSid' is set
        if (taskSid == null) {
            throw new ApiException("Missing the required parameter 'taskSid' when calling updateTaskReservation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateTaskReservation(Async)");
        }

        return updateTaskReservationCall(workspaceSid, taskSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, supervisor, supervisorMode, timeout, to, waitMethod, waitUrl, workerActivitySid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to update. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to update. (required)
     * @param sid The SID of the TaskReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction or which leg to record. (optional)
     * @param callStatusCallbackUrl The URL to call  for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout Timeout for call when executing a Call instruction. (optional)
     * @param callTo The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim How to trim the leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The Caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The Call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The Callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout Timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The Caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. The default is &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. The default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. The default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param supervisor The Supervisor SID/URI when executing the Supervise instruction. (optional)
     * @param supervisorMode  (optional)
     * @param timeout Timeout for call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @return TaskrouterV1WorkspaceTaskTaskReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceTaskTaskReservation updateTaskReservation(String workspaceSid, String taskSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, TaskReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<TaskReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, String supervisor, TaskReservationEnumSupervisorMode supervisorMode, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceTaskTaskReservation> localVarResp = updateTaskReservationWithHttpInfo(workspaceSid, taskSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, supervisor, supervisorMode, timeout, to, waitMethod, waitUrl, workerActivitySid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to update. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to update. (required)
     * @param sid The SID of the TaskReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction or which leg to record. (optional)
     * @param callStatusCallbackUrl The URL to call  for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout Timeout for call when executing a Call instruction. (optional)
     * @param callTo The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim How to trim the leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The Caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The Call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The Callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout Timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The Caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. The default is &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. The default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. The default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param supervisor The Supervisor SID/URI when executing the Supervise instruction. (optional)
     * @param supervisorMode  (optional)
     * @param timeout Timeout for call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceTaskTaskReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceTaskTaskReservation> updateTaskReservationWithHttpInfo(String workspaceSid, String taskSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, TaskReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<TaskReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, String supervisor, TaskReservationEnumSupervisorMode supervisorMode, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid) throws ApiException {
        okhttp3.Call localVarCall = updateTaskReservationValidateBeforeCall(workspaceSid, taskSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, supervisor, supervisorMode, timeout, to, waitMethod, waitUrl, workerActivitySid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskTaskReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskReservation resources to update. (required)
     * @param taskSid The SID of the reserved Task resource with the TaskReservation resources to update. (required)
     * @param sid The SID of the TaskReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction or which leg to record. (optional)
     * @param callStatusCallbackUrl The URL to call  for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout Timeout for call when executing a Call instruction. (optional)
     * @param callTo The Contact URI of the worker when executing a Call instruction.  Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim How to trim the leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The Caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The Call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The Callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout Timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The Contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The Caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. The default is &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. The default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. The default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param supervisor The Supervisor SID/URI when executing the Supervise instruction. (optional)
     * @param supervisorMode  (optional)
     * @param timeout Timeout for call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskReservationAsync(String workspaceSid, String taskSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<TaskReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, TaskReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<TaskReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, String supervisor, TaskReservationEnumSupervisorMode supervisorMode, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback<TaskrouterV1WorkspaceTaskTaskReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskReservationValidateBeforeCall(workspaceSid, taskSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, supervisor, supervisorMode, timeout, to, waitMethod, waitUrl, workerActivitySid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskTaskReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkerReservation
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to update. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update. (required)
     * @param sid The SID of the WorkerReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction. (optional)
     * @param callStatusCallbackUrl The URL to call for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout The timeout for a call when executing a Call instruction. (optional)
     * @param callTo The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout The timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for the reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants allowed in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Defaults to &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param timeout The timeout for a call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkerReservationCall(String workspaceSid, String workerSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, WorkerReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<WorkerReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "WorkerSid" + "}", localVarApiClient.escapeString(workerSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beep != null) {
            localVarFormParams.put("Beep", beep);
        }

        if (beepOnCustomerEntrance != null) {
            localVarFormParams.put("BeepOnCustomerEntrance", beepOnCustomerEntrance);
        }

        if (callAccept != null) {
            localVarFormParams.put("CallAccept", callAccept);
        }

        if (callFrom != null) {
            localVarFormParams.put("CallFrom", callFrom);
        }

        if (callRecord != null) {
            localVarFormParams.put("CallRecord", callRecord);
        }

        if (callStatusCallbackUrl != null) {
            localVarFormParams.put("CallStatusCallbackUrl", callStatusCallbackUrl);
        }

        if (callTimeout != null) {
            localVarFormParams.put("CallTimeout", callTimeout);
        }

        if (callTo != null) {
            localVarFormParams.put("CallTo", callTo);
        }

        if (callUrl != null) {
            localVarFormParams.put("CallUrl", callUrl);
        }

        if (conferenceRecord != null) {
            localVarFormParams.put("ConferenceRecord", conferenceRecord);
        }

        if (conferenceRecordingStatusCallback != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallback", conferenceRecordingStatusCallback);
        }

        if (conferenceRecordingStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallbackMethod", conferenceRecordingStatusCallbackMethod);
        }

        if (conferenceStatusCallback != null) {
            localVarFormParams.put("ConferenceStatusCallback", conferenceStatusCallback);
        }

        if (conferenceStatusCallbackEvent != null) {
            localVarFormParams.put("ConferenceStatusCallbackEvent", conferenceStatusCallbackEvent);
        }

        if (conferenceStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceStatusCallbackMethod", conferenceStatusCallbackMethod);
        }

        if (conferenceTrim != null) {
            localVarFormParams.put("ConferenceTrim", conferenceTrim);
        }

        if (dequeueFrom != null) {
            localVarFormParams.put("DequeueFrom", dequeueFrom);
        }

        if (dequeuePostWorkActivitySid != null) {
            localVarFormParams.put("DequeuePostWorkActivitySid", dequeuePostWorkActivitySid);
        }

        if (dequeueRecord != null) {
            localVarFormParams.put("DequeueRecord", dequeueRecord);
        }

        if (dequeueStatusCallbackEvent != null) {
            localVarFormParams.put("DequeueStatusCallbackEvent", dequeueStatusCallbackEvent);
        }

        if (dequeueStatusCallbackUrl != null) {
            localVarFormParams.put("DequeueStatusCallbackUrl", dequeueStatusCallbackUrl);
        }

        if (dequeueTimeout != null) {
            localVarFormParams.put("DequeueTimeout", dequeueTimeout);
        }

        if (dequeueTo != null) {
            localVarFormParams.put("DequeueTo", dequeueTo);
        }

        if (earlyMedia != null) {
            localVarFormParams.put("EarlyMedia", earlyMedia);
        }

        if (endConferenceOnCustomerExit != null) {
            localVarFormParams.put("EndConferenceOnCustomerExit", endConferenceOnCustomerExit);
        }

        if (endConferenceOnExit != null) {
            localVarFormParams.put("EndConferenceOnExit", endConferenceOnExit);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (instruction != null) {
            localVarFormParams.put("Instruction", instruction);
        }

        if (jitterBufferSize != null) {
            localVarFormParams.put("JitterBufferSize", jitterBufferSize);
        }

        if (maxParticipants != null) {
            localVarFormParams.put("MaxParticipants", maxParticipants);
        }

        if (muted != null) {
            localVarFormParams.put("Muted", muted);
        }

        if (postWorkActivitySid != null) {
            localVarFormParams.put("PostWorkActivitySid", postWorkActivitySid);
        }

        if (record != null) {
            localVarFormParams.put("Record", record);
        }

        if (recordingChannels != null) {
            localVarFormParams.put("RecordingChannels", recordingChannels);
        }

        if (recordingStatusCallback != null) {
            localVarFormParams.put("RecordingStatusCallback", recordingStatusCallback);
        }

        if (recordingStatusCallbackMethod != null) {
            localVarFormParams.put("RecordingStatusCallbackMethod", recordingStatusCallbackMethod);
        }

        if (redirectAccept != null) {
            localVarFormParams.put("RedirectAccept", redirectAccept);
        }

        if (redirectCallSid != null) {
            localVarFormParams.put("RedirectCallSid", redirectCallSid);
        }

        if (redirectUrl != null) {
            localVarFormParams.put("RedirectUrl", redirectUrl);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (reservationStatus != null) {
            localVarFormParams.put("ReservationStatus", reservationStatus);
        }

        if (sipAuthPassword != null) {
            localVarFormParams.put("SipAuthPassword", sipAuthPassword);
        }

        if (sipAuthUsername != null) {
            localVarFormParams.put("SipAuthUsername", sipAuthUsername);
        }

        if (startConferenceOnEnter != null) {
            localVarFormParams.put("StartConferenceOnEnter", startConferenceOnEnter);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackEvent != null) {
            localVarFormParams.put("StatusCallbackEvent", statusCallbackEvent);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (timeout != null) {
            localVarFormParams.put("Timeout", timeout);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        if (waitMethod != null) {
            localVarFormParams.put("WaitMethod", waitMethod);
        }

        if (waitUrl != null) {
            localVarFormParams.put("WaitUrl", waitUrl);
        }

        if (workerActivitySid != null) {
            localVarFormParams.put("WorkerActivitySid", workerActivitySid);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkerReservationValidateBeforeCall(String workspaceSid, String workerSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, WorkerReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<WorkerReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling updateWorkerReservation(Async)");
        }

        // verify the required parameter 'workerSid' is set
        if (workerSid == null) {
            throw new ApiException("Missing the required parameter 'workerSid' when calling updateWorkerReservation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWorkerReservation(Async)");
        }

        return updateWorkerReservationCall(workspaceSid, workerSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeout, to, waitMethod, waitUrl, workerActivitySid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to update. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update. (required)
     * @param sid The SID of the WorkerReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction. (optional)
     * @param callStatusCallbackUrl The URL to call for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout The timeout for a call when executing a Call instruction. (optional)
     * @param callTo The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout The timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for the reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants allowed in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Defaults to &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param timeout The timeout for a call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @return TaskrouterV1WorkspaceWorkerWorkerReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkerWorkerReservation updateWorkerReservation(String workspaceSid, String workerSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, WorkerReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<WorkerReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkerWorkerReservation> localVarResp = updateWorkerReservationWithHttpInfo(workspaceSid, workerSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeout, to, waitMethod, waitUrl, workerActivitySid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to update. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update. (required)
     * @param sid The SID of the WorkerReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction. (optional)
     * @param callStatusCallbackUrl The URL to call for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout The timeout for a call when executing a Call instruction. (optional)
     * @param callTo The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout The timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for the reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants allowed in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Defaults to &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param timeout The timeout for a call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkerWorkerReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkerWorkerReservation> updateWorkerReservationWithHttpInfo(String workspaceSid, String workerSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, WorkerReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<WorkerReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid) throws ApiException {
        okhttp3.Call localVarCall = updateWorkerReservationValidateBeforeCall(workspaceSid, workerSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeout, to, waitMethod, waitUrl, workerActivitySid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the WorkerReservation resources to update. (required)
     * @param workerSid The SID of the reserved Worker resource with the WorkerReservation resources to update. (required)
     * @param sid The SID of the WorkerReservation resource to update. (required)
     * @param ifMatch The If-Match HTTP request header (optional)
     * @param beep Whether to play a notification beep when the participant joins or when to play a beep. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param beepOnCustomerEntrance Whether to play a notification beep when the customer joins. (optional)
     * @param callAccept Whether to accept a reservation when executing a Call instruction. (optional)
     * @param callFrom The Caller ID of the outbound call when executing a Call instruction. (optional)
     * @param callRecord Whether to record both legs of a call when executing a Call instruction. (optional)
     * @param callStatusCallbackUrl The URL to call for the completed call event when executing a Call instruction. (optional)
     * @param callTimeout The timeout for a call when executing a Call instruction. (optional)
     * @param callTo The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param callUrl TwiML URI executed on answering the worker&#39;s leg as a result of the Call instruction. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining or when to record the conference. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference status events that we will send to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;speaker&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param dequeueFrom The caller ID of the call to the worker when executing a Dequeue instruction. (optional)
     * @param dequeuePostWorkActivitySid The SID of the Activity resource to start after executing a Dequeue instruction. (optional)
     * @param dequeueRecord Whether to record both legs of a call when executing a Dequeue instruction or which leg to record. (optional)
     * @param dequeueStatusCallbackEvent The call progress events sent via webhooks as a result of a Dequeue instruction. (optional)
     * @param dequeueStatusCallbackUrl The callback URL for completed call event when executing a Dequeue instruction. (optional)
     * @param dequeueTimeout The timeout for call when executing a Dequeue instruction. (optional)
     * @param dequeueTo The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is &#x60;true&#x60;. (optional)
     * @param endConferenceOnCustomerExit Whether to end the conference when the customer leaves. (optional)
     * @param endConferenceOnExit Whether to end the conference when the agent leaves. (optional)
     * @param from The caller ID of the call to the worker when executing a Conference instruction. (optional)
     * @param instruction The assignment instruction for the reservation. (optional)
     * @param jitterBufferSize The jitter buffer size for conference. Can be: &#x60;small&#x60;, &#x60;medium&#x60;, &#x60;large&#x60;, &#x60;off&#x60;. (optional)
     * @param maxParticipants The maximum number of participants allowed in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Defaults to &#x60;false&#x60;. (optional)
     * @param postWorkActivitySid The new worker activity SID after executing a Conference instruction. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param redirectAccept Whether the reservation should be accepted when executing a Redirect instruction. (optional)
     * @param redirectCallSid The Call SID of the call parked in the queue when executing a Redirect instruction. (optional)
     * @param redirectUrl TwiML URI to redirect the call to when executing the Redirect instruction. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param reservationStatus  (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The call progress events that we will send to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, or &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param timeout The timeout for a call when executing a Conference instruction. (optional)
     * @param to The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param workerActivitySid The new worker activity SID if rejecting a reservation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkerReservationAsync(String workspaceSid, String workerSid, String sid, String ifMatch, String beep, Boolean beepOnCustomerEntrance, Boolean callAccept, String callFrom, String callRecord, URI callStatusCallbackUrl, Integer callTimeout, String callTo, URI callUrl, String conferenceRecord, URI conferenceRecordingStatusCallback, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<WorkerReservationEnumConferenceEvent> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, String dequeueFrom, String dequeuePostWorkActivitySid, String dequeueRecord, List<String> dequeueStatusCallbackEvent, URI dequeueStatusCallbackUrl, Integer dequeueTimeout, String dequeueTo, Boolean earlyMedia, Boolean endConferenceOnCustomerExit, Boolean endConferenceOnExit, String from, String instruction, String jitterBufferSize, Integer maxParticipants, Boolean muted, String postWorkActivitySid, Boolean record, String recordingChannels, URI recordingStatusCallback, String recordingStatusCallbackMethod, Boolean redirectAccept, String redirectCallSid, URI redirectUrl, String region, WorkerReservationEnumStatus reservationStatus, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<WorkerReservationEnumCallStatus> statusCallbackEvent, String statusCallbackMethod, Integer timeout, String to, String waitMethod, URI waitUrl, String workerActivitySid, final ApiCallback<TaskrouterV1WorkspaceWorkerWorkerReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkerReservationValidateBeforeCall(workspaceSid, workerSid, sid, ifMatch, beep, beepOnCustomerEntrance, callAccept, callFrom, callRecord, callStatusCallbackUrl, callTimeout, callTo, callUrl, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, dequeueFrom, dequeuePostWorkActivitySid, dequeueRecord, dequeueStatusCallbackEvent, dequeueStatusCallbackUrl, dequeueTimeout, dequeueTo, earlyMedia, endConferenceOnCustomerExit, endConferenceOnExit, from, instruction, jitterBufferSize, maxParticipants, muted, postWorkActivitySid, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackMethod, redirectAccept, redirectCallSid, redirectUrl, region, reservationStatus, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeout, to, waitMethod, waitUrl, workerActivitySid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
