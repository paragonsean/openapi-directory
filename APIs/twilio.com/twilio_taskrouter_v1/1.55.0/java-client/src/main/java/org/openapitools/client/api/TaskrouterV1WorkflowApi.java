/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListWorkflowResponse;
import org.openapitools.client.model.TaskrouterV1WorkspaceWorkflow;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1WorkflowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1WorkflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1WorkflowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWorkflow
     * @param workspaceSid The SID of the Workspace that the new Workflow to create belongs to. (required)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (required)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkflowCall(String workspaceSid, String _configuration, String friendlyName, URI assignmentCallbackUrl, URI fallbackAssignmentCallbackUrl, Integer taskReservationTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workflows"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignmentCallbackUrl != null) {
            localVarFormParams.put("AssignmentCallbackUrl", assignmentCallbackUrl);
        }

        if (_configuration != null) {
            localVarFormParams.put("Configuration", _configuration);
        }

        if (fallbackAssignmentCallbackUrl != null) {
            localVarFormParams.put("FallbackAssignmentCallbackUrl", fallbackAssignmentCallbackUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (taskReservationTimeout != null) {
            localVarFormParams.put("TaskReservationTimeout", taskReservationTimeout);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkflowValidateBeforeCall(String workspaceSid, String _configuration, String friendlyName, URI assignmentCallbackUrl, URI fallbackAssignmentCallbackUrl, Integer taskReservationTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling createWorkflow(Async)");
        }

        // verify the required parameter '_configuration' is set
        if (_configuration == null) {
            throw new ApiException("Missing the required parameter '_configuration' when calling createWorkflow(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createWorkflow(Async)");
        }

        return createWorkflowCall(workspaceSid, _configuration, friendlyName, assignmentCallbackUrl, fallbackAssignmentCallbackUrl, taskReservationTimeout, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new Workflow to create belongs to. (required)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (required)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @return TaskrouterV1WorkspaceWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkflow createWorkflow(String workspaceSid, String _configuration, String friendlyName, URI assignmentCallbackUrl, URI fallbackAssignmentCallbackUrl, Integer taskReservationTimeout) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkflow> localVarResp = createWorkflowWithHttpInfo(workspaceSid, _configuration, friendlyName, assignmentCallbackUrl, fallbackAssignmentCallbackUrl, taskReservationTimeout);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new Workflow to create belongs to. (required)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (required)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkflow> createWorkflowWithHttpInfo(String workspaceSid, String _configuration, String friendlyName, URI assignmentCallbackUrl, URI fallbackAssignmentCallbackUrl, Integer taskReservationTimeout) throws ApiException {
        okhttp3.Call localVarCall = createWorkflowValidateBeforeCall(workspaceSid, _configuration, friendlyName, assignmentCallbackUrl, fallbackAssignmentCallbackUrl, taskReservationTimeout, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace that the new Workflow to create belongs to. (required)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (required)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkflowAsync(String workspaceSid, String _configuration, String friendlyName, URI assignmentCallbackUrl, URI fallbackAssignmentCallbackUrl, Integer taskReservationTimeout, final ApiCallback<TaskrouterV1WorkspaceWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkflowValidateBeforeCall(workspaceSid, _configuration, friendlyName, assignmentCallbackUrl, fallbackAssignmentCallbackUrl, taskReservationTimeout, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkflow
     * @param workspaceSid The SID of the Workspace with the Workflow to delete. (required)
     * @param sid The SID of the Workflow resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkflowCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkflowValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling deleteWorkflow(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteWorkflow(Async)");
        }

        return deleteWorkflowCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to delete. (required)
     * @param sid The SID of the Workflow resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkflow(String workspaceSid, String sid) throws ApiException {
        deleteWorkflowWithHttpInfo(workspaceSid, sid);
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to delete. (required)
     * @param sid The SID of the Workflow resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkflowWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkflowValidateBeforeCall(workspaceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to delete. (required)
     * @param sid The SID of the Workflow resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkflowAsync(String workspaceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkflowValidateBeforeCall(workspaceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchWorkflow
     * @param workspaceSid The SID of the Workspace with the Workflow to fetch. (required)
     * @param sid The SID of the Workflow resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkflowCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWorkflowValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchWorkflow(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWorkflow(Async)");
        }

        return fetchWorkflowCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to fetch. (required)
     * @param sid The SID of the Workflow resource to fetch. (required)
     * @return TaskrouterV1WorkspaceWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkflow fetchWorkflow(String workspaceSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkflow> localVarResp = fetchWorkflowWithHttpInfo(workspaceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to fetch. (required)
     * @param sid The SID of the Workflow resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkflow> fetchWorkflowWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWorkflowValidateBeforeCall(workspaceSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to fetch. (required)
     * @param sid The SID of the Workflow resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkflowAsync(String workspaceSid, String sid, final ApiCallback<TaskrouterV1WorkspaceWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWorkflowValidateBeforeCall(workspaceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWorkflow
     * @param workspaceSid The SID of the Workspace with the Workflow to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Workflow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkflowCall(String workspaceSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workflows"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkflowValidateBeforeCall(String workspaceSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listWorkflow(Async)");
        }

        return listWorkflowCall(workspaceSid, friendlyName, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Workflow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkflowResponse listWorkflow(String workspaceSid, String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWorkflowResponse> localVarResp = listWorkflowWithHttpInfo(workspaceSid, friendlyName, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Workflow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWorkflowResponse> listWorkflowWithHttpInfo(String workspaceSid, String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWorkflowValidateBeforeCall(workspaceSid, friendlyName, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWorkflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the Workflow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkflowAsync(String workspaceSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWorkflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkflowValidateBeforeCall(workspaceSid, friendlyName, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWorkflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkflow
     * @param workspaceSid The SID of the Workspace with the Workflow to update. (required)
     * @param sid The SID of the Workflow resource to update. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (optional)
     * @param reEvaluateTasks Whether or not to re-evaluate Tasks. The default is &#x60;false&#x60;, which means Tasks in the Workflow will not be processed through the assignment loop again. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkflowCall(String workspaceSid, String sid, URI assignmentCallbackUrl, String _configuration, URI fallbackAssignmentCallbackUrl, String friendlyName, String reEvaluateTasks, Integer taskReservationTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignmentCallbackUrl != null) {
            localVarFormParams.put("AssignmentCallbackUrl", assignmentCallbackUrl);
        }

        if (_configuration != null) {
            localVarFormParams.put("Configuration", _configuration);
        }

        if (fallbackAssignmentCallbackUrl != null) {
            localVarFormParams.put("FallbackAssignmentCallbackUrl", fallbackAssignmentCallbackUrl);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (reEvaluateTasks != null) {
            localVarFormParams.put("ReEvaluateTasks", reEvaluateTasks);
        }

        if (taskReservationTimeout != null) {
            localVarFormParams.put("TaskReservationTimeout", taskReservationTimeout);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkflowValidateBeforeCall(String workspaceSid, String sid, URI assignmentCallbackUrl, String _configuration, URI fallbackAssignmentCallbackUrl, String friendlyName, String reEvaluateTasks, Integer taskReservationTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling updateWorkflow(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWorkflow(Async)");
        }

        return updateWorkflowCall(workspaceSid, sid, assignmentCallbackUrl, _configuration, fallbackAssignmentCallbackUrl, friendlyName, reEvaluateTasks, taskReservationTimeout, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to update. (required)
     * @param sid The SID of the Workflow resource to update. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (optional)
     * @param reEvaluateTasks Whether or not to re-evaluate Tasks. The default is &#x60;false&#x60;, which means Tasks in the Workflow will not be processed through the assignment loop again. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @return TaskrouterV1WorkspaceWorkflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkflow updateWorkflow(String workspaceSid, String sid, URI assignmentCallbackUrl, String _configuration, URI fallbackAssignmentCallbackUrl, String friendlyName, String reEvaluateTasks, Integer taskReservationTimeout) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkflow> localVarResp = updateWorkflowWithHttpInfo(workspaceSid, sid, assignmentCallbackUrl, _configuration, fallbackAssignmentCallbackUrl, friendlyName, reEvaluateTasks, taskReservationTimeout);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to update. (required)
     * @param sid The SID of the Workflow resource to update. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (optional)
     * @param reEvaluateTasks Whether or not to re-evaluate Tasks. The default is &#x60;false&#x60;, which means Tasks in the Workflow will not be processed through the assignment loop again. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkflow> updateWorkflowWithHttpInfo(String workspaceSid, String sid, URI assignmentCallbackUrl, String _configuration, URI fallbackAssignmentCallbackUrl, String friendlyName, String reEvaluateTasks, Integer taskReservationTimeout) throws ApiException {
        okhttp3.Call localVarCall = updateWorkflowValidateBeforeCall(workspaceSid, sid, assignmentCallbackUrl, _configuration, fallbackAssignmentCallbackUrl, friendlyName, reEvaluateTasks, taskReservationTimeout, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Workflow to update. (required)
     * @param sid The SID of the Workflow resource to update. (required)
     * @param assignmentCallbackUrl The URL from your application that will process task assignment events. See [Handling Task Assignment Callback](https://www.twilio.com/docs/taskrouter/handle-assignment-callbacks) for more details. (optional)
     * @param _configuration A JSON string that contains the rules to apply to the Workflow. See [Configuring Workflows](https://www.twilio.com/docs/taskrouter/workflow-configuration) for more information. (optional)
     * @param fallbackAssignmentCallbackUrl The URL that we should call when a call to the &#x60;assignment_callback_url&#x60; fails. (optional)
     * @param friendlyName A descriptive string that you create to describe the Workflow resource. For example, &#x60;Inbound Call Workflow&#x60; or &#x60;2014 Outbound Campaign&#x60;. (optional)
     * @param reEvaluateTasks Whether or not to re-evaluate Tasks. The default is &#x60;false&#x60;, which means Tasks in the Workflow will not be processed through the assignment loop again. (optional)
     * @param taskReservationTimeout How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker. Can be up to &#x60;86,400&#x60; (24 hours) and the default is &#x60;120&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkflowAsync(String workspaceSid, String sid, URI assignmentCallbackUrl, String _configuration, URI fallbackAssignmentCallbackUrl, String friendlyName, String reEvaluateTasks, Integer taskReservationTimeout, final ApiCallback<TaskrouterV1WorkspaceWorkflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkflowValidateBeforeCall(workspaceSid, sid, assignmentCallbackUrl, _configuration, fallbackAssignmentCallbackUrl, friendlyName, reEvaluateTasks, taskReservationTimeout, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
