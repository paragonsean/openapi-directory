/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TaskEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskrouterV1WorkspaceTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:15.049055-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskrouterV1WorkspaceTask {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private String addons;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_ASSIGNMENT_STATUS = "assignment_status";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_STATUS)
  private TaskEnumStatus assignmentStatus;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private String attributes;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TASK_CHANNEL_SID = "task_channel_sid";
  @SerializedName(SERIALIZED_NAME_TASK_CHANNEL_SID)
  private String taskChannelSid;

  public static final String SERIALIZED_NAME_TASK_CHANNEL_UNIQUE_NAME = "task_channel_unique_name";
  @SerializedName(SERIALIZED_NAME_TASK_CHANNEL_UNIQUE_NAME)
  private String taskChannelUniqueName;

  public static final String SERIALIZED_NAME_TASK_QUEUE_ENTERED_DATE = "task_queue_entered_date";
  @SerializedName(SERIALIZED_NAME_TASK_QUEUE_ENTERED_DATE)
  private OffsetDateTime taskQueueEnteredDate;

  public static final String SERIALIZED_NAME_TASK_QUEUE_FRIENDLY_NAME = "task_queue_friendly_name";
  @SerializedName(SERIALIZED_NAME_TASK_QUEUE_FRIENDLY_NAME)
  private String taskQueueFriendlyName;

  public static final String SERIALIZED_NAME_TASK_QUEUE_SID = "task_queue_sid";
  @SerializedName(SERIALIZED_NAME_TASK_QUEUE_SID)
  private String taskQueueSid;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VIRTUAL_START_TIME = "virtual_start_time";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_START_TIME)
  private OffsetDateTime virtualStartTime;

  public static final String SERIALIZED_NAME_WORKFLOW_FRIENDLY_NAME = "workflow_friendly_name";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_FRIENDLY_NAME)
  private String workflowFriendlyName;

  public static final String SERIALIZED_NAME_WORKFLOW_SID = "workflow_sid";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_SID)
  private String workflowSid;

  public static final String SERIALIZED_NAME_WORKSPACE_SID = "workspace_sid";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_SID)
  private String workspaceSid;

  public TaskrouterV1WorkspaceTask() {
  }

  public TaskrouterV1WorkspaceTask accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Task resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public TaskrouterV1WorkspaceTask addons(String addons) {
    this.addons = addons;
    return this;
  }

  /**
   * An object that contains the [Add-on](https://www.twilio.com/docs/add-ons) data for all installed Add-ons.
   * @return addons
   */
  @javax.annotation.Nullable
  public String getAddons() {
    return addons;
  }

  public void setAddons(String addons) {
    this.addons = addons;
  }


  public TaskrouterV1WorkspaceTask age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * The number of seconds since the Task was created.
   * @return age
   */
  @javax.annotation.Nullable
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public TaskrouterV1WorkspaceTask assignmentStatus(TaskEnumStatus assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
    return this;
  }

  /**
   * Get assignmentStatus
   * @return assignmentStatus
   */
  @javax.annotation.Nullable
  public TaskEnumStatus getAssignmentStatus() {
    return assignmentStatus;
  }

  public void setAssignmentStatus(TaskEnumStatus assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
  }


  public TaskrouterV1WorkspaceTask attributes(String attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * The JSON string with custom attributes of the work. **Note** If this property has been assigned a value, it will only be displayed in FETCH action that returns a single resource. Otherwise, it will be null.
   * @return attributes
   */
  @javax.annotation.Nullable
  public String getAttributes() {
    return attributes;
  }

  public void setAttributes(String attributes) {
    this.attributes = attributes;
  }


  public TaskrouterV1WorkspaceTask dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TaskrouterV1WorkspaceTask dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public TaskrouterV1WorkspaceTask links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of related resources.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public TaskrouterV1WorkspaceTask priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The current priority score of the Task as assigned to a Worker by the workflow. Tasks with higher priority values will be assigned before Tasks with lower values.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public TaskrouterV1WorkspaceTask reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason the Task was canceled or completed, if applicable.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public TaskrouterV1WorkspaceTask sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Task resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public TaskrouterV1WorkspaceTask taskChannelSid(String taskChannelSid) {
    this.taskChannelSid = taskChannelSid;
    return this;
  }

  /**
   * The SID of the TaskChannel.
   * @return taskChannelSid
   */
  @javax.annotation.Nullable
  public String getTaskChannelSid() {
    return taskChannelSid;
  }

  public void setTaskChannelSid(String taskChannelSid) {
    this.taskChannelSid = taskChannelSid;
  }


  public TaskrouterV1WorkspaceTask taskChannelUniqueName(String taskChannelUniqueName) {
    this.taskChannelUniqueName = taskChannelUniqueName;
    return this;
  }

  /**
   * The unique name of the TaskChannel.
   * @return taskChannelUniqueName
   */
  @javax.annotation.Nullable
  public String getTaskChannelUniqueName() {
    return taskChannelUniqueName;
  }

  public void setTaskChannelUniqueName(String taskChannelUniqueName) {
    this.taskChannelUniqueName = taskChannelUniqueName;
  }


  public TaskrouterV1WorkspaceTask taskQueueEnteredDate(OffsetDateTime taskQueueEnteredDate) {
    this.taskQueueEnteredDate = taskQueueEnteredDate;
    return this;
  }

  /**
   * The date and time in GMT when the Task entered the TaskQueue, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return taskQueueEnteredDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTaskQueueEnteredDate() {
    return taskQueueEnteredDate;
  }

  public void setTaskQueueEnteredDate(OffsetDateTime taskQueueEnteredDate) {
    this.taskQueueEnteredDate = taskQueueEnteredDate;
  }


  public TaskrouterV1WorkspaceTask taskQueueFriendlyName(String taskQueueFriendlyName) {
    this.taskQueueFriendlyName = taskQueueFriendlyName;
    return this;
  }

  /**
   * The friendly name of the TaskQueue.
   * @return taskQueueFriendlyName
   */
  @javax.annotation.Nullable
  public String getTaskQueueFriendlyName() {
    return taskQueueFriendlyName;
  }

  public void setTaskQueueFriendlyName(String taskQueueFriendlyName) {
    this.taskQueueFriendlyName = taskQueueFriendlyName;
  }


  public TaskrouterV1WorkspaceTask taskQueueSid(String taskQueueSid) {
    this.taskQueueSid = taskQueueSid;
    return this;
  }

  /**
   * The SID of the TaskQueue.
   * @return taskQueueSid
   */
  @javax.annotation.Nullable
  public String getTaskQueueSid() {
    return taskQueueSid;
  }

  public void setTaskQueueSid(String taskQueueSid) {
    this.taskQueueSid = taskQueueSid;
  }


  public TaskrouterV1WorkspaceTask timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The amount of time in seconds that the Task can live before being assigned.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public TaskrouterV1WorkspaceTask url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Task resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public TaskrouterV1WorkspaceTask virtualStartTime(OffsetDateTime virtualStartTime) {
    this.virtualStartTime = virtualStartTime;
    return this;
  }

  /**
   * The date and time in GMT indicating the ordering for routing of the Task specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return virtualStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVirtualStartTime() {
    return virtualStartTime;
  }

  public void setVirtualStartTime(OffsetDateTime virtualStartTime) {
    this.virtualStartTime = virtualStartTime;
  }


  public TaskrouterV1WorkspaceTask workflowFriendlyName(String workflowFriendlyName) {
    this.workflowFriendlyName = workflowFriendlyName;
    return this;
  }

  /**
   * The friendly name of the Workflow that is controlling the Task.
   * @return workflowFriendlyName
   */
  @javax.annotation.Nullable
  public String getWorkflowFriendlyName() {
    return workflowFriendlyName;
  }

  public void setWorkflowFriendlyName(String workflowFriendlyName) {
    this.workflowFriendlyName = workflowFriendlyName;
  }


  public TaskrouterV1WorkspaceTask workflowSid(String workflowSid) {
    this.workflowSid = workflowSid;
    return this;
  }

  /**
   * The SID of the Workflow that is controlling the Task.
   * @return workflowSid
   */
  @javax.annotation.Nullable
  public String getWorkflowSid() {
    return workflowSid;
  }

  public void setWorkflowSid(String workflowSid) {
    this.workflowSid = workflowSid;
  }


  public TaskrouterV1WorkspaceTask workspaceSid(String workspaceSid) {
    this.workspaceSid = workspaceSid;
    return this;
  }

  /**
   * The SID of the Workspace that contains the Task.
   * @return workspaceSid
   */
  @javax.annotation.Nullable
  public String getWorkspaceSid() {
    return workspaceSid;
  }

  public void setWorkspaceSid(String workspaceSid) {
    this.workspaceSid = workspaceSid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskrouterV1WorkspaceTask taskrouterV1WorkspaceTask = (TaskrouterV1WorkspaceTask) o;
    return Objects.equals(this.accountSid, taskrouterV1WorkspaceTask.accountSid) &&
        Objects.equals(this.addons, taskrouterV1WorkspaceTask.addons) &&
        Objects.equals(this.age, taskrouterV1WorkspaceTask.age) &&
        Objects.equals(this.assignmentStatus, taskrouterV1WorkspaceTask.assignmentStatus) &&
        Objects.equals(this.attributes, taskrouterV1WorkspaceTask.attributes) &&
        Objects.equals(this.dateCreated, taskrouterV1WorkspaceTask.dateCreated) &&
        Objects.equals(this.dateUpdated, taskrouterV1WorkspaceTask.dateUpdated) &&
        Objects.equals(this.links, taskrouterV1WorkspaceTask.links) &&
        Objects.equals(this.priority, taskrouterV1WorkspaceTask.priority) &&
        Objects.equals(this.reason, taskrouterV1WorkspaceTask.reason) &&
        Objects.equals(this.sid, taskrouterV1WorkspaceTask.sid) &&
        Objects.equals(this.taskChannelSid, taskrouterV1WorkspaceTask.taskChannelSid) &&
        Objects.equals(this.taskChannelUniqueName, taskrouterV1WorkspaceTask.taskChannelUniqueName) &&
        Objects.equals(this.taskQueueEnteredDate, taskrouterV1WorkspaceTask.taskQueueEnteredDate) &&
        Objects.equals(this.taskQueueFriendlyName, taskrouterV1WorkspaceTask.taskQueueFriendlyName) &&
        Objects.equals(this.taskQueueSid, taskrouterV1WorkspaceTask.taskQueueSid) &&
        Objects.equals(this.timeout, taskrouterV1WorkspaceTask.timeout) &&
        Objects.equals(this.url, taskrouterV1WorkspaceTask.url) &&
        Objects.equals(this.virtualStartTime, taskrouterV1WorkspaceTask.virtualStartTime) &&
        Objects.equals(this.workflowFriendlyName, taskrouterV1WorkspaceTask.workflowFriendlyName) &&
        Objects.equals(this.workflowSid, taskrouterV1WorkspaceTask.workflowSid) &&
        Objects.equals(this.workspaceSid, taskrouterV1WorkspaceTask.workspaceSid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, addons, age, assignmentStatus, attributes, dateCreated, dateUpdated, links, priority, reason, sid, taskChannelSid, taskChannelUniqueName, taskQueueEnteredDate, taskQueueFriendlyName, taskQueueSid, timeout, url, virtualStartTime, workflowFriendlyName, workflowSid, workspaceSid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskrouterV1WorkspaceTask {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    assignmentStatus: ").append(toIndentedString(assignmentStatus)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    taskChannelSid: ").append(toIndentedString(taskChannelSid)).append("\n");
    sb.append("    taskChannelUniqueName: ").append(toIndentedString(taskChannelUniqueName)).append("\n");
    sb.append("    taskQueueEnteredDate: ").append(toIndentedString(taskQueueEnteredDate)).append("\n");
    sb.append("    taskQueueFriendlyName: ").append(toIndentedString(taskQueueFriendlyName)).append("\n");
    sb.append("    taskQueueSid: ").append(toIndentedString(taskQueueSid)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    virtualStartTime: ").append(toIndentedString(virtualStartTime)).append("\n");
    sb.append("    workflowFriendlyName: ").append(toIndentedString(workflowFriendlyName)).append("\n");
    sb.append("    workflowSid: ").append(toIndentedString(workflowSid)).append("\n");
    sb.append("    workspaceSid: ").append(toIndentedString(workspaceSid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("addons");
    openapiFields.add("age");
    openapiFields.add("assignment_status");
    openapiFields.add("attributes");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("links");
    openapiFields.add("priority");
    openapiFields.add("reason");
    openapiFields.add("sid");
    openapiFields.add("task_channel_sid");
    openapiFields.add("task_channel_unique_name");
    openapiFields.add("task_queue_entered_date");
    openapiFields.add("task_queue_friendly_name");
    openapiFields.add("task_queue_sid");
    openapiFields.add("timeout");
    openapiFields.add("url");
    openapiFields.add("virtual_start_time");
    openapiFields.add("workflow_friendly_name");
    openapiFields.add("workflow_sid");
    openapiFields.add("workspace_sid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskrouterV1WorkspaceTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskrouterV1WorkspaceTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskrouterV1WorkspaceTask is not found in the empty JSON string", TaskrouterV1WorkspaceTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskrouterV1WorkspaceTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskrouterV1WorkspaceTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull()) && !jsonObj.get("addons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addons").toString()));
      }
      if ((jsonObj.get("assignment_status") != null && !jsonObj.get("assignment_status").isJsonNull()) && !jsonObj.get("assignment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignment_status").toString()));
      }
      // validate the optional field `assignment_status`
      if (jsonObj.get("assignment_status") != null && !jsonObj.get("assignment_status").isJsonNull()) {
        TaskEnumStatus.validateJsonElement(jsonObj.get("assignment_status"));
      }
      if ((jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) && !jsonObj.get("attributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("task_channel_sid") != null && !jsonObj.get("task_channel_sid").isJsonNull()) && !jsonObj.get("task_channel_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_channel_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_channel_sid").toString()));
      }
      if ((jsonObj.get("task_channel_unique_name") != null && !jsonObj.get("task_channel_unique_name").isJsonNull()) && !jsonObj.get("task_channel_unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_channel_unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_channel_unique_name").toString()));
      }
      if ((jsonObj.get("task_queue_friendly_name") != null && !jsonObj.get("task_queue_friendly_name").isJsonNull()) && !jsonObj.get("task_queue_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_queue_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_queue_friendly_name").toString()));
      }
      if ((jsonObj.get("task_queue_sid") != null && !jsonObj.get("task_queue_sid").isJsonNull()) && !jsonObj.get("task_queue_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_queue_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_queue_sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("workflow_friendly_name") != null && !jsonObj.get("workflow_friendly_name").isJsonNull()) && !jsonObj.get("workflow_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_friendly_name").toString()));
      }
      if ((jsonObj.get("workflow_sid") != null && !jsonObj.get("workflow_sid").isJsonNull()) && !jsonObj.get("workflow_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_sid").toString()));
      }
      if ((jsonObj.get("workspace_sid") != null && !jsonObj.get("workspace_sid").isJsonNull()) && !jsonObj.get("workspace_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_sid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskrouterV1WorkspaceTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskrouterV1WorkspaceTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskrouterV1WorkspaceTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskrouterV1WorkspaceTask.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskrouterV1WorkspaceTask>() {
           @Override
           public void write(JsonWriter out, TaskrouterV1WorkspaceTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskrouterV1WorkspaceTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskrouterV1WorkspaceTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskrouterV1WorkspaceTask
   * @throws IOException if the JSON string is invalid with respect to TaskrouterV1WorkspaceTask
   */
  public static TaskrouterV1WorkspaceTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskrouterV1WorkspaceTask.class);
  }

  /**
   * Convert an instance of TaskrouterV1WorkspaceTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

