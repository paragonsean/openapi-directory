/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTaskQueuesStatisticsResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1TaskQueuesStatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1TaskQueuesStatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1TaskQueuesStatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listTaskQueuesStatistics
     * @param workspaceSid The SID of the Workspace with the TaskQueues to read. (required)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue statistics to read. (optional)
     * @param minutes Only calculate statistics since this many minutes in the past. The default is 15 minutes. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param splitByWaitTime A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskQueuesStatisticsCall(String workspaceSid, OffsetDateTime endDate, String friendlyName, Integer minutes, OffsetDateTime startDate, String taskChannel, String splitByWaitTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (minutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Minutes", minutes));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (taskChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskChannel", taskChannel));
        }

        if (splitByWaitTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SplitByWaitTime", splitByWaitTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskQueuesStatisticsValidateBeforeCall(String workspaceSid, OffsetDateTime endDate, String friendlyName, Integer minutes, OffsetDateTime startDate, String taskChannel, String splitByWaitTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listTaskQueuesStatistics(Async)");
        }

        return listTaskQueuesStatisticsCall(workspaceSid, endDate, friendlyName, minutes, startDate, taskChannel, splitByWaitTime, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueues to read. (required)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue statistics to read. (optional)
     * @param minutes Only calculate statistics since this many minutes in the past. The default is 15 minutes. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param splitByWaitTime A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTaskQueuesStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskQueuesStatisticsResponse listTaskQueuesStatistics(String workspaceSid, OffsetDateTime endDate, String friendlyName, Integer minutes, OffsetDateTime startDate, String taskChannel, String splitByWaitTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTaskQueuesStatisticsResponse> localVarResp = listTaskQueuesStatisticsWithHttpInfo(workspaceSid, endDate, friendlyName, minutes, startDate, taskChannel, splitByWaitTime, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueues to read. (required)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue statistics to read. (optional)
     * @param minutes Only calculate statistics since this many minutes in the past. The default is 15 minutes. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param splitByWaitTime A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTaskQueuesStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTaskQueuesStatisticsResponse> listTaskQueuesStatisticsWithHttpInfo(String workspaceSid, OffsetDateTime endDate, String friendlyName, Integer minutes, OffsetDateTime startDate, String taskChannel, String splitByWaitTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTaskQueuesStatisticsValidateBeforeCall(workspaceSid, endDate, friendlyName, minutes, startDate, taskChannel, splitByWaitTime, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTaskQueuesStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueues to read. (required)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue statistics to read. (optional)
     * @param minutes Only calculate statistics since this many minutes in the past. The default is 15 minutes. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param splitByWaitTime A comma separated list of values that describes the thresholds, in seconds, to calculate statistics on. For each threshold specified, the number of Tasks canceled and reservations accepted above and below the specified thresholds in seconds are computed. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskQueuesStatisticsAsync(String workspaceSid, OffsetDateTime endDate, String friendlyName, Integer minutes, OffsetDateTime startDate, String taskChannel, String splitByWaitTime, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTaskQueuesStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskQueuesStatisticsValidateBeforeCall(workspaceSid, endDate, friendlyName, minutes, startDate, taskChannel, splitByWaitTime, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTaskQueuesStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
