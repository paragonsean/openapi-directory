/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTaskQueueResponse;
import org.openapitools.client.model.TaskQueueEnumTaskOrder;
import org.openapitools.client.model.TaskrouterV1WorkspaceTaskQueue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1TaskQueueApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1TaskQueueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1TaskQueueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTaskQueue
     * @param workspaceSid The SID of the Workspace that the new TaskQueue belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned to them. (optional)
     * @param maxReservedWorkers The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, &#x60;&#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39;&#x60;. The default value is &#x60;1&#x3D;&#x3D;1&#x60;. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers). (optional)
     * @param taskOrder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskQueueCall(String workspaceSid, String friendlyName, String assignmentActivitySid, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignmentActivitySid != null) {
            localVarFormParams.put("AssignmentActivitySid", assignmentActivitySid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (maxReservedWorkers != null) {
            localVarFormParams.put("MaxReservedWorkers", maxReservedWorkers);
        }

        if (reservationActivitySid != null) {
            localVarFormParams.put("ReservationActivitySid", reservationActivitySid);
        }

        if (targetWorkers != null) {
            localVarFormParams.put("TargetWorkers", targetWorkers);
        }

        if (taskOrder != null) {
            localVarFormParams.put("TaskOrder", taskOrder);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskQueueValidateBeforeCall(String workspaceSid, String friendlyName, String assignmentActivitySid, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling createTaskQueue(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createTaskQueue(Async)");
        }

        return createTaskQueueCall(workspaceSid, friendlyName, assignmentActivitySid, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new TaskQueue belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned to them. (optional)
     * @param maxReservedWorkers The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, &#x60;&#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39;&#x60;. The default value is &#x60;1&#x3D;&#x3D;1&#x60;. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers). (optional)
     * @param taskOrder  (optional)
     * @return TaskrouterV1WorkspaceTaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceTaskQueue createTaskQueue(String workspaceSid, String friendlyName, String assignmentActivitySid, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceTaskQueue> localVarResp = createTaskQueueWithHttpInfo(workspaceSid, friendlyName, assignmentActivitySid, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace that the new TaskQueue belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned to them. (optional)
     * @param maxReservedWorkers The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, &#x60;&#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39;&#x60;. The default value is &#x60;1&#x3D;&#x3D;1&#x60;. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers). (optional)
     * @param taskOrder  (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceTaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceTaskQueue> createTaskQueueWithHttpInfo(String workspaceSid, String friendlyName, String assignmentActivitySid, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder) throws ApiException {
        okhttp3.Call localVarCall = createTaskQueueValidateBeforeCall(workspaceSid, friendlyName, assignmentActivitySid, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace that the new TaskQueue belongs to. (required)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned to them. (optional)
     * @param maxReservedWorkers The maximum number of Workers to reserve for the assignment of a Task in the queue. Can be an integer between 1 and 50, inclusive and defaults to 1. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string that describes the Worker selection criteria for any Tasks that enter the TaskQueue. For example, &#x60;&#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39;&#x60;. The default value is &#x60;1&#x3D;&#x3D;1&#x60;. If this value is empty, Tasks will wait in the TaskQueue until they are deleted or moved to another TaskQueue. For more information about Worker selection, see [Describing Worker selection criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues#target-workers). (optional)
     * @param taskOrder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskQueueAsync(String workspaceSid, String friendlyName, String assignmentActivitySid, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback<TaskrouterV1WorkspaceTaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskQueueValidateBeforeCall(workspaceSid, friendlyName, assignmentActivitySid, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTaskQueue
     * @param workspaceSid The SID of the Workspace with the TaskQueue to delete. (required)
     * @param sid The SID of the TaskQueue resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskQueueCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskQueueValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling deleteTaskQueue(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTaskQueue(Async)");
        }

        return deleteTaskQueueCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to delete. (required)
     * @param sid The SID of the TaskQueue resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTaskQueue(String workspaceSid, String sid) throws ApiException {
        deleteTaskQueueWithHttpInfo(workspaceSid, sid);
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to delete. (required)
     * @param sid The SID of the TaskQueue resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTaskQueueWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskQueueValidateBeforeCall(workspaceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to delete. (required)
     * @param sid The SID of the TaskQueue resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskQueueAsync(String workspaceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskQueueValidateBeforeCall(workspaceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTaskQueue
     * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch. (required)
     * @param sid The SID of the TaskQueue resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTaskQueueCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTaskQueueValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchTaskQueue(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTaskQueue(Async)");
        }

        return fetchTaskQueueCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch. (required)
     * @param sid The SID of the TaskQueue resource to fetch. (required)
     * @return TaskrouterV1WorkspaceTaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceTaskQueue fetchTaskQueue(String workspaceSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceTaskQueue> localVarResp = fetchTaskQueueWithHttpInfo(workspaceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch. (required)
     * @param sid The SID of the TaskQueue resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceTaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceTaskQueue> fetchTaskQueueWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTaskQueueValidateBeforeCall(workspaceSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to fetch. (required)
     * @param sid The SID of the TaskQueue resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTaskQueueAsync(String workspaceSid, String sid, final ApiCallback<TaskrouterV1WorkspaceTaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTaskQueueValidateBeforeCall(workspaceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTaskQueue
     * @param workspaceSid The SID of the Workspace with the TaskQueue to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue resources to read. (optional)
     * @param evaluateWorkerAttributes The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter. (optional)
     * @param workerSid The SID of the Worker with the TaskQueue resources to read. (optional)
     * @param ordering Sorting parameter for TaskQueues (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskQueueCall(String workspaceSid, String friendlyName, String evaluateWorkerAttributes, String workerSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (evaluateWorkerAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EvaluateWorkerAttributes", evaluateWorkerAttributes));
        }

        if (workerSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WorkerSid", workerSid));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Ordering", ordering));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskQueueValidateBeforeCall(String workspaceSid, String friendlyName, String evaluateWorkerAttributes, String workerSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listTaskQueue(Async)");
        }

        return listTaskQueueCall(workspaceSid, friendlyName, evaluateWorkerAttributes, workerSid, ordering, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue resources to read. (optional)
     * @param evaluateWorkerAttributes The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter. (optional)
     * @param workerSid The SID of the Worker with the TaskQueue resources to read. (optional)
     * @param ordering Sorting parameter for TaskQueues (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTaskQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskQueueResponse listTaskQueue(String workspaceSid, String friendlyName, String evaluateWorkerAttributes, String workerSid, String ordering, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTaskQueueResponse> localVarResp = listTaskQueueWithHttpInfo(workspaceSid, friendlyName, evaluateWorkerAttributes, workerSid, ordering, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue resources to read. (optional)
     * @param evaluateWorkerAttributes The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter. (optional)
     * @param workerSid The SID of the Worker with the TaskQueue resources to read. (optional)
     * @param ordering Sorting parameter for TaskQueues (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTaskQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTaskQueueResponse> listTaskQueueWithHttpInfo(String workspaceSid, String friendlyName, String evaluateWorkerAttributes, String workerSid, String ordering, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTaskQueueValidateBeforeCall(workspaceSid, friendlyName, evaluateWorkerAttributes, workerSid, ordering, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTaskQueueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to read. (required)
     * @param friendlyName The &#x60;friendly_name&#x60; of the TaskQueue resources to read. (optional)
     * @param evaluateWorkerAttributes The attributes of the Workers to read. Returns the TaskQueues with Workers that match the attributes specified in this parameter. (optional)
     * @param workerSid The SID of the Worker with the TaskQueue resources to read. (optional)
     * @param ordering Sorting parameter for TaskQueues (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTaskQueueAsync(String workspaceSid, String friendlyName, String evaluateWorkerAttributes, String workerSid, String ordering, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTaskQueueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskQueueValidateBeforeCall(workspaceSid, friendlyName, evaluateWorkerAttributes, workerSid, ordering, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTaskQueueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTaskQueue
     * @param workspaceSid The SID of the Workspace with the TaskQueue to update. (required)
     * @param sid The SID of the TaskQueue resource to update. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned for them. (optional)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (optional)
     * @param maxReservedWorkers The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example &#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39; If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below. (optional)
     * @param taskOrder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskQueueCall(String workspaceSid, String sid, String assignmentActivitySid, String friendlyName, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignmentActivitySid != null) {
            localVarFormParams.put("AssignmentActivitySid", assignmentActivitySid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (maxReservedWorkers != null) {
            localVarFormParams.put("MaxReservedWorkers", maxReservedWorkers);
        }

        if (reservationActivitySid != null) {
            localVarFormParams.put("ReservationActivitySid", reservationActivitySid);
        }

        if (targetWorkers != null) {
            localVarFormParams.put("TargetWorkers", targetWorkers);
        }

        if (taskOrder != null) {
            localVarFormParams.put("TaskOrder", taskOrder);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskQueueValidateBeforeCall(String workspaceSid, String sid, String assignmentActivitySid, String friendlyName, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling updateTaskQueue(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateTaskQueue(Async)");
        }

        return updateTaskQueueCall(workspaceSid, sid, assignmentActivitySid, friendlyName, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to update. (required)
     * @param sid The SID of the TaskQueue resource to update. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned for them. (optional)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (optional)
     * @param maxReservedWorkers The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example &#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39; If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below. (optional)
     * @param taskOrder  (optional)
     * @return TaskrouterV1WorkspaceTaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceTaskQueue updateTaskQueue(String workspaceSid, String sid, String assignmentActivitySid, String friendlyName, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceTaskQueue> localVarResp = updateTaskQueueWithHttpInfo(workspaceSid, sid, assignmentActivitySid, friendlyName, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to update. (required)
     * @param sid The SID of the TaskQueue resource to update. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned for them. (optional)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (optional)
     * @param maxReservedWorkers The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example &#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39; If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below. (optional)
     * @param taskOrder  (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceTaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceTaskQueue> updateTaskQueueWithHttpInfo(String workspaceSid, String sid, String assignmentActivitySid, String friendlyName, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder) throws ApiException {
        okhttp3.Call localVarCall = updateTaskQueueValidateBeforeCall(workspaceSid, sid, assignmentActivitySid, friendlyName, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the TaskQueue to update. (required)
     * @param sid The SID of the TaskQueue resource to update. (required)
     * @param assignmentActivitySid The SID of the Activity to assign Workers when a task is assigned for them. (optional)
     * @param friendlyName A descriptive string that you create to describe the TaskQueue. For example &#x60;Support-Tier 1&#x60;, &#x60;Sales&#x60;, or &#x60;Escalation&#x60;. (optional)
     * @param maxReservedWorkers The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50. (optional)
     * @param reservationActivitySid The SID of the Activity to assign Workers when a task is reserved for them. (optional)
     * @param targetWorkers A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example &#39;\\\&quot;language\\\&quot; &#x3D;&#x3D; \\\&quot;spanish\\\&quot;&#39; If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below. (optional)
     * @param taskOrder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskQueueAsync(String workspaceSid, String sid, String assignmentActivitySid, String friendlyName, Integer maxReservedWorkers, String reservationActivitySid, String targetWorkers, TaskQueueEnumTaskOrder taskOrder, final ApiCallback<TaskrouterV1WorkspaceTaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskQueueValidateBeforeCall(workspaceSid, sid, assignmentActivitySid, friendlyName, maxReservedWorkers, reservationActivitySid, targetWorkers, taskOrder, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceTaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
