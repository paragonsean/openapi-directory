/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListEventResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TaskrouterV1WorkspaceEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1EventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1EventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1EventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchEvent
     * @param workspaceSid The SID of the Workspace with the Event to fetch. (required)
     * @param sid The SID of the Event resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEventCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Events/{Sid}"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEventValidateBeforeCall(String workspaceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchEvent(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchEvent(Async)");
        }

        return fetchEventCall(workspaceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Event to fetch. (required)
     * @param sid The SID of the Event resource to fetch. (required)
     * @return TaskrouterV1WorkspaceEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceEvent fetchEvent(String workspaceSid, String sid) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceEvent> localVarResp = fetchEventWithHttpInfo(workspaceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Event to fetch. (required)
     * @param sid The SID of the Event resource to fetch. (required)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceEvent> fetchEventWithHttpInfo(String workspaceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchEventValidateBeforeCall(workspaceSid, sid, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Event to fetch. (required)
     * @param sid The SID of the Event resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEventAsync(String workspaceSid, String sid, final ApiCallback<TaskrouterV1WorkspaceEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEventValidateBeforeCall(workspaceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEvent
     * @param workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace. (required)
     * @param endDate Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param eventType The type of Events to read. Returns only Events of the type specified. (optional)
     * @param minutes The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is &#x60;15&#x60; minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted. (optional)
     * @param reservationSid The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation. (optional)
     * @param startDate Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted. (optional)
     * @param taskQueueSid The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue. (optional)
     * @param taskSid The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task. (optional)
     * @param workerSid The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker. (optional)
     * @param workflowSid The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow. (optional)
     * @param taskChannel The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel. (optional)
     * @param sid The SID of the Event resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventCall(String workspaceSid, OffsetDateTime endDate, String eventType, Integer minutes, String reservationSid, OffsetDateTime startDate, String taskQueueSid, String taskSid, String workerSid, String workflowSid, String taskChannel, String sid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Events"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventType", eventType));
        }

        if (minutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Minutes", minutes));
        }

        if (reservationSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservationSid", reservationSid));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (taskQueueSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskQueueSid", taskQueueSid));
        }

        if (taskSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskSid", taskSid));
        }

        if (workerSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WorkerSid", workerSid));
        }

        if (workflowSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WorkflowSid", workflowSid));
        }

        if (taskChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskChannel", taskChannel));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sid", sid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventValidateBeforeCall(String workspaceSid, OffsetDateTime endDate, String eventType, Integer minutes, String reservationSid, OffsetDateTime startDate, String taskQueueSid, String taskSid, String workerSid, String workflowSid, String taskChannel, String sid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling listEvent(Async)");
        }

        return listEventCall(workspaceSid, endDate, eventType, minutes, reservationSid, startDate, taskQueueSid, taskSid, workerSid, workflowSid, taskChannel, sid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace. (required)
     * @param endDate Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param eventType The type of Events to read. Returns only Events of the type specified. (optional)
     * @param minutes The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is &#x60;15&#x60; minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted. (optional)
     * @param reservationSid The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation. (optional)
     * @param startDate Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted. (optional)
     * @param taskQueueSid The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue. (optional)
     * @param taskSid The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task. (optional)
     * @param workerSid The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker. (optional)
     * @param workflowSid The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow. (optional)
     * @param taskChannel The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel. (optional)
     * @param sid The SID of the Event resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListEventResponse listEvent(String workspaceSid, OffsetDateTime endDate, String eventType, Integer minutes, String reservationSid, OffsetDateTime startDate, String taskQueueSid, String taskSid, String workerSid, String workflowSid, String taskChannel, String sid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListEventResponse> localVarResp = listEventWithHttpInfo(workspaceSid, endDate, eventType, minutes, reservationSid, startDate, taskQueueSid, taskSid, workerSid, workflowSid, taskChannel, sid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace. (required)
     * @param endDate Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param eventType The type of Events to read. Returns only Events of the type specified. (optional)
     * @param minutes The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is &#x60;15&#x60; minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted. (optional)
     * @param reservationSid The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation. (optional)
     * @param startDate Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted. (optional)
     * @param taskQueueSid The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue. (optional)
     * @param taskSid The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task. (optional)
     * @param workerSid The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker. (optional)
     * @param workflowSid The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow. (optional)
     * @param taskChannel The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel. (optional)
     * @param sid The SID of the Event resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEventResponse> listEventWithHttpInfo(String workspaceSid, OffsetDateTime endDate, String eventType, Integer minutes, String reservationSid, OffsetDateTime startDate, String taskQueueSid, String taskSid, String workerSid, String workflowSid, String taskChannel, String sid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEventValidateBeforeCall(workspaceSid, endDate, eventType, minutes, reservationSid, startDate, taskQueueSid, taskSid, workerSid, workflowSid, taskChannel, sid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Events to read. Returns only the Events that pertain to the specified Workspace. (required)
     * @param endDate Only include Events that occurred on or before this date, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param eventType The type of Events to read. Returns only Events of the type specified. (optional)
     * @param minutes The period of events to read in minutes. Returns only Events that occurred since this many minutes in the past. The default is &#x60;15&#x60; minutes. Task Attributes for Events occuring more 43,200 minutes ago will be redacted. (optional)
     * @param reservationSid The SID of the Reservation with the Events to read. Returns only Events that pertain to the specified Reservation. (optional)
     * @param startDate Only include Events from on or after this date and time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task Attributes for Events older than 30 days will be redacted. (optional)
     * @param taskQueueSid The SID of the TaskQueue with the Events to read. Returns only the Events that pertain to the specified TaskQueue. (optional)
     * @param taskSid The SID of the Task with the Events to read. Returns only the Events that pertain to the specified Task. (optional)
     * @param workerSid The SID of the Worker with the Events to read. Returns only the Events that pertain to the specified Worker. (optional)
     * @param workflowSid The SID of the Workflow with the Events to read. Returns only the Events that pertain to the specified Workflow. (optional)
     * @param taskChannel The TaskChannel with the Events to read. Returns only the Events that pertain to the specified TaskChannel. (optional)
     * @param sid The SID of the Event resource to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventAsync(String workspaceSid, OffsetDateTime endDate, String eventType, Integer minutes, String reservationSid, OffsetDateTime startDate, String taskQueueSid, String taskSid, String workerSid, String workflowSid, String taskChannel, String sid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventValidateBeforeCall(workspaceSid, endDate, eventType, minutes, reservationSid, startDate, taskQueueSid, taskSid, workerSid, workflowSid, taskChannel, sid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
