/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.TaskrouterV1WorkspaceWorkerWorkerStatistics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskrouterV1WorkersStatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskrouterV1WorkersStatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskrouterV1WorkersStatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchWorkerStatistics
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param minutes Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param taskQueueSid The SID of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param friendlyName Only include Workers with &#x60;friendly_name&#x60; values that match this parameter. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerStatisticsCall(String workspaceSid, Integer minutes, OffsetDateTime startDate, OffsetDateTime endDate, String taskQueueSid, String taskQueueName, String friendlyName, String taskChannel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://taskrouter.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Workspaces/{WorkspaceSid}/Workers/Statistics"
            .replace("{" + "WorkspaceSid" + "}", localVarApiClient.escapeString(workspaceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Minutes", minutes));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (taskQueueSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskQueueSid", taskQueueSid));
        }

        if (taskQueueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskQueueName", taskQueueName));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (taskChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskChannel", taskChannel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWorkerStatisticsValidateBeforeCall(String workspaceSid, Integer minutes, OffsetDateTime startDate, OffsetDateTime endDate, String taskQueueSid, String taskQueueName, String friendlyName, String taskChannel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSid' is set
        if (workspaceSid == null) {
            throw new ApiException("Missing the required parameter 'workspaceSid' when calling fetchWorkerStatistics(Async)");
        }

        return fetchWorkerStatisticsCall(workspaceSid, minutes, startDate, endDate, taskQueueSid, taskQueueName, friendlyName, taskChannel, _callback);

    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param minutes Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param taskQueueSid The SID of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param friendlyName Only include Workers with &#x60;friendly_name&#x60; values that match this parameter. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @return TaskrouterV1WorkspaceWorkerWorkerStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TaskrouterV1WorkspaceWorkerWorkerStatistics fetchWorkerStatistics(String workspaceSid, Integer minutes, OffsetDateTime startDate, OffsetDateTime endDate, String taskQueueSid, String taskQueueName, String friendlyName, String taskChannel) throws ApiException {
        ApiResponse<TaskrouterV1WorkspaceWorkerWorkerStatistics> localVarResp = fetchWorkerStatisticsWithHttpInfo(workspaceSid, minutes, startDate, endDate, taskQueueSid, taskQueueName, friendlyName, taskChannel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param minutes Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param taskQueueSid The SID of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param friendlyName Only include Workers with &#x60;friendly_name&#x60; values that match this parameter. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @return ApiResponse&lt;TaskrouterV1WorkspaceWorkerWorkerStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskrouterV1WorkspaceWorkerWorkerStatistics> fetchWorkerStatisticsWithHttpInfo(String workspaceSid, Integer minutes, OffsetDateTime startDate, OffsetDateTime endDate, String taskQueueSid, String taskQueueName, String friendlyName, String taskChannel) throws ApiException {
        okhttp3.Call localVarCall = fetchWorkerStatisticsValidateBeforeCall(workspaceSid, minutes, startDate, endDate, taskQueueSid, taskQueueName, friendlyName, taskChannel, null);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workspaceSid The SID of the Workspace with the Worker to fetch. (required)
     * @param minutes Only calculate statistics since this many minutes in the past. The default 15 minutes. This is helpful for displaying statistics for the last 15 minutes, 240 minutes (4 hours), and 480 minutes (8 hours) to see trends. (optional)
     * @param startDate Only calculate statistics from this date and time and later, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. (optional)
     * @param endDate Only calculate statistics from this date and time and earlier, specified in GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time. (optional)
     * @param taskQueueSid The SID of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param taskQueueName The &#x60;friendly_name&#x60; of the TaskQueue for which to fetch Worker statistics. (optional)
     * @param friendlyName Only include Workers with &#x60;friendly_name&#x60; values that match this parameter. (optional)
     * @param taskChannel Only calculate statistics on this TaskChannel. Can be the TaskChannel&#39;s SID or its &#x60;unique_name&#x60;, such as &#x60;voice&#x60;, &#x60;sms&#x60;, or &#x60;default&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWorkerStatisticsAsync(String workspaceSid, Integer minutes, OffsetDateTime startDate, OffsetDateTime endDate, String taskQueueSid, String taskQueueName, String friendlyName, String taskChannel, final ApiCallback<TaskrouterV1WorkspaceWorkerWorkerStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWorkerStatisticsValidateBeforeCall(workspaceSid, minutes, startDate, endDate, taskQueueSid, taskQueueName, friendlyName, taskChannel, _callback);
        Type localVarReturnType = new TypeToken<TaskrouterV1WorkspaceWorkerWorkerStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
