/*
 * Twilio - Taskrouter
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WorkspaceEnumQueueOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskrouterV1Workspace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:15.049055-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskrouterV1Workspace {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVITY_NAME = "default_activity_name";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVITY_NAME)
  private String defaultActivityName;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVITY_SID = "default_activity_sid";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVITY_SID)
  private String defaultActivitySid;

  public static final String SERIALIZED_NAME_EVENT_CALLBACK_URL = "event_callback_url";
  @SerializedName(SERIALIZED_NAME_EVENT_CALLBACK_URL)
  private URI eventCallbackUrl;

  public static final String SERIALIZED_NAME_EVENTS_FILTER = "events_filter";
  @SerializedName(SERIALIZED_NAME_EVENTS_FILTER)
  private String eventsFilter;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MULTI_TASK_ENABLED = "multi_task_enabled";
  @SerializedName(SERIALIZED_NAME_MULTI_TASK_ENABLED)
  private Boolean multiTaskEnabled;

  public static final String SERIALIZED_NAME_PRIORITIZE_QUEUE_ORDER = "prioritize_queue_order";
  @SerializedName(SERIALIZED_NAME_PRIORITIZE_QUEUE_ORDER)
  private WorkspaceEnumQueueOrder prioritizeQueueOrder;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TIMEOUT_ACTIVITY_NAME = "timeout_activity_name";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_ACTIVITY_NAME)
  private String timeoutActivityName;

  public static final String SERIALIZED_NAME_TIMEOUT_ACTIVITY_SID = "timeout_activity_sid";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_ACTIVITY_SID)
  private String timeoutActivitySid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public TaskrouterV1Workspace() {
  }

  public TaskrouterV1Workspace accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public TaskrouterV1Workspace dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TaskrouterV1Workspace dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public TaskrouterV1Workspace defaultActivityName(String defaultActivityName) {
    this.defaultActivityName = defaultActivityName;
    return this;
  }

  /**
   * The name of the default activity.
   * @return defaultActivityName
   */
  @javax.annotation.Nullable
  public String getDefaultActivityName() {
    return defaultActivityName;
  }

  public void setDefaultActivityName(String defaultActivityName) {
    this.defaultActivityName = defaultActivityName;
  }


  public TaskrouterV1Workspace defaultActivitySid(String defaultActivitySid) {
    this.defaultActivitySid = defaultActivitySid;
    return this;
  }

  /**
   * The SID of the Activity that will be used when new Workers are created in the Workspace.
   * @return defaultActivitySid
   */
  @javax.annotation.Nullable
  public String getDefaultActivitySid() {
    return defaultActivitySid;
  }

  public void setDefaultActivitySid(String defaultActivitySid) {
    this.defaultActivitySid = defaultActivitySid;
  }


  public TaskrouterV1Workspace eventCallbackUrl(URI eventCallbackUrl) {
    this.eventCallbackUrl = eventCallbackUrl;
    return this;
  }

  /**
   * The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio&#39;s [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
   * @return eventCallbackUrl
   */
  @javax.annotation.Nullable
  public URI getEventCallbackUrl() {
    return eventCallbackUrl;
  }

  public void setEventCallbackUrl(URI eventCallbackUrl) {
    this.eventCallbackUrl = eventCallbackUrl;
  }


  public TaskrouterV1Workspace eventsFilter(String eventsFilter) {
    this.eventsFilter = eventsFilter;
    return this;
  }

  /**
   * The list of Workspace events for which to call &#x60;event_callback_url&#x60;. For example, if &#x60;EventsFilter&#x3D;task.created, task.canceled, worker.activity.update&#x60;, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
   * @return eventsFilter
   */
  @javax.annotation.Nullable
  public String getEventsFilter() {
    return eventsFilter;
  }

  public void setEventsFilter(String eventsFilter) {
    this.eventsFilter = eventsFilter;
  }


  public TaskrouterV1Workspace friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The string that you assigned to describe the Workspace resource. For example &#x60;Customer Support&#x60; or &#x60;2014 Election Campaign&#x60;.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public TaskrouterV1Workspace links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of related resources.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public TaskrouterV1Workspace multiTaskEnabled(Boolean multiTaskEnabled) {
    this.multiTaskEnabled = multiTaskEnabled;
    return this;
  }

  /**
   * Whether multi-tasking is enabled. The default is &#x60;true&#x60;, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (&#x60;true&#x60;), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
   * @return multiTaskEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMultiTaskEnabled() {
    return multiTaskEnabled;
  }

  public void setMultiTaskEnabled(Boolean multiTaskEnabled) {
    this.multiTaskEnabled = multiTaskEnabled;
  }


  public TaskrouterV1Workspace prioritizeQueueOrder(WorkspaceEnumQueueOrder prioritizeQueueOrder) {
    this.prioritizeQueueOrder = prioritizeQueueOrder;
    return this;
  }

  /**
   * Get prioritizeQueueOrder
   * @return prioritizeQueueOrder
   */
  @javax.annotation.Nullable
  public WorkspaceEnumQueueOrder getPrioritizeQueueOrder() {
    return prioritizeQueueOrder;
  }

  public void setPrioritizeQueueOrder(WorkspaceEnumQueueOrder prioritizeQueueOrder) {
    this.prioritizeQueueOrder = prioritizeQueueOrder;
  }


  public TaskrouterV1Workspace sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Workspace resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public TaskrouterV1Workspace timeoutActivityName(String timeoutActivityName) {
    this.timeoutActivityName = timeoutActivityName;
    return this;
  }

  /**
   * The name of the timeout activity.
   * @return timeoutActivityName
   */
  @javax.annotation.Nullable
  public String getTimeoutActivityName() {
    return timeoutActivityName;
  }

  public void setTimeoutActivityName(String timeoutActivityName) {
    this.timeoutActivityName = timeoutActivityName;
  }


  public TaskrouterV1Workspace timeoutActivitySid(String timeoutActivitySid) {
    this.timeoutActivitySid = timeoutActivitySid;
    return this;
  }

  /**
   * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
   * @return timeoutActivitySid
   */
  @javax.annotation.Nullable
  public String getTimeoutActivitySid() {
    return timeoutActivitySid;
  }

  public void setTimeoutActivitySid(String timeoutActivitySid) {
    this.timeoutActivitySid = timeoutActivitySid;
  }


  public TaskrouterV1Workspace url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Workspace resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskrouterV1Workspace taskrouterV1Workspace = (TaskrouterV1Workspace) o;
    return Objects.equals(this.accountSid, taskrouterV1Workspace.accountSid) &&
        Objects.equals(this.dateCreated, taskrouterV1Workspace.dateCreated) &&
        Objects.equals(this.dateUpdated, taskrouterV1Workspace.dateUpdated) &&
        Objects.equals(this.defaultActivityName, taskrouterV1Workspace.defaultActivityName) &&
        Objects.equals(this.defaultActivitySid, taskrouterV1Workspace.defaultActivitySid) &&
        Objects.equals(this.eventCallbackUrl, taskrouterV1Workspace.eventCallbackUrl) &&
        Objects.equals(this.eventsFilter, taskrouterV1Workspace.eventsFilter) &&
        Objects.equals(this.friendlyName, taskrouterV1Workspace.friendlyName) &&
        Objects.equals(this.links, taskrouterV1Workspace.links) &&
        Objects.equals(this.multiTaskEnabled, taskrouterV1Workspace.multiTaskEnabled) &&
        Objects.equals(this.prioritizeQueueOrder, taskrouterV1Workspace.prioritizeQueueOrder) &&
        Objects.equals(this.sid, taskrouterV1Workspace.sid) &&
        Objects.equals(this.timeoutActivityName, taskrouterV1Workspace.timeoutActivityName) &&
        Objects.equals(this.timeoutActivitySid, taskrouterV1Workspace.timeoutActivitySid) &&
        Objects.equals(this.url, taskrouterV1Workspace.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, dateCreated, dateUpdated, defaultActivityName, defaultActivitySid, eventCallbackUrl, eventsFilter, friendlyName, links, multiTaskEnabled, prioritizeQueueOrder, sid, timeoutActivityName, timeoutActivitySid, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskrouterV1Workspace {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    defaultActivityName: ").append(toIndentedString(defaultActivityName)).append("\n");
    sb.append("    defaultActivitySid: ").append(toIndentedString(defaultActivitySid)).append("\n");
    sb.append("    eventCallbackUrl: ").append(toIndentedString(eventCallbackUrl)).append("\n");
    sb.append("    eventsFilter: ").append(toIndentedString(eventsFilter)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    multiTaskEnabled: ").append(toIndentedString(multiTaskEnabled)).append("\n");
    sb.append("    prioritizeQueueOrder: ").append(toIndentedString(prioritizeQueueOrder)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    timeoutActivityName: ").append(toIndentedString(timeoutActivityName)).append("\n");
    sb.append("    timeoutActivitySid: ").append(toIndentedString(timeoutActivitySid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("default_activity_name");
    openapiFields.add("default_activity_sid");
    openapiFields.add("event_callback_url");
    openapiFields.add("events_filter");
    openapiFields.add("friendly_name");
    openapiFields.add("links");
    openapiFields.add("multi_task_enabled");
    openapiFields.add("prioritize_queue_order");
    openapiFields.add("sid");
    openapiFields.add("timeout_activity_name");
    openapiFields.add("timeout_activity_sid");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskrouterV1Workspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskrouterV1Workspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskrouterV1Workspace is not found in the empty JSON string", TaskrouterV1Workspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskrouterV1Workspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskrouterV1Workspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("default_activity_name") != null && !jsonObj.get("default_activity_name").isJsonNull()) && !jsonObj.get("default_activity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_activity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_activity_name").toString()));
      }
      if ((jsonObj.get("default_activity_sid") != null && !jsonObj.get("default_activity_sid").isJsonNull()) && !jsonObj.get("default_activity_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_activity_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_activity_sid").toString()));
      }
      if ((jsonObj.get("event_callback_url") != null && !jsonObj.get("event_callback_url").isJsonNull()) && !jsonObj.get("event_callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_callback_url").toString()));
      }
      if ((jsonObj.get("events_filter") != null && !jsonObj.get("events_filter").isJsonNull()) && !jsonObj.get("events_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_filter").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("prioritize_queue_order") != null && !jsonObj.get("prioritize_queue_order").isJsonNull()) && !jsonObj.get("prioritize_queue_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prioritize_queue_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prioritize_queue_order").toString()));
      }
      // validate the optional field `prioritize_queue_order`
      if (jsonObj.get("prioritize_queue_order") != null && !jsonObj.get("prioritize_queue_order").isJsonNull()) {
        WorkspaceEnumQueueOrder.validateJsonElement(jsonObj.get("prioritize_queue_order"));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("timeout_activity_name") != null && !jsonObj.get("timeout_activity_name").isJsonNull()) && !jsonObj.get("timeout_activity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout_activity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout_activity_name").toString()));
      }
      if ((jsonObj.get("timeout_activity_sid") != null && !jsonObj.get("timeout_activity_sid").isJsonNull()) && !jsonObj.get("timeout_activity_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout_activity_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout_activity_sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskrouterV1Workspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskrouterV1Workspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskrouterV1Workspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskrouterV1Workspace.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskrouterV1Workspace>() {
           @Override
           public void write(JsonWriter out, TaskrouterV1Workspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskrouterV1Workspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskrouterV1Workspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskrouterV1Workspace
   * @throws IOException if the JSON string is invalid with respect to TaskrouterV1Workspace
   */
  public static TaskrouterV1Workspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskrouterV1Workspace.class);
  }

  /**
   * Convert an instance of TaskrouterV1Workspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

