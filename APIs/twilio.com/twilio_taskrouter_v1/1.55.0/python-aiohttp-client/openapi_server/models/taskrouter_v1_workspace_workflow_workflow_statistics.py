# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TaskrouterV1WorkspaceWorkflowWorkflowStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, cumulative: object=None, realtime: object=None, url: str=None, workflow_sid: str=None, workspace_sid: str=None):
        """TaskrouterV1WorkspaceWorkflowWorkflowStatistics - a model defined in OpenAPI

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :param cumulative: The cumulative of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :param realtime: The realtime of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :param url: The url of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :param workflow_sid: The workflow_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        """
        self.openapi_types = {
            'account_sid': str,
            'cumulative': object,
            'realtime': object,
            'url': str,
            'workflow_sid': str,
            'workspace_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'cumulative': 'cumulative',
            'realtime': 'realtime',
            'url': 'url',
            'workflow_sid': 'workflow_sid',
            'workspace_sid': 'workspace_sid'
        }

        self._account_sid = account_sid
        self._cumulative = cumulative
        self._realtime = realtime
        self._url = url
        self._workflow_sid = workflow_sid
        self._workspace_sid = workspace_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskrouterV1WorkspaceWorkflowWorkflowStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taskrouter.v1.workspace.workflow.workflow_statistics of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.

        :return: The account_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def cumulative(self):
        """Gets the cumulative of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        An object that contains the cumulative statistics for the Workflow.

        :return: The cumulative of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: object
        """
        return self._cumulative

    @cumulative.setter
    def cumulative(self, cumulative):
        """Sets the cumulative of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        An object that contains the cumulative statistics for the Workflow.

        :param cumulative: The cumulative of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type cumulative: object
        """

        self._cumulative = cumulative

    @property
    def realtime(self):
        """Gets the realtime of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        An object that contains the real-time statistics for the Workflow.

        :return: The realtime of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: object
        """
        return self._realtime

    @realtime.setter
    def realtime(self, realtime):
        """Sets the realtime of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        An object that contains the real-time statistics for the Workflow.

        :param realtime: The realtime of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type realtime: object
        """

        self._realtime = realtime

    @property
    def url(self):
        """Gets the url of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The absolute URL of the Workflow statistics resource.

        :return: The url of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The absolute URL of the Workflow statistics resource.

        :param url: The url of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type url: str
        """

        self._url = url

    @property
    def workflow_sid(self):
        """Gets the workflow_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.

        :return: The workflow_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: str
        """
        return self._workflow_sid

    @workflow_sid.setter
    def workflow_sid(self, workflow_sid):
        """Sets the workflow_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        Returns the list of Tasks that are being controlled by the Workflow with the specified SID value.

        :param workflow_sid: The workflow_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type workflow_sid: str
        """
        if workflow_sid is not None and len(workflow_sid) > 34:
            raise ValueError("Invalid value for `workflow_sid`, length must be less than or equal to `34`")
        if workflow_sid is not None and len(workflow_sid) < 34:
            raise ValueError("Invalid value for `workflow_sid`, length must be greater than or equal to `34`")
        if workflow_sid is not None and not re.search(r'^WW[0-9a-fA-F]{32}$', workflow_sid):
            raise ValueError("Invalid value for `workflow_sid`, must be a follow pattern or equal to `/^WW[0-9a-fA-F]{32}$/`")

        self._workflow_sid = workflow_sid

    @property
    def workspace_sid(self):
        """Gets the workspace_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The SID of the Workspace that contains the Workflow.

        :return: The workspace_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :rtype: str
        """
        return self._workspace_sid

    @workspace_sid.setter
    def workspace_sid(self, workspace_sid):
        """Sets the workspace_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.

        The SID of the Workspace that contains the Workflow.

        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkflowWorkflowStatistics.
        :type workspace_sid: str
        """
        if workspace_sid is not None and len(workspace_sid) > 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be less than or equal to `34`")
        if workspace_sid is not None and len(workspace_sid) < 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be greater than or equal to `34`")
        if workspace_sid is not None and not re.search(r'^WS[0-9a-fA-F]{32}$', workspace_sid):
            raise ValueError("Invalid value for `workspace_sid`, must be a follow pattern or equal to `/^WS[0-9a-fA-F]{32}$/`")

        self._workspace_sid = workspace_sid
