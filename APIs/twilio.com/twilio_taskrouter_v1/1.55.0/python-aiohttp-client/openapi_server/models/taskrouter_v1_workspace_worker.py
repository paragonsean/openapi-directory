# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TaskrouterV1WorkspaceWorker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, activity_name: str=None, activity_sid: str=None, attributes: str=None, available: bool=None, date_created: datetime=None, date_status_changed: datetime=None, date_updated: datetime=None, friendly_name: str=None, links: object=None, sid: str=None, url: str=None, workspace_sid: str=None):
        """TaskrouterV1WorkspaceWorker - a model defined in OpenAPI

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorker.
        :param activity_name: The activity_name of this TaskrouterV1WorkspaceWorker.
        :param activity_sid: The activity_sid of this TaskrouterV1WorkspaceWorker.
        :param attributes: The attributes of this TaskrouterV1WorkspaceWorker.
        :param available: The available of this TaskrouterV1WorkspaceWorker.
        :param date_created: The date_created of this TaskrouterV1WorkspaceWorker.
        :param date_status_changed: The date_status_changed of this TaskrouterV1WorkspaceWorker.
        :param date_updated: The date_updated of this TaskrouterV1WorkspaceWorker.
        :param friendly_name: The friendly_name of this TaskrouterV1WorkspaceWorker.
        :param links: The links of this TaskrouterV1WorkspaceWorker.
        :param sid: The sid of this TaskrouterV1WorkspaceWorker.
        :param url: The url of this TaskrouterV1WorkspaceWorker.
        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorker.
        """
        self.openapi_types = {
            'account_sid': str,
            'activity_name': str,
            'activity_sid': str,
            'attributes': str,
            'available': bool,
            'date_created': datetime,
            'date_status_changed': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'links': object,
            'sid': str,
            'url': str,
            'workspace_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'activity_name': 'activity_name',
            'activity_sid': 'activity_sid',
            'attributes': 'attributes',
            'available': 'available',
            'date_created': 'date_created',
            'date_status_changed': 'date_status_changed',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'sid': 'sid',
            'url': 'url',
            'workspace_sid': 'workspace_sid'
        }

        self._account_sid = account_sid
        self._activity_name = activity_name
        self._activity_sid = activity_sid
        self._attributes = attributes
        self._available = available
        self._date_created = date_created
        self._date_status_changed = date_status_changed
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._links = links
        self._sid = sid
        self._url = url
        self._workspace_sid = workspace_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskrouterV1WorkspaceWorker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taskrouter.v1.workspace.worker of this TaskrouterV1WorkspaceWorker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :return: The account_sid of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorker.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def activity_name(self):
        """Gets the activity_name of this TaskrouterV1WorkspaceWorker.

        The `friendly_name` of the Worker's current Activity.

        :return: The activity_name of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this TaskrouterV1WorkspaceWorker.

        The `friendly_name` of the Worker's current Activity.

        :param activity_name: The activity_name of this TaskrouterV1WorkspaceWorker.
        :type activity_name: str
        """

        self._activity_name = activity_name

    @property
    def activity_sid(self):
        """Gets the activity_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the Worker's current Activity.

        :return: The activity_sid of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._activity_sid

    @activity_sid.setter
    def activity_sid(self, activity_sid):
        """Sets the activity_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the Worker's current Activity.

        :param activity_sid: The activity_sid of this TaskrouterV1WorkspaceWorker.
        :type activity_sid: str
        """
        if activity_sid is not None and len(activity_sid) > 34:
            raise ValueError("Invalid value for `activity_sid`, length must be less than or equal to `34`")
        if activity_sid is not None and len(activity_sid) < 34:
            raise ValueError("Invalid value for `activity_sid`, length must be greater than or equal to `34`")
        if activity_sid is not None and not re.search(r'^WA[0-9a-fA-F]{32}$', activity_sid):
            raise ValueError("Invalid value for `activity_sid`, must be a follow pattern or equal to `/^WA[0-9a-fA-F]{32}$/`")

        self._activity_sid = activity_sid

    @property
    def attributes(self):
        """Gets the attributes of this TaskrouterV1WorkspaceWorker.

        The JSON string that describes the Worker. For example: `{ \"email\": \"Bob@example.com\", \"phone\": \"+5095551234\" }`. **Note** If this property has been assigned a value, it will only be displayed in FETCH actions that return a single resource. Otherwise, this property will be null, even if it has a value. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker.

        :return: The attributes of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this TaskrouterV1WorkspaceWorker.

        The JSON string that describes the Worker. For example: `{ \"email\": \"Bob@example.com\", \"phone\": \"+5095551234\" }`. **Note** If this property has been assigned a value, it will only be displayed in FETCH actions that return a single resource. Otherwise, this property will be null, even if it has a value. This data is passed to the `assignment_callback_url` when TaskRouter assigns a Task to the Worker.

        :param attributes: The attributes of this TaskrouterV1WorkspaceWorker.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def available(self):
        """Gets the available of this TaskrouterV1WorkspaceWorker.

        Whether the Worker is available to perform tasks.

        :return: The available of this TaskrouterV1WorkspaceWorker.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this TaskrouterV1WorkspaceWorker.

        Whether the Worker is available to perform tasks.

        :param available: The available of this TaskrouterV1WorkspaceWorker.
        :type available: bool
        """

        self._available = available

    @property
    def date_created(self):
        """Gets the date_created of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this TaskrouterV1WorkspaceWorker.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this TaskrouterV1WorkspaceWorker.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_status_changed(self):
        """Gets the date_status_changed of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT of the last change to the Worker's activity specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Used to calculate Workflow statistics.

        :return: The date_status_changed of this TaskrouterV1WorkspaceWorker.
        :rtype: datetime
        """
        return self._date_status_changed

    @date_status_changed.setter
    def date_status_changed(self, date_status_changed):
        """Sets the date_status_changed of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT of the last change to the Worker's activity specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Used to calculate Workflow statistics.

        :param date_status_changed: The date_status_changed of this TaskrouterV1WorkspaceWorker.
        :type date_status_changed: datetime
        """

        self._date_status_changed = date_status_changed

    @property
    def date_updated(self):
        """Gets the date_updated of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this TaskrouterV1WorkspaceWorker.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this TaskrouterV1WorkspaceWorker.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this TaskrouterV1WorkspaceWorker.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this TaskrouterV1WorkspaceWorker.

        The string that you assigned to describe the resource. Friendly names are case insensitive, and unique within the TaskRouter Workspace.

        :return: The friendly_name of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this TaskrouterV1WorkspaceWorker.

        The string that you assigned to describe the resource. Friendly names are case insensitive, and unique within the TaskRouter Workspace.

        :param friendly_name: The friendly_name of this TaskrouterV1WorkspaceWorker.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this TaskrouterV1WorkspaceWorker.

        The URLs of related resources.

        :return: The links of this TaskrouterV1WorkspaceWorker.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TaskrouterV1WorkspaceWorker.

        The URLs of related resources.

        :param links: The links of this TaskrouterV1WorkspaceWorker.
        :type links: object
        """

        self._links = links

    @property
    def sid(self):
        """Gets the sid of this TaskrouterV1WorkspaceWorker.

        The unique string that we created to identify the Worker resource.

        :return: The sid of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this TaskrouterV1WorkspaceWorker.

        The unique string that we created to identify the Worker resource.

        :param sid: The sid of this TaskrouterV1WorkspaceWorker.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^WK[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^WK[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this TaskrouterV1WorkspaceWorker.

        The absolute URL of the Worker resource.

        :return: The url of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskrouterV1WorkspaceWorker.

        The absolute URL of the Worker resource.

        :param url: The url of this TaskrouterV1WorkspaceWorker.
        :type url: str
        """

        self._url = url

    @property
    def workspace_sid(self):
        """Gets the workspace_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the Workspace that contains the Worker.

        :return: The workspace_sid of this TaskrouterV1WorkspaceWorker.
        :rtype: str
        """
        return self._workspace_sid

    @workspace_sid.setter
    def workspace_sid(self, workspace_sid):
        """Sets the workspace_sid of this TaskrouterV1WorkspaceWorker.

        The SID of the Workspace that contains the Worker.

        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorker.
        :type workspace_sid: str
        """
        if workspace_sid is not None and len(workspace_sid) > 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be less than or equal to `34`")
        if workspace_sid is not None and len(workspace_sid) < 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be greater than or equal to `34`")
        if workspace_sid is not None and not re.search(r'^WS[0-9a-fA-F]{32}$', workspace_sid):
            raise ValueError("Invalid value for `workspace_sid`, must be a follow pattern or equal to `/^WS[0-9a-fA-F]{32}$/`")

        self._workspace_sid = workspace_sid
