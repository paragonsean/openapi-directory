# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TaskrouterV1WorkspaceWorkerWorkerChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, assigned_tasks: int=None, available: bool=None, available_capacity_percentage: int=None, configured_capacity: int=None, date_created: datetime=None, date_updated: datetime=None, sid: str=None, task_channel_sid: str=None, task_channel_unique_name: str=None, url: str=None, worker_sid: str=None, workspace_sid: str=None):
        """TaskrouterV1WorkspaceWorkerWorkerChannel - a model defined in OpenAPI

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param assigned_tasks: The assigned_tasks of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param available: The available of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param available_capacity_percentage: The available_capacity_percentage of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param configured_capacity: The configured_capacity of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param date_created: The date_created of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param date_updated: The date_updated of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param sid: The sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param task_channel_sid: The task_channel_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param task_channel_unique_name: The task_channel_unique_name of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param url: The url of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param worker_sid: The worker_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        """
        self.openapi_types = {
            'account_sid': str,
            'assigned_tasks': int,
            'available': bool,
            'available_capacity_percentage': int,
            'configured_capacity': int,
            'date_created': datetime,
            'date_updated': datetime,
            'sid': str,
            'task_channel_sid': str,
            'task_channel_unique_name': str,
            'url': str,
            'worker_sid': str,
            'workspace_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'assigned_tasks': 'assigned_tasks',
            'available': 'available',
            'available_capacity_percentage': 'available_capacity_percentage',
            'configured_capacity': 'configured_capacity',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'sid': 'sid',
            'task_channel_sid': 'task_channel_sid',
            'task_channel_unique_name': 'task_channel_unique_name',
            'url': 'url',
            'worker_sid': 'worker_sid',
            'workspace_sid': 'workspace_sid'
        }

        self._account_sid = account_sid
        self._assigned_tasks = assigned_tasks
        self._available = available
        self._available_capacity_percentage = available_capacity_percentage
        self._configured_capacity = configured_capacity
        self._date_created = date_created
        self._date_updated = date_updated
        self._sid = sid
        self._task_channel_sid = task_channel_sid
        self._task_channel_unique_name = task_channel_unique_name
        self._url = url
        self._worker_sid = worker_sid
        self._workspace_sid = workspace_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskrouterV1WorkspaceWorkerWorkerChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taskrouter.v1.workspace.worker.worker_channel of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :return: The account_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def assigned_tasks(self):
        """Gets the assigned_tasks of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The total number of Tasks assigned to Worker for the TaskChannel type.

        :return: The assigned_tasks of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: int
        """
        return self._assigned_tasks

    @assigned_tasks.setter
    def assigned_tasks(self, assigned_tasks):
        """Sets the assigned_tasks of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The total number of Tasks assigned to Worker for the TaskChannel type.

        :param assigned_tasks: The assigned_tasks of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type assigned_tasks: int
        """

        self._assigned_tasks = assigned_tasks

    @property
    def available(self):
        """Gets the available of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        Whether the Worker should receive Tasks of the TaskChannel type.

        :return: The available of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        Whether the Worker should receive Tasks of the TaskChannel type.

        :param available: The available of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type available: bool
        """

        self._available = available

    @property
    def available_capacity_percentage(self):
        """Gets the available_capacity_percentage of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The current percentage of capacity the TaskChannel has available. Can be a number between `0` and `100`. A value of `0` indicates that TaskChannel has no capacity available and a value of `100` means the  Worker is available to receive any Tasks of this TaskChannel type.

        :return: The available_capacity_percentage of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: int
        """
        return self._available_capacity_percentage

    @available_capacity_percentage.setter
    def available_capacity_percentage(self, available_capacity_percentage):
        """Sets the available_capacity_percentage of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The current percentage of capacity the TaskChannel has available. Can be a number between `0` and `100`. A value of `0` indicates that TaskChannel has no capacity available and a value of `100` means the  Worker is available to receive any Tasks of this TaskChannel type.

        :param available_capacity_percentage: The available_capacity_percentage of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type available_capacity_percentage: int
        """

        self._available_capacity_percentage = available_capacity_percentage

    @property
    def configured_capacity(self):
        """Gets the configured_capacity of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The current configured capacity for the WorkerChannel. TaskRouter will not create any reservations after the assigned Tasks for the Worker reaches the value.

        :return: The configured_capacity of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: int
        """
        return self._configured_capacity

    @configured_capacity.setter
    def configured_capacity(self, configured_capacity):
        """Sets the configured_capacity of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The current configured capacity for the WorkerChannel. TaskRouter will not create any reservations after the assigned Tasks for the Worker reaches the value.

        :param configured_capacity: The configured_capacity of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type configured_capacity: int
        """

        self._configured_capacity = configured_capacity

    @property
    def date_created(self):
        """Gets the date_created of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def sid(self):
        """Gets the sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The unique string that we created to identify the WorkerChannel resource.

        :return: The sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The unique string that we created to identify the WorkerChannel resource.

        :param sid: The sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^WC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^WC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def task_channel_sid(self):
        """Gets the task_channel_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the TaskChannel.

        :return: The task_channel_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._task_channel_sid

    @task_channel_sid.setter
    def task_channel_sid(self, task_channel_sid):
        """Sets the task_channel_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the TaskChannel.

        :param task_channel_sid: The task_channel_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type task_channel_sid: str
        """
        if task_channel_sid is not None and len(task_channel_sid) > 34:
            raise ValueError("Invalid value for `task_channel_sid`, length must be less than or equal to `34`")
        if task_channel_sid is not None and len(task_channel_sid) < 34:
            raise ValueError("Invalid value for `task_channel_sid`, length must be greater than or equal to `34`")
        if task_channel_sid is not None and not re.search(r'^TC[0-9a-fA-F]{32}$', task_channel_sid):
            raise ValueError("Invalid value for `task_channel_sid`, must be a follow pattern or equal to `/^TC[0-9a-fA-F]{32}$/`")

        self._task_channel_sid = task_channel_sid

    @property
    def task_channel_unique_name(self):
        """Gets the task_channel_unique_name of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The unique name of the TaskChannel, such as `voice` or `sms`.

        :return: The task_channel_unique_name of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._task_channel_unique_name

    @task_channel_unique_name.setter
    def task_channel_unique_name(self, task_channel_unique_name):
        """Sets the task_channel_unique_name of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The unique name of the TaskChannel, such as `voice` or `sms`.

        :param task_channel_unique_name: The task_channel_unique_name of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type task_channel_unique_name: str
        """

        self._task_channel_unique_name = task_channel_unique_name

    @property
    def url(self):
        """Gets the url of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The absolute URL of the WorkerChannel resource.

        :return: The url of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The absolute URL of the WorkerChannel resource.

        :param url: The url of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type url: str
        """

        self._url = url

    @property
    def worker_sid(self):
        """Gets the worker_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the Worker that contains the WorkerChannel.

        :return: The worker_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._worker_sid

    @worker_sid.setter
    def worker_sid(self, worker_sid):
        """Sets the worker_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the Worker that contains the WorkerChannel.

        :param worker_sid: The worker_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type worker_sid: str
        """
        if worker_sid is not None and len(worker_sid) > 34:
            raise ValueError("Invalid value for `worker_sid`, length must be less than or equal to `34`")
        if worker_sid is not None and len(worker_sid) < 34:
            raise ValueError("Invalid value for `worker_sid`, length must be greater than or equal to `34`")
        if worker_sid is not None and not re.search(r'^WK[0-9a-fA-F]{32}$', worker_sid):
            raise ValueError("Invalid value for `worker_sid`, must be a follow pattern or equal to `/^WK[0-9a-fA-F]{32}$/`")

        self._worker_sid = worker_sid

    @property
    def workspace_sid(self):
        """Gets the workspace_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the Workspace that contains the WorkerChannel.

        :return: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :rtype: str
        """
        return self._workspace_sid

    @workspace_sid.setter
    def workspace_sid(self, workspace_sid):
        """Sets the workspace_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.

        The SID of the Workspace that contains the WorkerChannel.

        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkerChannel.
        :type workspace_sid: str
        """
        if workspace_sid is not None and len(workspace_sid) > 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be less than or equal to `34`")
        if workspace_sid is not None and len(workspace_sid) < 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be greater than or equal to `34`")
        if workspace_sid is not None and not re.search(r'^WS[0-9a-fA-F]{32}$', workspace_sid):
            raise ValueError("Invalid value for `workspace_sid`, must be a follow pattern or equal to `/^WS[0-9a-fA-F]{32}$/`")

        self._workspace_sid = workspace_sid
