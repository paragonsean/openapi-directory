# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_enum_queue_order import WorkspaceEnumQueueOrder
import re
from openapi_server import util


class TaskrouterV1Workspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, default_activity_name: str=None, default_activity_sid: str=None, event_callback_url: str=None, events_filter: str=None, friendly_name: str=None, links: object=None, multi_task_enabled: bool=None, prioritize_queue_order: WorkspaceEnumQueueOrder=None, sid: str=None, timeout_activity_name: str=None, timeout_activity_sid: str=None, url: str=None):
        """TaskrouterV1Workspace - a model defined in OpenAPI

        :param account_sid: The account_sid of this TaskrouterV1Workspace.
        :param date_created: The date_created of this TaskrouterV1Workspace.
        :param date_updated: The date_updated of this TaskrouterV1Workspace.
        :param default_activity_name: The default_activity_name of this TaskrouterV1Workspace.
        :param default_activity_sid: The default_activity_sid of this TaskrouterV1Workspace.
        :param event_callback_url: The event_callback_url of this TaskrouterV1Workspace.
        :param events_filter: The events_filter of this TaskrouterV1Workspace.
        :param friendly_name: The friendly_name of this TaskrouterV1Workspace.
        :param links: The links of this TaskrouterV1Workspace.
        :param multi_task_enabled: The multi_task_enabled of this TaskrouterV1Workspace.
        :param prioritize_queue_order: The prioritize_queue_order of this TaskrouterV1Workspace.
        :param sid: The sid of this TaskrouterV1Workspace.
        :param timeout_activity_name: The timeout_activity_name of this TaskrouterV1Workspace.
        :param timeout_activity_sid: The timeout_activity_sid of this TaskrouterV1Workspace.
        :param url: The url of this TaskrouterV1Workspace.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'default_activity_name': str,
            'default_activity_sid': str,
            'event_callback_url': str,
            'events_filter': str,
            'friendly_name': str,
            'links': object,
            'multi_task_enabled': bool,
            'prioritize_queue_order': WorkspaceEnumQueueOrder,
            'sid': str,
            'timeout_activity_name': str,
            'timeout_activity_sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'default_activity_name': 'default_activity_name',
            'default_activity_sid': 'default_activity_sid',
            'event_callback_url': 'event_callback_url',
            'events_filter': 'events_filter',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'multi_task_enabled': 'multi_task_enabled',
            'prioritize_queue_order': 'prioritize_queue_order',
            'sid': 'sid',
            'timeout_activity_name': 'timeout_activity_name',
            'timeout_activity_sid': 'timeout_activity_sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._default_activity_name = default_activity_name
        self._default_activity_sid = default_activity_sid
        self._event_callback_url = event_callback_url
        self._events_filter = events_filter
        self._friendly_name = friendly_name
        self._links = links
        self._multi_task_enabled = multi_task_enabled
        self._prioritize_queue_order = prioritize_queue_order
        self._sid = sid
        self._timeout_activity_name = timeout_activity_name
        self._timeout_activity_sid = timeout_activity_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskrouterV1Workspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taskrouter.v1.workspace of this TaskrouterV1Workspace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TaskrouterV1Workspace.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.

        :return: The account_sid of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TaskrouterV1Workspace.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.

        :param account_sid: The account_sid of this TaskrouterV1Workspace.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this TaskrouterV1Workspace.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this TaskrouterV1Workspace.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TaskrouterV1Workspace.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this TaskrouterV1Workspace.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this TaskrouterV1Workspace.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this TaskrouterV1Workspace.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this TaskrouterV1Workspace.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this TaskrouterV1Workspace.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def default_activity_name(self):
        """Gets the default_activity_name of this TaskrouterV1Workspace.

        The name of the default activity.

        :return: The default_activity_name of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._default_activity_name

    @default_activity_name.setter
    def default_activity_name(self, default_activity_name):
        """Sets the default_activity_name of this TaskrouterV1Workspace.

        The name of the default activity.

        :param default_activity_name: The default_activity_name of this TaskrouterV1Workspace.
        :type default_activity_name: str
        """

        self._default_activity_name = default_activity_name

    @property
    def default_activity_sid(self):
        """Gets the default_activity_sid of this TaskrouterV1Workspace.

        The SID of the Activity that will be used when new Workers are created in the Workspace.

        :return: The default_activity_sid of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._default_activity_sid

    @default_activity_sid.setter
    def default_activity_sid(self, default_activity_sid):
        """Sets the default_activity_sid of this TaskrouterV1Workspace.

        The SID of the Activity that will be used when new Workers are created in the Workspace.

        :param default_activity_sid: The default_activity_sid of this TaskrouterV1Workspace.
        :type default_activity_sid: str
        """
        if default_activity_sid is not None and len(default_activity_sid) > 34:
            raise ValueError("Invalid value for `default_activity_sid`, length must be less than or equal to `34`")
        if default_activity_sid is not None and len(default_activity_sid) < 34:
            raise ValueError("Invalid value for `default_activity_sid`, length must be greater than or equal to `34`")
        if default_activity_sid is not None and not re.search(r'^WA[0-9a-fA-F]{32}$', default_activity_sid):
            raise ValueError("Invalid value for `default_activity_sid`, must be a follow pattern or equal to `/^WA[0-9a-fA-F]{32}$/`")

        self._default_activity_sid = default_activity_sid

    @property
    def event_callback_url(self):
        """Gets the event_callback_url of this TaskrouterV1Workspace.

        The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).

        :return: The event_callback_url of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._event_callback_url

    @event_callback_url.setter
    def event_callback_url(self, event_callback_url):
        """Sets the event_callback_url of this TaskrouterV1Workspace.

        The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).

        :param event_callback_url: The event_callback_url of this TaskrouterV1Workspace.
        :type event_callback_url: str
        """

        self._event_callback_url = event_callback_url

    @property
    def events_filter(self):
        """Gets the events_filter of this TaskrouterV1Workspace.

        The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.

        :return: The events_filter of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._events_filter

    @events_filter.setter
    def events_filter(self, events_filter):
        """Sets the events_filter of this TaskrouterV1Workspace.

        The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.

        :param events_filter: The events_filter of this TaskrouterV1Workspace.
        :type events_filter: str
        """

        self._events_filter = events_filter

    @property
    def friendly_name(self):
        """Gets the friendly_name of this TaskrouterV1Workspace.

        The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.

        :return: The friendly_name of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this TaskrouterV1Workspace.

        The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.

        :param friendly_name: The friendly_name of this TaskrouterV1Workspace.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this TaskrouterV1Workspace.

        The URLs of related resources.

        :return: The links of this TaskrouterV1Workspace.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TaskrouterV1Workspace.

        The URLs of related resources.

        :param links: The links of this TaskrouterV1Workspace.
        :type links: object
        """

        self._links = links

    @property
    def multi_task_enabled(self):
        """Gets the multi_task_enabled of this TaskrouterV1Workspace.

        Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).

        :return: The multi_task_enabled of this TaskrouterV1Workspace.
        :rtype: bool
        """
        return self._multi_task_enabled

    @multi_task_enabled.setter
    def multi_task_enabled(self, multi_task_enabled):
        """Sets the multi_task_enabled of this TaskrouterV1Workspace.

        Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).

        :param multi_task_enabled: The multi_task_enabled of this TaskrouterV1Workspace.
        :type multi_task_enabled: bool
        """

        self._multi_task_enabled = multi_task_enabled

    @property
    def prioritize_queue_order(self):
        """Gets the prioritize_queue_order of this TaskrouterV1Workspace.


        :return: The prioritize_queue_order of this TaskrouterV1Workspace.
        :rtype: WorkspaceEnumQueueOrder
        """
        return self._prioritize_queue_order

    @prioritize_queue_order.setter
    def prioritize_queue_order(self, prioritize_queue_order):
        """Sets the prioritize_queue_order of this TaskrouterV1Workspace.


        :param prioritize_queue_order: The prioritize_queue_order of this TaskrouterV1Workspace.
        :type prioritize_queue_order: WorkspaceEnumQueueOrder
        """

        self._prioritize_queue_order = prioritize_queue_order

    @property
    def sid(self):
        """Gets the sid of this TaskrouterV1Workspace.

        The unique string that we created to identify the Workspace resource.

        :return: The sid of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this TaskrouterV1Workspace.

        The unique string that we created to identify the Workspace resource.

        :param sid: The sid of this TaskrouterV1Workspace.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^WS[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^WS[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def timeout_activity_name(self):
        """Gets the timeout_activity_name of this TaskrouterV1Workspace.

        The name of the timeout activity.

        :return: The timeout_activity_name of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._timeout_activity_name

    @timeout_activity_name.setter
    def timeout_activity_name(self, timeout_activity_name):
        """Sets the timeout_activity_name of this TaskrouterV1Workspace.

        The name of the timeout activity.

        :param timeout_activity_name: The timeout_activity_name of this TaskrouterV1Workspace.
        :type timeout_activity_name: str
        """

        self._timeout_activity_name = timeout_activity_name

    @property
    def timeout_activity_sid(self):
        """Gets the timeout_activity_sid of this TaskrouterV1Workspace.

        The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.

        :return: The timeout_activity_sid of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._timeout_activity_sid

    @timeout_activity_sid.setter
    def timeout_activity_sid(self, timeout_activity_sid):
        """Sets the timeout_activity_sid of this TaskrouterV1Workspace.

        The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.

        :param timeout_activity_sid: The timeout_activity_sid of this TaskrouterV1Workspace.
        :type timeout_activity_sid: str
        """
        if timeout_activity_sid is not None and len(timeout_activity_sid) > 34:
            raise ValueError("Invalid value for `timeout_activity_sid`, length must be less than or equal to `34`")
        if timeout_activity_sid is not None and len(timeout_activity_sid) < 34:
            raise ValueError("Invalid value for `timeout_activity_sid`, length must be greater than or equal to `34`")
        if timeout_activity_sid is not None and not re.search(r'^WA[0-9a-fA-F]{32}$', timeout_activity_sid):
            raise ValueError("Invalid value for `timeout_activity_sid`, must be a follow pattern or equal to `/^WA[0-9a-fA-F]{32}$/`")

        self._timeout_activity_sid = timeout_activity_sid

    @property
    def url(self):
        """Gets the url of this TaskrouterV1Workspace.

        The absolute URL of the Workspace resource.

        :return: The url of this TaskrouterV1Workspace.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskrouterV1Workspace.

        The absolute URL of the Workspace resource.

        :param url: The url of this TaskrouterV1Workspace.
        :type url: str
        """

        self._url = url
