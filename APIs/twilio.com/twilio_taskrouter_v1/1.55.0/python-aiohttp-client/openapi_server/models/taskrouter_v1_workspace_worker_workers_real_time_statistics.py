# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, activity_statistics: List[object]=None, total_workers: int=None, url: str=None, workspace_sid: str=None):
        """TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics - a model defined in OpenAPI

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :param activity_statistics: The activity_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :param total_workers: The total_workers of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :param url: The url of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        """
        self.openapi_types = {
            'account_sid': str,
            'activity_statistics': List[object],
            'total_workers': int,
            'url': str,
            'workspace_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'activity_statistics': 'activity_statistics',
            'total_workers': 'total_workers',
            'url': 'url',
            'workspace_sid': 'workspace_sid'
        }

        self._account_sid = account_sid
        self._activity_statistics = activity_statistics
        self._total_workers = total_workers
        self._url = url
        self._workspace_sid = workspace_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taskrouter.v1.workspace.worker.workers_real_time_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :return: The account_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.

        :param account_sid: The account_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def activity_statistics(self):
        """Gets the activity_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The number of current Workers by Activity.

        :return: The activity_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :rtype: List[object]
        """
        return self._activity_statistics

    @activity_statistics.setter
    def activity_statistics(self, activity_statistics):
        """Sets the activity_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The number of current Workers by Activity.

        :param activity_statistics: The activity_statistics of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :type activity_statistics: List[object]
        """

        self._activity_statistics = activity_statistics

    @property
    def total_workers(self):
        """Gets the total_workers of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The total number of Workers.

        :return: The total_workers of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :rtype: int
        """
        return self._total_workers

    @total_workers.setter
    def total_workers(self, total_workers):
        """Sets the total_workers of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The total number of Workers.

        :param total_workers: The total_workers of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :type total_workers: int
        """

        self._total_workers = total_workers

    @property
    def url(self):
        """Gets the url of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The absolute URL of the Workers statistics resource.

        :return: The url of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The absolute URL of the Workers statistics resource.

        :param url: The url of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :type url: str
        """

        self._url = url

    @property
    def workspace_sid(self):
        """Gets the workspace_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The SID of the Workspace that contains the Workers.

        :return: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :rtype: str
        """
        return self._workspace_sid

    @workspace_sid.setter
    def workspace_sid(self, workspace_sid):
        """Sets the workspace_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.

        The SID of the Workspace that contains the Workers.

        :param workspace_sid: The workspace_sid of this TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics.
        :type workspace_sid: str
        """
        if workspace_sid is not None and len(workspace_sid) > 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be less than or equal to `34`")
        if workspace_sid is not None and len(workspace_sid) < 34:
            raise ValueError("Invalid value for `workspace_sid`, length must be greater than or equal to `34`")
        if workspace_sid is not None and not re.search(r'^WS[0-9a-fA-F]{32}$', workspace_sid):
            raise ValueError("Invalid value for `workspace_sid`, must be a follow pattern or equal to `/^WS[0-9a-fA-F]{32}$/`")

        self._workspace_sid = workspace_sid
