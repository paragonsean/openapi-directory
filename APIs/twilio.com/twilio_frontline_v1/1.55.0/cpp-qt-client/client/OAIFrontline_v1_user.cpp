/**
 * Twilio - Frontline
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontline_v1_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontline_v1_user::OAIFrontline_v1_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontline_v1_user::OAIFrontline_v1_user() {
    this->initializeModel();
}

OAIFrontline_v1_user::~OAIFrontline_v1_user() {}

void OAIFrontline_v1_user::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFrontline_v1_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontline_v1_user::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("is_available")]);
    m_is_available_isSet = !json[QString("is_available")].isNull() && m_is_available_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFrontline_v1_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontline_v1_user::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("is_available"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFrontline_v1_user::getAvatar() const {
    return m_avatar;
}
void OAIFrontline_v1_user::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIFrontline_v1_user::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIFrontline_v1_user::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIFrontline_v1_user::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFrontline_v1_user::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFrontline_v1_user::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFrontline_v1_user::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIFrontline_v1_user::getIdentity() const {
    return m_identity;
}
void OAIFrontline_v1_user::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIFrontline_v1_user::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIFrontline_v1_user::is_identity_Valid() const{
    return m_identity_isValid;
}

bool OAIFrontline_v1_user::isIsAvailable() const {
    return m_is_available;
}
void OAIFrontline_v1_user::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIFrontline_v1_user::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIFrontline_v1_user::is_is_available_Valid() const{
    return m_is_available_isValid;
}

QString OAIFrontline_v1_user::getSid() const {
    return m_sid;
}
void OAIFrontline_v1_user::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIFrontline_v1_user::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIFrontline_v1_user::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIUser_enum_state_type OAIFrontline_v1_user::getState() const {
    return m_state;
}
void OAIFrontline_v1_user::setState(const OAIUser_enum_state_type &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFrontline_v1_user::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFrontline_v1_user::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFrontline_v1_user::getUrl() const {
    return m_url;
}
void OAIFrontline_v1_user::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFrontline_v1_user::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFrontline_v1_user::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFrontline_v1_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontline_v1_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
