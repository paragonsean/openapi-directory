# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_enum_state_type import UserEnumStateType
import re
from openapi_server import util


class FrontlineV1User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, friendly_name: str=None, identity: str=None, is_available: bool=None, sid: str=None, state: UserEnumStateType=None, url: str=None):
        """FrontlineV1User - a model defined in OpenAPI

        :param avatar: The avatar of this FrontlineV1User.
        :param friendly_name: The friendly_name of this FrontlineV1User.
        :param identity: The identity of this FrontlineV1User.
        :param is_available: The is_available of this FrontlineV1User.
        :param sid: The sid of this FrontlineV1User.
        :param state: The state of this FrontlineV1User.
        :param url: The url of this FrontlineV1User.
        """
        self.openapi_types = {
            'avatar': str,
            'friendly_name': str,
            'identity': str,
            'is_available': bool,
            'sid': str,
            'state': UserEnumStateType,
            'url': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'friendly_name': 'friendly_name',
            'identity': 'identity',
            'is_available': 'is_available',
            'sid': 'sid',
            'state': 'state',
            'url': 'url'
        }

        self._avatar = avatar
        self._friendly_name = friendly_name
        self._identity = identity
        self._is_available = is_available
        self._sid = sid
        self._state = state
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrontlineV1User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The frontline.v1.user of this FrontlineV1User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this FrontlineV1User.

        The avatar URL which will be shown in Frontline application.

        :return: The avatar of this FrontlineV1User.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this FrontlineV1User.

        The avatar URL which will be shown in Frontline application.

        :param avatar: The avatar of this FrontlineV1User.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def friendly_name(self):
        """Gets the friendly_name of this FrontlineV1User.

        The string that you assigned to describe the User.

        :return: The friendly_name of this FrontlineV1User.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this FrontlineV1User.

        The string that you assigned to describe the User.

        :param friendly_name: The friendly_name of this FrontlineV1User.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def identity(self):
        """Gets the identity of this FrontlineV1User.

        The application-defined string that uniquely identifies the resource's User. This value is often a username or an email address, and is case-sensitive.

        :return: The identity of this FrontlineV1User.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this FrontlineV1User.

        The application-defined string that uniquely identifies the resource's User. This value is often a username or an email address, and is case-sensitive.

        :param identity: The identity of this FrontlineV1User.
        :type identity: str
        """

        self._identity = identity

    @property
    def is_available(self):
        """Gets the is_available of this FrontlineV1User.

        Whether the User is available for new conversations. Defaults to `false` for new users.

        :return: The is_available of this FrontlineV1User.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this FrontlineV1User.

        Whether the User is available for new conversations. Defaults to `false` for new users.

        :param is_available: The is_available of this FrontlineV1User.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def sid(self):
        """Gets the sid of this FrontlineV1User.

        The unique string that we created to identify the User resource.

        :return: The sid of this FrontlineV1User.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this FrontlineV1User.

        The unique string that we created to identify the User resource.

        :param sid: The sid of this FrontlineV1User.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^US[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^US[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def state(self):
        """Gets the state of this FrontlineV1User.


        :return: The state of this FrontlineV1User.
        :rtype: UserEnumStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FrontlineV1User.


        :param state: The state of this FrontlineV1User.
        :type state: UserEnumStateType
        """

        self._state = state

    @property
    def url(self):
        """Gets the url of this FrontlineV1User.

        An absolute API resource URL for this user.

        :return: The url of this FrontlineV1User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FrontlineV1User.

        An absolute API resource URL for this user.

        :param url: The url of this FrontlineV1User.
        :type url: str
        """

        self._url = url
