# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FlexV2WebChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_sid: str=None, identity: str=None):
        """FlexV2WebChannel - a model defined in OpenAPI

        :param conversation_sid: The conversation_sid of this FlexV2WebChannel.
        :param identity: The identity of this FlexV2WebChannel.
        """
        self.openapi_types = {
            'conversation_sid': str,
            'identity': str
        }

        self.attribute_map = {
            'conversation_sid': 'conversation_sid',
            'identity': 'identity'
        }

        self._conversation_sid = conversation_sid
        self._identity = identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexV2WebChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flex.v2.web_channel of this FlexV2WebChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_sid(self):
        """Gets the conversation_sid of this FlexV2WebChannel.

        The unique string representing the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource) created.

        :return: The conversation_sid of this FlexV2WebChannel.
        :rtype: str
        """
        return self._conversation_sid

    @conversation_sid.setter
    def conversation_sid(self, conversation_sid):
        """Sets the conversation_sid of this FlexV2WebChannel.

        The unique string representing the [Conversation resource](https://www.twilio.com/docs/conversations/api/conversation-resource) created.

        :param conversation_sid: The conversation_sid of this FlexV2WebChannel.
        :type conversation_sid: str
        """
        if conversation_sid is not None and len(conversation_sid) > 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be less than or equal to `34`")
        if conversation_sid is not None and len(conversation_sid) < 34:
            raise ValueError("Invalid value for `conversation_sid`, length must be greater than or equal to `34`")
        if conversation_sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', conversation_sid):
            raise ValueError("Invalid value for `conversation_sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._conversation_sid = conversation_sid

    @property
    def identity(self):
        """Gets the identity of this FlexV2WebChannel.

        The unique string representing the User created and should be authorized to participate in the Conversation. For more details, see [User Identity & Access Tokens](https://www.twilio.com/docs/conversations/identity).

        :return: The identity of this FlexV2WebChannel.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this FlexV2WebChannel.

        The unique string representing the User created and should be authorized to participate in the Conversation. For more details, see [User Identity & Access Tokens](https://www.twilio.com/docs/conversations/identity).

        :param identity: The identity of this FlexV2WebChannel.
        :type identity: str
        """

        self._identity = identity
