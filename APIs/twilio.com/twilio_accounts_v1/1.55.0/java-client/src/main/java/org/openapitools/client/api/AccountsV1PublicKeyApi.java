/*
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsV1CredentialCredentialPublicKey;
import org.openapitools.client.model.ListCredentialPublicKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsV1PublicKeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsV1PublicKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsV1PublicKeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCredentialPublicKey
     * @param publicKey A URL encoded representation of the public key. For example, &#x60;-----BEGIN PUBLIC KEY-----MIIBIjANB.pa9xQIDAQAB-----END PUBLIC KEY-----&#x60; (required)
     * @param accountSid The SID of the Subaccount that this Credential should be associated with. Must be a valid Subaccount of the account issuing the request (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialPublicKeyCall(String publicKey, String accountSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://accounts.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/PublicKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid != null) {
            localVarFormParams.put("AccountSid", accountSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (publicKey != null) {
            localVarFormParams.put("PublicKey", publicKey);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCredentialPublicKeyValidateBeforeCall(String publicKey, String accountSid, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling createCredentialPublicKey(Async)");
        }

        return createCredentialPublicKeyCall(publicKey, accountSid, friendlyName, _callback);

    }

    /**
     * 
     * Create a new Public Key Credential
     * @param publicKey A URL encoded representation of the public key. For example, &#x60;-----BEGIN PUBLIC KEY-----MIIBIjANB.pa9xQIDAQAB-----END PUBLIC KEY-----&#x60; (required)
     * @param accountSid The SID of the Subaccount that this Credential should be associated with. Must be a valid Subaccount of the account issuing the request (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @return AccountsV1CredentialCredentialPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AccountsV1CredentialCredentialPublicKey createCredentialPublicKey(String publicKey, String accountSid, String friendlyName) throws ApiException {
        ApiResponse<AccountsV1CredentialCredentialPublicKey> localVarResp = createCredentialPublicKeyWithHttpInfo(publicKey, accountSid, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Public Key Credential
     * @param publicKey A URL encoded representation of the public key. For example, &#x60;-----BEGIN PUBLIC KEY-----MIIBIjANB.pa9xQIDAQAB-----END PUBLIC KEY-----&#x60; (required)
     * @param accountSid The SID of the Subaccount that this Credential should be associated with. Must be a valid Subaccount of the account issuing the request (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @return ApiResponse&lt;AccountsV1CredentialCredentialPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsV1CredentialCredentialPublicKey> createCredentialPublicKeyWithHttpInfo(String publicKey, String accountSid, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createCredentialPublicKeyValidateBeforeCall(publicKey, accountSid, friendlyName, null);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Public Key Credential
     * @param publicKey A URL encoded representation of the public key. For example, &#x60;-----BEGIN PUBLIC KEY-----MIIBIjANB.pa9xQIDAQAB-----END PUBLIC KEY-----&#x60; (required)
     * @param accountSid The SID of the Subaccount that this Credential should be associated with. Must be a valid Subaccount of the account issuing the request (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialPublicKeyAsync(String publicKey, String accountSid, String friendlyName, final ApiCallback<AccountsV1CredentialCredentialPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCredentialPublicKeyValidateBeforeCall(publicKey, accountSid, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCredentialPublicKey
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialPublicKeyCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://accounts.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/PublicKeys/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialPublicKeyValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCredentialPublicKey(Async)");
        }

        return deleteCredentialPublicKeyCall(sid, _callback);

    }

    /**
     * 
     * Delete a Credential from your account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredentialPublicKey(String sid) throws ApiException {
        deleteCredentialPublicKeyWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a Credential from your account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialPublicKeyWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialPublicKeyValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Credential from your account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialPublicKeyAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialPublicKeyValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCredentialPublicKey
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCredentialPublicKeyCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://accounts.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/PublicKeys/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCredentialPublicKeyValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCredentialPublicKey(Async)");
        }

        return fetchCredentialPublicKeyCall(sid, _callback);

    }

    /**
     * 
     * Fetch the public key specified by the provided Credential Sid
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to fetch. (required)
     * @return AccountsV1CredentialCredentialPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsV1CredentialCredentialPublicKey fetchCredentialPublicKey(String sid) throws ApiException {
        ApiResponse<AccountsV1CredentialCredentialPublicKey> localVarResp = fetchCredentialPublicKeyWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the public key specified by the provided Credential Sid
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to fetch. (required)
     * @return ApiResponse&lt;AccountsV1CredentialCredentialPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsV1CredentialCredentialPublicKey> fetchCredentialPublicKeyWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCredentialPublicKeyValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the public key specified by the provided Credential Sid
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCredentialPublicKeyAsync(String sid, final ApiCallback<AccountsV1CredentialCredentialPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCredentialPublicKeyValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCredentialPublicKey
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCredentialPublicKeyCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://accounts.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/PublicKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCredentialPublicKeyValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listCredentialPublicKeyCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCredentialPublicKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCredentialPublicKeyResponse listCredentialPublicKey(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCredentialPublicKeyResponse> localVarResp = listCredentialPublicKeyWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCredentialPublicKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCredentialPublicKeyResponse> listCredentialPublicKeyWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCredentialPublicKeyValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCredentialPublicKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCredentialPublicKeyAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCredentialPublicKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCredentialPublicKeyValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCredentialPublicKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCredentialPublicKey
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to update. (required)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialPublicKeyCall(String sid, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://accounts.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/PublicKeys/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCredentialPublicKeyValidateBeforeCall(String sid, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateCredentialPublicKey(Async)");
        }

        return updateCredentialPublicKeyCall(sid, friendlyName, _callback);

    }

    /**
     * 
     * Modify the properties of a given Account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to update. (required)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @return AccountsV1CredentialCredentialPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccountsV1CredentialCredentialPublicKey updateCredentialPublicKey(String sid, String friendlyName) throws ApiException {
        ApiResponse<AccountsV1CredentialCredentialPublicKey> localVarResp = updateCredentialPublicKeyWithHttpInfo(sid, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify the properties of a given Account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to update. (required)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @return ApiResponse&lt;AccountsV1CredentialCredentialPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountsV1CredentialCredentialPublicKey> updateCredentialPublicKeyWithHttpInfo(String sid, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = updateCredentialPublicKeyValidateBeforeCall(sid, friendlyName, null);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify the properties of a given Account
     * @param sid The Twilio-provided string that uniquely identifies the PublicKey resource to update. (required)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialPublicKeyAsync(String sid, String friendlyName, final ApiCallback<AccountsV1CredentialCredentialPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCredentialPublicKeyValidateBeforeCall(sid, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<AccountsV1CredentialCredentialPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
