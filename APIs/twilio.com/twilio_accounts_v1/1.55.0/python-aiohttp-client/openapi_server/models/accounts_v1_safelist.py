# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AccountsV1Safelist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phone_number: str=None, sid: str=None):
        """AccountsV1Safelist - a model defined in OpenAPI

        :param phone_number: The phone_number of this AccountsV1Safelist.
        :param sid: The sid of this AccountsV1Safelist.
        """
        self.openapi_types = {
            'phone_number': str,
            'sid': str
        }

        self.attribute_map = {
            'phone_number': 'phone_number',
            'sid': 'sid'
        }

        self._phone_number = phone_number
        self._sid = sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsV1Safelist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accounts.v1.safelist of this AccountsV1Safelist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phone_number(self):
        """Gets the phone_number of this AccountsV1Safelist.

        The phone number in SafeList.

        :return: The phone_number of this AccountsV1Safelist.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AccountsV1Safelist.

        The phone number in SafeList.

        :param phone_number: The phone_number of this AccountsV1Safelist.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def sid(self):
        """Gets the sid of this AccountsV1Safelist.

        The unique string that we created to identify the SafeList resource.

        :return: The sid of this AccountsV1Safelist.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this AccountsV1Safelist.

        The unique string that we created to identify the SafeList resource.

        :param sid: The sid of this AccountsV1Safelist.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^GN[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^GN[0-9a-fA-F]{32}$/`")

        self._sid = sid
