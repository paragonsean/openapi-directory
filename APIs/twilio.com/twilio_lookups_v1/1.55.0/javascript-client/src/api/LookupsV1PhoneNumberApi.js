/**
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LookupsV1PhoneNumber from '../model/LookupsV1PhoneNumber';

/**
* LookupsV1PhoneNumber service.
* @module api/LookupsV1PhoneNumberApi
* @version 1.55.0
*/
export default class LookupsV1PhoneNumberApi {

    /**
    * Constructs a new LookupsV1PhoneNumberApi. 
    * @alias module:api/LookupsV1PhoneNumberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchPhoneNumber operation.
     * @callback module:api/LookupsV1PhoneNumberApi~fetchPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LookupsV1PhoneNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} phoneNumber The phone number to lookup in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
     * @param {Object} opts Optional parameters
     * @param {String} [countryCode] The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the phone number to fetch. This is used to specify the country when the phone number is provided in a national format.
     * @param {Array.<String>} [type] The type of information to return. Can be: `carrier` or `caller-name`. The default is null.  Carrier information costs $0.005 per phone number looked up.  Caller Name information is currently available only in the US and costs $0.01 per phone number looked up.  To retrieve both types on information, specify this parameter twice; once with `carrier` and once with `caller-name` as the value.
     * @param {Array.<String>} [addOns] The `unique_name` of an Add-on you would like to invoke. Can be the `unique_name` of an Add-on that is installed on your account. You can specify multiple instances of this parameter to invoke multiple Add-ons. For more information about  Add-ons, see the [Add-ons documentation](https://www.twilio.com/docs/add-ons).
     * @param {Object.<String, Object>} [addOnsData] Data specific to the add-on you would like to invoke. The content and format of this value depends on the add-on.
     * @param {module:api/LookupsV1PhoneNumberApi~fetchPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LookupsV1PhoneNumber}
     */
    fetchPhoneNumber(phoneNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling fetchPhoneNumber");
      }

      let pathParams = {
        'PhoneNumber': phoneNumber
      };
      let queryParams = {
        'CountryCode': opts['countryCode'],
        'Type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'AddOns': this.apiClient.buildCollectionParam(opts['addOns'], 'multi'),
        'AddOnsData': opts['addOnsData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LookupsV1PhoneNumber;
      let basePaths = ['https://lookups.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/PhoneNumbers/{PhoneNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
