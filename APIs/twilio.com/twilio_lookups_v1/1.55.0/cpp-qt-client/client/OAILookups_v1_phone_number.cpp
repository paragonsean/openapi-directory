/**
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookups_v1_phone_number.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookups_v1_phone_number::OAILookups_v1_phone_number(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookups_v1_phone_number::OAILookups_v1_phone_number() {
    this->initializeModel();
}

OAILookups_v1_phone_number::~OAILookups_v1_phone_number() {}

void OAILookups_v1_phone_number::initializeModel() {

    m_add_ons_isSet = false;
    m_add_ons_isValid = false;

    m_caller_name_isSet = false;
    m_caller_name_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_national_format_isSet = false;
    m_national_format_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILookups_v1_phone_number::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookups_v1_phone_number::fromJsonObject(QJsonObject json) {

    m_add_ons_isValid = ::OpenAPI::fromJsonValue(m_add_ons, json[QString("add_ons")]);
    m_add_ons_isSet = !json[QString("add_ons")].isNull() && m_add_ons_isValid;

    m_caller_name_isValid = ::OpenAPI::fromJsonValue(m_caller_name, json[QString("caller_name")]);
    m_caller_name_isSet = !json[QString("caller_name")].isNull() && m_caller_name_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_national_format_isValid = ::OpenAPI::fromJsonValue(m_national_format, json[QString("national_format")]);
    m_national_format_isSet = !json[QString("national_format")].isNull() && m_national_format_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILookups_v1_phone_number::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookups_v1_phone_number::asJsonObject() const {
    QJsonObject obj;
    if (m_add_ons_isSet) {
        obj.insert(QString("add_ons"), ::OpenAPI::toJsonValue(m_add_ons));
    }
    if (m_caller_name_isSet) {
        obj.insert(QString("caller_name"), ::OpenAPI::toJsonValue(m_caller_name));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_national_format_isSet) {
        obj.insert(QString("national_format"), ::OpenAPI::toJsonValue(m_national_format));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QJsonValue OAILookups_v1_phone_number::getAddOns() const {
    return m_add_ons;
}
void OAILookups_v1_phone_number::setAddOns(const QJsonValue &add_ons) {
    m_add_ons = add_ons;
    m_add_ons_isSet = true;
}

bool OAILookups_v1_phone_number::is_add_ons_Set() const{
    return m_add_ons_isSet;
}

bool OAILookups_v1_phone_number::is_add_ons_Valid() const{
    return m_add_ons_isValid;
}

QJsonValue OAILookups_v1_phone_number::getCallerName() const {
    return m_caller_name;
}
void OAILookups_v1_phone_number::setCallerName(const QJsonValue &caller_name) {
    m_caller_name = caller_name;
    m_caller_name_isSet = true;
}

bool OAILookups_v1_phone_number::is_caller_name_Set() const{
    return m_caller_name_isSet;
}

bool OAILookups_v1_phone_number::is_caller_name_Valid() const{
    return m_caller_name_isValid;
}

QJsonValue OAILookups_v1_phone_number::getCarrier() const {
    return m_carrier;
}
void OAILookups_v1_phone_number::setCarrier(const QJsonValue &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAILookups_v1_phone_number::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAILookups_v1_phone_number::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAILookups_v1_phone_number::getCountryCode() const {
    return m_country_code;
}
void OAILookups_v1_phone_number::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAILookups_v1_phone_number::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAILookups_v1_phone_number::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAILookups_v1_phone_number::getNationalFormat() const {
    return m_national_format;
}
void OAILookups_v1_phone_number::setNationalFormat(const QString &national_format) {
    m_national_format = national_format;
    m_national_format_isSet = true;
}

bool OAILookups_v1_phone_number::is_national_format_Set() const{
    return m_national_format_isSet;
}

bool OAILookups_v1_phone_number::is_national_format_Valid() const{
    return m_national_format_isValid;
}

QString OAILookups_v1_phone_number::getPhoneNumber() const {
    return m_phone_number;
}
void OAILookups_v1_phone_number::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAILookups_v1_phone_number::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAILookups_v1_phone_number::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAILookups_v1_phone_number::getUrl() const {
    return m_url;
}
void OAILookups_v1_phone_number::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILookups_v1_phone_number::is_url_Set() const{
    return m_url_isSet;
}

bool OAILookups_v1_phone_number::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILookups_v1_phone_number::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_ons_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookups_v1_phone_number::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
