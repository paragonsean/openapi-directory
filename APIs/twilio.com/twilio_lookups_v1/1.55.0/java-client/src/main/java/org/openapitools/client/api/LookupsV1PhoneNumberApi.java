/*
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LookupsV1PhoneNumber;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupsV1PhoneNumberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LookupsV1PhoneNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupsV1PhoneNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchPhoneNumber
     * @param phoneNumber The phone number to lookup in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number. (required)
     * @param countryCode The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the phone number to fetch. This is used to specify the country when the phone number is provided in a national format. (optional)
     * @param type The type of information to return. Can be: &#x60;carrier&#x60; or &#x60;caller-name&#x60;. The default is null.  Carrier information costs $0.005 per phone number looked up.  Caller Name information is currently available only in the US and costs $0.01 per phone number looked up.  To retrieve both types on information, specify this parameter twice; once with &#x60;carrier&#x60; and once with &#x60;caller-name&#x60; as the value. (optional)
     * @param addOns The &#x60;unique_name&#x60; of an Add-on you would like to invoke. Can be the &#x60;unique_name&#x60; of an Add-on that is installed on your account. You can specify multiple instances of this parameter to invoke multiple Add-ons. For more information about  Add-ons, see the [Add-ons documentation](https://www.twilio.com/docs/add-ons). (optional)
     * @param addOnsData Data specific to the add-on you would like to invoke. The content and format of this value depends on the add-on. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPhoneNumberCall(String phoneNumber, String countryCode, List<String> type, List<String> addOns, Object addOnsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://lookups.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/PhoneNumbers/{PhoneNumber}"
            .replace("{" + "PhoneNumber" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CountryCode", countryCode));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Type", type));
        }

        if (addOns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AddOns", addOns));
        }

        if (addOnsData != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(addOnsData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPhoneNumberValidateBeforeCall(String phoneNumber, String countryCode, List<String> type, List<String> addOns, Object addOnsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling fetchPhoneNumber(Async)");
        }

        return fetchPhoneNumberCall(phoneNumber, countryCode, type, addOns, addOnsData, _callback);

    }

    /**
     * 
     * 
     * @param phoneNumber The phone number to lookup in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number. (required)
     * @param countryCode The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the phone number to fetch. This is used to specify the country when the phone number is provided in a national format. (optional)
     * @param type The type of information to return. Can be: &#x60;carrier&#x60; or &#x60;caller-name&#x60;. The default is null.  Carrier information costs $0.005 per phone number looked up.  Caller Name information is currently available only in the US and costs $0.01 per phone number looked up.  To retrieve both types on information, specify this parameter twice; once with &#x60;carrier&#x60; and once with &#x60;caller-name&#x60; as the value. (optional)
     * @param addOns The &#x60;unique_name&#x60; of an Add-on you would like to invoke. Can be the &#x60;unique_name&#x60; of an Add-on that is installed on your account. You can specify multiple instances of this parameter to invoke multiple Add-ons. For more information about  Add-ons, see the [Add-ons documentation](https://www.twilio.com/docs/add-ons). (optional)
     * @param addOnsData Data specific to the add-on you would like to invoke. The content and format of this value depends on the add-on. (optional)
     * @return LookupsV1PhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LookupsV1PhoneNumber fetchPhoneNumber(String phoneNumber, String countryCode, List<String> type, List<String> addOns, Object addOnsData) throws ApiException {
        ApiResponse<LookupsV1PhoneNumber> localVarResp = fetchPhoneNumberWithHttpInfo(phoneNumber, countryCode, type, addOns, addOnsData);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param phoneNumber The phone number to lookup in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number. (required)
     * @param countryCode The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the phone number to fetch. This is used to specify the country when the phone number is provided in a national format. (optional)
     * @param type The type of information to return. Can be: &#x60;carrier&#x60; or &#x60;caller-name&#x60;. The default is null.  Carrier information costs $0.005 per phone number looked up.  Caller Name information is currently available only in the US and costs $0.01 per phone number looked up.  To retrieve both types on information, specify this parameter twice; once with &#x60;carrier&#x60; and once with &#x60;caller-name&#x60; as the value. (optional)
     * @param addOns The &#x60;unique_name&#x60; of an Add-on you would like to invoke. Can be the &#x60;unique_name&#x60; of an Add-on that is installed on your account. You can specify multiple instances of this parameter to invoke multiple Add-ons. For more information about  Add-ons, see the [Add-ons documentation](https://www.twilio.com/docs/add-ons). (optional)
     * @param addOnsData Data specific to the add-on you would like to invoke. The content and format of this value depends on the add-on. (optional)
     * @return ApiResponse&lt;LookupsV1PhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupsV1PhoneNumber> fetchPhoneNumberWithHttpInfo(String phoneNumber, String countryCode, List<String> type, List<String> addOns, Object addOnsData) throws ApiException {
        okhttp3.Call localVarCall = fetchPhoneNumberValidateBeforeCall(phoneNumber, countryCode, type, addOns, addOnsData, null);
        Type localVarReturnType = new TypeToken<LookupsV1PhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param phoneNumber The phone number to lookup in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number. (required)
     * @param countryCode The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the phone number to fetch. This is used to specify the country when the phone number is provided in a national format. (optional)
     * @param type The type of information to return. Can be: &#x60;carrier&#x60; or &#x60;caller-name&#x60;. The default is null.  Carrier information costs $0.005 per phone number looked up.  Caller Name information is currently available only in the US and costs $0.01 per phone number looked up.  To retrieve both types on information, specify this parameter twice; once with &#x60;carrier&#x60; and once with &#x60;caller-name&#x60; as the value. (optional)
     * @param addOns The &#x60;unique_name&#x60; of an Add-on you would like to invoke. Can be the &#x60;unique_name&#x60; of an Add-on that is installed on your account. You can specify multiple instances of this parameter to invoke multiple Add-ons. For more information about  Add-ons, see the [Add-ons documentation](https://www.twilio.com/docs/add-ons). (optional)
     * @param addOnsData Data specific to the add-on you would like to invoke. The content and format of this value depends on the add-on. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPhoneNumberAsync(String phoneNumber, String countryCode, List<String> type, List<String> addOns, Object addOnsData, final ApiCallback<LookupsV1PhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPhoneNumberValidateBeforeCall(phoneNumber, countryCode, type, addOns, addOnsData, _callback);
        Type localVarReturnType = new TypeToken<LookupsV1PhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
