/*
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LookupsV1PhoneNumber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:30.961648-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LookupsV1PhoneNumber {
  public static final String SERIALIZED_NAME_ADD_ONS = "add_ons";
  @SerializedName(SERIALIZED_NAME_ADD_ONS)
  private Object addOns = null;

  public static final String SERIALIZED_NAME_CALLER_NAME = "caller_name";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private Object callerName = null;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private Object carrier = null;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_NATIONAL_FORMAT = "national_format";
  @SerializedName(SERIALIZED_NAME_NATIONAL_FORMAT)
  private String nationalFormat;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public LookupsV1PhoneNumber() {
  }

  public LookupsV1PhoneNumber addOns(Object addOns) {
    this.addOns = addOns;
    return this;
  }

  /**
   * A JSON string with the results of the Add-ons you specified in the &#x60;add_ons&#x60; parameters. For the format of the object, see [Using Add-ons](https://www.twilio.com/docs/add-ons).
   * @return addOns
   */
  @javax.annotation.Nullable
  public Object getAddOns() {
    return addOns;
  }

  public void setAddOns(Object addOns) {
    this.addOns = addOns;
  }


  public LookupsV1PhoneNumber callerName(Object callerName) {
    this.callerName = callerName;
    return this;
  }

  /**
   * The name of the phone number&#39;s owner. If &#x60;null&#x60;, that information was not available.
   * @return callerName
   */
  @javax.annotation.Nullable
  public Object getCallerName() {
    return callerName;
  }

  public void setCallerName(Object callerName) {
    this.callerName = callerName;
  }


  public LookupsV1PhoneNumber carrier(Object carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * The telecom company that provides the phone number.
   * @return carrier
   */
  @javax.annotation.Nullable
  public Object getCarrier() {
    return carrier;
  }

  public void setCarrier(Object carrier) {
    this.carrier = carrier;
  }


  public LookupsV1PhoneNumber countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for the phone number.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public LookupsV1PhoneNumber nationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
    return this;
  }

  /**
   * The phone number, in national format.
   * @return nationalFormat
   */
  @javax.annotation.Nullable
  public String getNationalFormat() {
    return nationalFormat;
  }

  public void setNationalFormat(String nationalFormat) {
    this.nationalFormat = nationalFormat;
  }


  public LookupsV1PhoneNumber phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public LookupsV1PhoneNumber url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupsV1PhoneNumber lookupsV1PhoneNumber = (LookupsV1PhoneNumber) o;
    return Objects.equals(this.addOns, lookupsV1PhoneNumber.addOns) &&
        Objects.equals(this.callerName, lookupsV1PhoneNumber.callerName) &&
        Objects.equals(this.carrier, lookupsV1PhoneNumber.carrier) &&
        Objects.equals(this.countryCode, lookupsV1PhoneNumber.countryCode) &&
        Objects.equals(this.nationalFormat, lookupsV1PhoneNumber.nationalFormat) &&
        Objects.equals(this.phoneNumber, lookupsV1PhoneNumber.phoneNumber) &&
        Objects.equals(this.url, lookupsV1PhoneNumber.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOns, callerName, carrier, countryCode, nationalFormat, phoneNumber, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupsV1PhoneNumber {\n");
    sb.append("    addOns: ").append(toIndentedString(addOns)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    nationalFormat: ").append(toIndentedString(nationalFormat)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_ons");
    openapiFields.add("caller_name");
    openapiFields.add("carrier");
    openapiFields.add("country_code");
    openapiFields.add("national_format");
    openapiFields.add("phone_number");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LookupsV1PhoneNumber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookupsV1PhoneNumber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookupsV1PhoneNumber is not found in the empty JSON string", LookupsV1PhoneNumber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookupsV1PhoneNumber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookupsV1PhoneNumber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("national_format") != null && !jsonObj.get("national_format").isJsonNull()) && !jsonObj.get("national_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `national_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("national_format").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookupsV1PhoneNumber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookupsV1PhoneNumber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookupsV1PhoneNumber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookupsV1PhoneNumber.class));

       return (TypeAdapter<T>) new TypeAdapter<LookupsV1PhoneNumber>() {
           @Override
           public void write(JsonWriter out, LookupsV1PhoneNumber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookupsV1PhoneNumber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LookupsV1PhoneNumber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LookupsV1PhoneNumber
   * @throws IOException if the JSON string is invalid with respect to LookupsV1PhoneNumber
   */
  public static LookupsV1PhoneNumber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookupsV1PhoneNumber.class);
  }

  /**
   * Convert an instance of LookupsV1PhoneNumber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

