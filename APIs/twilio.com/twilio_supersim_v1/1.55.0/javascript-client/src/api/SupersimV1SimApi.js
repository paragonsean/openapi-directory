/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSimResponse from '../model/ListSimResponse';
import SimEnumStatus from '../model/SimEnumStatus';
import SimEnumStatusUpdate from '../model/SimEnumStatusUpdate';
import SupersimV1Sim from '../model/SupersimV1Sim';

/**
* SupersimV1Sim service.
* @module api/SupersimV1SimApi
* @version 1.55.0
*/
export default class SupersimV1SimApi {

    /**
    * Constructs a new SupersimV1SimApi. 
    * @alias module:api/SupersimV1SimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSim operation.
     * @callback module:api/SupersimV1SimApi~createSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupersimV1Sim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a Super SIM to your Account
     * @param {String} iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account.
     * @param {String} registrationCode The 10-digit code required to claim the Super SIM for your Account.
     * @param {module:api/SupersimV1SimApi~createSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupersimV1Sim}
     */
    createSim(iccid, registrationCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'iccid' is set
      if (iccid === undefined || iccid === null) {
        throw new Error("Missing the required parameter 'iccid' when calling createSim");
      }
      // verify the required parameter 'registrationCode' is set
      if (registrationCode === undefined || registrationCode === null) {
        throw new Error("Missing the required parameter 'registrationCode' when calling createSim");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Iccid': iccid,
        'RegistrationCode': registrationCode
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SupersimV1Sim;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSim operation.
     * @callback module:api/SupersimV1SimApi~fetchSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupersimV1Sim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a Super SIM instance from your account.
     * @param {String} sid The SID of the Sim resource to fetch.
     * @param {module:api/SupersimV1SimApi~fetchSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupersimV1Sim}
     */
    fetchSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupersimV1Sim;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSim operation.
     * @callback module:api/SupersimV1SimApi~listSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSimResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Super SIMs from your account.
     * @param {Object} opts Optional parameters
     * @param {module:model/SimEnumStatus} [status] The status of the Sim resources to read. Can be `new`, `ready`, `active`, `inactive`, or `scheduled`.
     * @param {String} [fleet] The SID or unique name of the Fleet to which a list of Sims are assigned.
     * @param {String} [iccid] The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/SupersimV1SimApi~listSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSimResponse}
     */
    listSim(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'Fleet': opts['fleet'],
        'Iccid': opts['iccid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSimResponse;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSim operation.
     * @callback module:api/SupersimV1SimApi~updateSimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupersimV1Sim} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the given properties of a Super SIM instance from your account.
     * @param {String} sid The SID of the Sim resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [accountSid] The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource's status is new.
     * @param {module:model/String} [callbackMethod] The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
     * @param {String} [callbackUrl] The URL we should call using the `callback_method` after an asynchronous update has finished.
     * @param {String} [fleet] The SID or unique name of the Fleet to which the SIM resource should be assigned.
     * @param {module:model/SimEnumStatusUpdate} [status] 
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
     * @param {module:api/SupersimV1SimApi~updateSimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupersimV1Sim}
     */
    updateSim(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSim");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AccountSid': opts['accountSid'],
        'CallbackMethod': opts['callbackMethod'],
        'CallbackUrl': opts['callbackUrl'],
        'Fleet': opts['fleet'],
        'Status': opts['status'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SupersimV1Sim;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Sims/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
