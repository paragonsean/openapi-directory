/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EsimProfileEnumStatus from '../model/EsimProfileEnumStatus';
import ListEsimProfileResponse from '../model/ListEsimProfileResponse';
import SupersimV1EsimProfile from '../model/SupersimV1EsimProfile';

/**
* SupersimV1EsimProfile service.
* @module api/SupersimV1EsimProfileApi
* @version 1.55.0
*/
export default class SupersimV1EsimProfileApi {

    /**
    * Constructs a new SupersimV1EsimProfileApi. 
    * @alias module:api/SupersimV1EsimProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEsimProfile operation.
     * @callback module:api/SupersimV1EsimProfileApi~createEsimProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupersimV1EsimProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order an eSIM Profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [callbackMethod] The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
     * @param {String} [callbackUrl] The URL we should call using the `callback_method` when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from `reserving` to `available`.
     * @param {String} [eid] Identifier of the eUICC that will claim the eSIM Profile.
     * @param {Boolean} [generateMatchingId] When set to `true`, a value for `Eid` does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the `matching_id` property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile.
     * @param {module:api/SupersimV1EsimProfileApi~createEsimProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupersimV1EsimProfile}
     */
    createEsimProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallbackMethod': opts['callbackMethod'],
        'CallbackUrl': opts['callbackUrl'],
        'Eid': opts['eid'],
        'GenerateMatchingId': opts['generateMatchingId']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SupersimV1EsimProfile;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/ESimProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchEsimProfile operation.
     * @callback module:api/SupersimV1EsimProfileApi~fetchEsimProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupersimV1EsimProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an eSIM Profile.
     * @param {String} sid The SID of the eSIM Profile resource to fetch.
     * @param {module:api/SupersimV1EsimProfileApi~fetchEsimProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupersimV1EsimProfile}
     */
    fetchEsimProfile(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchEsimProfile");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupersimV1EsimProfile;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/ESimProfiles/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listEsimProfile operation.
     * @callback module:api/SupersimV1EsimProfileApi~listEsimProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEsimProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of eSIM Profiles.
     * @param {Object} opts Optional parameters
     * @param {String} [eid] List the eSIM Profiles that have been associated with an EId.
     * @param {String} [simSid] Find the eSIM Profile resource related to a [Sim](https://www.twilio.com/docs/iot/supersim/api/sim-resource) resource by providing the SIM SID. Will always return an array with either 1 or 0 records.
     * @param {module:model/EsimProfileEnumStatus} [status] List the eSIM Profiles that are in a given status.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/SupersimV1EsimProfileApi~listEsimProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEsimProfileResponse}
     */
    listEsimProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Eid': opts['eid'],
        'SimSid': opts['simSid'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEsimProfileResponse;
      let basePaths = ['https://supersim.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/ESimProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
