/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IpCommandEnumDirection from './IpCommandEnumDirection';
import IpCommandEnumPayloadType from './IpCommandEnumPayloadType';
import IpCommandEnumStatus from './IpCommandEnumStatus';

/**
 * The SupersimV1IpCommand model module.
 * @module model/SupersimV1IpCommand
 * @version 1.55.0
 */
class SupersimV1IpCommand {
    /**
     * Constructs a new <code>SupersimV1IpCommand</code>.
     * @alias module:model/SupersimV1IpCommand
     */
    constructor() { 
        
        SupersimV1IpCommand.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SupersimV1IpCommand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupersimV1IpCommand} obj Optional instance to populate.
     * @return {module:model/SupersimV1IpCommand} The populated <code>SupersimV1IpCommand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupersimV1IpCommand();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('device_ip')) {
                obj['device_ip'] = ApiClient.convertToType(data['device_ip'], 'String');
            }
            if (data.hasOwnProperty('device_port')) {
                obj['device_port'] = ApiClient.convertToType(data['device_port'], 'Number');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = IpCommandEnumDirection.constructFromObject(data['direction']);
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('payload_type')) {
                obj['payload_type'] = IpCommandEnumPayloadType.constructFromObject(data['payload_type']);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('sim_iccid')) {
                obj['sim_iccid'] = ApiClient.convertToType(data['sim_iccid'], 'String');
            }
            if (data.hasOwnProperty('sim_sid')) {
                obj['sim_sid'] = ApiClient.convertToType(data['sim_sid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = IpCommandEnumStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SupersimV1IpCommand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SupersimV1IpCommand</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['device_ip'] && !(typeof data['device_ip'] === 'string' || data['device_ip'] instanceof String)) {
            throw new Error("Expected the field `device_ip` to be a primitive type in the JSON string but got " + data['device_ip']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['payload_type'] && !(typeof data['payload_type'] === 'string' || data['payload_type'] instanceof String)) {
            throw new Error("Expected the field `payload_type` to be a primitive type in the JSON string but got " + data['payload_type']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['sim_iccid'] && !(typeof data['sim_iccid'] === 'string' || data['sim_iccid'] instanceof String)) {
            throw new Error("Expected the field `sim_iccid` to be a primitive type in the JSON string but got " + data['sim_iccid']);
        }
        // ensure the json data is a string
        if (data['sim_sid'] && !(typeof data['sim_sid'] === 'string' || data['sim_sid'] instanceof String)) {
            throw new Error("Expected the field `sim_sid` to be a primitive type in the JSON string but got " + data['sim_sid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IP Command resource.
 * @member {String} account_sid
 */
SupersimV1IpCommand.prototype['account_sid'] = undefined;

/**
 * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
SupersimV1IpCommand.prototype['date_created'] = undefined;

/**
 * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_updated
 */
SupersimV1IpCommand.prototype['date_updated'] = undefined;

/**
 * The IP address of the device that the IP Command was sent to or received from. For an IP Command sent to a Super SIM, `device_ip` starts out as `null`, and once the IP Command is “sent”, the `device_ip` will be filled out. An IP Command sent from a Super SIM have its `device_ip` always set.
 * @member {String} device_ip
 */
SupersimV1IpCommand.prototype['device_ip'] = undefined;

/**
 * For an IP Command sent to a Super SIM, it would be the destination port of the IP message. For an IP Command sent from a Super SIM, it would be the source port of the IP message.
 * @member {Number} device_port
 */
SupersimV1IpCommand.prototype['device_port'] = undefined;

/**
 * @member {module:model/IpCommandEnumDirection} direction
 */
SupersimV1IpCommand.prototype['direction'] = undefined;

/**
 * The payload that is carried in the IP/UDP message. The payload can be encoded in either text or binary format. For text payload, UTF-8 encoding must be used.  For an IP Command sent to a Super SIM, the payload is appended to the IP/UDP message “as is”. The payload should not exceed 1300 bytes.  For an IP Command sent from a Super SIM, the payload from the received IP/UDP message is extracted and sent in binary encoding. For an IP Command sent from a Super SIM, the payload should not exceed 1300 bytes. If it is larger than 1300 bytes, there might be fragmentation on the upstream and the message may appear truncated.
 * @member {String} payload
 */
SupersimV1IpCommand.prototype['payload'] = undefined;

/**
 * @member {module:model/IpCommandEnumPayloadType} payload_type
 */
SupersimV1IpCommand.prototype['payload_type'] = undefined;

/**
 * The unique string that we created to identify the IP Command resource.
 * @member {String} sid
 */
SupersimV1IpCommand.prototype['sid'] = undefined;

/**
 * The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.
 * @member {String} sim_iccid
 */
SupersimV1IpCommand.prototype['sim_iccid'] = undefined;

/**
 * The SID of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.
 * @member {String} sim_sid
 */
SupersimV1IpCommand.prototype['sim_sid'] = undefined;

/**
 * @member {module:model/IpCommandEnumStatus} status
 */
SupersimV1IpCommand.prototype['status'] = undefined;

/**
 * The absolute URL of the IP Command resource.
 * @member {String} url
 */
SupersimV1IpCommand.prototype['url'] = undefined;






export default SupersimV1IpCommand;

