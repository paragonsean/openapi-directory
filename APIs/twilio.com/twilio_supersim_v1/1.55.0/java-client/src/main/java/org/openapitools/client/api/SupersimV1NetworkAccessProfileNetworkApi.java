/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListNetworkAccessProfileNetworkResponse;
import org.openapitools.client.model.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupersimV1NetworkAccessProfileNetworkApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupersimV1NetworkAccessProfileNetworkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupersimV1NetworkAccessProfileNetworkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String network, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarFormParams.put("Network", network);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String network, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling createNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling createNetworkAccessProfileNetwork(Async)");
        }

        return createNetworkAccessProfileNetworkCall(networkAccessProfileSid, network, _callback);

    }

    /**
     * 
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @return SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork createNetworkAccessProfileNetwork(String networkAccessProfileSid, String network) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> localVarResp = createNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, network);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> createNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String network) throws ApiException {
        okhttp3.Call localVarCall = createNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, network, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String network, final ApiCallback<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, network, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling deleteNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteNetworkAccessProfileNetwork(Async)");
        }

        return deleteNetworkAccessProfileNetworkCall(networkAccessProfileSid, sid, _callback);

    }

    /**
     * 
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkAccessProfileNetwork(String networkAccessProfileSid, String sid) throws ApiException {
        deleteNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, sid);
    }

    /**
     * 
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling fetchNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchNetworkAccessProfileNetwork(Async)");
        }

        return fetchNetworkAccessProfileNetworkCall(networkAccessProfileSid, sid, _callback);

    }

    /**
     * 
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @return SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork fetchNetworkAccessProfileNetwork(String networkAccessProfileSid, String sid) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> localVarResp = fetchNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> fetchNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String sid, final ApiCallback<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileNetworkCall(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling listNetworkAccessProfileNetwork(Async)");
        }

        return listNetworkAccessProfileNetworkCall(networkAccessProfileSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListNetworkAccessProfileNetworkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListNetworkAccessProfileNetworkResponse listNetworkAccessProfileNetwork(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListNetworkAccessProfileNetworkResponse> localVarResp = listNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListNetworkAccessProfileNetworkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNetworkAccessProfileNetworkResponse> listNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileNetworkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListNetworkAccessProfileNetworkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileNetworkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
