/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IpCommandEnumDirection;
import org.openapitools.client.model.IpCommandEnumPayloadType;
import org.openapitools.client.model.IpCommandEnumStatus;
import org.openapitools.client.model.ListIpCommandResponse;
import org.openapitools.client.model.SupersimV1IpCommand;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupersimV1IpCommandApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupersimV1IpCommandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupersimV1IpCommandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createIpCommand
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIpCommandCall(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (devicePort != null) {
            localVarFormParams.put("DevicePort", devicePort);
        }

        if (payload != null) {
            localVarFormParams.put("Payload", payload);
        }

        if (payloadType != null) {
            localVarFormParams.put("PayloadType", payloadType);
        }

        if (sim != null) {
            localVarFormParams.put("Sim", sim);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIpCommandValidateBeforeCall(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'devicePort' is set
        if (devicePort == null) {
            throw new ApiException("Missing the required parameter 'devicePort' when calling createIpCommand(Async)");
        }

        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling createIpCommand(Async)");
        }

        // verify the required parameter 'sim' is set
        if (sim == null) {
            throw new ApiException("Missing the required parameter 'sim' when calling createIpCommand(Async)");
        }

        return createIpCommandCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, _callback);

    }

    /**
     * 
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @return SupersimV1IpCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1IpCommand createIpCommand(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType) throws ApiException {
        ApiResponse<SupersimV1IpCommand> localVarResp = createIpCommandWithHttpInfo(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @return ApiResponse&lt;SupersimV1IpCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1IpCommand> createIpCommandWithHttpInfo(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType) throws ApiException {
        okhttp3.Call localVarCall = createIpCommandValidateBeforeCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, null);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIpCommandAsync(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback<SupersimV1IpCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIpCommandValidateBeforeCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchIpCommand
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIpCommandCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchIpCommandValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchIpCommand(Async)");
        }

        return fetchIpCommandCall(sid, _callback);

    }

    /**
     * 
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @return SupersimV1IpCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1IpCommand fetchIpCommand(String sid) throws ApiException {
        ApiResponse<SupersimV1IpCommand> localVarResp = fetchIpCommandWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1IpCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1IpCommand> fetchIpCommandWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchIpCommandValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIpCommandAsync(String sid, final ApiCallback<SupersimV1IpCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchIpCommandValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIpCommand
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/iot/supersim/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIpCommandCall(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (simIccid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SimIccid", simIccid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Direction", direction));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIpCommandValidateBeforeCall(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listIpCommandCall(sim, simIccid, status, direction, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/iot/supersim/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListIpCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListIpCommandResponse listIpCommand(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListIpCommandResponse> localVarResp = listIpCommandWithHttpInfo(sim, simIccid, status, direction, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/iot/supersim/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListIpCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIpCommandResponse> listIpCommandWithHttpInfo(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listIpCommandValidateBeforeCall(sim, simIccid, status, direction, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListIpCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/iot/supersim/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIpCommandAsync(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListIpCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIpCommandValidateBeforeCall(sim, simIccid, status, direction, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListIpCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
