/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListUsageRecordResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UsageRecordEnumGranularity;
import org.openapitools.client.model.UsageRecordEnumGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupersimV1UsageRecordApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupersimV1UsageRecordApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupersimV1UsageRecordApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listUsageRecord
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsageRecordCall(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/UsageRecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (fleet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Fleet", fleet));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Network", network));
        }

        if (isoCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsoCountry", isoCountry));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Group", group));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Granularity", granularity));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsageRecordValidateBeforeCall(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listUsageRecordCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUsageRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUsageRecordResponse listUsageRecord(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUsageRecordResponse> localVarResp = listUsageRecordWithHttpInfo(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUsageRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsageRecordResponse> listUsageRecordWithHttpInfo(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUsageRecordValidateBeforeCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUsageRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsageRecordAsync(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUsageRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsageRecordValidateBeforeCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUsageRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
