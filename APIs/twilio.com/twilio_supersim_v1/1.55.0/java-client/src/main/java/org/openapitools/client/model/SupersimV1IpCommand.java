/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IpCommandEnumDirection;
import org.openapitools.client.model.IpCommandEnumPayloadType;
import org.openapitools.client.model.IpCommandEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupersimV1IpCommand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:48.972558-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SupersimV1IpCommand {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DEVICE_IP = "device_ip";
  @SerializedName(SERIALIZED_NAME_DEVICE_IP)
  private String deviceIp;

  public static final String SERIALIZED_NAME_DEVICE_PORT = "device_port";
  @SerializedName(SERIALIZED_NAME_DEVICE_PORT)
  private Integer devicePort;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private IpCommandEnumDirection direction;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_PAYLOAD_TYPE = "payload_type";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_TYPE)
  private IpCommandEnumPayloadType payloadType;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SIM_ICCID = "sim_iccid";
  @SerializedName(SERIALIZED_NAME_SIM_ICCID)
  private String simIccid;

  public static final String SERIALIZED_NAME_SIM_SID = "sim_sid";
  @SerializedName(SERIALIZED_NAME_SIM_SID)
  private String simSid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private IpCommandEnumStatus status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public SupersimV1IpCommand() {
  }

  public SupersimV1IpCommand accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IP Command resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public SupersimV1IpCommand dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SupersimV1IpCommand dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public SupersimV1IpCommand deviceIp(String deviceIp) {
    this.deviceIp = deviceIp;
    return this;
  }

  /**
   * The IP address of the device that the IP Command was sent to or received from. For an IP Command sent to a Super SIM, &#x60;device_ip&#x60; starts out as &#x60;null&#x60;, and once the IP Command is “sent”, the &#x60;device_ip&#x60; will be filled out. An IP Command sent from a Super SIM have its &#x60;device_ip&#x60; always set.
   * @return deviceIp
   */
  @javax.annotation.Nullable
  public String getDeviceIp() {
    return deviceIp;
  }

  public void setDeviceIp(String deviceIp) {
    this.deviceIp = deviceIp;
  }


  public SupersimV1IpCommand devicePort(Integer devicePort) {
    this.devicePort = devicePort;
    return this;
  }

  /**
   * For an IP Command sent to a Super SIM, it would be the destination port of the IP message. For an IP Command sent from a Super SIM, it would be the source port of the IP message.
   * @return devicePort
   */
  @javax.annotation.Nullable
  public Integer getDevicePort() {
    return devicePort;
  }

  public void setDevicePort(Integer devicePort) {
    this.devicePort = devicePort;
  }


  public SupersimV1IpCommand direction(IpCommandEnumDirection direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public IpCommandEnumDirection getDirection() {
    return direction;
  }

  public void setDirection(IpCommandEnumDirection direction) {
    this.direction = direction;
  }


  public SupersimV1IpCommand payload(String payload) {
    this.payload = payload;
    return this;
  }

  /**
   * The payload that is carried in the IP/UDP message. The payload can be encoded in either text or binary format. For text payload, UTF-8 encoding must be used.  For an IP Command sent to a Super SIM, the payload is appended to the IP/UDP message “as is”. The payload should not exceed 1300 bytes.  For an IP Command sent from a Super SIM, the payload from the received IP/UDP message is extracted and sent in binary encoding. For an IP Command sent from a Super SIM, the payload should not exceed 1300 bytes. If it is larger than 1300 bytes, there might be fragmentation on the upstream and the message may appear truncated.
   * @return payload
   */
  @javax.annotation.Nullable
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public SupersimV1IpCommand payloadType(IpCommandEnumPayloadType payloadType) {
    this.payloadType = payloadType;
    return this;
  }

  /**
   * Get payloadType
   * @return payloadType
   */
  @javax.annotation.Nullable
  public IpCommandEnumPayloadType getPayloadType() {
    return payloadType;
  }

  public void setPayloadType(IpCommandEnumPayloadType payloadType) {
    this.payloadType = payloadType;
  }


  public SupersimV1IpCommand sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the IP Command resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public SupersimV1IpCommand simIccid(String simIccid) {
    this.simIccid = simIccid;
    return this;
  }

  /**
   * The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.
   * @return simIccid
   */
  @javax.annotation.Nullable
  public String getSimIccid() {
    return simIccid;
  }

  public void setSimIccid(String simIccid) {
    this.simIccid = simIccid;
  }


  public SupersimV1IpCommand simSid(String simSid) {
    this.simSid = simSid;
    return this;
  }

  /**
   * The SID of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.
   * @return simSid
   */
  @javax.annotation.Nullable
  public String getSimSid() {
    return simSid;
  }

  public void setSimSid(String simSid) {
    this.simSid = simSid;
  }


  public SupersimV1IpCommand status(IpCommandEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public IpCommandEnumStatus getStatus() {
    return status;
  }

  public void setStatus(IpCommandEnumStatus status) {
    this.status = status;
  }


  public SupersimV1IpCommand url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the IP Command resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupersimV1IpCommand supersimV1IpCommand = (SupersimV1IpCommand) o;
    return Objects.equals(this.accountSid, supersimV1IpCommand.accountSid) &&
        Objects.equals(this.dateCreated, supersimV1IpCommand.dateCreated) &&
        Objects.equals(this.dateUpdated, supersimV1IpCommand.dateUpdated) &&
        Objects.equals(this.deviceIp, supersimV1IpCommand.deviceIp) &&
        Objects.equals(this.devicePort, supersimV1IpCommand.devicePort) &&
        Objects.equals(this.direction, supersimV1IpCommand.direction) &&
        Objects.equals(this.payload, supersimV1IpCommand.payload) &&
        Objects.equals(this.payloadType, supersimV1IpCommand.payloadType) &&
        Objects.equals(this.sid, supersimV1IpCommand.sid) &&
        Objects.equals(this.simIccid, supersimV1IpCommand.simIccid) &&
        Objects.equals(this.simSid, supersimV1IpCommand.simSid) &&
        Objects.equals(this.status, supersimV1IpCommand.status) &&
        Objects.equals(this.url, supersimV1IpCommand.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, dateCreated, dateUpdated, deviceIp, devicePort, direction, payload, payloadType, sid, simIccid, simSid, status, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupersimV1IpCommand {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    deviceIp: ").append(toIndentedString(deviceIp)).append("\n");
    sb.append("    devicePort: ").append(toIndentedString(devicePort)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    payloadType: ").append(toIndentedString(payloadType)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    simIccid: ").append(toIndentedString(simIccid)).append("\n");
    sb.append("    simSid: ").append(toIndentedString(simSid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("device_ip");
    openapiFields.add("device_port");
    openapiFields.add("direction");
    openapiFields.add("payload");
    openapiFields.add("payload_type");
    openapiFields.add("sid");
    openapiFields.add("sim_iccid");
    openapiFields.add("sim_sid");
    openapiFields.add("status");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupersimV1IpCommand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupersimV1IpCommand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupersimV1IpCommand is not found in the empty JSON string", SupersimV1IpCommand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupersimV1IpCommand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupersimV1IpCommand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("device_ip") != null && !jsonObj.get("device_ip").isJsonNull()) && !jsonObj.get("device_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_ip").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        IpCommandEnumDirection.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) && !jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
      if ((jsonObj.get("payload_type") != null && !jsonObj.get("payload_type").isJsonNull()) && !jsonObj.get("payload_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_type").toString()));
      }
      // validate the optional field `payload_type`
      if (jsonObj.get("payload_type") != null && !jsonObj.get("payload_type").isJsonNull()) {
        IpCommandEnumPayloadType.validateJsonElement(jsonObj.get("payload_type"));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("sim_iccid") != null && !jsonObj.get("sim_iccid").isJsonNull()) && !jsonObj.get("sim_iccid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sim_iccid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sim_iccid").toString()));
      }
      if ((jsonObj.get("sim_sid") != null && !jsonObj.get("sim_sid").isJsonNull()) && !jsonObj.get("sim_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sim_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sim_sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        IpCommandEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupersimV1IpCommand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupersimV1IpCommand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupersimV1IpCommand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupersimV1IpCommand.class));

       return (TypeAdapter<T>) new TypeAdapter<SupersimV1IpCommand>() {
           @Override
           public void write(JsonWriter out, SupersimV1IpCommand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupersimV1IpCommand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupersimV1IpCommand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupersimV1IpCommand
   * @throws IOException if the JSON string is invalid with respect to SupersimV1IpCommand
   */
  public static SupersimV1IpCommand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupersimV1IpCommand.class);
  }

  /**
   * Convert an instance of SupersimV1IpCommand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

