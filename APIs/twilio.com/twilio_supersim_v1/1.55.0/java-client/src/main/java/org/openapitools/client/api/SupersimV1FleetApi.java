/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListFleetResponse;
import org.openapitools.client.model.SupersimV1Fleet;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupersimV1FleetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupersimV1FleetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupersimV1FleetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetCall(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataEnabled != null) {
            localVarFormParams.put("DataEnabled", dataEnabled);
        }

        if (dataLimit != null) {
            localVarFormParams.put("DataLimit", dataLimit);
        }

        if (ipCommandsMethod != null) {
            localVarFormParams.put("IpCommandsMethod", ipCommandsMethod);
        }

        if (ipCommandsUrl != null) {
            localVarFormParams.put("IpCommandsUrl", ipCommandsUrl);
        }

        if (networkAccessProfile != null) {
            localVarFormParams.put("NetworkAccessProfile", networkAccessProfile);
        }

        if (smsCommandsEnabled != null) {
            localVarFormParams.put("SmsCommandsEnabled", smsCommandsEnabled);
        }

        if (smsCommandsMethod != null) {
            localVarFormParams.put("SmsCommandsMethod", smsCommandsMethod);
        }

        if (smsCommandsUrl != null) {
            localVarFormParams.put("SmsCommandsUrl", smsCommandsUrl);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFleetValidateBeforeCall(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfile' is set
        if (networkAccessProfile == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfile' when calling createFleet(Async)");
        }

        return createFleetCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);

    }

    /**
     * 
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet createFleet(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = createFleetWithHttpInfo(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> createFleetWithHttpInfo(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createFleetValidateBeforeCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetAsync(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFleetValidateBeforeCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchFleet
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFleetCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchFleetValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchFleet(Async)");
        }

        return fetchFleetCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet fetchFleet(String sid) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = fetchFleetWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> fetchFleetWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchFleetValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFleetAsync(String sid, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchFleetValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFleetCall(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (networkAccessProfile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NetworkAccessProfile", networkAccessProfile));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFleetValidateBeforeCall(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listFleetCall(networkAccessProfile, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListFleetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFleetResponse listFleet(String networkAccessProfile, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListFleetResponse> localVarResp = listFleetWithHttpInfo(networkAccessProfile, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListFleetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFleetResponse> listFleetWithHttpInfo(String networkAccessProfile, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listFleetValidateBeforeCall(networkAccessProfile, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListFleetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFleetAsync(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListFleetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFleetValidateBeforeCall(networkAccessProfile, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListFleetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFleet
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFleetCall(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataLimit != null) {
            localVarFormParams.put("DataLimit", dataLimit);
        }

        if (ipCommandsMethod != null) {
            localVarFormParams.put("IpCommandsMethod", ipCommandsMethod);
        }

        if (ipCommandsUrl != null) {
            localVarFormParams.put("IpCommandsUrl", ipCommandsUrl);
        }

        if (networkAccessProfile != null) {
            localVarFormParams.put("NetworkAccessProfile", networkAccessProfile);
        }

        if (smsCommandsMethod != null) {
            localVarFormParams.put("SmsCommandsMethod", smsCommandsMethod);
        }

        if (smsCommandsUrl != null) {
            localVarFormParams.put("SmsCommandsUrl", smsCommandsUrl);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFleetValidateBeforeCall(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateFleet(Async)");
        }

        return updateFleetCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);

    }

    /**
     * 
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet updateFleet(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = updateFleetWithHttpInfo(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> updateFleetWithHttpInfo(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateFleetValidateBeforeCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFleetAsync(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFleetValidateBeforeCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
