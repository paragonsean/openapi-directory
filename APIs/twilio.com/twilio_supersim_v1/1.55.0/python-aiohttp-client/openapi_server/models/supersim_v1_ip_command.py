# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_command_enum_direction import IpCommandEnumDirection
from openapi_server.models.ip_command_enum_payload_type import IpCommandEnumPayloadType
from openapi_server.models.ip_command_enum_status import IpCommandEnumStatus
import re
from openapi_server import util


class SupersimV1IpCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, device_ip: str=None, device_port: int=None, direction: IpCommandEnumDirection=None, payload: str=None, payload_type: IpCommandEnumPayloadType=None, sid: str=None, sim_iccid: str=None, sim_sid: str=None, status: IpCommandEnumStatus=None, url: str=None):
        """SupersimV1IpCommand - a model defined in OpenAPI

        :param account_sid: The account_sid of this SupersimV1IpCommand.
        :param date_created: The date_created of this SupersimV1IpCommand.
        :param date_updated: The date_updated of this SupersimV1IpCommand.
        :param device_ip: The device_ip of this SupersimV1IpCommand.
        :param device_port: The device_port of this SupersimV1IpCommand.
        :param direction: The direction of this SupersimV1IpCommand.
        :param payload: The payload of this SupersimV1IpCommand.
        :param payload_type: The payload_type of this SupersimV1IpCommand.
        :param sid: The sid of this SupersimV1IpCommand.
        :param sim_iccid: The sim_iccid of this SupersimV1IpCommand.
        :param sim_sid: The sim_sid of this SupersimV1IpCommand.
        :param status: The status of this SupersimV1IpCommand.
        :param url: The url of this SupersimV1IpCommand.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'device_ip': str,
            'device_port': int,
            'direction': IpCommandEnumDirection,
            'payload': str,
            'payload_type': IpCommandEnumPayloadType,
            'sid': str,
            'sim_iccid': str,
            'sim_sid': str,
            'status': IpCommandEnumStatus,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'device_ip': 'device_ip',
            'device_port': 'device_port',
            'direction': 'direction',
            'payload': 'payload',
            'payload_type': 'payload_type',
            'sid': 'sid',
            'sim_iccid': 'sim_iccid',
            'sim_sid': 'sim_sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._device_ip = device_ip
        self._device_port = device_port
        self._direction = direction
        self._payload = payload
        self._payload_type = payload_type
        self._sid = sid
        self._sim_iccid = sim_iccid
        self._sim_sid = sim_sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1IpCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.ip_command of this SupersimV1IpCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SupersimV1IpCommand.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IP Command resource.

        :return: The account_sid of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SupersimV1IpCommand.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IP Command resource.

        :param account_sid: The account_sid of this SupersimV1IpCommand.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this SupersimV1IpCommand.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this SupersimV1IpCommand.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SupersimV1IpCommand.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this SupersimV1IpCommand.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this SupersimV1IpCommand.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this SupersimV1IpCommand.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SupersimV1IpCommand.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this SupersimV1IpCommand.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def device_ip(self):
        """Gets the device_ip of this SupersimV1IpCommand.

        The IP address of the device that the IP Command was sent to or received from. For an IP Command sent to a Super SIM, `device_ip` starts out as `null`, and once the IP Command is “sent”, the `device_ip` will be filled out. An IP Command sent from a Super SIM have its `device_ip` always set.

        :return: The device_ip of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """Sets the device_ip of this SupersimV1IpCommand.

        The IP address of the device that the IP Command was sent to or received from. For an IP Command sent to a Super SIM, `device_ip` starts out as `null`, and once the IP Command is “sent”, the `device_ip` will be filled out. An IP Command sent from a Super SIM have its `device_ip` always set.

        :param device_ip: The device_ip of this SupersimV1IpCommand.
        :type device_ip: str
        """

        self._device_ip = device_ip

    @property
    def device_port(self):
        """Gets the device_port of this SupersimV1IpCommand.

        For an IP Command sent to a Super SIM, it would be the destination port of the IP message. For an IP Command sent from a Super SIM, it would be the source port of the IP message.

        :return: The device_port of this SupersimV1IpCommand.
        :rtype: int
        """
        return self._device_port

    @device_port.setter
    def device_port(self, device_port):
        """Sets the device_port of this SupersimV1IpCommand.

        For an IP Command sent to a Super SIM, it would be the destination port of the IP message. For an IP Command sent from a Super SIM, it would be the source port of the IP message.

        :param device_port: The device_port of this SupersimV1IpCommand.
        :type device_port: int
        """

        self._device_port = device_port

    @property
    def direction(self):
        """Gets the direction of this SupersimV1IpCommand.


        :return: The direction of this SupersimV1IpCommand.
        :rtype: IpCommandEnumDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SupersimV1IpCommand.


        :param direction: The direction of this SupersimV1IpCommand.
        :type direction: IpCommandEnumDirection
        """

        self._direction = direction

    @property
    def payload(self):
        """Gets the payload of this SupersimV1IpCommand.

        The payload that is carried in the IP/UDP message. The payload can be encoded in either text or binary format. For text payload, UTF-8 encoding must be used.  For an IP Command sent to a Super SIM, the payload is appended to the IP/UDP message “as is”. The payload should not exceed 1300 bytes.  For an IP Command sent from a Super SIM, the payload from the received IP/UDP message is extracted and sent in binary encoding. For an IP Command sent from a Super SIM, the payload should not exceed 1300 bytes. If it is larger than 1300 bytes, there might be fragmentation on the upstream and the message may appear truncated.

        :return: The payload of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SupersimV1IpCommand.

        The payload that is carried in the IP/UDP message. The payload can be encoded in either text or binary format. For text payload, UTF-8 encoding must be used.  For an IP Command sent to a Super SIM, the payload is appended to the IP/UDP message “as is”. The payload should not exceed 1300 bytes.  For an IP Command sent from a Super SIM, the payload from the received IP/UDP message is extracted and sent in binary encoding. For an IP Command sent from a Super SIM, the payload should not exceed 1300 bytes. If it is larger than 1300 bytes, there might be fragmentation on the upstream and the message may appear truncated.

        :param payload: The payload of this SupersimV1IpCommand.
        :type payload: str
        """

        self._payload = payload

    @property
    def payload_type(self):
        """Gets the payload_type of this SupersimV1IpCommand.


        :return: The payload_type of this SupersimV1IpCommand.
        :rtype: IpCommandEnumPayloadType
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type):
        """Sets the payload_type of this SupersimV1IpCommand.


        :param payload_type: The payload_type of this SupersimV1IpCommand.
        :type payload_type: IpCommandEnumPayloadType
        """

        self._payload_type = payload_type

    @property
    def sid(self):
        """Gets the sid of this SupersimV1IpCommand.

        The unique string that we created to identify the IP Command resource.

        :return: The sid of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SupersimV1IpCommand.

        The unique string that we created to identify the IP Command resource.

        :param sid: The sid of this SupersimV1IpCommand.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HG[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HG[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sim_iccid(self):
        """Gets the sim_iccid of this SupersimV1IpCommand.

        The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.

        :return: The sim_iccid of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._sim_iccid

    @sim_iccid.setter
    def sim_iccid(self, sim_iccid):
        """Sets the sim_iccid of this SupersimV1IpCommand.

        The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.

        :param sim_iccid: The sim_iccid of this SupersimV1IpCommand.
        :type sim_iccid: str
        """

        self._sim_iccid = sim_iccid

    @property
    def sim_sid(self):
        """Gets the sim_sid of this SupersimV1IpCommand.

        The SID of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.

        :return: The sim_sid of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._sim_sid

    @sim_sid.setter
    def sim_sid(self, sim_sid):
        """Sets the sim_sid of this SupersimV1IpCommand.

        The SID of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) that this IP Command was sent to or from.

        :param sim_sid: The sim_sid of this SupersimV1IpCommand.
        :type sim_sid: str
        """
        if sim_sid is not None and len(sim_sid) > 34:
            raise ValueError("Invalid value for `sim_sid`, length must be less than or equal to `34`")
        if sim_sid is not None and len(sim_sid) < 34:
            raise ValueError("Invalid value for `sim_sid`, length must be greater than or equal to `34`")
        if sim_sid is not None and not re.search(r'^HS[0-9a-fA-F]{32}$', sim_sid):
            raise ValueError("Invalid value for `sim_sid`, must be a follow pattern or equal to `/^HS[0-9a-fA-F]{32}$/`")

        self._sim_sid = sim_sid

    @property
    def status(self):
        """Gets the status of this SupersimV1IpCommand.


        :return: The status of this SupersimV1IpCommand.
        :rtype: IpCommandEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupersimV1IpCommand.


        :param status: The status of this SupersimV1IpCommand.
        :type status: IpCommandEnumStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this SupersimV1IpCommand.

        The absolute URL of the IP Command resource.

        :return: The url of this SupersimV1IpCommand.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SupersimV1IpCommand.

        The absolute URL of the IP Command resource.

        :param url: The url of this SupersimV1IpCommand.
        :type url: str
        """

        self._url = url
