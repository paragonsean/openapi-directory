# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sim_enum_status import SimEnumStatus
import re
from openapi_server import util


class SupersimV1Sim(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, fleet_sid: str=None, iccid: str=None, links: object=None, sid: str=None, status: SimEnumStatus=None, unique_name: str=None, url: str=None):
        """SupersimV1Sim - a model defined in OpenAPI

        :param account_sid: The account_sid of this SupersimV1Sim.
        :param date_created: The date_created of this SupersimV1Sim.
        :param date_updated: The date_updated of this SupersimV1Sim.
        :param fleet_sid: The fleet_sid of this SupersimV1Sim.
        :param iccid: The iccid of this SupersimV1Sim.
        :param links: The links of this SupersimV1Sim.
        :param sid: The sid of this SupersimV1Sim.
        :param status: The status of this SupersimV1Sim.
        :param unique_name: The unique_name of this SupersimV1Sim.
        :param url: The url of this SupersimV1Sim.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'fleet_sid': str,
            'iccid': str,
            'links': object,
            'sid': str,
            'status': SimEnumStatus,
            'unique_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'fleet_sid': 'fleet_sid',
            'iccid': 'iccid',
            'links': 'links',
            'sid': 'sid',
            'status': 'status',
            'unique_name': 'unique_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._fleet_sid = fleet_sid
        self._iccid = iccid
        self._links = links
        self._sid = sid
        self._status = status
        self._unique_name = unique_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1Sim':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.sim of this SupersimV1Sim.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SupersimV1Sim.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Super SIM belongs to.

        :return: The account_sid of this SupersimV1Sim.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SupersimV1Sim.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Super SIM belongs to.

        :param account_sid: The account_sid of this SupersimV1Sim.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this SupersimV1Sim.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this SupersimV1Sim.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SupersimV1Sim.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this SupersimV1Sim.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this SupersimV1Sim.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this SupersimV1Sim.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SupersimV1Sim.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this SupersimV1Sim.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def fleet_sid(self):
        """Gets the fleet_sid of this SupersimV1Sim.

        The unique ID of the Fleet configured for this SIM.

        :return: The fleet_sid of this SupersimV1Sim.
        :rtype: str
        """
        return self._fleet_sid

    @fleet_sid.setter
    def fleet_sid(self, fleet_sid):
        """Sets the fleet_sid of this SupersimV1Sim.

        The unique ID of the Fleet configured for this SIM.

        :param fleet_sid: The fleet_sid of this SupersimV1Sim.
        :type fleet_sid: str
        """
        if fleet_sid is not None and len(fleet_sid) > 34:
            raise ValueError("Invalid value for `fleet_sid`, length must be less than or equal to `34`")
        if fleet_sid is not None and len(fleet_sid) < 34:
            raise ValueError("Invalid value for `fleet_sid`, length must be greater than or equal to `34`")
        if fleet_sid is not None and not re.search(r'^HF[0-9a-fA-F]{32}$', fleet_sid):
            raise ValueError("Invalid value for `fleet_sid`, must be a follow pattern or equal to `/^HF[0-9a-fA-F]{32}$/`")

        self._fleet_sid = fleet_sid

    @property
    def iccid(self):
        """Gets the iccid of this SupersimV1Sim.

        The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with the SIM.

        :return: The iccid of this SupersimV1Sim.
        :rtype: str
        """
        return self._iccid

    @iccid.setter
    def iccid(self, iccid):
        """Sets the iccid of this SupersimV1Sim.

        The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with the SIM.

        :param iccid: The iccid of this SupersimV1Sim.
        :type iccid: str
        """

        self._iccid = iccid

    @property
    def links(self):
        """Gets the links of this SupersimV1Sim.


        :return: The links of this SupersimV1Sim.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SupersimV1Sim.


        :param links: The links of this SupersimV1Sim.
        :type links: object
        """

        self._links = links

    @property
    def sid(self):
        """Gets the sid of this SupersimV1Sim.

        The unique string that identifies the Sim resource.

        :return: The sid of this SupersimV1Sim.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SupersimV1Sim.

        The unique string that identifies the Sim resource.

        :param sid: The sid of this SupersimV1Sim.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HS[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HS[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this SupersimV1Sim.


        :return: The status of this SupersimV1Sim.
        :rtype: SimEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupersimV1Sim.


        :param status: The status of this SupersimV1Sim.
        :type status: SimEnumStatus
        """

        self._status = status

    @property
    def unique_name(self):
        """Gets the unique_name of this SupersimV1Sim.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :return: The unique_name of this SupersimV1Sim.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this SupersimV1Sim.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :param unique_name: The unique_name of this SupersimV1Sim.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this SupersimV1Sim.

        The absolute URL of the Sim Resource.

        :return: The url of this SupersimV1Sim.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SupersimV1Sim.

        The absolute URL of the Sim Resource.

        :param url: The url of this SupersimV1Sim.
        :type url: str
        """

        self._url = url
