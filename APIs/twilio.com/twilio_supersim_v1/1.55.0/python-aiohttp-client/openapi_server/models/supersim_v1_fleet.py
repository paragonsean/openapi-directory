# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fleet_enum_data_metering import FleetEnumDataMetering
import re
from openapi_server import util


class SupersimV1Fleet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, data_enabled: bool=None, data_limit: int=None, data_metering: FleetEnumDataMetering=None, date_created: datetime=None, date_updated: datetime=None, ip_commands_method: str=None, ip_commands_url: str=None, network_access_profile_sid: str=None, sid: str=None, sms_commands_enabled: bool=None, sms_commands_method: str=None, sms_commands_url: str=None, unique_name: str=None, url: str=None):
        """SupersimV1Fleet - a model defined in OpenAPI

        :param account_sid: The account_sid of this SupersimV1Fleet.
        :param data_enabled: The data_enabled of this SupersimV1Fleet.
        :param data_limit: The data_limit of this SupersimV1Fleet.
        :param data_metering: The data_metering of this SupersimV1Fleet.
        :param date_created: The date_created of this SupersimV1Fleet.
        :param date_updated: The date_updated of this SupersimV1Fleet.
        :param ip_commands_method: The ip_commands_method of this SupersimV1Fleet.
        :param ip_commands_url: The ip_commands_url of this SupersimV1Fleet.
        :param network_access_profile_sid: The network_access_profile_sid of this SupersimV1Fleet.
        :param sid: The sid of this SupersimV1Fleet.
        :param sms_commands_enabled: The sms_commands_enabled of this SupersimV1Fleet.
        :param sms_commands_method: The sms_commands_method of this SupersimV1Fleet.
        :param sms_commands_url: The sms_commands_url of this SupersimV1Fleet.
        :param unique_name: The unique_name of this SupersimV1Fleet.
        :param url: The url of this SupersimV1Fleet.
        """
        self.openapi_types = {
            'account_sid': str,
            'data_enabled': bool,
            'data_limit': int,
            'data_metering': FleetEnumDataMetering,
            'date_created': datetime,
            'date_updated': datetime,
            'ip_commands_method': str,
            'ip_commands_url': str,
            'network_access_profile_sid': str,
            'sid': str,
            'sms_commands_enabled': bool,
            'sms_commands_method': str,
            'sms_commands_url': str,
            'unique_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'data_enabled': 'data_enabled',
            'data_limit': 'data_limit',
            'data_metering': 'data_metering',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'ip_commands_method': 'ip_commands_method',
            'ip_commands_url': 'ip_commands_url',
            'network_access_profile_sid': 'network_access_profile_sid',
            'sid': 'sid',
            'sms_commands_enabled': 'sms_commands_enabled',
            'sms_commands_method': 'sms_commands_method',
            'sms_commands_url': 'sms_commands_url',
            'unique_name': 'unique_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._data_enabled = data_enabled
        self._data_limit = data_limit
        self._data_metering = data_metering
        self._date_created = date_created
        self._date_updated = date_updated
        self._ip_commands_method = ip_commands_method
        self._ip_commands_url = ip_commands_url
        self._network_access_profile_sid = network_access_profile_sid
        self._sid = sid
        self._sms_commands_enabled = sms_commands_enabled
        self._sms_commands_method = sms_commands_method
        self._sms_commands_url = sms_commands_url
        self._unique_name = unique_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1Fleet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.fleet of this SupersimV1Fleet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SupersimV1Fleet.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Fleet resource.

        :return: The account_sid of this SupersimV1Fleet.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SupersimV1Fleet.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Fleet resource.

        :param account_sid: The account_sid of this SupersimV1Fleet.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def data_enabled(self):
        """Gets the data_enabled of this SupersimV1Fleet.

        Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`.

        :return: The data_enabled of this SupersimV1Fleet.
        :rtype: bool
        """
        return self._data_enabled

    @data_enabled.setter
    def data_enabled(self, data_enabled):
        """Sets the data_enabled of this SupersimV1Fleet.

        Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`.

        :param data_enabled: The data_enabled of this SupersimV1Fleet.
        :type data_enabled: bool
        """

        self._data_enabled = data_enabled

    @property
    def data_limit(self):
        """Gets the data_limit of this SupersimV1Fleet.

        The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 250MB.

        :return: The data_limit of this SupersimV1Fleet.
        :rtype: int
        """
        return self._data_limit

    @data_limit.setter
    def data_limit(self, data_limit):
        """Sets the data_limit of this SupersimV1Fleet.

        The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 250MB.

        :param data_limit: The data_limit of this SupersimV1Fleet.
        :type data_limit: int
        """

        self._data_limit = data_limit

    @property
    def data_metering(self):
        """Gets the data_metering of this SupersimV1Fleet.


        :return: The data_metering of this SupersimV1Fleet.
        :rtype: FleetEnumDataMetering
        """
        return self._data_metering

    @data_metering.setter
    def data_metering(self, data_metering):
        """Sets the data_metering of this SupersimV1Fleet.


        :param data_metering: The data_metering of this SupersimV1Fleet.
        :type data_metering: FleetEnumDataMetering
        """

        self._data_metering = data_metering

    @property
    def date_created(self):
        """Gets the date_created of this SupersimV1Fleet.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this SupersimV1Fleet.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SupersimV1Fleet.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this SupersimV1Fleet.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this SupersimV1Fleet.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this SupersimV1Fleet.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SupersimV1Fleet.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this SupersimV1Fleet.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def ip_commands_method(self):
        """Gets the ip_commands_method of this SupersimV1Fleet.

        A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.

        :return: The ip_commands_method of this SupersimV1Fleet.
        :rtype: str
        """
        return self._ip_commands_method

    @ip_commands_method.setter
    def ip_commands_method(self, ip_commands_method):
        """Sets the ip_commands_method of this SupersimV1Fleet.

        A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.

        :param ip_commands_method: The ip_commands_method of this SupersimV1Fleet.
        :type ip_commands_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if ip_commands_method not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_commands_method` ({0}), must be one of {1}"
                .format(ip_commands_method, allowed_values)
            )

        self._ip_commands_method = ip_commands_method

    @property
    def ip_commands_url(self):
        """Gets the ip_commands_url of this SupersimV1Fleet.

        The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.

        :return: The ip_commands_url of this SupersimV1Fleet.
        :rtype: str
        """
        return self._ip_commands_url

    @ip_commands_url.setter
    def ip_commands_url(self, ip_commands_url):
        """Sets the ip_commands_url of this SupersimV1Fleet.

        The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.

        :param ip_commands_url: The ip_commands_url of this SupersimV1Fleet.
        :type ip_commands_url: str
        """

        self._ip_commands_url = ip_commands_url

    @property
    def network_access_profile_sid(self):
        """Gets the network_access_profile_sid of this SupersimV1Fleet.

        The SID of the Network Access Profile that controls which cellular networks the Fleet's SIMs can connect to.

        :return: The network_access_profile_sid of this SupersimV1Fleet.
        :rtype: str
        """
        return self._network_access_profile_sid

    @network_access_profile_sid.setter
    def network_access_profile_sid(self, network_access_profile_sid):
        """Sets the network_access_profile_sid of this SupersimV1Fleet.

        The SID of the Network Access Profile that controls which cellular networks the Fleet's SIMs can connect to.

        :param network_access_profile_sid: The network_access_profile_sid of this SupersimV1Fleet.
        :type network_access_profile_sid: str
        """
        if network_access_profile_sid is not None and len(network_access_profile_sid) > 34:
            raise ValueError("Invalid value for `network_access_profile_sid`, length must be less than or equal to `34`")
        if network_access_profile_sid is not None and len(network_access_profile_sid) < 34:
            raise ValueError("Invalid value for `network_access_profile_sid`, length must be greater than or equal to `34`")
        if network_access_profile_sid is not None and not re.search(r'^HA[0-9a-fA-F]{32}$', network_access_profile_sid):
            raise ValueError("Invalid value for `network_access_profile_sid`, must be a follow pattern or equal to `/^HA[0-9a-fA-F]{32}$/`")

        self._network_access_profile_sid = network_access_profile_sid

    @property
    def sid(self):
        """Gets the sid of this SupersimV1Fleet.

        The unique string that we created to identify the Fleet resource.

        :return: The sid of this SupersimV1Fleet.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SupersimV1Fleet.

        The unique string that we created to identify the Fleet resource.

        :param sid: The sid of this SupersimV1Fleet.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HF[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HF[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sms_commands_enabled(self):
        """Gets the sms_commands_enabled of this SupersimV1Fleet.

        Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to `false`.

        :return: The sms_commands_enabled of this SupersimV1Fleet.
        :rtype: bool
        """
        return self._sms_commands_enabled

    @sms_commands_enabled.setter
    def sms_commands_enabled(self, sms_commands_enabled):
        """Sets the sms_commands_enabled of this SupersimV1Fleet.

        Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to `false`.

        :param sms_commands_enabled: The sms_commands_enabled of this SupersimV1Fleet.
        :type sms_commands_enabled: bool
        """

        self._sms_commands_enabled = sms_commands_enabled

    @property
    def sms_commands_method(self):
        """Gets the sms_commands_method of this SupersimV1Fleet.

        A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.

        :return: The sms_commands_method of this SupersimV1Fleet.
        :rtype: str
        """
        return self._sms_commands_method

    @sms_commands_method.setter
    def sms_commands_method(self, sms_commands_method):
        """Sets the sms_commands_method of this SupersimV1Fleet.

        A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.

        :param sms_commands_method: The sms_commands_method of this SupersimV1Fleet.
        :type sms_commands_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if sms_commands_method not in allowed_values:
            raise ValueError(
                "Invalid value for `sms_commands_method` ({0}), must be one of {1}"
                .format(sms_commands_method, allowed_values)
            )

        self._sms_commands_method = sms_commands_method

    @property
    def sms_commands_url(self):
        """Gets the sms_commands_url of this SupersimV1Fleet.

        The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.

        :return: The sms_commands_url of this SupersimV1Fleet.
        :rtype: str
        """
        return self._sms_commands_url

    @sms_commands_url.setter
    def sms_commands_url(self, sms_commands_url):
        """Sets the sms_commands_url of this SupersimV1Fleet.

        The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.

        :param sms_commands_url: The sms_commands_url of this SupersimV1Fleet.
        :type sms_commands_url: str
        """

        self._sms_commands_url = sms_commands_url

    @property
    def unique_name(self):
        """Gets the unique_name of this SupersimV1Fleet.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :return: The unique_name of this SupersimV1Fleet.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this SupersimV1Fleet.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.

        :param unique_name: The unique_name of this SupersimV1Fleet.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this SupersimV1Fleet.

        The absolute URL of the Fleet resource.

        :return: The url of this SupersimV1Fleet.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SupersimV1Fleet.

        The absolute URL of the Fleet resource.

        :param url: The url of this SupersimV1Fleet.
        :type url: str
        """

        self._url = url
