# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SupersimV1UsageRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, billed_unit: str=None, data_download: int=None, data_total: int=None, data_total_billed: float=None, data_upload: int=None, fleet_sid: str=None, iso_country: str=None, network_sid: str=None, period: object=None, sim_sid: str=None):
        """SupersimV1UsageRecord - a model defined in OpenAPI

        :param account_sid: The account_sid of this SupersimV1UsageRecord.
        :param billed_unit: The billed_unit of this SupersimV1UsageRecord.
        :param data_download: The data_download of this SupersimV1UsageRecord.
        :param data_total: The data_total of this SupersimV1UsageRecord.
        :param data_total_billed: The data_total_billed of this SupersimV1UsageRecord.
        :param data_upload: The data_upload of this SupersimV1UsageRecord.
        :param fleet_sid: The fleet_sid of this SupersimV1UsageRecord.
        :param iso_country: The iso_country of this SupersimV1UsageRecord.
        :param network_sid: The network_sid of this SupersimV1UsageRecord.
        :param period: The period of this SupersimV1UsageRecord.
        :param sim_sid: The sim_sid of this SupersimV1UsageRecord.
        """
        self.openapi_types = {
            'account_sid': str,
            'billed_unit': str,
            'data_download': int,
            'data_total': int,
            'data_total_billed': float,
            'data_upload': int,
            'fleet_sid': str,
            'iso_country': str,
            'network_sid': str,
            'period': object,
            'sim_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'billed_unit': 'billed_unit',
            'data_download': 'data_download',
            'data_total': 'data_total',
            'data_total_billed': 'data_total_billed',
            'data_upload': 'data_upload',
            'fleet_sid': 'fleet_sid',
            'iso_country': 'iso_country',
            'network_sid': 'network_sid',
            'period': 'period',
            'sim_sid': 'sim_sid'
        }

        self._account_sid = account_sid
        self._billed_unit = billed_unit
        self._data_download = data_download
        self._data_total = data_total
        self._data_total_billed = data_total_billed
        self._data_upload = data_upload
        self._fleet_sid = fleet_sid
        self._iso_country = iso_country
        self._network_sid = network_sid
        self._period = period
        self._sim_sid = sim_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1UsageRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.usage_record of this SupersimV1UsageRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SupersimV1UsageRecord.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that incurred the usage.

        :return: The account_sid of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SupersimV1UsageRecord.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that incurred the usage.

        :param account_sid: The account_sid of this SupersimV1UsageRecord.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def billed_unit(self):
        """Gets the billed_unit of this SupersimV1UsageRecord.

        The currency in which the billed amounts are measured, specified in the 3 letter ISO 4127 format (e.g. `USD`, `EUR`, `JPY`). This can be null when data_toal_billed is 0 and we do not yet have billing information for the corresponding data usage. Refer to [Data Usage Processing](https://www.twilio.com/docs/iot/supersim/api/usage-record-resource#data-usage-processing) for more details.

        :return: The billed_unit of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._billed_unit

    @billed_unit.setter
    def billed_unit(self, billed_unit):
        """Sets the billed_unit of this SupersimV1UsageRecord.

        The currency in which the billed amounts are measured, specified in the 3 letter ISO 4127 format (e.g. `USD`, `EUR`, `JPY`). This can be null when data_toal_billed is 0 and we do not yet have billing information for the corresponding data usage. Refer to [Data Usage Processing](https://www.twilio.com/docs/iot/supersim/api/usage-record-resource#data-usage-processing) for more details.

        :param billed_unit: The billed_unit of this SupersimV1UsageRecord.
        :type billed_unit: str
        """

        self._billed_unit = billed_unit

    @property
    def data_download(self):
        """Gets the data_download of this SupersimV1UsageRecord.

        Total data downloaded in bytes, aggregated by the query parameters.

        :return: The data_download of this SupersimV1UsageRecord.
        :rtype: int
        """
        return self._data_download

    @data_download.setter
    def data_download(self, data_download):
        """Sets the data_download of this SupersimV1UsageRecord.

        Total data downloaded in bytes, aggregated by the query parameters.

        :param data_download: The data_download of this SupersimV1UsageRecord.
        :type data_download: int
        """

        self._data_download = data_download

    @property
    def data_total(self):
        """Gets the data_total of this SupersimV1UsageRecord.

        Total of data_upload and data_download.

        :return: The data_total of this SupersimV1UsageRecord.
        :rtype: int
        """
        return self._data_total

    @data_total.setter
    def data_total(self, data_total):
        """Sets the data_total of this SupersimV1UsageRecord.

        Total of data_upload and data_download.

        :param data_total: The data_total of this SupersimV1UsageRecord.
        :type data_total: int
        """

        self._data_total = data_total

    @property
    def data_total_billed(self):
        """Gets the data_total_billed of this SupersimV1UsageRecord.

        Total amount in the `billed_unit` that was charged for the data uploaded or downloaded. Will return 0 for usage prior to February 1, 2022. Value may be 0 despite `data_total` being greater than 0 if the data usage is still being processed by Twilio's billing system. Refer to [Data Usage Processing](https://www.twilio.com/docs/iot/supersim/api/usage-record-resource#data-usage-processing) for more details.

        :return: The data_total_billed of this SupersimV1UsageRecord.
        :rtype: float
        """
        return self._data_total_billed

    @data_total_billed.setter
    def data_total_billed(self, data_total_billed):
        """Sets the data_total_billed of this SupersimV1UsageRecord.

        Total amount in the `billed_unit` that was charged for the data uploaded or downloaded. Will return 0 for usage prior to February 1, 2022. Value may be 0 despite `data_total` being greater than 0 if the data usage is still being processed by Twilio's billing system. Refer to [Data Usage Processing](https://www.twilio.com/docs/iot/supersim/api/usage-record-resource#data-usage-processing) for more details.

        :param data_total_billed: The data_total_billed of this SupersimV1UsageRecord.
        :type data_total_billed: float
        """

        self._data_total_billed = data_total_billed

    @property
    def data_upload(self):
        """Gets the data_upload of this SupersimV1UsageRecord.

        Total data uploaded in bytes, aggregated by the query parameters.

        :return: The data_upload of this SupersimV1UsageRecord.
        :rtype: int
        """
        return self._data_upload

    @data_upload.setter
    def data_upload(self, data_upload):
        """Sets the data_upload of this SupersimV1UsageRecord.

        Total data uploaded in bytes, aggregated by the query parameters.

        :param data_upload: The data_upload of this SupersimV1UsageRecord.
        :type data_upload: int
        """

        self._data_upload = data_upload

    @property
    def fleet_sid(self):
        """Gets the fleet_sid of this SupersimV1UsageRecord.

        SID of the Fleet resource the usage occurred on. Value will only be present when either a value for the `Fleet` query parameter is provided or when UsageRecords are grouped by `fleet`. Otherwise, the value will be `null`.

        :return: The fleet_sid of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._fleet_sid

    @fleet_sid.setter
    def fleet_sid(self, fleet_sid):
        """Sets the fleet_sid of this SupersimV1UsageRecord.

        SID of the Fleet resource the usage occurred on. Value will only be present when either a value for the `Fleet` query parameter is provided or when UsageRecords are grouped by `fleet`. Otherwise, the value will be `null`.

        :param fleet_sid: The fleet_sid of this SupersimV1UsageRecord.
        :type fleet_sid: str
        """
        if fleet_sid is not None and len(fleet_sid) > 34:
            raise ValueError("Invalid value for `fleet_sid`, length must be less than or equal to `34`")
        if fleet_sid is not None and len(fleet_sid) < 34:
            raise ValueError("Invalid value for `fleet_sid`, length must be greater than or equal to `34`")
        if fleet_sid is not None and not re.search(r'^HF[0-9a-fA-F]{32}$', fleet_sid):
            raise ValueError("Invalid value for `fleet_sid`, must be a follow pattern or equal to `/^HF[0-9a-fA-F]{32}$/`")

        self._fleet_sid = fleet_sid

    @property
    def iso_country(self):
        """Gets the iso_country of this SupersimV1UsageRecord.

        Alpha-2 ISO Country Code that the usage occurred in. Value will only be present when either a value for the `IsoCountry` query parameter is provided or when UsageRecords are grouped by `isoCountry`. Otherwise, the value will be `null`.

        :return: The iso_country of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._iso_country

    @iso_country.setter
    def iso_country(self, iso_country):
        """Sets the iso_country of this SupersimV1UsageRecord.

        Alpha-2 ISO Country Code that the usage occurred in. Value will only be present when either a value for the `IsoCountry` query parameter is provided or when UsageRecords are grouped by `isoCountry`. Otherwise, the value will be `null`.

        :param iso_country: The iso_country of this SupersimV1UsageRecord.
        :type iso_country: str
        """

        self._iso_country = iso_country

    @property
    def network_sid(self):
        """Gets the network_sid of this SupersimV1UsageRecord.

        SID of the Network resource the usage occurred on. Value will only be present when either a value for the `Network` query parameter is provided or when UsageRecords are grouped by `network`. Otherwise, the value will be `null`.

        :return: The network_sid of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._network_sid

    @network_sid.setter
    def network_sid(self, network_sid):
        """Sets the network_sid of this SupersimV1UsageRecord.

        SID of the Network resource the usage occurred on. Value will only be present when either a value for the `Network` query parameter is provided or when UsageRecords are grouped by `network`. Otherwise, the value will be `null`.

        :param network_sid: The network_sid of this SupersimV1UsageRecord.
        :type network_sid: str
        """
        if network_sid is not None and len(network_sid) > 34:
            raise ValueError("Invalid value for `network_sid`, length must be less than or equal to `34`")
        if network_sid is not None and len(network_sid) < 34:
            raise ValueError("Invalid value for `network_sid`, length must be greater than or equal to `34`")
        if network_sid is not None and not re.search(r'^HW[0-9a-fA-F]{32}$', network_sid):
            raise ValueError("Invalid value for `network_sid`, must be a follow pattern or equal to `/^HW[0-9a-fA-F]{32}$/`")

        self._network_sid = network_sid

    @property
    def period(self):
        """Gets the period of this SupersimV1UsageRecord.

        The time period for which the usage is reported. The period is represented as a pair of `start_time` and `end_time` timestamps specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The period of this SupersimV1UsageRecord.
        :rtype: object
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SupersimV1UsageRecord.

        The time period for which the usage is reported. The period is represented as a pair of `start_time` and `end_time` timestamps specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param period: The period of this SupersimV1UsageRecord.
        :type period: object
        """

        self._period = period

    @property
    def sim_sid(self):
        """Gets the sim_sid of this SupersimV1UsageRecord.

        SID of a Sim resource to which the UsageRecord belongs. Value will only be present when either a value for the `Sim` query parameter is provided or when UsageRecords are grouped by `sim`. Otherwise, the value will be `null`.

        :return: The sim_sid of this SupersimV1UsageRecord.
        :rtype: str
        """
        return self._sim_sid

    @sim_sid.setter
    def sim_sid(self, sim_sid):
        """Sets the sim_sid of this SupersimV1UsageRecord.

        SID of a Sim resource to which the UsageRecord belongs. Value will only be present when either a value for the `Sim` query parameter is provided or when UsageRecords are grouped by `sim`. Otherwise, the value will be `null`.

        :param sim_sid: The sim_sid of this SupersimV1UsageRecord.
        :type sim_sid: str
        """
        if sim_sid is not None and len(sim_sid) > 34:
            raise ValueError("Invalid value for `sim_sid`, length must be less than or equal to `34`")
        if sim_sid is not None and len(sim_sid) < 34:
            raise ValueError("Invalid value for `sim_sid`, length must be greater than or equal to `34`")
        if sim_sid is not None and not re.search(r'^HS[0-9a-fA-F]{32}$', sim_sid):
            raise ValueError("Invalid value for `sim_sid`, must be a follow pattern or equal to `/^HS[0-9a-fA-F]{32}$/`")

        self._sim_sid = sim_sid
