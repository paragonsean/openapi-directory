# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SupersimV1Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friendly_name: str=None, identifiers: List[object]=None, iso_country: str=None, sid: str=None, url: str=None):
        """SupersimV1Network - a model defined in OpenAPI

        :param friendly_name: The friendly_name of this SupersimV1Network.
        :param identifiers: The identifiers of this SupersimV1Network.
        :param iso_country: The iso_country of this SupersimV1Network.
        :param sid: The sid of this SupersimV1Network.
        :param url: The url of this SupersimV1Network.
        """
        self.openapi_types = {
            'friendly_name': str,
            'identifiers': List[object],
            'iso_country': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'friendly_name': 'friendly_name',
            'identifiers': 'identifiers',
            'iso_country': 'iso_country',
            'sid': 'sid',
            'url': 'url'
        }

        self._friendly_name = friendly_name
        self._identifiers = identifiers
        self._iso_country = iso_country
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.network of this SupersimV1Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friendly_name(self):
        """Gets the friendly_name of this SupersimV1Network.

        A human readable identifier of this resource.

        :return: The friendly_name of this SupersimV1Network.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this SupersimV1Network.

        A human readable identifier of this resource.

        :param friendly_name: The friendly_name of this SupersimV1Network.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def identifiers(self):
        """Gets the identifiers of this SupersimV1Network.

        Array of objects identifying the [MCC-MNCs](https://en.wikipedia.org/wiki/Mobile_country_code) that are included in the Network resource.

        :return: The identifiers of this SupersimV1Network.
        :rtype: List[object]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this SupersimV1Network.

        Array of objects identifying the [MCC-MNCs](https://en.wikipedia.org/wiki/Mobile_country_code) that are included in the Network resource.

        :param identifiers: The identifiers of this SupersimV1Network.
        :type identifiers: List[object]
        """

        self._identifiers = identifiers

    @property
    def iso_country(self):
        """Gets the iso_country of this SupersimV1Network.

        The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resource.

        :return: The iso_country of this SupersimV1Network.
        :rtype: str
        """
        return self._iso_country

    @iso_country.setter
    def iso_country(self, iso_country):
        """Sets the iso_country of this SupersimV1Network.

        The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resource.

        :param iso_country: The iso_country of this SupersimV1Network.
        :type iso_country: str
        """

        self._iso_country = iso_country

    @property
    def sid(self):
        """Gets the sid of this SupersimV1Network.

        The unique string that we created to identify the Network resource.

        :return: The sid of this SupersimV1Network.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SupersimV1Network.

        The unique string that we created to identify the Network resource.

        :param sid: The sid of this SupersimV1Network.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HW[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HW[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this SupersimV1Network.

        The absolute URL of the Network resource.

        :return: The url of this SupersimV1Network.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SupersimV1Network.

        The absolute URL of the Network resource.

        :param url: The url of this SupersimV1Network.
        :type url: str
        """

        self._url = url
