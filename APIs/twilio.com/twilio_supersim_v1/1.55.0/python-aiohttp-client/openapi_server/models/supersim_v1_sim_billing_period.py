# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_period_enum_bp_type import BillingPeriodEnumBpType
import re
from openapi_server import util


class SupersimV1SimBillingPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, end_time: datetime=None, period_type: BillingPeriodEnumBpType=None, sid: str=None, sim_sid: str=None, start_time: datetime=None):
        """SupersimV1SimBillingPeriod - a model defined in OpenAPI

        :param account_sid: The account_sid of this SupersimV1SimBillingPeriod.
        :param date_created: The date_created of this SupersimV1SimBillingPeriod.
        :param date_updated: The date_updated of this SupersimV1SimBillingPeriod.
        :param end_time: The end_time of this SupersimV1SimBillingPeriod.
        :param period_type: The period_type of this SupersimV1SimBillingPeriod.
        :param sid: The sid of this SupersimV1SimBillingPeriod.
        :param sim_sid: The sim_sid of this SupersimV1SimBillingPeriod.
        :param start_time: The start_time of this SupersimV1SimBillingPeriod.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'end_time': datetime,
            'period_type': BillingPeriodEnumBpType,
            'sid': str,
            'sim_sid': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'end_time': 'end_time',
            'period_type': 'period_type',
            'sid': 'sid',
            'sim_sid': 'sim_sid',
            'start_time': 'start_time'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._end_time = end_time
        self._period_type = period_type
        self._sid = sid
        self._sim_sid = sim_sid
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupersimV1SimBillingPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The supersim.v1.sim.billing_period of this SupersimV1SimBillingPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SupersimV1SimBillingPeriod.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) the Super SIM belongs to.

        :return: The account_sid of this SupersimV1SimBillingPeriod.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SupersimV1SimBillingPeriod.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) the Super SIM belongs to.

        :param account_sid: The account_sid of this SupersimV1SimBillingPeriod.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this SupersimV1SimBillingPeriod.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this SupersimV1SimBillingPeriod.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SupersimV1SimBillingPeriod.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this SupersimV1SimBillingPeriod.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this SupersimV1SimBillingPeriod.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this SupersimV1SimBillingPeriod.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SupersimV1SimBillingPeriod.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this SupersimV1SimBillingPeriod.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def end_time(self):
        """Gets the end_time of this SupersimV1SimBillingPeriod.

        The end time of the Billing Period specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The end_time of this SupersimV1SimBillingPeriod.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SupersimV1SimBillingPeriod.

        The end time of the Billing Period specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param end_time: The end_time of this SupersimV1SimBillingPeriod.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def period_type(self):
        """Gets the period_type of this SupersimV1SimBillingPeriod.


        :return: The period_type of this SupersimV1SimBillingPeriod.
        :rtype: BillingPeriodEnumBpType
        """
        return self._period_type

    @period_type.setter
    def period_type(self, period_type):
        """Sets the period_type of this SupersimV1SimBillingPeriod.


        :param period_type: The period_type of this SupersimV1SimBillingPeriod.
        :type period_type: BillingPeriodEnumBpType
        """

        self._period_type = period_type

    @property
    def sid(self):
        """Gets the sid of this SupersimV1SimBillingPeriod.

        The SID of the Billing Period.

        :return: The sid of this SupersimV1SimBillingPeriod.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SupersimV1SimBillingPeriod.

        The SID of the Billing Period.

        :param sid: The sid of this SupersimV1SimBillingPeriod.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HB[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HB[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def sim_sid(self):
        """Gets the sim_sid of this SupersimV1SimBillingPeriod.

        The SID of the Super SIM the Billing Period belongs to.

        :return: The sim_sid of this SupersimV1SimBillingPeriod.
        :rtype: str
        """
        return self._sim_sid

    @sim_sid.setter
    def sim_sid(self, sim_sid):
        """Sets the sim_sid of this SupersimV1SimBillingPeriod.

        The SID of the Super SIM the Billing Period belongs to.

        :param sim_sid: The sim_sid of this SupersimV1SimBillingPeriod.
        :type sim_sid: str
        """
        if sim_sid is not None and len(sim_sid) > 34:
            raise ValueError("Invalid value for `sim_sid`, length must be less than or equal to `34`")
        if sim_sid is not None and len(sim_sid) < 34:
            raise ValueError("Invalid value for `sim_sid`, length must be greater than or equal to `34`")
        if sim_sid is not None and not re.search(r'^HS[0-9a-fA-F]{32}$', sim_sid):
            raise ValueError("Invalid value for `sim_sid`, must be a follow pattern or equal to `/^HS[0-9a-fA-F]{32}$/`")

        self._sim_sid = sim_sid

    @property
    def start_time(self):
        """Gets the start_time of this SupersimV1SimBillingPeriod.

        The start time of the Billing Period specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The start_time of this SupersimV1SimBillingPeriod.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SupersimV1SimBillingPeriod.

        The start time of the Billing Period specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param start_time: The start_time of this SupersimV1SimBillingPeriod.
        :type start_time: datetime
        """

        self._start_time = start_time
