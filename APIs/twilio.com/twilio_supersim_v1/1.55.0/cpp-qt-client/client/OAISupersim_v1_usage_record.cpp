/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupersim_v1_usage_record.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupersim_v1_usage_record::OAISupersim_v1_usage_record(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupersim_v1_usage_record::OAISupersim_v1_usage_record() {
    this->initializeModel();
}

OAISupersim_v1_usage_record::~OAISupersim_v1_usage_record() {}

void OAISupersim_v1_usage_record::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_billed_unit_isSet = false;
    m_billed_unit_isValid = false;

    m_data_download_isSet = false;
    m_data_download_isValid = false;

    m_data_total_isSet = false;
    m_data_total_isValid = false;

    m_data_total_billed_isSet = false;
    m_data_total_billed_isValid = false;

    m_data_upload_isSet = false;
    m_data_upload_isValid = false;

    m_fleet_sid_isSet = false;
    m_fleet_sid_isValid = false;

    m_iso_country_isSet = false;
    m_iso_country_isValid = false;

    m_network_sid_isSet = false;
    m_network_sid_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;
}

void OAISupersim_v1_usage_record::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupersim_v1_usage_record::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_billed_unit_isValid = ::OpenAPI::fromJsonValue(m_billed_unit, json[QString("billed_unit")]);
    m_billed_unit_isSet = !json[QString("billed_unit")].isNull() && m_billed_unit_isValid;

    m_data_download_isValid = ::OpenAPI::fromJsonValue(m_data_download, json[QString("data_download")]);
    m_data_download_isSet = !json[QString("data_download")].isNull() && m_data_download_isValid;

    m_data_total_isValid = ::OpenAPI::fromJsonValue(m_data_total, json[QString("data_total")]);
    m_data_total_isSet = !json[QString("data_total")].isNull() && m_data_total_isValid;

    m_data_total_billed_isValid = ::OpenAPI::fromJsonValue(m_data_total_billed, json[QString("data_total_billed")]);
    m_data_total_billed_isSet = !json[QString("data_total_billed")].isNull() && m_data_total_billed_isValid;

    m_data_upload_isValid = ::OpenAPI::fromJsonValue(m_data_upload, json[QString("data_upload")]);
    m_data_upload_isSet = !json[QString("data_upload")].isNull() && m_data_upload_isValid;

    m_fleet_sid_isValid = ::OpenAPI::fromJsonValue(m_fleet_sid, json[QString("fleet_sid")]);
    m_fleet_sid_isSet = !json[QString("fleet_sid")].isNull() && m_fleet_sid_isValid;

    m_iso_country_isValid = ::OpenAPI::fromJsonValue(m_iso_country, json[QString("iso_country")]);
    m_iso_country_isSet = !json[QString("iso_country")].isNull() && m_iso_country_isValid;

    m_network_sid_isValid = ::OpenAPI::fromJsonValue(m_network_sid, json[QString("network_sid")]);
    m_network_sid_isSet = !json[QString("network_sid")].isNull() && m_network_sid_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;
}

QString OAISupersim_v1_usage_record::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupersim_v1_usage_record::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_billed_unit_isSet) {
        obj.insert(QString("billed_unit"), ::OpenAPI::toJsonValue(m_billed_unit));
    }
    if (m_data_download_isSet) {
        obj.insert(QString("data_download"), ::OpenAPI::toJsonValue(m_data_download));
    }
    if (m_data_total_isSet) {
        obj.insert(QString("data_total"), ::OpenAPI::toJsonValue(m_data_total));
    }
    if (m_data_total_billed_isSet) {
        obj.insert(QString("data_total_billed"), ::OpenAPI::toJsonValue(m_data_total_billed));
    }
    if (m_data_upload_isSet) {
        obj.insert(QString("data_upload"), ::OpenAPI::toJsonValue(m_data_upload));
    }
    if (m_fleet_sid_isSet) {
        obj.insert(QString("fleet_sid"), ::OpenAPI::toJsonValue(m_fleet_sid));
    }
    if (m_iso_country_isSet) {
        obj.insert(QString("iso_country"), ::OpenAPI::toJsonValue(m_iso_country));
    }
    if (m_network_sid_isSet) {
        obj.insert(QString("network_sid"), ::OpenAPI::toJsonValue(m_network_sid));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    return obj;
}

QString OAISupersim_v1_usage_record::getAccountSid() const {
    return m_account_sid;
}
void OAISupersim_v1_usage_record::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAISupersim_v1_usage_record::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAISupersim_v1_usage_record::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAISupersim_v1_usage_record::getBilledUnit() const {
    return m_billed_unit;
}
void OAISupersim_v1_usage_record::setBilledUnit(const QString &billed_unit) {
    m_billed_unit = billed_unit;
    m_billed_unit_isSet = true;
}

bool OAISupersim_v1_usage_record::is_billed_unit_Set() const{
    return m_billed_unit_isSet;
}

bool OAISupersim_v1_usage_record::is_billed_unit_Valid() const{
    return m_billed_unit_isValid;
}

qint64 OAISupersim_v1_usage_record::getDataDownload() const {
    return m_data_download;
}
void OAISupersim_v1_usage_record::setDataDownload(const qint64 &data_download) {
    m_data_download = data_download;
    m_data_download_isSet = true;
}

bool OAISupersim_v1_usage_record::is_data_download_Set() const{
    return m_data_download_isSet;
}

bool OAISupersim_v1_usage_record::is_data_download_Valid() const{
    return m_data_download_isValid;
}

qint64 OAISupersim_v1_usage_record::getDataTotal() const {
    return m_data_total;
}
void OAISupersim_v1_usage_record::setDataTotal(const qint64 &data_total) {
    m_data_total = data_total;
    m_data_total_isSet = true;
}

bool OAISupersim_v1_usage_record::is_data_total_Set() const{
    return m_data_total_isSet;
}

bool OAISupersim_v1_usage_record::is_data_total_Valid() const{
    return m_data_total_isValid;
}

double OAISupersim_v1_usage_record::getDataTotalBilled() const {
    return m_data_total_billed;
}
void OAISupersim_v1_usage_record::setDataTotalBilled(const double &data_total_billed) {
    m_data_total_billed = data_total_billed;
    m_data_total_billed_isSet = true;
}

bool OAISupersim_v1_usage_record::is_data_total_billed_Set() const{
    return m_data_total_billed_isSet;
}

bool OAISupersim_v1_usage_record::is_data_total_billed_Valid() const{
    return m_data_total_billed_isValid;
}

qint64 OAISupersim_v1_usage_record::getDataUpload() const {
    return m_data_upload;
}
void OAISupersim_v1_usage_record::setDataUpload(const qint64 &data_upload) {
    m_data_upload = data_upload;
    m_data_upload_isSet = true;
}

bool OAISupersim_v1_usage_record::is_data_upload_Set() const{
    return m_data_upload_isSet;
}

bool OAISupersim_v1_usage_record::is_data_upload_Valid() const{
    return m_data_upload_isValid;
}

QString OAISupersim_v1_usage_record::getFleetSid() const {
    return m_fleet_sid;
}
void OAISupersim_v1_usage_record::setFleetSid(const QString &fleet_sid) {
    m_fleet_sid = fleet_sid;
    m_fleet_sid_isSet = true;
}

bool OAISupersim_v1_usage_record::is_fleet_sid_Set() const{
    return m_fleet_sid_isSet;
}

bool OAISupersim_v1_usage_record::is_fleet_sid_Valid() const{
    return m_fleet_sid_isValid;
}

QString OAISupersim_v1_usage_record::getIsoCountry() const {
    return m_iso_country;
}
void OAISupersim_v1_usage_record::setIsoCountry(const QString &iso_country) {
    m_iso_country = iso_country;
    m_iso_country_isSet = true;
}

bool OAISupersim_v1_usage_record::is_iso_country_Set() const{
    return m_iso_country_isSet;
}

bool OAISupersim_v1_usage_record::is_iso_country_Valid() const{
    return m_iso_country_isValid;
}

QString OAISupersim_v1_usage_record::getNetworkSid() const {
    return m_network_sid;
}
void OAISupersim_v1_usage_record::setNetworkSid(const QString &network_sid) {
    m_network_sid = network_sid;
    m_network_sid_isSet = true;
}

bool OAISupersim_v1_usage_record::is_network_sid_Set() const{
    return m_network_sid_isSet;
}

bool OAISupersim_v1_usage_record::is_network_sid_Valid() const{
    return m_network_sid_isValid;
}

QJsonValue OAISupersim_v1_usage_record::getPeriod() const {
    return m_period;
}
void OAISupersim_v1_usage_record::setPeriod(const QJsonValue &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAISupersim_v1_usage_record::is_period_Set() const{
    return m_period_isSet;
}

bool OAISupersim_v1_usage_record::is_period_Valid() const{
    return m_period_isValid;
}

QString OAISupersim_v1_usage_record::getSimSid() const {
    return m_sim_sid;
}
void OAISupersim_v1_usage_record::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAISupersim_v1_usage_record::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAISupersim_v1_usage_record::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

bool OAISupersim_v1_usage_record::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_total_billed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupersim_v1_usage_record::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
