/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupersim_v1_ip_command.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupersim_v1_ip_command::OAISupersim_v1_ip_command(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupersim_v1_ip_command::OAISupersim_v1_ip_command() {
    this->initializeModel();
}

OAISupersim_v1_ip_command::~OAISupersim_v1_ip_command() {}

void OAISupersim_v1_ip_command::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_device_ip_isSet = false;
    m_device_ip_isValid = false;

    m_device_port_isSet = false;
    m_device_port_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_payload_type_isSet = false;
    m_payload_type_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_sim_iccid_isSet = false;
    m_sim_iccid_isValid = false;

    m_sim_sid_isSet = false;
    m_sim_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISupersim_v1_ip_command::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupersim_v1_ip_command::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_device_ip_isValid = ::OpenAPI::fromJsonValue(m_device_ip, json[QString("device_ip")]);
    m_device_ip_isSet = !json[QString("device_ip")].isNull() && m_device_ip_isValid;

    m_device_port_isValid = ::OpenAPI::fromJsonValue(m_device_port, json[QString("device_port")]);
    m_device_port_isSet = !json[QString("device_port")].isNull() && m_device_port_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_payload_type_isValid = ::OpenAPI::fromJsonValue(m_payload_type, json[QString("payload_type")]);
    m_payload_type_isSet = !json[QString("payload_type")].isNull() && m_payload_type_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_sim_iccid_isValid = ::OpenAPI::fromJsonValue(m_sim_iccid, json[QString("sim_iccid")]);
    m_sim_iccid_isSet = !json[QString("sim_iccid")].isNull() && m_sim_iccid_isValid;

    m_sim_sid_isValid = ::OpenAPI::fromJsonValue(m_sim_sid, json[QString("sim_sid")]);
    m_sim_sid_isSet = !json[QString("sim_sid")].isNull() && m_sim_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISupersim_v1_ip_command::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupersim_v1_ip_command::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_device_ip_isSet) {
        obj.insert(QString("device_ip"), ::OpenAPI::toJsonValue(m_device_ip));
    }
    if (m_device_port_isSet) {
        obj.insert(QString("device_port"), ::OpenAPI::toJsonValue(m_device_port));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_payload_type.isSet()) {
        obj.insert(QString("payload_type"), ::OpenAPI::toJsonValue(m_payload_type));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_sim_iccid_isSet) {
        obj.insert(QString("sim_iccid"), ::OpenAPI::toJsonValue(m_sim_iccid));
    }
    if (m_sim_sid_isSet) {
        obj.insert(QString("sim_sid"), ::OpenAPI::toJsonValue(m_sim_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISupersim_v1_ip_command::getAccountSid() const {
    return m_account_sid;
}
void OAISupersim_v1_ip_command::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAISupersim_v1_ip_command::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAISupersim_v1_ip_command::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAISupersim_v1_ip_command::getDateCreated() const {
    return m_date_created;
}
void OAISupersim_v1_ip_command::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISupersim_v1_ip_command::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISupersim_v1_ip_command::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAISupersim_v1_ip_command::getDateUpdated() const {
    return m_date_updated;
}
void OAISupersim_v1_ip_command::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAISupersim_v1_ip_command::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAISupersim_v1_ip_command::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAISupersim_v1_ip_command::getDeviceIp() const {
    return m_device_ip;
}
void OAISupersim_v1_ip_command::setDeviceIp(const QString &device_ip) {
    m_device_ip = device_ip;
    m_device_ip_isSet = true;
}

bool OAISupersim_v1_ip_command::is_device_ip_Set() const{
    return m_device_ip_isSet;
}

bool OAISupersim_v1_ip_command::is_device_ip_Valid() const{
    return m_device_ip_isValid;
}

qint32 OAISupersim_v1_ip_command::getDevicePort() const {
    return m_device_port;
}
void OAISupersim_v1_ip_command::setDevicePort(const qint32 &device_port) {
    m_device_port = device_port;
    m_device_port_isSet = true;
}

bool OAISupersim_v1_ip_command::is_device_port_Set() const{
    return m_device_port_isSet;
}

bool OAISupersim_v1_ip_command::is_device_port_Valid() const{
    return m_device_port_isValid;
}

OAIIp_command_enum_direction OAISupersim_v1_ip_command::getDirection() const {
    return m_direction;
}
void OAISupersim_v1_ip_command::setDirection(const OAIIp_command_enum_direction &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAISupersim_v1_ip_command::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAISupersim_v1_ip_command::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAISupersim_v1_ip_command::getPayload() const {
    return m_payload;
}
void OAISupersim_v1_ip_command::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAISupersim_v1_ip_command::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAISupersim_v1_ip_command::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIIp_command_enum_payload_type OAISupersim_v1_ip_command::getPayloadType() const {
    return m_payload_type;
}
void OAISupersim_v1_ip_command::setPayloadType(const OAIIp_command_enum_payload_type &payload_type) {
    m_payload_type = payload_type;
    m_payload_type_isSet = true;
}

bool OAISupersim_v1_ip_command::is_payload_type_Set() const{
    return m_payload_type_isSet;
}

bool OAISupersim_v1_ip_command::is_payload_type_Valid() const{
    return m_payload_type_isValid;
}

QString OAISupersim_v1_ip_command::getSid() const {
    return m_sid;
}
void OAISupersim_v1_ip_command::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAISupersim_v1_ip_command::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAISupersim_v1_ip_command::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAISupersim_v1_ip_command::getSimIccid() const {
    return m_sim_iccid;
}
void OAISupersim_v1_ip_command::setSimIccid(const QString &sim_iccid) {
    m_sim_iccid = sim_iccid;
    m_sim_iccid_isSet = true;
}

bool OAISupersim_v1_ip_command::is_sim_iccid_Set() const{
    return m_sim_iccid_isSet;
}

bool OAISupersim_v1_ip_command::is_sim_iccid_Valid() const{
    return m_sim_iccid_isValid;
}

QString OAISupersim_v1_ip_command::getSimSid() const {
    return m_sim_sid;
}
void OAISupersim_v1_ip_command::setSimSid(const QString &sim_sid) {
    m_sim_sid = sim_sid;
    m_sim_sid_isSet = true;
}

bool OAISupersim_v1_ip_command::is_sim_sid_Set() const{
    return m_sim_sid_isSet;
}

bool OAISupersim_v1_ip_command::is_sim_sid_Valid() const{
    return m_sim_sid_isValid;
}

OAIIp_command_enum_status OAISupersim_v1_ip_command::getStatus() const {
    return m_status;
}
void OAISupersim_v1_ip_command::setStatus(const OAIIp_command_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISupersim_v1_ip_command::is_status_Set() const{
    return m_status_isSet;
}

bool OAISupersim_v1_ip_command::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISupersim_v1_ip_command::getUrl() const {
    return m_url;
}
void OAISupersim_v1_ip_command::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISupersim_v1_ip_command::is_url_Set() const{
    return m_url_isSet;
}

bool OAISupersim_v1_ip_command::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISupersim_v1_ip_command::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_iccid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupersim_v1_ip_command::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
