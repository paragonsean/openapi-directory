/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISupersimV1SimApi_H
#define OAI_OAISupersimV1SimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSimResponse.h"
#include "OAISim_enum_status.h"
#include "OAISim_enum_status_update.h"
#include "OAISupersim_v1_sim.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISupersimV1SimApi : public QObject {
    Q_OBJECT

public:
    OAISupersimV1SimApi(const int timeOut = 0);
    ~OAISupersimV1SimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  iccid QString [required]
    * @param[in]  registration_code QString [required]
    */
    virtual void createSim(const QString &iccid, const QString &registration_code);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchSim(const QString &sid);

    /**
    * @param[in]  status OAISim_enum_status [optional]
    * @param[in]  fleet QString [optional]
    * @param[in]  iccid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSim(const ::OpenAPI::OptionalParam<OAISim_enum_status> &status = ::OpenAPI::OptionalParam<OAISim_enum_status>(), const ::OpenAPI::OptionalParam<QString> &fleet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iccid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  account_sid QString [optional]
    * @param[in]  callback_method QString [optional]
    * @param[in]  callback_url QString [optional]
    * @param[in]  fleet QString [optional]
    * @param[in]  status OAISim_enum_status_update [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateSim(const QString &sid, const ::OpenAPI::OptionalParam<QString> &account_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fleet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISim_enum_status_update> &status = ::OpenAPI::OptionalParam<OAISim_enum_status_update>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSimCallback(OAIHttpRequestWorker *worker);
    void fetchSimCallback(OAIHttpRequestWorker *worker);
    void listSimCallback(OAIHttpRequestWorker *worker);
    void updateSimCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSimSignal(OAISupersim_v1_sim summary);
    void fetchSimSignal(OAISupersim_v1_sim summary);
    void listSimSignal(OAIListSimResponse summary);
    void updateSimSignal(OAISupersim_v1_sim summary);


    void createSimSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_sim summary);
    void fetchSimSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_sim summary);
    void listSimSignalFull(OAIHttpRequestWorker *worker, OAIListSimResponse summary);
    void updateSimSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_sim summary);

    Q_DECL_DEPRECATED_X("Use createSimSignalError() instead")
    void createSimSignalE(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSimSignalError(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSimSignalError() instead")
    void fetchSimSignalE(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSimSignalError(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSimSignalError() instead")
    void listSimSignalE(OAIListSimResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSimSignalError(OAIListSimResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSimSignalError() instead")
    void updateSimSignalE(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSimSignalError(OAISupersim_v1_sim summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSimSignalErrorFull() instead")
    void createSimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSimSignalErrorFull() instead")
    void fetchSimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSimSignalErrorFull() instead")
    void listSimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSimSignalErrorFull() instead")
    void updateSimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
