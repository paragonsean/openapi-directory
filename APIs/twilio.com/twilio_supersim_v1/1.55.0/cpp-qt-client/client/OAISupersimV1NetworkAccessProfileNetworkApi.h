/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISupersimV1NetworkAccessProfileNetworkApi_H
#define OAI_OAISupersimV1NetworkAccessProfileNetworkApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListNetworkAccessProfileNetworkResponse.h"
#include "OAISupersim_v1_network_access_profile_network_access_profile_network.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISupersimV1NetworkAccessProfileNetworkApi : public QObject {
    Q_OBJECT

public:
    OAISupersimV1NetworkAccessProfileNetworkApi(const int timeOut = 0);
    ~OAISupersimV1NetworkAccessProfileNetworkApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  network_access_profile_sid QString [required]
    * @param[in]  network QString [required]
    */
    virtual void createNetworkAccessProfileNetwork(const QString &network_access_profile_sid, const QString &network);

    /**
    * @param[in]  network_access_profile_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteNetworkAccessProfileNetwork(const QString &network_access_profile_sid, const QString &sid);

    /**
    * @param[in]  network_access_profile_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchNetworkAccessProfileNetwork(const QString &network_access_profile_sid, const QString &sid);

    /**
    * @param[in]  network_access_profile_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listNetworkAccessProfileNetwork(const QString &network_access_profile_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkAccessProfileNetworkCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkAccessProfileNetworkCallback(OAIHttpRequestWorker *worker);
    void fetchNetworkAccessProfileNetworkCallback(OAIHttpRequestWorker *worker);
    void listNetworkAccessProfileNetworkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkAccessProfileNetworkSignal(OAISupersim_v1_network_access_profile_network_access_profile_network summary);
    void deleteNetworkAccessProfileNetworkSignal();
    void fetchNetworkAccessProfileNetworkSignal(OAISupersim_v1_network_access_profile_network_access_profile_network summary);
    void listNetworkAccessProfileNetworkSignal(OAIListNetworkAccessProfileNetworkResponse summary);


    void createNetworkAccessProfileNetworkSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_network_access_profile_network_access_profile_network summary);
    void deleteNetworkAccessProfileNetworkSignalFull(OAIHttpRequestWorker *worker);
    void fetchNetworkAccessProfileNetworkSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_network_access_profile_network_access_profile_network summary);
    void listNetworkAccessProfileNetworkSignalFull(OAIHttpRequestWorker *worker, OAIListNetworkAccessProfileNetworkResponse summary);

    Q_DECL_DEPRECATED_X("Use createNetworkAccessProfileNetworkSignalError() instead")
    void createNetworkAccessProfileNetworkSignalE(OAISupersim_v1_network_access_profile_network_access_profile_network summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAccessProfileNetworkSignalError(OAISupersim_v1_network_access_profile_network_access_profile_network summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAccessProfileNetworkSignalError() instead")
    void deleteNetworkAccessProfileNetworkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAccessProfileNetworkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchNetworkAccessProfileNetworkSignalError() instead")
    void fetchNetworkAccessProfileNetworkSignalE(OAISupersim_v1_network_access_profile_network_access_profile_network summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchNetworkAccessProfileNetworkSignalError(OAISupersim_v1_network_access_profile_network_access_profile_network summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkAccessProfileNetworkSignalError() instead")
    void listNetworkAccessProfileNetworkSignalE(OAIListNetworkAccessProfileNetworkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkAccessProfileNetworkSignalError(OAIListNetworkAccessProfileNetworkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkAccessProfileNetworkSignalErrorFull() instead")
    void createNetworkAccessProfileNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkAccessProfileNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkAccessProfileNetworkSignalErrorFull() instead")
    void deleteNetworkAccessProfileNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkAccessProfileNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchNetworkAccessProfileNetworkSignalErrorFull() instead")
    void fetchNetworkAccessProfileNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchNetworkAccessProfileNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkAccessProfileNetworkSignalErrorFull() instead")
    void listNetworkAccessProfileNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkAccessProfileNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
