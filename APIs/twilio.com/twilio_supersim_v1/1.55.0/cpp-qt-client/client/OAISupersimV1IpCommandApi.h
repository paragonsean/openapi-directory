/**
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISupersimV1IpCommandApi_H
#define OAI_OAISupersimV1IpCommandApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIp_command_enum_direction.h"
#include "OAIIp_command_enum_payload_type.h"
#include "OAIIp_command_enum_status.h"
#include "OAIListIpCommandResponse.h"
#include "OAISupersim_v1_ip_command.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISupersimV1IpCommandApi : public QObject {
    Q_OBJECT

public:
    OAISupersimV1IpCommandApi(const int timeOut = 0);
    ~OAISupersimV1IpCommandApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_port qint32 [required]
    * @param[in]  payload QString [required]
    * @param[in]  sim QString [required]
    * @param[in]  callback_method QString [optional]
    * @param[in]  callback_url QString [optional]
    * @param[in]  payload_type OAIIp_command_enum_payload_type [optional]
    */
    virtual void createIpCommand(const qint32 &device_port, const QString &payload, const QString &sim, const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIp_command_enum_payload_type> &payload_type = ::OpenAPI::OptionalParam<OAIIp_command_enum_payload_type>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchIpCommand(const QString &sid);

    /**
    * @param[in]  sim QString [optional]
    * @param[in]  sim_iccid QString [optional]
    * @param[in]  status OAIIp_command_enum_status [optional]
    * @param[in]  direction OAIIp_command_enum_direction [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listIpCommand(const ::OpenAPI::OptionalParam<QString> &sim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sim_iccid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIp_command_enum_status> &status = ::OpenAPI::OptionalParam<OAIIp_command_enum_status>(), const ::OpenAPI::OptionalParam<OAIIp_command_enum_direction> &direction = ::OpenAPI::OptionalParam<OAIIp_command_enum_direction>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIpCommandCallback(OAIHttpRequestWorker *worker);
    void fetchIpCommandCallback(OAIHttpRequestWorker *worker);
    void listIpCommandCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIpCommandSignal(OAISupersim_v1_ip_command summary);
    void fetchIpCommandSignal(OAISupersim_v1_ip_command summary);
    void listIpCommandSignal(OAIListIpCommandResponse summary);


    void createIpCommandSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_ip_command summary);
    void fetchIpCommandSignalFull(OAIHttpRequestWorker *worker, OAISupersim_v1_ip_command summary);
    void listIpCommandSignalFull(OAIHttpRequestWorker *worker, OAIListIpCommandResponse summary);

    Q_DECL_DEPRECATED_X("Use createIpCommandSignalError() instead")
    void createIpCommandSignalE(OAISupersim_v1_ip_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIpCommandSignalError(OAISupersim_v1_ip_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchIpCommandSignalError() instead")
    void fetchIpCommandSignalE(OAISupersim_v1_ip_command summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchIpCommandSignalError(OAISupersim_v1_ip_command summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIpCommandSignalError() instead")
    void listIpCommandSignalE(OAIListIpCommandResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIpCommandSignalError(OAIListIpCommandResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIpCommandSignalErrorFull() instead")
    void createIpCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIpCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchIpCommandSignalErrorFull() instead")
    void fetchIpCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchIpCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIpCommandSignalErrorFull() instead")
    void listIpCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIpCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
