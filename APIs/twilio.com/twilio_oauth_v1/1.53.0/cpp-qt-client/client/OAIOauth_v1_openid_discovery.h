/**
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOauth_v1_openid_discovery.h
 *
 * 
 */

#ifndef OAIOauth_v1_openid_discovery_H
#define OAIOauth_v1_openid_discovery_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOauth_v1_openid_discovery : public OAIObject {
public:
    OAIOauth_v1_openid_discovery();
    OAIOauth_v1_openid_discovery(QString json);
    ~OAIOauth_v1_openid_discovery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationEndpoint() const;
    void setAuthorizationEndpoint(const QString &authorization_endpoint);
    bool is_authorization_endpoint_Set() const;
    bool is_authorization_endpoint_Valid() const;

    QList<QString> getClaimsSupported() const;
    void setClaimsSupported(const QList<QString> &claims_supported);
    bool is_claims_supported_Set() const;
    bool is_claims_supported_Valid() const;

    QString getDeviceAuthorizationEndpoint() const;
    void setDeviceAuthorizationEndpoint(const QString &device_authorization_endpoint);
    bool is_device_authorization_endpoint_Set() const;
    bool is_device_authorization_endpoint_Valid() const;

    QList<QString> getIdTokenSigningAlgValuesSupported() const;
    void setIdTokenSigningAlgValuesSupported(const QList<QString> &id_token_signing_alg_values_supported);
    bool is_id_token_signing_alg_values_supported_Set() const;
    bool is_id_token_signing_alg_values_supported_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getJwkUri() const;
    void setJwkUri(const QString &jwk_uri);
    bool is_jwk_uri_Set() const;
    bool is_jwk_uri_Valid() const;

    QList<QString> getResponseTypeSupported() const;
    void setResponseTypeSupported(const QList<QString> &response_type_supported);
    bool is_response_type_supported_Set() const;
    bool is_response_type_supported_Valid() const;

    QString getRevocationEndpoint() const;
    void setRevocationEndpoint(const QString &revocation_endpoint);
    bool is_revocation_endpoint_Set() const;
    bool is_revocation_endpoint_Valid() const;

    QList<QString> getScopesSupported() const;
    void setScopesSupported(const QList<QString> &scopes_supported);
    bool is_scopes_supported_Set() const;
    bool is_scopes_supported_Valid() const;

    QList<QString> getSubjectTypeSupported() const;
    void setSubjectTypeSupported(const QList<QString> &subject_type_supported);
    bool is_subject_type_supported_Set() const;
    bool is_subject_type_supported_Valid() const;

    QString getTokenEndpoint() const;
    void setTokenEndpoint(const QString &token_endpoint);
    bool is_token_endpoint_Set() const;
    bool is_token_endpoint_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUserinfoEndpoint() const;
    void setUserinfoEndpoint(const QString &userinfo_endpoint);
    bool is_userinfo_endpoint_Set() const;
    bool is_userinfo_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorization_endpoint;
    bool m_authorization_endpoint_isSet;
    bool m_authorization_endpoint_isValid;

    QList<QString> m_claims_supported;
    bool m_claims_supported_isSet;
    bool m_claims_supported_isValid;

    QString m_device_authorization_endpoint;
    bool m_device_authorization_endpoint_isSet;
    bool m_device_authorization_endpoint_isValid;

    QList<QString> m_id_token_signing_alg_values_supported;
    bool m_id_token_signing_alg_values_supported_isSet;
    bool m_id_token_signing_alg_values_supported_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_jwk_uri;
    bool m_jwk_uri_isSet;
    bool m_jwk_uri_isValid;

    QList<QString> m_response_type_supported;
    bool m_response_type_supported_isSet;
    bool m_response_type_supported_isValid;

    QString m_revocation_endpoint;
    bool m_revocation_endpoint_isSet;
    bool m_revocation_endpoint_isValid;

    QList<QString> m_scopes_supported;
    bool m_scopes_supported_isSet;
    bool m_scopes_supported_isValid;

    QList<QString> m_subject_type_supported;
    bool m_subject_type_supported_isSet;
    bool m_subject_type_supported_isValid;

    QString m_token_endpoint;
    bool m_token_endpoint_isSet;
    bool m_token_endpoint_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_userinfo_endpoint;
    bool m_userinfo_endpoint_isSet;
    bool m_userinfo_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOauth_v1_openid_discovery)

#endif // OAIOauth_v1_openid_discovery_H
