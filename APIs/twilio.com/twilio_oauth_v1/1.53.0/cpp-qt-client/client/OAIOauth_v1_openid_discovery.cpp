/**
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth_v1_openid_discovery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth_v1_openid_discovery::OAIOauth_v1_openid_discovery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth_v1_openid_discovery::OAIOauth_v1_openid_discovery() {
    this->initializeModel();
}

OAIOauth_v1_openid_discovery::~OAIOauth_v1_openid_discovery() {}

void OAIOauth_v1_openid_discovery::initializeModel() {

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_claims_supported_isSet = false;
    m_claims_supported_isValid = false;

    m_device_authorization_endpoint_isSet = false;
    m_device_authorization_endpoint_isValid = false;

    m_id_token_signing_alg_values_supported_isSet = false;
    m_id_token_signing_alg_values_supported_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_jwk_uri_isSet = false;
    m_jwk_uri_isValid = false;

    m_response_type_supported_isSet = false;
    m_response_type_supported_isValid = false;

    m_revocation_endpoint_isSet = false;
    m_revocation_endpoint_isValid = false;

    m_scopes_supported_isSet = false;
    m_scopes_supported_isValid = false;

    m_subject_type_supported_isSet = false;
    m_subject_type_supported_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_userinfo_endpoint_isSet = false;
    m_userinfo_endpoint_isValid = false;
}

void OAIOauth_v1_openid_discovery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth_v1_openid_discovery::fromJsonObject(QJsonObject json) {

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("authorization_endpoint")]);
    m_authorization_endpoint_isSet = !json[QString("authorization_endpoint")].isNull() && m_authorization_endpoint_isValid;

    m_claims_supported_isValid = ::OpenAPI::fromJsonValue(m_claims_supported, json[QString("claims_supported")]);
    m_claims_supported_isSet = !json[QString("claims_supported")].isNull() && m_claims_supported_isValid;

    m_device_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_device_authorization_endpoint, json[QString("device_authorization_endpoint")]);
    m_device_authorization_endpoint_isSet = !json[QString("device_authorization_endpoint")].isNull() && m_device_authorization_endpoint_isValid;

    m_id_token_signing_alg_values_supported_isValid = ::OpenAPI::fromJsonValue(m_id_token_signing_alg_values_supported, json[QString("id_token_signing_alg_values_supported")]);
    m_id_token_signing_alg_values_supported_isSet = !json[QString("id_token_signing_alg_values_supported")].isNull() && m_id_token_signing_alg_values_supported_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_jwk_uri_isValid = ::OpenAPI::fromJsonValue(m_jwk_uri, json[QString("jwk_uri")]);
    m_jwk_uri_isSet = !json[QString("jwk_uri")].isNull() && m_jwk_uri_isValid;

    m_response_type_supported_isValid = ::OpenAPI::fromJsonValue(m_response_type_supported, json[QString("response_type_supported")]);
    m_response_type_supported_isSet = !json[QString("response_type_supported")].isNull() && m_response_type_supported_isValid;

    m_revocation_endpoint_isValid = ::OpenAPI::fromJsonValue(m_revocation_endpoint, json[QString("revocation_endpoint")]);
    m_revocation_endpoint_isSet = !json[QString("revocation_endpoint")].isNull() && m_revocation_endpoint_isValid;

    m_scopes_supported_isValid = ::OpenAPI::fromJsonValue(m_scopes_supported, json[QString("scopes_supported")]);
    m_scopes_supported_isSet = !json[QString("scopes_supported")].isNull() && m_scopes_supported_isValid;

    m_subject_type_supported_isValid = ::OpenAPI::fromJsonValue(m_subject_type_supported, json[QString("subject_type_supported")]);
    m_subject_type_supported_isSet = !json[QString("subject_type_supported")].isNull() && m_subject_type_supported_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("token_endpoint")]);
    m_token_endpoint_isSet = !json[QString("token_endpoint")].isNull() && m_token_endpoint_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_userinfo_endpoint_isValid = ::OpenAPI::fromJsonValue(m_userinfo_endpoint, json[QString("userinfo_endpoint")]);
    m_userinfo_endpoint_isSet = !json[QString("userinfo_endpoint")].isNull() && m_userinfo_endpoint_isValid;
}

QString OAIOauth_v1_openid_discovery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth_v1_openid_discovery::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("authorization_endpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_claims_supported.size() > 0) {
        obj.insert(QString("claims_supported"), ::OpenAPI::toJsonValue(m_claims_supported));
    }
    if (m_device_authorization_endpoint_isSet) {
        obj.insert(QString("device_authorization_endpoint"), ::OpenAPI::toJsonValue(m_device_authorization_endpoint));
    }
    if (m_id_token_signing_alg_values_supported.size() > 0) {
        obj.insert(QString("id_token_signing_alg_values_supported"), ::OpenAPI::toJsonValue(m_id_token_signing_alg_values_supported));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_jwk_uri_isSet) {
        obj.insert(QString("jwk_uri"), ::OpenAPI::toJsonValue(m_jwk_uri));
    }
    if (m_response_type_supported.size() > 0) {
        obj.insert(QString("response_type_supported"), ::OpenAPI::toJsonValue(m_response_type_supported));
    }
    if (m_revocation_endpoint_isSet) {
        obj.insert(QString("revocation_endpoint"), ::OpenAPI::toJsonValue(m_revocation_endpoint));
    }
    if (m_scopes_supported.size() > 0) {
        obj.insert(QString("scopes_supported"), ::OpenAPI::toJsonValue(m_scopes_supported));
    }
    if (m_subject_type_supported.size() > 0) {
        obj.insert(QString("subject_type_supported"), ::OpenAPI::toJsonValue(m_subject_type_supported));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("token_endpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_userinfo_endpoint_isSet) {
        obj.insert(QString("userinfo_endpoint"), ::OpenAPI::toJsonValue(m_userinfo_endpoint));
    }
    return obj;
}

QString OAIOauth_v1_openid_discovery::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIOauth_v1_openid_discovery::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIOauth_v1_openid_discovery::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QList<QString> OAIOauth_v1_openid_discovery::getClaimsSupported() const {
    return m_claims_supported;
}
void OAIOauth_v1_openid_discovery::setClaimsSupported(const QList<QString> &claims_supported) {
    m_claims_supported = claims_supported;
    m_claims_supported_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_claims_supported_Set() const{
    return m_claims_supported_isSet;
}

bool OAIOauth_v1_openid_discovery::is_claims_supported_Valid() const{
    return m_claims_supported_isValid;
}

QString OAIOauth_v1_openid_discovery::getDeviceAuthorizationEndpoint() const {
    return m_device_authorization_endpoint;
}
void OAIOauth_v1_openid_discovery::setDeviceAuthorizationEndpoint(const QString &device_authorization_endpoint) {
    m_device_authorization_endpoint = device_authorization_endpoint;
    m_device_authorization_endpoint_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_device_authorization_endpoint_Set() const{
    return m_device_authorization_endpoint_isSet;
}

bool OAIOauth_v1_openid_discovery::is_device_authorization_endpoint_Valid() const{
    return m_device_authorization_endpoint_isValid;
}

QList<QString> OAIOauth_v1_openid_discovery::getIdTokenSigningAlgValuesSupported() const {
    return m_id_token_signing_alg_values_supported;
}
void OAIOauth_v1_openid_discovery::setIdTokenSigningAlgValuesSupported(const QList<QString> &id_token_signing_alg_values_supported) {
    m_id_token_signing_alg_values_supported = id_token_signing_alg_values_supported;
    m_id_token_signing_alg_values_supported_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_id_token_signing_alg_values_supported_Set() const{
    return m_id_token_signing_alg_values_supported_isSet;
}

bool OAIOauth_v1_openid_discovery::is_id_token_signing_alg_values_supported_Valid() const{
    return m_id_token_signing_alg_values_supported_isValid;
}

QString OAIOauth_v1_openid_discovery::getIssuer() const {
    return m_issuer;
}
void OAIOauth_v1_openid_discovery::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIOauth_v1_openid_discovery::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIOauth_v1_openid_discovery::getJwkUri() const {
    return m_jwk_uri;
}
void OAIOauth_v1_openid_discovery::setJwkUri(const QString &jwk_uri) {
    m_jwk_uri = jwk_uri;
    m_jwk_uri_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_jwk_uri_Set() const{
    return m_jwk_uri_isSet;
}

bool OAIOauth_v1_openid_discovery::is_jwk_uri_Valid() const{
    return m_jwk_uri_isValid;
}

QList<QString> OAIOauth_v1_openid_discovery::getResponseTypeSupported() const {
    return m_response_type_supported;
}
void OAIOauth_v1_openid_discovery::setResponseTypeSupported(const QList<QString> &response_type_supported) {
    m_response_type_supported = response_type_supported;
    m_response_type_supported_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_response_type_supported_Set() const{
    return m_response_type_supported_isSet;
}

bool OAIOauth_v1_openid_discovery::is_response_type_supported_Valid() const{
    return m_response_type_supported_isValid;
}

QString OAIOauth_v1_openid_discovery::getRevocationEndpoint() const {
    return m_revocation_endpoint;
}
void OAIOauth_v1_openid_discovery::setRevocationEndpoint(const QString &revocation_endpoint) {
    m_revocation_endpoint = revocation_endpoint;
    m_revocation_endpoint_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_revocation_endpoint_Set() const{
    return m_revocation_endpoint_isSet;
}

bool OAIOauth_v1_openid_discovery::is_revocation_endpoint_Valid() const{
    return m_revocation_endpoint_isValid;
}

QList<QString> OAIOauth_v1_openid_discovery::getScopesSupported() const {
    return m_scopes_supported;
}
void OAIOauth_v1_openid_discovery::setScopesSupported(const QList<QString> &scopes_supported) {
    m_scopes_supported = scopes_supported;
    m_scopes_supported_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_scopes_supported_Set() const{
    return m_scopes_supported_isSet;
}

bool OAIOauth_v1_openid_discovery::is_scopes_supported_Valid() const{
    return m_scopes_supported_isValid;
}

QList<QString> OAIOauth_v1_openid_discovery::getSubjectTypeSupported() const {
    return m_subject_type_supported;
}
void OAIOauth_v1_openid_discovery::setSubjectTypeSupported(const QList<QString> &subject_type_supported) {
    m_subject_type_supported = subject_type_supported;
    m_subject_type_supported_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_subject_type_supported_Set() const{
    return m_subject_type_supported_isSet;
}

bool OAIOauth_v1_openid_discovery::is_subject_type_supported_Valid() const{
    return m_subject_type_supported_isValid;
}

QString OAIOauth_v1_openid_discovery::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIOauth_v1_openid_discovery::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIOauth_v1_openid_discovery::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

QString OAIOauth_v1_openid_discovery::getUrl() const {
    return m_url;
}
void OAIOauth_v1_openid_discovery::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOauth_v1_openid_discovery::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIOauth_v1_openid_discovery::getUserinfoEndpoint() const {
    return m_userinfo_endpoint;
}
void OAIOauth_v1_openid_discovery::setUserinfoEndpoint(const QString &userinfo_endpoint) {
    m_userinfo_endpoint = userinfo_endpoint;
    m_userinfo_endpoint_isSet = true;
}

bool OAIOauth_v1_openid_discovery::is_userinfo_endpoint_Set() const{
    return m_userinfo_endpoint_isSet;
}

bool OAIOauth_v1_openid_discovery::is_userinfo_endpoint_Valid() const{
    return m_userinfo_endpoint_isValid;
}

bool OAIOauth_v1_openid_discovery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_signing_alg_values_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwk_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_type_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_type_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userinfo_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth_v1_openid_discovery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
