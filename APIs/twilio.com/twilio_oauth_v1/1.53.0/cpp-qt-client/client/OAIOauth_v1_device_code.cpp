/**
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth_v1_device_code.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth_v1_device_code::OAIOauth_v1_device_code(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth_v1_device_code::OAIOauth_v1_device_code() {
    this->initializeModel();
}

OAIOauth_v1_device_code::~OAIOauth_v1_device_code() {}

void OAIOauth_v1_device_code::initializeModel() {

    m_device_code_isSet = false;
    m_device_code_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_user_code_isSet = false;
    m_user_code_isValid = false;

    m_verification_uri_isSet = false;
    m_verification_uri_isValid = false;

    m_verification_uri_complete_isSet = false;
    m_verification_uri_complete_isValid = false;
}

void OAIOauth_v1_device_code::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth_v1_device_code::fromJsonObject(QJsonObject json) {

    m_device_code_isValid = ::OpenAPI::fromJsonValue(m_device_code, json[QString("device_code")]);
    m_device_code_isSet = !json[QString("device_code")].isNull() && m_device_code_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_user_code_isValid = ::OpenAPI::fromJsonValue(m_user_code, json[QString("user_code")]);
    m_user_code_isSet = !json[QString("user_code")].isNull() && m_user_code_isValid;

    m_verification_uri_isValid = ::OpenAPI::fromJsonValue(m_verification_uri, json[QString("verification_uri")]);
    m_verification_uri_isSet = !json[QString("verification_uri")].isNull() && m_verification_uri_isValid;

    m_verification_uri_complete_isValid = ::OpenAPI::fromJsonValue(m_verification_uri_complete, json[QString("verification_uri_complete")]);
    m_verification_uri_complete_isSet = !json[QString("verification_uri_complete")].isNull() && m_verification_uri_complete_isValid;
}

QString OAIOauth_v1_device_code::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth_v1_device_code::asJsonObject() const {
    QJsonObject obj;
    if (m_device_code_isSet) {
        obj.insert(QString("device_code"), ::OpenAPI::toJsonValue(m_device_code));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_user_code_isSet) {
        obj.insert(QString("user_code"), ::OpenAPI::toJsonValue(m_user_code));
    }
    if (m_verification_uri_isSet) {
        obj.insert(QString("verification_uri"), ::OpenAPI::toJsonValue(m_verification_uri));
    }
    if (m_verification_uri_complete_isSet) {
        obj.insert(QString("verification_uri_complete"), ::OpenAPI::toJsonValue(m_verification_uri_complete));
    }
    return obj;
}

QString OAIOauth_v1_device_code::getDeviceCode() const {
    return m_device_code;
}
void OAIOauth_v1_device_code::setDeviceCode(const QString &device_code) {
    m_device_code = device_code;
    m_device_code_isSet = true;
}

bool OAIOauth_v1_device_code::is_device_code_Set() const{
    return m_device_code_isSet;
}

bool OAIOauth_v1_device_code::is_device_code_Valid() const{
    return m_device_code_isValid;
}

qint64 OAIOauth_v1_device_code::getExpiresIn() const {
    return m_expires_in;
}
void OAIOauth_v1_device_code::setExpiresIn(const qint64 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIOauth_v1_device_code::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIOauth_v1_device_code::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

qint32 OAIOauth_v1_device_code::getInterval() const {
    return m_interval;
}
void OAIOauth_v1_device_code::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIOauth_v1_device_code::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIOauth_v1_device_code::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIOauth_v1_device_code::getUserCode() const {
    return m_user_code;
}
void OAIOauth_v1_device_code::setUserCode(const QString &user_code) {
    m_user_code = user_code;
    m_user_code_isSet = true;
}

bool OAIOauth_v1_device_code::is_user_code_Set() const{
    return m_user_code_isSet;
}

bool OAIOauth_v1_device_code::is_user_code_Valid() const{
    return m_user_code_isValid;
}

QString OAIOauth_v1_device_code::getVerificationUri() const {
    return m_verification_uri;
}
void OAIOauth_v1_device_code::setVerificationUri(const QString &verification_uri) {
    m_verification_uri = verification_uri;
    m_verification_uri_isSet = true;
}

bool OAIOauth_v1_device_code::is_verification_uri_Set() const{
    return m_verification_uri_isSet;
}

bool OAIOauth_v1_device_code::is_verification_uri_Valid() const{
    return m_verification_uri_isValid;
}

QString OAIOauth_v1_device_code::getVerificationUriComplete() const {
    return m_verification_uri_complete;
}
void OAIOauth_v1_device_code::setVerificationUriComplete(const QString &verification_uri_complete) {
    m_verification_uri_complete = verification_uri_complete;
    m_verification_uri_complete_isSet = true;
}

bool OAIOauth_v1_device_code::is_verification_uri_complete_Set() const{
    return m_verification_uri_complete_isSet;
}

bool OAIOauth_v1_device_code::is_verification_uri_complete_Valid() const{
    return m_verification_uri_complete_isValid;
}

bool OAIOauth_v1_device_code::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_uri_complete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth_v1_device_code::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
