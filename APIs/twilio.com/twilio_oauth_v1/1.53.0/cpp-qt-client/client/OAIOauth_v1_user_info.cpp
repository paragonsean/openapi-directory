/**
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth_v1_user_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth_v1_user_info::OAIOauth_v1_user_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth_v1_user_info::OAIOauth_v1_user_info() {
    this->initializeModel();
}

OAIOauth_v1_user_info::~OAIOauth_v1_user_info() {}

void OAIOauth_v1_user_info::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_sid_isSet = false;
    m_user_sid_isValid = false;
}

void OAIOauth_v1_user_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth_v1_user_info::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_sid_isValid = ::OpenAPI::fromJsonValue(m_user_sid, json[QString("user_sid")]);
    m_user_sid_isSet = !json[QString("user_sid")].isNull() && m_user_sid_isValid;
}

QString OAIOauth_v1_user_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth_v1_user_info::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_sid_isSet) {
        obj.insert(QString("user_sid"), ::OpenAPI::toJsonValue(m_user_sid));
    }
    return obj;
}

QString OAIOauth_v1_user_info::getEmail() const {
    return m_email;
}
void OAIOauth_v1_user_info::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOauth_v1_user_info::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOauth_v1_user_info::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOauth_v1_user_info::getFirstName() const {
    return m_first_name;
}
void OAIOauth_v1_user_info::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIOauth_v1_user_info::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIOauth_v1_user_info::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIOauth_v1_user_info::getFriendlyName() const {
    return m_friendly_name;
}
void OAIOauth_v1_user_info::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIOauth_v1_user_info::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIOauth_v1_user_info::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIOauth_v1_user_info::getLastName() const {
    return m_last_name;
}
void OAIOauth_v1_user_info::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIOauth_v1_user_info::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIOauth_v1_user_info::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIOauth_v1_user_info::getUrl() const {
    return m_url;
}
void OAIOauth_v1_user_info::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOauth_v1_user_info::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOauth_v1_user_info::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIOauth_v1_user_info::getUserSid() const {
    return m_user_sid;
}
void OAIOauth_v1_user_info::setUserSid(const QString &user_sid) {
    m_user_sid = user_sid;
    m_user_sid_isSet = true;
}

bool OAIOauth_v1_user_info::is_user_sid_Set() const{
    return m_user_sid_isSet;
}

bool OAIOauth_v1_user_info::is_user_sid_Valid() const{
    return m_user_sid_isValid;
}

bool OAIOauth_v1_user_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth_v1_user_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
