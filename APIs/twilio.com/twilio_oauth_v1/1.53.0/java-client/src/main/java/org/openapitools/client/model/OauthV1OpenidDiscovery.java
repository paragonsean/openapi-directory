/*
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OauthV1OpenidDiscovery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:38.041660-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OauthV1OpenidDiscovery {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorization_endpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private URI authorizationEndpoint;

  public static final String SERIALIZED_NAME_CLAIMS_SUPPORTED = "claims_supported";
  @SerializedName(SERIALIZED_NAME_CLAIMS_SUPPORTED)
  private List<String> claimsSupported;

  public static final String SERIALIZED_NAME_DEVICE_AUTHORIZATION_ENDPOINT = "device_authorization_endpoint";
  @SerializedName(SERIALIZED_NAME_DEVICE_AUTHORIZATION_ENDPOINT)
  private URI deviceAuthorizationEndpoint;

  public static final String SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED = "id_token_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED)
  private List<String> idTokenSigningAlgValuesSupported;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private URI issuer;

  public static final String SERIALIZED_NAME_JWK_URI = "jwk_uri";
  @SerializedName(SERIALIZED_NAME_JWK_URI)
  private URI jwkUri;

  public static final String SERIALIZED_NAME_RESPONSE_TYPE_SUPPORTED = "response_type_supported";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE_SUPPORTED)
  private List<String> responseTypeSupported;

  public static final String SERIALIZED_NAME_REVOCATION_ENDPOINT = "revocation_endpoint";
  @SerializedName(SERIALIZED_NAME_REVOCATION_ENDPOINT)
  private URI revocationEndpoint;

  public static final String SERIALIZED_NAME_SCOPES_SUPPORTED = "scopes_supported";
  @SerializedName(SERIALIZED_NAME_SCOPES_SUPPORTED)
  private List<String> scopesSupported;

  public static final String SERIALIZED_NAME_SUBJECT_TYPE_SUPPORTED = "subject_type_supported";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE_SUPPORTED)
  private List<String> subjectTypeSupported;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "token_endpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private URI tokenEndpoint;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USERINFO_ENDPOINT = "userinfo_endpoint";
  @SerializedName(SERIALIZED_NAME_USERINFO_ENDPOINT)
  private URI userinfoEndpoint;

  public OauthV1OpenidDiscovery() {
  }

  public OauthV1OpenidDiscovery authorizationEndpoint(URI authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * The endpoint that validates all authorization requests.
   * @return authorizationEndpoint
   */
  @javax.annotation.Nullable
  public URI getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(URI authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public OauthV1OpenidDiscovery claimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
    return this;
  }

  public OauthV1OpenidDiscovery addClaimsSupportedItem(String claimsSupportedItem) {
    if (this.claimsSupported == null) {
      this.claimsSupported = new ArrayList<>();
    }
    this.claimsSupported.add(claimsSupportedItem);
    return this;
  }

  /**
   * A collection of claims supported by authorization server for identity token
   * @return claimsSupported
   */
  @javax.annotation.Nullable
  public List<String> getClaimsSupported() {
    return claimsSupported;
  }

  public void setClaimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
  }


  public OauthV1OpenidDiscovery deviceAuthorizationEndpoint(URI deviceAuthorizationEndpoint) {
    this.deviceAuthorizationEndpoint = deviceAuthorizationEndpoint;
    return this;
  }

  /**
   * The endpoint that validates all device code related authorization requests.
   * @return deviceAuthorizationEndpoint
   */
  @javax.annotation.Nullable
  public URI getDeviceAuthorizationEndpoint() {
    return deviceAuthorizationEndpoint;
  }

  public void setDeviceAuthorizationEndpoint(URI deviceAuthorizationEndpoint) {
    this.deviceAuthorizationEndpoint = deviceAuthorizationEndpoint;
  }


  public OauthV1OpenidDiscovery idTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
    return this;
  }

  public OauthV1OpenidDiscovery addIdTokenSigningAlgValuesSupportedItem(String idTokenSigningAlgValuesSupportedItem) {
    if (this.idTokenSigningAlgValuesSupported == null) {
      this.idTokenSigningAlgValuesSupported = new ArrayList<>();
    }
    this.idTokenSigningAlgValuesSupported.add(idTokenSigningAlgValuesSupportedItem);
    return this;
  }

  /**
   * A collection of JWS signing algorithms supported by authorization server to sign identity token.
   * @return idTokenSigningAlgValuesSupported
   */
  @javax.annotation.Nullable
  public List<String> getIdTokenSigningAlgValuesSupported() {
    return idTokenSigningAlgValuesSupported;
  }

  public void setIdTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
  }


  public OauthV1OpenidDiscovery issuer(URI issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The URL of the party that will create the token and sign it with its private key.
   * @return issuer
   */
  @javax.annotation.Nullable
  public URI getIssuer() {
    return issuer;
  }

  public void setIssuer(URI issuer) {
    this.issuer = issuer;
  }


  public OauthV1OpenidDiscovery jwkUri(URI jwkUri) {
    this.jwkUri = jwkUri;
    return this;
  }

  /**
   * The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.
   * @return jwkUri
   */
  @javax.annotation.Nullable
  public URI getJwkUri() {
    return jwkUri;
  }

  public void setJwkUri(URI jwkUri) {
    this.jwkUri = jwkUri;
  }


  public OauthV1OpenidDiscovery responseTypeSupported(List<String> responseTypeSupported) {
    this.responseTypeSupported = responseTypeSupported;
    return this;
  }

  public OauthV1OpenidDiscovery addResponseTypeSupportedItem(String responseTypeSupportedItem) {
    if (this.responseTypeSupported == null) {
      this.responseTypeSupported = new ArrayList<>();
    }
    this.responseTypeSupported.add(responseTypeSupportedItem);
    return this;
  }

  /**
   * A collection of response type supported by authorization server.
   * @return responseTypeSupported
   */
  @javax.annotation.Nullable
  public List<String> getResponseTypeSupported() {
    return responseTypeSupported;
  }

  public void setResponseTypeSupported(List<String> responseTypeSupported) {
    this.responseTypeSupported = responseTypeSupported;
  }


  public OauthV1OpenidDiscovery revocationEndpoint(URI revocationEndpoint) {
    this.revocationEndpoint = revocationEndpoint;
    return this;
  }

  /**
   * The endpoint used to revoke access or refresh tokens issued by the authorization server.
   * @return revocationEndpoint
   */
  @javax.annotation.Nullable
  public URI getRevocationEndpoint() {
    return revocationEndpoint;
  }

  public void setRevocationEndpoint(URI revocationEndpoint) {
    this.revocationEndpoint = revocationEndpoint;
  }


  public OauthV1OpenidDiscovery scopesSupported(List<String> scopesSupported) {
    this.scopesSupported = scopesSupported;
    return this;
  }

  public OauthV1OpenidDiscovery addScopesSupportedItem(String scopesSupportedItem) {
    if (this.scopesSupported == null) {
      this.scopesSupported = new ArrayList<>();
    }
    this.scopesSupported.add(scopesSupportedItem);
    return this;
  }

  /**
   * A collection of scopes supported by authorization server for identity token
   * @return scopesSupported
   */
  @javax.annotation.Nullable
  public List<String> getScopesSupported() {
    return scopesSupported;
  }

  public void setScopesSupported(List<String> scopesSupported) {
    this.scopesSupported = scopesSupported;
  }


  public OauthV1OpenidDiscovery subjectTypeSupported(List<String> subjectTypeSupported) {
    this.subjectTypeSupported = subjectTypeSupported;
    return this;
  }

  public OauthV1OpenidDiscovery addSubjectTypeSupportedItem(String subjectTypeSupportedItem) {
    if (this.subjectTypeSupported == null) {
      this.subjectTypeSupported = new ArrayList<>();
    }
    this.subjectTypeSupported.add(subjectTypeSupportedItem);
    return this;
  }

  /**
   * A collection of subject by authorization server.
   * @return subjectTypeSupported
   */
  @javax.annotation.Nullable
  public List<String> getSubjectTypeSupported() {
    return subjectTypeSupported;
  }

  public void setSubjectTypeSupported(List<String> subjectTypeSupported) {
    this.subjectTypeSupported = subjectTypeSupported;
  }


  public OauthV1OpenidDiscovery tokenEndpoint(URI tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.
   * @return tokenEndpoint
   */
  @javax.annotation.Nullable
  public URI getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(URI tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }


  public OauthV1OpenidDiscovery url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public OauthV1OpenidDiscovery userinfoEndpoint(URI userinfoEndpoint) {
    this.userinfoEndpoint = userinfoEndpoint;
    return this;
  }

  /**
   * The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.
   * @return userinfoEndpoint
   */
  @javax.annotation.Nullable
  public URI getUserinfoEndpoint() {
    return userinfoEndpoint;
  }

  public void setUserinfoEndpoint(URI userinfoEndpoint) {
    this.userinfoEndpoint = userinfoEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OauthV1OpenidDiscovery oauthV1OpenidDiscovery = (OauthV1OpenidDiscovery) o;
    return Objects.equals(this.authorizationEndpoint, oauthV1OpenidDiscovery.authorizationEndpoint) &&
        Objects.equals(this.claimsSupported, oauthV1OpenidDiscovery.claimsSupported) &&
        Objects.equals(this.deviceAuthorizationEndpoint, oauthV1OpenidDiscovery.deviceAuthorizationEndpoint) &&
        Objects.equals(this.idTokenSigningAlgValuesSupported, oauthV1OpenidDiscovery.idTokenSigningAlgValuesSupported) &&
        Objects.equals(this.issuer, oauthV1OpenidDiscovery.issuer) &&
        Objects.equals(this.jwkUri, oauthV1OpenidDiscovery.jwkUri) &&
        Objects.equals(this.responseTypeSupported, oauthV1OpenidDiscovery.responseTypeSupported) &&
        Objects.equals(this.revocationEndpoint, oauthV1OpenidDiscovery.revocationEndpoint) &&
        Objects.equals(this.scopesSupported, oauthV1OpenidDiscovery.scopesSupported) &&
        Objects.equals(this.subjectTypeSupported, oauthV1OpenidDiscovery.subjectTypeSupported) &&
        Objects.equals(this.tokenEndpoint, oauthV1OpenidDiscovery.tokenEndpoint) &&
        Objects.equals(this.url, oauthV1OpenidDiscovery.url) &&
        Objects.equals(this.userinfoEndpoint, oauthV1OpenidDiscovery.userinfoEndpoint);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, claimsSupported, deviceAuthorizationEndpoint, idTokenSigningAlgValuesSupported, issuer, jwkUri, responseTypeSupported, revocationEndpoint, scopesSupported, subjectTypeSupported, tokenEndpoint, url, userinfoEndpoint);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OauthV1OpenidDiscovery {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    claimsSupported: ").append(toIndentedString(claimsSupported)).append("\n");
    sb.append("    deviceAuthorizationEndpoint: ").append(toIndentedString(deviceAuthorizationEndpoint)).append("\n");
    sb.append("    idTokenSigningAlgValuesSupported: ").append(toIndentedString(idTokenSigningAlgValuesSupported)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwkUri: ").append(toIndentedString(jwkUri)).append("\n");
    sb.append("    responseTypeSupported: ").append(toIndentedString(responseTypeSupported)).append("\n");
    sb.append("    revocationEndpoint: ").append(toIndentedString(revocationEndpoint)).append("\n");
    sb.append("    scopesSupported: ").append(toIndentedString(scopesSupported)).append("\n");
    sb.append("    subjectTypeSupported: ").append(toIndentedString(subjectTypeSupported)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userinfoEndpoint: ").append(toIndentedString(userinfoEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization_endpoint");
    openapiFields.add("claims_supported");
    openapiFields.add("device_authorization_endpoint");
    openapiFields.add("id_token_signing_alg_values_supported");
    openapiFields.add("issuer");
    openapiFields.add("jwk_uri");
    openapiFields.add("response_type_supported");
    openapiFields.add("revocation_endpoint");
    openapiFields.add("scopes_supported");
    openapiFields.add("subject_type_supported");
    openapiFields.add("token_endpoint");
    openapiFields.add("url");
    openapiFields.add("userinfo_endpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OauthV1OpenidDiscovery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OauthV1OpenidDiscovery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OauthV1OpenidDiscovery is not found in the empty JSON string", OauthV1OpenidDiscovery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OauthV1OpenidDiscovery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OauthV1OpenidDiscovery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorization_endpoint") != null && !jsonObj.get("authorization_endpoint").isJsonNull()) && !jsonObj.get("authorization_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("claims_supported") != null && !jsonObj.get("claims_supported").isJsonNull() && !jsonObj.get("claims_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims_supported` to be an array in the JSON string but got `%s`", jsonObj.get("claims_supported").toString()));
      }
      if ((jsonObj.get("device_authorization_endpoint") != null && !jsonObj.get("device_authorization_endpoint").isJsonNull()) && !jsonObj.get("device_authorization_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_authorization_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_authorization_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id_token_signing_alg_values_supported") != null && !jsonObj.get("id_token_signing_alg_values_supported").isJsonNull() && !jsonObj.get("id_token_signing_alg_values_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_token_signing_alg_values_supported` to be an array in the JSON string but got `%s`", jsonObj.get("id_token_signing_alg_values_supported").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("jwk_uri") != null && !jsonObj.get("jwk_uri").isJsonNull()) && !jsonObj.get("jwk_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwk_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwk_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("response_type_supported") != null && !jsonObj.get("response_type_supported").isJsonNull() && !jsonObj.get("response_type_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_type_supported` to be an array in the JSON string but got `%s`", jsonObj.get("response_type_supported").toString()));
      }
      if ((jsonObj.get("revocation_endpoint") != null && !jsonObj.get("revocation_endpoint").isJsonNull()) && !jsonObj.get("revocation_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocation_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocation_endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes_supported") != null && !jsonObj.get("scopes_supported").isJsonNull() && !jsonObj.get("scopes_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_supported` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_supported").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject_type_supported") != null && !jsonObj.get("subject_type_supported").isJsonNull() && !jsonObj.get("subject_type_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_type_supported` to be an array in the JSON string but got `%s`", jsonObj.get("subject_type_supported").toString()));
      }
      if ((jsonObj.get("token_endpoint") != null && !jsonObj.get("token_endpoint").isJsonNull()) && !jsonObj.get("token_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_endpoint").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("userinfo_endpoint") != null && !jsonObj.get("userinfo_endpoint").isJsonNull()) && !jsonObj.get("userinfo_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userinfo_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userinfo_endpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OauthV1OpenidDiscovery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OauthV1OpenidDiscovery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OauthV1OpenidDiscovery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OauthV1OpenidDiscovery.class));

       return (TypeAdapter<T>) new TypeAdapter<OauthV1OpenidDiscovery>() {
           @Override
           public void write(JsonWriter out, OauthV1OpenidDiscovery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OauthV1OpenidDiscovery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OauthV1OpenidDiscovery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OauthV1OpenidDiscovery
   * @throws IOException if the JSON string is invalid with respect to OauthV1OpenidDiscovery
   */
  public static OauthV1OpenidDiscovery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OauthV1OpenidDiscovery.class);
  }

  /**
   * Convert an instance of OauthV1OpenidDiscovery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

