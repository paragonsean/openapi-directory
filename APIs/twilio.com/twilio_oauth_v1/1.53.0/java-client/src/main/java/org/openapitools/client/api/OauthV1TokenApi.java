/*
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OauthV1Token;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OauthV1TokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthV1TokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OauthV1TokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createToken
     * @param clientSid A 34 character string that uniquely identifies this OAuth App. (required)
     * @param grantType Grant type is a credential representing resource owner&#39;s authorization which can be used by client to obtain access token. (required)
     * @param clientSecret The credential for confidential OAuth App. (optional)
     * @param code JWT token related to the authorization code grant type. (optional)
     * @param codeVerifier A code which is generation cryptographically. (optional)
     * @param deviceCode JWT token related to the device code grant type. (optional)
     * @param deviceId The Id of the device associated with the token (refresh token). (optional)
     * @param refreshToken JWT token related to the refresh token grant type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenCall(String clientSid, String grantType, String clientSecret, String code, String codeVerifier, String deviceCode, String deviceId, String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://oauth.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientSecret != null) {
            localVarFormParams.put("ClientSecret", clientSecret);
        }

        if (clientSid != null) {
            localVarFormParams.put("ClientSid", clientSid);
        }

        if (code != null) {
            localVarFormParams.put("Code", code);
        }

        if (codeVerifier != null) {
            localVarFormParams.put("CodeVerifier", codeVerifier);
        }

        if (deviceCode != null) {
            localVarFormParams.put("DeviceCode", deviceCode);
        }

        if (deviceId != null) {
            localVarFormParams.put("DeviceId", deviceId);
        }

        if (grantType != null) {
            localVarFormParams.put("GrantType", grantType);
        }

        if (refreshToken != null) {
            localVarFormParams.put("RefreshToken", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTokenValidateBeforeCall(String clientSid, String grantType, String clientSecret, String code, String codeVerifier, String deviceCode, String deviceId, String refreshToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientSid' is set
        if (clientSid == null) {
            throw new ApiException("Missing the required parameter 'clientSid' when calling createToken(Async)");
        }

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling createToken(Async)");
        }

        return createTokenCall(clientSid, grantType, clientSecret, code, codeVerifier, deviceCode, deviceId, refreshToken, _callback);

    }

    /**
     * 
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param clientSid A 34 character string that uniquely identifies this OAuth App. (required)
     * @param grantType Grant type is a credential representing resource owner&#39;s authorization which can be used by client to obtain access token. (required)
     * @param clientSecret The credential for confidential OAuth App. (optional)
     * @param code JWT token related to the authorization code grant type. (optional)
     * @param codeVerifier A code which is generation cryptographically. (optional)
     * @param deviceCode JWT token related to the device code grant type. (optional)
     * @param deviceId The Id of the device associated with the token (refresh token). (optional)
     * @param refreshToken JWT token related to the refresh token grant type. (optional)
     * @return OauthV1Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public OauthV1Token createToken(String clientSid, String grantType, String clientSecret, String code, String codeVerifier, String deviceCode, String deviceId, String refreshToken) throws ApiException {
        ApiResponse<OauthV1Token> localVarResp = createTokenWithHttpInfo(clientSid, grantType, clientSecret, code, codeVerifier, deviceCode, deviceId, refreshToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param clientSid A 34 character string that uniquely identifies this OAuth App. (required)
     * @param grantType Grant type is a credential representing resource owner&#39;s authorization which can be used by client to obtain access token. (required)
     * @param clientSecret The credential for confidential OAuth App. (optional)
     * @param code JWT token related to the authorization code grant type. (optional)
     * @param codeVerifier A code which is generation cryptographically. (optional)
     * @param deviceCode JWT token related to the device code grant type. (optional)
     * @param deviceId The Id of the device associated with the token (refresh token). (optional)
     * @param refreshToken JWT token related to the refresh token grant type. (optional)
     * @return ApiResponse&lt;OauthV1Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthV1Token> createTokenWithHttpInfo(String clientSid, String grantType, String clientSecret, String code, String codeVerifier, String deviceCode, String deviceId, String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = createTokenValidateBeforeCall(clientSid, grantType, clientSecret, code, codeVerifier, deviceCode, deviceId, refreshToken, null);
        Type localVarReturnType = new TypeToken<OauthV1Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Issues a new Access token (optionally identity_token &amp; refresh_token) in exchange of Oauth grant
     * @param clientSid A 34 character string that uniquely identifies this OAuth App. (required)
     * @param grantType Grant type is a credential representing resource owner&#39;s authorization which can be used by client to obtain access token. (required)
     * @param clientSecret The credential for confidential OAuth App. (optional)
     * @param code JWT token related to the authorization code grant type. (optional)
     * @param codeVerifier A code which is generation cryptographically. (optional)
     * @param deviceCode JWT token related to the device code grant type. (optional)
     * @param deviceId The Id of the device associated with the token (refresh token). (optional)
     * @param refreshToken JWT token related to the refresh token grant type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenAsync(String clientSid, String grantType, String clientSecret, String code, String codeVerifier, String deviceCode, String deviceId, String refreshToken, final ApiCallback<OauthV1Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTokenValidateBeforeCall(clientSid, grantType, clientSecret, code, codeVerifier, deviceCode, deviceId, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<OauthV1Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
