# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OauthV1Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, access_token_expires_at: datetime=None, id_token: str=None, refresh_token: str=None, refresh_token_expires_at: datetime=None):
        """OauthV1Token - a model defined in OpenAPI

        :param access_token: The access_token of this OauthV1Token.
        :param access_token_expires_at: The access_token_expires_at of this OauthV1Token.
        :param id_token: The id_token of this OauthV1Token.
        :param refresh_token: The refresh_token of this OauthV1Token.
        :param refresh_token_expires_at: The refresh_token_expires_at of this OauthV1Token.
        """
        self.openapi_types = {
            'access_token': str,
            'access_token_expires_at': datetime,
            'id_token': str,
            'refresh_token': str,
            'refresh_token_expires_at': datetime
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'access_token_expires_at': 'access_token_expires_at',
            'id_token': 'id_token',
            'refresh_token': 'refresh_token',
            'refresh_token_expires_at': 'refresh_token_expires_at'
        }

        self._access_token = access_token
        self._access_token_expires_at = access_token_expires_at
        self._id_token = id_token
        self._refresh_token = refresh_token
        self._refresh_token_expires_at = refresh_token_expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OauthV1Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The oauth.v1.token of this OauthV1Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this OauthV1Token.

        Token which carries the necessary information to access a Twilio resource directly.

        :return: The access_token of this OauthV1Token.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OauthV1Token.

        Token which carries the necessary information to access a Twilio resource directly.

        :param access_token: The access_token of this OauthV1Token.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def access_token_expires_at(self):
        """Gets the access_token_expires_at of this OauthV1Token.

        The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The access_token_expires_at of this OauthV1Token.
        :rtype: datetime
        """
        return self._access_token_expires_at

    @access_token_expires_at.setter
    def access_token_expires_at(self, access_token_expires_at):
        """Sets the access_token_expires_at of this OauthV1Token.

        The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param access_token_expires_at: The access_token_expires_at of this OauthV1Token.
        :type access_token_expires_at: datetime
        """

        self._access_token_expires_at = access_token_expires_at

    @property
    def id_token(self):
        """Gets the id_token of this OauthV1Token.


        :return: The id_token of this OauthV1Token.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this OauthV1Token.


        :param id_token: The id_token of this OauthV1Token.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this OauthV1Token.

        Token which carries the information necessary to get a new access token.

        :return: The refresh_token of this OauthV1Token.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this OauthV1Token.

        Token which carries the information necessary to get a new access token.

        :param refresh_token: The refresh_token of this OauthV1Token.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def refresh_token_expires_at(self):
        """Gets the refresh_token_expires_at of this OauthV1Token.

        The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The refresh_token_expires_at of this OauthV1Token.
        :rtype: datetime
        """
        return self._refresh_token_expires_at

    @refresh_token_expires_at.setter
    def refresh_token_expires_at(self, refresh_token_expires_at):
        """Sets the refresh_token_expires_at of this OauthV1Token.

        The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param refresh_token_expires_at: The refresh_token_expires_at of this OauthV1Token.
        :type refresh_token_expires_at: datetime
        """

        self._refresh_token_expires_at = refresh_token_expires_at
