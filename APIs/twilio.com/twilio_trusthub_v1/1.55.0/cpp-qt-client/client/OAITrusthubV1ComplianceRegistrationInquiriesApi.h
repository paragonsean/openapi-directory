/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1ComplianceRegistrationInquiriesApi_H
#define OAI_OAITrusthubV1ComplianceRegistrationInquiriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompliance_registration_enum_business_identity_type.h"
#include "OAICompliance_registration_enum_business_registration_authority.h"
#include "OAICompliance_registration_enum_end_user_type.h"
#include "OAICompliance_registration_enum_phone_number_type.h"
#include "OAITrusthub_v1_compliance_registration.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1ComplianceRegistrationInquiriesApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1ComplianceRegistrationInquiriesApi(const int timeOut = 0);
    ~OAITrusthubV1ComplianceRegistrationInquiriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  end_user_type OAICompliance_registration_enum_end_user_type [required]
    * @param[in]  phone_number_type OAICompliance_registration_enum_phone_number_type [required]
    * @param[in]  accepted_notification_receipt bool [optional]
    * @param[in]  address_city QString [optional]
    * @param[in]  address_country_code QString [optional]
    * @param[in]  address_postal_code QString [optional]
    * @param[in]  address_street QString [optional]
    * @param[in]  address_street_secondary QString [optional]
    * @param[in]  address_subdivision QString [optional]
    * @param[in]  authorized_representative1_date_of_birth QString [optional]
    * @param[in]  authorized_representative1_email QString [optional]
    * @param[in]  authorized_representative1_first_name QString [optional]
    * @param[in]  authorized_representative1_last_name QString [optional]
    * @param[in]  authorized_representative1_phone QString [optional]
    * @param[in]  business_identity_type OAICompliance_registration_enum_business_identity_type [optional]
    * @param[in]  business_legal_name QString [optional]
    * @param[in]  business_registration_authority OAICompliance_registration_enum_business_registration_authority [optional]
    * @param[in]  business_registration_number QString [optional]
    * @param[in]  business_website_url QString [optional]
    * @param[in]  date_of_birth QString [optional]
    * @param[in]  emergency_address_city QString [optional]
    * @param[in]  emergency_address_country_code QString [optional]
    * @param[in]  emergency_address_postal_code QString [optional]
    * @param[in]  emergency_address_street QString [optional]
    * @param[in]  emergency_address_street_secondary QString [optional]
    * @param[in]  emergency_address_subdivision QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  file_name QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  individual_email QString [optional]
    * @param[in]  individual_phone QString [optional]
    * @param[in]  is_isv_embed bool [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  notification_email QString [optional]
    * @param[in]  use_address_as_emergency_address bool [optional]
    */
    virtual void createComplianceRegistration(const OAICompliance_registration_enum_end_user_type &end_user_type, const OAICompliance_registration_enum_phone_number_type &phone_number_type, const ::OpenAPI::OptionalParam<bool> &accepted_notification_receipt = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &address_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_street_secondary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorized_representative1_date_of_birth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorized_representative1_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorized_representative1_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorized_representative1_last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorized_representative1_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_identity_type> &business_identity_type = ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_identity_type>(), const ::OpenAPI::OptionalParam<QString> &business_legal_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_registration_authority> &business_registration_authority = ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_registration_authority>(), const ::OpenAPI::OptionalParam<QString> &business_registration_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_website_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_of_birth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_street_secondary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &individual_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &individual_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_isv_embed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notification_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_address_as_emergency_address = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createComplianceRegistrationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createComplianceRegistrationSignal(OAITrusthub_v1_compliance_registration summary);


    void createComplianceRegistrationSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_compliance_registration summary);

    Q_DECL_DEPRECATED_X("Use createComplianceRegistrationSignalError() instead")
    void createComplianceRegistrationSignalE(OAITrusthub_v1_compliance_registration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createComplianceRegistrationSignalError(OAITrusthub_v1_compliance_registration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createComplianceRegistrationSignalErrorFull() instead")
    void createComplianceRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createComplianceRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
