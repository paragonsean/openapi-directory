/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1TrustProductsEvaluationsApi_H
#define OAI_OAITrusthubV1TrustProductsEvaluationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTrustProductEvaluationResponse.h"
#include "OAITrusthub_v1_trust_product_trust_product_evaluation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1TrustProductsEvaluationsApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1TrustProductsEvaluationsApi(const int timeOut = 0);
    ~OAITrusthubV1TrustProductsEvaluationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  policy_sid QString [required]
    */
    virtual void createTrustProductEvaluation(const QString &trust_product_sid, const QString &policy_sid);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTrustProductEvaluation(const QString &trust_product_sid, const QString &sid);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTrustProductEvaluation(const QString &trust_product_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTrustProductEvaluationCallback(OAIHttpRequestWorker *worker);
    void fetchTrustProductEvaluationCallback(OAIHttpRequestWorker *worker);
    void listTrustProductEvaluationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTrustProductEvaluationSignal(OAITrusthub_v1_trust_product_trust_product_evaluation summary);
    void fetchTrustProductEvaluationSignal(OAITrusthub_v1_trust_product_trust_product_evaluation summary);
    void listTrustProductEvaluationSignal(OAIListTrustProductEvaluationResponse summary);


    void createTrustProductEvaluationSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product_trust_product_evaluation summary);
    void fetchTrustProductEvaluationSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product_trust_product_evaluation summary);
    void listTrustProductEvaluationSignalFull(OAIHttpRequestWorker *worker, OAIListTrustProductEvaluationResponse summary);

    Q_DECL_DEPRECATED_X("Use createTrustProductEvaluationSignalError() instead")
    void createTrustProductEvaluationSignalE(OAITrusthub_v1_trust_product_trust_product_evaluation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductEvaluationSignalError(OAITrusthub_v1_trust_product_trust_product_evaluation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductEvaluationSignalError() instead")
    void fetchTrustProductEvaluationSignalE(OAITrusthub_v1_trust_product_trust_product_evaluation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductEvaluationSignalError(OAITrusthub_v1_trust_product_trust_product_evaluation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductEvaluationSignalError() instead")
    void listTrustProductEvaluationSignalE(OAIListTrustProductEvaluationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductEvaluationSignalError(OAIListTrustProductEvaluationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTrustProductEvaluationSignalErrorFull() instead")
    void createTrustProductEvaluationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductEvaluationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductEvaluationSignalErrorFull() instead")
    void fetchTrustProductEvaluationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductEvaluationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductEvaluationSignalErrorFull() instead")
    void listTrustProductEvaluationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductEvaluationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
