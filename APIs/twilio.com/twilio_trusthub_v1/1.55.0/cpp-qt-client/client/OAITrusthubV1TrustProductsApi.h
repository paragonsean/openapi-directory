/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1TrustProductsApi_H
#define OAI_OAITrusthubV1TrustProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTrustProductResponse.h"
#include "OAITrust_product_enum_status.h"
#include "OAITrusthub_v1_trust_product.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1TrustProductsApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1TrustProductsApi(const int timeOut = 0);
    ~OAITrusthubV1TrustProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  policy_sid QString [required]
    * @param[in]  status_callback QString [optional]
    */
    virtual void createTrustProduct(const QString &email, const QString &friendly_name, const QString &policy_sid, const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteTrustProduct(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchTrustProduct(const QString &sid);

    /**
    * @param[in]  status OAITrust_product_enum_status [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  policy_sid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTrustProduct(const ::OpenAPI::OptionalParam<OAITrust_product_enum_status> &status = ::OpenAPI::OptionalParam<OAITrust_product_enum_status>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &policy_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  status OAITrust_product_enum_status [optional]
    * @param[in]  status_callback QString [optional]
    */
    virtual void updateTrustProduct(const QString &sid, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITrust_product_enum_status> &status = ::OpenAPI::OptionalParam<OAITrust_product_enum_status>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTrustProductCallback(OAIHttpRequestWorker *worker);
    void deleteTrustProductCallback(OAIHttpRequestWorker *worker);
    void fetchTrustProductCallback(OAIHttpRequestWorker *worker);
    void listTrustProductCallback(OAIHttpRequestWorker *worker);
    void updateTrustProductCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTrustProductSignal(OAITrusthub_v1_trust_product summary);
    void deleteTrustProductSignal();
    void fetchTrustProductSignal(OAITrusthub_v1_trust_product summary);
    void listTrustProductSignal(OAIListTrustProductResponse summary);
    void updateTrustProductSignal(OAITrusthub_v1_trust_product summary);


    void createTrustProductSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product summary);
    void deleteTrustProductSignalFull(OAIHttpRequestWorker *worker);
    void fetchTrustProductSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product summary);
    void listTrustProductSignalFull(OAIHttpRequestWorker *worker, OAIListTrustProductResponse summary);
    void updateTrustProductSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product summary);

    Q_DECL_DEPRECATED_X("Use createTrustProductSignalError() instead")
    void createTrustProductSignalE(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductSignalError(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrustProductSignalError() instead")
    void deleteTrustProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrustProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductSignalError() instead")
    void fetchTrustProductSignalE(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductSignalError(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductSignalError() instead")
    void listTrustProductSignalE(OAIListTrustProductResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductSignalError(OAIListTrustProductResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrustProductSignalError() instead")
    void updateTrustProductSignalE(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrustProductSignalError(OAITrusthub_v1_trust_product summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTrustProductSignalErrorFull() instead")
    void createTrustProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrustProductSignalErrorFull() instead")
    void deleteTrustProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrustProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductSignalErrorFull() instead")
    void fetchTrustProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductSignalErrorFull() instead")
    void listTrustProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrustProductSignalErrorFull() instead")
    void updateTrustProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrustProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
