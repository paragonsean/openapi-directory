/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1ComplianceTollfreeInquiriesApi_H
#define OAI_OAITrusthubV1ComplianceTollfreeInquiriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompliance_tollfree_inquiry_enum_opt_in_type.h"
#include "OAITrusthub_v1_compliance_tollfree_inquiry.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1ComplianceTollfreeInquiriesApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1ComplianceTollfreeInquiriesApi(const int timeOut = 0);
    ~OAITrusthubV1ComplianceTollfreeInquiriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  notification_email QString [required]
    * @param[in]  tollfree_phone_number QString [required]
    * @param[in]  additional_information QString [optional]
    * @param[in]  business_city QString [optional]
    * @param[in]  business_contact_email QString [optional]
    * @param[in]  business_contact_first_name QString [optional]
    * @param[in]  business_contact_last_name QString [optional]
    * @param[in]  business_contact_phone QString [optional]
    * @param[in]  business_country QString [optional]
    * @param[in]  business_name QString [optional]
    * @param[in]  business_postal_code QString [optional]
    * @param[in]  business_state_province_region QString [optional]
    * @param[in]  business_street_address QString [optional]
    * @param[in]  business_street_address2 QString [optional]
    * @param[in]  business_website QString [optional]
    * @param[in]  message_volume QString [optional]
    * @param[in]  opt_in_image_urls QList<QString> [optional]
    * @param[in]  opt_in_type OAICompliance_tollfree_inquiry_enum_opt_in_type [optional]
    * @param[in]  production_message_sample QString [optional]
    * @param[in]  use_case_categories QList<QString> [optional]
    * @param[in]  use_case_summary QString [optional]
    */
    virtual void createComplianceTollfreeInquiry(const QString &notification_email, const QString &tollfree_phone_number, const ::OpenAPI::OptionalParam<QString> &additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_contact_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_state_province_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_street_address2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_volume = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_in_image_urls = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICompliance_tollfree_inquiry_enum_opt_in_type> &opt_in_type = ::OpenAPI::OptionalParam<OAICompliance_tollfree_inquiry_enum_opt_in_type>(), const ::OpenAPI::OptionalParam<QString> &production_message_sample = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &use_case_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &use_case_summary = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createComplianceTollfreeInquiryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createComplianceTollfreeInquirySignal(OAITrusthub_v1_compliance_tollfree_inquiry summary);


    void createComplianceTollfreeInquirySignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_compliance_tollfree_inquiry summary);

    Q_DECL_DEPRECATED_X("Use createComplianceTollfreeInquirySignalError() instead")
    void createComplianceTollfreeInquirySignalE(OAITrusthub_v1_compliance_tollfree_inquiry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createComplianceTollfreeInquirySignalError(OAITrusthub_v1_compliance_tollfree_inquiry summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createComplianceTollfreeInquirySignalErrorFull() instead")
    void createComplianceTollfreeInquirySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createComplianceTollfreeInquirySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
