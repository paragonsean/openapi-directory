/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompliance_tollfree_inquiry_enum_opt_in_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompliance_tollfree_inquiry_enum_opt_in_type::OAICompliance_tollfree_inquiry_enum_opt_in_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompliance_tollfree_inquiry_enum_opt_in_type::OAICompliance_tollfree_inquiry_enum_opt_in_type() {
    this->initializeModel();
}

OAICompliance_tollfree_inquiry_enum_opt_in_type::~OAICompliance_tollfree_inquiry_enum_opt_in_type() {}

void OAICompliance_tollfree_inquiry_enum_opt_in_type::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICompliance_tollfree_inquiry_enum_opt_in_type::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VERBAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::VERBAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEB_FORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::WEB_FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAPER_FORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::PAPER_FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIA_TEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::VIA_TEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MOBILE_QR_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICompliance_tollfree_inquiry_enum_opt_in_type::MOBILE_QR_CODE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICompliance_tollfree_inquiry_enum_opt_in_type::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICompliance_tollfree_inquiry_enum_opt_in_type::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICompliance_tollfree_inquiry_enum_opt_in_type::VERBAL:
            val = "VERBAL";
            break;
        case eOAICompliance_tollfree_inquiry_enum_opt_in_type::WEB_FORM:
            val = "WEB_FORM";
            break;
        case eOAICompliance_tollfree_inquiry_enum_opt_in_type::PAPER_FORM:
            val = "PAPER_FORM";
            break;
        case eOAICompliance_tollfree_inquiry_enum_opt_in_type::VIA_TEXT:
            val = "VIA_TEXT";
            break;
        case eOAICompliance_tollfree_inquiry_enum_opt_in_type::MOBILE_QR_CODE:
            val = "MOBILE_QR_CODE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICompliance_tollfree_inquiry_enum_opt_in_type::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICompliance_tollfree_inquiry_enum_opt_in_type::eOAICompliance_tollfree_inquiry_enum_opt_in_type OAICompliance_tollfree_inquiry_enum_opt_in_type::getValue() const {
    return m_value;
}

void OAICompliance_tollfree_inquiry_enum_opt_in_type::setValue(const OAICompliance_tollfree_inquiry_enum_opt_in_type::eOAICompliance_tollfree_inquiry_enum_opt_in_type& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICompliance_tollfree_inquiry_enum_opt_in_type::isSet() const {
    
    return m_value_isSet;
}

bool OAICompliance_tollfree_inquiry_enum_opt_in_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
