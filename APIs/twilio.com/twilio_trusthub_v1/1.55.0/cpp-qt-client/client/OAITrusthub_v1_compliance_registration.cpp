/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrusthub_v1_compliance_registration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrusthub_v1_compliance_registration::OAITrusthub_v1_compliance_registration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrusthub_v1_compliance_registration::OAITrusthub_v1_compliance_registration() {
    this->initializeModel();
}

OAITrusthub_v1_compliance_registration::~OAITrusthub_v1_compliance_registration() {}

void OAITrusthub_v1_compliance_registration::initializeModel() {

    m_inquiry_id_isSet = false;
    m_inquiry_id_isValid = false;

    m_inquiry_session_token_isSet = false;
    m_inquiry_session_token_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITrusthub_v1_compliance_registration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrusthub_v1_compliance_registration::fromJsonObject(QJsonObject json) {

    m_inquiry_id_isValid = ::OpenAPI::fromJsonValue(m_inquiry_id, json[QString("inquiry_id")]);
    m_inquiry_id_isSet = !json[QString("inquiry_id")].isNull() && m_inquiry_id_isValid;

    m_inquiry_session_token_isValid = ::OpenAPI::fromJsonValue(m_inquiry_session_token, json[QString("inquiry_session_token")]);
    m_inquiry_session_token_isSet = !json[QString("inquiry_session_token")].isNull() && m_inquiry_session_token_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("registration_id")]);
    m_registration_id_isSet = !json[QString("registration_id")].isNull() && m_registration_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITrusthub_v1_compliance_registration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrusthub_v1_compliance_registration::asJsonObject() const {
    QJsonObject obj;
    if (m_inquiry_id_isSet) {
        obj.insert(QString("inquiry_id"), ::OpenAPI::toJsonValue(m_inquiry_id));
    }
    if (m_inquiry_session_token_isSet) {
        obj.insert(QString("inquiry_session_token"), ::OpenAPI::toJsonValue(m_inquiry_session_token));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("registration_id"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITrusthub_v1_compliance_registration::getInquiryId() const {
    return m_inquiry_id;
}
void OAITrusthub_v1_compliance_registration::setInquiryId(const QString &inquiry_id) {
    m_inquiry_id = inquiry_id;
    m_inquiry_id_isSet = true;
}

bool OAITrusthub_v1_compliance_registration::is_inquiry_id_Set() const{
    return m_inquiry_id_isSet;
}

bool OAITrusthub_v1_compliance_registration::is_inquiry_id_Valid() const{
    return m_inquiry_id_isValid;
}

QString OAITrusthub_v1_compliance_registration::getInquirySessionToken() const {
    return m_inquiry_session_token;
}
void OAITrusthub_v1_compliance_registration::setInquirySessionToken(const QString &inquiry_session_token) {
    m_inquiry_session_token = inquiry_session_token;
    m_inquiry_session_token_isSet = true;
}

bool OAITrusthub_v1_compliance_registration::is_inquiry_session_token_Set() const{
    return m_inquiry_session_token_isSet;
}

bool OAITrusthub_v1_compliance_registration::is_inquiry_session_token_Valid() const{
    return m_inquiry_session_token_isValid;
}

QString OAITrusthub_v1_compliance_registration::getRegistrationId() const {
    return m_registration_id;
}
void OAITrusthub_v1_compliance_registration::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAITrusthub_v1_compliance_registration::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAITrusthub_v1_compliance_registration::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

QString OAITrusthub_v1_compliance_registration::getUrl() const {
    return m_url;
}
void OAITrusthub_v1_compliance_registration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITrusthub_v1_compliance_registration::is_url_Set() const{
    return m_url_isSet;
}

bool OAITrusthub_v1_compliance_registration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITrusthub_v1_compliance_registration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inquiry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inquiry_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrusthub_v1_compliance_registration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
