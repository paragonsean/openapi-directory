/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1TrustProductsEntityAssignmentsApi_H
#define OAI_OAITrusthubV1TrustProductsEntityAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTrustProductEntityAssignmentResponse.h"
#include "OAITrusthub_v1_trust_product_trust_product_entity_assignment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1TrustProductsEntityAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1TrustProductsEntityAssignmentsApi(const int timeOut = 0);
    ~OAITrusthubV1TrustProductsEntityAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  object_sid QString [required]
    */
    virtual void createTrustProductEntityAssignment(const QString &trust_product_sid, const QString &object_sid);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteTrustProductEntityAssignment(const QString &trust_product_sid, const QString &sid);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTrustProductEntityAssignment(const QString &trust_product_sid, const QString &sid);

    /**
    * @param[in]  trust_product_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTrustProductEntityAssignment(const QString &trust_product_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTrustProductEntityAssignmentCallback(OAIHttpRequestWorker *worker);
    void deleteTrustProductEntityAssignmentCallback(OAIHttpRequestWorker *worker);
    void fetchTrustProductEntityAssignmentCallback(OAIHttpRequestWorker *worker);
    void listTrustProductEntityAssignmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTrustProductEntityAssignmentSignal(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary);
    void deleteTrustProductEntityAssignmentSignal();
    void fetchTrustProductEntityAssignmentSignal(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary);
    void listTrustProductEntityAssignmentSignal(OAIListTrustProductEntityAssignmentResponse summary);


    void createTrustProductEntityAssignmentSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product_trust_product_entity_assignment summary);
    void deleteTrustProductEntityAssignmentSignalFull(OAIHttpRequestWorker *worker);
    void fetchTrustProductEntityAssignmentSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_trust_product_trust_product_entity_assignment summary);
    void listTrustProductEntityAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIListTrustProductEntityAssignmentResponse summary);

    Q_DECL_DEPRECATED_X("Use createTrustProductEntityAssignmentSignalError() instead")
    void createTrustProductEntityAssignmentSignalE(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductEntityAssignmentSignalError(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrustProductEntityAssignmentSignalError() instead")
    void deleteTrustProductEntityAssignmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrustProductEntityAssignmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductEntityAssignmentSignalError() instead")
    void fetchTrustProductEntityAssignmentSignalE(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductEntityAssignmentSignalError(OAITrusthub_v1_trust_product_trust_product_entity_assignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductEntityAssignmentSignalError() instead")
    void listTrustProductEntityAssignmentSignalE(OAIListTrustProductEntityAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductEntityAssignmentSignalError(OAIListTrustProductEntityAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTrustProductEntityAssignmentSignalErrorFull() instead")
    void createTrustProductEntityAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrustProductEntityAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrustProductEntityAssignmentSignalErrorFull() instead")
    void deleteTrustProductEntityAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrustProductEntityAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTrustProductEntityAssignmentSignalErrorFull() instead")
    void fetchTrustProductEntityAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTrustProductEntityAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTrustProductEntityAssignmentSignalErrorFull() instead")
    void listTrustProductEntityAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTrustProductEntityAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
