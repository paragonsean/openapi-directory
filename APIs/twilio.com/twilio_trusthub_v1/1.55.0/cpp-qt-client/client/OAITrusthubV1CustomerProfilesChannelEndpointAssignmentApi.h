/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrusthubV1CustomerProfilesChannelEndpointAssignmentApi_H
#define OAI_OAITrusthubV1CustomerProfilesChannelEndpointAssignmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListCustomerProfileChannelEndpointAssignmentResponse.h"
#include "OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrusthubV1CustomerProfilesChannelEndpointAssignmentApi : public QObject {
    Q_OBJECT

public:
    OAITrusthubV1CustomerProfilesChannelEndpointAssignmentApi(const int timeOut = 0);
    ~OAITrusthubV1CustomerProfilesChannelEndpointAssignmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_profile_sid QString [required]
    * @param[in]  channel_endpoint_sid QString [required]
    * @param[in]  channel_endpoint_type QString [required]
    */
    virtual void createCustomerProfileChannelEndpointAssignment(const QString &customer_profile_sid, const QString &channel_endpoint_sid, const QString &channel_endpoint_type);

    /**
    * @param[in]  customer_profile_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteCustomerProfileChannelEndpointAssignment(const QString &customer_profile_sid, const QString &sid);

    /**
    * @param[in]  customer_profile_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchCustomerProfileChannelEndpointAssignment(const QString &customer_profile_sid, const QString &sid);

    /**
    * @param[in]  customer_profile_sid QString [required]
    * @param[in]  channel_endpoint_sid QString [optional]
    * @param[in]  channel_endpoint_sids QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCustomerProfileChannelEndpointAssignment(const QString &customer_profile_sid, const ::OpenAPI::OptionalParam<QString> &channel_endpoint_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel_endpoint_sids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomerProfileChannelEndpointAssignmentCallback(OAIHttpRequestWorker *worker);
    void deleteCustomerProfileChannelEndpointAssignmentCallback(OAIHttpRequestWorker *worker);
    void fetchCustomerProfileChannelEndpointAssignmentCallback(OAIHttpRequestWorker *worker);
    void listCustomerProfileChannelEndpointAssignmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomerProfileChannelEndpointAssignmentSignal(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary);
    void deleteCustomerProfileChannelEndpointAssignmentSignal();
    void fetchCustomerProfileChannelEndpointAssignmentSignal(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary);
    void listCustomerProfileChannelEndpointAssignmentSignal(OAIListCustomerProfileChannelEndpointAssignmentResponse summary);


    void createCustomerProfileChannelEndpointAssignmentSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary);
    void deleteCustomerProfileChannelEndpointAssignmentSignalFull(OAIHttpRequestWorker *worker);
    void fetchCustomerProfileChannelEndpointAssignmentSignalFull(OAIHttpRequestWorker *worker, OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary);
    void listCustomerProfileChannelEndpointAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIListCustomerProfileChannelEndpointAssignmentResponse summary);

    Q_DECL_DEPRECATED_X("Use createCustomerProfileChannelEndpointAssignmentSignalError() instead")
    void createCustomerProfileChannelEndpointAssignmentSignalE(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerProfileChannelEndpointAssignmentSignalError(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerProfileChannelEndpointAssignmentSignalError() instead")
    void deleteCustomerProfileChannelEndpointAssignmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerProfileChannelEndpointAssignmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCustomerProfileChannelEndpointAssignmentSignalError() instead")
    void fetchCustomerProfileChannelEndpointAssignmentSignalE(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCustomerProfileChannelEndpointAssignmentSignalError(OAITrusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerProfileChannelEndpointAssignmentSignalError() instead")
    void listCustomerProfileChannelEndpointAssignmentSignalE(OAIListCustomerProfileChannelEndpointAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerProfileChannelEndpointAssignmentSignalError(OAIListCustomerProfileChannelEndpointAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomerProfileChannelEndpointAssignmentSignalErrorFull() instead")
    void createCustomerProfileChannelEndpointAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerProfileChannelEndpointAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerProfileChannelEndpointAssignmentSignalErrorFull() instead")
    void deleteCustomerProfileChannelEndpointAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerProfileChannelEndpointAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCustomerProfileChannelEndpointAssignmentSignalErrorFull() instead")
    void fetchCustomerProfileChannelEndpointAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCustomerProfileChannelEndpointAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerProfileChannelEndpointAssignmentSignalErrorFull() instead")
    void listCustomerProfileChannelEndpointAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerProfileChannelEndpointAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
