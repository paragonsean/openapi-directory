/**
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrusthubV1ComplianceRegistrationInquiriesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITrusthubV1ComplianceRegistrationInquiriesApi::OAITrusthubV1ComplianceRegistrationInquiriesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITrusthubV1ComplianceRegistrationInquiriesApi::~OAITrusthubV1ComplianceRegistrationInquiriesApi() {
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://trusthub.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://trusthub.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createComplianceRegistration", serverConf);
    _serverIndices.insert("createComplianceRegistration", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITrusthubV1ComplianceRegistrationInquiriesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITrusthubV1ComplianceRegistrationInquiriesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setUsername(const QString &username) {
    _username = username;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setPassword(const QString &password) {
    _password = password;
}


void OAITrusthubV1ComplianceRegistrationInquiriesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITrusthubV1ComplianceRegistrationInquiriesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITrusthubV1ComplianceRegistrationInquiriesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITrusthubV1ComplianceRegistrationInquiriesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITrusthubV1ComplianceRegistrationInquiriesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITrusthubV1ComplianceRegistrationInquiriesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITrusthubV1ComplianceRegistrationInquiriesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::createComplianceRegistration(const OAICompliance_registration_enum_end_user_type &end_user_type, const OAICompliance_registration_enum_phone_number_type &phone_number_type, const ::OpenAPI::OptionalParam<bool> &accepted_notification_receipt, const ::OpenAPI::OptionalParam<QString> &address_city, const ::OpenAPI::OptionalParam<QString> &address_country_code, const ::OpenAPI::OptionalParam<QString> &address_postal_code, const ::OpenAPI::OptionalParam<QString> &address_street, const ::OpenAPI::OptionalParam<QString> &address_street_secondary, const ::OpenAPI::OptionalParam<QString> &address_subdivision, const ::OpenAPI::OptionalParam<QString> &authorized_representative1_date_of_birth, const ::OpenAPI::OptionalParam<QString> &authorized_representative1_email, const ::OpenAPI::OptionalParam<QString> &authorized_representative1_first_name, const ::OpenAPI::OptionalParam<QString> &authorized_representative1_last_name, const ::OpenAPI::OptionalParam<QString> &authorized_representative1_phone, const ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_identity_type> &business_identity_type, const ::OpenAPI::OptionalParam<QString> &business_legal_name, const ::OpenAPI::OptionalParam<OAICompliance_registration_enum_business_registration_authority> &business_registration_authority, const ::OpenAPI::OptionalParam<QString> &business_registration_number, const ::OpenAPI::OptionalParam<QString> &business_website_url, const ::OpenAPI::OptionalParam<QString> &date_of_birth, const ::OpenAPI::OptionalParam<QString> &emergency_address_city, const ::OpenAPI::OptionalParam<QString> &emergency_address_country_code, const ::OpenAPI::OptionalParam<QString> &emergency_address_postal_code, const ::OpenAPI::OptionalParam<QString> &emergency_address_street, const ::OpenAPI::OptionalParam<QString> &emergency_address_street_secondary, const ::OpenAPI::OptionalParam<QString> &emergency_address_subdivision, const ::OpenAPI::OptionalParam<QString> &file, const ::OpenAPI::OptionalParam<QString> &file_name, const ::OpenAPI::OptionalParam<QString> &first_name, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<QString> &individual_email, const ::OpenAPI::OptionalParam<QString> &individual_phone, const ::OpenAPI::OptionalParam<bool> &is_isv_embed, const ::OpenAPI::OptionalParam<QString> &last_name, const ::OpenAPI::OptionalParam<QString> &notification_email, const ::OpenAPI::OptionalParam<bool> &use_address_as_emergency_address) {
    QString fullPath = QString(_serverConfigs["createComplianceRegistration"][_serverIndices.value("createComplianceRegistration")].URL()+"/v1/ComplianceInquiries/Registration/RegulatoryCompliance/GB/Initialize");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (accepted_notification_receipt.hasValue())
    {
        input.add_var("AcceptedNotificationReceipt", ::OpenAPI::toStringValue(accepted_notification_receipt.value()));
    }
    if (address_city.hasValue())
    {
        input.add_var("AddressCity", ::OpenAPI::toStringValue(address_city.value()));
    }
    if (address_country_code.hasValue())
    {
        input.add_var("AddressCountryCode", ::OpenAPI::toStringValue(address_country_code.value()));
    }
    if (address_postal_code.hasValue())
    {
        input.add_var("AddressPostalCode", ::OpenAPI::toStringValue(address_postal_code.value()));
    }
    if (address_street.hasValue())
    {
        input.add_var("AddressStreet", ::OpenAPI::toStringValue(address_street.value()));
    }
    if (address_street_secondary.hasValue())
    {
        input.add_var("AddressStreetSecondary", ::OpenAPI::toStringValue(address_street_secondary.value()));
    }
    if (address_subdivision.hasValue())
    {
        input.add_var("AddressSubdivision", ::OpenAPI::toStringValue(address_subdivision.value()));
    }
    if (authorized_representative1_date_of_birth.hasValue())
    {
        input.add_var("AuthorizedRepresentative1DateOfBirth", ::OpenAPI::toStringValue(authorized_representative1_date_of_birth.value()));
    }
    if (authorized_representative1_email.hasValue())
    {
        input.add_var("AuthorizedRepresentative1Email", ::OpenAPI::toStringValue(authorized_representative1_email.value()));
    }
    if (authorized_representative1_first_name.hasValue())
    {
        input.add_var("AuthorizedRepresentative1FirstName", ::OpenAPI::toStringValue(authorized_representative1_first_name.value()));
    }
    if (authorized_representative1_last_name.hasValue())
    {
        input.add_var("AuthorizedRepresentative1LastName", ::OpenAPI::toStringValue(authorized_representative1_last_name.value()));
    }
    if (authorized_representative1_phone.hasValue())
    {
        input.add_var("AuthorizedRepresentative1Phone", ::OpenAPI::toStringValue(authorized_representative1_phone.value()));
    }
    if (business_identity_type.hasValue())
    {
        input.add_var("BusinessIdentityType", ::OpenAPI::toStringValue(business_identity_type.value()));
    }
    if (business_legal_name.hasValue())
    {
        input.add_var("BusinessLegalName", ::OpenAPI::toStringValue(business_legal_name.value()));
    }
    if (business_registration_authority.hasValue())
    {
        input.add_var("BusinessRegistrationAuthority", ::OpenAPI::toStringValue(business_registration_authority.value()));
    }
    if (business_registration_number.hasValue())
    {
        input.add_var("BusinessRegistrationNumber", ::OpenAPI::toStringValue(business_registration_number.value()));
    }
    if (business_website_url.hasValue())
    {
        input.add_var("BusinessWebsiteUrl", ::OpenAPI::toStringValue(business_website_url.value()));
    }
    if (date_of_birth.hasValue())
    {
        input.add_var("DateOfBirth", ::OpenAPI::toStringValue(date_of_birth.value()));
    }
    if (emergency_address_city.hasValue())
    {
        input.add_var("EmergencyAddressCity", ::OpenAPI::toStringValue(emergency_address_city.value()));
    }
    if (emergency_address_country_code.hasValue())
    {
        input.add_var("EmergencyAddressCountryCode", ::OpenAPI::toStringValue(emergency_address_country_code.value()));
    }
    if (emergency_address_postal_code.hasValue())
    {
        input.add_var("EmergencyAddressPostalCode", ::OpenAPI::toStringValue(emergency_address_postal_code.value()));
    }
    if (emergency_address_street.hasValue())
    {
        input.add_var("EmergencyAddressStreet", ::OpenAPI::toStringValue(emergency_address_street.value()));
    }
    if (emergency_address_street_secondary.hasValue())
    {
        input.add_var("EmergencyAddressStreetSecondary", ::OpenAPI::toStringValue(emergency_address_street_secondary.value()));
    }
    if (emergency_address_subdivision.hasValue())
    {
        input.add_var("EmergencyAddressSubdivision", ::OpenAPI::toStringValue(emergency_address_subdivision.value()));
    }
    
    {
        input.add_var("EndUserType", ::OpenAPI::toStringValue(end_user_type));
    }
    if (file.hasValue())
    {
        input.add_var("File", ::OpenAPI::toStringValue(file.value()));
    }
    if (file_name.hasValue())
    {
        input.add_var("FileName", ::OpenAPI::toStringValue(file_name.value()));
    }
    if (first_name.hasValue())
    {
        input.add_var("FirstName", ::OpenAPI::toStringValue(first_name.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    if (individual_email.hasValue())
    {
        input.add_var("IndividualEmail", ::OpenAPI::toStringValue(individual_email.value()));
    }
    if (individual_phone.hasValue())
    {
        input.add_var("IndividualPhone", ::OpenAPI::toStringValue(individual_phone.value()));
    }
    if (is_isv_embed.hasValue())
    {
        input.add_var("IsIsvEmbed", ::OpenAPI::toStringValue(is_isv_embed.value()));
    }
    if (last_name.hasValue())
    {
        input.add_var("LastName", ::OpenAPI::toStringValue(last_name.value()));
    }
    if (notification_email.hasValue())
    {
        input.add_var("NotificationEmail", ::OpenAPI::toStringValue(notification_email.value()));
    }
    
    {
        input.add_var("PhoneNumberType", ::OpenAPI::toStringValue(phone_number_type));
    }
    if (use_address_as_emergency_address.hasValue())
    {
        input.add_var("UseAddressAsEmergencyAddress", ::OpenAPI::toStringValue(use_address_as_emergency_address.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITrusthubV1ComplianceRegistrationInquiriesApi::createComplianceRegistrationCallback);
    connect(this, &OAITrusthubV1ComplianceRegistrationInquiriesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::createComplianceRegistrationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITrusthub_v1_compliance_registration output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createComplianceRegistrationSignal(output);
        Q_EMIT createComplianceRegistrationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createComplianceRegistrationSignalE(output, error_type, error_str);
        Q_EMIT createComplianceRegistrationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createComplianceRegistrationSignalError(output, error_type, error_str);
        Q_EMIT createComplianceRegistrationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITrusthubV1ComplianceRegistrationInquiriesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
