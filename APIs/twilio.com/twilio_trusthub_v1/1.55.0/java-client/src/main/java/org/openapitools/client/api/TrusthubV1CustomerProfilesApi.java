/*
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerProfileEnumStatus;
import org.openapitools.client.model.ListCustomerProfileResponse;
import org.openapitools.client.model.TrusthubV1CustomerProfile;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrusthubV1CustomerProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrusthubV1CustomerProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrusthubV1CustomerProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomerProfile
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (policySid != null) {
            localVarFormParams.put("PolicySid", policySid);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerProfileValidateBeforeCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createCustomerProfile(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createCustomerProfile(Async)");
        }

        // verify the required parameter 'policySid' is set
        if (policySid == null) {
            throw new ApiException("Missing the required parameter 'policySid' when calling createCustomerProfile(Async)");
        }

        return createCustomerProfileCall(email, friendlyName, policySid, statusCallback, _callback);

    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile createCustomerProfile(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = createCustomerProfileWithHttpInfo(email, friendlyName, policySid, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> createCustomerProfileWithHttpInfo(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = createCustomerProfileValidateBeforeCall(email, friendlyName, policySid, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileAsync(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerProfileValidateBeforeCall(email, friendlyName, policySid, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCustomerProfile(Async)");
        }

        return deleteCustomerProfileCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomerProfile(String sid) throws ApiException {
        deleteCustomerProfileWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerProfileValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerProfileValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCustomerProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCustomerProfile(Async)");
        }

        return fetchCustomerProfileCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile fetchCustomerProfile(String sid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = fetchCustomerProfileWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> fetchCustomerProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCustomerProfileValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileAsync(String sid, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCustomerProfileValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerProfile
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileCall(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (policySid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicySid", policySid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerProfileValidateBeforeCall(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listCustomerProfileCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCustomerProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerProfileResponse listCustomerProfile(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCustomerProfileResponse> localVarResp = listCustomerProfileWithHttpInfo(status, friendlyName, policySid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCustomerProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerProfileResponse> listCustomerProfileWithHttpInfo(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCustomerProfileValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCustomerProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileAsync(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCustomerProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerProfileValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerProfileCall(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerProfileValidateBeforeCall(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateCustomerProfile(Async)");
        }

        return updateCustomerProfileCall(sid, email, friendlyName, status, statusCallback, _callback);

    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile updateCustomerProfile(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = updateCustomerProfileWithHttpInfo(sid, email, friendlyName, status, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> updateCustomerProfileWithHttpInfo(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerProfileValidateBeforeCall(sid, email, friendlyName, status, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerProfileAsync(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerProfileValidateBeforeCall(sid, email, friendlyName, status, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
