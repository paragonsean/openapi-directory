/*
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ComplianceRegistrationEnumBusinessIdentityType;
import org.openapitools.client.model.ComplianceRegistrationEnumBusinessRegistrationAuthority;
import org.openapitools.client.model.ComplianceRegistrationEnumEndUserType;
import org.openapitools.client.model.ComplianceRegistrationEnumPhoneNumberType;
import org.openapitools.client.model.TrusthubV1ComplianceRegistration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrusthubV1ComplianceRegistrationInquiriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrusthubV1ComplianceRegistrationInquiriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrusthubV1ComplianceRegistrationInquiriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createComplianceRegistration
     * @param endUserType  (required)
     * @param phoneNumberType  (required)
     * @param acceptedNotificationReceipt The email address to receive the notification about the verification result. (optional)
     * @param addressCity City of the business (optional)
     * @param addressCountryCode Country code of the business (optional)
     * @param addressPostalCode Postal code of the business (optional)
     * @param addressStreet Street address of the business (optional)
     * @param addressStreetSecondary Street address of the business (optional)
     * @param addressSubdivision State or province of the business (optional)
     * @param authorizedRepresentative1DateOfBirth Birthdate of the authorized representative (optional)
     * @param authorizedRepresentative1Email Email address of the authorized representative (optional)
     * @param authorizedRepresentative1FirstName First name of the authorized representative (optional)
     * @param authorizedRepresentative1LastName Last name of the authorized representative (optional)
     * @param authorizedRepresentative1Phone Phone number of the authorized representative (optional)
     * @param businessIdentityType  (optional)
     * @param businessLegalName he name of the business or organization using the Tollfree number. (optional)
     * @param businessRegistrationAuthority  (optional)
     * @param businessRegistrationNumber Business registration number of the business (optional)
     * @param businessWebsiteUrl The URL of the business website (optional)
     * @param dateOfBirth The date of birth of the Individual User. (optional)
     * @param emergencyAddressCity City of the business (optional)
     * @param emergencyAddressCountryCode Country code of the business (optional)
     * @param emergencyAddressPostalCode Postal code of the business (optional)
     * @param emergencyAddressStreet Street address of the business (optional)
     * @param emergencyAddressStreetSecondary Street address of the business (optional)
     * @param emergencyAddressSubdivision State or province of the business (optional)
     * @param _file The verification document to upload (optional)
     * @param fileName The name of the verification document to upload (optional)
     * @param firstName The first name of the Individual User. (optional)
     * @param friendlyName Friendly name for your business information (optional)
     * @param individualEmail The email address of the Individual User. (optional)
     * @param individualPhone The phone number of the Individual User. (optional)
     * @param isIsvEmbed Indicates if the inquiry is being started from an ISV embedded component. (optional)
     * @param lastName The last name of the Individual User. (optional)
     * @param notificationEmail he email address to receive the notification about the verification result. (optional)
     * @param useAddressAsEmergencyAddress Use the business address as the emergency address (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createComplianceRegistrationCall(ComplianceRegistrationEnumEndUserType endUserType, ComplianceRegistrationEnumPhoneNumberType phoneNumberType, Boolean acceptedNotificationReceipt, String addressCity, String addressCountryCode, String addressPostalCode, String addressStreet, String addressStreetSecondary, String addressSubdivision, String authorizedRepresentative1DateOfBirth, String authorizedRepresentative1Email, String authorizedRepresentative1FirstName, String authorizedRepresentative1LastName, String authorizedRepresentative1Phone, ComplianceRegistrationEnumBusinessIdentityType businessIdentityType, String businessLegalName, ComplianceRegistrationEnumBusinessRegistrationAuthority businessRegistrationAuthority, String businessRegistrationNumber, String businessWebsiteUrl, String dateOfBirth, String emergencyAddressCity, String emergencyAddressCountryCode, String emergencyAddressPostalCode, String emergencyAddressStreet, String emergencyAddressStreetSecondary, String emergencyAddressSubdivision, String _file, String fileName, String firstName, String friendlyName, String individualEmail, String individualPhone, Boolean isIsvEmbed, String lastName, String notificationEmail, Boolean useAddressAsEmergencyAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ComplianceInquiries/Registration/RegulatoryCompliance/GB/Initialize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptedNotificationReceipt != null) {
            localVarFormParams.put("AcceptedNotificationReceipt", acceptedNotificationReceipt);
        }

        if (addressCity != null) {
            localVarFormParams.put("AddressCity", addressCity);
        }

        if (addressCountryCode != null) {
            localVarFormParams.put("AddressCountryCode", addressCountryCode);
        }

        if (addressPostalCode != null) {
            localVarFormParams.put("AddressPostalCode", addressPostalCode);
        }

        if (addressStreet != null) {
            localVarFormParams.put("AddressStreet", addressStreet);
        }

        if (addressStreetSecondary != null) {
            localVarFormParams.put("AddressStreetSecondary", addressStreetSecondary);
        }

        if (addressSubdivision != null) {
            localVarFormParams.put("AddressSubdivision", addressSubdivision);
        }

        if (authorizedRepresentative1DateOfBirth != null) {
            localVarFormParams.put("AuthorizedRepresentative1DateOfBirth", authorizedRepresentative1DateOfBirth);
        }

        if (authorizedRepresentative1Email != null) {
            localVarFormParams.put("AuthorizedRepresentative1Email", authorizedRepresentative1Email);
        }

        if (authorizedRepresentative1FirstName != null) {
            localVarFormParams.put("AuthorizedRepresentative1FirstName", authorizedRepresentative1FirstName);
        }

        if (authorizedRepresentative1LastName != null) {
            localVarFormParams.put("AuthorizedRepresentative1LastName", authorizedRepresentative1LastName);
        }

        if (authorizedRepresentative1Phone != null) {
            localVarFormParams.put("AuthorizedRepresentative1Phone", authorizedRepresentative1Phone);
        }

        if (businessIdentityType != null) {
            localVarFormParams.put("BusinessIdentityType", businessIdentityType);
        }

        if (businessLegalName != null) {
            localVarFormParams.put("BusinessLegalName", businessLegalName);
        }

        if (businessRegistrationAuthority != null) {
            localVarFormParams.put("BusinessRegistrationAuthority", businessRegistrationAuthority);
        }

        if (businessRegistrationNumber != null) {
            localVarFormParams.put("BusinessRegistrationNumber", businessRegistrationNumber);
        }

        if (businessWebsiteUrl != null) {
            localVarFormParams.put("BusinessWebsiteUrl", businessWebsiteUrl);
        }

        if (dateOfBirth != null) {
            localVarFormParams.put("DateOfBirth", dateOfBirth);
        }

        if (emergencyAddressCity != null) {
            localVarFormParams.put("EmergencyAddressCity", emergencyAddressCity);
        }

        if (emergencyAddressCountryCode != null) {
            localVarFormParams.put("EmergencyAddressCountryCode", emergencyAddressCountryCode);
        }

        if (emergencyAddressPostalCode != null) {
            localVarFormParams.put("EmergencyAddressPostalCode", emergencyAddressPostalCode);
        }

        if (emergencyAddressStreet != null) {
            localVarFormParams.put("EmergencyAddressStreet", emergencyAddressStreet);
        }

        if (emergencyAddressStreetSecondary != null) {
            localVarFormParams.put("EmergencyAddressStreetSecondary", emergencyAddressStreetSecondary);
        }

        if (emergencyAddressSubdivision != null) {
            localVarFormParams.put("EmergencyAddressSubdivision", emergencyAddressSubdivision);
        }

        if (endUserType != null) {
            localVarFormParams.put("EndUserType", endUserType);
        }

        if (_file != null) {
            localVarFormParams.put("File", _file);
        }

        if (fileName != null) {
            localVarFormParams.put("FileName", fileName);
        }

        if (firstName != null) {
            localVarFormParams.put("FirstName", firstName);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (individualEmail != null) {
            localVarFormParams.put("IndividualEmail", individualEmail);
        }

        if (individualPhone != null) {
            localVarFormParams.put("IndividualPhone", individualPhone);
        }

        if (isIsvEmbed != null) {
            localVarFormParams.put("IsIsvEmbed", isIsvEmbed);
        }

        if (lastName != null) {
            localVarFormParams.put("LastName", lastName);
        }

        if (notificationEmail != null) {
            localVarFormParams.put("NotificationEmail", notificationEmail);
        }

        if (phoneNumberType != null) {
            localVarFormParams.put("PhoneNumberType", phoneNumberType);
        }

        if (useAddressAsEmergencyAddress != null) {
            localVarFormParams.put("UseAddressAsEmergencyAddress", useAddressAsEmergencyAddress);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createComplianceRegistrationValidateBeforeCall(ComplianceRegistrationEnumEndUserType endUserType, ComplianceRegistrationEnumPhoneNumberType phoneNumberType, Boolean acceptedNotificationReceipt, String addressCity, String addressCountryCode, String addressPostalCode, String addressStreet, String addressStreetSecondary, String addressSubdivision, String authorizedRepresentative1DateOfBirth, String authorizedRepresentative1Email, String authorizedRepresentative1FirstName, String authorizedRepresentative1LastName, String authorizedRepresentative1Phone, ComplianceRegistrationEnumBusinessIdentityType businessIdentityType, String businessLegalName, ComplianceRegistrationEnumBusinessRegistrationAuthority businessRegistrationAuthority, String businessRegistrationNumber, String businessWebsiteUrl, String dateOfBirth, String emergencyAddressCity, String emergencyAddressCountryCode, String emergencyAddressPostalCode, String emergencyAddressStreet, String emergencyAddressStreetSecondary, String emergencyAddressSubdivision, String _file, String fileName, String firstName, String friendlyName, String individualEmail, String individualPhone, Boolean isIsvEmbed, String lastName, String notificationEmail, Boolean useAddressAsEmergencyAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endUserType' is set
        if (endUserType == null) {
            throw new ApiException("Missing the required parameter 'endUserType' when calling createComplianceRegistration(Async)");
        }

        // verify the required parameter 'phoneNumberType' is set
        if (phoneNumberType == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberType' when calling createComplianceRegistration(Async)");
        }

        return createComplianceRegistrationCall(endUserType, phoneNumberType, acceptedNotificationReceipt, addressCity, addressCountryCode, addressPostalCode, addressStreet, addressStreetSecondary, addressSubdivision, authorizedRepresentative1DateOfBirth, authorizedRepresentative1Email, authorizedRepresentative1FirstName, authorizedRepresentative1LastName, authorizedRepresentative1Phone, businessIdentityType, businessLegalName, businessRegistrationAuthority, businessRegistrationNumber, businessWebsiteUrl, dateOfBirth, emergencyAddressCity, emergencyAddressCountryCode, emergencyAddressPostalCode, emergencyAddressStreet, emergencyAddressStreetSecondary, emergencyAddressSubdivision, _file, fileName, firstName, friendlyName, individualEmail, individualPhone, isIsvEmbed, lastName, notificationEmail, useAddressAsEmergencyAddress, _callback);

    }

    /**
     * 
     * Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session.
     * @param endUserType  (required)
     * @param phoneNumberType  (required)
     * @param acceptedNotificationReceipt The email address to receive the notification about the verification result. (optional)
     * @param addressCity City of the business (optional)
     * @param addressCountryCode Country code of the business (optional)
     * @param addressPostalCode Postal code of the business (optional)
     * @param addressStreet Street address of the business (optional)
     * @param addressStreetSecondary Street address of the business (optional)
     * @param addressSubdivision State or province of the business (optional)
     * @param authorizedRepresentative1DateOfBirth Birthdate of the authorized representative (optional)
     * @param authorizedRepresentative1Email Email address of the authorized representative (optional)
     * @param authorizedRepresentative1FirstName First name of the authorized representative (optional)
     * @param authorizedRepresentative1LastName Last name of the authorized representative (optional)
     * @param authorizedRepresentative1Phone Phone number of the authorized representative (optional)
     * @param businessIdentityType  (optional)
     * @param businessLegalName he name of the business or organization using the Tollfree number. (optional)
     * @param businessRegistrationAuthority  (optional)
     * @param businessRegistrationNumber Business registration number of the business (optional)
     * @param businessWebsiteUrl The URL of the business website (optional)
     * @param dateOfBirth The date of birth of the Individual User. (optional)
     * @param emergencyAddressCity City of the business (optional)
     * @param emergencyAddressCountryCode Country code of the business (optional)
     * @param emergencyAddressPostalCode Postal code of the business (optional)
     * @param emergencyAddressStreet Street address of the business (optional)
     * @param emergencyAddressStreetSecondary Street address of the business (optional)
     * @param emergencyAddressSubdivision State or province of the business (optional)
     * @param _file The verification document to upload (optional)
     * @param fileName The name of the verification document to upload (optional)
     * @param firstName The first name of the Individual User. (optional)
     * @param friendlyName Friendly name for your business information (optional)
     * @param individualEmail The email address of the Individual User. (optional)
     * @param individualPhone The phone number of the Individual User. (optional)
     * @param isIsvEmbed Indicates if the inquiry is being started from an ISV embedded component. (optional)
     * @param lastName The last name of the Individual User. (optional)
     * @param notificationEmail he email address to receive the notification about the verification result. (optional)
     * @param useAddressAsEmergencyAddress Use the business address as the emergency address (optional)
     * @return TrusthubV1ComplianceRegistration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1ComplianceRegistration createComplianceRegistration(ComplianceRegistrationEnumEndUserType endUserType, ComplianceRegistrationEnumPhoneNumberType phoneNumberType, Boolean acceptedNotificationReceipt, String addressCity, String addressCountryCode, String addressPostalCode, String addressStreet, String addressStreetSecondary, String addressSubdivision, String authorizedRepresentative1DateOfBirth, String authorizedRepresentative1Email, String authorizedRepresentative1FirstName, String authorizedRepresentative1LastName, String authorizedRepresentative1Phone, ComplianceRegistrationEnumBusinessIdentityType businessIdentityType, String businessLegalName, ComplianceRegistrationEnumBusinessRegistrationAuthority businessRegistrationAuthority, String businessRegistrationNumber, String businessWebsiteUrl, String dateOfBirth, String emergencyAddressCity, String emergencyAddressCountryCode, String emergencyAddressPostalCode, String emergencyAddressStreet, String emergencyAddressStreetSecondary, String emergencyAddressSubdivision, String _file, String fileName, String firstName, String friendlyName, String individualEmail, String individualPhone, Boolean isIsvEmbed, String lastName, String notificationEmail, Boolean useAddressAsEmergencyAddress) throws ApiException {
        ApiResponse<TrusthubV1ComplianceRegistration> localVarResp = createComplianceRegistrationWithHttpInfo(endUserType, phoneNumberType, acceptedNotificationReceipt, addressCity, addressCountryCode, addressPostalCode, addressStreet, addressStreetSecondary, addressSubdivision, authorizedRepresentative1DateOfBirth, authorizedRepresentative1Email, authorizedRepresentative1FirstName, authorizedRepresentative1LastName, authorizedRepresentative1Phone, businessIdentityType, businessLegalName, businessRegistrationAuthority, businessRegistrationNumber, businessWebsiteUrl, dateOfBirth, emergencyAddressCity, emergencyAddressCountryCode, emergencyAddressPostalCode, emergencyAddressStreet, emergencyAddressStreetSecondary, emergencyAddressSubdivision, _file, fileName, firstName, friendlyName, individualEmail, individualPhone, isIsvEmbed, lastName, notificationEmail, useAddressAsEmergencyAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session.
     * @param endUserType  (required)
     * @param phoneNumberType  (required)
     * @param acceptedNotificationReceipt The email address to receive the notification about the verification result. (optional)
     * @param addressCity City of the business (optional)
     * @param addressCountryCode Country code of the business (optional)
     * @param addressPostalCode Postal code of the business (optional)
     * @param addressStreet Street address of the business (optional)
     * @param addressStreetSecondary Street address of the business (optional)
     * @param addressSubdivision State or province of the business (optional)
     * @param authorizedRepresentative1DateOfBirth Birthdate of the authorized representative (optional)
     * @param authorizedRepresentative1Email Email address of the authorized representative (optional)
     * @param authorizedRepresentative1FirstName First name of the authorized representative (optional)
     * @param authorizedRepresentative1LastName Last name of the authorized representative (optional)
     * @param authorizedRepresentative1Phone Phone number of the authorized representative (optional)
     * @param businessIdentityType  (optional)
     * @param businessLegalName he name of the business or organization using the Tollfree number. (optional)
     * @param businessRegistrationAuthority  (optional)
     * @param businessRegistrationNumber Business registration number of the business (optional)
     * @param businessWebsiteUrl The URL of the business website (optional)
     * @param dateOfBirth The date of birth of the Individual User. (optional)
     * @param emergencyAddressCity City of the business (optional)
     * @param emergencyAddressCountryCode Country code of the business (optional)
     * @param emergencyAddressPostalCode Postal code of the business (optional)
     * @param emergencyAddressStreet Street address of the business (optional)
     * @param emergencyAddressStreetSecondary Street address of the business (optional)
     * @param emergencyAddressSubdivision State or province of the business (optional)
     * @param _file The verification document to upload (optional)
     * @param fileName The name of the verification document to upload (optional)
     * @param firstName The first name of the Individual User. (optional)
     * @param friendlyName Friendly name for your business information (optional)
     * @param individualEmail The email address of the Individual User. (optional)
     * @param individualPhone The phone number of the Individual User. (optional)
     * @param isIsvEmbed Indicates if the inquiry is being started from an ISV embedded component. (optional)
     * @param lastName The last name of the Individual User. (optional)
     * @param notificationEmail he email address to receive the notification about the verification result. (optional)
     * @param useAddressAsEmergencyAddress Use the business address as the emergency address (optional)
     * @return ApiResponse&lt;TrusthubV1ComplianceRegistration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1ComplianceRegistration> createComplianceRegistrationWithHttpInfo(ComplianceRegistrationEnumEndUserType endUserType, ComplianceRegistrationEnumPhoneNumberType phoneNumberType, Boolean acceptedNotificationReceipt, String addressCity, String addressCountryCode, String addressPostalCode, String addressStreet, String addressStreetSecondary, String addressSubdivision, String authorizedRepresentative1DateOfBirth, String authorizedRepresentative1Email, String authorizedRepresentative1FirstName, String authorizedRepresentative1LastName, String authorizedRepresentative1Phone, ComplianceRegistrationEnumBusinessIdentityType businessIdentityType, String businessLegalName, ComplianceRegistrationEnumBusinessRegistrationAuthority businessRegistrationAuthority, String businessRegistrationNumber, String businessWebsiteUrl, String dateOfBirth, String emergencyAddressCity, String emergencyAddressCountryCode, String emergencyAddressPostalCode, String emergencyAddressStreet, String emergencyAddressStreetSecondary, String emergencyAddressSubdivision, String _file, String fileName, String firstName, String friendlyName, String individualEmail, String individualPhone, Boolean isIsvEmbed, String lastName, String notificationEmail, Boolean useAddressAsEmergencyAddress) throws ApiException {
        okhttp3.Call localVarCall = createComplianceRegistrationValidateBeforeCall(endUserType, phoneNumberType, acceptedNotificationReceipt, addressCity, addressCountryCode, addressPostalCode, addressStreet, addressStreetSecondary, addressSubdivision, authorizedRepresentative1DateOfBirth, authorizedRepresentative1Email, authorizedRepresentative1FirstName, authorizedRepresentative1LastName, authorizedRepresentative1Phone, businessIdentityType, businessLegalName, businessRegistrationAuthority, businessRegistrationNumber, businessWebsiteUrl, dateOfBirth, emergencyAddressCity, emergencyAddressCountryCode, emergencyAddressPostalCode, emergencyAddressStreet, emergencyAddressStreetSecondary, emergencyAddressSubdivision, _file, fileName, firstName, friendlyName, individualEmail, individualPhone, isIsvEmbed, lastName, notificationEmail, useAddressAsEmergencyAddress, null);
        Type localVarReturnType = new TypeToken<TrusthubV1ComplianceRegistration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Compliance Registration Inquiry for the authenticated account. This is necessary to start a new embedded session.
     * @param endUserType  (required)
     * @param phoneNumberType  (required)
     * @param acceptedNotificationReceipt The email address to receive the notification about the verification result. (optional)
     * @param addressCity City of the business (optional)
     * @param addressCountryCode Country code of the business (optional)
     * @param addressPostalCode Postal code of the business (optional)
     * @param addressStreet Street address of the business (optional)
     * @param addressStreetSecondary Street address of the business (optional)
     * @param addressSubdivision State or province of the business (optional)
     * @param authorizedRepresentative1DateOfBirth Birthdate of the authorized representative (optional)
     * @param authorizedRepresentative1Email Email address of the authorized representative (optional)
     * @param authorizedRepresentative1FirstName First name of the authorized representative (optional)
     * @param authorizedRepresentative1LastName Last name of the authorized representative (optional)
     * @param authorizedRepresentative1Phone Phone number of the authorized representative (optional)
     * @param businessIdentityType  (optional)
     * @param businessLegalName he name of the business or organization using the Tollfree number. (optional)
     * @param businessRegistrationAuthority  (optional)
     * @param businessRegistrationNumber Business registration number of the business (optional)
     * @param businessWebsiteUrl The URL of the business website (optional)
     * @param dateOfBirth The date of birth of the Individual User. (optional)
     * @param emergencyAddressCity City of the business (optional)
     * @param emergencyAddressCountryCode Country code of the business (optional)
     * @param emergencyAddressPostalCode Postal code of the business (optional)
     * @param emergencyAddressStreet Street address of the business (optional)
     * @param emergencyAddressStreetSecondary Street address of the business (optional)
     * @param emergencyAddressSubdivision State or province of the business (optional)
     * @param _file The verification document to upload (optional)
     * @param fileName The name of the verification document to upload (optional)
     * @param firstName The first name of the Individual User. (optional)
     * @param friendlyName Friendly name for your business information (optional)
     * @param individualEmail The email address of the Individual User. (optional)
     * @param individualPhone The phone number of the Individual User. (optional)
     * @param isIsvEmbed Indicates if the inquiry is being started from an ISV embedded component. (optional)
     * @param lastName The last name of the Individual User. (optional)
     * @param notificationEmail he email address to receive the notification about the verification result. (optional)
     * @param useAddressAsEmergencyAddress Use the business address as the emergency address (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createComplianceRegistrationAsync(ComplianceRegistrationEnumEndUserType endUserType, ComplianceRegistrationEnumPhoneNumberType phoneNumberType, Boolean acceptedNotificationReceipt, String addressCity, String addressCountryCode, String addressPostalCode, String addressStreet, String addressStreetSecondary, String addressSubdivision, String authorizedRepresentative1DateOfBirth, String authorizedRepresentative1Email, String authorizedRepresentative1FirstName, String authorizedRepresentative1LastName, String authorizedRepresentative1Phone, ComplianceRegistrationEnumBusinessIdentityType businessIdentityType, String businessLegalName, ComplianceRegistrationEnumBusinessRegistrationAuthority businessRegistrationAuthority, String businessRegistrationNumber, String businessWebsiteUrl, String dateOfBirth, String emergencyAddressCity, String emergencyAddressCountryCode, String emergencyAddressPostalCode, String emergencyAddressStreet, String emergencyAddressStreetSecondary, String emergencyAddressSubdivision, String _file, String fileName, String firstName, String friendlyName, String individualEmail, String individualPhone, Boolean isIsvEmbed, String lastName, String notificationEmail, Boolean useAddressAsEmergencyAddress, final ApiCallback<TrusthubV1ComplianceRegistration> _callback) throws ApiException {

        okhttp3.Call localVarCall = createComplianceRegistrationValidateBeforeCall(endUserType, phoneNumberType, acceptedNotificationReceipt, addressCity, addressCountryCode, addressPostalCode, addressStreet, addressStreetSecondary, addressSubdivision, authorizedRepresentative1DateOfBirth, authorizedRepresentative1Email, authorizedRepresentative1FirstName, authorizedRepresentative1LastName, authorizedRepresentative1Phone, businessIdentityType, businessLegalName, businessRegistrationAuthority, businessRegistrationNumber, businessWebsiteUrl, dateOfBirth, emergencyAddressCity, emergencyAddressCountryCode, emergencyAddressPostalCode, emergencyAddressStreet, emergencyAddressStreetSecondary, emergencyAddressSubdivision, _file, fileName, firstName, friendlyName, individualEmail, individualPhone, isIsvEmbed, lastName, notificationEmail, useAddressAsEmergencyAddress, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1ComplianceRegistration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
