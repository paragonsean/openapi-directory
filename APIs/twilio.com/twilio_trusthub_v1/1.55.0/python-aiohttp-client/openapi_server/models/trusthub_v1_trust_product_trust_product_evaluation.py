# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trust_product_evaluation_enum_status import TrustProductEvaluationEnumStatus
import re
from openapi_server import util


class TrusthubV1TrustProductTrustProductEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, policy_sid: str=None, results: List[object]=None, sid: str=None, status: TrustProductEvaluationEnumStatus=None, trust_product_sid: str=None, url: str=None):
        """TrusthubV1TrustProductTrustProductEvaluation - a model defined in OpenAPI

        :param account_sid: The account_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :param date_created: The date_created of this TrusthubV1TrustProductTrustProductEvaluation.
        :param policy_sid: The policy_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :param results: The results of this TrusthubV1TrustProductTrustProductEvaluation.
        :param sid: The sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :param status: The status of this TrusthubV1TrustProductTrustProductEvaluation.
        :param trust_product_sid: The trust_product_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :param url: The url of this TrusthubV1TrustProductTrustProductEvaluation.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'policy_sid': str,
            'results': List[object],
            'sid': str,
            'status': TrustProductEvaluationEnumStatus,
            'trust_product_sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'policy_sid': 'policy_sid',
            'results': 'results',
            'sid': 'sid',
            'status': 'status',
            'trust_product_sid': 'trust_product_sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._policy_sid = policy_sid
        self._results = results
        self._sid = sid
        self._status = status
        self._trust_product_sid = trust_product_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrusthubV1TrustProductTrustProductEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The trusthub.v1.trust_product.trust_product_evaluation of this TrusthubV1TrustProductTrustProductEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the trust_product resource.

        :return: The account_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the trust_product resource.

        :param account_sid: The account_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this TrusthubV1TrustProductTrustProductEvaluation.


        :return: The date_created of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TrusthubV1TrustProductTrustProductEvaluation.


        :param date_created: The date_created of this TrusthubV1TrustProductTrustProductEvaluation.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def policy_sid(self):
        """Gets the policy_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string of a policy that is associated to the trust_product resource.

        :return: The policy_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: str
        """
        return self._policy_sid

    @policy_sid.setter
    def policy_sid(self, policy_sid):
        """Sets the policy_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string of a policy that is associated to the trust_product resource.

        :param policy_sid: The policy_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :type policy_sid: str
        """
        if policy_sid is not None and len(policy_sid) > 34:
            raise ValueError("Invalid value for `policy_sid`, length must be less than or equal to `34`")
        if policy_sid is not None and len(policy_sid) < 34:
            raise ValueError("Invalid value for `policy_sid`, length must be greater than or equal to `34`")
        if policy_sid is not None and not re.search(r'^RN[0-9a-fA-F]{32}$', policy_sid):
            raise ValueError("Invalid value for `policy_sid`, must be a follow pattern or equal to `/^RN[0-9a-fA-F]{32}$/`")

        self._policy_sid = policy_sid

    @property
    def results(self):
        """Gets the results of this TrusthubV1TrustProductTrustProductEvaluation.

        The results of the Evaluation which includes the valid and invalid attributes.

        :return: The results of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: List[object]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this TrusthubV1TrustProductTrustProductEvaluation.

        The results of the Evaluation which includes the valid and invalid attributes.

        :param results: The results of this TrusthubV1TrustProductTrustProductEvaluation.
        :type results: List[object]
        """

        self._results = results

    @property
    def sid(self):
        """Gets the sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string that identifies the Evaluation resource.

        :return: The sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string that identifies the Evaluation resource.

        :param sid: The sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^EL[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^EL[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this TrusthubV1TrustProductTrustProductEvaluation.


        :return: The status of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: TrustProductEvaluationEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrusthubV1TrustProductTrustProductEvaluation.


        :param status: The status of this TrusthubV1TrustProductTrustProductEvaluation.
        :type status: TrustProductEvaluationEnumStatus
        """

        self._status = status

    @property
    def trust_product_sid(self):
        """Gets the trust_product_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string that we created to identify the trust_product resource.

        :return: The trust_product_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: str
        """
        return self._trust_product_sid

    @trust_product_sid.setter
    def trust_product_sid(self, trust_product_sid):
        """Sets the trust_product_sid of this TrusthubV1TrustProductTrustProductEvaluation.

        The unique string that we created to identify the trust_product resource.

        :param trust_product_sid: The trust_product_sid of this TrusthubV1TrustProductTrustProductEvaluation.
        :type trust_product_sid: str
        """
        if trust_product_sid is not None and len(trust_product_sid) > 34:
            raise ValueError("Invalid value for `trust_product_sid`, length must be less than or equal to `34`")
        if trust_product_sid is not None and len(trust_product_sid) < 34:
            raise ValueError("Invalid value for `trust_product_sid`, length must be greater than or equal to `34`")
        if trust_product_sid is not None and not re.search(r'^BU[0-9a-fA-F]{32}$', trust_product_sid):
            raise ValueError("Invalid value for `trust_product_sid`, must be a follow pattern or equal to `/^BU[0-9a-fA-F]{32}$/`")

        self._trust_product_sid = trust_product_sid

    @property
    def url(self):
        """Gets the url of this TrusthubV1TrustProductTrustProductEvaluation.


        :return: The url of this TrusthubV1TrustProductTrustProductEvaluation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TrusthubV1TrustProductTrustProductEvaluation.


        :param url: The url of this TrusthubV1TrustProductTrustProductEvaluation.
        :type url: str
        """

        self._url = url
