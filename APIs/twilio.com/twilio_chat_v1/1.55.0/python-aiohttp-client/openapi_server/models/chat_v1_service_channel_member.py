# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ChatV1ServiceChannelMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, channel_sid: str=None, date_created: datetime=None, date_updated: datetime=None, identity: str=None, last_consumed_message_index: int=None, last_consumption_timestamp: datetime=None, role_sid: str=None, service_sid: str=None, sid: str=None, url: str=None):
        """ChatV1ServiceChannelMember - a model defined in OpenAPI

        :param account_sid: The account_sid of this ChatV1ServiceChannelMember.
        :param channel_sid: The channel_sid of this ChatV1ServiceChannelMember.
        :param date_created: The date_created of this ChatV1ServiceChannelMember.
        :param date_updated: The date_updated of this ChatV1ServiceChannelMember.
        :param identity: The identity of this ChatV1ServiceChannelMember.
        :param last_consumed_message_index: The last_consumed_message_index of this ChatV1ServiceChannelMember.
        :param last_consumption_timestamp: The last_consumption_timestamp of this ChatV1ServiceChannelMember.
        :param role_sid: The role_sid of this ChatV1ServiceChannelMember.
        :param service_sid: The service_sid of this ChatV1ServiceChannelMember.
        :param sid: The sid of this ChatV1ServiceChannelMember.
        :param url: The url of this ChatV1ServiceChannelMember.
        """
        self.openapi_types = {
            'account_sid': str,
            'channel_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'identity': str,
            'last_consumed_message_index': int,
            'last_consumption_timestamp': datetime,
            'role_sid': str,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'channel_sid': 'channel_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'identity': 'identity',
            'last_consumed_message_index': 'last_consumed_message_index',
            'last_consumption_timestamp': 'last_consumption_timestamp',
            'role_sid': 'role_sid',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._channel_sid = channel_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._identity = identity
        self._last_consumed_message_index = last_consumed_message_index
        self._last_consumption_timestamp = last_consumption_timestamp
        self._role_sid = role_sid
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatV1ServiceChannelMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat.v1.service.channel.member of this ChatV1ServiceChannelMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ChatV1ServiceChannelMember.

        The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Member resource.

        :return: The account_sid of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ChatV1ServiceChannelMember.

        The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Member resource.

        :param account_sid: The account_sid of this ChatV1ServiceChannelMember.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def channel_sid(self):
        """Gets the channel_sid of this ChatV1ServiceChannelMember.

        The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) for the member.

        :return: The channel_sid of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._channel_sid

    @channel_sid.setter
    def channel_sid(self, channel_sid):
        """Sets the channel_sid of this ChatV1ServiceChannelMember.

        The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) for the member.

        :param channel_sid: The channel_sid of this ChatV1ServiceChannelMember.
        :type channel_sid: str
        """
        if channel_sid is not None and len(channel_sid) > 34:
            raise ValueError("Invalid value for `channel_sid`, length must be less than or equal to `34`")
        if channel_sid is not None and len(channel_sid) < 34:
            raise ValueError("Invalid value for `channel_sid`, length must be greater than or equal to `34`")
        if channel_sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', channel_sid):
            raise ValueError("Invalid value for `channel_sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._channel_sid = channel_sid

    @property
    def date_created(self):
        """Gets the date_created of this ChatV1ServiceChannelMember.

        The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ChatV1ServiceChannelMember.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ChatV1ServiceChannelMember.

        The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ChatV1ServiceChannelMember.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ChatV1ServiceChannelMember.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ChatV1ServiceChannelMember.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ChatV1ServiceChannelMember.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ChatV1ServiceChannelMember.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def identity(self):
        """Gets the identity of this ChatV1ServiceChannelMember.

        The application-defined string that uniquely identifies the resource's [User](https://www.twilio.com/docs/api/chat/rest/users) within the [Service](https://www.twilio.com/docs/api/chat/rest/services). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.

        :return: The identity of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ChatV1ServiceChannelMember.

        The application-defined string that uniquely identifies the resource's [User](https://www.twilio.com/docs/api/chat/rest/users) within the [Service](https://www.twilio.com/docs/api/chat/rest/services). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.

        :param identity: The identity of this ChatV1ServiceChannelMember.
        :type identity: str
        """

        self._identity = identity

    @property
    def last_consumed_message_index(self):
        """Gets the last_consumed_message_index of this ChatV1ServiceChannelMember.

        The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) in the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) that the Member has read.

        :return: The last_consumed_message_index of this ChatV1ServiceChannelMember.
        :rtype: int
        """
        return self._last_consumed_message_index

    @last_consumed_message_index.setter
    def last_consumed_message_index(self, last_consumed_message_index):
        """Sets the last_consumed_message_index of this ChatV1ServiceChannelMember.

        The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) in the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) that the Member has read.

        :param last_consumed_message_index: The last_consumed_message_index of this ChatV1ServiceChannelMember.
        :type last_consumed_message_index: int
        """

        self._last_consumed_message_index = last_consumed_message_index

    @property
    def last_consumption_timestamp(self):
        """Gets the last_consumption_timestamp of this ChatV1ServiceChannelMember.

        The ISO 8601 timestamp string that represents the date-time of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) read event for the Member within the [Channel](https://www.twilio.com/docs/api/chat/rest/channels).

        :return: The last_consumption_timestamp of this ChatV1ServiceChannelMember.
        :rtype: datetime
        """
        return self._last_consumption_timestamp

    @last_consumption_timestamp.setter
    def last_consumption_timestamp(self, last_consumption_timestamp):
        """Sets the last_consumption_timestamp of this ChatV1ServiceChannelMember.

        The ISO 8601 timestamp string that represents the date-time of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) read event for the Member within the [Channel](https://www.twilio.com/docs/api/chat/rest/channels).

        :param last_consumption_timestamp: The last_consumption_timestamp of this ChatV1ServiceChannelMember.
        :type last_consumption_timestamp: datetime
        """

        self._last_consumption_timestamp = last_consumption_timestamp

    @property
    def role_sid(self):
        """Gets the role_sid of this ChatV1ServiceChannelMember.

        The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the member.

        :return: The role_sid of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._role_sid

    @role_sid.setter
    def role_sid(self, role_sid):
        """Sets the role_sid of this ChatV1ServiceChannelMember.

        The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the member.

        :param role_sid: The role_sid of this ChatV1ServiceChannelMember.
        :type role_sid: str
        """
        if role_sid is not None and len(role_sid) > 34:
            raise ValueError("Invalid value for `role_sid`, length must be less than or equal to `34`")
        if role_sid is not None and len(role_sid) < 34:
            raise ValueError("Invalid value for `role_sid`, length must be greater than or equal to `34`")
        if role_sid is not None and not re.search(r'^RL[0-9a-fA-F]{32}$', role_sid):
            raise ValueError("Invalid value for `role_sid`, must be a follow pattern or equal to `/^RL[0-9a-fA-F]{32}$/`")

        self._role_sid = role_sid

    @property
    def service_sid(self):
        """Gets the service_sid of this ChatV1ServiceChannelMember.

        The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.

        :return: The service_sid of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ChatV1ServiceChannelMember.

        The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.

        :param service_sid: The service_sid of this ChatV1ServiceChannelMember.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ChatV1ServiceChannelMember.

        The unique string that we created to identify the Member resource.

        :return: The sid of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ChatV1ServiceChannelMember.

        The unique string that we created to identify the Member resource.

        :param sid: The sid of this ChatV1ServiceChannelMember.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^MB[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^MB[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ChatV1ServiceChannelMember.

        The absolute URL of the Member resource.

        :return: The url of this ChatV1ServiceChannelMember.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ChatV1ServiceChannelMember.

        The absolute URL of the Member resource.

        :param url: The url of this ChatV1ServiceChannelMember.
        :type url: str
        """

        self._url = url
