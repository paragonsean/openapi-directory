/*
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChatV1Service;
import org.openapitools.client.model.ListServiceResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChatV1ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatV1ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatV1ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createService
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://chat.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createService(Async)");
        }

        return createServiceCall(friendlyName, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (required)
     * @return ChatV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ChatV1Service createService(String friendlyName) throws ApiException {
        ApiResponse<ChatV1Service> localVarResp = createServiceWithHttpInfo(friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (required)
     * @return ApiResponse&lt;ChatV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChatV1Service> createServiceWithHttpInfo(String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, null);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String friendlyName, final ApiCallback<ChatV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, _callback);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://chat.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteService(Async)");
        }

        return deleteServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String sid) throws ApiException {
        deleteServiceWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://chat.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchService(Async)");
        }

        return fetchServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @return ChatV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ChatV1Service fetchService(String sid) throws ApiException {
        ApiResponse<ChatV1Service> localVarResp = fetchServiceWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @return ApiResponse&lt;ChatV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChatV1Service> fetchServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceAsync(String sid, final ApiCallback<ChatV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listService
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://chat.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listServiceCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceResponse listService(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceResponse> localVarResp = listServiceWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceResponse> listServiceWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param consumptionReportInterval DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints. (optional)
     * @param defaultChannelCreatorRoleSid The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultChannelRoleSid The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultServiceRoleSid The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param limitsChannelMembers The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000. (optional)
     * @param limitsUserChannels The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000. (optional)
     * @param notificationsAddedToChannelEnabled Whether to send a notification when a member is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsAddedToChannelTemplate The template to use to create the notification text displayed when a member is added to a channel and &#x60;notifications.added_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsInvitedToChannelEnabled Whether to send a notification when a user is invited to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsInvitedToChannelTemplate The template to use to create the notification text displayed when a user is invited to a channel and &#x60;notifications.invited_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsNewMessageEnabled Whether to send a notification when a new message is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsNewMessageTemplate The template to use to create the notification text displayed when a new message is added to a channel and &#x60;notifications.new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsRemovedFromChannelEnabled Whether to send a notification to a user when they are removed from a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsRemovedFromChannelTemplate The template to use to create the notification text displayed to a user when they are removed from a channel and &#x60;notifications.removed_from_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param postWebhookUrl The URL for post-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param preWebhookUrl The URL for pre-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param reachabilityEnabled Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is &#x60;false&#x60;. (optional)
     * @param readStatusEnabled Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is &#x60;true&#x60;. (optional)
     * @param typingIndicatorTimeout How long in seconds after a &#x60;started typing&#x60; event until clients should assume that user is no longer typing, even if no &#x60;ended typing&#x60; message was received.  The default is 5 seconds. (optional)
     * @param webhookFilters The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhookMethod The HTTP method to use for calls to the &#x60;pre_webhook_url&#x60; and &#x60;post_webhook_url&#x60; webhooks.  Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhooksOnChannelAddMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_add.url&#x60;. (optional)
     * @param webhooksOnChannelAddUrl The URL of the webhook to call in response to the &#x60;on_channel_add&#x60; event using the &#x60;webhooks.on_channel_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelAddedMethod The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event&#x60;. (optional)
     * @param webhooksOnChannelAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_added.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroy.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyUrl The URL of the webhook to call in response to the &#x60;on_channel_destroy&#x60; event using the &#x60;webhooks.on_channel_destroy.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroyed.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_destroyed.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_update.url&#x60;. (optional)
     * @param webhooksOnChannelUpdateUrl The URL of the webhook to call in response to the &#x60;on_channel_update&#x60; event using the &#x60;webhooks.on_channel_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnChannelUpdatedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddMethod The HTTP method to use when calling the &#x60;webhooks.on_member_add.url&#x60;. (optional)
     * @param webhooksOnMemberAddUrl The URL of the webhook to call in response to the &#x60;on_member_add&#x60; event using the &#x60;webhooks.on_member_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnMemberAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_member_remove.url&#x60;. (optional)
     * @param webhooksOnMemberRemoveUrl The URL of the webhook to call in response to the &#x60;on_member_remove&#x60; event using the &#x60;webhooks.on_member_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_member_removed.url&#x60;. (optional)
     * @param webhooksOnMemberRemovedUrl The URL of the webhook to call in response to the &#x60;on_member_removed&#x60; event using the &#x60;webhooks.on_member_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_message_remove.url&#x60;. (optional)
     * @param webhooksOnMessageRemoveUrl The URL of the webhook to call in response to the &#x60;on_message_remove&#x60; event using the &#x60;webhooks.on_message_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_removed.url&#x60;. (optional)
     * @param webhooksOnMessageRemovedUrl The URL of the webhook to call in response to the &#x60;on_message_removed&#x60; event using the &#x60;webhooks.on_message_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSendMethod The HTTP method to use when calling the &#x60;webhooks.on_message_send.url&#x60;. (optional)
     * @param webhooksOnMessageSendUrl The URL of the webhook to call in response to the &#x60;on_message_send&#x60; event using the &#x60;webhooks.on_message_send.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSentMethod The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event&#x60;. (optional)
     * @param webhooksOnMessageSentUrl The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event using the &#x60;webhooks.on_message_sent.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_message_update.url&#x60;. (optional)
     * @param webhooksOnMessageUpdateUrl The URL of the webhook to call in response to the &#x60;on_message_update&#x60; event using the &#x60;webhooks.on_message_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_updated.url&#x60;. (optional)
     * @param webhooksOnMessageUpdatedUrl The URL of the webhook to call in response to the &#x60;on_message_updated&#x60; event using the &#x60;webhooks.on_message_updated.method&#x60; HTTP method. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://chat.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consumptionReportInterval != null) {
            localVarFormParams.put("ConsumptionReportInterval", consumptionReportInterval);
        }

        if (defaultChannelCreatorRoleSid != null) {
            localVarFormParams.put("DefaultChannelCreatorRoleSid", defaultChannelCreatorRoleSid);
        }

        if (defaultChannelRoleSid != null) {
            localVarFormParams.put("DefaultChannelRoleSid", defaultChannelRoleSid);
        }

        if (defaultServiceRoleSid != null) {
            localVarFormParams.put("DefaultServiceRoleSid", defaultServiceRoleSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (limitsChannelMembers != null) {
            localVarFormParams.put("Limits.ChannelMembers", limitsChannelMembers);
        }

        if (limitsUserChannels != null) {
            localVarFormParams.put("Limits.UserChannels", limitsUserChannels);
        }

        if (notificationsAddedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Enabled", notificationsAddedToChannelEnabled);
        }

        if (notificationsAddedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Template", notificationsAddedToChannelTemplate);
        }

        if (notificationsInvitedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Enabled", notificationsInvitedToChannelEnabled);
        }

        if (notificationsInvitedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Template", notificationsInvitedToChannelTemplate);
        }

        if (notificationsNewMessageEnabled != null) {
            localVarFormParams.put("Notifications.NewMessage.Enabled", notificationsNewMessageEnabled);
        }

        if (notificationsNewMessageTemplate != null) {
            localVarFormParams.put("Notifications.NewMessage.Template", notificationsNewMessageTemplate);
        }

        if (notificationsRemovedFromChannelEnabled != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Enabled", notificationsRemovedFromChannelEnabled);
        }

        if (notificationsRemovedFromChannelTemplate != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Template", notificationsRemovedFromChannelTemplate);
        }

        if (postWebhookUrl != null) {
            localVarFormParams.put("PostWebhookUrl", postWebhookUrl);
        }

        if (preWebhookUrl != null) {
            localVarFormParams.put("PreWebhookUrl", preWebhookUrl);
        }

        if (reachabilityEnabled != null) {
            localVarFormParams.put("ReachabilityEnabled", reachabilityEnabled);
        }

        if (readStatusEnabled != null) {
            localVarFormParams.put("ReadStatusEnabled", readStatusEnabled);
        }

        if (typingIndicatorTimeout != null) {
            localVarFormParams.put("TypingIndicatorTimeout", typingIndicatorTimeout);
        }

        if (webhookFilters != null) {
            localVarFormParams.put("WebhookFilters", webhookFilters);
        }

        if (webhookMethod != null) {
            localVarFormParams.put("WebhookMethod", webhookMethod);
        }

        if (webhooksOnChannelAddMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelAdd.Method", webhooksOnChannelAddMethod);
        }

        if (webhooksOnChannelAddUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelAdd.Url", webhooksOnChannelAddUrl);
        }

        if (webhooksOnChannelAddedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelAdded.Method", webhooksOnChannelAddedMethod);
        }

        if (webhooksOnChannelAddedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelAdded.Url", webhooksOnChannelAddedUrl);
        }

        if (webhooksOnChannelDestroyMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroy.Method", webhooksOnChannelDestroyMethod);
        }

        if (webhooksOnChannelDestroyUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroy.Url", webhooksOnChannelDestroyUrl);
        }

        if (webhooksOnChannelDestroyedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroyed.Method", webhooksOnChannelDestroyedMethod);
        }

        if (webhooksOnChannelDestroyedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroyed.Url", webhooksOnChannelDestroyedUrl);
        }

        if (webhooksOnChannelUpdateMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdate.Method", webhooksOnChannelUpdateMethod);
        }

        if (webhooksOnChannelUpdateUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdate.Url", webhooksOnChannelUpdateUrl);
        }

        if (webhooksOnChannelUpdatedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdated.Method", webhooksOnChannelUpdatedMethod);
        }

        if (webhooksOnChannelUpdatedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdated.Url", webhooksOnChannelUpdatedUrl);
        }

        if (webhooksOnMemberAddMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberAdd.Method", webhooksOnMemberAddMethod);
        }

        if (webhooksOnMemberAddUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberAdd.Url", webhooksOnMemberAddUrl);
        }

        if (webhooksOnMemberAddedMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberAdded.Method", webhooksOnMemberAddedMethod);
        }

        if (webhooksOnMemberAddedUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberAdded.Url", webhooksOnMemberAddedUrl);
        }

        if (webhooksOnMemberRemoveMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberRemove.Method", webhooksOnMemberRemoveMethod);
        }

        if (webhooksOnMemberRemoveUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberRemove.Url", webhooksOnMemberRemoveUrl);
        }

        if (webhooksOnMemberRemovedMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberRemoved.Method", webhooksOnMemberRemovedMethod);
        }

        if (webhooksOnMemberRemovedUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberRemoved.Url", webhooksOnMemberRemovedUrl);
        }

        if (webhooksOnMessageRemoveMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageRemove.Method", webhooksOnMessageRemoveMethod);
        }

        if (webhooksOnMessageRemoveUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageRemove.Url", webhooksOnMessageRemoveUrl);
        }

        if (webhooksOnMessageRemovedMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageRemoved.Method", webhooksOnMessageRemovedMethod);
        }

        if (webhooksOnMessageRemovedUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageRemoved.Url", webhooksOnMessageRemovedUrl);
        }

        if (webhooksOnMessageSendMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageSend.Method", webhooksOnMessageSendMethod);
        }

        if (webhooksOnMessageSendUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageSend.Url", webhooksOnMessageSendUrl);
        }

        if (webhooksOnMessageSentMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageSent.Method", webhooksOnMessageSentMethod);
        }

        if (webhooksOnMessageSentUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageSent.Url", webhooksOnMessageSentUrl);
        }

        if (webhooksOnMessageUpdateMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdate.Method", webhooksOnMessageUpdateMethod);
        }

        if (webhooksOnMessageUpdateUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdate.Url", webhooksOnMessageUpdateUrl);
        }

        if (webhooksOnMessageUpdatedMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdated.Method", webhooksOnMessageUpdatedMethod);
        }

        if (webhooksOnMessageUpdatedUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdated.Url", webhooksOnMessageUpdatedUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateService(Async)");
        }

        return updateServiceCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, _callback);

    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param consumptionReportInterval DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints. (optional)
     * @param defaultChannelCreatorRoleSid The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultChannelRoleSid The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultServiceRoleSid The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param limitsChannelMembers The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000. (optional)
     * @param limitsUserChannels The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000. (optional)
     * @param notificationsAddedToChannelEnabled Whether to send a notification when a member is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsAddedToChannelTemplate The template to use to create the notification text displayed when a member is added to a channel and &#x60;notifications.added_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsInvitedToChannelEnabled Whether to send a notification when a user is invited to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsInvitedToChannelTemplate The template to use to create the notification text displayed when a user is invited to a channel and &#x60;notifications.invited_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsNewMessageEnabled Whether to send a notification when a new message is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsNewMessageTemplate The template to use to create the notification text displayed when a new message is added to a channel and &#x60;notifications.new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsRemovedFromChannelEnabled Whether to send a notification to a user when they are removed from a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsRemovedFromChannelTemplate The template to use to create the notification text displayed to a user when they are removed from a channel and &#x60;notifications.removed_from_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param postWebhookUrl The URL for post-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param preWebhookUrl The URL for pre-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param reachabilityEnabled Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is &#x60;false&#x60;. (optional)
     * @param readStatusEnabled Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is &#x60;true&#x60;. (optional)
     * @param typingIndicatorTimeout How long in seconds after a &#x60;started typing&#x60; event until clients should assume that user is no longer typing, even if no &#x60;ended typing&#x60; message was received.  The default is 5 seconds. (optional)
     * @param webhookFilters The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhookMethod The HTTP method to use for calls to the &#x60;pre_webhook_url&#x60; and &#x60;post_webhook_url&#x60; webhooks.  Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhooksOnChannelAddMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_add.url&#x60;. (optional)
     * @param webhooksOnChannelAddUrl The URL of the webhook to call in response to the &#x60;on_channel_add&#x60; event using the &#x60;webhooks.on_channel_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelAddedMethod The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event&#x60;. (optional)
     * @param webhooksOnChannelAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_added.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroy.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyUrl The URL of the webhook to call in response to the &#x60;on_channel_destroy&#x60; event using the &#x60;webhooks.on_channel_destroy.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroyed.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_destroyed.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_update.url&#x60;. (optional)
     * @param webhooksOnChannelUpdateUrl The URL of the webhook to call in response to the &#x60;on_channel_update&#x60; event using the &#x60;webhooks.on_channel_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnChannelUpdatedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddMethod The HTTP method to use when calling the &#x60;webhooks.on_member_add.url&#x60;. (optional)
     * @param webhooksOnMemberAddUrl The URL of the webhook to call in response to the &#x60;on_member_add&#x60; event using the &#x60;webhooks.on_member_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnMemberAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_member_remove.url&#x60;. (optional)
     * @param webhooksOnMemberRemoveUrl The URL of the webhook to call in response to the &#x60;on_member_remove&#x60; event using the &#x60;webhooks.on_member_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_member_removed.url&#x60;. (optional)
     * @param webhooksOnMemberRemovedUrl The URL of the webhook to call in response to the &#x60;on_member_removed&#x60; event using the &#x60;webhooks.on_member_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_message_remove.url&#x60;. (optional)
     * @param webhooksOnMessageRemoveUrl The URL of the webhook to call in response to the &#x60;on_message_remove&#x60; event using the &#x60;webhooks.on_message_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_removed.url&#x60;. (optional)
     * @param webhooksOnMessageRemovedUrl The URL of the webhook to call in response to the &#x60;on_message_removed&#x60; event using the &#x60;webhooks.on_message_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSendMethod The HTTP method to use when calling the &#x60;webhooks.on_message_send.url&#x60;. (optional)
     * @param webhooksOnMessageSendUrl The URL of the webhook to call in response to the &#x60;on_message_send&#x60; event using the &#x60;webhooks.on_message_send.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSentMethod The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event&#x60;. (optional)
     * @param webhooksOnMessageSentUrl The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event using the &#x60;webhooks.on_message_sent.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_message_update.url&#x60;. (optional)
     * @param webhooksOnMessageUpdateUrl The URL of the webhook to call in response to the &#x60;on_message_update&#x60; event using the &#x60;webhooks.on_message_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_updated.url&#x60;. (optional)
     * @param webhooksOnMessageUpdatedUrl The URL of the webhook to call in response to the &#x60;on_message_updated&#x60; event using the &#x60;webhooks.on_message_updated.method&#x60; HTTP method. (optional)
     * @return ChatV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ChatV1Service updateService(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl) throws ApiException {
        ApiResponse<ChatV1Service> localVarResp = updateServiceWithHttpInfo(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param consumptionReportInterval DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints. (optional)
     * @param defaultChannelCreatorRoleSid The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultChannelRoleSid The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultServiceRoleSid The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param limitsChannelMembers The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000. (optional)
     * @param limitsUserChannels The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000. (optional)
     * @param notificationsAddedToChannelEnabled Whether to send a notification when a member is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsAddedToChannelTemplate The template to use to create the notification text displayed when a member is added to a channel and &#x60;notifications.added_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsInvitedToChannelEnabled Whether to send a notification when a user is invited to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsInvitedToChannelTemplate The template to use to create the notification text displayed when a user is invited to a channel and &#x60;notifications.invited_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsNewMessageEnabled Whether to send a notification when a new message is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsNewMessageTemplate The template to use to create the notification text displayed when a new message is added to a channel and &#x60;notifications.new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsRemovedFromChannelEnabled Whether to send a notification to a user when they are removed from a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsRemovedFromChannelTemplate The template to use to create the notification text displayed to a user when they are removed from a channel and &#x60;notifications.removed_from_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param postWebhookUrl The URL for post-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param preWebhookUrl The URL for pre-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param reachabilityEnabled Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is &#x60;false&#x60;. (optional)
     * @param readStatusEnabled Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is &#x60;true&#x60;. (optional)
     * @param typingIndicatorTimeout How long in seconds after a &#x60;started typing&#x60; event until clients should assume that user is no longer typing, even if no &#x60;ended typing&#x60; message was received.  The default is 5 seconds. (optional)
     * @param webhookFilters The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhookMethod The HTTP method to use for calls to the &#x60;pre_webhook_url&#x60; and &#x60;post_webhook_url&#x60; webhooks.  Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhooksOnChannelAddMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_add.url&#x60;. (optional)
     * @param webhooksOnChannelAddUrl The URL of the webhook to call in response to the &#x60;on_channel_add&#x60; event using the &#x60;webhooks.on_channel_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelAddedMethod The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event&#x60;. (optional)
     * @param webhooksOnChannelAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_added.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroy.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyUrl The URL of the webhook to call in response to the &#x60;on_channel_destroy&#x60; event using the &#x60;webhooks.on_channel_destroy.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroyed.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_destroyed.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_update.url&#x60;. (optional)
     * @param webhooksOnChannelUpdateUrl The URL of the webhook to call in response to the &#x60;on_channel_update&#x60; event using the &#x60;webhooks.on_channel_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnChannelUpdatedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddMethod The HTTP method to use when calling the &#x60;webhooks.on_member_add.url&#x60;. (optional)
     * @param webhooksOnMemberAddUrl The URL of the webhook to call in response to the &#x60;on_member_add&#x60; event using the &#x60;webhooks.on_member_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnMemberAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_member_remove.url&#x60;. (optional)
     * @param webhooksOnMemberRemoveUrl The URL of the webhook to call in response to the &#x60;on_member_remove&#x60; event using the &#x60;webhooks.on_member_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_member_removed.url&#x60;. (optional)
     * @param webhooksOnMemberRemovedUrl The URL of the webhook to call in response to the &#x60;on_member_removed&#x60; event using the &#x60;webhooks.on_member_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_message_remove.url&#x60;. (optional)
     * @param webhooksOnMessageRemoveUrl The URL of the webhook to call in response to the &#x60;on_message_remove&#x60; event using the &#x60;webhooks.on_message_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_removed.url&#x60;. (optional)
     * @param webhooksOnMessageRemovedUrl The URL of the webhook to call in response to the &#x60;on_message_removed&#x60; event using the &#x60;webhooks.on_message_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSendMethod The HTTP method to use when calling the &#x60;webhooks.on_message_send.url&#x60;. (optional)
     * @param webhooksOnMessageSendUrl The URL of the webhook to call in response to the &#x60;on_message_send&#x60; event using the &#x60;webhooks.on_message_send.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSentMethod The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event&#x60;. (optional)
     * @param webhooksOnMessageSentUrl The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event using the &#x60;webhooks.on_message_sent.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_message_update.url&#x60;. (optional)
     * @param webhooksOnMessageUpdateUrl The URL of the webhook to call in response to the &#x60;on_message_update&#x60; event using the &#x60;webhooks.on_message_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_updated.url&#x60;. (optional)
     * @param webhooksOnMessageUpdatedUrl The URL of the webhook to call in response to the &#x60;on_message_updated&#x60; event using the &#x60;webhooks.on_message_updated.method&#x60; HTTP method. (optional)
     * @return ApiResponse&lt;ChatV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChatV1Service> updateServiceWithHttpInfo(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, null);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The Twilio-provided string that uniquely identifies the Service resource to update. (required)
     * @param consumptionReportInterval DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints. (optional)
     * @param defaultChannelCreatorRoleSid The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultChannelRoleSid The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param defaultServiceRoleSid The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param limitsChannelMembers The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000. (optional)
     * @param limitsUserChannels The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000. (optional)
     * @param notificationsAddedToChannelEnabled Whether to send a notification when a member is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsAddedToChannelTemplate The template to use to create the notification text displayed when a member is added to a channel and &#x60;notifications.added_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsInvitedToChannelEnabled Whether to send a notification when a user is invited to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsInvitedToChannelTemplate The template to use to create the notification text displayed when a user is invited to a channel and &#x60;notifications.invited_to_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsNewMessageEnabled Whether to send a notification when a new message is added to a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsNewMessageTemplate The template to use to create the notification text displayed when a new message is added to a channel and &#x60;notifications.new_message.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param notificationsRemovedFromChannelEnabled Whether to send a notification to a user when they are removed from a channel. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param notificationsRemovedFromChannelTemplate The template to use to create the notification text displayed to a user when they are removed from a channel and &#x60;notifications.removed_from_channel.enabled&#x60; is &#x60;true&#x60;. (optional)
     * @param postWebhookUrl The URL for post-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param preWebhookUrl The URL for pre-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details. (optional)
     * @param reachabilityEnabled Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is &#x60;false&#x60;. (optional)
     * @param readStatusEnabled Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is &#x60;true&#x60;. (optional)
     * @param typingIndicatorTimeout How long in seconds after a &#x60;started typing&#x60; event until clients should assume that user is no longer typing, even if no &#x60;ended typing&#x60; message was received.  The default is 5 seconds. (optional)
     * @param webhookFilters The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhookMethod The HTTP method to use for calls to the &#x60;pre_webhook_url&#x60; and &#x60;post_webhook_url&#x60; webhooks.  Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details. (optional)
     * @param webhooksOnChannelAddMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_add.url&#x60;. (optional)
     * @param webhooksOnChannelAddUrl The URL of the webhook to call in response to the &#x60;on_channel_add&#x60; event using the &#x60;webhooks.on_channel_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelAddedMethod The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event&#x60;. (optional)
     * @param webhooksOnChannelAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_added.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroy.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyUrl The URL of the webhook to call in response to the &#x60;on_channel_destroy&#x60; event using the &#x60;webhooks.on_channel_destroy.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelDestroyedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_destroyed.url&#x60;. (optional)
     * @param webhooksOnChannelDestroyedUrl The URL of the webhook to call in response to the &#x60;on_channel_added&#x60; event using the &#x60;webhooks.on_channel_destroyed.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_update.url&#x60;. (optional)
     * @param webhooksOnChannelUpdateUrl The URL of the webhook to call in response to the &#x60;on_channel_update&#x60; event using the &#x60;webhooks.on_channel_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnChannelUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnChannelUpdatedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddMethod The HTTP method to use when calling the &#x60;webhooks.on_member_add.url&#x60;. (optional)
     * @param webhooksOnMemberAddUrl The URL of the webhook to call in response to the &#x60;on_member_add&#x60; event using the &#x60;webhooks.on_member_add.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberAddedMethod The HTTP method to use when calling the &#x60;webhooks.on_channel_updated.url&#x60;. (optional)
     * @param webhooksOnMemberAddedUrl The URL of the webhook to call in response to the &#x60;on_channel_updated&#x60; event using the &#x60;webhooks.on_channel_updated.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_member_remove.url&#x60;. (optional)
     * @param webhooksOnMemberRemoveUrl The URL of the webhook to call in response to the &#x60;on_member_remove&#x60; event using the &#x60;webhooks.on_member_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMemberRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_member_removed.url&#x60;. (optional)
     * @param webhooksOnMemberRemovedUrl The URL of the webhook to call in response to the &#x60;on_member_removed&#x60; event using the &#x60;webhooks.on_member_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemoveMethod The HTTP method to use when calling the &#x60;webhooks.on_message_remove.url&#x60;. (optional)
     * @param webhooksOnMessageRemoveUrl The URL of the webhook to call in response to the &#x60;on_message_remove&#x60; event using the &#x60;webhooks.on_message_remove.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageRemovedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_removed.url&#x60;. (optional)
     * @param webhooksOnMessageRemovedUrl The URL of the webhook to call in response to the &#x60;on_message_removed&#x60; event using the &#x60;webhooks.on_message_removed.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSendMethod The HTTP method to use when calling the &#x60;webhooks.on_message_send.url&#x60;. (optional)
     * @param webhooksOnMessageSendUrl The URL of the webhook to call in response to the &#x60;on_message_send&#x60; event using the &#x60;webhooks.on_message_send.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageSentMethod The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event&#x60;. (optional)
     * @param webhooksOnMessageSentUrl The URL of the webhook to call in response to the &#x60;on_message_sent&#x60; event using the &#x60;webhooks.on_message_sent.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdateMethod The HTTP method to use when calling the &#x60;webhooks.on_message_update.url&#x60;. (optional)
     * @param webhooksOnMessageUpdateUrl The URL of the webhook to call in response to the &#x60;on_message_update&#x60; event using the &#x60;webhooks.on_message_update.method&#x60; HTTP method. (optional)
     * @param webhooksOnMessageUpdatedMethod The HTTP method to use when calling the &#x60;webhooks.on_message_updated.url&#x60;. (optional)
     * @param webhooksOnMessageUpdatedUrl The URL of the webhook to call in response to the &#x60;on_message_updated&#x60; event using the &#x60;webhooks.on_message_updated.method&#x60; HTTP method. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback<ChatV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, _callback);
        Type localVarReturnType = new TypeToken<ChatV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
