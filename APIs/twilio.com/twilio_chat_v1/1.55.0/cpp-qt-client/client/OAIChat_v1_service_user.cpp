/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChat_v1_service_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChat_v1_service_user::OAIChat_v1_service_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChat_v1_service_user::OAIChat_v1_service_user() {
    this->initializeModel();
}

OAIChat_v1_service_user::~OAIChat_v1_service_user() {}

void OAIChat_v1_service_user::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_is_notifiable_isSet = false;
    m_is_notifiable_isValid = false;

    m_is_online_isSet = false;
    m_is_online_isValid = false;

    m_joined_channels_count_isSet = false;
    m_joined_channels_count_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_role_sid_isSet = false;
    m_role_sid_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIChat_v1_service_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChat_v1_service_user::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_is_notifiable_isValid = ::OpenAPI::fromJsonValue(m_is_notifiable, json[QString("is_notifiable")]);
    m_is_notifiable_isSet = !json[QString("is_notifiable")].isNull() && m_is_notifiable_isValid;

    m_is_online_isValid = ::OpenAPI::fromJsonValue(m_is_online, json[QString("is_online")]);
    m_is_online_isSet = !json[QString("is_online")].isNull() && m_is_online_isValid;

    m_joined_channels_count_isValid = ::OpenAPI::fromJsonValue(m_joined_channels_count, json[QString("joined_channels_count")]);
    m_joined_channels_count_isSet = !json[QString("joined_channels_count")].isNull() && m_joined_channels_count_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_role_sid_isValid = ::OpenAPI::fromJsonValue(m_role_sid, json[QString("role_sid")]);
    m_role_sid_isSet = !json[QString("role_sid")].isNull() && m_role_sid_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIChat_v1_service_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChat_v1_service_user::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_is_notifiable_isSet) {
        obj.insert(QString("is_notifiable"), ::OpenAPI::toJsonValue(m_is_notifiable));
    }
    if (m_is_online_isSet) {
        obj.insert(QString("is_online"), ::OpenAPI::toJsonValue(m_is_online));
    }
    if (m_joined_channels_count_isSet) {
        obj.insert(QString("joined_channels_count"), ::OpenAPI::toJsonValue(m_joined_channels_count));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_role_sid_isSet) {
        obj.insert(QString("role_sid"), ::OpenAPI::toJsonValue(m_role_sid));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIChat_v1_service_user::getAccountSid() const {
    return m_account_sid;
}
void OAIChat_v1_service_user::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIChat_v1_service_user::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIChat_v1_service_user::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIChat_v1_service_user::getAttributes() const {
    return m_attributes;
}
void OAIChat_v1_service_user::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIChat_v1_service_user::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIChat_v1_service_user::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QDateTime OAIChat_v1_service_user::getDateCreated() const {
    return m_date_created;
}
void OAIChat_v1_service_user::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChat_v1_service_user::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChat_v1_service_user::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIChat_v1_service_user::getDateUpdated() const {
    return m_date_updated;
}
void OAIChat_v1_service_user::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIChat_v1_service_user::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIChat_v1_service_user::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIChat_v1_service_user::getFriendlyName() const {
    return m_friendly_name;
}
void OAIChat_v1_service_user::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIChat_v1_service_user::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIChat_v1_service_user::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIChat_v1_service_user::getIdentity() const {
    return m_identity;
}
void OAIChat_v1_service_user::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIChat_v1_service_user::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIChat_v1_service_user::is_identity_Valid() const{
    return m_identity_isValid;
}

bool OAIChat_v1_service_user::isIsNotifiable() const {
    return m_is_notifiable;
}
void OAIChat_v1_service_user::setIsNotifiable(const bool &is_notifiable) {
    m_is_notifiable = is_notifiable;
    m_is_notifiable_isSet = true;
}

bool OAIChat_v1_service_user::is_is_notifiable_Set() const{
    return m_is_notifiable_isSet;
}

bool OAIChat_v1_service_user::is_is_notifiable_Valid() const{
    return m_is_notifiable_isValid;
}

bool OAIChat_v1_service_user::isIsOnline() const {
    return m_is_online;
}
void OAIChat_v1_service_user::setIsOnline(const bool &is_online) {
    m_is_online = is_online;
    m_is_online_isSet = true;
}

bool OAIChat_v1_service_user::is_is_online_Set() const{
    return m_is_online_isSet;
}

bool OAIChat_v1_service_user::is_is_online_Valid() const{
    return m_is_online_isValid;
}

qint32 OAIChat_v1_service_user::getJoinedChannelsCount() const {
    return m_joined_channels_count;
}
void OAIChat_v1_service_user::setJoinedChannelsCount(const qint32 &joined_channels_count) {
    m_joined_channels_count = joined_channels_count;
    m_joined_channels_count_isSet = true;
}

bool OAIChat_v1_service_user::is_joined_channels_count_Set() const{
    return m_joined_channels_count_isSet;
}

bool OAIChat_v1_service_user::is_joined_channels_count_Valid() const{
    return m_joined_channels_count_isValid;
}

OAIObject OAIChat_v1_service_user::getLinks() const {
    return m_links;
}
void OAIChat_v1_service_user::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIChat_v1_service_user::is_links_Set() const{
    return m_links_isSet;
}

bool OAIChat_v1_service_user::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIChat_v1_service_user::getRoleSid() const {
    return m_role_sid;
}
void OAIChat_v1_service_user::setRoleSid(const QString &role_sid) {
    m_role_sid = role_sid;
    m_role_sid_isSet = true;
}

bool OAIChat_v1_service_user::is_role_sid_Set() const{
    return m_role_sid_isSet;
}

bool OAIChat_v1_service_user::is_role_sid_Valid() const{
    return m_role_sid_isValid;
}

QString OAIChat_v1_service_user::getServiceSid() const {
    return m_service_sid;
}
void OAIChat_v1_service_user::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIChat_v1_service_user::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIChat_v1_service_user::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIChat_v1_service_user::getSid() const {
    return m_sid;
}
void OAIChat_v1_service_user::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIChat_v1_service_user::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIChat_v1_service_user::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIChat_v1_service_user::getUrl() const {
    return m_url;
}
void OAIChat_v1_service_user::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChat_v1_service_user::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChat_v1_service_user::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIChat_v1_service_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notifiable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_channels_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChat_v1_service_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
