/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatV1ServiceApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIChatV1ServiceApi::OAIChatV1ServiceApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIChatV1ServiceApi::~OAIChatV1ServiceApi() {
}

void OAIChatV1ServiceApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createService", serverConf);
    _serverIndices.insert("createService", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteService", serverConf);
    _serverIndices.insert("deleteService", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchService", serverConf);
    _serverIndices.insert("fetchService", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listService", serverConf);
    _serverIndices.insert("listService", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://chat.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateService", serverConf);
    _serverIndices.insert("updateService", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIChatV1ServiceApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIChatV1ServiceApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIChatV1ServiceApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIChatV1ServiceApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIChatV1ServiceApi::setUsername(const QString &username) {
    _username = username;
}

void OAIChatV1ServiceApi::setPassword(const QString &password) {
    _password = password;
}


void OAIChatV1ServiceApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIChatV1ServiceApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIChatV1ServiceApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIChatV1ServiceApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChatV1ServiceApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChatV1ServiceApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIChatV1ServiceApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIChatV1ServiceApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIChatV1ServiceApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIChatV1ServiceApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIChatV1ServiceApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIChatV1ServiceApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIChatV1ServiceApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIChatV1ServiceApi::createService(const QString &friendly_name) {
    QString fullPath = QString(_serverConfigs["createService"][_serverIndices.value("createService")].URL()+"/v1/Services");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatV1ServiceApi::createServiceCallback);
    connect(this, &OAIChatV1ServiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChatV1ServiceApi::createServiceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_v1_service output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createServiceSignal(output);
        Q_EMIT createServiceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createServiceSignalE(output, error_type, error_str);
        Q_EMIT createServiceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createServiceSignalError(output, error_type, error_str);
        Q_EMIT createServiceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatV1ServiceApi::deleteService(const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteService"][_serverIndices.value("deleteService")].URL()+"/v1/Services/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatV1ServiceApi::deleteServiceCallback);
    connect(this, &OAIChatV1ServiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChatV1ServiceApi::deleteServiceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteServiceSignal();
        Q_EMIT deleteServiceSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteServiceSignalE(error_type, error_str);
        Q_EMIT deleteServiceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteServiceSignalError(error_type, error_str);
        Q_EMIT deleteServiceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatV1ServiceApi::fetchService(const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchService"][_serverIndices.value("fetchService")].URL()+"/v1/Services/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatV1ServiceApi::fetchServiceCallback);
    connect(this, &OAIChatV1ServiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChatV1ServiceApi::fetchServiceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_v1_service output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchServiceSignal(output);
        Q_EMIT fetchServiceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchServiceSignalE(output, error_type, error_str);
        Q_EMIT fetchServiceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchServiceSignalError(output, error_type, error_str);
        Q_EMIT fetchServiceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatV1ServiceApi::listService(const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listService"][_serverIndices.value("listService")].URL()+"/v1/Services");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatV1ServiceApi::listServiceCallback);
    connect(this, &OAIChatV1ServiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChatV1ServiceApi::listServiceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListServiceResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listServiceSignal(output);
        Q_EMIT listServiceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listServiceSignalE(output, error_type, error_str);
        Q_EMIT listServiceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listServiceSignalError(output, error_type, error_str);
        Q_EMIT listServiceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatV1ServiceApi::updateService(const QString &sid, const ::OpenAPI::OptionalParam<qint32> &consumption_report_interval, const ::OpenAPI::OptionalParam<QString> &default_channel_creator_role_sid, const ::OpenAPI::OptionalParam<QString> &default_channel_role_sid, const ::OpenAPI::OptionalParam<QString> &default_service_role_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<qint32> &limits_channel_members, const ::OpenAPI::OptionalParam<qint32> &limits_user_channels, const ::OpenAPI::OptionalParam<bool> &notifications_added_to_channel_enabled, const ::OpenAPI::OptionalParam<QString> &notifications_added_to_channel_template, const ::OpenAPI::OptionalParam<bool> &notifications_invited_to_channel_enabled, const ::OpenAPI::OptionalParam<QString> &notifications_invited_to_channel_template, const ::OpenAPI::OptionalParam<bool> &notifications_new_message_enabled, const ::OpenAPI::OptionalParam<QString> &notifications_new_message_template, const ::OpenAPI::OptionalParam<bool> &notifications_removed_from_channel_enabled, const ::OpenAPI::OptionalParam<QString> &notifications_removed_from_channel_template, const ::OpenAPI::OptionalParam<QString> &post_webhook_url, const ::OpenAPI::OptionalParam<QString> &pre_webhook_url, const ::OpenAPI::OptionalParam<bool> &reachability_enabled, const ::OpenAPI::OptionalParam<bool> &read_status_enabled, const ::OpenAPI::OptionalParam<qint32> &typing_indicator_timeout, const ::OpenAPI::OptionalParam<QList<QString>> &webhook_filters, const ::OpenAPI::OptionalParam<QString> &webhook_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_add_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_add_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_added_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_added_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroy_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroy_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroyed_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroyed_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_update_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_update_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_updated_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_updated_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_add_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_add_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_added_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_added_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_remove_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_remove_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_removed_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_removed_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_remove_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_remove_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_removed_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_removed_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_send_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_send_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_sent_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_sent_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_update_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_update_url, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_updated_method, const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_updated_url) {
    QString fullPath = QString(_serverConfigs["updateService"][_serverIndices.value("updateService")].URL()+"/v1/Services/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (consumption_report_interval.hasValue())
    {
        input.add_var("ConsumptionReportInterval", ::OpenAPI::toStringValue(consumption_report_interval.value()));
    }
    if (default_channel_creator_role_sid.hasValue())
    {
        input.add_var("DefaultChannelCreatorRoleSid", ::OpenAPI::toStringValue(default_channel_creator_role_sid.value()));
    }
    if (default_channel_role_sid.hasValue())
    {
        input.add_var("DefaultChannelRoleSid", ::OpenAPI::toStringValue(default_channel_role_sid.value()));
    }
    if (default_service_role_sid.hasValue())
    {
        input.add_var("DefaultServiceRoleSid", ::OpenAPI::toStringValue(default_service_role_sid.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    if (limits_channel_members.hasValue())
    {
        input.add_var("Limits.ChannelMembers", ::OpenAPI::toStringValue(limits_channel_members.value()));
    }
    if (limits_user_channels.hasValue())
    {
        input.add_var("Limits.UserChannels", ::OpenAPI::toStringValue(limits_user_channels.value()));
    }
    if (notifications_added_to_channel_enabled.hasValue())
    {
        input.add_var("Notifications.AddedToChannel.Enabled", ::OpenAPI::toStringValue(notifications_added_to_channel_enabled.value()));
    }
    if (notifications_added_to_channel_template.hasValue())
    {
        input.add_var("Notifications.AddedToChannel.Template", ::OpenAPI::toStringValue(notifications_added_to_channel_template.value()));
    }
    if (notifications_invited_to_channel_enabled.hasValue())
    {
        input.add_var("Notifications.InvitedToChannel.Enabled", ::OpenAPI::toStringValue(notifications_invited_to_channel_enabled.value()));
    }
    if (notifications_invited_to_channel_template.hasValue())
    {
        input.add_var("Notifications.InvitedToChannel.Template", ::OpenAPI::toStringValue(notifications_invited_to_channel_template.value()));
    }
    if (notifications_new_message_enabled.hasValue())
    {
        input.add_var("Notifications.NewMessage.Enabled", ::OpenAPI::toStringValue(notifications_new_message_enabled.value()));
    }
    if (notifications_new_message_template.hasValue())
    {
        input.add_var("Notifications.NewMessage.Template", ::OpenAPI::toStringValue(notifications_new_message_template.value()));
    }
    if (notifications_removed_from_channel_enabled.hasValue())
    {
        input.add_var("Notifications.RemovedFromChannel.Enabled", ::OpenAPI::toStringValue(notifications_removed_from_channel_enabled.value()));
    }
    if (notifications_removed_from_channel_template.hasValue())
    {
        input.add_var("Notifications.RemovedFromChannel.Template", ::OpenAPI::toStringValue(notifications_removed_from_channel_template.value()));
    }
    if (post_webhook_url.hasValue())
    {
        input.add_var("PostWebhookUrl", ::OpenAPI::toStringValue(post_webhook_url.value()));
    }
    if (pre_webhook_url.hasValue())
    {
        input.add_var("PreWebhookUrl", ::OpenAPI::toStringValue(pre_webhook_url.value()));
    }
    if (reachability_enabled.hasValue())
    {
        input.add_var("ReachabilityEnabled", ::OpenAPI::toStringValue(reachability_enabled.value()));
    }
    if (read_status_enabled.hasValue())
    {
        input.add_var("ReadStatusEnabled", ::OpenAPI::toStringValue(read_status_enabled.value()));
    }
    if (typing_indicator_timeout.hasValue())
    {
        input.add_var("TypingIndicatorTimeout", ::OpenAPI::toStringValue(typing_indicator_timeout.value()));
    }
    if (webhook_filters.hasValue())
    {
        input.add_var("WebhookFilters", ::OpenAPI::toStringValue(webhook_filters.value()));
    }
    if (webhook_method.hasValue())
    {
        input.add_var("WebhookMethod", ::OpenAPI::toStringValue(webhook_method.value()));
    }
    if (webhooks_on_channel_add_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelAdd.Method", ::OpenAPI::toStringValue(webhooks_on_channel_add_method.value()));
    }
    if (webhooks_on_channel_add_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelAdd.Url", ::OpenAPI::toStringValue(webhooks_on_channel_add_url.value()));
    }
    if (webhooks_on_channel_added_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelAdded.Method", ::OpenAPI::toStringValue(webhooks_on_channel_added_method.value()));
    }
    if (webhooks_on_channel_added_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelAdded.Url", ::OpenAPI::toStringValue(webhooks_on_channel_added_url.value()));
    }
    if (webhooks_on_channel_destroy_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelDestroy.Method", ::OpenAPI::toStringValue(webhooks_on_channel_destroy_method.value()));
    }
    if (webhooks_on_channel_destroy_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelDestroy.Url", ::OpenAPI::toStringValue(webhooks_on_channel_destroy_url.value()));
    }
    if (webhooks_on_channel_destroyed_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelDestroyed.Method", ::OpenAPI::toStringValue(webhooks_on_channel_destroyed_method.value()));
    }
    if (webhooks_on_channel_destroyed_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelDestroyed.Url", ::OpenAPI::toStringValue(webhooks_on_channel_destroyed_url.value()));
    }
    if (webhooks_on_channel_update_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelUpdate.Method", ::OpenAPI::toStringValue(webhooks_on_channel_update_method.value()));
    }
    if (webhooks_on_channel_update_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelUpdate.Url", ::OpenAPI::toStringValue(webhooks_on_channel_update_url.value()));
    }
    if (webhooks_on_channel_updated_method.hasValue())
    {
        input.add_var("Webhooks.OnChannelUpdated.Method", ::OpenAPI::toStringValue(webhooks_on_channel_updated_method.value()));
    }
    if (webhooks_on_channel_updated_url.hasValue())
    {
        input.add_var("Webhooks.OnChannelUpdated.Url", ::OpenAPI::toStringValue(webhooks_on_channel_updated_url.value()));
    }
    if (webhooks_on_member_add_method.hasValue())
    {
        input.add_var("Webhooks.OnMemberAdd.Method", ::OpenAPI::toStringValue(webhooks_on_member_add_method.value()));
    }
    if (webhooks_on_member_add_url.hasValue())
    {
        input.add_var("Webhooks.OnMemberAdd.Url", ::OpenAPI::toStringValue(webhooks_on_member_add_url.value()));
    }
    if (webhooks_on_member_added_method.hasValue())
    {
        input.add_var("Webhooks.OnMemberAdded.Method", ::OpenAPI::toStringValue(webhooks_on_member_added_method.value()));
    }
    if (webhooks_on_member_added_url.hasValue())
    {
        input.add_var("Webhooks.OnMemberAdded.Url", ::OpenAPI::toStringValue(webhooks_on_member_added_url.value()));
    }
    if (webhooks_on_member_remove_method.hasValue())
    {
        input.add_var("Webhooks.OnMemberRemove.Method", ::OpenAPI::toStringValue(webhooks_on_member_remove_method.value()));
    }
    if (webhooks_on_member_remove_url.hasValue())
    {
        input.add_var("Webhooks.OnMemberRemove.Url", ::OpenAPI::toStringValue(webhooks_on_member_remove_url.value()));
    }
    if (webhooks_on_member_removed_method.hasValue())
    {
        input.add_var("Webhooks.OnMemberRemoved.Method", ::OpenAPI::toStringValue(webhooks_on_member_removed_method.value()));
    }
    if (webhooks_on_member_removed_url.hasValue())
    {
        input.add_var("Webhooks.OnMemberRemoved.Url", ::OpenAPI::toStringValue(webhooks_on_member_removed_url.value()));
    }
    if (webhooks_on_message_remove_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageRemove.Method", ::OpenAPI::toStringValue(webhooks_on_message_remove_method.value()));
    }
    if (webhooks_on_message_remove_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageRemove.Url", ::OpenAPI::toStringValue(webhooks_on_message_remove_url.value()));
    }
    if (webhooks_on_message_removed_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageRemoved.Method", ::OpenAPI::toStringValue(webhooks_on_message_removed_method.value()));
    }
    if (webhooks_on_message_removed_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageRemoved.Url", ::OpenAPI::toStringValue(webhooks_on_message_removed_url.value()));
    }
    if (webhooks_on_message_send_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageSend.Method", ::OpenAPI::toStringValue(webhooks_on_message_send_method.value()));
    }
    if (webhooks_on_message_send_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageSend.Url", ::OpenAPI::toStringValue(webhooks_on_message_send_url.value()));
    }
    if (webhooks_on_message_sent_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageSent.Method", ::OpenAPI::toStringValue(webhooks_on_message_sent_method.value()));
    }
    if (webhooks_on_message_sent_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageSent.Url", ::OpenAPI::toStringValue(webhooks_on_message_sent_url.value()));
    }
    if (webhooks_on_message_update_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageUpdate.Method", ::OpenAPI::toStringValue(webhooks_on_message_update_method.value()));
    }
    if (webhooks_on_message_update_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageUpdate.Url", ::OpenAPI::toStringValue(webhooks_on_message_update_url.value()));
    }
    if (webhooks_on_message_updated_method.hasValue())
    {
        input.add_var("Webhooks.OnMessageUpdated.Method", ::OpenAPI::toStringValue(webhooks_on_message_updated_method.value()));
    }
    if (webhooks_on_message_updated_url.hasValue())
    {
        input.add_var("Webhooks.OnMessageUpdated.Url", ::OpenAPI::toStringValue(webhooks_on_message_updated_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatV1ServiceApi::updateServiceCallback);
    connect(this, &OAIChatV1ServiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChatV1ServiceApi::updateServiceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_v1_service output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateServiceSignal(output);
        Q_EMIT updateServiceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateServiceSignalE(output, error_type, error_str);
        Q_EMIT updateServiceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateServiceSignalError(output, error_type, error_str);
        Q_EMIT updateServiceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatV1ServiceApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
