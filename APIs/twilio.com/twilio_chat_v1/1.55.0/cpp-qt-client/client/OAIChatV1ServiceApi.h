/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChatV1ServiceApi_H
#define OAI_OAIChatV1ServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChat_v1_service.h"
#include "OAIListServiceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChatV1ServiceApi : public QObject {
    Q_OBJECT

public:
    OAIChatV1ServiceApi(const int timeOut = 0);
    ~OAIChatV1ServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [required]
    */
    virtual void createService(const QString &friendly_name);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteService(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchService(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listService(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  consumption_report_interval qint32 [optional]
    * @param[in]  default_channel_creator_role_sid QString [optional]
    * @param[in]  default_channel_role_sid QString [optional]
    * @param[in]  default_service_role_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  limits_channel_members qint32 [optional]
    * @param[in]  limits_user_channels qint32 [optional]
    * @param[in]  notifications_added_to_channel_enabled bool [optional]
    * @param[in]  notifications_added_to_channel_template QString [optional]
    * @param[in]  notifications_invited_to_channel_enabled bool [optional]
    * @param[in]  notifications_invited_to_channel_template QString [optional]
    * @param[in]  notifications_new_message_enabled bool [optional]
    * @param[in]  notifications_new_message_template QString [optional]
    * @param[in]  notifications_removed_from_channel_enabled bool [optional]
    * @param[in]  notifications_removed_from_channel_template QString [optional]
    * @param[in]  post_webhook_url QString [optional]
    * @param[in]  pre_webhook_url QString [optional]
    * @param[in]  reachability_enabled bool [optional]
    * @param[in]  read_status_enabled bool [optional]
    * @param[in]  typing_indicator_timeout qint32 [optional]
    * @param[in]  webhook_filters QList<QString> [optional]
    * @param[in]  webhook_method QString [optional]
    * @param[in]  webhooks_on_channel_add_method QString [optional]
    * @param[in]  webhooks_on_channel_add_url QString [optional]
    * @param[in]  webhooks_on_channel_added_method QString [optional]
    * @param[in]  webhooks_on_channel_added_url QString [optional]
    * @param[in]  webhooks_on_channel_destroy_method QString [optional]
    * @param[in]  webhooks_on_channel_destroy_url QString [optional]
    * @param[in]  webhooks_on_channel_destroyed_method QString [optional]
    * @param[in]  webhooks_on_channel_destroyed_url QString [optional]
    * @param[in]  webhooks_on_channel_update_method QString [optional]
    * @param[in]  webhooks_on_channel_update_url QString [optional]
    * @param[in]  webhooks_on_channel_updated_method QString [optional]
    * @param[in]  webhooks_on_channel_updated_url QString [optional]
    * @param[in]  webhooks_on_member_add_method QString [optional]
    * @param[in]  webhooks_on_member_add_url QString [optional]
    * @param[in]  webhooks_on_member_added_method QString [optional]
    * @param[in]  webhooks_on_member_added_url QString [optional]
    * @param[in]  webhooks_on_member_remove_method QString [optional]
    * @param[in]  webhooks_on_member_remove_url QString [optional]
    * @param[in]  webhooks_on_member_removed_method QString [optional]
    * @param[in]  webhooks_on_member_removed_url QString [optional]
    * @param[in]  webhooks_on_message_remove_method QString [optional]
    * @param[in]  webhooks_on_message_remove_url QString [optional]
    * @param[in]  webhooks_on_message_removed_method QString [optional]
    * @param[in]  webhooks_on_message_removed_url QString [optional]
    * @param[in]  webhooks_on_message_send_method QString [optional]
    * @param[in]  webhooks_on_message_send_url QString [optional]
    * @param[in]  webhooks_on_message_sent_method QString [optional]
    * @param[in]  webhooks_on_message_sent_url QString [optional]
    * @param[in]  webhooks_on_message_update_method QString [optional]
    * @param[in]  webhooks_on_message_update_url QString [optional]
    * @param[in]  webhooks_on_message_updated_method QString [optional]
    * @param[in]  webhooks_on_message_updated_url QString [optional]
    */
    virtual void updateService(const QString &sid, const ::OpenAPI::OptionalParam<qint32> &consumption_report_interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &default_channel_creator_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_channel_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_service_role_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limits_channel_members = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limits_user_channels = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &notifications_added_to_channel_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &notifications_added_to_channel_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &notifications_invited_to_channel_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &notifications_invited_to_channel_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &notifications_new_message_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &notifications_new_message_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &notifications_removed_from_channel_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &notifications_removed_from_channel_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_webhook_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reachability_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &read_status_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &typing_indicator_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &webhook_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &webhook_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_add_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_add_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_added_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_added_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroy_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroy_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroyed_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_destroyed_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_update_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_update_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_updated_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_channel_updated_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_add_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_add_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_added_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_added_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_remove_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_remove_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_removed_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_member_removed_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_remove_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_remove_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_removed_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_removed_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_send_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_send_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_sent_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_sent_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_update_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_update_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_updated_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks_on_message_updated_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createServiceCallback(OAIHttpRequestWorker *worker);
    void deleteServiceCallback(OAIHttpRequestWorker *worker);
    void fetchServiceCallback(OAIHttpRequestWorker *worker);
    void listServiceCallback(OAIHttpRequestWorker *worker);
    void updateServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createServiceSignal(OAIChat_v1_service summary);
    void deleteServiceSignal();
    void fetchServiceSignal(OAIChat_v1_service summary);
    void listServiceSignal(OAIListServiceResponse summary);
    void updateServiceSignal(OAIChat_v1_service summary);


    void createServiceSignalFull(OAIHttpRequestWorker *worker, OAIChat_v1_service summary);
    void deleteServiceSignalFull(OAIHttpRequestWorker *worker);
    void fetchServiceSignalFull(OAIHttpRequestWorker *worker, OAIChat_v1_service summary);
    void listServiceSignalFull(OAIHttpRequestWorker *worker, OAIListServiceResponse summary);
    void updateServiceSignalFull(OAIHttpRequestWorker *worker, OAIChat_v1_service summary);

    Q_DECL_DEPRECATED_X("Use createServiceSignalError() instead")
    void createServiceSignalE(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalError(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalError() instead")
    void deleteServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceSignalError() instead")
    void fetchServiceSignalE(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceSignalError(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceSignalError() instead")
    void listServiceSignalE(OAIListServiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceSignalError(OAIListServiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalError() instead")
    void updateServiceSignalE(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalError(OAIChat_v1_service summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createServiceSignalErrorFull() instead")
    void createServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalErrorFull() instead")
    void deleteServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchServiceSignalErrorFull() instead")
    void fetchServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceSignalErrorFull() instead")
    void listServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalErrorFull() instead")
    void updateServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
