/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelEnumChannelType from '../model/ChannelEnumChannelType';
import ChatV1ServiceChannel from '../model/ChatV1ServiceChannel';
import ListChannelResponse from '../model/ListChannelResponse';

/**
* ChatV1Channel service.
* @module api/ChatV1ChannelApi
* @version 1.55.0
*/
export default class ChatV1ChannelApi {

    /**
    * Constructs a new ChatV1ChannelApi. 
    * @alias module:api/ChatV1ChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/ChatV1ChannelApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV1ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to create the resource under.
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {String} [friendlyName] A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
     * @param {module:model/ChannelEnumChannelType} [type] 
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
     * @param {module:api/ChatV1ChannelApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV1ServiceChannel}
     */
    createChannel(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'FriendlyName': opts['friendlyName'],
        'Type': opts['type'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV1ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/ChatV1ChannelApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Channel resource to delete.
     * @param {module:api/ChatV1ChannelApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Channels/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchChannel operation.
     * @callback module:api/ChatV1ChannelApi~fetchChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV1ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Channel resource to fetch.
     * @param {module:api/ChatV1ChannelApi~fetchChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV1ServiceChannel}
     */
    fetchChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatV1ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Channels/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannel operation.
     * @callback module:api/ChatV1ChannelApi~listChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ChannelEnumChannelType>} [type] The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ChatV1ChannelApi~listChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelResponse}
     */
    listChannel(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'Type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelResponse;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/ChatV1ChannelApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV1ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to update the resource from.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Channel resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
     * @param {module:api/ChatV1ChannelApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV1ServiceChannel}
     */
    updateChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'FriendlyName': opts['friendlyName'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV1ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Channels/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
