/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IpMessagingV1Service from '../model/IpMessagingV1Service';
import ListServiceResponse from '../model/ListServiceResponse';

/**
* IpMessagingV1Service service.
* @module api/IpMessagingV1ServiceApi
* @version 1.55.0
*/
export default class IpMessagingV1ServiceApi {

    /**
    * Constructs a new IpMessagingV1ServiceApi. 
    * @alias module:api/IpMessagingV1ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/IpMessagingV1ServiceApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} friendlyName 
     * @param {module:api/IpMessagingV1ServiceApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV1Service}
     */
    createService(friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'FriendlyName': friendlyName
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV1Service;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/IpMessagingV1ServiceApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid 
     * @param {module:api/IpMessagingV1ServiceApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchService operation.
     * @callback module:api/IpMessagingV1ServiceApi~fetchServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid 
     * @param {module:api/IpMessagingV1ServiceApi~fetchServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV1Service}
     */
    fetchService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpMessagingV1Service;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listService operation.
     * @callback module:api/IpMessagingV1ServiceApi~listServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/IpMessagingV1ServiceApi~listServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceResponse}
     */
    listService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceResponse;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/IpMessagingV1ServiceApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV1Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid 
     * @param {Object} opts Optional parameters
     * @param {Number} [consumptionReportInterval] 
     * @param {String} [defaultChannelCreatorRoleSid] 
     * @param {String} [defaultChannelRoleSid] 
     * @param {String} [defaultServiceRoleSid] 
     * @param {String} [friendlyName] 
     * @param {Number} [limitsChannelMembers] 
     * @param {Number} [limitsUserChannels] 
     * @param {Boolean} [notificationsAddedToChannelEnabled] 
     * @param {String} [notificationsAddedToChannelTemplate] 
     * @param {Boolean} [notificationsInvitedToChannelEnabled] 
     * @param {String} [notificationsInvitedToChannelTemplate] 
     * @param {Boolean} [notificationsNewMessageEnabled] 
     * @param {String} [notificationsNewMessageTemplate] 
     * @param {Boolean} [notificationsRemovedFromChannelEnabled] 
     * @param {String} [notificationsRemovedFromChannelTemplate] 
     * @param {String} [postWebhookUrl] 
     * @param {String} [preWebhookUrl] 
     * @param {Boolean} [reachabilityEnabled] 
     * @param {Boolean} [readStatusEnabled] 
     * @param {Number} [typingIndicatorTimeout] 
     * @param {Array.<String>} [webhookFilters] 
     * @param {module:model/String} [webhookMethod] 
     * @param {module:model/String} [webhooksOnChannelAddMethod] 
     * @param {String} [webhooksOnChannelAddUrl] 
     * @param {module:model/String} [webhooksOnChannelAddedMethod] 
     * @param {String} [webhooksOnChannelAddedUrl] 
     * @param {module:model/String} [webhooksOnChannelDestroyMethod] 
     * @param {String} [webhooksOnChannelDestroyUrl] 
     * @param {module:model/String} [webhooksOnChannelDestroyedMethod] 
     * @param {String} [webhooksOnChannelDestroyedUrl] 
     * @param {module:model/String} [webhooksOnChannelUpdateMethod] 
     * @param {String} [webhooksOnChannelUpdateUrl] 
     * @param {module:model/String} [webhooksOnChannelUpdatedMethod] 
     * @param {String} [webhooksOnChannelUpdatedUrl] 
     * @param {module:model/String} [webhooksOnMemberAddMethod] 
     * @param {String} [webhooksOnMemberAddUrl] 
     * @param {module:model/String} [webhooksOnMemberAddedMethod] 
     * @param {String} [webhooksOnMemberAddedUrl] 
     * @param {module:model/String} [webhooksOnMemberRemoveMethod] 
     * @param {String} [webhooksOnMemberRemoveUrl] 
     * @param {module:model/String} [webhooksOnMemberRemovedMethod] 
     * @param {String} [webhooksOnMemberRemovedUrl] 
     * @param {module:model/String} [webhooksOnMessageRemoveMethod] 
     * @param {String} [webhooksOnMessageRemoveUrl] 
     * @param {module:model/String} [webhooksOnMessageRemovedMethod] 
     * @param {String} [webhooksOnMessageRemovedUrl] 
     * @param {module:model/String} [webhooksOnMessageSendMethod] 
     * @param {String} [webhooksOnMessageSendUrl] 
     * @param {module:model/String} [webhooksOnMessageSentMethod] 
     * @param {String} [webhooksOnMessageSentUrl] 
     * @param {module:model/String} [webhooksOnMessageUpdateMethod] 
     * @param {String} [webhooksOnMessageUpdateUrl] 
     * @param {module:model/String} [webhooksOnMessageUpdatedMethod] 
     * @param {String} [webhooksOnMessageUpdatedUrl] 
     * @param {module:api/IpMessagingV1ServiceApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV1Service}
     */
    updateService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConsumptionReportInterval': opts['consumptionReportInterval'],
        'DefaultChannelCreatorRoleSid': opts['defaultChannelCreatorRoleSid'],
        'DefaultChannelRoleSid': opts['defaultChannelRoleSid'],
        'DefaultServiceRoleSid': opts['defaultServiceRoleSid'],
        'FriendlyName': opts['friendlyName'],
        'Limits.ChannelMembers': opts['limitsChannelMembers'],
        'Limits.UserChannels': opts['limitsUserChannels'],
        'Notifications.AddedToChannel.Enabled': opts['notificationsAddedToChannelEnabled'],
        'Notifications.AddedToChannel.Template': opts['notificationsAddedToChannelTemplate'],
        'Notifications.InvitedToChannel.Enabled': opts['notificationsInvitedToChannelEnabled'],
        'Notifications.InvitedToChannel.Template': opts['notificationsInvitedToChannelTemplate'],
        'Notifications.NewMessage.Enabled': opts['notificationsNewMessageEnabled'],
        'Notifications.NewMessage.Template': opts['notificationsNewMessageTemplate'],
        'Notifications.RemovedFromChannel.Enabled': opts['notificationsRemovedFromChannelEnabled'],
        'Notifications.RemovedFromChannel.Template': opts['notificationsRemovedFromChannelTemplate'],
        'PostWebhookUrl': opts['postWebhookUrl'],
        'PreWebhookUrl': opts['preWebhookUrl'],
        'ReachabilityEnabled': opts['reachabilityEnabled'],
        'ReadStatusEnabled': opts['readStatusEnabled'],
        'TypingIndicatorTimeout': opts['typingIndicatorTimeout'],
        'WebhookFilters': this.apiClient.buildCollectionParam(opts['webhookFilters'], 'csv'),
        'WebhookMethod': opts['webhookMethod'],
        'Webhooks.OnChannelAdd.Method': opts['webhooksOnChannelAddMethod'],
        'Webhooks.OnChannelAdd.Url': opts['webhooksOnChannelAddUrl'],
        'Webhooks.OnChannelAdded.Method': opts['webhooksOnChannelAddedMethod'],
        'Webhooks.OnChannelAdded.Url': opts['webhooksOnChannelAddedUrl'],
        'Webhooks.OnChannelDestroy.Method': opts['webhooksOnChannelDestroyMethod'],
        'Webhooks.OnChannelDestroy.Url': opts['webhooksOnChannelDestroyUrl'],
        'Webhooks.OnChannelDestroyed.Method': opts['webhooksOnChannelDestroyedMethod'],
        'Webhooks.OnChannelDestroyed.Url': opts['webhooksOnChannelDestroyedUrl'],
        'Webhooks.OnChannelUpdate.Method': opts['webhooksOnChannelUpdateMethod'],
        'Webhooks.OnChannelUpdate.Url': opts['webhooksOnChannelUpdateUrl'],
        'Webhooks.OnChannelUpdated.Method': opts['webhooksOnChannelUpdatedMethod'],
        'Webhooks.OnChannelUpdated.Url': opts['webhooksOnChannelUpdatedUrl'],
        'Webhooks.OnMemberAdd.Method': opts['webhooksOnMemberAddMethod'],
        'Webhooks.OnMemberAdd.Url': opts['webhooksOnMemberAddUrl'],
        'Webhooks.OnMemberAdded.Method': opts['webhooksOnMemberAddedMethod'],
        'Webhooks.OnMemberAdded.Url': opts['webhooksOnMemberAddedUrl'],
        'Webhooks.OnMemberRemove.Method': opts['webhooksOnMemberRemoveMethod'],
        'Webhooks.OnMemberRemove.Url': opts['webhooksOnMemberRemoveUrl'],
        'Webhooks.OnMemberRemoved.Method': opts['webhooksOnMemberRemovedMethod'],
        'Webhooks.OnMemberRemoved.Url': opts['webhooksOnMemberRemovedUrl'],
        'Webhooks.OnMessageRemove.Method': opts['webhooksOnMessageRemoveMethod'],
        'Webhooks.OnMessageRemove.Url': opts['webhooksOnMessageRemoveUrl'],
        'Webhooks.OnMessageRemoved.Method': opts['webhooksOnMessageRemovedMethod'],
        'Webhooks.OnMessageRemoved.Url': opts['webhooksOnMessageRemovedUrl'],
        'Webhooks.OnMessageSend.Method': opts['webhooksOnMessageSendMethod'],
        'Webhooks.OnMessageSend.Url': opts['webhooksOnMessageSendUrl'],
        'Webhooks.OnMessageSent.Method': opts['webhooksOnMessageSentMethod'],
        'Webhooks.OnMessageSent.Url': opts['webhooksOnMessageSentUrl'],
        'Webhooks.OnMessageUpdate.Method': opts['webhooksOnMessageUpdateMethod'],
        'Webhooks.OnMessageUpdate.Url': opts['webhooksOnMessageUpdateUrl'],
        'Webhooks.OnMessageUpdated.Method': opts['webhooksOnMessageUpdatedMethod'],
        'Webhooks.OnMessageUpdated.Url': opts['webhooksOnMessageUpdatedUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV1Service;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
