/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIp_messaging_v1_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIp_messaging_v1_service::OAIIp_messaging_v1_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIp_messaging_v1_service::OAIIp_messaging_v1_service() {
    this->initializeModel();
}

OAIIp_messaging_v1_service::~OAIIp_messaging_v1_service() {}

void OAIIp_messaging_v1_service::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_consumption_report_interval_isSet = false;
    m_consumption_report_interval_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_channel_creator_role_sid_isSet = false;
    m_default_channel_creator_role_sid_isValid = false;

    m_default_channel_role_sid_isSet = false;
    m_default_channel_role_sid_isValid = false;

    m_default_service_role_sid_isSet = false;
    m_default_service_role_sid_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_post_webhook_url_isSet = false;
    m_post_webhook_url_isValid = false;

    m_pre_webhook_url_isSet = false;
    m_pre_webhook_url_isValid = false;

    m_reachability_enabled_isSet = false;
    m_reachability_enabled_isValid = false;

    m_read_status_enabled_isSet = false;
    m_read_status_enabled_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_typing_indicator_timeout_isSet = false;
    m_typing_indicator_timeout_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_webhook_filters_isSet = false;
    m_webhook_filters_isValid = false;

    m_webhook_method_isSet = false;
    m_webhook_method_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAIIp_messaging_v1_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIp_messaging_v1_service::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_consumption_report_interval_isValid = ::OpenAPI::fromJsonValue(m_consumption_report_interval, json[QString("consumption_report_interval")]);
    m_consumption_report_interval_isSet = !json[QString("consumption_report_interval")].isNull() && m_consumption_report_interval_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_default_channel_creator_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_channel_creator_role_sid, json[QString("default_channel_creator_role_sid")]);
    m_default_channel_creator_role_sid_isSet = !json[QString("default_channel_creator_role_sid")].isNull() && m_default_channel_creator_role_sid_isValid;

    m_default_channel_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_channel_role_sid, json[QString("default_channel_role_sid")]);
    m_default_channel_role_sid_isSet = !json[QString("default_channel_role_sid")].isNull() && m_default_channel_role_sid_isValid;

    m_default_service_role_sid_isValid = ::OpenAPI::fromJsonValue(m_default_service_role_sid, json[QString("default_service_role_sid")]);
    m_default_service_role_sid_isSet = !json[QString("default_service_role_sid")].isNull() && m_default_service_role_sid_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_post_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_post_webhook_url, json[QString("post_webhook_url")]);
    m_post_webhook_url_isSet = !json[QString("post_webhook_url")].isNull() && m_post_webhook_url_isValid;

    m_pre_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_pre_webhook_url, json[QString("pre_webhook_url")]);
    m_pre_webhook_url_isSet = !json[QString("pre_webhook_url")].isNull() && m_pre_webhook_url_isValid;

    m_reachability_enabled_isValid = ::OpenAPI::fromJsonValue(m_reachability_enabled, json[QString("reachability_enabled")]);
    m_reachability_enabled_isSet = !json[QString("reachability_enabled")].isNull() && m_reachability_enabled_isValid;

    m_read_status_enabled_isValid = ::OpenAPI::fromJsonValue(m_read_status_enabled, json[QString("read_status_enabled")]);
    m_read_status_enabled_isSet = !json[QString("read_status_enabled")].isNull() && m_read_status_enabled_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_typing_indicator_timeout_isValid = ::OpenAPI::fromJsonValue(m_typing_indicator_timeout, json[QString("typing_indicator_timeout")]);
    m_typing_indicator_timeout_isSet = !json[QString("typing_indicator_timeout")].isNull() && m_typing_indicator_timeout_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_webhook_filters_isValid = ::OpenAPI::fromJsonValue(m_webhook_filters, json[QString("webhook_filters")]);
    m_webhook_filters_isSet = !json[QString("webhook_filters")].isNull() && m_webhook_filters_isValid;

    m_webhook_method_isValid = ::OpenAPI::fromJsonValue(m_webhook_method, json[QString("webhook_method")]);
    m_webhook_method_isSet = !json[QString("webhook_method")].isNull() && m_webhook_method_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAIIp_messaging_v1_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIp_messaging_v1_service::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_consumption_report_interval_isSet) {
        obj.insert(QString("consumption_report_interval"), ::OpenAPI::toJsonValue(m_consumption_report_interval));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_channel_creator_role_sid_isSet) {
        obj.insert(QString("default_channel_creator_role_sid"), ::OpenAPI::toJsonValue(m_default_channel_creator_role_sid));
    }
    if (m_default_channel_role_sid_isSet) {
        obj.insert(QString("default_channel_role_sid"), ::OpenAPI::toJsonValue(m_default_channel_role_sid));
    }
    if (m_default_service_role_sid_isSet) {
        obj.insert(QString("default_service_role_sid"), ::OpenAPI::toJsonValue(m_default_service_role_sid));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_limits_isSet) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notifications_isSet) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_post_webhook_url_isSet) {
        obj.insert(QString("post_webhook_url"), ::OpenAPI::toJsonValue(m_post_webhook_url));
    }
    if (m_pre_webhook_url_isSet) {
        obj.insert(QString("pre_webhook_url"), ::OpenAPI::toJsonValue(m_pre_webhook_url));
    }
    if (m_reachability_enabled_isSet) {
        obj.insert(QString("reachability_enabled"), ::OpenAPI::toJsonValue(m_reachability_enabled));
    }
    if (m_read_status_enabled_isSet) {
        obj.insert(QString("read_status_enabled"), ::OpenAPI::toJsonValue(m_read_status_enabled));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_typing_indicator_timeout_isSet) {
        obj.insert(QString("typing_indicator_timeout"), ::OpenAPI::toJsonValue(m_typing_indicator_timeout));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_webhook_filters.size() > 0) {
        obj.insert(QString("webhook_filters"), ::OpenAPI::toJsonValue(m_webhook_filters));
    }
    if (m_webhook_method_isSet) {
        obj.insert(QString("webhook_method"), ::OpenAPI::toJsonValue(m_webhook_method));
    }
    if (m_webhooks_isSet) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

QString OAIIp_messaging_v1_service::getAccountSid() const {
    return m_account_sid;
}
void OAIIp_messaging_v1_service::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIIp_messaging_v1_service::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIIp_messaging_v1_service::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

qint32 OAIIp_messaging_v1_service::getConsumptionReportInterval() const {
    return m_consumption_report_interval;
}
void OAIIp_messaging_v1_service::setConsumptionReportInterval(const qint32 &consumption_report_interval) {
    m_consumption_report_interval = consumption_report_interval;
    m_consumption_report_interval_isSet = true;
}

bool OAIIp_messaging_v1_service::is_consumption_report_interval_Set() const{
    return m_consumption_report_interval_isSet;
}

bool OAIIp_messaging_v1_service::is_consumption_report_interval_Valid() const{
    return m_consumption_report_interval_isValid;
}

QDateTime OAIIp_messaging_v1_service::getDateCreated() const {
    return m_date_created;
}
void OAIIp_messaging_v1_service::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIIp_messaging_v1_service::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIIp_messaging_v1_service::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIIp_messaging_v1_service::getDateUpdated() const {
    return m_date_updated;
}
void OAIIp_messaging_v1_service::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIIp_messaging_v1_service::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIIp_messaging_v1_service::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIIp_messaging_v1_service::getDefaultChannelCreatorRoleSid() const {
    return m_default_channel_creator_role_sid;
}
void OAIIp_messaging_v1_service::setDefaultChannelCreatorRoleSid(const QString &default_channel_creator_role_sid) {
    m_default_channel_creator_role_sid = default_channel_creator_role_sid;
    m_default_channel_creator_role_sid_isSet = true;
}

bool OAIIp_messaging_v1_service::is_default_channel_creator_role_sid_Set() const{
    return m_default_channel_creator_role_sid_isSet;
}

bool OAIIp_messaging_v1_service::is_default_channel_creator_role_sid_Valid() const{
    return m_default_channel_creator_role_sid_isValid;
}

QString OAIIp_messaging_v1_service::getDefaultChannelRoleSid() const {
    return m_default_channel_role_sid;
}
void OAIIp_messaging_v1_service::setDefaultChannelRoleSid(const QString &default_channel_role_sid) {
    m_default_channel_role_sid = default_channel_role_sid;
    m_default_channel_role_sid_isSet = true;
}

bool OAIIp_messaging_v1_service::is_default_channel_role_sid_Set() const{
    return m_default_channel_role_sid_isSet;
}

bool OAIIp_messaging_v1_service::is_default_channel_role_sid_Valid() const{
    return m_default_channel_role_sid_isValid;
}

QString OAIIp_messaging_v1_service::getDefaultServiceRoleSid() const {
    return m_default_service_role_sid;
}
void OAIIp_messaging_v1_service::setDefaultServiceRoleSid(const QString &default_service_role_sid) {
    m_default_service_role_sid = default_service_role_sid;
    m_default_service_role_sid_isSet = true;
}

bool OAIIp_messaging_v1_service::is_default_service_role_sid_Set() const{
    return m_default_service_role_sid_isSet;
}

bool OAIIp_messaging_v1_service::is_default_service_role_sid_Valid() const{
    return m_default_service_role_sid_isValid;
}

QString OAIIp_messaging_v1_service::getFriendlyName() const {
    return m_friendly_name;
}
void OAIIp_messaging_v1_service::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIIp_messaging_v1_service::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIIp_messaging_v1_service::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QJsonValue OAIIp_messaging_v1_service::getLimits() const {
    return m_limits;
}
void OAIIp_messaging_v1_service::setLimits(const QJsonValue &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIIp_messaging_v1_service::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIIp_messaging_v1_service::is_limits_Valid() const{
    return m_limits_isValid;
}

OAIObject OAIIp_messaging_v1_service::getLinks() const {
    return m_links;
}
void OAIIp_messaging_v1_service::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIIp_messaging_v1_service::is_links_Set() const{
    return m_links_isSet;
}

bool OAIIp_messaging_v1_service::is_links_Valid() const{
    return m_links_isValid;
}

QJsonValue OAIIp_messaging_v1_service::getNotifications() const {
    return m_notifications;
}
void OAIIp_messaging_v1_service::setNotifications(const QJsonValue &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIIp_messaging_v1_service::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIIp_messaging_v1_service::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QString OAIIp_messaging_v1_service::getPostWebhookUrl() const {
    return m_post_webhook_url;
}
void OAIIp_messaging_v1_service::setPostWebhookUrl(const QString &post_webhook_url) {
    m_post_webhook_url = post_webhook_url;
    m_post_webhook_url_isSet = true;
}

bool OAIIp_messaging_v1_service::is_post_webhook_url_Set() const{
    return m_post_webhook_url_isSet;
}

bool OAIIp_messaging_v1_service::is_post_webhook_url_Valid() const{
    return m_post_webhook_url_isValid;
}

QString OAIIp_messaging_v1_service::getPreWebhookUrl() const {
    return m_pre_webhook_url;
}
void OAIIp_messaging_v1_service::setPreWebhookUrl(const QString &pre_webhook_url) {
    m_pre_webhook_url = pre_webhook_url;
    m_pre_webhook_url_isSet = true;
}

bool OAIIp_messaging_v1_service::is_pre_webhook_url_Set() const{
    return m_pre_webhook_url_isSet;
}

bool OAIIp_messaging_v1_service::is_pre_webhook_url_Valid() const{
    return m_pre_webhook_url_isValid;
}

bool OAIIp_messaging_v1_service::isReachabilityEnabled() const {
    return m_reachability_enabled;
}
void OAIIp_messaging_v1_service::setReachabilityEnabled(const bool &reachability_enabled) {
    m_reachability_enabled = reachability_enabled;
    m_reachability_enabled_isSet = true;
}

bool OAIIp_messaging_v1_service::is_reachability_enabled_Set() const{
    return m_reachability_enabled_isSet;
}

bool OAIIp_messaging_v1_service::is_reachability_enabled_Valid() const{
    return m_reachability_enabled_isValid;
}

bool OAIIp_messaging_v1_service::isReadStatusEnabled() const {
    return m_read_status_enabled;
}
void OAIIp_messaging_v1_service::setReadStatusEnabled(const bool &read_status_enabled) {
    m_read_status_enabled = read_status_enabled;
    m_read_status_enabled_isSet = true;
}

bool OAIIp_messaging_v1_service::is_read_status_enabled_Set() const{
    return m_read_status_enabled_isSet;
}

bool OAIIp_messaging_v1_service::is_read_status_enabled_Valid() const{
    return m_read_status_enabled_isValid;
}

QString OAIIp_messaging_v1_service::getSid() const {
    return m_sid;
}
void OAIIp_messaging_v1_service::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIIp_messaging_v1_service::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIIp_messaging_v1_service::is_sid_Valid() const{
    return m_sid_isValid;
}

qint32 OAIIp_messaging_v1_service::getTypingIndicatorTimeout() const {
    return m_typing_indicator_timeout;
}
void OAIIp_messaging_v1_service::setTypingIndicatorTimeout(const qint32 &typing_indicator_timeout) {
    m_typing_indicator_timeout = typing_indicator_timeout;
    m_typing_indicator_timeout_isSet = true;
}

bool OAIIp_messaging_v1_service::is_typing_indicator_timeout_Set() const{
    return m_typing_indicator_timeout_isSet;
}

bool OAIIp_messaging_v1_service::is_typing_indicator_timeout_Valid() const{
    return m_typing_indicator_timeout_isValid;
}

QString OAIIp_messaging_v1_service::getUrl() const {
    return m_url;
}
void OAIIp_messaging_v1_service::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIp_messaging_v1_service::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIp_messaging_v1_service::is_url_Valid() const{
    return m_url_isValid;
}

QList<QString> OAIIp_messaging_v1_service::getWebhookFilters() const {
    return m_webhook_filters;
}
void OAIIp_messaging_v1_service::setWebhookFilters(const QList<QString> &webhook_filters) {
    m_webhook_filters = webhook_filters;
    m_webhook_filters_isSet = true;
}

bool OAIIp_messaging_v1_service::is_webhook_filters_Set() const{
    return m_webhook_filters_isSet;
}

bool OAIIp_messaging_v1_service::is_webhook_filters_Valid() const{
    return m_webhook_filters_isValid;
}

QString OAIIp_messaging_v1_service::getWebhookMethod() const {
    return m_webhook_method;
}
void OAIIp_messaging_v1_service::setWebhookMethod(const QString &webhook_method) {
    m_webhook_method = webhook_method;
    m_webhook_method_isSet = true;
}

bool OAIIp_messaging_v1_service::is_webhook_method_Set() const{
    return m_webhook_method_isSet;
}

bool OAIIp_messaging_v1_service::is_webhook_method_Valid() const{
    return m_webhook_method_isValid;
}

QJsonValue OAIIp_messaging_v1_service::getWebhooks() const {
    return m_webhooks;
}
void OAIIp_messaging_v1_service::setWebhooks(const QJsonValue &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAIIp_messaging_v1_service::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAIIp_messaging_v1_service::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAIIp_messaging_v1_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumption_report_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_channel_creator_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_channel_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachability_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_status_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typing_indicator_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIp_messaging_v1_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
