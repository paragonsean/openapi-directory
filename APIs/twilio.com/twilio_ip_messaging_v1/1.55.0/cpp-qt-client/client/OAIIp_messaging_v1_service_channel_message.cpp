/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIp_messaging_v1_service_channel_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIp_messaging_v1_service_channel_message::OAIIp_messaging_v1_service_channel_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIp_messaging_v1_service_channel_message::OAIIp_messaging_v1_service_channel_message() {
    this->initializeModel();
}

OAIIp_messaging_v1_service_channel_message::~OAIIp_messaging_v1_service_channel_message() {}

void OAIIp_messaging_v1_service_channel_message::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_channel_sid_isSet = false;
    m_channel_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_was_edited_isSet = false;
    m_was_edited_isValid = false;
}

void OAIIp_messaging_v1_service_channel_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIp_messaging_v1_service_channel_message::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_channel_sid_isValid = ::OpenAPI::fromJsonValue(m_channel_sid, json[QString("channel_sid")]);
    m_channel_sid_isSet = !json[QString("channel_sid")].isNull() && m_channel_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_was_edited_isValid = ::OpenAPI::fromJsonValue(m_was_edited, json[QString("was_edited")]);
    m_was_edited_isSet = !json[QString("was_edited")].isNull() && m_was_edited_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIp_messaging_v1_service_channel_message::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_channel_sid_isSet) {
        obj.insert(QString("channel_sid"), ::OpenAPI::toJsonValue(m_channel_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_was_edited_isSet) {
        obj.insert(QString("was_edited"), ::OpenAPI::toJsonValue(m_was_edited));
    }
    return obj;
}

QString OAIIp_messaging_v1_service_channel_message::getAccountSid() const {
    return m_account_sid;
}
void OAIIp_messaging_v1_service_channel_message::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getAttributes() const {
    return m_attributes;
}
void OAIIp_messaging_v1_service_channel_message::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getBody() const {
    return m_body;
}
void OAIIp_messaging_v1_service_channel_message::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getChannelSid() const {
    return m_channel_sid;
}
void OAIIp_messaging_v1_service_channel_message::setChannelSid(const QString &channel_sid) {
    m_channel_sid = channel_sid;
    m_channel_sid_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_channel_sid_Set() const{
    return m_channel_sid_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_channel_sid_Valid() const{
    return m_channel_sid_isValid;
}

QDateTime OAIIp_messaging_v1_service_channel_message::getDateCreated() const {
    return m_date_created;
}
void OAIIp_messaging_v1_service_channel_message::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIIp_messaging_v1_service_channel_message::getDateUpdated() const {
    return m_date_updated;
}
void OAIIp_messaging_v1_service_channel_message::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getFrom() const {
    return m_from;
}
void OAIIp_messaging_v1_service_channel_message::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_from_Set() const{
    return m_from_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAIIp_messaging_v1_service_channel_message::getIndex() const {
    return m_index;
}
void OAIIp_messaging_v1_service_channel_message::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_index_Set() const{
    return m_index_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getServiceSid() const {
    return m_service_sid;
}
void OAIIp_messaging_v1_service_channel_message::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getSid() const {
    return m_sid;
}
void OAIIp_messaging_v1_service_channel_message::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getTo() const {
    return m_to;
}
void OAIIp_messaging_v1_service_channel_message::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_to_Set() const{
    return m_to_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIIp_messaging_v1_service_channel_message::getUrl() const {
    return m_url;
}
void OAIIp_messaging_v1_service_channel_message::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIp_messaging_v1_service_channel_message::isWasEdited() const {
    return m_was_edited;
}
void OAIIp_messaging_v1_service_channel_message::setWasEdited(const bool &was_edited) {
    m_was_edited = was_edited;
    m_was_edited_isSet = true;
}

bool OAIIp_messaging_v1_service_channel_message::is_was_edited_Set() const{
    return m_was_edited_isSet;
}

bool OAIIp_messaging_v1_service_channel_message::is_was_edited_Valid() const{
    return m_was_edited_isValid;
}

bool OAIIp_messaging_v1_service_channel_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_was_edited_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIp_messaging_v1_service_channel_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
