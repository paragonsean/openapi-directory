/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntelligence_v2_service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntelligence_v2_service::OAIIntelligence_v2_service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntelligence_v2_service::OAIIntelligence_v2_service() {
    this->initializeModel();
}

OAIIntelligence_v2_service::~OAIIntelligence_v2_service() {}

void OAIIntelligence_v2_service::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_auto_redaction_isSet = false;
    m_auto_redaction_isValid = false;

    m_auto_transcribe_isSet = false;
    m_auto_transcribe_isValid = false;

    m_data_logging_isSet = false;
    m_data_logging_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_media_redaction_isSet = false;
    m_media_redaction_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_webhook_http_method_isSet = false;
    m_webhook_http_method_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIIntelligence_v2_service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntelligence_v2_service::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_auto_redaction_isValid = ::OpenAPI::fromJsonValue(m_auto_redaction, json[QString("auto_redaction")]);
    m_auto_redaction_isSet = !json[QString("auto_redaction")].isNull() && m_auto_redaction_isValid;

    m_auto_transcribe_isValid = ::OpenAPI::fromJsonValue(m_auto_transcribe, json[QString("auto_transcribe")]);
    m_auto_transcribe_isSet = !json[QString("auto_transcribe")].isNull() && m_auto_transcribe_isValid;

    m_data_logging_isValid = ::OpenAPI::fromJsonValue(m_data_logging, json[QString("data_logging")]);
    m_data_logging_isSet = !json[QString("data_logging")].isNull() && m_data_logging_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_media_redaction_isValid = ::OpenAPI::fromJsonValue(m_media_redaction, json[QString("media_redaction")]);
    m_media_redaction_isSet = !json[QString("media_redaction")].isNull() && m_media_redaction_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_webhook_http_method_isValid = ::OpenAPI::fromJsonValue(m_webhook_http_method, json[QString("webhook_http_method")]);
    m_webhook_http_method_isSet = !json[QString("webhook_http_method")].isNull() && m_webhook_http_method_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIIntelligence_v2_service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntelligence_v2_service::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_auto_redaction_isSet) {
        obj.insert(QString("auto_redaction"), ::OpenAPI::toJsonValue(m_auto_redaction));
    }
    if (m_auto_transcribe_isSet) {
        obj.insert(QString("auto_transcribe"), ::OpenAPI::toJsonValue(m_auto_transcribe));
    }
    if (m_data_logging_isSet) {
        obj.insert(QString("data_logging"), ::OpenAPI::toJsonValue(m_data_logging));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_media_redaction_isSet) {
        obj.insert(QString("media_redaction"), ::OpenAPI::toJsonValue(m_media_redaction));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_webhook_http_method.isSet()) {
        obj.insert(QString("webhook_http_method"), ::OpenAPI::toJsonValue(m_webhook_http_method));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

QString OAIIntelligence_v2_service::getAccountSid() const {
    return m_account_sid;
}
void OAIIntelligence_v2_service::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIIntelligence_v2_service::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIIntelligence_v2_service::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIIntelligence_v2_service::isAutoRedaction() const {
    return m_auto_redaction;
}
void OAIIntelligence_v2_service::setAutoRedaction(const bool &auto_redaction) {
    m_auto_redaction = auto_redaction;
    m_auto_redaction_isSet = true;
}

bool OAIIntelligence_v2_service::is_auto_redaction_Set() const{
    return m_auto_redaction_isSet;
}

bool OAIIntelligence_v2_service::is_auto_redaction_Valid() const{
    return m_auto_redaction_isValid;
}

bool OAIIntelligence_v2_service::isAutoTranscribe() const {
    return m_auto_transcribe;
}
void OAIIntelligence_v2_service::setAutoTranscribe(const bool &auto_transcribe) {
    m_auto_transcribe = auto_transcribe;
    m_auto_transcribe_isSet = true;
}

bool OAIIntelligence_v2_service::is_auto_transcribe_Set() const{
    return m_auto_transcribe_isSet;
}

bool OAIIntelligence_v2_service::is_auto_transcribe_Valid() const{
    return m_auto_transcribe_isValid;
}

bool OAIIntelligence_v2_service::isDataLogging() const {
    return m_data_logging;
}
void OAIIntelligence_v2_service::setDataLogging(const bool &data_logging) {
    m_data_logging = data_logging;
    m_data_logging_isSet = true;
}

bool OAIIntelligence_v2_service::is_data_logging_Set() const{
    return m_data_logging_isSet;
}

bool OAIIntelligence_v2_service::is_data_logging_Valid() const{
    return m_data_logging_isValid;
}

QDateTime OAIIntelligence_v2_service::getDateCreated() const {
    return m_date_created;
}
void OAIIntelligence_v2_service::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIIntelligence_v2_service::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIIntelligence_v2_service::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIIntelligence_v2_service::getDateUpdated() const {
    return m_date_updated;
}
void OAIIntelligence_v2_service::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIIntelligence_v2_service::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIIntelligence_v2_service::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIIntelligence_v2_service::getFriendlyName() const {
    return m_friendly_name;
}
void OAIIntelligence_v2_service::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIIntelligence_v2_service::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIIntelligence_v2_service::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIIntelligence_v2_service::getLanguageCode() const {
    return m_language_code;
}
void OAIIntelligence_v2_service::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIIntelligence_v2_service::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIIntelligence_v2_service::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIIntelligence_v2_service::isMediaRedaction() const {
    return m_media_redaction;
}
void OAIIntelligence_v2_service::setMediaRedaction(const bool &media_redaction) {
    m_media_redaction = media_redaction;
    m_media_redaction_isSet = true;
}

bool OAIIntelligence_v2_service::is_media_redaction_Set() const{
    return m_media_redaction_isSet;
}

bool OAIIntelligence_v2_service::is_media_redaction_Valid() const{
    return m_media_redaction_isValid;
}

QString OAIIntelligence_v2_service::getSid() const {
    return m_sid;
}
void OAIIntelligence_v2_service::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIIntelligence_v2_service::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIIntelligence_v2_service::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIIntelligence_v2_service::getUniqueName() const {
    return m_unique_name;
}
void OAIIntelligence_v2_service::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIIntelligence_v2_service::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIIntelligence_v2_service::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIIntelligence_v2_service::getUrl() const {
    return m_url;
}
void OAIIntelligence_v2_service::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIntelligence_v2_service::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIntelligence_v2_service::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIIntelligence_v2_service::getVersion() const {
    return m_version;
}
void OAIIntelligence_v2_service::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIntelligence_v2_service::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIntelligence_v2_service::is_version_Valid() const{
    return m_version_isValid;
}

OAIService_enum_http_method OAIIntelligence_v2_service::getWebhookHttpMethod() const {
    return m_webhook_http_method;
}
void OAIIntelligence_v2_service::setWebhookHttpMethod(const OAIService_enum_http_method &webhook_http_method) {
    m_webhook_http_method = webhook_http_method;
    m_webhook_http_method_isSet = true;
}

bool OAIIntelligence_v2_service::is_webhook_http_method_Set() const{
    return m_webhook_http_method_isSet;
}

bool OAIIntelligence_v2_service::is_webhook_http_method_Valid() const{
    return m_webhook_http_method_isValid;
}

QString OAIIntelligence_v2_service::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIIntelligence_v2_service::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIIntelligence_v2_service::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIIntelligence_v2_service::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIIntelligence_v2_service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_redaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_transcribe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_redaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_http_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntelligence_v2_service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
