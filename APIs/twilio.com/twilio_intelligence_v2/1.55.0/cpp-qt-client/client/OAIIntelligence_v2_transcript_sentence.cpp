/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntelligence_v2_transcript_sentence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntelligence_v2_transcript_sentence::OAIIntelligence_v2_transcript_sentence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntelligence_v2_transcript_sentence::OAIIntelligence_v2_transcript_sentence() {
    this->initializeModel();
}

OAIIntelligence_v2_transcript_sentence::~OAIIntelligence_v2_transcript_sentence() {}

void OAIIntelligence_v2_transcript_sentence::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_media_channel_isSet = false;
    m_media_channel_isValid = false;

    m_sentence_index_isSet = false;
    m_sentence_index_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;
}

void OAIIntelligence_v2_transcript_sentence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntelligence_v2_transcript_sentence::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_media_channel_isValid = ::OpenAPI::fromJsonValue(m_media_channel, json[QString("media_channel")]);
    m_media_channel_isSet = !json[QString("media_channel")].isNull() && m_media_channel_isValid;

    m_sentence_index_isValid = ::OpenAPI::fromJsonValue(m_sentence_index, json[QString("sentence_index")]);
    m_sentence_index_isSet = !json[QString("sentence_index")].isNull() && m_sentence_index_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;
}

QString OAIIntelligence_v2_transcript_sentence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntelligence_v2_transcript_sentence::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_media_channel_isSet) {
        obj.insert(QString("media_channel"), ::OpenAPI::toJsonValue(m_media_channel));
    }
    if (m_sentence_index_isSet) {
        obj.insert(QString("sentence_index"), ::OpenAPI::toJsonValue(m_sentence_index));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    return obj;
}

double OAIIntelligence_v2_transcript_sentence::getConfidence() const {
    return m_confidence;
}
void OAIIntelligence_v2_transcript_sentence::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_confidence_Valid() const{
    return m_confidence_isValid;
}

double OAIIntelligence_v2_transcript_sentence::getEndTime() const {
    return m_end_time;
}
void OAIIntelligence_v2_transcript_sentence::setEndTime(const double &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIIntelligence_v2_transcript_sentence::getMediaChannel() const {
    return m_media_channel;
}
void OAIIntelligence_v2_transcript_sentence::setMediaChannel(const qint32 &media_channel) {
    m_media_channel = media_channel;
    m_media_channel_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_media_channel_Set() const{
    return m_media_channel_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_media_channel_Valid() const{
    return m_media_channel_isValid;
}

qint32 OAIIntelligence_v2_transcript_sentence::getSentenceIndex() const {
    return m_sentence_index;
}
void OAIIntelligence_v2_transcript_sentence::setSentenceIndex(const qint32 &sentence_index) {
    m_sentence_index = sentence_index;
    m_sentence_index_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_sentence_index_Set() const{
    return m_sentence_index_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_sentence_index_Valid() const{
    return m_sentence_index_isValid;
}

QString OAIIntelligence_v2_transcript_sentence::getSid() const {
    return m_sid;
}
void OAIIntelligence_v2_transcript_sentence::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_sid_Valid() const{
    return m_sid_isValid;
}

double OAIIntelligence_v2_transcript_sentence::getStartTime() const {
    return m_start_time;
}
void OAIIntelligence_v2_transcript_sentence::setStartTime(const double &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIIntelligence_v2_transcript_sentence::getTranscript() const {
    return m_transcript;
}
void OAIIntelligence_v2_transcript_sentence::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIIntelligence_v2_transcript_sentence::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIIntelligence_v2_transcript_sentence::is_transcript_Valid() const{
    return m_transcript_isValid;
}

bool OAIIntelligence_v2_transcript_sentence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntelligence_v2_transcript_sentence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
