/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntelligence_v2_transcript.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntelligence_v2_transcript::OAIIntelligence_v2_transcript(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntelligence_v2_transcript::OAIIntelligence_v2_transcript() {
    this->initializeModel();
}

OAIIntelligence_v2_transcript::~OAIIntelligence_v2_transcript() {}

void OAIIntelligence_v2_transcript::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_customer_key_isSet = false;
    m_customer_key_isValid = false;

    m_data_logging_isSet = false;
    m_data_logging_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_media_start_time_isSet = false;
    m_media_start_time_isValid = false;

    m_redaction_isSet = false;
    m_redaction_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIIntelligence_v2_transcript::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntelligence_v2_transcript::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_customer_key_isValid = ::OpenAPI::fromJsonValue(m_customer_key, json[QString("customer_key")]);
    m_customer_key_isSet = !json[QString("customer_key")].isNull() && m_customer_key_isValid;

    m_data_logging_isValid = ::OpenAPI::fromJsonValue(m_data_logging, json[QString("data_logging")]);
    m_data_logging_isSet = !json[QString("data_logging")].isNull() && m_data_logging_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_media_start_time_isValid = ::OpenAPI::fromJsonValue(m_media_start_time, json[QString("media_start_time")]);
    m_media_start_time_isSet = !json[QString("media_start_time")].isNull() && m_media_start_time_isValid;

    m_redaction_isValid = ::OpenAPI::fromJsonValue(m_redaction, json[QString("redaction")]);
    m_redaction_isSet = !json[QString("redaction")].isNull() && m_redaction_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIIntelligence_v2_transcript::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntelligence_v2_transcript::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_customer_key_isSet) {
        obj.insert(QString("customer_key"), ::OpenAPI::toJsonValue(m_customer_key));
    }
    if (m_data_logging_isSet) {
        obj.insert(QString("data_logging"), ::OpenAPI::toJsonValue(m_data_logging));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_media_start_time_isSet) {
        obj.insert(QString("media_start_time"), ::OpenAPI::toJsonValue(m_media_start_time));
    }
    if (m_redaction_isSet) {
        obj.insert(QString("redaction"), ::OpenAPI::toJsonValue(m_redaction));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIIntelligence_v2_transcript::getAccountSid() const {
    return m_account_sid;
}
void OAIIntelligence_v2_transcript::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIIntelligence_v2_transcript::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIIntelligence_v2_transcript::getChannel() const {
    return m_channel;
}
void OAIIntelligence_v2_transcript::setChannel(const QJsonValue &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIIntelligence_v2_transcript::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIIntelligence_v2_transcript::getCustomerKey() const {
    return m_customer_key;
}
void OAIIntelligence_v2_transcript::setCustomerKey(const QString &customer_key) {
    m_customer_key = customer_key;
    m_customer_key_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_customer_key_Set() const{
    return m_customer_key_isSet;
}

bool OAIIntelligence_v2_transcript::is_customer_key_Valid() const{
    return m_customer_key_isValid;
}

bool OAIIntelligence_v2_transcript::isDataLogging() const {
    return m_data_logging;
}
void OAIIntelligence_v2_transcript::setDataLogging(const bool &data_logging) {
    m_data_logging = data_logging;
    m_data_logging_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_data_logging_Set() const{
    return m_data_logging_isSet;
}

bool OAIIntelligence_v2_transcript::is_data_logging_Valid() const{
    return m_data_logging_isValid;
}

QDateTime OAIIntelligence_v2_transcript::getDateCreated() const {
    return m_date_created;
}
void OAIIntelligence_v2_transcript::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIIntelligence_v2_transcript::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIIntelligence_v2_transcript::getDateUpdated() const {
    return m_date_updated;
}
void OAIIntelligence_v2_transcript::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIIntelligence_v2_transcript::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIIntelligence_v2_transcript::getDuration() const {
    return m_duration;
}
void OAIIntelligence_v2_transcript::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIIntelligence_v2_transcript::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIIntelligence_v2_transcript::getLanguageCode() const {
    return m_language_code;
}
void OAIIntelligence_v2_transcript::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIIntelligence_v2_transcript::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIObject OAIIntelligence_v2_transcript::getLinks() const {
    return m_links;
}
void OAIIntelligence_v2_transcript::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_links_Set() const{
    return m_links_isSet;
}

bool OAIIntelligence_v2_transcript::is_links_Valid() const{
    return m_links_isValid;
}

QDateTime OAIIntelligence_v2_transcript::getMediaStartTime() const {
    return m_media_start_time;
}
void OAIIntelligence_v2_transcript::setMediaStartTime(const QDateTime &media_start_time) {
    m_media_start_time = media_start_time;
    m_media_start_time_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_media_start_time_Set() const{
    return m_media_start_time_isSet;
}

bool OAIIntelligence_v2_transcript::is_media_start_time_Valid() const{
    return m_media_start_time_isValid;
}

bool OAIIntelligence_v2_transcript::isRedaction() const {
    return m_redaction;
}
void OAIIntelligence_v2_transcript::setRedaction(const bool &redaction) {
    m_redaction = redaction;
    m_redaction_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_redaction_Set() const{
    return m_redaction_isSet;
}

bool OAIIntelligence_v2_transcript::is_redaction_Valid() const{
    return m_redaction_isValid;
}

QString OAIIntelligence_v2_transcript::getServiceSid() const {
    return m_service_sid;
}
void OAIIntelligence_v2_transcript::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIIntelligence_v2_transcript::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIIntelligence_v2_transcript::getSid() const {
    return m_sid;
}
void OAIIntelligence_v2_transcript::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIIntelligence_v2_transcript::is_sid_Valid() const{
    return m_sid_isValid;
}

OAITranscript_enum_status OAIIntelligence_v2_transcript::getStatus() const {
    return m_status;
}
void OAIIntelligence_v2_transcript::setStatus(const OAITranscript_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIntelligence_v2_transcript::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIIntelligence_v2_transcript::getUrl() const {
    return m_url;
}
void OAIIntelligence_v2_transcript::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIntelligence_v2_transcript::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIntelligence_v2_transcript::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIntelligence_v2_transcript::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntelligence_v2_transcript::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
