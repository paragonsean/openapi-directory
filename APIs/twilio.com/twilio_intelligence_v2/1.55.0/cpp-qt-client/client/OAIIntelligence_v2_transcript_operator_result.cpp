/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntelligence_v2_transcript_operator_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntelligence_v2_transcript_operator_result::OAIIntelligence_v2_transcript_operator_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntelligence_v2_transcript_operator_result::OAIIntelligence_v2_transcript_operator_result() {
    this->initializeModel();
}

OAIIntelligence_v2_transcript_operator_result::~OAIIntelligence_v2_transcript_operator_result() {}

void OAIIntelligence_v2_transcript_operator_result::initializeModel() {

    m_extract_match_isSet = false;
    m_extract_match_isValid = false;

    m_extract_results_isSet = false;
    m_extract_results_isValid = false;

    m_label_probabilities_isSet = false;
    m_label_probabilities_isValid = false;

    m_match_probability_isSet = false;
    m_match_probability_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_normalized_result_isSet = false;
    m_normalized_result_isValid = false;

    m_operator_sid_isSet = false;
    m_operator_sid_isValid = false;

    m_operator_type_isSet = false;
    m_operator_type_isValid = false;

    m_predicted_label_isSet = false;
    m_predicted_label_isValid = false;

    m_predicted_probability_isSet = false;
    m_predicted_probability_isValid = false;

    m_text_generation_results_isSet = false;
    m_text_generation_results_isValid = false;

    m_transcript_sid_isSet = false;
    m_transcript_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_utterance_match_isSet = false;
    m_utterance_match_isValid = false;

    m_utterance_results_isSet = false;
    m_utterance_results_isValid = false;
}

void OAIIntelligence_v2_transcript_operator_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntelligence_v2_transcript_operator_result::fromJsonObject(QJsonObject json) {

    m_extract_match_isValid = ::OpenAPI::fromJsonValue(m_extract_match, json[QString("extract_match")]);
    m_extract_match_isSet = !json[QString("extract_match")].isNull() && m_extract_match_isValid;

    m_extract_results_isValid = ::OpenAPI::fromJsonValue(m_extract_results, json[QString("extract_results")]);
    m_extract_results_isSet = !json[QString("extract_results")].isNull() && m_extract_results_isValid;

    m_label_probabilities_isValid = ::OpenAPI::fromJsonValue(m_label_probabilities, json[QString("label_probabilities")]);
    m_label_probabilities_isSet = !json[QString("label_probabilities")].isNull() && m_label_probabilities_isValid;

    m_match_probability_isValid = ::OpenAPI::fromJsonValue(m_match_probability, json[QString("match_probability")]);
    m_match_probability_isSet = !json[QString("match_probability")].isNull() && m_match_probability_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_normalized_result_isValid = ::OpenAPI::fromJsonValue(m_normalized_result, json[QString("normalized_result")]);
    m_normalized_result_isSet = !json[QString("normalized_result")].isNull() && m_normalized_result_isValid;

    m_operator_sid_isValid = ::OpenAPI::fromJsonValue(m_operator_sid, json[QString("operator_sid")]);
    m_operator_sid_isSet = !json[QString("operator_sid")].isNull() && m_operator_sid_isValid;

    m_operator_type_isValid = ::OpenAPI::fromJsonValue(m_operator_type, json[QString("operator_type")]);
    m_operator_type_isSet = !json[QString("operator_type")].isNull() && m_operator_type_isValid;

    m_predicted_label_isValid = ::OpenAPI::fromJsonValue(m_predicted_label, json[QString("predicted_label")]);
    m_predicted_label_isSet = !json[QString("predicted_label")].isNull() && m_predicted_label_isValid;

    m_predicted_probability_isValid = ::OpenAPI::fromJsonValue(m_predicted_probability, json[QString("predicted_probability")]);
    m_predicted_probability_isSet = !json[QString("predicted_probability")].isNull() && m_predicted_probability_isValid;

    m_text_generation_results_isValid = ::OpenAPI::fromJsonValue(m_text_generation_results, json[QString("text_generation_results")]);
    m_text_generation_results_isSet = !json[QString("text_generation_results")].isNull() && m_text_generation_results_isValid;

    m_transcript_sid_isValid = ::OpenAPI::fromJsonValue(m_transcript_sid, json[QString("transcript_sid")]);
    m_transcript_sid_isSet = !json[QString("transcript_sid")].isNull() && m_transcript_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_utterance_match_isValid = ::OpenAPI::fromJsonValue(m_utterance_match, json[QString("utterance_match")]);
    m_utterance_match_isSet = !json[QString("utterance_match")].isNull() && m_utterance_match_isValid;

    m_utterance_results_isValid = ::OpenAPI::fromJsonValue(m_utterance_results, json[QString("utterance_results")]);
    m_utterance_results_isSet = !json[QString("utterance_results")].isNull() && m_utterance_results_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntelligence_v2_transcript_operator_result::asJsonObject() const {
    QJsonObject obj;
    if (m_extract_match_isSet) {
        obj.insert(QString("extract_match"), ::OpenAPI::toJsonValue(m_extract_match));
    }
    if (m_extract_results_isSet) {
        obj.insert(QString("extract_results"), ::OpenAPI::toJsonValue(m_extract_results));
    }
    if (m_label_probabilities_isSet) {
        obj.insert(QString("label_probabilities"), ::OpenAPI::toJsonValue(m_label_probabilities));
    }
    if (m_match_probability_isSet) {
        obj.insert(QString("match_probability"), ::OpenAPI::toJsonValue(m_match_probability));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_normalized_result_isSet) {
        obj.insert(QString("normalized_result"), ::OpenAPI::toJsonValue(m_normalized_result));
    }
    if (m_operator_sid_isSet) {
        obj.insert(QString("operator_sid"), ::OpenAPI::toJsonValue(m_operator_sid));
    }
    if (m_operator_type.isSet()) {
        obj.insert(QString("operator_type"), ::OpenAPI::toJsonValue(m_operator_type));
    }
    if (m_predicted_label_isSet) {
        obj.insert(QString("predicted_label"), ::OpenAPI::toJsonValue(m_predicted_label));
    }
    if (m_predicted_probability_isSet) {
        obj.insert(QString("predicted_probability"), ::OpenAPI::toJsonValue(m_predicted_probability));
    }
    if (m_text_generation_results_isSet) {
        obj.insert(QString("text_generation_results"), ::OpenAPI::toJsonValue(m_text_generation_results));
    }
    if (m_transcript_sid_isSet) {
        obj.insert(QString("transcript_sid"), ::OpenAPI::toJsonValue(m_transcript_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_utterance_match_isSet) {
        obj.insert(QString("utterance_match"), ::OpenAPI::toJsonValue(m_utterance_match));
    }
    if (m_utterance_results.size() > 0) {
        obj.insert(QString("utterance_results"), ::OpenAPI::toJsonValue(m_utterance_results));
    }
    return obj;
}

bool OAIIntelligence_v2_transcript_operator_result::isExtractMatch() const {
    return m_extract_match;
}
void OAIIntelligence_v2_transcript_operator_result::setExtractMatch(const bool &extract_match) {
    m_extract_match = extract_match;
    m_extract_match_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_extract_match_Set() const{
    return m_extract_match_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_extract_match_Valid() const{
    return m_extract_match_isValid;
}

QJsonValue OAIIntelligence_v2_transcript_operator_result::getExtractResults() const {
    return m_extract_results;
}
void OAIIntelligence_v2_transcript_operator_result::setExtractResults(const QJsonValue &extract_results) {
    m_extract_results = extract_results;
    m_extract_results_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_extract_results_Set() const{
    return m_extract_results_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_extract_results_Valid() const{
    return m_extract_results_isValid;
}

QJsonValue OAIIntelligence_v2_transcript_operator_result::getLabelProbabilities() const {
    return m_label_probabilities;
}
void OAIIntelligence_v2_transcript_operator_result::setLabelProbabilities(const QJsonValue &label_probabilities) {
    m_label_probabilities = label_probabilities;
    m_label_probabilities_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_label_probabilities_Set() const{
    return m_label_probabilities_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_label_probabilities_Valid() const{
    return m_label_probabilities_isValid;
}

double OAIIntelligence_v2_transcript_operator_result::getMatchProbability() const {
    return m_match_probability;
}
void OAIIntelligence_v2_transcript_operator_result::setMatchProbability(const double &match_probability) {
    m_match_probability = match_probability;
    m_match_probability_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_match_probability_Set() const{
    return m_match_probability_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_match_probability_Valid() const{
    return m_match_probability_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getName() const {
    return m_name;
}
void OAIIntelligence_v2_transcript_operator_result::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getNormalizedResult() const {
    return m_normalized_result;
}
void OAIIntelligence_v2_transcript_operator_result::setNormalizedResult(const QString &normalized_result) {
    m_normalized_result = normalized_result;
    m_normalized_result_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_normalized_result_Set() const{
    return m_normalized_result_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_normalized_result_Valid() const{
    return m_normalized_result_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getOperatorSid() const {
    return m_operator_sid;
}
void OAIIntelligence_v2_transcript_operator_result::setOperatorSid(const QString &operator_sid) {
    m_operator_sid = operator_sid;
    m_operator_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_operator_sid_Set() const{
    return m_operator_sid_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_operator_sid_Valid() const{
    return m_operator_sid_isValid;
}

OAIOperator_result_enum_operator_type OAIIntelligence_v2_transcript_operator_result::getOperatorType() const {
    return m_operator_type;
}
void OAIIntelligence_v2_transcript_operator_result::setOperatorType(const OAIOperator_result_enum_operator_type &operator_type) {
    m_operator_type = operator_type;
    m_operator_type_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_operator_type_Set() const{
    return m_operator_type_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_operator_type_Valid() const{
    return m_operator_type_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getPredictedLabel() const {
    return m_predicted_label;
}
void OAIIntelligence_v2_transcript_operator_result::setPredictedLabel(const QString &predicted_label) {
    m_predicted_label = predicted_label;
    m_predicted_label_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_predicted_label_Set() const{
    return m_predicted_label_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_predicted_label_Valid() const{
    return m_predicted_label_isValid;
}

double OAIIntelligence_v2_transcript_operator_result::getPredictedProbability() const {
    return m_predicted_probability;
}
void OAIIntelligence_v2_transcript_operator_result::setPredictedProbability(const double &predicted_probability) {
    m_predicted_probability = predicted_probability;
    m_predicted_probability_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_predicted_probability_Set() const{
    return m_predicted_probability_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_predicted_probability_Valid() const{
    return m_predicted_probability_isValid;
}

QJsonValue OAIIntelligence_v2_transcript_operator_result::getTextGenerationResults() const {
    return m_text_generation_results;
}
void OAIIntelligence_v2_transcript_operator_result::setTextGenerationResults(const QJsonValue &text_generation_results) {
    m_text_generation_results = text_generation_results;
    m_text_generation_results_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_text_generation_results_Set() const{
    return m_text_generation_results_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_text_generation_results_Valid() const{
    return m_text_generation_results_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getTranscriptSid() const {
    return m_transcript_sid;
}
void OAIIntelligence_v2_transcript_operator_result::setTranscriptSid(const QString &transcript_sid) {
    m_transcript_sid = transcript_sid;
    m_transcript_sid_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_transcript_sid_Set() const{
    return m_transcript_sid_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_transcript_sid_Valid() const{
    return m_transcript_sid_isValid;
}

QString OAIIntelligence_v2_transcript_operator_result::getUrl() const {
    return m_url;
}
void OAIIntelligence_v2_transcript_operator_result::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIntelligence_v2_transcript_operator_result::isUtteranceMatch() const {
    return m_utterance_match;
}
void OAIIntelligence_v2_transcript_operator_result::setUtteranceMatch(const bool &utterance_match) {
    m_utterance_match = utterance_match;
    m_utterance_match_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_utterance_match_Set() const{
    return m_utterance_match_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_utterance_match_Valid() const{
    return m_utterance_match_isValid;
}

QList<QJsonValue> OAIIntelligence_v2_transcript_operator_result::getUtteranceResults() const {
    return m_utterance_results;
}
void OAIIntelligence_v2_transcript_operator_result::setUtteranceResults(const QList<QJsonValue> &utterance_results) {
    m_utterance_results = utterance_results;
    m_utterance_results_isSet = true;
}

bool OAIIntelligence_v2_transcript_operator_result::is_utterance_results_Set() const{
    return m_utterance_results_isSet;
}

bool OAIIntelligence_v2_transcript_operator_result::is_utterance_results_Valid() const{
    return m_utterance_results_isValid;
}

bool OAIIntelligence_v2_transcript_operator_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extract_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_probabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_generation_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterance_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntelligence_v2_transcript_operator_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
