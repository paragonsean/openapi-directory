/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntelligenceV2TranscriptApi_H
#define OAI_OAIIntelligenceV2TranscriptApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIntelligence_v2_transcript.h"
#include "OAIListTranscriptResponse.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntelligenceV2TranscriptApi : public QObject {
    Q_OBJECT

public:
    OAIIntelligenceV2TranscriptApi(const int timeOut = 0);
    ~OAIIntelligenceV2TranscriptApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel QJsonValue [required]
    * @param[in]  service_sid QString [required]
    * @param[in]  customer_key QString [optional]
    * @param[in]  media_start_time QDateTime [optional]
    */
    virtual void createTranscript(const QJsonValue &channel, const QString &service_sid, const ::OpenAPI::OptionalParam<QString> &customer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &media_start_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteTranscript(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchTranscript(const QString &sid);

    /**
    * @param[in]  service_sid QString [optional]
    * @param[in]  before_start_time QString [optional]
    * @param[in]  after_start_time QString [optional]
    * @param[in]  before_date_created QString [optional]
    * @param[in]  after_date_created QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  source_sid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTranscript(const ::OpenAPI::OptionalParam<QString> &service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_date_created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_date_created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTranscriptCallback(OAIHttpRequestWorker *worker);
    void deleteTranscriptCallback(OAIHttpRequestWorker *worker);
    void fetchTranscriptCallback(OAIHttpRequestWorker *worker);
    void listTranscriptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTranscriptSignal(OAIIntelligence_v2_transcript summary);
    void deleteTranscriptSignal();
    void fetchTranscriptSignal(OAIIntelligence_v2_transcript summary);
    void listTranscriptSignal(OAIListTranscriptResponse summary);


    void createTranscriptSignalFull(OAIHttpRequestWorker *worker, OAIIntelligence_v2_transcript summary);
    void deleteTranscriptSignalFull(OAIHttpRequestWorker *worker);
    void fetchTranscriptSignalFull(OAIHttpRequestWorker *worker, OAIIntelligence_v2_transcript summary);
    void listTranscriptSignalFull(OAIHttpRequestWorker *worker, OAIListTranscriptResponse summary);

    Q_DECL_DEPRECATED_X("Use createTranscriptSignalError() instead")
    void createTranscriptSignalE(OAIIntelligence_v2_transcript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptSignalError(OAIIntelligence_v2_transcript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptSignalError() instead")
    void deleteTranscriptSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTranscriptSignalError() instead")
    void fetchTranscriptSignalE(OAIIntelligence_v2_transcript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTranscriptSignalError(OAIIntelligence_v2_transcript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptSignalError() instead")
    void listTranscriptSignalE(OAIListTranscriptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptSignalError(OAIListTranscriptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTranscriptSignalErrorFull() instead")
    void createTranscriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptSignalErrorFull() instead")
    void deleteTranscriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTranscriptSignalErrorFull() instead")
    void fetchTranscriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTranscriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptSignalErrorFull() instead")
    void listTranscriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
