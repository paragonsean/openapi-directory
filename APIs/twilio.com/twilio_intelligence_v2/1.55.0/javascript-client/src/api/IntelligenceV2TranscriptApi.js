/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntelligenceV2Transcript from '../model/IntelligenceV2Transcript';
import ListTranscriptResponse from '../model/ListTranscriptResponse';

/**
* IntelligenceV2Transcript service.
* @module api/IntelligenceV2TranscriptApi
* @version 1.55.0
*/
export default class IntelligenceV2TranscriptApi {

    /**
    * Constructs a new IntelligenceV2TranscriptApi. 
    * @alias module:api/IntelligenceV2TranscriptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTranscript operation.
     * @callback module:api/IntelligenceV2TranscriptApi~createTranscriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelligenceV2Transcript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Transcript for the service
     * @param {Object} channel JSON object describing Media Channel including Source and Participants
     * @param {String} serviceSid The unique SID identifier of the Service.
     * @param {Object} opts Optional parameters
     * @param {String} [customerKey] Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters.
     * @param {Date} [mediaStartTime] The date that this Transcript's media was started, given in ISO 8601 format.
     * @param {module:api/IntelligenceV2TranscriptApi~createTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelligenceV2Transcript}
     */
    createTranscript(channel, serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling createTranscript");
      }
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createTranscript");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Channel': channel,
        'CustomerKey': opts['customerKey'],
        'MediaStartTime': opts['mediaStartTime'],
        'ServiceSid': serviceSid
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IntelligenceV2Transcript;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Transcripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscript operation.
     * @callback module:api/IntelligenceV2TranscriptApi~deleteTranscriptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Transcript.
     * @param {String} sid A 34 character string that uniquely identifies this Transcript.
     * @param {module:api/IntelligenceV2TranscriptApi~deleteTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscript(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteTranscript");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Transcripts/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchTranscript operation.
     * @callback module:api/IntelligenceV2TranscriptApi~fetchTranscriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelligenceV2Transcript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Transcript.
     * @param {String} sid A 34 character string that uniquely identifies this Transcript.
     * @param {module:api/IntelligenceV2TranscriptApi~fetchTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelligenceV2Transcript}
     */
    fetchTranscript(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchTranscript");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntelligenceV2Transcript;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Transcripts/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscript operation.
     * @callback module:api/IntelligenceV2TranscriptApi~listTranscriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTranscriptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Transcripts for a given service.
     * @param {Object} opts Optional parameters
     * @param {String} [serviceSid] The unique SID identifier of the Service.
     * @param {String} [beforeStartTime] Filter by before StartTime.
     * @param {String} [afterStartTime] Filter by after StartTime.
     * @param {String} [beforeDateCreated] Filter by before DateCreated.
     * @param {String} [afterDateCreated] Filter by after DateCreated.
     * @param {String} [status] Filter by status.
     * @param {String} [languageCode] Filter by Language Code.
     * @param {String} [sourceSid] Filter by SourceSid.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/IntelligenceV2TranscriptApi~listTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTranscriptResponse}
     */
    listTranscript(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ServiceSid': opts['serviceSid'],
        'BeforeStartTime': opts['beforeStartTime'],
        'AfterStartTime': opts['afterStartTime'],
        'BeforeDateCreated': opts['beforeDateCreated'],
        'AfterDateCreated': opts['afterDateCreated'],
        'Status': opts['status'],
        'LanguageCode': opts['languageCode'],
        'SourceSid': opts['sourceSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTranscriptResponse;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Transcripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
