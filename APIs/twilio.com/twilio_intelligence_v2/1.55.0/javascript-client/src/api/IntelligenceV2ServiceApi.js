/**
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntelligenceV2Service from '../model/IntelligenceV2Service';
import ListServiceResponse from '../model/ListServiceResponse';
import ServiceEnumHttpMethod from '../model/ServiceEnumHttpMethod';

/**
* IntelligenceV2Service service.
* @module api/IntelligenceV2ServiceApi
* @version 1.55.0
*/
export default class IntelligenceV2ServiceApi {

    /**
    * Constructs a new IntelligenceV2ServiceApi. 
    * @alias module:api/IntelligenceV2ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/IntelligenceV2ServiceApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelligenceV2Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Service for the given Account
     * @param {String} uniqueName Provides a unique and addressable name to be assigned to this Service, assigned by the developer, to be optionally used in addition to SID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoRedaction] Instructs the Speech Recognition service to automatically redact PII from all transcripts made on this service.
     * @param {Boolean} [autoTranscribe] Instructs the Speech Recognition service to automatically transcribe all recordings made on the account.
     * @param {Boolean} [dataLogging] Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.
     * @param {String} [friendlyName] A human readable description of this resource, up to 64 characters.
     * @param {String} [languageCode] The default language code of the audio.
     * @param {Boolean} [mediaRedaction] Instructs the Speech Recognition service to automatically redact PII from all transcripts media made on this service. The auto_redaction flag must be enabled, results in error otherwise.
     * @param {module:model/ServiceEnumHttpMethod} [webhookHttpMethod] 
     * @param {String} [webhookUrl] The URL Twilio will request when executing the Webhook.
     * @param {module:api/IntelligenceV2ServiceApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelligenceV2Service}
     */
    createService(uniqueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling createService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AutoRedaction': opts['autoRedaction'],
        'AutoTranscribe': opts['autoTranscribe'],
        'DataLogging': opts['dataLogging'],
        'FriendlyName': opts['friendlyName'],
        'LanguageCode': opts['languageCode'],
        'MediaRedaction': opts['mediaRedaction'],
        'UniqueName': uniqueName,
        'WebhookHttpMethod': opts['webhookHttpMethod'],
        'WebhookUrl': opts['webhookUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IntelligenceV2Service;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/IntelligenceV2ServiceApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Service.
     * @param {String} sid A 34 character string that uniquely identifies this Service.
     * @param {module:api/IntelligenceV2ServiceApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchService operation.
     * @callback module:api/IntelligenceV2ServiceApi~fetchServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelligenceV2Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Service.
     * @param {String} sid A 34 character string that uniquely identifies this Service.
     * @param {module:api/IntelligenceV2ServiceApi~fetchServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelligenceV2Service}
     */
    fetchService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntelligenceV2Service;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listService operation.
     * @callback module:api/IntelligenceV2ServiceApi~listServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of all Services for an account.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/IntelligenceV2ServiceApi~listServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceResponse}
     */
    listService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceResponse;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/IntelligenceV2ServiceApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntelligenceV2Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Service.
     * @param {String} sid A 34 character string that uniquely identifies this Service.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The If-Match HTTP request header
     * @param {Boolean} [autoRedaction] Instructs the Speech Recognition service to automatically redact PII from all transcripts made on this service.
     * @param {Boolean} [autoTranscribe] Instructs the Speech Recognition service to automatically transcribe all recordings made on the account.
     * @param {Boolean} [dataLogging] Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.
     * @param {String} [friendlyName] A human readable description of this resource, up to 64 characters.
     * @param {String} [languageCode] The default language code of the audio.
     * @param {Boolean} [mediaRedaction] Instructs the Speech Recognition service to automatically redact PII from all transcripts media made on this service. The auto_redaction flag must be enabled, results in error otherwise.
     * @param {String} [uniqueName] Provides a unique and addressable name to be assigned to this Service, assigned by the developer, to be optionally used in addition to SID.
     * @param {module:model/ServiceEnumHttpMethod} [webhookHttpMethod] 
     * @param {String} [webhookUrl] The URL Twilio will request when executing the Webhook.
     * @param {module:api/IntelligenceV2ServiceApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntelligenceV2Service}
     */
    updateService(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateService");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
        'AutoRedaction': opts['autoRedaction'],
        'AutoTranscribe': opts['autoTranscribe'],
        'DataLogging': opts['dataLogging'],
        'FriendlyName': opts['friendlyName'],
        'LanguageCode': opts['languageCode'],
        'MediaRedaction': opts['mediaRedaction'],
        'UniqueName': opts['uniqueName'],
        'WebhookHttpMethod': opts['webhookHttpMethod'],
        'WebhookUrl': opts['webhookUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IntelligenceV2Service;
      let basePaths = ['https://intelligence.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
