/*
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OperatorResultEnumOperatorType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntelligenceV2TranscriptOperatorResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:01.731405-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntelligenceV2TranscriptOperatorResult {
  public static final String SERIALIZED_NAME_EXTRACT_MATCH = "extract_match";
  @SerializedName(SERIALIZED_NAME_EXTRACT_MATCH)
  private Boolean extractMatch;

  public static final String SERIALIZED_NAME_EXTRACT_RESULTS = "extract_results";
  @SerializedName(SERIALIZED_NAME_EXTRACT_RESULTS)
  private Object extractResults = null;

  public static final String SERIALIZED_NAME_LABEL_PROBABILITIES = "label_probabilities";
  @SerializedName(SERIALIZED_NAME_LABEL_PROBABILITIES)
  private Object labelProbabilities = null;

  public static final String SERIALIZED_NAME_MATCH_PROBABILITY = "match_probability";
  @SerializedName(SERIALIZED_NAME_MATCH_PROBABILITY)
  private BigDecimal matchProbability;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORMALIZED_RESULT = "normalized_result";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_RESULT)
  private String normalizedResult;

  public static final String SERIALIZED_NAME_OPERATOR_SID = "operator_sid";
  @SerializedName(SERIALIZED_NAME_OPERATOR_SID)
  private String operatorSid;

  public static final String SERIALIZED_NAME_OPERATOR_TYPE = "operator_type";
  @SerializedName(SERIALIZED_NAME_OPERATOR_TYPE)
  private OperatorResultEnumOperatorType operatorType;

  public static final String SERIALIZED_NAME_PREDICTED_LABEL = "predicted_label";
  @SerializedName(SERIALIZED_NAME_PREDICTED_LABEL)
  private String predictedLabel;

  public static final String SERIALIZED_NAME_PREDICTED_PROBABILITY = "predicted_probability";
  @SerializedName(SERIALIZED_NAME_PREDICTED_PROBABILITY)
  private BigDecimal predictedProbability;

  public static final String SERIALIZED_NAME_TEXT_GENERATION_RESULTS = "text_generation_results";
  @SerializedName(SERIALIZED_NAME_TEXT_GENERATION_RESULTS)
  private Object textGenerationResults = null;

  public static final String SERIALIZED_NAME_TRANSCRIPT_SID = "transcript_sid";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_SID)
  private String transcriptSid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_UTTERANCE_MATCH = "utterance_match";
  @SerializedName(SERIALIZED_NAME_UTTERANCE_MATCH)
  private Boolean utteranceMatch;

  public static final String SERIALIZED_NAME_UTTERANCE_RESULTS = "utterance_results";
  @SerializedName(SERIALIZED_NAME_UTTERANCE_RESULTS)
  private List<Object> utteranceResults;

  public IntelligenceV2TranscriptOperatorResult() {
  }

  public IntelligenceV2TranscriptOperatorResult extractMatch(Boolean extractMatch) {
    this.extractMatch = extractMatch;
    return this;
  }

  /**
   * Boolean to tell if extract Language Understanding Processing model matches results.
   * @return extractMatch
   */
  @javax.annotation.Nullable
  public Boolean getExtractMatch() {
    return extractMatch;
  }

  public void setExtractMatch(Boolean extractMatch) {
    this.extractMatch = extractMatch;
  }


  public IntelligenceV2TranscriptOperatorResult extractResults(Object extractResults) {
    this.extractResults = extractResults;
    return this;
  }

  /**
   * List of text extraction results. This might be available on classify-extract model outputs.
   * @return extractResults
   */
  @javax.annotation.Nullable
  public Object getExtractResults() {
    return extractResults;
  }

  public void setExtractResults(Object extractResults) {
    this.extractResults = extractResults;
  }


  public IntelligenceV2TranscriptOperatorResult labelProbabilities(Object labelProbabilities) {
    this.labelProbabilities = labelProbabilities;
    return this;
  }

  /**
   * The labels probabilities. This might be available on conversation classify model outputs.
   * @return labelProbabilities
   */
  @javax.annotation.Nullable
  public Object getLabelProbabilities() {
    return labelProbabilities;
  }

  public void setLabelProbabilities(Object labelProbabilities) {
    this.labelProbabilities = labelProbabilities;
  }


  public IntelligenceV2TranscriptOperatorResult matchProbability(BigDecimal matchProbability) {
    this.matchProbability = matchProbability;
    return this;
  }

  /**
   * Percentage of &#39;matching&#39; class needed to consider a sentence matches
   * @return matchProbability
   */
  @javax.annotation.Nullable
  public BigDecimal getMatchProbability() {
    return matchProbability;
  }

  public void setMatchProbability(BigDecimal matchProbability) {
    this.matchProbability = matchProbability;
  }


  public IntelligenceV2TranscriptOperatorResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the applied Language Understanding.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IntelligenceV2TranscriptOperatorResult normalizedResult(String normalizedResult) {
    this.normalizedResult = normalizedResult;
    return this;
  }

  /**
   * Normalized output of extraction stage which matches Label.
   * @return normalizedResult
   */
  @javax.annotation.Nullable
  public String getNormalizedResult() {
    return normalizedResult;
  }

  public void setNormalizedResult(String normalizedResult) {
    this.normalizedResult = normalizedResult;
  }


  public IntelligenceV2TranscriptOperatorResult operatorSid(String operatorSid) {
    this.operatorSid = operatorSid;
    return this;
  }

  /**
   * A 34 character string that identifies this Language Understanding operator sid.
   * @return operatorSid
   */
  @javax.annotation.Nullable
  public String getOperatorSid() {
    return operatorSid;
  }

  public void setOperatorSid(String operatorSid) {
    this.operatorSid = operatorSid;
  }


  public IntelligenceV2TranscriptOperatorResult operatorType(OperatorResultEnumOperatorType operatorType) {
    this.operatorType = operatorType;
    return this;
  }

  /**
   * Get operatorType
   * @return operatorType
   */
  @javax.annotation.Nullable
  public OperatorResultEnumOperatorType getOperatorType() {
    return operatorType;
  }

  public void setOperatorType(OperatorResultEnumOperatorType operatorType) {
    this.operatorType = operatorType;
  }


  public IntelligenceV2TranscriptOperatorResult predictedLabel(String predictedLabel) {
    this.predictedLabel = predictedLabel;
    return this;
  }

  /**
   * The &#39;matching&#39; class. This might be available on conversation classify model outputs.
   * @return predictedLabel
   */
  @javax.annotation.Nullable
  public String getPredictedLabel() {
    return predictedLabel;
  }

  public void setPredictedLabel(String predictedLabel) {
    this.predictedLabel = predictedLabel;
  }


  public IntelligenceV2TranscriptOperatorResult predictedProbability(BigDecimal predictedProbability) {
    this.predictedProbability = predictedProbability;
    return this;
  }

  /**
   * Percentage of &#39;matching&#39; class needed to consider a sentence matches.
   * @return predictedProbability
   */
  @javax.annotation.Nullable
  public BigDecimal getPredictedProbability() {
    return predictedProbability;
  }

  public void setPredictedProbability(BigDecimal predictedProbability) {
    this.predictedProbability = predictedProbability;
  }


  public IntelligenceV2TranscriptOperatorResult textGenerationResults(Object textGenerationResults) {
    this.textGenerationResults = textGenerationResults;
    return this;
  }

  /**
   * Output of a text generation operator for example Conversation Sumamary.
   * @return textGenerationResults
   */
  @javax.annotation.Nullable
  public Object getTextGenerationResults() {
    return textGenerationResults;
  }

  public void setTextGenerationResults(Object textGenerationResults) {
    this.textGenerationResults = textGenerationResults;
  }


  public IntelligenceV2TranscriptOperatorResult transcriptSid(String transcriptSid) {
    this.transcriptSid = transcriptSid;
    return this;
  }

  /**
   * A 34 character string that uniquely identifies this Transcript.
   * @return transcriptSid
   */
  @javax.annotation.Nullable
  public String getTranscriptSid() {
    return transcriptSid;
  }

  public void setTranscriptSid(String transcriptSid) {
    this.transcriptSid = transcriptSid;
  }


  public IntelligenceV2TranscriptOperatorResult url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public IntelligenceV2TranscriptOperatorResult utteranceMatch(Boolean utteranceMatch) {
    this.utteranceMatch = utteranceMatch;
    return this;
  }

  /**
   * Boolean to tell if Utterance matches results.
   * @return utteranceMatch
   */
  @javax.annotation.Nullable
  public Boolean getUtteranceMatch() {
    return utteranceMatch;
  }

  public void setUtteranceMatch(Boolean utteranceMatch) {
    this.utteranceMatch = utteranceMatch;
  }


  public IntelligenceV2TranscriptOperatorResult utteranceResults(List<Object> utteranceResults) {
    this.utteranceResults = utteranceResults;
    return this;
  }

  public IntelligenceV2TranscriptOperatorResult addUtteranceResultsItem(Object utteranceResultsItem) {
    if (this.utteranceResults == null) {
      this.utteranceResults = new ArrayList<>();
    }
    this.utteranceResults.add(utteranceResultsItem);
    return this;
  }

  /**
   * List of mapped utterance object which matches sentences.
   * @return utteranceResults
   */
  @javax.annotation.Nullable
  public List<Object> getUtteranceResults() {
    return utteranceResults;
  }

  public void setUtteranceResults(List<Object> utteranceResults) {
    this.utteranceResults = utteranceResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelligenceV2TranscriptOperatorResult intelligenceV2TranscriptOperatorResult = (IntelligenceV2TranscriptOperatorResult) o;
    return Objects.equals(this.extractMatch, intelligenceV2TranscriptOperatorResult.extractMatch) &&
        Objects.equals(this.extractResults, intelligenceV2TranscriptOperatorResult.extractResults) &&
        Objects.equals(this.labelProbabilities, intelligenceV2TranscriptOperatorResult.labelProbabilities) &&
        Objects.equals(this.matchProbability, intelligenceV2TranscriptOperatorResult.matchProbability) &&
        Objects.equals(this.name, intelligenceV2TranscriptOperatorResult.name) &&
        Objects.equals(this.normalizedResult, intelligenceV2TranscriptOperatorResult.normalizedResult) &&
        Objects.equals(this.operatorSid, intelligenceV2TranscriptOperatorResult.operatorSid) &&
        Objects.equals(this.operatorType, intelligenceV2TranscriptOperatorResult.operatorType) &&
        Objects.equals(this.predictedLabel, intelligenceV2TranscriptOperatorResult.predictedLabel) &&
        Objects.equals(this.predictedProbability, intelligenceV2TranscriptOperatorResult.predictedProbability) &&
        Objects.equals(this.textGenerationResults, intelligenceV2TranscriptOperatorResult.textGenerationResults) &&
        Objects.equals(this.transcriptSid, intelligenceV2TranscriptOperatorResult.transcriptSid) &&
        Objects.equals(this.url, intelligenceV2TranscriptOperatorResult.url) &&
        Objects.equals(this.utteranceMatch, intelligenceV2TranscriptOperatorResult.utteranceMatch) &&
        Objects.equals(this.utteranceResults, intelligenceV2TranscriptOperatorResult.utteranceResults);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(extractMatch, extractResults, labelProbabilities, matchProbability, name, normalizedResult, operatorSid, operatorType, predictedLabel, predictedProbability, textGenerationResults, transcriptSid, url, utteranceMatch, utteranceResults);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelligenceV2TranscriptOperatorResult {\n");
    sb.append("    extractMatch: ").append(toIndentedString(extractMatch)).append("\n");
    sb.append("    extractResults: ").append(toIndentedString(extractResults)).append("\n");
    sb.append("    labelProbabilities: ").append(toIndentedString(labelProbabilities)).append("\n");
    sb.append("    matchProbability: ").append(toIndentedString(matchProbability)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normalizedResult: ").append(toIndentedString(normalizedResult)).append("\n");
    sb.append("    operatorSid: ").append(toIndentedString(operatorSid)).append("\n");
    sb.append("    operatorType: ").append(toIndentedString(operatorType)).append("\n");
    sb.append("    predictedLabel: ").append(toIndentedString(predictedLabel)).append("\n");
    sb.append("    predictedProbability: ").append(toIndentedString(predictedProbability)).append("\n");
    sb.append("    textGenerationResults: ").append(toIndentedString(textGenerationResults)).append("\n");
    sb.append("    transcriptSid: ").append(toIndentedString(transcriptSid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    utteranceMatch: ").append(toIndentedString(utteranceMatch)).append("\n");
    sb.append("    utteranceResults: ").append(toIndentedString(utteranceResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extract_match");
    openapiFields.add("extract_results");
    openapiFields.add("label_probabilities");
    openapiFields.add("match_probability");
    openapiFields.add("name");
    openapiFields.add("normalized_result");
    openapiFields.add("operator_sid");
    openapiFields.add("operator_type");
    openapiFields.add("predicted_label");
    openapiFields.add("predicted_probability");
    openapiFields.add("text_generation_results");
    openapiFields.add("transcript_sid");
    openapiFields.add("url");
    openapiFields.add("utterance_match");
    openapiFields.add("utterance_results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntelligenceV2TranscriptOperatorResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelligenceV2TranscriptOperatorResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelligenceV2TranscriptOperatorResult is not found in the empty JSON string", IntelligenceV2TranscriptOperatorResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelligenceV2TranscriptOperatorResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelligenceV2TranscriptOperatorResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("normalized_result") != null && !jsonObj.get("normalized_result").isJsonNull()) && !jsonObj.get("normalized_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalized_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalized_result").toString()));
      }
      if ((jsonObj.get("operator_sid") != null && !jsonObj.get("operator_sid").isJsonNull()) && !jsonObj.get("operator_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_sid").toString()));
      }
      if ((jsonObj.get("operator_type") != null && !jsonObj.get("operator_type").isJsonNull()) && !jsonObj.get("operator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator_type").toString()));
      }
      // validate the optional field `operator_type`
      if (jsonObj.get("operator_type") != null && !jsonObj.get("operator_type").isJsonNull()) {
        OperatorResultEnumOperatorType.validateJsonElement(jsonObj.get("operator_type"));
      }
      if ((jsonObj.get("predicted_label") != null && !jsonObj.get("predicted_label").isJsonNull()) && !jsonObj.get("predicted_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predicted_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predicted_label").toString()));
      }
      if ((jsonObj.get("transcript_sid") != null && !jsonObj.get("transcript_sid").isJsonNull()) && !jsonObj.get("transcript_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcript_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcript_sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("utterance_results") != null && !jsonObj.get("utterance_results").isJsonNull() && !jsonObj.get("utterance_results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `utterance_results` to be an array in the JSON string but got `%s`", jsonObj.get("utterance_results").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelligenceV2TranscriptOperatorResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelligenceV2TranscriptOperatorResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelligenceV2TranscriptOperatorResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelligenceV2TranscriptOperatorResult.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelligenceV2TranscriptOperatorResult>() {
           @Override
           public void write(JsonWriter out, IntelligenceV2TranscriptOperatorResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelligenceV2TranscriptOperatorResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntelligenceV2TranscriptOperatorResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntelligenceV2TranscriptOperatorResult
   * @throws IOException if the JSON string is invalid with respect to IntelligenceV2TranscriptOperatorResult
   */
  public static IntelligenceV2TranscriptOperatorResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelligenceV2TranscriptOperatorResult.class);
  }

  /**
   * Convert an instance of IntelligenceV2TranscriptOperatorResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

