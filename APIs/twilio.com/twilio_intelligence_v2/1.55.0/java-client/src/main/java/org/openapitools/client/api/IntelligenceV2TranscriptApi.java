/*
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IntelligenceV2Transcript;
import org.openapitools.client.model.ListTranscriptResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntelligenceV2TranscriptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntelligenceV2TranscriptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntelligenceV2TranscriptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTranscript
     * @param channel JSON object describing Media Channel including Source and Participants (required)
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param customerKey Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters. (optional)
     * @param mediaStartTime The date that this Transcript&#39;s media was started, given in ISO 8601 format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscriptCall(Object channel, String serviceSid, String customerKey, OffsetDateTime mediaStartTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://intelligence.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Transcripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("Channel", channel);
        }

        if (customerKey != null) {
            localVarFormParams.put("CustomerKey", customerKey);
        }

        if (mediaStartTime != null) {
            localVarFormParams.put("MediaStartTime", mediaStartTime);
        }

        if (serviceSid != null) {
            localVarFormParams.put("ServiceSid", serviceSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTranscriptValidateBeforeCall(Object channel, String serviceSid, String customerKey, OffsetDateTime mediaStartTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling createTranscript(Async)");
        }

        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createTranscript(Async)");
        }

        return createTranscriptCall(channel, serviceSid, customerKey, mediaStartTime, _callback);

    }

    /**
     * 
     * Create a new Transcript for the service
     * @param channel JSON object describing Media Channel including Source and Participants (required)
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param customerKey Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters. (optional)
     * @param mediaStartTime The date that this Transcript&#39;s media was started, given in ISO 8601 format. (optional)
     * @return IntelligenceV2Transcript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public IntelligenceV2Transcript createTranscript(Object channel, String serviceSid, String customerKey, OffsetDateTime mediaStartTime) throws ApiException {
        ApiResponse<IntelligenceV2Transcript> localVarResp = createTranscriptWithHttpInfo(channel, serviceSid, customerKey, mediaStartTime);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Transcript for the service
     * @param channel JSON object describing Media Channel including Source and Participants (required)
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param customerKey Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters. (optional)
     * @param mediaStartTime The date that this Transcript&#39;s media was started, given in ISO 8601 format. (optional)
     * @return ApiResponse&lt;IntelligenceV2Transcript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntelligenceV2Transcript> createTranscriptWithHttpInfo(Object channel, String serviceSid, String customerKey, OffsetDateTime mediaStartTime) throws ApiException {
        okhttp3.Call localVarCall = createTranscriptValidateBeforeCall(channel, serviceSid, customerKey, mediaStartTime, null);
        Type localVarReturnType = new TypeToken<IntelligenceV2Transcript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Transcript for the service
     * @param channel JSON object describing Media Channel including Source and Participants (required)
     * @param serviceSid The unique SID identifier of the Service. (required)
     * @param customerKey Used to store client provided metadata. Maximum of 64 double-byte UTF8 characters. (optional)
     * @param mediaStartTime The date that this Transcript&#39;s media was started, given in ISO 8601 format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTranscriptAsync(Object channel, String serviceSid, String customerKey, OffsetDateTime mediaStartTime, final ApiCallback<IntelligenceV2Transcript> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTranscriptValidateBeforeCall(channel, serviceSid, customerKey, mediaStartTime, _callback);
        Type localVarReturnType = new TypeToken<IntelligenceV2Transcript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTranscript
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscriptCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://intelligence.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Transcripts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTranscriptValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTranscript(Async)");
        }

        return deleteTranscriptCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTranscript(String sid) throws ApiException {
        deleteTranscriptWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTranscriptWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTranscriptValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTranscriptAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTranscriptValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTranscript
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTranscriptCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://intelligence.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Transcripts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTranscriptValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTranscript(Async)");
        }

        return fetchTranscriptCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @return IntelligenceV2Transcript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntelligenceV2Transcript fetchTranscript(String sid) throws ApiException {
        ApiResponse<IntelligenceV2Transcript> localVarResp = fetchTranscriptWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @return ApiResponse&lt;IntelligenceV2Transcript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntelligenceV2Transcript> fetchTranscriptWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTranscriptValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<IntelligenceV2Transcript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Transcript.
     * @param sid A 34 character string that uniquely identifies this Transcript. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTranscriptAsync(String sid, final ApiCallback<IntelligenceV2Transcript> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTranscriptValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<IntelligenceV2Transcript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTranscript
     * @param serviceSid The unique SID identifier of the Service. (optional)
     * @param beforeStartTime Filter by before StartTime. (optional)
     * @param afterStartTime Filter by after StartTime. (optional)
     * @param beforeDateCreated Filter by before DateCreated. (optional)
     * @param afterDateCreated Filter by after DateCreated. (optional)
     * @param status Filter by status. (optional)
     * @param languageCode Filter by Language Code. (optional)
     * @param sourceSid Filter by SourceSid. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscriptCall(String serviceSid, String beforeStartTime, String afterStartTime, String beforeDateCreated, String afterDateCreated, String status, String languageCode, String sourceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://intelligence.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Transcripts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceSid", serviceSid));
        }

        if (beforeStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BeforeStartTime", beforeStartTime));
        }

        if (afterStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AfterStartTime", afterStartTime));
        }

        if (beforeDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BeforeDateCreated", beforeDateCreated));
        }

        if (afterDateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AfterDateCreated", afterDateCreated));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LanguageCode", languageCode));
        }

        if (sourceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceSid", sourceSid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTranscriptValidateBeforeCall(String serviceSid, String beforeStartTime, String afterStartTime, String beforeDateCreated, String afterDateCreated, String status, String languageCode, String sourceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listTranscriptCall(serviceSid, beforeStartTime, afterStartTime, beforeDateCreated, afterDateCreated, status, languageCode, sourceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Transcripts for a given service.
     * @param serviceSid The unique SID identifier of the Service. (optional)
     * @param beforeStartTime Filter by before StartTime. (optional)
     * @param afterStartTime Filter by after StartTime. (optional)
     * @param beforeDateCreated Filter by before DateCreated. (optional)
     * @param afterDateCreated Filter by after DateCreated. (optional)
     * @param status Filter by status. (optional)
     * @param languageCode Filter by Language Code. (optional)
     * @param sourceSid Filter by SourceSid. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTranscriptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTranscriptResponse listTranscript(String serviceSid, String beforeStartTime, String afterStartTime, String beforeDateCreated, String afterDateCreated, String status, String languageCode, String sourceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTranscriptResponse> localVarResp = listTranscriptWithHttpInfo(serviceSid, beforeStartTime, afterStartTime, beforeDateCreated, afterDateCreated, status, languageCode, sourceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Transcripts for a given service.
     * @param serviceSid The unique SID identifier of the Service. (optional)
     * @param beforeStartTime Filter by before StartTime. (optional)
     * @param afterStartTime Filter by after StartTime. (optional)
     * @param beforeDateCreated Filter by before DateCreated. (optional)
     * @param afterDateCreated Filter by after DateCreated. (optional)
     * @param status Filter by status. (optional)
     * @param languageCode Filter by Language Code. (optional)
     * @param sourceSid Filter by SourceSid. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTranscriptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTranscriptResponse> listTranscriptWithHttpInfo(String serviceSid, String beforeStartTime, String afterStartTime, String beforeDateCreated, String afterDateCreated, String status, String languageCode, String sourceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTranscriptValidateBeforeCall(serviceSid, beforeStartTime, afterStartTime, beforeDateCreated, afterDateCreated, status, languageCode, sourceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTranscriptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Transcripts for a given service.
     * @param serviceSid The unique SID identifier of the Service. (optional)
     * @param beforeStartTime Filter by before StartTime. (optional)
     * @param afterStartTime Filter by after StartTime. (optional)
     * @param beforeDateCreated Filter by before DateCreated. (optional)
     * @param afterDateCreated Filter by after DateCreated. (optional)
     * @param status Filter by status. (optional)
     * @param languageCode Filter by Language Code. (optional)
     * @param sourceSid Filter by SourceSid. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTranscriptAsync(String serviceSid, String beforeStartTime, String afterStartTime, String beforeDateCreated, String afterDateCreated, String status, String languageCode, String sourceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTranscriptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTranscriptValidateBeforeCall(serviceSid, beforeStartTime, afterStartTime, beforeDateCreated, afterDateCreated, status, languageCode, sourceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTranscriptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
