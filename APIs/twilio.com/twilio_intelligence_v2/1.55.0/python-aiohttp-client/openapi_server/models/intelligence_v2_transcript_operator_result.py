# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operator_result_enum_operator_type import OperatorResultEnumOperatorType
import re
from openapi_server import util


class IntelligenceV2TranscriptOperatorResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extract_match: bool=None, extract_results: object=None, label_probabilities: object=None, match_probability: float=None, name: str=None, normalized_result: str=None, operator_sid: str=None, operator_type: OperatorResultEnumOperatorType=None, predicted_label: str=None, predicted_probability: float=None, text_generation_results: object=None, transcript_sid: str=None, url: str=None, utterance_match: bool=None, utterance_results: List[object]=None):
        """IntelligenceV2TranscriptOperatorResult - a model defined in OpenAPI

        :param extract_match: The extract_match of this IntelligenceV2TranscriptOperatorResult.
        :param extract_results: The extract_results of this IntelligenceV2TranscriptOperatorResult.
        :param label_probabilities: The label_probabilities of this IntelligenceV2TranscriptOperatorResult.
        :param match_probability: The match_probability of this IntelligenceV2TranscriptOperatorResult.
        :param name: The name of this IntelligenceV2TranscriptOperatorResult.
        :param normalized_result: The normalized_result of this IntelligenceV2TranscriptOperatorResult.
        :param operator_sid: The operator_sid of this IntelligenceV2TranscriptOperatorResult.
        :param operator_type: The operator_type of this IntelligenceV2TranscriptOperatorResult.
        :param predicted_label: The predicted_label of this IntelligenceV2TranscriptOperatorResult.
        :param predicted_probability: The predicted_probability of this IntelligenceV2TranscriptOperatorResult.
        :param text_generation_results: The text_generation_results of this IntelligenceV2TranscriptOperatorResult.
        :param transcript_sid: The transcript_sid of this IntelligenceV2TranscriptOperatorResult.
        :param url: The url of this IntelligenceV2TranscriptOperatorResult.
        :param utterance_match: The utterance_match of this IntelligenceV2TranscriptOperatorResult.
        :param utterance_results: The utterance_results of this IntelligenceV2TranscriptOperatorResult.
        """
        self.openapi_types = {
            'extract_match': bool,
            'extract_results': object,
            'label_probabilities': object,
            'match_probability': float,
            'name': str,
            'normalized_result': str,
            'operator_sid': str,
            'operator_type': OperatorResultEnumOperatorType,
            'predicted_label': str,
            'predicted_probability': float,
            'text_generation_results': object,
            'transcript_sid': str,
            'url': str,
            'utterance_match': bool,
            'utterance_results': List[object]
        }

        self.attribute_map = {
            'extract_match': 'extract_match',
            'extract_results': 'extract_results',
            'label_probabilities': 'label_probabilities',
            'match_probability': 'match_probability',
            'name': 'name',
            'normalized_result': 'normalized_result',
            'operator_sid': 'operator_sid',
            'operator_type': 'operator_type',
            'predicted_label': 'predicted_label',
            'predicted_probability': 'predicted_probability',
            'text_generation_results': 'text_generation_results',
            'transcript_sid': 'transcript_sid',
            'url': 'url',
            'utterance_match': 'utterance_match',
            'utterance_results': 'utterance_results'
        }

        self._extract_match = extract_match
        self._extract_results = extract_results
        self._label_probabilities = label_probabilities
        self._match_probability = match_probability
        self._name = name
        self._normalized_result = normalized_result
        self._operator_sid = operator_sid
        self._operator_type = operator_type
        self._predicted_label = predicted_label
        self._predicted_probability = predicted_probability
        self._text_generation_results = text_generation_results
        self._transcript_sid = transcript_sid
        self._url = url
        self._utterance_match = utterance_match
        self._utterance_results = utterance_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntelligenceV2TranscriptOperatorResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligence.v2.transcript.operator_result of this IntelligenceV2TranscriptOperatorResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extract_match(self):
        """Gets the extract_match of this IntelligenceV2TranscriptOperatorResult.

        Boolean to tell if extract Language Understanding Processing model matches results.

        :return: The extract_match of this IntelligenceV2TranscriptOperatorResult.
        :rtype: bool
        """
        return self._extract_match

    @extract_match.setter
    def extract_match(self, extract_match):
        """Sets the extract_match of this IntelligenceV2TranscriptOperatorResult.

        Boolean to tell if extract Language Understanding Processing model matches results.

        :param extract_match: The extract_match of this IntelligenceV2TranscriptOperatorResult.
        :type extract_match: bool
        """

        self._extract_match = extract_match

    @property
    def extract_results(self):
        """Gets the extract_results of this IntelligenceV2TranscriptOperatorResult.

        List of text extraction results. This might be available on classify-extract model outputs.

        :return: The extract_results of this IntelligenceV2TranscriptOperatorResult.
        :rtype: object
        """
        return self._extract_results

    @extract_results.setter
    def extract_results(self, extract_results):
        """Sets the extract_results of this IntelligenceV2TranscriptOperatorResult.

        List of text extraction results. This might be available on classify-extract model outputs.

        :param extract_results: The extract_results of this IntelligenceV2TranscriptOperatorResult.
        :type extract_results: object
        """

        self._extract_results = extract_results

    @property
    def label_probabilities(self):
        """Gets the label_probabilities of this IntelligenceV2TranscriptOperatorResult.

        The labels probabilities. This might be available on conversation classify model outputs.

        :return: The label_probabilities of this IntelligenceV2TranscriptOperatorResult.
        :rtype: object
        """
        return self._label_probabilities

    @label_probabilities.setter
    def label_probabilities(self, label_probabilities):
        """Sets the label_probabilities of this IntelligenceV2TranscriptOperatorResult.

        The labels probabilities. This might be available on conversation classify model outputs.

        :param label_probabilities: The label_probabilities of this IntelligenceV2TranscriptOperatorResult.
        :type label_probabilities: object
        """

        self._label_probabilities = label_probabilities

    @property
    def match_probability(self):
        """Gets the match_probability of this IntelligenceV2TranscriptOperatorResult.

        Percentage of 'matching' class needed to consider a sentence matches

        :return: The match_probability of this IntelligenceV2TranscriptOperatorResult.
        :rtype: float
        """
        return self._match_probability

    @match_probability.setter
    def match_probability(self, match_probability):
        """Sets the match_probability of this IntelligenceV2TranscriptOperatorResult.

        Percentage of 'matching' class needed to consider a sentence matches

        :param match_probability: The match_probability of this IntelligenceV2TranscriptOperatorResult.
        :type match_probability: float
        """

        self._match_probability = match_probability

    @property
    def name(self):
        """Gets the name of this IntelligenceV2TranscriptOperatorResult.

        The name of the applied Language Understanding.

        :return: The name of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntelligenceV2TranscriptOperatorResult.

        The name of the applied Language Understanding.

        :param name: The name of this IntelligenceV2TranscriptOperatorResult.
        :type name: str
        """

        self._name = name

    @property
    def normalized_result(self):
        """Gets the normalized_result of this IntelligenceV2TranscriptOperatorResult.

        Normalized output of extraction stage which matches Label.

        :return: The normalized_result of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._normalized_result

    @normalized_result.setter
    def normalized_result(self, normalized_result):
        """Sets the normalized_result of this IntelligenceV2TranscriptOperatorResult.

        Normalized output of extraction stage which matches Label.

        :param normalized_result: The normalized_result of this IntelligenceV2TranscriptOperatorResult.
        :type normalized_result: str
        """

        self._normalized_result = normalized_result

    @property
    def operator_sid(self):
        """Gets the operator_sid of this IntelligenceV2TranscriptOperatorResult.

        A 34 character string that identifies this Language Understanding operator sid.

        :return: The operator_sid of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._operator_sid

    @operator_sid.setter
    def operator_sid(self, operator_sid):
        """Sets the operator_sid of this IntelligenceV2TranscriptOperatorResult.

        A 34 character string that identifies this Language Understanding operator sid.

        :param operator_sid: The operator_sid of this IntelligenceV2TranscriptOperatorResult.
        :type operator_sid: str
        """
        if operator_sid is not None and len(operator_sid) > 34:
            raise ValueError("Invalid value for `operator_sid`, length must be less than or equal to `34`")
        if operator_sid is not None and len(operator_sid) < 34:
            raise ValueError("Invalid value for `operator_sid`, length must be greater than or equal to `34`")
        if operator_sid is not None and not re.search(r'^LY[0-9a-fA-F]{32}$', operator_sid):
            raise ValueError("Invalid value for `operator_sid`, must be a follow pattern or equal to `/^LY[0-9a-fA-F]{32}$/`")

        self._operator_sid = operator_sid

    @property
    def operator_type(self):
        """Gets the operator_type of this IntelligenceV2TranscriptOperatorResult.


        :return: The operator_type of this IntelligenceV2TranscriptOperatorResult.
        :rtype: OperatorResultEnumOperatorType
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this IntelligenceV2TranscriptOperatorResult.


        :param operator_type: The operator_type of this IntelligenceV2TranscriptOperatorResult.
        :type operator_type: OperatorResultEnumOperatorType
        """

        self._operator_type = operator_type

    @property
    def predicted_label(self):
        """Gets the predicted_label of this IntelligenceV2TranscriptOperatorResult.

        The 'matching' class. This might be available on conversation classify model outputs.

        :return: The predicted_label of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._predicted_label

    @predicted_label.setter
    def predicted_label(self, predicted_label):
        """Sets the predicted_label of this IntelligenceV2TranscriptOperatorResult.

        The 'matching' class. This might be available on conversation classify model outputs.

        :param predicted_label: The predicted_label of this IntelligenceV2TranscriptOperatorResult.
        :type predicted_label: str
        """

        self._predicted_label = predicted_label

    @property
    def predicted_probability(self):
        """Gets the predicted_probability of this IntelligenceV2TranscriptOperatorResult.

        Percentage of 'matching' class needed to consider a sentence matches.

        :return: The predicted_probability of this IntelligenceV2TranscriptOperatorResult.
        :rtype: float
        """
        return self._predicted_probability

    @predicted_probability.setter
    def predicted_probability(self, predicted_probability):
        """Sets the predicted_probability of this IntelligenceV2TranscriptOperatorResult.

        Percentage of 'matching' class needed to consider a sentence matches.

        :param predicted_probability: The predicted_probability of this IntelligenceV2TranscriptOperatorResult.
        :type predicted_probability: float
        """

        self._predicted_probability = predicted_probability

    @property
    def text_generation_results(self):
        """Gets the text_generation_results of this IntelligenceV2TranscriptOperatorResult.

        Output of a text generation operator for example Conversation Sumamary.

        :return: The text_generation_results of this IntelligenceV2TranscriptOperatorResult.
        :rtype: object
        """
        return self._text_generation_results

    @text_generation_results.setter
    def text_generation_results(self, text_generation_results):
        """Sets the text_generation_results of this IntelligenceV2TranscriptOperatorResult.

        Output of a text generation operator for example Conversation Sumamary.

        :param text_generation_results: The text_generation_results of this IntelligenceV2TranscriptOperatorResult.
        :type text_generation_results: object
        """

        self._text_generation_results = text_generation_results

    @property
    def transcript_sid(self):
        """Gets the transcript_sid of this IntelligenceV2TranscriptOperatorResult.

        A 34 character string that uniquely identifies this Transcript.

        :return: The transcript_sid of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._transcript_sid

    @transcript_sid.setter
    def transcript_sid(self, transcript_sid):
        """Sets the transcript_sid of this IntelligenceV2TranscriptOperatorResult.

        A 34 character string that uniquely identifies this Transcript.

        :param transcript_sid: The transcript_sid of this IntelligenceV2TranscriptOperatorResult.
        :type transcript_sid: str
        """
        if transcript_sid is not None and len(transcript_sid) > 34:
            raise ValueError("Invalid value for `transcript_sid`, length must be less than or equal to `34`")
        if transcript_sid is not None and len(transcript_sid) < 34:
            raise ValueError("Invalid value for `transcript_sid`, length must be greater than or equal to `34`")
        if transcript_sid is not None and not re.search(r'^GT[0-9a-fA-F]{32}$', transcript_sid):
            raise ValueError("Invalid value for `transcript_sid`, must be a follow pattern or equal to `/^GT[0-9a-fA-F]{32}$/`")

        self._transcript_sid = transcript_sid

    @property
    def url(self):
        """Gets the url of this IntelligenceV2TranscriptOperatorResult.

        The URL of this resource.

        :return: The url of this IntelligenceV2TranscriptOperatorResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IntelligenceV2TranscriptOperatorResult.

        The URL of this resource.

        :param url: The url of this IntelligenceV2TranscriptOperatorResult.
        :type url: str
        """

        self._url = url

    @property
    def utterance_match(self):
        """Gets the utterance_match of this IntelligenceV2TranscriptOperatorResult.

        Boolean to tell if Utterance matches results.

        :return: The utterance_match of this IntelligenceV2TranscriptOperatorResult.
        :rtype: bool
        """
        return self._utterance_match

    @utterance_match.setter
    def utterance_match(self, utterance_match):
        """Sets the utterance_match of this IntelligenceV2TranscriptOperatorResult.

        Boolean to tell if Utterance matches results.

        :param utterance_match: The utterance_match of this IntelligenceV2TranscriptOperatorResult.
        :type utterance_match: bool
        """

        self._utterance_match = utterance_match

    @property
    def utterance_results(self):
        """Gets the utterance_results of this IntelligenceV2TranscriptOperatorResult.

        List of mapped utterance object which matches sentences.

        :return: The utterance_results of this IntelligenceV2TranscriptOperatorResult.
        :rtype: List[object]
        """
        return self._utterance_results

    @utterance_results.setter
    def utterance_results(self, utterance_results):
        """Sets the utterance_results of this IntelligenceV2TranscriptOperatorResult.

        List of mapped utterance object which matches sentences.

        :param utterance_results: The utterance_results of this IntelligenceV2TranscriptOperatorResult.
        :type utterance_results: List[object]
        """

        self._utterance_results = utterance_results
