# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class IntelligenceV2TranscriptSentence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, end_time: float=None, media_channel: int=None, sentence_index: int=None, sid: str=None, start_time: float=None, transcript: str=None):
        """IntelligenceV2TranscriptSentence - a model defined in OpenAPI

        :param confidence: The confidence of this IntelligenceV2TranscriptSentence.
        :param end_time: The end_time of this IntelligenceV2TranscriptSentence.
        :param media_channel: The media_channel of this IntelligenceV2TranscriptSentence.
        :param sentence_index: The sentence_index of this IntelligenceV2TranscriptSentence.
        :param sid: The sid of this IntelligenceV2TranscriptSentence.
        :param start_time: The start_time of this IntelligenceV2TranscriptSentence.
        :param transcript: The transcript of this IntelligenceV2TranscriptSentence.
        """
        self.openapi_types = {
            'confidence': float,
            'end_time': float,
            'media_channel': int,
            'sentence_index': int,
            'sid': str,
            'start_time': float,
            'transcript': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'end_time': 'end_time',
            'media_channel': 'media_channel',
            'sentence_index': 'sentence_index',
            'sid': 'sid',
            'start_time': 'start_time',
            'transcript': 'transcript'
        }

        self._confidence = confidence
        self._end_time = end_time
        self._media_channel = media_channel
        self._sentence_index = sentence_index
        self._sid = sid
        self._start_time = start_time
        self._transcript = transcript

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntelligenceV2TranscriptSentence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligence.v2.transcript.sentence of this IntelligenceV2TranscriptSentence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this IntelligenceV2TranscriptSentence.


        :return: The confidence of this IntelligenceV2TranscriptSentence.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this IntelligenceV2TranscriptSentence.


        :param confidence: The confidence of this IntelligenceV2TranscriptSentence.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def end_time(self):
        """Gets the end_time of this IntelligenceV2TranscriptSentence.

        Offset from the beginning of the transcript when this sentence ends.

        :return: The end_time of this IntelligenceV2TranscriptSentence.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this IntelligenceV2TranscriptSentence.

        Offset from the beginning of the transcript when this sentence ends.

        :param end_time: The end_time of this IntelligenceV2TranscriptSentence.
        :type end_time: float
        """

        self._end_time = end_time

    @property
    def media_channel(self):
        """Gets the media_channel of this IntelligenceV2TranscriptSentence.

        The channel number.

        :return: The media_channel of this IntelligenceV2TranscriptSentence.
        :rtype: int
        """
        return self._media_channel

    @media_channel.setter
    def media_channel(self, media_channel):
        """Sets the media_channel of this IntelligenceV2TranscriptSentence.

        The channel number.

        :param media_channel: The media_channel of this IntelligenceV2TranscriptSentence.
        :type media_channel: int
        """

        self._media_channel = media_channel

    @property
    def sentence_index(self):
        """Gets the sentence_index of this IntelligenceV2TranscriptSentence.

        The index of the sentence in the transcript.

        :return: The sentence_index of this IntelligenceV2TranscriptSentence.
        :rtype: int
        """
        return self._sentence_index

    @sentence_index.setter
    def sentence_index(self, sentence_index):
        """Sets the sentence_index of this IntelligenceV2TranscriptSentence.

        The index of the sentence in the transcript.

        :param sentence_index: The sentence_index of this IntelligenceV2TranscriptSentence.
        :type sentence_index: int
        """

        self._sentence_index = sentence_index

    @property
    def sid(self):
        """Gets the sid of this IntelligenceV2TranscriptSentence.

        A 34 character string that uniquely identifies this Sentence.

        :return: The sid of this IntelligenceV2TranscriptSentence.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IntelligenceV2TranscriptSentence.

        A 34 character string that uniquely identifies this Sentence.

        :param sid: The sid of this IntelligenceV2TranscriptSentence.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^GX[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^GX[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def start_time(self):
        """Gets the start_time of this IntelligenceV2TranscriptSentence.

        Offset from the beginning of the transcript when this sentence starts.

        :return: The start_time of this IntelligenceV2TranscriptSentence.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this IntelligenceV2TranscriptSentence.

        Offset from the beginning of the transcript when this sentence starts.

        :param start_time: The start_time of this IntelligenceV2TranscriptSentence.
        :type start_time: float
        """

        self._start_time = start_time

    @property
    def transcript(self):
        """Gets the transcript of this IntelligenceV2TranscriptSentence.

        Transcript text.

        :return: The transcript of this IntelligenceV2TranscriptSentence.
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this IntelligenceV2TranscriptSentence.

        Transcript text.

        :param transcript: The transcript of this IntelligenceV2TranscriptSentence.
        :type transcript: str
        """

        self._transcript = transcript
