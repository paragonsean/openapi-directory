# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class IntelligenceV2TranscriptMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, media_url: str=None, service_sid: str=None, sid: str=None, url: str=None):
        """IntelligenceV2TranscriptMedia - a model defined in OpenAPI

        :param account_sid: The account_sid of this IntelligenceV2TranscriptMedia.
        :param media_url: The media_url of this IntelligenceV2TranscriptMedia.
        :param service_sid: The service_sid of this IntelligenceV2TranscriptMedia.
        :param sid: The sid of this IntelligenceV2TranscriptMedia.
        :param url: The url of this IntelligenceV2TranscriptMedia.
        """
        self.openapi_types = {
            'account_sid': str,
            'media_url': str,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'media_url': 'media_url',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._media_url = media_url
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntelligenceV2TranscriptMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligence.v2.transcript.media of this IntelligenceV2TranscriptMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Account.

        :return: The account_sid of this IntelligenceV2TranscriptMedia.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this IntelligenceV2TranscriptMedia.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def media_url(self):
        """Gets the media_url of this IntelligenceV2TranscriptMedia.

        Downloadable URL for media, if stored in Twilio AI.

        :return: The media_url of this IntelligenceV2TranscriptMedia.
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this IntelligenceV2TranscriptMedia.

        Downloadable URL for media, if stored in Twilio AI.

        :param media_url: The media_url of this IntelligenceV2TranscriptMedia.
        :type media_url: str
        """

        self._media_url = media_url

    @property
    def service_sid(self):
        """Gets the service_sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Service.

        :return: The service_sid of this IntelligenceV2TranscriptMedia.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Service.

        :param service_sid: The service_sid of this IntelligenceV2TranscriptMedia.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^GA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^GA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Transcript.

        :return: The sid of this IntelligenceV2TranscriptMedia.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IntelligenceV2TranscriptMedia.

        The unique SID identifier of the Transcript.

        :param sid: The sid of this IntelligenceV2TranscriptMedia.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^GT[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^GT[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this IntelligenceV2TranscriptMedia.

        The URL of this resource.

        :return: The url of this IntelligenceV2TranscriptMedia.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IntelligenceV2TranscriptMedia.

        The URL of this resource.

        :param url: The url of this IntelligenceV2TranscriptMedia.
        :type url: str
        """

        self._url = url
