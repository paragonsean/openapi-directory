# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_enum_http_method import ServiceEnumHttpMethod
import re
from openapi_server import util


class IntelligenceV2Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, auto_redaction: bool=None, auto_transcribe: bool=None, data_logging: bool=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, language_code: str=None, media_redaction: bool=None, sid: str=None, unique_name: str=None, url: str=None, version: int=None, webhook_http_method: ServiceEnumHttpMethod=None, webhook_url: str=None):
        """IntelligenceV2Service - a model defined in OpenAPI

        :param account_sid: The account_sid of this IntelligenceV2Service.
        :param auto_redaction: The auto_redaction of this IntelligenceV2Service.
        :param auto_transcribe: The auto_transcribe of this IntelligenceV2Service.
        :param data_logging: The data_logging of this IntelligenceV2Service.
        :param date_created: The date_created of this IntelligenceV2Service.
        :param date_updated: The date_updated of this IntelligenceV2Service.
        :param friendly_name: The friendly_name of this IntelligenceV2Service.
        :param language_code: The language_code of this IntelligenceV2Service.
        :param media_redaction: The media_redaction of this IntelligenceV2Service.
        :param sid: The sid of this IntelligenceV2Service.
        :param unique_name: The unique_name of this IntelligenceV2Service.
        :param url: The url of this IntelligenceV2Service.
        :param version: The version of this IntelligenceV2Service.
        :param webhook_http_method: The webhook_http_method of this IntelligenceV2Service.
        :param webhook_url: The webhook_url of this IntelligenceV2Service.
        """
        self.openapi_types = {
            'account_sid': str,
            'auto_redaction': bool,
            'auto_transcribe': bool,
            'data_logging': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'language_code': str,
            'media_redaction': bool,
            'sid': str,
            'unique_name': str,
            'url': str,
            'version': int,
            'webhook_http_method': ServiceEnumHttpMethod,
            'webhook_url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'auto_redaction': 'auto_redaction',
            'auto_transcribe': 'auto_transcribe',
            'data_logging': 'data_logging',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'language_code': 'language_code',
            'media_redaction': 'media_redaction',
            'sid': 'sid',
            'unique_name': 'unique_name',
            'url': 'url',
            'version': 'version',
            'webhook_http_method': 'webhook_http_method',
            'webhook_url': 'webhook_url'
        }

        self._account_sid = account_sid
        self._auto_redaction = auto_redaction
        self._auto_transcribe = auto_transcribe
        self._data_logging = data_logging
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._language_code = language_code
        self._media_redaction = media_redaction
        self._sid = sid
        self._unique_name = unique_name
        self._url = url
        self._version = version
        self._webhook_http_method = webhook_http_method
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntelligenceV2Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligence.v2.service of this IntelligenceV2Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this IntelligenceV2Service.

        The unique SID identifier of the Account the Service belongs to.

        :return: The account_sid of this IntelligenceV2Service.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this IntelligenceV2Service.

        The unique SID identifier of the Account the Service belongs to.

        :param account_sid: The account_sid of this IntelligenceV2Service.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def auto_redaction(self):
        """Gets the auto_redaction of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically redact PII from all transcripts made on this service.

        :return: The auto_redaction of this IntelligenceV2Service.
        :rtype: bool
        """
        return self._auto_redaction

    @auto_redaction.setter
    def auto_redaction(self, auto_redaction):
        """Sets the auto_redaction of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically redact PII from all transcripts made on this service.

        :param auto_redaction: The auto_redaction of this IntelligenceV2Service.
        :type auto_redaction: bool
        """

        self._auto_redaction = auto_redaction

    @property
    def auto_transcribe(self):
        """Gets the auto_transcribe of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically transcribe all recordings made on the account.

        :return: The auto_transcribe of this IntelligenceV2Service.
        :rtype: bool
        """
        return self._auto_transcribe

    @auto_transcribe.setter
    def auto_transcribe(self, auto_transcribe):
        """Sets the auto_transcribe of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically transcribe all recordings made on the account.

        :param auto_transcribe: The auto_transcribe of this IntelligenceV2Service.
        :type auto_transcribe: bool
        """

        self._auto_transcribe = auto_transcribe

    @property
    def data_logging(self):
        """Gets the data_logging of this IntelligenceV2Service.

        Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.

        :return: The data_logging of this IntelligenceV2Service.
        :rtype: bool
        """
        return self._data_logging

    @data_logging.setter
    def data_logging(self, data_logging):
        """Sets the data_logging of this IntelligenceV2Service.

        Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.

        :param data_logging: The data_logging of this IntelligenceV2Service.
        :type data_logging: bool
        """

        self._data_logging = data_logging

    @property
    def date_created(self):
        """Gets the date_created of this IntelligenceV2Service.

        The date that this Service was created, given in ISO 8601 format.

        :return: The date_created of this IntelligenceV2Service.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IntelligenceV2Service.

        The date that this Service was created, given in ISO 8601 format.

        :param date_created: The date_created of this IntelligenceV2Service.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this IntelligenceV2Service.

        The date that this Service was updated, given in ISO 8601 format.

        :return: The date_updated of this IntelligenceV2Service.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this IntelligenceV2Service.

        The date that this Service was updated, given in ISO 8601 format.

        :param date_updated: The date_updated of this IntelligenceV2Service.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this IntelligenceV2Service.

        A human readable description of this resource, up to 64 characters.

        :return: The friendly_name of this IntelligenceV2Service.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this IntelligenceV2Service.

        A human readable description of this resource, up to 64 characters.

        :param friendly_name: The friendly_name of this IntelligenceV2Service.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def language_code(self):
        """Gets the language_code of this IntelligenceV2Service.

        The default language code of the audio.

        :return: The language_code of this IntelligenceV2Service.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this IntelligenceV2Service.

        The default language code of the audio.

        :param language_code: The language_code of this IntelligenceV2Service.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def media_redaction(self):
        """Gets the media_redaction of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically redact PII from all transcripts media made on this service. The auto_redaction flag must be enabled, results in error otherwise.

        :return: The media_redaction of this IntelligenceV2Service.
        :rtype: bool
        """
        return self._media_redaction

    @media_redaction.setter
    def media_redaction(self, media_redaction):
        """Sets the media_redaction of this IntelligenceV2Service.

        Instructs the Speech Recognition service to automatically redact PII from all transcripts media made on this service. The auto_redaction flag must be enabled, results in error otherwise.

        :param media_redaction: The media_redaction of this IntelligenceV2Service.
        :type media_redaction: bool
        """

        self._media_redaction = media_redaction

    @property
    def sid(self):
        """Gets the sid of this IntelligenceV2Service.

        A 34 character string that uniquely identifies this Service.

        :return: The sid of this IntelligenceV2Service.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IntelligenceV2Service.

        A 34 character string that uniquely identifies this Service.

        :param sid: The sid of this IntelligenceV2Service.
        :type sid: str
        """

        self._sid = sid

    @property
    def unique_name(self):
        """Gets the unique_name of this IntelligenceV2Service.

        Provides a unique and addressable name to be assigned to this Service, assigned by the developer, to be optionally used in addition to SID.

        :return: The unique_name of this IntelligenceV2Service.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this IntelligenceV2Service.

        Provides a unique and addressable name to be assigned to this Service, assigned by the developer, to be optionally used in addition to SID.

        :param unique_name: The unique_name of this IntelligenceV2Service.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this IntelligenceV2Service.

        The URL of this resource.

        :return: The url of this IntelligenceV2Service.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IntelligenceV2Service.

        The URL of this resource.

        :param url: The url of this IntelligenceV2Service.
        :type url: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this IntelligenceV2Service.

        The version number of this Service.

        :return: The version of this IntelligenceV2Service.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IntelligenceV2Service.

        The version number of this Service.

        :param version: The version of this IntelligenceV2Service.
        :type version: int
        """

        self._version = version

    @property
    def webhook_http_method(self):
        """Gets the webhook_http_method of this IntelligenceV2Service.


        :return: The webhook_http_method of this IntelligenceV2Service.
        :rtype: ServiceEnumHttpMethod
        """
        return self._webhook_http_method

    @webhook_http_method.setter
    def webhook_http_method(self, webhook_http_method):
        """Sets the webhook_http_method of this IntelligenceV2Service.


        :param webhook_http_method: The webhook_http_method of this IntelligenceV2Service.
        :type webhook_http_method: ServiceEnumHttpMethod
        """

        self._webhook_http_method = webhook_http_method

    @property
    def webhook_url(self):
        """Gets the webhook_url of this IntelligenceV2Service.

        The URL Twilio will request when executing the Webhook.

        :return: The webhook_url of this IntelligenceV2Service.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this IntelligenceV2Service.

        The URL Twilio will request when executing the Webhook.

        :param webhook_url: The webhook_url of this IntelligenceV2Service.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
