# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transcript_enum_status import TranscriptEnumStatus
import re
from openapi_server import util


class IntelligenceV2Transcript(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, channel: object=None, customer_key: str=None, data_logging: bool=None, date_created: datetime=None, date_updated: datetime=None, duration: int=None, language_code: str=None, links: object=None, media_start_time: datetime=None, redaction: bool=None, service_sid: str=None, sid: str=None, status: TranscriptEnumStatus=None, url: str=None):
        """IntelligenceV2Transcript - a model defined in OpenAPI

        :param account_sid: The account_sid of this IntelligenceV2Transcript.
        :param channel: The channel of this IntelligenceV2Transcript.
        :param customer_key: The customer_key of this IntelligenceV2Transcript.
        :param data_logging: The data_logging of this IntelligenceV2Transcript.
        :param date_created: The date_created of this IntelligenceV2Transcript.
        :param date_updated: The date_updated of this IntelligenceV2Transcript.
        :param duration: The duration of this IntelligenceV2Transcript.
        :param language_code: The language_code of this IntelligenceV2Transcript.
        :param links: The links of this IntelligenceV2Transcript.
        :param media_start_time: The media_start_time of this IntelligenceV2Transcript.
        :param redaction: The redaction of this IntelligenceV2Transcript.
        :param service_sid: The service_sid of this IntelligenceV2Transcript.
        :param sid: The sid of this IntelligenceV2Transcript.
        :param status: The status of this IntelligenceV2Transcript.
        :param url: The url of this IntelligenceV2Transcript.
        """
        self.openapi_types = {
            'account_sid': str,
            'channel': object,
            'customer_key': str,
            'data_logging': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'duration': int,
            'language_code': str,
            'links': object,
            'media_start_time': datetime,
            'redaction': bool,
            'service_sid': str,
            'sid': str,
            'status': TranscriptEnumStatus,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'channel': 'channel',
            'customer_key': 'customer_key',
            'data_logging': 'data_logging',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'duration': 'duration',
            'language_code': 'language_code',
            'links': 'links',
            'media_start_time': 'media_start_time',
            'redaction': 'redaction',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._channel = channel
        self._customer_key = customer_key
        self._data_logging = data_logging
        self._date_created = date_created
        self._date_updated = date_updated
        self._duration = duration
        self._language_code = language_code
        self._links = links
        self._media_start_time = media_start_time
        self._redaction = redaction
        self._service_sid = service_sid
        self._sid = sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntelligenceV2Transcript':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligence.v2.transcript of this IntelligenceV2Transcript.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this IntelligenceV2Transcript.

        The unique SID identifier of the Account.

        :return: The account_sid of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this IntelligenceV2Transcript.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this IntelligenceV2Transcript.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def channel(self):
        """Gets the channel of this IntelligenceV2Transcript.

        Media Channel describing Transcript Source and Participant Mapping

        :return: The channel of this IntelligenceV2Transcript.
        :rtype: object
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this IntelligenceV2Transcript.

        Media Channel describing Transcript Source and Participant Mapping

        :param channel: The channel of this IntelligenceV2Transcript.
        :type channel: object
        """

        self._channel = channel

    @property
    def customer_key(self):
        """Gets the customer_key of this IntelligenceV2Transcript.


        :return: The customer_key of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._customer_key

    @customer_key.setter
    def customer_key(self, customer_key):
        """Sets the customer_key of this IntelligenceV2Transcript.


        :param customer_key: The customer_key of this IntelligenceV2Transcript.
        :type customer_key: str
        """

        self._customer_key = customer_key

    @property
    def data_logging(self):
        """Gets the data_logging of this IntelligenceV2Transcript.

        Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.

        :return: The data_logging of this IntelligenceV2Transcript.
        :rtype: bool
        """
        return self._data_logging

    @data_logging.setter
    def data_logging(self, data_logging):
        """Sets the data_logging of this IntelligenceV2Transcript.

        Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models. Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.

        :param data_logging: The data_logging of this IntelligenceV2Transcript.
        :type data_logging: bool
        """

        self._data_logging = data_logging

    @property
    def date_created(self):
        """Gets the date_created of this IntelligenceV2Transcript.

        The date that this Transcript was created, given in ISO 8601 format.

        :return: The date_created of this IntelligenceV2Transcript.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IntelligenceV2Transcript.

        The date that this Transcript was created, given in ISO 8601 format.

        :param date_created: The date_created of this IntelligenceV2Transcript.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this IntelligenceV2Transcript.

        The date that this Transcript was updated, given in ISO 8601 format.

        :return: The date_updated of this IntelligenceV2Transcript.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this IntelligenceV2Transcript.

        The date that this Transcript was updated, given in ISO 8601 format.

        :param date_updated: The date_updated of this IntelligenceV2Transcript.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def duration(self):
        """Gets the duration of this IntelligenceV2Transcript.

        The duration of this Transcript's source

        :return: The duration of this IntelligenceV2Transcript.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IntelligenceV2Transcript.

        The duration of this Transcript's source

        :param duration: The duration of this IntelligenceV2Transcript.
        :type duration: int
        """

        self._duration = duration

    @property
    def language_code(self):
        """Gets the language_code of this IntelligenceV2Transcript.

        The default language code of the audio.

        :return: The language_code of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this IntelligenceV2Transcript.

        The default language code of the audio.

        :param language_code: The language_code of this IntelligenceV2Transcript.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def links(self):
        """Gets the links of this IntelligenceV2Transcript.


        :return: The links of this IntelligenceV2Transcript.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IntelligenceV2Transcript.


        :param links: The links of this IntelligenceV2Transcript.
        :type links: object
        """

        self._links = links

    @property
    def media_start_time(self):
        """Gets the media_start_time of this IntelligenceV2Transcript.

        The date that this Transcript's media was started, given in ISO 8601 format.

        :return: The media_start_time of this IntelligenceV2Transcript.
        :rtype: datetime
        """
        return self._media_start_time

    @media_start_time.setter
    def media_start_time(self, media_start_time):
        """Sets the media_start_time of this IntelligenceV2Transcript.

        The date that this Transcript's media was started, given in ISO 8601 format.

        :param media_start_time: The media_start_time of this IntelligenceV2Transcript.
        :type media_start_time: datetime
        """

        self._media_start_time = media_start_time

    @property
    def redaction(self):
        """Gets the redaction of this IntelligenceV2Transcript.

        If the transcript has been redacted, a redacted alternative of the transcript will be available.

        :return: The redaction of this IntelligenceV2Transcript.
        :rtype: bool
        """
        return self._redaction

    @redaction.setter
    def redaction(self, redaction):
        """Sets the redaction of this IntelligenceV2Transcript.

        If the transcript has been redacted, a redacted alternative of the transcript will be available.

        :param redaction: The redaction of this IntelligenceV2Transcript.
        :type redaction: bool
        """

        self._redaction = redaction

    @property
    def service_sid(self):
        """Gets the service_sid of this IntelligenceV2Transcript.

        The unique SID identifier of the Service.

        :return: The service_sid of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this IntelligenceV2Transcript.

        The unique SID identifier of the Service.

        :param service_sid: The service_sid of this IntelligenceV2Transcript.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^GA[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^GA[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this IntelligenceV2Transcript.

        A 34 character string that uniquely identifies this Transcript.

        :return: The sid of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IntelligenceV2Transcript.

        A 34 character string that uniquely identifies this Transcript.

        :param sid: The sid of this IntelligenceV2Transcript.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^GT[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^GT[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this IntelligenceV2Transcript.


        :return: The status of this IntelligenceV2Transcript.
        :rtype: TranscriptEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IntelligenceV2Transcript.


        :param status: The status of this IntelligenceV2Transcript.
        :type status: TranscriptEnumStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this IntelligenceV2Transcript.

        The URL of this resource.

        :return: The url of this IntelligenceV2Transcript.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IntelligenceV2Transcript.

        The URL of this resource.

        :param url: The url of this IntelligenceV2Transcript.
        :type url: str
        """

        self._url = url
