/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlexV1WebChannel from '../model/FlexV1WebChannel';
import ListWebChannelResponse from '../model/ListWebChannelResponse';
import WebChannelEnumChatStatus from '../model/WebChannelEnumChatStatus';

/**
* FlexV1WebChannel service.
* @module api/FlexV1WebChannelApi
* @version 1.55.0
*/
export default class FlexV1WebChannelApi {

    /**
    * Constructs a new FlexV1WebChannelApi. 
    * @alias module:api/FlexV1WebChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWebChannel operation.
     * @callback module:api/FlexV1WebChannelApi~createWebChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1WebChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} chatFriendlyName The chat channel's friendly name.
     * @param {String} customerFriendlyName The chat participant's friendly name.
     * @param {String} flexFlowSid The SID of the Flex Flow.
     * @param {String} identity The chat identity.
     * @param {Object} opts Optional parameters
     * @param {String} [chatUniqueName] The chat channel's unique name.
     * @param {String} [preEngagementData] The pre-engagement data.
     * @param {module:api/FlexV1WebChannelApi~createWebChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1WebChannel}
     */
    createWebChannel(chatFriendlyName, customerFriendlyName, flexFlowSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chatFriendlyName' is set
      if (chatFriendlyName === undefined || chatFriendlyName === null) {
        throw new Error("Missing the required parameter 'chatFriendlyName' when calling createWebChannel");
      }
      // verify the required parameter 'customerFriendlyName' is set
      if (customerFriendlyName === undefined || customerFriendlyName === null) {
        throw new Error("Missing the required parameter 'customerFriendlyName' when calling createWebChannel");
      }
      // verify the required parameter 'flexFlowSid' is set
      if (flexFlowSid === undefined || flexFlowSid === null) {
        throw new Error("Missing the required parameter 'flexFlowSid' when calling createWebChannel");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createWebChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChatFriendlyName': chatFriendlyName,
        'ChatUniqueName': opts['chatUniqueName'],
        'CustomerFriendlyName': customerFriendlyName,
        'FlexFlowSid': flexFlowSid,
        'Identity': identity,
        'PreEngagementData': opts['preEngagementData']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1WebChannel;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/WebChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebChannel operation.
     * @callback module:api/FlexV1WebChannelApi~deleteWebChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the WebChannel resource to delete.
     * @param {module:api/FlexV1WebChannelApi~deleteWebChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebChannel(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteWebChannel");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/WebChannels/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchWebChannel operation.
     * @callback module:api/FlexV1WebChannelApi~fetchWebChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1WebChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the WebChannel resource to fetch.
     * @param {module:api/FlexV1WebChannelApi~fetchWebChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1WebChannel}
     */
    fetchWebChannel(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWebChannel");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlexV1WebChannel;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/WebChannels/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWebChannel operation.
     * @callback module:api/FlexV1WebChannelApi~listWebChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWebChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/FlexV1WebChannelApi~listWebChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWebChannelResponse}
     */
    listWebChannel(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWebChannelResponse;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/WebChannels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebChannel operation.
     * @callback module:api/FlexV1WebChannelApi~updateWebChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1WebChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the WebChannel resource to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebChannelEnumChatStatus} [chatStatus] 
     * @param {String} [postEngagementData] The post-engagement data.
     * @param {module:api/FlexV1WebChannelApi~updateWebChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1WebChannel}
     */
    updateWebChannel(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWebChannel");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChatStatus': opts['chatStatus'],
        'PostEngagementData': opts['postEngagementData']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1WebChannel;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/WebChannels/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
