/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlexFlowEnumChannelType from '../model/FlexFlowEnumChannelType';
import FlexFlowEnumIntegrationType from '../model/FlexFlowEnumIntegrationType';
import FlexV1FlexFlow from '../model/FlexV1FlexFlow';
import ListFlexFlowResponse from '../model/ListFlexFlowResponse';

/**
* FlexV1FlexFlow service.
* @module api/FlexV1FlexFlowApi
* @version 1.55.0
*/
export default class FlexV1FlexFlowApi {

    /**
    * Constructs a new FlexV1FlexFlowApi. 
    * @alias module:api/FlexV1FlexFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFlexFlow operation.
     * @callback module:api/FlexV1FlexFlowApi~createFlexFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1FlexFlow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FlexFlowEnumChannelType} channelType 
     * @param {String} chatServiceSid The SID of the chat service.
     * @param {String} friendlyName A descriptive string that you create to describe the Flex Flow resource.
     * @param {Object} opts Optional parameters
     * @param {String} [contactIdentity] The channel contact's Identity.
     * @param {Boolean} [enabled] Whether the new Flex Flow is enabled.
     * @param {String} [integrationChannel] The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`.
     * @param {Boolean} [integrationCreationOnMessage] In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging.
     * @param {String} [integrationFlowSid] The SID of the Studio Flow. Required when `integrationType` is `studio`.
     * @param {Number} [integrationPriority] The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise.
     * @param {Number} [integrationRetryCount] The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise.
     * @param {Number} [integrationTimeout] The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise.
     * @param {String} [integrationUrl] The URL of the external webhook. Required when `integrationType` is `external`.
     * @param {String} [integrationWorkflowSid] The Workflow SID for a new Task. Required when `integrationType` is `task`.
     * @param {String} [integrationWorkspaceSid] The Workspace SID for a new Task. Required when `integrationType` is `task`.
     * @param {module:model/FlexFlowEnumIntegrationType} [integrationType] 
     * @param {Boolean} [janitorEnabled] When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`.
     * @param {Boolean} [longLived] When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`.
     * @param {module:api/FlexV1FlexFlowApi~createFlexFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1FlexFlow}
     */
    createFlexFlow(channelType, chatServiceSid, friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelType' is set
      if (channelType === undefined || channelType === null) {
        throw new Error("Missing the required parameter 'channelType' when calling createFlexFlow");
      }
      // verify the required parameter 'chatServiceSid' is set
      if (chatServiceSid === undefined || chatServiceSid === null) {
        throw new Error("Missing the required parameter 'chatServiceSid' when calling createFlexFlow");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createFlexFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChannelType': channelType,
        'ChatServiceSid': chatServiceSid,
        'ContactIdentity': opts['contactIdentity'],
        'Enabled': opts['enabled'],
        'FriendlyName': friendlyName,
        'Integration.Channel': opts['integrationChannel'],
        'Integration.CreationOnMessage': opts['integrationCreationOnMessage'],
        'Integration.FlowSid': opts['integrationFlowSid'],
        'Integration.Priority': opts['integrationPriority'],
        'Integration.RetryCount': opts['integrationRetryCount'],
        'Integration.Timeout': opts['integrationTimeout'],
        'Integration.Url': opts['integrationUrl'],
        'Integration.WorkflowSid': opts['integrationWorkflowSid'],
        'Integration.WorkspaceSid': opts['integrationWorkspaceSid'],
        'IntegrationType': opts['integrationType'],
        'JanitorEnabled': opts['janitorEnabled'],
        'LongLived': opts['longLived']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1FlexFlow;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/FlexFlows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlexFlow operation.
     * @callback module:api/FlexV1FlexFlowApi~deleteFlexFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Flex Flow resource to delete.
     * @param {module:api/FlexV1FlexFlowApi~deleteFlexFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFlexFlow(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteFlexFlow");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/FlexFlows/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchFlexFlow operation.
     * @callback module:api/FlexV1FlexFlowApi~fetchFlexFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1FlexFlow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Flex Flow resource to fetch.
     * @param {module:api/FlexV1FlexFlowApi~fetchFlexFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1FlexFlow}
     */
    fetchFlexFlow(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchFlexFlow");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlexV1FlexFlow;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/FlexFlows/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlexFlow operation.
     * @callback module:api/FlexV1FlexFlowApi~listFlexFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFlexFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [friendlyName] The `friendly_name` of the Flex Flow resources to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/FlexV1FlexFlowApi~listFlexFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFlexFlowResponse}
     */
    listFlexFlow(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'FriendlyName': opts['friendlyName'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFlexFlowResponse;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/FlexFlows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlexFlow operation.
     * @callback module:api/FlexV1FlexFlowApi~updateFlexFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1FlexFlow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Flex Flow resource to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/FlexFlowEnumChannelType} [channelType] 
     * @param {String} [chatServiceSid] The SID of the chat service.
     * @param {String} [contactIdentity] The channel contact's Identity.
     * @param {Boolean} [enabled] Whether the new Flex Flow is enabled.
     * @param {String} [friendlyName] A descriptive string that you create to describe the Flex Flow resource.
     * @param {String} [integrationChannel] The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for the Task that will be created. Applicable and required when `integrationType` is `task`. The default value is `default`.
     * @param {Boolean} [integrationCreationOnMessage] In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging.
     * @param {String} [integrationFlowSid] The SID of the Studio Flow. Required when `integrationType` is `studio`.
     * @param {Number} [integrationPriority] The Task priority of a new Task. The default priority is 0. Optional when `integrationType` is `task`, not applicable otherwise.
     * @param {Number} [integrationRetryCount] The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when `integrationType` is `studio` or `external`, not applicable otherwise.
     * @param {Number} [integrationTimeout] The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when `integrationType` is `task`, not applicable otherwise.
     * @param {String} [integrationUrl] The URL of the external webhook. Required when `integrationType` is `external`.
     * @param {String} [integrationWorkflowSid] The Workflow SID for a new Task. Required when `integrationType` is `task`.
     * @param {String} [integrationWorkspaceSid] The Workspace SID for a new Task. Required when `integrationType` is `task`.
     * @param {module:model/FlexFlowEnumIntegrationType} [integrationType] 
     * @param {Boolean} [janitorEnabled] When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`.
     * @param {Boolean} [longLived] When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`.
     * @param {module:api/FlexV1FlexFlowApi~updateFlexFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1FlexFlow}
     */
    updateFlexFlow(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateFlexFlow");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ChannelType': opts['channelType'],
        'ChatServiceSid': opts['chatServiceSid'],
        'ContactIdentity': opts['contactIdentity'],
        'Enabled': opts['enabled'],
        'FriendlyName': opts['friendlyName'],
        'Integration.Channel': opts['integrationChannel'],
        'Integration.CreationOnMessage': opts['integrationCreationOnMessage'],
        'Integration.FlowSid': opts['integrationFlowSid'],
        'Integration.Priority': opts['integrationPriority'],
        'Integration.RetryCount': opts['integrationRetryCount'],
        'Integration.Timeout': opts['integrationTimeout'],
        'Integration.Url': opts['integrationUrl'],
        'Integration.WorkflowSid': opts['integrationWorkflowSid'],
        'Integration.WorkspaceSid': opts['integrationWorkspaceSid'],
        'IntegrationType': opts['integrationType'],
        'JanitorEnabled': opts['janitorEnabled'],
        'LongLived': opts['longLived']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1FlexFlow;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/FlexFlows/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
