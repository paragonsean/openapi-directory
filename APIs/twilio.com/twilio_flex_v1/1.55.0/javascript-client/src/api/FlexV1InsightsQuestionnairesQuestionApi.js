/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlexV1InsightsQuestionnairesQuestion from '../model/FlexV1InsightsQuestionnairesQuestion';
import ListInsightsQuestionnairesQuestionResponse from '../model/ListInsightsQuestionnairesQuestionResponse';

/**
* FlexV1InsightsQuestionnairesQuestion service.
* @module api/FlexV1InsightsQuestionnairesQuestionApi
* @version 1.55.0
*/
export default class FlexV1InsightsQuestionnairesQuestionApi {

    /**
    * Constructs a new FlexV1InsightsQuestionnairesQuestionApi. 
    * @alias module:api/FlexV1InsightsQuestionnairesQuestionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInsightsQuestionnairesQuestion operation.
     * @callback module:api/FlexV1InsightsQuestionnairesQuestionApi~createInsightsQuestionnairesQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1InsightsQuestionnairesQuestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To create a question for a Category
     * @param {Boolean} allowNa The flag to enable for disable NA for answer.
     * @param {String} answerSetId The answer_set for the question.
     * @param {String} categorySid The SID of the category
     * @param {String} question The question.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {String} [description] The description for the question.
     * @param {module:api/FlexV1InsightsQuestionnairesQuestionApi~createInsightsQuestionnairesQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1InsightsQuestionnairesQuestion}
     */
    createInsightsQuestionnairesQuestion(allowNa, answerSetId, categorySid, question, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'allowNa' is set
      if (allowNa === undefined || allowNa === null) {
        throw new Error("Missing the required parameter 'allowNa' when calling createInsightsQuestionnairesQuestion");
      }
      // verify the required parameter 'answerSetId' is set
      if (answerSetId === undefined || answerSetId === null) {
        throw new Error("Missing the required parameter 'answerSetId' when calling createInsightsQuestionnairesQuestion");
      }
      // verify the required parameter 'categorySid' is set
      if (categorySid === undefined || categorySid === null) {
        throw new Error("Missing the required parameter 'categorySid' when calling createInsightsQuestionnairesQuestion");
      }
      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling createInsightsQuestionnairesQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        'AllowNa': allowNa,
        'AnswerSetId': answerSetId,
        'CategorySid': categorySid,
        'Description': opts['description'],
        'Question': question
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1InsightsQuestionnairesQuestion;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInsightsQuestionnairesQuestion operation.
     * @callback module:api/FlexV1InsightsQuestionnairesQuestionApi~deleteInsightsQuestionnairesQuestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} questionSid The SID of the question
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {module:api/FlexV1InsightsQuestionnairesQuestionApi~deleteInsightsQuestionnairesQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInsightsQuestionnairesQuestion(questionSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'questionSid' is set
      if (questionSid === undefined || questionSid === null) {
        throw new Error("Missing the required parameter 'questionSid' when calling deleteInsightsQuestionnairesQuestion");
      }

      let pathParams = {
        'QuestionSid': questionSid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Questions/{QuestionSid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listInsightsQuestionnairesQuestion operation.
     * @callback module:api/FlexV1InsightsQuestionnairesQuestionApi~listInsightsQuestionnairesQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsightsQuestionnairesQuestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To get all the question for the given categories
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {Array.<String>} [categorySid] The list of category SIDs
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/FlexV1InsightsQuestionnairesQuestionApi~listInsightsQuestionnairesQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsightsQuestionnairesQuestionResponse}
     */
    listInsightsQuestionnairesQuestion(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'CategorySid': this.apiClient.buildCollectionParam(opts['categorySid'], 'multi'),
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInsightsQuestionnairesQuestionResponse;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInsightsQuestionnairesQuestion operation.
     * @callback module:api/FlexV1InsightsQuestionnairesQuestionApi~updateInsightsQuestionnairesQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1InsightsQuestionnairesQuestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To update the question
     * @param {String} questionSid The SID of the question
     * @param {Boolean} allowNa The flag to enable for disable NA for answer.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {String} [answerSetId] The answer_set for the question.
     * @param {String} [categorySid] The SID of the category
     * @param {String} [description] The description for the question.
     * @param {String} [question] The question.
     * @param {module:api/FlexV1InsightsQuestionnairesQuestionApi~updateInsightsQuestionnairesQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1InsightsQuestionnairesQuestion}
     */
    updateInsightsQuestionnairesQuestion(questionSid, allowNa, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'questionSid' is set
      if (questionSid === undefined || questionSid === null) {
        throw new Error("Missing the required parameter 'questionSid' when calling updateInsightsQuestionnairesQuestion");
      }
      // verify the required parameter 'allowNa' is set
      if (allowNa === undefined || allowNa === null) {
        throw new Error("Missing the required parameter 'allowNa' when calling updateInsightsQuestionnairesQuestion");
      }

      let pathParams = {
        'QuestionSid': questionSid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        'AllowNa': allowNa,
        'AnswerSetId': opts['answerSetId'],
        'CategorySid': opts['categorySid'],
        'Description': opts['description'],
        'Question': opts['question']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1InsightsQuestionnairesQuestion;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Questions/{QuestionSid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
