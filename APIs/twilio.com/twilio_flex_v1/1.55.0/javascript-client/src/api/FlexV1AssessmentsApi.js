/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FlexV1InsightsAssessments from '../model/FlexV1InsightsAssessments';
import ListInsightsAssessmentsResponse from '../model/ListInsightsAssessmentsResponse';

/**
* FlexV1Assessments service.
* @module api/FlexV1AssessmentsApi
* @version 1.55.0
*/
export default class FlexV1AssessmentsApi {

    /**
    * Constructs a new FlexV1AssessmentsApi. 
    * @alias module:api/FlexV1AssessmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInsightsAssessments operation.
     * @callback module:api/FlexV1AssessmentsApi~createInsightsAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1InsightsAssessments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add assessments against conversation to dynamo db. Used in assessments screen by user. Users can select the questionnaire and pick up answers for each and every question.
     * @param {String} agentId The id of the Agent
     * @param {String} answerId The id of the answer selected by user
     * @param {String} answerText The answer text selected by user
     * @param {String} categoryName The name of the category
     * @param {String} categorySid The SID of the category 
     * @param {String} metricId The question SID selected for assessment
     * @param {String} metricName The question name of the assessment
     * @param {Number} offset The offset of the conversation.
     * @param {String} questionnaireSid Questionnaire SID of the associated question
     * @param {String} segmentId Segment Id of the conversation
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {module:api/FlexV1AssessmentsApi~createInsightsAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1InsightsAssessments}
     */
    createInsightsAssessments(agentId, answerId, answerText, categoryName, categorySid, metricId, metricName, offset, questionnaireSid, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling createInsightsAssessments");
      }
      // verify the required parameter 'answerId' is set
      if (answerId === undefined || answerId === null) {
        throw new Error("Missing the required parameter 'answerId' when calling createInsightsAssessments");
      }
      // verify the required parameter 'answerText' is set
      if (answerText === undefined || answerText === null) {
        throw new Error("Missing the required parameter 'answerText' when calling createInsightsAssessments");
      }
      // verify the required parameter 'categoryName' is set
      if (categoryName === undefined || categoryName === null) {
        throw new Error("Missing the required parameter 'categoryName' when calling createInsightsAssessments");
      }
      // verify the required parameter 'categorySid' is set
      if (categorySid === undefined || categorySid === null) {
        throw new Error("Missing the required parameter 'categorySid' when calling createInsightsAssessments");
      }
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling createInsightsAssessments");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling createInsightsAssessments");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling createInsightsAssessments");
      }
      // verify the required parameter 'questionnaireSid' is set
      if (questionnaireSid === undefined || questionnaireSid === null) {
        throw new Error("Missing the required parameter 'questionnaireSid' when calling createInsightsAssessments");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling createInsightsAssessments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        'AgentId': agentId,
        'AnswerId': answerId,
        'AnswerText': answerText,
        'CategoryName': categoryName,
        'CategorySid': categorySid,
        'MetricId': metricId,
        'MetricName': metricName,
        'Offset': offset,
        'QuestionnaireSid': questionnaireSid,
        'SegmentId': segmentId
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1InsightsAssessments;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Assessments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listInsightsAssessments operation.
     * @callback module:api/FlexV1AssessmentsApi~listInsightsAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsightsAssessmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get assessments done for a conversation by logged in user
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {String} [segmentId] The id of the segment.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/FlexV1AssessmentsApi~listInsightsAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsightsAssessmentsResponse}
     */
    listInsightsAssessments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'SegmentId': opts['segmentId'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInsightsAssessmentsResponse;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInsightsAssessments operation.
     * @callback module:api/FlexV1AssessmentsApi~updateInsightsAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlexV1InsightsAssessments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Assessment assessed earlier
     * @param {String} assessmentSid The SID of the assessment to be modified
     * @param {String} answerId The id of the answer selected by user
     * @param {String} answerText The answer text selected by user
     * @param {Number} offset The offset of the conversation
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The Authorization HTTP request header
     * @param {module:api/FlexV1AssessmentsApi~updateInsightsAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlexV1InsightsAssessments}
     */
    updateInsightsAssessments(assessmentSid, answerId, answerText, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assessmentSid' is set
      if (assessmentSid === undefined || assessmentSid === null) {
        throw new Error("Missing the required parameter 'assessmentSid' when calling updateInsightsAssessments");
      }
      // verify the required parameter 'answerId' is set
      if (answerId === undefined || answerId === null) {
        throw new Error("Missing the required parameter 'answerId' when calling updateInsightsAssessments");
      }
      // verify the required parameter 'answerText' is set
      if (answerText === undefined || answerText === null) {
        throw new Error("Missing the required parameter 'answerText' when calling updateInsightsAssessments");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling updateInsightsAssessments");
      }

      let pathParams = {
        'AssessmentSid': assessmentSid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
        'AnswerId': answerId,
        'AnswerText': answerText,
        'Offset': offset
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FlexV1InsightsAssessments;
      let basePaths = ['https://flex-api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Insights/QualityManagement/Assessments/{AssessmentSid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
