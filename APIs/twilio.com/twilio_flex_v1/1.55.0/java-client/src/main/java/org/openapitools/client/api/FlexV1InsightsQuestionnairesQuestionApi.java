/*
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FlexV1InsightsQuestionnairesQuestion;
import org.openapitools.client.model.ListInsightsQuestionnairesQuestionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlexV1InsightsQuestionnairesQuestionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlexV1InsightsQuestionnairesQuestionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlexV1InsightsQuestionnairesQuestionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInsightsQuestionnairesQuestion
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param answerSetId The answer_set for the question. (required)
     * @param categorySid The SID of the category (required)
     * @param question The question. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param description The description for the question. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInsightsQuestionnairesQuestionCall(Boolean allowNa, String answerSetId, String categorySid, String question, String authorization, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Insights/QualityManagement/Questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowNa != null) {
            localVarFormParams.put("AllowNa", allowNa);
        }

        if (answerSetId != null) {
            localVarFormParams.put("AnswerSetId", answerSetId);
        }

        if (categorySid != null) {
            localVarFormParams.put("CategorySid", categorySid);
        }

        if (description != null) {
            localVarFormParams.put("Description", description);
        }

        if (question != null) {
            localVarFormParams.put("Question", question);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInsightsQuestionnairesQuestionValidateBeforeCall(Boolean allowNa, String answerSetId, String categorySid, String question, String authorization, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'allowNa' is set
        if (allowNa == null) {
            throw new ApiException("Missing the required parameter 'allowNa' when calling createInsightsQuestionnairesQuestion(Async)");
        }

        // verify the required parameter 'answerSetId' is set
        if (answerSetId == null) {
            throw new ApiException("Missing the required parameter 'answerSetId' when calling createInsightsQuestionnairesQuestion(Async)");
        }

        // verify the required parameter 'categorySid' is set
        if (categorySid == null) {
            throw new ApiException("Missing the required parameter 'categorySid' when calling createInsightsQuestionnairesQuestion(Async)");
        }

        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling createInsightsQuestionnairesQuestion(Async)");
        }

        return createInsightsQuestionnairesQuestionCall(allowNa, answerSetId, categorySid, question, authorization, description, _callback);

    }

    /**
     * 
     * To create a question for a Category
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param answerSetId The answer_set for the question. (required)
     * @param categorySid The SID of the category (required)
     * @param question The question. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param description The description for the question. (optional)
     * @return FlexV1InsightsQuestionnairesQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1InsightsQuestionnairesQuestion createInsightsQuestionnairesQuestion(Boolean allowNa, String answerSetId, String categorySid, String question, String authorization, String description) throws ApiException {
        ApiResponse<FlexV1InsightsQuestionnairesQuestion> localVarResp = createInsightsQuestionnairesQuestionWithHttpInfo(allowNa, answerSetId, categorySid, question, authorization, description);
        return localVarResp.getData();
    }

    /**
     * 
     * To create a question for a Category
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param answerSetId The answer_set for the question. (required)
     * @param categorySid The SID of the category (required)
     * @param question The question. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param description The description for the question. (optional)
     * @return ApiResponse&lt;FlexV1InsightsQuestionnairesQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1InsightsQuestionnairesQuestion> createInsightsQuestionnairesQuestionWithHttpInfo(Boolean allowNa, String answerSetId, String categorySid, String question, String authorization, String description) throws ApiException {
        okhttp3.Call localVarCall = createInsightsQuestionnairesQuestionValidateBeforeCall(allowNa, answerSetId, categorySid, question, authorization, description, null);
        Type localVarReturnType = new TypeToken<FlexV1InsightsQuestionnairesQuestion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * To create a question for a Category
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param answerSetId The answer_set for the question. (required)
     * @param categorySid The SID of the category (required)
     * @param question The question. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param description The description for the question. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInsightsQuestionnairesQuestionAsync(Boolean allowNa, String answerSetId, String categorySid, String question, String authorization, String description, final ApiCallback<FlexV1InsightsQuestionnairesQuestion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInsightsQuestionnairesQuestionValidateBeforeCall(allowNa, answerSetId, categorySid, question, authorization, description, _callback);
        Type localVarReturnType = new TypeToken<FlexV1InsightsQuestionnairesQuestion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInsightsQuestionnairesQuestion
     * @param questionSid The SID of the question (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInsightsQuestionnairesQuestionCall(String questionSid, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Insights/QualityManagement/Questions/{QuestionSid}"
            .replace("{" + "QuestionSid" + "}", localVarApiClient.escapeString(questionSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInsightsQuestionnairesQuestionValidateBeforeCall(String questionSid, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'questionSid' is set
        if (questionSid == null) {
            throw new ApiException("Missing the required parameter 'questionSid' when calling deleteInsightsQuestionnairesQuestion(Async)");
        }

        return deleteInsightsQuestionnairesQuestionCall(questionSid, authorization, _callback);

    }

    /**
     * 
     * 
     * @param questionSid The SID of the question (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteInsightsQuestionnairesQuestion(String questionSid, String authorization) throws ApiException {
        deleteInsightsQuestionnairesQuestionWithHttpInfo(questionSid, authorization);
    }

    /**
     * 
     * 
     * @param questionSid The SID of the question (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteInsightsQuestionnairesQuestionWithHttpInfo(String questionSid, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteInsightsQuestionnairesQuestionValidateBeforeCall(questionSid, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param questionSid The SID of the question (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInsightsQuestionnairesQuestionAsync(String questionSid, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInsightsQuestionnairesQuestionValidateBeforeCall(questionSid, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInsightsQuestionnairesQuestion
     * @param authorization The Authorization HTTP request header (optional)
     * @param categorySid The list of category SIDs (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInsightsQuestionnairesQuestionCall(String authorization, List<String> categorySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Insights/QualityManagement/Questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categorySid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CategorySid", categorySid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInsightsQuestionnairesQuestionValidateBeforeCall(String authorization, List<String> categorySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listInsightsQuestionnairesQuestionCall(authorization, categorySid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * To get all the question for the given categories
     * @param authorization The Authorization HTTP request header (optional)
     * @param categorySid The list of category SIDs (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListInsightsQuestionnairesQuestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListInsightsQuestionnairesQuestionResponse listInsightsQuestionnairesQuestion(String authorization, List<String> categorySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListInsightsQuestionnairesQuestionResponse> localVarResp = listInsightsQuestionnairesQuestionWithHttpInfo(authorization, categorySid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * To get all the question for the given categories
     * @param authorization The Authorization HTTP request header (optional)
     * @param categorySid The list of category SIDs (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListInsightsQuestionnairesQuestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInsightsQuestionnairesQuestionResponse> listInsightsQuestionnairesQuestionWithHttpInfo(String authorization, List<String> categorySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listInsightsQuestionnairesQuestionValidateBeforeCall(authorization, categorySid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListInsightsQuestionnairesQuestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * To get all the question for the given categories
     * @param authorization The Authorization HTTP request header (optional)
     * @param categorySid The list of category SIDs (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInsightsQuestionnairesQuestionAsync(String authorization, List<String> categorySid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListInsightsQuestionnairesQuestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInsightsQuestionnairesQuestionValidateBeforeCall(authorization, categorySid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListInsightsQuestionnairesQuestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInsightsQuestionnairesQuestion
     * @param questionSid The SID of the question (required)
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param answerSetId The answer_set for the question. (optional)
     * @param categorySid The SID of the category (optional)
     * @param description The description for the question. (optional)
     * @param question The question. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInsightsQuestionnairesQuestionCall(String questionSid, Boolean allowNa, String authorization, String answerSetId, String categorySid, String description, String question, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Insights/QualityManagement/Questions/{QuestionSid}"
            .replace("{" + "QuestionSid" + "}", localVarApiClient.escapeString(questionSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowNa != null) {
            localVarFormParams.put("AllowNa", allowNa);
        }

        if (answerSetId != null) {
            localVarFormParams.put("AnswerSetId", answerSetId);
        }

        if (categorySid != null) {
            localVarFormParams.put("CategorySid", categorySid);
        }

        if (description != null) {
            localVarFormParams.put("Description", description);
        }

        if (question != null) {
            localVarFormParams.put("Question", question);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInsightsQuestionnairesQuestionValidateBeforeCall(String questionSid, Boolean allowNa, String authorization, String answerSetId, String categorySid, String description, String question, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'questionSid' is set
        if (questionSid == null) {
            throw new ApiException("Missing the required parameter 'questionSid' when calling updateInsightsQuestionnairesQuestion(Async)");
        }

        // verify the required parameter 'allowNa' is set
        if (allowNa == null) {
            throw new ApiException("Missing the required parameter 'allowNa' when calling updateInsightsQuestionnairesQuestion(Async)");
        }

        return updateInsightsQuestionnairesQuestionCall(questionSid, allowNa, authorization, answerSetId, categorySid, description, question, _callback);

    }

    /**
     * 
     * To update the question
     * @param questionSid The SID of the question (required)
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param answerSetId The answer_set for the question. (optional)
     * @param categorySid The SID of the category (optional)
     * @param description The description for the question. (optional)
     * @param question The question. (optional)
     * @return FlexV1InsightsQuestionnairesQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1InsightsQuestionnairesQuestion updateInsightsQuestionnairesQuestion(String questionSid, Boolean allowNa, String authorization, String answerSetId, String categorySid, String description, String question) throws ApiException {
        ApiResponse<FlexV1InsightsQuestionnairesQuestion> localVarResp = updateInsightsQuestionnairesQuestionWithHttpInfo(questionSid, allowNa, authorization, answerSetId, categorySid, description, question);
        return localVarResp.getData();
    }

    /**
     * 
     * To update the question
     * @param questionSid The SID of the question (required)
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param answerSetId The answer_set for the question. (optional)
     * @param categorySid The SID of the category (optional)
     * @param description The description for the question. (optional)
     * @param question The question. (optional)
     * @return ApiResponse&lt;FlexV1InsightsQuestionnairesQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1InsightsQuestionnairesQuestion> updateInsightsQuestionnairesQuestionWithHttpInfo(String questionSid, Boolean allowNa, String authorization, String answerSetId, String categorySid, String description, String question) throws ApiException {
        okhttp3.Call localVarCall = updateInsightsQuestionnairesQuestionValidateBeforeCall(questionSid, allowNa, authorization, answerSetId, categorySid, description, question, null);
        Type localVarReturnType = new TypeToken<FlexV1InsightsQuestionnairesQuestion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * To update the question
     * @param questionSid The SID of the question (required)
     * @param allowNa The flag to enable for disable NA for answer. (required)
     * @param authorization The Authorization HTTP request header (optional)
     * @param answerSetId The answer_set for the question. (optional)
     * @param categorySid The SID of the category (optional)
     * @param description The description for the question. (optional)
     * @param question The question. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInsightsQuestionnairesQuestionAsync(String questionSid, Boolean allowNa, String authorization, String answerSetId, String categorySid, String description, String question, final ApiCallback<FlexV1InsightsQuestionnairesQuestion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInsightsQuestionnairesQuestionValidateBeforeCall(questionSid, allowNa, authorization, answerSetId, categorySid, description, question, _callback);
        Type localVarReturnType = new TypeToken<FlexV1InsightsQuestionnairesQuestion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
