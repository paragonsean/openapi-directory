/*
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FlexV1Channel;
import org.openapitools.client.model.ListChannelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlexV1ChannelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlexV1ChannelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlexV1ChannelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChannel
     * @param chatFriendlyName The chat channel&#39;s friendly name. (required)
     * @param chatUserFriendlyName The chat participant&#39;s friendly name. (required)
     * @param flexFlowSid The SID of the Flex Flow. (required)
     * @param identity The &#x60;identity&#x60; value that uniquely identifies the new resource&#39;s chat User. (required)
     * @param chatUniqueName The chat channel&#39;s unique name. (optional)
     * @param longLived Whether to create the channel as long-lived. (optional)
     * @param preEngagementData The pre-engagement data. (optional)
     * @param target The Target Contact Identity, for example the phone number of an SMS. (optional)
     * @param taskAttributes The Task attributes to be added for the TaskRouter Task. (optional)
     * @param taskSid The SID of the TaskRouter Task. Only valid when integration type is &#x60;task&#x60;. &#x60;null&#x60; for integration types &#x60;studio&#x60; &amp; &#x60;external&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelCall(String chatFriendlyName, String chatUserFriendlyName, String flexFlowSid, String identity, String chatUniqueName, Boolean longLived, String preEngagementData, String target, String taskAttributes, String taskSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chatFriendlyName != null) {
            localVarFormParams.put("ChatFriendlyName", chatFriendlyName);
        }

        if (chatUniqueName != null) {
            localVarFormParams.put("ChatUniqueName", chatUniqueName);
        }

        if (chatUserFriendlyName != null) {
            localVarFormParams.put("ChatUserFriendlyName", chatUserFriendlyName);
        }

        if (flexFlowSid != null) {
            localVarFormParams.put("FlexFlowSid", flexFlowSid);
        }

        if (identity != null) {
            localVarFormParams.put("Identity", identity);
        }

        if (longLived != null) {
            localVarFormParams.put("LongLived", longLived);
        }

        if (preEngagementData != null) {
            localVarFormParams.put("PreEngagementData", preEngagementData);
        }

        if (target != null) {
            localVarFormParams.put("Target", target);
        }

        if (taskAttributes != null) {
            localVarFormParams.put("TaskAttributes", taskAttributes);
        }

        if (taskSid != null) {
            localVarFormParams.put("TaskSid", taskSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(String chatFriendlyName, String chatUserFriendlyName, String flexFlowSid, String identity, String chatUniqueName, Boolean longLived, String preEngagementData, String target, String taskAttributes, String taskSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatFriendlyName' is set
        if (chatFriendlyName == null) {
            throw new ApiException("Missing the required parameter 'chatFriendlyName' when calling createChannel(Async)");
        }

        // verify the required parameter 'chatUserFriendlyName' is set
        if (chatUserFriendlyName == null) {
            throw new ApiException("Missing the required parameter 'chatUserFriendlyName' when calling createChannel(Async)");
        }

        // verify the required parameter 'flexFlowSid' is set
        if (flexFlowSid == null) {
            throw new ApiException("Missing the required parameter 'flexFlowSid' when calling createChannel(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createChannel(Async)");
        }

        return createChannelCall(chatFriendlyName, chatUserFriendlyName, flexFlowSid, identity, chatUniqueName, longLived, preEngagementData, target, taskAttributes, taskSid, _callback);

    }

    /**
     * 
     * 
     * @param chatFriendlyName The chat channel&#39;s friendly name. (required)
     * @param chatUserFriendlyName The chat participant&#39;s friendly name. (required)
     * @param flexFlowSid The SID of the Flex Flow. (required)
     * @param identity The &#x60;identity&#x60; value that uniquely identifies the new resource&#39;s chat User. (required)
     * @param chatUniqueName The chat channel&#39;s unique name. (optional)
     * @param longLived Whether to create the channel as long-lived. (optional)
     * @param preEngagementData The pre-engagement data. (optional)
     * @param target The Target Contact Identity, for example the phone number of an SMS. (optional)
     * @param taskAttributes The Task attributes to be added for the TaskRouter Task. (optional)
     * @param taskSid The SID of the TaskRouter Task. Only valid when integration type is &#x60;task&#x60;. &#x60;null&#x60; for integration types &#x60;studio&#x60; &amp; &#x60;external&#x60; (optional)
     * @return FlexV1Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1Channel createChannel(String chatFriendlyName, String chatUserFriendlyName, String flexFlowSid, String identity, String chatUniqueName, Boolean longLived, String preEngagementData, String target, String taskAttributes, String taskSid) throws ApiException {
        ApiResponse<FlexV1Channel> localVarResp = createChannelWithHttpInfo(chatFriendlyName, chatUserFriendlyName, flexFlowSid, identity, chatUniqueName, longLived, preEngagementData, target, taskAttributes, taskSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param chatFriendlyName The chat channel&#39;s friendly name. (required)
     * @param chatUserFriendlyName The chat participant&#39;s friendly name. (required)
     * @param flexFlowSid The SID of the Flex Flow. (required)
     * @param identity The &#x60;identity&#x60; value that uniquely identifies the new resource&#39;s chat User. (required)
     * @param chatUniqueName The chat channel&#39;s unique name. (optional)
     * @param longLived Whether to create the channel as long-lived. (optional)
     * @param preEngagementData The pre-engagement data. (optional)
     * @param target The Target Contact Identity, for example the phone number of an SMS. (optional)
     * @param taskAttributes The Task attributes to be added for the TaskRouter Task. (optional)
     * @param taskSid The SID of the TaskRouter Task. Only valid when integration type is &#x60;task&#x60;. &#x60;null&#x60; for integration types &#x60;studio&#x60; &amp; &#x60;external&#x60; (optional)
     * @return ApiResponse&lt;FlexV1Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1Channel> createChannelWithHttpInfo(String chatFriendlyName, String chatUserFriendlyName, String flexFlowSid, String identity, String chatUniqueName, Boolean longLived, String preEngagementData, String target, String taskAttributes, String taskSid) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(chatFriendlyName, chatUserFriendlyName, flexFlowSid, identity, chatUniqueName, longLived, preEngagementData, target, taskAttributes, taskSid, null);
        Type localVarReturnType = new TypeToken<FlexV1Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param chatFriendlyName The chat channel&#39;s friendly name. (required)
     * @param chatUserFriendlyName The chat participant&#39;s friendly name. (required)
     * @param flexFlowSid The SID of the Flex Flow. (required)
     * @param identity The &#x60;identity&#x60; value that uniquely identifies the new resource&#39;s chat User. (required)
     * @param chatUniqueName The chat channel&#39;s unique name. (optional)
     * @param longLived Whether to create the channel as long-lived. (optional)
     * @param preEngagementData The pre-engagement data. (optional)
     * @param target The Target Contact Identity, for example the phone number of an SMS. (optional)
     * @param taskAttributes The Task attributes to be added for the TaskRouter Task. (optional)
     * @param taskSid The SID of the TaskRouter Task. Only valid when integration type is &#x60;task&#x60;. &#x60;null&#x60; for integration types &#x60;studio&#x60; &amp; &#x60;external&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelAsync(String chatFriendlyName, String chatUserFriendlyName, String flexFlowSid, String identity, String chatUniqueName, Boolean longLived, String preEngagementData, String target, String taskAttributes, String taskSid, final ApiCallback<FlexV1Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(chatFriendlyName, chatUserFriendlyName, flexFlowSid, identity, chatUniqueName, longLived, preEngagementData, target, taskAttributes, taskSid, _callback);
        Type localVarReturnType = new TypeToken<FlexV1Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannel
     * @param sid The SID of the Flex chat channel resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Channels/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Flex chat channel resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannel(String sid) throws ApiException {
        deleteChannelWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The SID of the Flex chat channel resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Flex chat channel resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchChannel
     * @param sid The SID of the Flex chat channel resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Channels/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchChannelValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchChannel(Async)");
        }

        return fetchChannelCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Flex chat channel resource to fetch. (required)
     * @return FlexV1Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1Channel fetchChannel(String sid) throws ApiException {
        ApiResponse<FlexV1Channel> localVarResp = fetchChannelWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The SID of the Flex chat channel resource to fetch. (required)
     * @return ApiResponse&lt;FlexV1Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1Channel> fetchChannelWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchChannelValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<FlexV1Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Flex chat channel resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelAsync(String sid, final ApiCallback<FlexV1Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchChannelValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<FlexV1Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannel
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listChannelCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelResponse listChannel(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListChannelResponse> localVarResp = listChannelWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelResponse> listChannelWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listChannelValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
