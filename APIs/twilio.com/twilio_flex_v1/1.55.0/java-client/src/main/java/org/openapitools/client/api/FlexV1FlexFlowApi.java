/*
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FlexFlowEnumChannelType;
import org.openapitools.client.model.FlexFlowEnumIntegrationType;
import org.openapitools.client.model.FlexV1FlexFlow;
import org.openapitools.client.model.ListFlexFlowResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlexV1FlexFlowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlexV1FlexFlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlexV1FlexFlowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFlexFlow
     * @param channelType  (required)
     * @param chatServiceSid The SID of the chat service. (required)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (required)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFlexFlowCall(FlexFlowEnumChannelType channelType, String chatServiceSid, String friendlyName, String contactIdentity, Boolean enabled, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/FlexFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelType != null) {
            localVarFormParams.put("ChannelType", channelType);
        }

        if (chatServiceSid != null) {
            localVarFormParams.put("ChatServiceSid", chatServiceSid);
        }

        if (contactIdentity != null) {
            localVarFormParams.put("ContactIdentity", contactIdentity);
        }

        if (enabled != null) {
            localVarFormParams.put("Enabled", enabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (integrationChannel != null) {
            localVarFormParams.put("Integration.Channel", integrationChannel);
        }

        if (integrationCreationOnMessage != null) {
            localVarFormParams.put("Integration.CreationOnMessage", integrationCreationOnMessage);
        }

        if (integrationFlowSid != null) {
            localVarFormParams.put("Integration.FlowSid", integrationFlowSid);
        }

        if (integrationPriority != null) {
            localVarFormParams.put("Integration.Priority", integrationPriority);
        }

        if (integrationRetryCount != null) {
            localVarFormParams.put("Integration.RetryCount", integrationRetryCount);
        }

        if (integrationTimeout != null) {
            localVarFormParams.put("Integration.Timeout", integrationTimeout);
        }

        if (integrationUrl != null) {
            localVarFormParams.put("Integration.Url", integrationUrl);
        }

        if (integrationWorkflowSid != null) {
            localVarFormParams.put("Integration.WorkflowSid", integrationWorkflowSid);
        }

        if (integrationWorkspaceSid != null) {
            localVarFormParams.put("Integration.WorkspaceSid", integrationWorkspaceSid);
        }

        if (integrationType != null) {
            localVarFormParams.put("IntegrationType", integrationType);
        }

        if (janitorEnabled != null) {
            localVarFormParams.put("JanitorEnabled", janitorEnabled);
        }

        if (longLived != null) {
            localVarFormParams.put("LongLived", longLived);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFlexFlowValidateBeforeCall(FlexFlowEnumChannelType channelType, String chatServiceSid, String friendlyName, String contactIdentity, Boolean enabled, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelType' is set
        if (channelType == null) {
            throw new ApiException("Missing the required parameter 'channelType' when calling createFlexFlow(Async)");
        }

        // verify the required parameter 'chatServiceSid' is set
        if (chatServiceSid == null) {
            throw new ApiException("Missing the required parameter 'chatServiceSid' when calling createFlexFlow(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createFlexFlow(Async)");
        }

        return createFlexFlowCall(channelType, chatServiceSid, friendlyName, contactIdentity, enabled, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, _callback);

    }

    /**
     * 
     * 
     * @param channelType  (required)
     * @param chatServiceSid The SID of the chat service. (required)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (required)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @return FlexV1FlexFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1FlexFlow createFlexFlow(FlexFlowEnumChannelType channelType, String chatServiceSid, String friendlyName, String contactIdentity, Boolean enabled, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived) throws ApiException {
        ApiResponse<FlexV1FlexFlow> localVarResp = createFlexFlowWithHttpInfo(channelType, chatServiceSid, friendlyName, contactIdentity, enabled, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param channelType  (required)
     * @param chatServiceSid The SID of the chat service. (required)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (required)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;FlexV1FlexFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1FlexFlow> createFlexFlowWithHttpInfo(FlexFlowEnumChannelType channelType, String chatServiceSid, String friendlyName, String contactIdentity, Boolean enabled, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived) throws ApiException {
        okhttp3.Call localVarCall = createFlexFlowValidateBeforeCall(channelType, chatServiceSid, friendlyName, contactIdentity, enabled, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, null);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param channelType  (required)
     * @param chatServiceSid The SID of the chat service. (required)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (required)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFlexFlowAsync(FlexFlowEnumChannelType channelType, String chatServiceSid, String friendlyName, String contactIdentity, Boolean enabled, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback<FlexV1FlexFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFlexFlowValidateBeforeCall(channelType, chatServiceSid, friendlyName, contactIdentity, enabled, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, _callback);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFlexFlow
     * @param sid The SID of the Flex Flow resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFlexFlowCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/FlexFlows/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFlexFlowValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteFlexFlow(Async)");
        }

        return deleteFlexFlowCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFlexFlow(String sid) throws ApiException {
        deleteFlexFlowWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFlexFlowWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteFlexFlowValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Flex Flow resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFlexFlowAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFlexFlowValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchFlexFlow
     * @param sid The SID of the Flex Flow resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFlexFlowCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/FlexFlows/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchFlexFlowValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchFlexFlow(Async)");
        }

        return fetchFlexFlowCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to fetch. (required)
     * @return FlexV1FlexFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1FlexFlow fetchFlexFlow(String sid) throws ApiException {
        ApiResponse<FlexV1FlexFlow> localVarResp = fetchFlexFlowWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to fetch. (required)
     * @return ApiResponse&lt;FlexV1FlexFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1FlexFlow> fetchFlexFlowWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchFlexFlowValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Flex Flow resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFlexFlowAsync(String sid, final ApiCallback<FlexV1FlexFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchFlexFlowValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFlexFlow
     * @param friendlyName The &#x60;friendly_name&#x60; of the Flex Flow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFlexFlowCall(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/FlexFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFlexFlowValidateBeforeCall(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listFlexFlowCall(friendlyName, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName The &#x60;friendly_name&#x60; of the Flex Flow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListFlexFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFlexFlowResponse listFlexFlow(String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListFlexFlowResponse> localVarResp = listFlexFlowWithHttpInfo(friendlyName, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName The &#x60;friendly_name&#x60; of the Flex Flow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListFlexFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFlexFlowResponse> listFlexFlowWithHttpInfo(String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listFlexFlowValidateBeforeCall(friendlyName, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListFlexFlowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName The &#x60;friendly_name&#x60; of the Flex Flow resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFlexFlowAsync(String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListFlexFlowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFlexFlowValidateBeforeCall(friendlyName, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListFlexFlowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFlexFlow
     * @param sid The SID of the Flex Flow resource to update. (required)
     * @param channelType  (optional)
     * @param chatServiceSid The SID of the chat service. (optional)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFlexFlowCall(String sid, FlexFlowEnumChannelType channelType, String chatServiceSid, String contactIdentity, Boolean enabled, String friendlyName, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://flex-api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/FlexFlows/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelType != null) {
            localVarFormParams.put("ChannelType", channelType);
        }

        if (chatServiceSid != null) {
            localVarFormParams.put("ChatServiceSid", chatServiceSid);
        }

        if (contactIdentity != null) {
            localVarFormParams.put("ContactIdentity", contactIdentity);
        }

        if (enabled != null) {
            localVarFormParams.put("Enabled", enabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (integrationChannel != null) {
            localVarFormParams.put("Integration.Channel", integrationChannel);
        }

        if (integrationCreationOnMessage != null) {
            localVarFormParams.put("Integration.CreationOnMessage", integrationCreationOnMessage);
        }

        if (integrationFlowSid != null) {
            localVarFormParams.put("Integration.FlowSid", integrationFlowSid);
        }

        if (integrationPriority != null) {
            localVarFormParams.put("Integration.Priority", integrationPriority);
        }

        if (integrationRetryCount != null) {
            localVarFormParams.put("Integration.RetryCount", integrationRetryCount);
        }

        if (integrationTimeout != null) {
            localVarFormParams.put("Integration.Timeout", integrationTimeout);
        }

        if (integrationUrl != null) {
            localVarFormParams.put("Integration.Url", integrationUrl);
        }

        if (integrationWorkflowSid != null) {
            localVarFormParams.put("Integration.WorkflowSid", integrationWorkflowSid);
        }

        if (integrationWorkspaceSid != null) {
            localVarFormParams.put("Integration.WorkspaceSid", integrationWorkspaceSid);
        }

        if (integrationType != null) {
            localVarFormParams.put("IntegrationType", integrationType);
        }

        if (janitorEnabled != null) {
            localVarFormParams.put("JanitorEnabled", janitorEnabled);
        }

        if (longLived != null) {
            localVarFormParams.put("LongLived", longLived);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFlexFlowValidateBeforeCall(String sid, FlexFlowEnumChannelType channelType, String chatServiceSid, String contactIdentity, Boolean enabled, String friendlyName, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateFlexFlow(Async)");
        }

        return updateFlexFlowCall(sid, channelType, chatServiceSid, contactIdentity, enabled, friendlyName, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to update. (required)
     * @param channelType  (optional)
     * @param chatServiceSid The SID of the chat service. (optional)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @return FlexV1FlexFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlexV1FlexFlow updateFlexFlow(String sid, FlexFlowEnumChannelType channelType, String chatServiceSid, String contactIdentity, Boolean enabled, String friendlyName, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived) throws ApiException {
        ApiResponse<FlexV1FlexFlow> localVarResp = updateFlexFlowWithHttpInfo(sid, channelType, chatServiceSid, contactIdentity, enabled, friendlyName, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The SID of the Flex Flow resource to update. (required)
     * @param channelType  (optional)
     * @param chatServiceSid The SID of the chat service. (optional)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @return ApiResponse&lt;FlexV1FlexFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlexV1FlexFlow> updateFlexFlowWithHttpInfo(String sid, FlexFlowEnumChannelType channelType, String chatServiceSid, String contactIdentity, Boolean enabled, String friendlyName, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived) throws ApiException {
        okhttp3.Call localVarCall = updateFlexFlowValidateBeforeCall(sid, channelType, chatServiceSid, contactIdentity, enabled, friendlyName, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, null);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Flex Flow resource to update. (required)
     * @param channelType  (optional)
     * @param chatServiceSid The SID of the chat service. (optional)
     * @param contactIdentity The channel contact&#39;s Identity. (optional)
     * @param enabled Whether the new Flex Flow is enabled. (optional)
     * @param friendlyName A descriptive string that you create to describe the Flex Flow resource. (optional)
     * @param integrationChannel The Task Channel SID (TCXXXX) or unique name (e.g., &#x60;sms&#x60;) to use for the Task that will be created. Applicable and required when &#x60;integrationType&#x60; is &#x60;task&#x60;. The default value is &#x60;default&#x60;. (optional)
     * @param integrationCreationOnMessage In the context of outbound messaging, defines whether to create a Task immediately (and therefore reserve the conversation to current agent), or delay Task creation until the customer sends the first response. Set to false to create immediately, true to delay Task creation. This setting is only applicable for outbound messaging. (optional)
     * @param integrationFlowSid The SID of the Studio Flow. Required when &#x60;integrationType&#x60; is &#x60;studio&#x60;. (optional)
     * @param integrationPriority The Task priority of a new Task. The default priority is 0. Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationRetryCount The number of times to retry the Studio Flow or webhook in case of failure. Takes integer values from 0 to 3 with the default being 3. Optional when &#x60;integrationType&#x60; is &#x60;studio&#x60; or &#x60;external&#x60;, not applicable otherwise. (optional)
     * @param integrationTimeout The Task timeout in seconds for a new Task. Default is 86,400 seconds (24 hours). Optional when &#x60;integrationType&#x60; is &#x60;task&#x60;, not applicable otherwise. (optional)
     * @param integrationUrl The URL of the external webhook. Required when &#x60;integrationType&#x60; is &#x60;external&#x60;. (optional)
     * @param integrationWorkflowSid The Workflow SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationWorkspaceSid The Workspace SID for a new Task. Required when &#x60;integrationType&#x60; is &#x60;task&#x60;. (optional)
     * @param integrationType  (optional)
     * @param janitorEnabled When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to &#x60;false&#x60;. (optional)
     * @param longLived When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to &#x60;false&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFlexFlowAsync(String sid, FlexFlowEnumChannelType channelType, String chatServiceSid, String contactIdentity, Boolean enabled, String friendlyName, String integrationChannel, Boolean integrationCreationOnMessage, String integrationFlowSid, Integer integrationPriority, Integer integrationRetryCount, Integer integrationTimeout, URI integrationUrl, String integrationWorkflowSid, String integrationWorkspaceSid, FlexFlowEnumIntegrationType integrationType, Boolean janitorEnabled, Boolean longLived, final ApiCallback<FlexV1FlexFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFlexFlowValidateBeforeCall(sid, channelType, chatServiceSid, contactIdentity, enabled, friendlyName, integrationChannel, integrationCreationOnMessage, integrationFlowSid, integrationPriority, integrationRetryCount, integrationTimeout, integrationUrl, integrationWorkflowSid, integrationWorkspaceSid, integrationType, janitorEnabled, longLived, _callback);
        Type localVarReturnType = new TypeToken<FlexV1FlexFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
