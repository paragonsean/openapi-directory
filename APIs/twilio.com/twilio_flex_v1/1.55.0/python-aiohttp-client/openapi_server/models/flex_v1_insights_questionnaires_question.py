# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FlexV1InsightsQuestionnairesQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, allow_na: bool=None, answer_set: object=None, answer_set_id: str=None, category: object=None, description: str=None, question: str=None, question_sid: str=None, url: str=None, usage: int=None):
        """FlexV1InsightsQuestionnairesQuestion - a model defined in OpenAPI

        :param account_sid: The account_sid of this FlexV1InsightsQuestionnairesQuestion.
        :param allow_na: The allow_na of this FlexV1InsightsQuestionnairesQuestion.
        :param answer_set: The answer_set of this FlexV1InsightsQuestionnairesQuestion.
        :param answer_set_id: The answer_set_id of this FlexV1InsightsQuestionnairesQuestion.
        :param category: The category of this FlexV1InsightsQuestionnairesQuestion.
        :param description: The description of this FlexV1InsightsQuestionnairesQuestion.
        :param question: The question of this FlexV1InsightsQuestionnairesQuestion.
        :param question_sid: The question_sid of this FlexV1InsightsQuestionnairesQuestion.
        :param url: The url of this FlexV1InsightsQuestionnairesQuestion.
        :param usage: The usage of this FlexV1InsightsQuestionnairesQuestion.
        """
        self.openapi_types = {
            'account_sid': str,
            'allow_na': bool,
            'answer_set': object,
            'answer_set_id': str,
            'category': object,
            'description': str,
            'question': str,
            'question_sid': str,
            'url': str,
            'usage': int
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'allow_na': 'allow_na',
            'answer_set': 'answer_set',
            'answer_set_id': 'answer_set_id',
            'category': 'category',
            'description': 'description',
            'question': 'question',
            'question_sid': 'question_sid',
            'url': 'url',
            'usage': 'usage'
        }

        self._account_sid = account_sid
        self._allow_na = allow_na
        self._answer_set = answer_set
        self._answer_set_id = answer_set_id
        self._category = category
        self._description = description
        self._question = question
        self._question_sid = question_sid
        self._url = url
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexV1InsightsQuestionnairesQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flex.v1.insights_questionnaires_question of this FlexV1InsightsQuestionnairesQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this FlexV1InsightsQuestionnairesQuestion.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :return: The account_sid of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this FlexV1InsightsQuestionnairesQuestion.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :param account_sid: The account_sid of this FlexV1InsightsQuestionnairesQuestion.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def allow_na(self):
        """Gets the allow_na of this FlexV1InsightsQuestionnairesQuestion.

        The flag  to enable for disable NA for answer.

        :return: The allow_na of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: bool
        """
        return self._allow_na

    @allow_na.setter
    def allow_na(self, allow_na):
        """Sets the allow_na of this FlexV1InsightsQuestionnairesQuestion.

        The flag  to enable for disable NA for answer.

        :param allow_na: The allow_na of this FlexV1InsightsQuestionnairesQuestion.
        :type allow_na: bool
        """

        self._allow_na = allow_na

    @property
    def answer_set(self):
        """Gets the answer_set of this FlexV1InsightsQuestionnairesQuestion.

        Set of answers for the question

        :return: The answer_set of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: object
        """
        return self._answer_set

    @answer_set.setter
    def answer_set(self, answer_set):
        """Sets the answer_set of this FlexV1InsightsQuestionnairesQuestion.

        Set of answers for the question

        :param answer_set: The answer_set of this FlexV1InsightsQuestionnairesQuestion.
        :type answer_set: object
        """

        self._answer_set = answer_set

    @property
    def answer_set_id(self):
        """Gets the answer_set_id of this FlexV1InsightsQuestionnairesQuestion.

        The answer_set for the question.

        :return: The answer_set_id of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._answer_set_id

    @answer_set_id.setter
    def answer_set_id(self, answer_set_id):
        """Sets the answer_set_id of this FlexV1InsightsQuestionnairesQuestion.

        The answer_set for the question.

        :param answer_set_id: The answer_set_id of this FlexV1InsightsQuestionnairesQuestion.
        :type answer_set_id: str
        """

        self._answer_set_id = answer_set_id

    @property
    def category(self):
        """Gets the category of this FlexV1InsightsQuestionnairesQuestion.

        The Category for the question.

        :return: The category of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: object
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FlexV1InsightsQuestionnairesQuestion.

        The Category for the question.

        :param category: The category of this FlexV1InsightsQuestionnairesQuestion.
        :type category: object
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this FlexV1InsightsQuestionnairesQuestion.

        The description for the question.

        :return: The description of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FlexV1InsightsQuestionnairesQuestion.

        The description for the question.

        :param description: The description of this FlexV1InsightsQuestionnairesQuestion.
        :type description: str
        """

        self._description = description

    @property
    def question(self):
        """Gets the question of this FlexV1InsightsQuestionnairesQuestion.

        The question.

        :return: The question of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this FlexV1InsightsQuestionnairesQuestion.

        The question.

        :param question: The question of this FlexV1InsightsQuestionnairesQuestion.
        :type question: str
        """

        self._question = question

    @property
    def question_sid(self):
        """Gets the question_sid of this FlexV1InsightsQuestionnairesQuestion.

        The SID of the question

        :return: The question_sid of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._question_sid

    @question_sid.setter
    def question_sid(self, question_sid):
        """Sets the question_sid of this FlexV1InsightsQuestionnairesQuestion.

        The SID of the question

        :param question_sid: The question_sid of this FlexV1InsightsQuestionnairesQuestion.
        :type question_sid: str
        """
        if question_sid is not None and len(question_sid) > 34:
            raise ValueError("Invalid value for `question_sid`, length must be less than or equal to `34`")
        if question_sid is not None and len(question_sid) < 34:
            raise ValueError("Invalid value for `question_sid`, length must be greater than or equal to `34`")
        if question_sid is not None and not re.search(r'^GE[0-9a-fA-F]{32}$', question_sid):
            raise ValueError("Invalid value for `question_sid`, must be a follow pattern or equal to `/^GE[0-9a-fA-F]{32}$/`")

        self._question_sid = question_sid

    @property
    def url(self):
        """Gets the url of this FlexV1InsightsQuestionnairesQuestion.


        :return: The url of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FlexV1InsightsQuestionnairesQuestion.


        :param url: The url of this FlexV1InsightsQuestionnairesQuestion.
        :type url: str
        """

        self._url = url

    @property
    def usage(self):
        """Gets the usage of this FlexV1InsightsQuestionnairesQuestion.

        Integer value that tells a particular question is used by how many questionnaires

        :return: The usage of this FlexV1InsightsQuestionnairesQuestion.
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this FlexV1InsightsQuestionnairesQuestion.

        Integer value that tells a particular question is used by how many questionnaires

        :param usage: The usage of this FlexV1InsightsQuestionnairesQuestion.
        :type usage: int
        """

        self._usage = usage
