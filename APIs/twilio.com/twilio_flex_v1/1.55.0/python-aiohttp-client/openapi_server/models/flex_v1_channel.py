# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FlexV1Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, flex_flow_sid: str=None, sid: str=None, task_sid: str=None, url: str=None, user_sid: str=None):
        """FlexV1Channel - a model defined in OpenAPI

        :param account_sid: The account_sid of this FlexV1Channel.
        :param date_created: The date_created of this FlexV1Channel.
        :param date_updated: The date_updated of this FlexV1Channel.
        :param flex_flow_sid: The flex_flow_sid of this FlexV1Channel.
        :param sid: The sid of this FlexV1Channel.
        :param task_sid: The task_sid of this FlexV1Channel.
        :param url: The url of this FlexV1Channel.
        :param user_sid: The user_sid of this FlexV1Channel.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'flex_flow_sid': str,
            'sid': str,
            'task_sid': str,
            'url': str,
            'user_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'flex_flow_sid': 'flex_flow_sid',
            'sid': 'sid',
            'task_sid': 'task_sid',
            'url': 'url',
            'user_sid': 'user_sid'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._flex_flow_sid = flex_flow_sid
        self._sid = sid
        self._task_sid = task_sid
        self._url = url
        self._user_sid = user_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexV1Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flex.v1.channel of this FlexV1Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this FlexV1Channel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Channel resource and owns this Workflow.

        :return: The account_sid of this FlexV1Channel.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this FlexV1Channel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Channel resource and owns this Workflow.

        :param account_sid: The account_sid of this FlexV1Channel.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this FlexV1Channel.

        The date and time in GMT when the Flex chat channel was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this FlexV1Channel.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this FlexV1Channel.

        The date and time in GMT when the Flex chat channel was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this FlexV1Channel.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this FlexV1Channel.

        The date and time in GMT when the Flex chat channel was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this FlexV1Channel.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this FlexV1Channel.

        The date and time in GMT when the Flex chat channel was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this FlexV1Channel.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def flex_flow_sid(self):
        """Gets the flex_flow_sid of this FlexV1Channel.

        The SID of the Flex Flow.

        :return: The flex_flow_sid of this FlexV1Channel.
        :rtype: str
        """
        return self._flex_flow_sid

    @flex_flow_sid.setter
    def flex_flow_sid(self, flex_flow_sid):
        """Sets the flex_flow_sid of this FlexV1Channel.

        The SID of the Flex Flow.

        :param flex_flow_sid: The flex_flow_sid of this FlexV1Channel.
        :type flex_flow_sid: str
        """
        if flex_flow_sid is not None and len(flex_flow_sid) > 34:
            raise ValueError("Invalid value for `flex_flow_sid`, length must be less than or equal to `34`")
        if flex_flow_sid is not None and len(flex_flow_sid) < 34:
            raise ValueError("Invalid value for `flex_flow_sid`, length must be greater than or equal to `34`")
        if flex_flow_sid is not None and not re.search(r'^FO[0-9a-fA-F]{32}$', flex_flow_sid):
            raise ValueError("Invalid value for `flex_flow_sid`, must be a follow pattern or equal to `/^FO[0-9a-fA-F]{32}$/`")

        self._flex_flow_sid = flex_flow_sid

    @property
    def sid(self):
        """Gets the sid of this FlexV1Channel.

        The unique string that we created to identify the Channel resource.

        :return: The sid of this FlexV1Channel.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this FlexV1Channel.

        The unique string that we created to identify the Channel resource.

        :param sid: The sid of this FlexV1Channel.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def task_sid(self):
        """Gets the task_sid of this FlexV1Channel.

        The SID of the TaskRouter Task. Only valid when integration type is `task`. `null` for integration types `studio` & `external`

        :return: The task_sid of this FlexV1Channel.
        :rtype: str
        """
        return self._task_sid

    @task_sid.setter
    def task_sid(self, task_sid):
        """Sets the task_sid of this FlexV1Channel.

        The SID of the TaskRouter Task. Only valid when integration type is `task`. `null` for integration types `studio` & `external`

        :param task_sid: The task_sid of this FlexV1Channel.
        :type task_sid: str
        """
        if task_sid is not None and len(task_sid) > 34:
            raise ValueError("Invalid value for `task_sid`, length must be less than or equal to `34`")
        if task_sid is not None and len(task_sid) < 34:
            raise ValueError("Invalid value for `task_sid`, length must be greater than or equal to `34`")
        if task_sid is not None and not re.search(r'^WT[0-9a-fA-F]{32}$', task_sid):
            raise ValueError("Invalid value for `task_sid`, must be a follow pattern or equal to `/^WT[0-9a-fA-F]{32}$/`")

        self._task_sid = task_sid

    @property
    def url(self):
        """Gets the url of this FlexV1Channel.

        The absolute URL of the Flex chat channel resource.

        :return: The url of this FlexV1Channel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FlexV1Channel.

        The absolute URL of the Flex chat channel resource.

        :param url: The url of this FlexV1Channel.
        :type url: str
        """

        self._url = url

    @property
    def user_sid(self):
        """Gets the user_sid of this FlexV1Channel.

        The SID of the chat user.

        :return: The user_sid of this FlexV1Channel.
        :rtype: str
        """
        return self._user_sid

    @user_sid.setter
    def user_sid(self, user_sid):
        """Sets the user_sid of this FlexV1Channel.

        The SID of the chat user.

        :param user_sid: The user_sid of this FlexV1Channel.
        :type user_sid: str
        """
        if user_sid is not None and len(user_sid) > 34:
            raise ValueError("Invalid value for `user_sid`, length must be less than or equal to `34`")
        if user_sid is not None and len(user_sid) < 34:
            raise ValueError("Invalid value for `user_sid`, length must be greater than or equal to `34`")
        if user_sid is not None and not re.search(r'^US[0-9a-fA-F]{32}$', user_sid):
            raise ValueError("Invalid value for `user_sid`, must be a follow pattern or equal to `/^US[0-9a-fA-F]{32}$/`")

        self._user_sid = user_sid
