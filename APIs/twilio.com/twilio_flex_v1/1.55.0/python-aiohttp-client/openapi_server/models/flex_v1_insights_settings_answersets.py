# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FlexV1InsightsSettingsAnswersets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, answer_set_categories: object=None, answer_sets: object=None, not_applicable: object=None, url: str=None):
        """FlexV1InsightsSettingsAnswersets - a model defined in OpenAPI

        :param account_sid: The account_sid of this FlexV1InsightsSettingsAnswersets.
        :param answer_set_categories: The answer_set_categories of this FlexV1InsightsSettingsAnswersets.
        :param answer_sets: The answer_sets of this FlexV1InsightsSettingsAnswersets.
        :param not_applicable: The not_applicable of this FlexV1InsightsSettingsAnswersets.
        :param url: The url of this FlexV1InsightsSettingsAnswersets.
        """
        self.openapi_types = {
            'account_sid': str,
            'answer_set_categories': object,
            'answer_sets': object,
            'not_applicable': object,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'answer_set_categories': 'answer_set_categories',
            'answer_sets': 'answer_sets',
            'not_applicable': 'not_applicable',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._answer_set_categories = answer_set_categories
        self._answer_sets = answer_sets
        self._not_applicable = not_applicable
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexV1InsightsSettingsAnswersets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flex.v1.insights_settings_answersets of this FlexV1InsightsSettingsAnswersets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this FlexV1InsightsSettingsAnswersets.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :return: The account_sid of this FlexV1InsightsSettingsAnswersets.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this FlexV1InsightsSettingsAnswersets.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :param account_sid: The account_sid of this FlexV1InsightsSettingsAnswersets.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def answer_set_categories(self):
        """Gets the answer_set_categories of this FlexV1InsightsSettingsAnswersets.

        The list of answer set categories

        :return: The answer_set_categories of this FlexV1InsightsSettingsAnswersets.
        :rtype: object
        """
        return self._answer_set_categories

    @answer_set_categories.setter
    def answer_set_categories(self, answer_set_categories):
        """Sets the answer_set_categories of this FlexV1InsightsSettingsAnswersets.

        The list of answer set categories

        :param answer_set_categories: The answer_set_categories of this FlexV1InsightsSettingsAnswersets.
        :type answer_set_categories: object
        """

        self._answer_set_categories = answer_set_categories

    @property
    def answer_sets(self):
        """Gets the answer_sets of this FlexV1InsightsSettingsAnswersets.

        The lis of answer sets

        :return: The answer_sets of this FlexV1InsightsSettingsAnswersets.
        :rtype: object
        """
        return self._answer_sets

    @answer_sets.setter
    def answer_sets(self, answer_sets):
        """Sets the answer_sets of this FlexV1InsightsSettingsAnswersets.

        The lis of answer sets

        :param answer_sets: The answer_sets of this FlexV1InsightsSettingsAnswersets.
        :type answer_sets: object
        """

        self._answer_sets = answer_sets

    @property
    def not_applicable(self):
        """Gets the not_applicable of this FlexV1InsightsSettingsAnswersets.

        The details for not applicable answer set

        :return: The not_applicable of this FlexV1InsightsSettingsAnswersets.
        :rtype: object
        """
        return self._not_applicable

    @not_applicable.setter
    def not_applicable(self, not_applicable):
        """Sets the not_applicable of this FlexV1InsightsSettingsAnswersets.

        The details for not applicable answer set

        :param not_applicable: The not_applicable of this FlexV1InsightsSettingsAnswersets.
        :type not_applicable: object
        """

        self._not_applicable = not_applicable

    @property
    def url(self):
        """Gets the url of this FlexV1InsightsSettingsAnswersets.


        :return: The url of this FlexV1InsightsSettingsAnswersets.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FlexV1InsightsSettingsAnswersets.


        :param url: The url of this FlexV1InsightsSettingsAnswersets.
        :type url: str
        """

        self._url = url
