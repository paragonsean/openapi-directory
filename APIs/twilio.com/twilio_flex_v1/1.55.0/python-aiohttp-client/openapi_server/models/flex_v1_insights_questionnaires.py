# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FlexV1InsightsQuestionnaires(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, active: bool=None, description: str=None, name: str=None, questionnaire_sid: str=None, questions: List[object]=None, url: str=None):
        """FlexV1InsightsQuestionnaires - a model defined in OpenAPI

        :param account_sid: The account_sid of this FlexV1InsightsQuestionnaires.
        :param active: The active of this FlexV1InsightsQuestionnaires.
        :param description: The description of this FlexV1InsightsQuestionnaires.
        :param name: The name of this FlexV1InsightsQuestionnaires.
        :param questionnaire_sid: The questionnaire_sid of this FlexV1InsightsQuestionnaires.
        :param questions: The questions of this FlexV1InsightsQuestionnaires.
        :param url: The url of this FlexV1InsightsQuestionnaires.
        """
        self.openapi_types = {
            'account_sid': str,
            'active': bool,
            'description': str,
            'name': str,
            'questionnaire_sid': str,
            'questions': List[object],
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'active': 'active',
            'description': 'description',
            'name': 'name',
            'questionnaire_sid': 'questionnaire_sid',
            'questions': 'questions',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._active = active
        self._description = description
        self._name = name
        self._questionnaire_sid = questionnaire_sid
        self._questions = questions
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlexV1InsightsQuestionnaires':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flex.v1.insights_questionnaires of this FlexV1InsightsQuestionnaires.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this FlexV1InsightsQuestionnaires.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :return: The account_sid of this FlexV1InsightsQuestionnaires.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this FlexV1InsightsQuestionnaires.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.

        :param account_sid: The account_sid of this FlexV1InsightsQuestionnaires.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def active(self):
        """Gets the active of this FlexV1InsightsQuestionnaires.

        The flag to enable or disable questionnaire

        :return: The active of this FlexV1InsightsQuestionnaires.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this FlexV1InsightsQuestionnaires.

        The flag to enable or disable questionnaire

        :param active: The active of this FlexV1InsightsQuestionnaires.
        :type active: bool
        """

        self._active = active

    @property
    def description(self):
        """Gets the description of this FlexV1InsightsQuestionnaires.

        The description of this questionnaire

        :return: The description of this FlexV1InsightsQuestionnaires.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FlexV1InsightsQuestionnaires.

        The description of this questionnaire

        :param description: The description of this FlexV1InsightsQuestionnaires.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this FlexV1InsightsQuestionnaires.

        The name of this category.

        :return: The name of this FlexV1InsightsQuestionnaires.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlexV1InsightsQuestionnaires.

        The name of this category.

        :param name: The name of this FlexV1InsightsQuestionnaires.
        :type name: str
        """

        self._name = name

    @property
    def questionnaire_sid(self):
        """Gets the questionnaire_sid of this FlexV1InsightsQuestionnaires.

        The sid of this questionnaire

        :return: The questionnaire_sid of this FlexV1InsightsQuestionnaires.
        :rtype: str
        """
        return self._questionnaire_sid

    @questionnaire_sid.setter
    def questionnaire_sid(self, questionnaire_sid):
        """Sets the questionnaire_sid of this FlexV1InsightsQuestionnaires.

        The sid of this questionnaire

        :param questionnaire_sid: The questionnaire_sid of this FlexV1InsightsQuestionnaires.
        :type questionnaire_sid: str
        """
        if questionnaire_sid is not None and len(questionnaire_sid) > 34:
            raise ValueError("Invalid value for `questionnaire_sid`, length must be less than or equal to `34`")
        if questionnaire_sid is not None and len(questionnaire_sid) < 34:
            raise ValueError("Invalid value for `questionnaire_sid`, length must be greater than or equal to `34`")
        if questionnaire_sid is not None and not re.search(r'^GM[0-9a-fA-F]{32}$', questionnaire_sid):
            raise ValueError("Invalid value for `questionnaire_sid`, must be a follow pattern or equal to `/^GM[0-9a-fA-F]{32}$/`")

        self._questionnaire_sid = questionnaire_sid

    @property
    def questions(self):
        """Gets the questions of this FlexV1InsightsQuestionnaires.

        The list of questions with category for a questionnaire

        :return: The questions of this FlexV1InsightsQuestionnaires.
        :rtype: List[object]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this FlexV1InsightsQuestionnaires.

        The list of questions with category for a questionnaire

        :param questions: The questions of this FlexV1InsightsQuestionnaires.
        :type questions: List[object]
        """

        self._questions = questions

    @property
    def url(self):
        """Gets the url of this FlexV1InsightsQuestionnaires.


        :return: The url of this FlexV1InsightsQuestionnaires.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FlexV1InsightsQuestionnaires.


        :param url: The url of this FlexV1InsightsQuestionnaires.
        :type url: str
        """

        self._url = url
