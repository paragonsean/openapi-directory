/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlex_v1_insights_questionnaires_question.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlex_v1_insights_questionnaires_question::OAIFlex_v1_insights_questionnaires_question(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlex_v1_insights_questionnaires_question::OAIFlex_v1_insights_questionnaires_question() {
    this->initializeModel();
}

OAIFlex_v1_insights_questionnaires_question::~OAIFlex_v1_insights_questionnaires_question() {}

void OAIFlex_v1_insights_questionnaires_question::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_allow_na_isSet = false;
    m_allow_na_isValid = false;

    m_answer_set_isSet = false;
    m_answer_set_isValid = false;

    m_answer_set_id_isSet = false;
    m_answer_set_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_question_sid_isSet = false;
    m_question_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIFlex_v1_insights_questionnaires_question::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlex_v1_insights_questionnaires_question::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_allow_na_isValid = ::OpenAPI::fromJsonValue(m_allow_na, json[QString("allow_na")]);
    m_allow_na_isSet = !json[QString("allow_na")].isNull() && m_allow_na_isValid;

    m_answer_set_isValid = ::OpenAPI::fromJsonValue(m_answer_set, json[QString("answer_set")]);
    m_answer_set_isSet = !json[QString("answer_set")].isNull() && m_answer_set_isValid;

    m_answer_set_id_isValid = ::OpenAPI::fromJsonValue(m_answer_set_id, json[QString("answer_set_id")]);
    m_answer_set_id_isSet = !json[QString("answer_set_id")].isNull() && m_answer_set_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_question_sid_isValid = ::OpenAPI::fromJsonValue(m_question_sid, json[QString("question_sid")]);
    m_question_sid_isSet = !json[QString("question_sid")].isNull() && m_question_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlex_v1_insights_questionnaires_question::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_allow_na_isSet) {
        obj.insert(QString("allow_na"), ::OpenAPI::toJsonValue(m_allow_na));
    }
    if (m_answer_set_isSet) {
        obj.insert(QString("answer_set"), ::OpenAPI::toJsonValue(m_answer_set));
    }
    if (m_answer_set_id_isSet) {
        obj.insert(QString("answer_set_id"), ::OpenAPI::toJsonValue(m_answer_set_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_question_sid_isSet) {
        obj.insert(QString("question_sid"), ::OpenAPI::toJsonValue(m_question_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIFlex_v1_insights_questionnaires_question::getAccountSid() const {
    return m_account_sid;
}
void OAIFlex_v1_insights_questionnaires_question::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIFlex_v1_insights_questionnaires_question::isAllowNa() const {
    return m_allow_na;
}
void OAIFlex_v1_insights_questionnaires_question::setAllowNa(const bool &allow_na) {
    m_allow_na = allow_na;
    m_allow_na_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_allow_na_Set() const{
    return m_allow_na_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_allow_na_Valid() const{
    return m_allow_na_isValid;
}

QJsonValue OAIFlex_v1_insights_questionnaires_question::getAnswerSet() const {
    return m_answer_set;
}
void OAIFlex_v1_insights_questionnaires_question::setAnswerSet(const QJsonValue &answer_set) {
    m_answer_set = answer_set;
    m_answer_set_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_answer_set_Set() const{
    return m_answer_set_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_answer_set_Valid() const{
    return m_answer_set_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::getAnswerSetId() const {
    return m_answer_set_id;
}
void OAIFlex_v1_insights_questionnaires_question::setAnswerSetId(const QString &answer_set_id) {
    m_answer_set_id = answer_set_id;
    m_answer_set_id_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_answer_set_id_Set() const{
    return m_answer_set_id_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_answer_set_id_Valid() const{
    return m_answer_set_id_isValid;
}

QJsonValue OAIFlex_v1_insights_questionnaires_question::getCategory() const {
    return m_category;
}
void OAIFlex_v1_insights_questionnaires_question::setCategory(const QJsonValue &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::getDescription() const {
    return m_description;
}
void OAIFlex_v1_insights_questionnaires_question::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::getQuestion() const {
    return m_question;
}
void OAIFlex_v1_insights_questionnaires_question::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_question_Set() const{
    return m_question_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_question_Valid() const{
    return m_question_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::getQuestionSid() const {
    return m_question_sid;
}
void OAIFlex_v1_insights_questionnaires_question::setQuestionSid(const QString &question_sid) {
    m_question_sid = question_sid;
    m_question_sid_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_question_sid_Set() const{
    return m_question_sid_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_question_sid_Valid() const{
    return m_question_sid_isValid;
}

QString OAIFlex_v1_insights_questionnaires_question::getUrl() const {
    return m_url;
}
void OAIFlex_v1_insights_questionnaires_question::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIFlex_v1_insights_questionnaires_question::getUsage() const {
    return m_usage;
}
void OAIFlex_v1_insights_questionnaires_question::setUsage(const qint32 &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIFlex_v1_insights_questionnaires_question::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIFlex_v1_insights_questionnaires_question::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIFlex_v1_insights_questionnaires_question::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_na_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlex_v1_insights_questionnaires_question::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
