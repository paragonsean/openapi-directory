/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlexV1InsightsQuestionnairesApi_H
#define OAI_OAIFlexV1InsightsQuestionnairesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlex_v1_insights_questionnaires.h"
#include "OAIListInsightsQuestionnairesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlexV1InsightsQuestionnairesApi : public QObject {
    Q_OBJECT

public:
    OAIFlexV1InsightsQuestionnairesApi(const int timeOut = 0);
    ~OAIFlexV1InsightsQuestionnairesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  active bool [optional]
    * @param[in]  description QString [optional]
    * @param[in]  question_sids QList<QString> [optional]
    */
    virtual void createInsightsQuestionnaires(const QString &name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &question_sids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  questionnaire_sid QString [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void deleteInsightsQuestionnaires(const QString &questionnaire_sid, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  questionnaire_sid QString [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void fetchInsightsQuestionnaires(const QString &questionnaire_sid, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  include_inactive bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listInsightsQuestionnaires(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_inactive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  questionnaire_sid QString [required]
    * @param[in]  active bool [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  question_sids QList<QString> [optional]
    */
    virtual void updateInsightsQuestionnaires(const QString &questionnaire_sid, const bool &active, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &question_sids = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createInsightsQuestionnairesCallback(OAIHttpRequestWorker *worker);
    void deleteInsightsQuestionnairesCallback(OAIHttpRequestWorker *worker);
    void fetchInsightsQuestionnairesCallback(OAIHttpRequestWorker *worker);
    void listInsightsQuestionnairesCallback(OAIHttpRequestWorker *worker);
    void updateInsightsQuestionnairesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createInsightsQuestionnairesSignal(OAIFlex_v1_insights_questionnaires summary);
    void deleteInsightsQuestionnairesSignal();
    void fetchInsightsQuestionnairesSignal(OAIFlex_v1_insights_questionnaires summary);
    void listInsightsQuestionnairesSignal(OAIListInsightsQuestionnairesResponse summary);
    void updateInsightsQuestionnairesSignal(OAIFlex_v1_insights_questionnaires summary);


    void createInsightsQuestionnairesSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_questionnaires summary);
    void deleteInsightsQuestionnairesSignalFull(OAIHttpRequestWorker *worker);
    void fetchInsightsQuestionnairesSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_questionnaires summary);
    void listInsightsQuestionnairesSignalFull(OAIHttpRequestWorker *worker, OAIListInsightsQuestionnairesResponse summary);
    void updateInsightsQuestionnairesSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_questionnaires summary);

    Q_DECL_DEPRECATED_X("Use createInsightsQuestionnairesSignalError() instead")
    void createInsightsQuestionnairesSignalE(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsQuestionnairesSignalError(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInsightsQuestionnairesSignalError() instead")
    void deleteInsightsQuestionnairesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInsightsQuestionnairesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchInsightsQuestionnairesSignalError() instead")
    void fetchInsightsQuestionnairesSignalE(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchInsightsQuestionnairesSignalError(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsQuestionnairesSignalError() instead")
    void listInsightsQuestionnairesSignalE(OAIListInsightsQuestionnairesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsQuestionnairesSignalError(OAIListInsightsQuestionnairesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsQuestionnairesSignalError() instead")
    void updateInsightsQuestionnairesSignalE(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsQuestionnairesSignalError(OAIFlex_v1_insights_questionnaires summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createInsightsQuestionnairesSignalErrorFull() instead")
    void createInsightsQuestionnairesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsQuestionnairesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInsightsQuestionnairesSignalErrorFull() instead")
    void deleteInsightsQuestionnairesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInsightsQuestionnairesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchInsightsQuestionnairesSignalErrorFull() instead")
    void fetchInsightsQuestionnairesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchInsightsQuestionnairesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsQuestionnairesSignalErrorFull() instead")
    void listInsightsQuestionnairesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsQuestionnairesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsQuestionnairesSignalErrorFull() instead")
    void updateInsightsQuestionnairesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsQuestionnairesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
