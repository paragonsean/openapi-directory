/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlex_v1_insights_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlex_v1_insights_session::OAIFlex_v1_insights_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlex_v1_insights_session::OAIFlex_v1_insights_session() {
    this->initializeModel();
}

OAIFlex_v1_insights_session::~OAIFlex_v1_insights_session() {}

void OAIFlex_v1_insights_session::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_session_expiry_isSet = false;
    m_session_expiry_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIFlex_v1_insights_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlex_v1_insights_session::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_session_expiry_isValid = ::OpenAPI::fromJsonValue(m_session_expiry, json[QString("session_expiry")]);
    m_session_expiry_isSet = !json[QString("session_expiry")].isNull() && m_session_expiry_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspace_id")]);
    m_workspace_id_isSet = !json[QString("workspace_id")].isNull() && m_workspace_id_isValid;
}

QString OAIFlex_v1_insights_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlex_v1_insights_session::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_session_expiry_isSet) {
        obj.insert(QString("session_expiry"), ::OpenAPI::toJsonValue(m_session_expiry));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspace_id"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIFlex_v1_insights_session::getBaseUrl() const {
    return m_base_url;
}
void OAIFlex_v1_insights_session::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIFlex_v1_insights_session::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIFlex_v1_insights_session::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIFlex_v1_insights_session::getSessionExpiry() const {
    return m_session_expiry;
}
void OAIFlex_v1_insights_session::setSessionExpiry(const QString &session_expiry) {
    m_session_expiry = session_expiry;
    m_session_expiry_isSet = true;
}

bool OAIFlex_v1_insights_session::is_session_expiry_Set() const{
    return m_session_expiry_isSet;
}

bool OAIFlex_v1_insights_session::is_session_expiry_Valid() const{
    return m_session_expiry_isValid;
}

QString OAIFlex_v1_insights_session::getSessionId() const {
    return m_session_id;
}
void OAIFlex_v1_insights_session::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIFlex_v1_insights_session::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIFlex_v1_insights_session::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIFlex_v1_insights_session::getUrl() const {
    return m_url;
}
void OAIFlex_v1_insights_session::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFlex_v1_insights_session::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFlex_v1_insights_session::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIFlex_v1_insights_session::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIFlex_v1_insights_session::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIFlex_v1_insights_session::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIFlex_v1_insights_session::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIFlex_v1_insights_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlex_v1_insights_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
