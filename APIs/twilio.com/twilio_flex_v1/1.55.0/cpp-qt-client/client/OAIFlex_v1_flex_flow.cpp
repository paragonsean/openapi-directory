/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlex_v1_flex_flow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlex_v1_flex_flow::OAIFlex_v1_flex_flow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlex_v1_flex_flow::OAIFlex_v1_flex_flow() {
    this->initializeModel();
}

OAIFlex_v1_flex_flow::~OAIFlex_v1_flex_flow() {}

void OAIFlex_v1_flex_flow::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_chat_service_sid_isSet = false;
    m_chat_service_sid_isValid = false;

    m_contact_identity_isSet = false;
    m_contact_identity_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_integration_isSet = false;
    m_integration_isValid = false;

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_janitor_enabled_isSet = false;
    m_janitor_enabled_isValid = false;

    m_long_lived_isSet = false;
    m_long_lived_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFlex_v1_flex_flow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlex_v1_flex_flow::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_chat_service_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_sid, json[QString("chat_service_sid")]);
    m_chat_service_sid_isSet = !json[QString("chat_service_sid")].isNull() && m_chat_service_sid_isValid;

    m_contact_identity_isValid = ::OpenAPI::fromJsonValue(m_contact_identity, json[QString("contact_identity")]);
    m_contact_identity_isSet = !json[QString("contact_identity")].isNull() && m_contact_identity_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_integration_isValid = ::OpenAPI::fromJsonValue(m_integration, json[QString("integration")]);
    m_integration_isSet = !json[QString("integration")].isNull() && m_integration_isValid;

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("integration_type")]);
    m_integration_type_isSet = !json[QString("integration_type")].isNull() && m_integration_type_isValid;

    m_janitor_enabled_isValid = ::OpenAPI::fromJsonValue(m_janitor_enabled, json[QString("janitor_enabled")]);
    m_janitor_enabled_isSet = !json[QString("janitor_enabled")].isNull() && m_janitor_enabled_isValid;

    m_long_lived_isValid = ::OpenAPI::fromJsonValue(m_long_lived, json[QString("long_lived")]);
    m_long_lived_isSet = !json[QString("long_lived")].isNull() && m_long_lived_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFlex_v1_flex_flow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlex_v1_flex_flow::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_chat_service_sid_isSet) {
        obj.insert(QString("chat_service_sid"), ::OpenAPI::toJsonValue(m_chat_service_sid));
    }
    if (m_contact_identity_isSet) {
        obj.insert(QString("contact_identity"), ::OpenAPI::toJsonValue(m_contact_identity));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_integration_isSet) {
        obj.insert(QString("integration"), ::OpenAPI::toJsonValue(m_integration));
    }
    if (m_integration_type.isSet()) {
        obj.insert(QString("integration_type"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_janitor_enabled_isSet) {
        obj.insert(QString("janitor_enabled"), ::OpenAPI::toJsonValue(m_janitor_enabled));
    }
    if (m_long_lived_isSet) {
        obj.insert(QString("long_lived"), ::OpenAPI::toJsonValue(m_long_lived));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFlex_v1_flex_flow::getAccountSid() const {
    return m_account_sid;
}
void OAIFlex_v1_flex_flow::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIFlex_v1_flex_flow::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIFlex_flow_enum_channel_type OAIFlex_v1_flex_flow::getChannelType() const {
    return m_channel_type;
}
void OAIFlex_v1_flex_flow::setChannelType(const OAIFlex_flow_enum_channel_type &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIFlex_v1_flex_flow::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAIFlex_v1_flex_flow::getChatServiceSid() const {
    return m_chat_service_sid;
}
void OAIFlex_v1_flex_flow::setChatServiceSid(const QString &chat_service_sid) {
    m_chat_service_sid = chat_service_sid;
    m_chat_service_sid_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_chat_service_sid_Set() const{
    return m_chat_service_sid_isSet;
}

bool OAIFlex_v1_flex_flow::is_chat_service_sid_Valid() const{
    return m_chat_service_sid_isValid;
}

QString OAIFlex_v1_flex_flow::getContactIdentity() const {
    return m_contact_identity;
}
void OAIFlex_v1_flex_flow::setContactIdentity(const QString &contact_identity) {
    m_contact_identity = contact_identity;
    m_contact_identity_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_contact_identity_Set() const{
    return m_contact_identity_isSet;
}

bool OAIFlex_v1_flex_flow::is_contact_identity_Valid() const{
    return m_contact_identity_isValid;
}

QDateTime OAIFlex_v1_flex_flow::getDateCreated() const {
    return m_date_created;
}
void OAIFlex_v1_flex_flow::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIFlex_v1_flex_flow::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIFlex_v1_flex_flow::getDateUpdated() const {
    return m_date_updated;
}
void OAIFlex_v1_flex_flow::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIFlex_v1_flex_flow::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIFlex_v1_flex_flow::isEnabled() const {
    return m_enabled;
}
void OAIFlex_v1_flex_flow::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFlex_v1_flex_flow::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIFlex_v1_flex_flow::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFlex_v1_flex_flow::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFlex_v1_flex_flow::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QJsonValue OAIFlex_v1_flex_flow::getIntegration() const {
    return m_integration;
}
void OAIFlex_v1_flex_flow::setIntegration(const QJsonValue &integration) {
    m_integration = integration;
    m_integration_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_integration_Set() const{
    return m_integration_isSet;
}

bool OAIFlex_v1_flex_flow::is_integration_Valid() const{
    return m_integration_isValid;
}

OAIFlex_flow_enum_integration_type OAIFlex_v1_flex_flow::getIntegrationType() const {
    return m_integration_type;
}
void OAIFlex_v1_flex_flow::setIntegrationType(const OAIFlex_flow_enum_integration_type &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAIFlex_v1_flex_flow::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

bool OAIFlex_v1_flex_flow::isJanitorEnabled() const {
    return m_janitor_enabled;
}
void OAIFlex_v1_flex_flow::setJanitorEnabled(const bool &janitor_enabled) {
    m_janitor_enabled = janitor_enabled;
    m_janitor_enabled_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_janitor_enabled_Set() const{
    return m_janitor_enabled_isSet;
}

bool OAIFlex_v1_flex_flow::is_janitor_enabled_Valid() const{
    return m_janitor_enabled_isValid;
}

bool OAIFlex_v1_flex_flow::isLongLived() const {
    return m_long_lived;
}
void OAIFlex_v1_flex_flow::setLongLived(const bool &long_lived) {
    m_long_lived = long_lived;
    m_long_lived_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_long_lived_Set() const{
    return m_long_lived_isSet;
}

bool OAIFlex_v1_flex_flow::is_long_lived_Valid() const{
    return m_long_lived_isValid;
}

QString OAIFlex_v1_flex_flow::getSid() const {
    return m_sid;
}
void OAIFlex_v1_flex_flow::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIFlex_v1_flex_flow::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIFlex_v1_flex_flow::getUrl() const {
    return m_url;
}
void OAIFlex_v1_flex_flow::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFlex_v1_flex_flow::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFlex_v1_flex_flow::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFlex_v1_flex_flow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_janitor_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_lived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlex_v1_flex_flow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
