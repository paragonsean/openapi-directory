/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlexV1FlexFlowApi_H
#define OAI_OAIFlexV1FlexFlowApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlex_flow_enum_channel_type.h"
#include "OAIFlex_flow_enum_integration_type.h"
#include "OAIFlex_v1_flex_flow.h"
#include "OAIListFlexFlowResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlexV1FlexFlowApi : public QObject {
    Q_OBJECT

public:
    OAIFlexV1FlexFlowApi(const int timeOut = 0);
    ~OAIFlexV1FlexFlowApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_type OAIFlex_flow_enum_channel_type [required]
    * @param[in]  chat_service_sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  contact_identity QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  integration_channel QString [optional]
    * @param[in]  integration_creation_on_message bool [optional]
    * @param[in]  integration_flow_sid QString [optional]
    * @param[in]  integration_priority qint32 [optional]
    * @param[in]  integration_retry_count qint32 [optional]
    * @param[in]  integration_timeout qint32 [optional]
    * @param[in]  integration_url QString [optional]
    * @param[in]  integration_workflow_sid QString [optional]
    * @param[in]  integration_workspace_sid QString [optional]
    * @param[in]  integration_type OAIFlex_flow_enum_integration_type [optional]
    * @param[in]  janitor_enabled bool [optional]
    * @param[in]  long_lived bool [optional]
    */
    virtual void createFlexFlow(const OAIFlex_flow_enum_channel_type &channel_type, const QString &chat_service_sid, const QString &friendly_name, const ::OpenAPI::OptionalParam<QString> &contact_identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &integration_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &integration_creation_on_message = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &integration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &integration_priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &integration_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &integration_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &integration_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_workflow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_workspace_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFlex_flow_enum_integration_type> &integration_type = ::OpenAPI::OptionalParam<OAIFlex_flow_enum_integration_type>(), const ::OpenAPI::OptionalParam<bool> &janitor_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &long_lived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteFlexFlow(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchFlexFlow(const QString &sid);

    /**
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listFlexFlow(const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  channel_type OAIFlex_flow_enum_channel_type [optional]
    * @param[in]  chat_service_sid QString [optional]
    * @param[in]  contact_identity QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  integration_channel QString [optional]
    * @param[in]  integration_creation_on_message bool [optional]
    * @param[in]  integration_flow_sid QString [optional]
    * @param[in]  integration_priority qint32 [optional]
    * @param[in]  integration_retry_count qint32 [optional]
    * @param[in]  integration_timeout qint32 [optional]
    * @param[in]  integration_url QString [optional]
    * @param[in]  integration_workflow_sid QString [optional]
    * @param[in]  integration_workspace_sid QString [optional]
    * @param[in]  integration_type OAIFlex_flow_enum_integration_type [optional]
    * @param[in]  janitor_enabled bool [optional]
    * @param[in]  long_lived bool [optional]
    */
    virtual void updateFlexFlow(const QString &sid, const ::OpenAPI::OptionalParam<OAIFlex_flow_enum_channel_type> &channel_type = ::OpenAPI::OptionalParam<OAIFlex_flow_enum_channel_type>(), const ::OpenAPI::OptionalParam<QString> &chat_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &integration_creation_on_message = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &integration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &integration_priority = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &integration_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &integration_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &integration_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_workflow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_workspace_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFlex_flow_enum_integration_type> &integration_type = ::OpenAPI::OptionalParam<OAIFlex_flow_enum_integration_type>(), const ::OpenAPI::OptionalParam<bool> &janitor_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &long_lived = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createFlexFlowCallback(OAIHttpRequestWorker *worker);
    void deleteFlexFlowCallback(OAIHttpRequestWorker *worker);
    void fetchFlexFlowCallback(OAIHttpRequestWorker *worker);
    void listFlexFlowCallback(OAIHttpRequestWorker *worker);
    void updateFlexFlowCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createFlexFlowSignal(OAIFlex_v1_flex_flow summary);
    void deleteFlexFlowSignal();
    void fetchFlexFlowSignal(OAIFlex_v1_flex_flow summary);
    void listFlexFlowSignal(OAIListFlexFlowResponse summary);
    void updateFlexFlowSignal(OAIFlex_v1_flex_flow summary);


    void createFlexFlowSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_flex_flow summary);
    void deleteFlexFlowSignalFull(OAIHttpRequestWorker *worker);
    void fetchFlexFlowSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_flex_flow summary);
    void listFlexFlowSignalFull(OAIHttpRequestWorker *worker, OAIListFlexFlowResponse summary);
    void updateFlexFlowSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_flex_flow summary);

    Q_DECL_DEPRECATED_X("Use createFlexFlowSignalError() instead")
    void createFlexFlowSignalE(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFlexFlowSignalError(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFlexFlowSignalError() instead")
    void deleteFlexFlowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFlexFlowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFlexFlowSignalError() instead")
    void fetchFlexFlowSignalE(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFlexFlowSignalError(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFlexFlowSignalError() instead")
    void listFlexFlowSignalE(OAIListFlexFlowResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFlexFlowSignalError(OAIListFlexFlowResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFlexFlowSignalError() instead")
    void updateFlexFlowSignalE(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFlexFlowSignalError(OAIFlex_v1_flex_flow summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createFlexFlowSignalErrorFull() instead")
    void createFlexFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFlexFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFlexFlowSignalErrorFull() instead")
    void deleteFlexFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFlexFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFlexFlowSignalErrorFull() instead")
    void fetchFlexFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFlexFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFlexFlowSignalErrorFull() instead")
    void listFlexFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFlexFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFlexFlowSignalErrorFull() instead")
    void updateFlexFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFlexFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
