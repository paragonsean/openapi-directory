/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlexV1InsightsQuestionnairesQuestionApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFlexV1InsightsQuestionnairesQuestionApi::OAIFlexV1InsightsQuestionnairesQuestionApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFlexV1InsightsQuestionnairesQuestionApi::~OAIFlexV1InsightsQuestionnairesQuestionApi() {
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://flex-api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://flex-api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createInsightsQuestionnairesQuestion", serverConf);
    _serverIndices.insert("createInsightsQuestionnairesQuestion", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://flex-api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteInsightsQuestionnairesQuestion", serverConf);
    _serverIndices.insert("deleteInsightsQuestionnairesQuestion", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://flex-api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listInsightsQuestionnairesQuestion", serverConf);
    _serverIndices.insert("listInsightsQuestionnairesQuestion", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://flex-api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateInsightsQuestionnairesQuestion", serverConf);
    _serverIndices.insert("updateInsightsQuestionnairesQuestion", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFlexV1InsightsQuestionnairesQuestionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFlexV1InsightsQuestionnairesQuestionApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFlexV1InsightsQuestionnairesQuestionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFlexV1InsightsQuestionnairesQuestionApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFlexV1InsightsQuestionnairesQuestionApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFlexV1InsightsQuestionnairesQuestionApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFlexV1InsightsQuestionnairesQuestionApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFlexV1InsightsQuestionnairesQuestionApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFlexV1InsightsQuestionnairesQuestionApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::createInsightsQuestionnairesQuestion(const bool &allow_na, const QString &answer_set_id, const QString &category_sid, const QString &question, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &description) {
    QString fullPath = QString(_serverConfigs["createInsightsQuestionnairesQuestion"][_serverIndices.value("createInsightsQuestionnairesQuestion")].URL()+"/v1/Insights/QualityManagement/Questions");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("AllowNa", ::OpenAPI::toStringValue(allow_na));
    }
    
    {
        input.add_var("AnswerSetId", ::OpenAPI::toStringValue(answer_set_id));
    }
    
    {
        input.add_var("CategorySid", ::OpenAPI::toStringValue(category_sid));
    }
    if (description.hasValue())
    {
        input.add_var("Description", ::OpenAPI::toStringValue(description.value()));
    }
    
    {
        input.add_var("Question", ::OpenAPI::toStringValue(question));
    }

    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFlexV1InsightsQuestionnairesQuestionApi::createInsightsQuestionnairesQuestionCallback);
    connect(this, &OAIFlexV1InsightsQuestionnairesQuestionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::createInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFlex_v1_insights_questionnaires_question output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createInsightsQuestionnairesQuestionSignal(output);
        Q_EMIT createInsightsQuestionnairesQuestionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createInsightsQuestionnairesQuestionSignalE(output, error_type, error_str);
        Q_EMIT createInsightsQuestionnairesQuestionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createInsightsQuestionnairesQuestionSignalError(output, error_type, error_str);
        Q_EMIT createInsightsQuestionnairesQuestionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::deleteInsightsQuestionnairesQuestion(const QString &question_sid, const ::OpenAPI::OptionalParam<QString> &authorization) {
    QString fullPath = QString(_serverConfigs["deleteInsightsQuestionnairesQuestion"][_serverIndices.value("deleteInsightsQuestionnairesQuestion")].URL()+"/v1/Insights/QualityManagement/Questions/{QuestionSid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString question_sidPathParam("{");
        question_sidPathParam.append("QuestionSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "QuestionSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"QuestionSid"+pathSuffix : pathPrefix;
        fullPath.replace(question_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(question_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFlexV1InsightsQuestionnairesQuestionApi::deleteInsightsQuestionnairesQuestionCallback);
    connect(this, &OAIFlexV1InsightsQuestionnairesQuestionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::deleteInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteInsightsQuestionnairesQuestionSignal();
        Q_EMIT deleteInsightsQuestionnairesQuestionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteInsightsQuestionnairesQuestionSignalE(error_type, error_str);
        Q_EMIT deleteInsightsQuestionnairesQuestionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteInsightsQuestionnairesQuestionSignalError(error_type, error_str);
        Q_EMIT deleteInsightsQuestionnairesQuestionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::listInsightsQuestionnairesQuestion(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QList<QString>> &category_sid, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listInsightsQuestionnairesQuestion"][_serverIndices.value("listInsightsQuestionnairesQuestion")].URL()+"/v1/Insights/QualityManagement/Questions");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (category_sid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "CategorySid", true);
        if (category_sid.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : category_sid.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("CategorySid=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("CategorySid").append(querySuffix);
                qint32 count = 0;
                for (QString t : category_sid.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("CategorySid").append(querySuffix);
                qint32 count = 0;
                for (QString t : category_sid.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("CategorySid").append(querySuffix);
                qint32 count = 0;
                for (QString t : category_sid.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("CategorySid").append(querySuffix);
                qint32 count = 0;
                for (QString t : category_sid.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("CategorySid").append(querySuffix);
                qint32 count = 0;
                for (QString t : category_sid.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFlexV1InsightsQuestionnairesQuestionApi::listInsightsQuestionnairesQuestionCallback);
    connect(this, &OAIFlexV1InsightsQuestionnairesQuestionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::listInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListInsightsQuestionnairesQuestionResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listInsightsQuestionnairesQuestionSignal(output);
        Q_EMIT listInsightsQuestionnairesQuestionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listInsightsQuestionnairesQuestionSignalE(output, error_type, error_str);
        Q_EMIT listInsightsQuestionnairesQuestionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listInsightsQuestionnairesQuestionSignalError(output, error_type, error_str);
        Q_EMIT listInsightsQuestionnairesQuestionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::updateInsightsQuestionnairesQuestion(const QString &question_sid, const bool &allow_na, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &answer_set_id, const ::OpenAPI::OptionalParam<QString> &category_sid, const ::OpenAPI::OptionalParam<QString> &description, const ::OpenAPI::OptionalParam<QString> &question) {
    QString fullPath = QString(_serverConfigs["updateInsightsQuestionnairesQuestion"][_serverIndices.value("updateInsightsQuestionnairesQuestion")].URL()+"/v1/Insights/QualityManagement/Questions/{QuestionSid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString question_sidPathParam("{");
        question_sidPathParam.append("QuestionSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "QuestionSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"QuestionSid"+pathSuffix : pathPrefix;
        fullPath.replace(question_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(question_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("AllowNa", ::OpenAPI::toStringValue(allow_na));
    }
    if (answer_set_id.hasValue())
    {
        input.add_var("AnswerSetId", ::OpenAPI::toStringValue(answer_set_id.value()));
    }
    if (category_sid.hasValue())
    {
        input.add_var("CategorySid", ::OpenAPI::toStringValue(category_sid.value()));
    }
    if (description.hasValue())
    {
        input.add_var("Description", ::OpenAPI::toStringValue(description.value()));
    }
    if (question.hasValue())
    {
        input.add_var("Question", ::OpenAPI::toStringValue(question.value()));
    }

    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFlexV1InsightsQuestionnairesQuestionApi::updateInsightsQuestionnairesQuestionCallback);
    connect(this, &OAIFlexV1InsightsQuestionnairesQuestionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::updateInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFlex_v1_insights_questionnaires_question output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateInsightsQuestionnairesQuestionSignal(output);
        Q_EMIT updateInsightsQuestionnairesQuestionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateInsightsQuestionnairesQuestionSignalE(output, error_type, error_str);
        Q_EMIT updateInsightsQuestionnairesQuestionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateInsightsQuestionnairesQuestionSignalError(output, error_type, error_str);
        Q_EMIT updateInsightsQuestionnairesQuestionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFlexV1InsightsQuestionnairesQuestionApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
