/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlex_v1_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlex_v1_configuration::OAIFlex_v1_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlex_v1_configuration::OAIFlex_v1_configuration() {
    this->initializeModel();
}

OAIFlex_v1_configuration::~OAIFlex_v1_configuration() {}

void OAIFlex_v1_configuration::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_agent_conv_end_methods_isSet = false;
    m_agent_conv_end_methods_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_call_recording_enabled_isSet = false;
    m_call_recording_enabled_isValid = false;

    m_call_recording_webhook_url_isSet = false;
    m_call_recording_webhook_url_isValid = false;

    m_channel_configs_isSet = false;
    m_channel_configs_isValid = false;

    m_chat_service_instance_sid_isSet = false;
    m_chat_service_instance_sid_isValid = false;

    m_citrix_voice_vdi_isSet = false;
    m_citrix_voice_vdi_isValid = false;

    m_crm_attributes_isSet = false;
    m_crm_attributes_isValid = false;

    m_crm_callback_url_isSet = false;
    m_crm_callback_url_isValid = false;

    m_crm_enabled_isSet = false;
    m_crm_enabled_isValid = false;

    m_crm_fallback_url_isSet = false;
    m_crm_fallback_url_isValid = false;

    m_crm_type_isSet = false;
    m_crm_type_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_debugger_integration_isSet = false;
    m_debugger_integration_isValid = false;

    m_flex_insights_drilldown_isSet = false;
    m_flex_insights_drilldown_isValid = false;

    m_flex_insights_hr_isSet = false;
    m_flex_insights_hr_isValid = false;

    m_flex_instance_sid_isSet = false;
    m_flex_instance_sid_isValid = false;

    m_flex_service_instance_sid_isSet = false;
    m_flex_service_instance_sid_isValid = false;

    m_flex_ui_status_report_isSet = false;
    m_flex_ui_status_report_isValid = false;

    m_flex_url_isSet = false;
    m_flex_url_isValid = false;

    m_integrations_isSet = false;
    m_integrations_isValid = false;

    m_markdown_isSet = false;
    m_markdown_isValid = false;

    m_messaging_service_instance_sid_isSet = false;
    m_messaging_service_instance_sid_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_offline_config_isSet = false;
    m_offline_config_isValid = false;

    m_outbound_call_flows_isSet = false;
    m_outbound_call_flows_isValid = false;

    m_plugin_service_attributes_isSet = false;
    m_plugin_service_attributes_isValid = false;

    m_plugin_service_enabled_isSet = false;
    m_plugin_service_enabled_isValid = false;

    m_public_attributes_isSet = false;
    m_public_attributes_isValid = false;

    m_queue_stats_configuration_isSet = false;
    m_queue_stats_configuration_isValid = false;

    m_runtime_domain_isSet = false;
    m_runtime_domain_isValid = false;

    m_serverless_service_sids_isSet = false;
    m_serverless_service_sids_isValid = false;

    m_service_version_isSet = false;
    m_service_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_taskrouter_offline_activity_sid_isSet = false;
    m_taskrouter_offline_activity_sid_isValid = false;

    m_taskrouter_skills_isSet = false;
    m_taskrouter_skills_isValid = false;

    m_taskrouter_target_taskqueue_sid_isSet = false;
    m_taskrouter_target_taskqueue_sid_isValid = false;

    m_taskrouter_target_workflow_sid_isSet = false;
    m_taskrouter_target_workflow_sid_isValid = false;

    m_taskrouter_taskqueues_isSet = false;
    m_taskrouter_taskqueues_isValid = false;

    m_taskrouter_worker_attributes_isSet = false;
    m_taskrouter_worker_attributes_isValid = false;

    m_taskrouter_worker_channels_isSet = false;
    m_taskrouter_worker_channels_isValid = false;

    m_taskrouter_workspace_sid_isSet = false;
    m_taskrouter_workspace_sid_isValid = false;

    m_ui_attributes_isSet = false;
    m_ui_attributes_isValid = false;

    m_ui_dependencies_isSet = false;
    m_ui_dependencies_isValid = false;

    m_ui_language_isSet = false;
    m_ui_language_isValid = false;

    m_ui_version_isSet = false;
    m_ui_version_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFlex_v1_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlex_v1_configuration::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_agent_conv_end_methods_isValid = ::OpenAPI::fromJsonValue(m_agent_conv_end_methods, json[QString("agent_conv_end_methods")]);
    m_agent_conv_end_methods_isSet = !json[QString("agent_conv_end_methods")].isNull() && m_agent_conv_end_methods_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_call_recording_enabled_isValid = ::OpenAPI::fromJsonValue(m_call_recording_enabled, json[QString("call_recording_enabled")]);
    m_call_recording_enabled_isSet = !json[QString("call_recording_enabled")].isNull() && m_call_recording_enabled_isValid;

    m_call_recording_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_call_recording_webhook_url, json[QString("call_recording_webhook_url")]);
    m_call_recording_webhook_url_isSet = !json[QString("call_recording_webhook_url")].isNull() && m_call_recording_webhook_url_isValid;

    m_channel_configs_isValid = ::OpenAPI::fromJsonValue(m_channel_configs, json[QString("channel_configs")]);
    m_channel_configs_isSet = !json[QString("channel_configs")].isNull() && m_channel_configs_isValid;

    m_chat_service_instance_sid_isValid = ::OpenAPI::fromJsonValue(m_chat_service_instance_sid, json[QString("chat_service_instance_sid")]);
    m_chat_service_instance_sid_isSet = !json[QString("chat_service_instance_sid")].isNull() && m_chat_service_instance_sid_isValid;

    m_citrix_voice_vdi_isValid = ::OpenAPI::fromJsonValue(m_citrix_voice_vdi, json[QString("citrix_voice_vdi")]);
    m_citrix_voice_vdi_isSet = !json[QString("citrix_voice_vdi")].isNull() && m_citrix_voice_vdi_isValid;

    m_crm_attributes_isValid = ::OpenAPI::fromJsonValue(m_crm_attributes, json[QString("crm_attributes")]);
    m_crm_attributes_isSet = !json[QString("crm_attributes")].isNull() && m_crm_attributes_isValid;

    m_crm_callback_url_isValid = ::OpenAPI::fromJsonValue(m_crm_callback_url, json[QString("crm_callback_url")]);
    m_crm_callback_url_isSet = !json[QString("crm_callback_url")].isNull() && m_crm_callback_url_isValid;

    m_crm_enabled_isValid = ::OpenAPI::fromJsonValue(m_crm_enabled, json[QString("crm_enabled")]);
    m_crm_enabled_isSet = !json[QString("crm_enabled")].isNull() && m_crm_enabled_isValid;

    m_crm_fallback_url_isValid = ::OpenAPI::fromJsonValue(m_crm_fallback_url, json[QString("crm_fallback_url")]);
    m_crm_fallback_url_isSet = !json[QString("crm_fallback_url")].isNull() && m_crm_fallback_url_isValid;

    m_crm_type_isValid = ::OpenAPI::fromJsonValue(m_crm_type, json[QString("crm_type")]);
    m_crm_type_isSet = !json[QString("crm_type")].isNull() && m_crm_type_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_debugger_integration_isValid = ::OpenAPI::fromJsonValue(m_debugger_integration, json[QString("debugger_integration")]);
    m_debugger_integration_isSet = !json[QString("debugger_integration")].isNull() && m_debugger_integration_isValid;

    m_flex_insights_drilldown_isValid = ::OpenAPI::fromJsonValue(m_flex_insights_drilldown, json[QString("flex_insights_drilldown")]);
    m_flex_insights_drilldown_isSet = !json[QString("flex_insights_drilldown")].isNull() && m_flex_insights_drilldown_isValid;

    m_flex_insights_hr_isValid = ::OpenAPI::fromJsonValue(m_flex_insights_hr, json[QString("flex_insights_hr")]);
    m_flex_insights_hr_isSet = !json[QString("flex_insights_hr")].isNull() && m_flex_insights_hr_isValid;

    m_flex_instance_sid_isValid = ::OpenAPI::fromJsonValue(m_flex_instance_sid, json[QString("flex_instance_sid")]);
    m_flex_instance_sid_isSet = !json[QString("flex_instance_sid")].isNull() && m_flex_instance_sid_isValid;

    m_flex_service_instance_sid_isValid = ::OpenAPI::fromJsonValue(m_flex_service_instance_sid, json[QString("flex_service_instance_sid")]);
    m_flex_service_instance_sid_isSet = !json[QString("flex_service_instance_sid")].isNull() && m_flex_service_instance_sid_isValid;

    m_flex_ui_status_report_isValid = ::OpenAPI::fromJsonValue(m_flex_ui_status_report, json[QString("flex_ui_status_report")]);
    m_flex_ui_status_report_isSet = !json[QString("flex_ui_status_report")].isNull() && m_flex_ui_status_report_isValid;

    m_flex_url_isValid = ::OpenAPI::fromJsonValue(m_flex_url, json[QString("flex_url")]);
    m_flex_url_isSet = !json[QString("flex_url")].isNull() && m_flex_url_isValid;

    m_integrations_isValid = ::OpenAPI::fromJsonValue(m_integrations, json[QString("integrations")]);
    m_integrations_isSet = !json[QString("integrations")].isNull() && m_integrations_isValid;

    m_markdown_isValid = ::OpenAPI::fromJsonValue(m_markdown, json[QString("markdown")]);
    m_markdown_isSet = !json[QString("markdown")].isNull() && m_markdown_isValid;

    m_messaging_service_instance_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_instance_sid, json[QString("messaging_service_instance_sid")]);
    m_messaging_service_instance_sid_isSet = !json[QString("messaging_service_instance_sid")].isNull() && m_messaging_service_instance_sid_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_offline_config_isValid = ::OpenAPI::fromJsonValue(m_offline_config, json[QString("offline_config")]);
    m_offline_config_isSet = !json[QString("offline_config")].isNull() && m_offline_config_isValid;

    m_outbound_call_flows_isValid = ::OpenAPI::fromJsonValue(m_outbound_call_flows, json[QString("outbound_call_flows")]);
    m_outbound_call_flows_isSet = !json[QString("outbound_call_flows")].isNull() && m_outbound_call_flows_isValid;

    m_plugin_service_attributes_isValid = ::OpenAPI::fromJsonValue(m_plugin_service_attributes, json[QString("plugin_service_attributes")]);
    m_plugin_service_attributes_isSet = !json[QString("plugin_service_attributes")].isNull() && m_plugin_service_attributes_isValid;

    m_plugin_service_enabled_isValid = ::OpenAPI::fromJsonValue(m_plugin_service_enabled, json[QString("plugin_service_enabled")]);
    m_plugin_service_enabled_isSet = !json[QString("plugin_service_enabled")].isNull() && m_plugin_service_enabled_isValid;

    m_public_attributes_isValid = ::OpenAPI::fromJsonValue(m_public_attributes, json[QString("public_attributes")]);
    m_public_attributes_isSet = !json[QString("public_attributes")].isNull() && m_public_attributes_isValid;

    m_queue_stats_configuration_isValid = ::OpenAPI::fromJsonValue(m_queue_stats_configuration, json[QString("queue_stats_configuration")]);
    m_queue_stats_configuration_isSet = !json[QString("queue_stats_configuration")].isNull() && m_queue_stats_configuration_isValid;

    m_runtime_domain_isValid = ::OpenAPI::fromJsonValue(m_runtime_domain, json[QString("runtime_domain")]);
    m_runtime_domain_isSet = !json[QString("runtime_domain")].isNull() && m_runtime_domain_isValid;

    m_serverless_service_sids_isValid = ::OpenAPI::fromJsonValue(m_serverless_service_sids, json[QString("serverless_service_sids")]);
    m_serverless_service_sids_isSet = !json[QString("serverless_service_sids")].isNull() && m_serverless_service_sids_isValid;

    m_service_version_isValid = ::OpenAPI::fromJsonValue(m_service_version, json[QString("service_version")]);
    m_service_version_isSet = !json[QString("service_version")].isNull() && m_service_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_taskrouter_offline_activity_sid_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_offline_activity_sid, json[QString("taskrouter_offline_activity_sid")]);
    m_taskrouter_offline_activity_sid_isSet = !json[QString("taskrouter_offline_activity_sid")].isNull() && m_taskrouter_offline_activity_sid_isValid;

    m_taskrouter_skills_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_skills, json[QString("taskrouter_skills")]);
    m_taskrouter_skills_isSet = !json[QString("taskrouter_skills")].isNull() && m_taskrouter_skills_isValid;

    m_taskrouter_target_taskqueue_sid_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_target_taskqueue_sid, json[QString("taskrouter_target_taskqueue_sid")]);
    m_taskrouter_target_taskqueue_sid_isSet = !json[QString("taskrouter_target_taskqueue_sid")].isNull() && m_taskrouter_target_taskqueue_sid_isValid;

    m_taskrouter_target_workflow_sid_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_target_workflow_sid, json[QString("taskrouter_target_workflow_sid")]);
    m_taskrouter_target_workflow_sid_isSet = !json[QString("taskrouter_target_workflow_sid")].isNull() && m_taskrouter_target_workflow_sid_isValid;

    m_taskrouter_taskqueues_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_taskqueues, json[QString("taskrouter_taskqueues")]);
    m_taskrouter_taskqueues_isSet = !json[QString("taskrouter_taskqueues")].isNull() && m_taskrouter_taskqueues_isValid;

    m_taskrouter_worker_attributes_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_worker_attributes, json[QString("taskrouter_worker_attributes")]);
    m_taskrouter_worker_attributes_isSet = !json[QString("taskrouter_worker_attributes")].isNull() && m_taskrouter_worker_attributes_isValid;

    m_taskrouter_worker_channels_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_worker_channels, json[QString("taskrouter_worker_channels")]);
    m_taskrouter_worker_channels_isSet = !json[QString("taskrouter_worker_channels")].isNull() && m_taskrouter_worker_channels_isValid;

    m_taskrouter_workspace_sid_isValid = ::OpenAPI::fromJsonValue(m_taskrouter_workspace_sid, json[QString("taskrouter_workspace_sid")]);
    m_taskrouter_workspace_sid_isSet = !json[QString("taskrouter_workspace_sid")].isNull() && m_taskrouter_workspace_sid_isValid;

    m_ui_attributes_isValid = ::OpenAPI::fromJsonValue(m_ui_attributes, json[QString("ui_attributes")]);
    m_ui_attributes_isSet = !json[QString("ui_attributes")].isNull() && m_ui_attributes_isValid;

    m_ui_dependencies_isValid = ::OpenAPI::fromJsonValue(m_ui_dependencies, json[QString("ui_dependencies")]);
    m_ui_dependencies_isSet = !json[QString("ui_dependencies")].isNull() && m_ui_dependencies_isValid;

    m_ui_language_isValid = ::OpenAPI::fromJsonValue(m_ui_language, json[QString("ui_language")]);
    m_ui_language_isSet = !json[QString("ui_language")].isNull() && m_ui_language_isValid;

    m_ui_version_isValid = ::OpenAPI::fromJsonValue(m_ui_version, json[QString("ui_version")]);
    m_ui_version_isSet = !json[QString("ui_version")].isNull() && m_ui_version_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFlex_v1_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlex_v1_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_agent_conv_end_methods_isSet) {
        obj.insert(QString("agent_conv_end_methods"), ::OpenAPI::toJsonValue(m_agent_conv_end_methods));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_call_recording_enabled_isSet) {
        obj.insert(QString("call_recording_enabled"), ::OpenAPI::toJsonValue(m_call_recording_enabled));
    }
    if (m_call_recording_webhook_url_isSet) {
        obj.insert(QString("call_recording_webhook_url"), ::OpenAPI::toJsonValue(m_call_recording_webhook_url));
    }
    if (m_channel_configs.size() > 0) {
        obj.insert(QString("channel_configs"), ::OpenAPI::toJsonValue(m_channel_configs));
    }
    if (m_chat_service_instance_sid_isSet) {
        obj.insert(QString("chat_service_instance_sid"), ::OpenAPI::toJsonValue(m_chat_service_instance_sid));
    }
    if (m_citrix_voice_vdi_isSet) {
        obj.insert(QString("citrix_voice_vdi"), ::OpenAPI::toJsonValue(m_citrix_voice_vdi));
    }
    if (m_crm_attributes_isSet) {
        obj.insert(QString("crm_attributes"), ::OpenAPI::toJsonValue(m_crm_attributes));
    }
    if (m_crm_callback_url_isSet) {
        obj.insert(QString("crm_callback_url"), ::OpenAPI::toJsonValue(m_crm_callback_url));
    }
    if (m_crm_enabled_isSet) {
        obj.insert(QString("crm_enabled"), ::OpenAPI::toJsonValue(m_crm_enabled));
    }
    if (m_crm_fallback_url_isSet) {
        obj.insert(QString("crm_fallback_url"), ::OpenAPI::toJsonValue(m_crm_fallback_url));
    }
    if (m_crm_type_isSet) {
        obj.insert(QString("crm_type"), ::OpenAPI::toJsonValue(m_crm_type));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_debugger_integration_isSet) {
        obj.insert(QString("debugger_integration"), ::OpenAPI::toJsonValue(m_debugger_integration));
    }
    if (m_flex_insights_drilldown_isSet) {
        obj.insert(QString("flex_insights_drilldown"), ::OpenAPI::toJsonValue(m_flex_insights_drilldown));
    }
    if (m_flex_insights_hr_isSet) {
        obj.insert(QString("flex_insights_hr"), ::OpenAPI::toJsonValue(m_flex_insights_hr));
    }
    if (m_flex_instance_sid_isSet) {
        obj.insert(QString("flex_instance_sid"), ::OpenAPI::toJsonValue(m_flex_instance_sid));
    }
    if (m_flex_service_instance_sid_isSet) {
        obj.insert(QString("flex_service_instance_sid"), ::OpenAPI::toJsonValue(m_flex_service_instance_sid));
    }
    if (m_flex_ui_status_report_isSet) {
        obj.insert(QString("flex_ui_status_report"), ::OpenAPI::toJsonValue(m_flex_ui_status_report));
    }
    if (m_flex_url_isSet) {
        obj.insert(QString("flex_url"), ::OpenAPI::toJsonValue(m_flex_url));
    }
    if (m_integrations.size() > 0) {
        obj.insert(QString("integrations"), ::OpenAPI::toJsonValue(m_integrations));
    }
    if (m_markdown_isSet) {
        obj.insert(QString("markdown"), ::OpenAPI::toJsonValue(m_markdown));
    }
    if (m_messaging_service_instance_sid_isSet) {
        obj.insert(QString("messaging_service_instance_sid"), ::OpenAPI::toJsonValue(m_messaging_service_instance_sid));
    }
    if (m_notifications_isSet) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_offline_config_isSet) {
        obj.insert(QString("offline_config"), ::OpenAPI::toJsonValue(m_offline_config));
    }
    if (m_outbound_call_flows_isSet) {
        obj.insert(QString("outbound_call_flows"), ::OpenAPI::toJsonValue(m_outbound_call_flows));
    }
    if (m_plugin_service_attributes_isSet) {
        obj.insert(QString("plugin_service_attributes"), ::OpenAPI::toJsonValue(m_plugin_service_attributes));
    }
    if (m_plugin_service_enabled_isSet) {
        obj.insert(QString("plugin_service_enabled"), ::OpenAPI::toJsonValue(m_plugin_service_enabled));
    }
    if (m_public_attributes_isSet) {
        obj.insert(QString("public_attributes"), ::OpenAPI::toJsonValue(m_public_attributes));
    }
    if (m_queue_stats_configuration_isSet) {
        obj.insert(QString("queue_stats_configuration"), ::OpenAPI::toJsonValue(m_queue_stats_configuration));
    }
    if (m_runtime_domain_isSet) {
        obj.insert(QString("runtime_domain"), ::OpenAPI::toJsonValue(m_runtime_domain));
    }
    if (m_serverless_service_sids.size() > 0) {
        obj.insert(QString("serverless_service_sids"), ::OpenAPI::toJsonValue(m_serverless_service_sids));
    }
    if (m_service_version_isSet) {
        obj.insert(QString("service_version"), ::OpenAPI::toJsonValue(m_service_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_taskrouter_offline_activity_sid_isSet) {
        obj.insert(QString("taskrouter_offline_activity_sid"), ::OpenAPI::toJsonValue(m_taskrouter_offline_activity_sid));
    }
    if (m_taskrouter_skills.size() > 0) {
        obj.insert(QString("taskrouter_skills"), ::OpenAPI::toJsonValue(m_taskrouter_skills));
    }
    if (m_taskrouter_target_taskqueue_sid_isSet) {
        obj.insert(QString("taskrouter_target_taskqueue_sid"), ::OpenAPI::toJsonValue(m_taskrouter_target_taskqueue_sid));
    }
    if (m_taskrouter_target_workflow_sid_isSet) {
        obj.insert(QString("taskrouter_target_workflow_sid"), ::OpenAPI::toJsonValue(m_taskrouter_target_workflow_sid));
    }
    if (m_taskrouter_taskqueues.size() > 0) {
        obj.insert(QString("taskrouter_taskqueues"), ::OpenAPI::toJsonValue(m_taskrouter_taskqueues));
    }
    if (m_taskrouter_worker_attributes_isSet) {
        obj.insert(QString("taskrouter_worker_attributes"), ::OpenAPI::toJsonValue(m_taskrouter_worker_attributes));
    }
    if (m_taskrouter_worker_channels_isSet) {
        obj.insert(QString("taskrouter_worker_channels"), ::OpenAPI::toJsonValue(m_taskrouter_worker_channels));
    }
    if (m_taskrouter_workspace_sid_isSet) {
        obj.insert(QString("taskrouter_workspace_sid"), ::OpenAPI::toJsonValue(m_taskrouter_workspace_sid));
    }
    if (m_ui_attributes_isSet) {
        obj.insert(QString("ui_attributes"), ::OpenAPI::toJsonValue(m_ui_attributes));
    }
    if (m_ui_dependencies_isSet) {
        obj.insert(QString("ui_dependencies"), ::OpenAPI::toJsonValue(m_ui_dependencies));
    }
    if (m_ui_language_isSet) {
        obj.insert(QString("ui_language"), ::OpenAPI::toJsonValue(m_ui_language));
    }
    if (m_ui_version_isSet) {
        obj.insert(QString("ui_version"), ::OpenAPI::toJsonValue(m_ui_version));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFlex_v1_configuration::getAccountSid() const {
    return m_account_sid;
}
void OAIFlex_v1_configuration::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIFlex_v1_configuration::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QJsonValue OAIFlex_v1_configuration::getAgentConvEndMethods() const {
    return m_agent_conv_end_methods;
}
void OAIFlex_v1_configuration::setAgentConvEndMethods(const QJsonValue &agent_conv_end_methods) {
    m_agent_conv_end_methods = agent_conv_end_methods;
    m_agent_conv_end_methods_isSet = true;
}

bool OAIFlex_v1_configuration::is_agent_conv_end_methods_Set() const{
    return m_agent_conv_end_methods_isSet;
}

bool OAIFlex_v1_configuration::is_agent_conv_end_methods_Valid() const{
    return m_agent_conv_end_methods_isValid;
}

QJsonValue OAIFlex_v1_configuration::getAttributes() const {
    return m_attributes;
}
void OAIFlex_v1_configuration::setAttributes(const QJsonValue &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIFlex_v1_configuration::isCallRecordingEnabled() const {
    return m_call_recording_enabled;
}
void OAIFlex_v1_configuration::setCallRecordingEnabled(const bool &call_recording_enabled) {
    m_call_recording_enabled = call_recording_enabled;
    m_call_recording_enabled_isSet = true;
}

bool OAIFlex_v1_configuration::is_call_recording_enabled_Set() const{
    return m_call_recording_enabled_isSet;
}

bool OAIFlex_v1_configuration::is_call_recording_enabled_Valid() const{
    return m_call_recording_enabled_isValid;
}

QString OAIFlex_v1_configuration::getCallRecordingWebhookUrl() const {
    return m_call_recording_webhook_url;
}
void OAIFlex_v1_configuration::setCallRecordingWebhookUrl(const QString &call_recording_webhook_url) {
    m_call_recording_webhook_url = call_recording_webhook_url;
    m_call_recording_webhook_url_isSet = true;
}

bool OAIFlex_v1_configuration::is_call_recording_webhook_url_Set() const{
    return m_call_recording_webhook_url_isSet;
}

bool OAIFlex_v1_configuration::is_call_recording_webhook_url_Valid() const{
    return m_call_recording_webhook_url_isValid;
}

QList<QJsonValue> OAIFlex_v1_configuration::getChannelConfigs() const {
    return m_channel_configs;
}
void OAIFlex_v1_configuration::setChannelConfigs(const QList<QJsonValue> &channel_configs) {
    m_channel_configs = channel_configs;
    m_channel_configs_isSet = true;
}

bool OAIFlex_v1_configuration::is_channel_configs_Set() const{
    return m_channel_configs_isSet;
}

bool OAIFlex_v1_configuration::is_channel_configs_Valid() const{
    return m_channel_configs_isValid;
}

QString OAIFlex_v1_configuration::getChatServiceInstanceSid() const {
    return m_chat_service_instance_sid;
}
void OAIFlex_v1_configuration::setChatServiceInstanceSid(const QString &chat_service_instance_sid) {
    m_chat_service_instance_sid = chat_service_instance_sid;
    m_chat_service_instance_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_chat_service_instance_sid_Set() const{
    return m_chat_service_instance_sid_isSet;
}

bool OAIFlex_v1_configuration::is_chat_service_instance_sid_Valid() const{
    return m_chat_service_instance_sid_isValid;
}

QJsonValue OAIFlex_v1_configuration::getCitrixVoiceVdi() const {
    return m_citrix_voice_vdi;
}
void OAIFlex_v1_configuration::setCitrixVoiceVdi(const QJsonValue &citrix_voice_vdi) {
    m_citrix_voice_vdi = citrix_voice_vdi;
    m_citrix_voice_vdi_isSet = true;
}

bool OAIFlex_v1_configuration::is_citrix_voice_vdi_Set() const{
    return m_citrix_voice_vdi_isSet;
}

bool OAIFlex_v1_configuration::is_citrix_voice_vdi_Valid() const{
    return m_citrix_voice_vdi_isValid;
}

QJsonValue OAIFlex_v1_configuration::getCrmAttributes() const {
    return m_crm_attributes;
}
void OAIFlex_v1_configuration::setCrmAttributes(const QJsonValue &crm_attributes) {
    m_crm_attributes = crm_attributes;
    m_crm_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_crm_attributes_Set() const{
    return m_crm_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_crm_attributes_Valid() const{
    return m_crm_attributes_isValid;
}

QString OAIFlex_v1_configuration::getCrmCallbackUrl() const {
    return m_crm_callback_url;
}
void OAIFlex_v1_configuration::setCrmCallbackUrl(const QString &crm_callback_url) {
    m_crm_callback_url = crm_callback_url;
    m_crm_callback_url_isSet = true;
}

bool OAIFlex_v1_configuration::is_crm_callback_url_Set() const{
    return m_crm_callback_url_isSet;
}

bool OAIFlex_v1_configuration::is_crm_callback_url_Valid() const{
    return m_crm_callback_url_isValid;
}

bool OAIFlex_v1_configuration::isCrmEnabled() const {
    return m_crm_enabled;
}
void OAIFlex_v1_configuration::setCrmEnabled(const bool &crm_enabled) {
    m_crm_enabled = crm_enabled;
    m_crm_enabled_isSet = true;
}

bool OAIFlex_v1_configuration::is_crm_enabled_Set() const{
    return m_crm_enabled_isSet;
}

bool OAIFlex_v1_configuration::is_crm_enabled_Valid() const{
    return m_crm_enabled_isValid;
}

QString OAIFlex_v1_configuration::getCrmFallbackUrl() const {
    return m_crm_fallback_url;
}
void OAIFlex_v1_configuration::setCrmFallbackUrl(const QString &crm_fallback_url) {
    m_crm_fallback_url = crm_fallback_url;
    m_crm_fallback_url_isSet = true;
}

bool OAIFlex_v1_configuration::is_crm_fallback_url_Set() const{
    return m_crm_fallback_url_isSet;
}

bool OAIFlex_v1_configuration::is_crm_fallback_url_Valid() const{
    return m_crm_fallback_url_isValid;
}

QString OAIFlex_v1_configuration::getCrmType() const {
    return m_crm_type;
}
void OAIFlex_v1_configuration::setCrmType(const QString &crm_type) {
    m_crm_type = crm_type;
    m_crm_type_isSet = true;
}

bool OAIFlex_v1_configuration::is_crm_type_Set() const{
    return m_crm_type_isSet;
}

bool OAIFlex_v1_configuration::is_crm_type_Valid() const{
    return m_crm_type_isValid;
}

QDateTime OAIFlex_v1_configuration::getDateCreated() const {
    return m_date_created;
}
void OAIFlex_v1_configuration::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIFlex_v1_configuration::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIFlex_v1_configuration::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIFlex_v1_configuration::getDateUpdated() const {
    return m_date_updated;
}
void OAIFlex_v1_configuration::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIFlex_v1_configuration::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIFlex_v1_configuration::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QJsonValue OAIFlex_v1_configuration::getDebuggerIntegration() const {
    return m_debugger_integration;
}
void OAIFlex_v1_configuration::setDebuggerIntegration(const QJsonValue &debugger_integration) {
    m_debugger_integration = debugger_integration;
    m_debugger_integration_isSet = true;
}

bool OAIFlex_v1_configuration::is_debugger_integration_Set() const{
    return m_debugger_integration_isSet;
}

bool OAIFlex_v1_configuration::is_debugger_integration_Valid() const{
    return m_debugger_integration_isValid;
}

bool OAIFlex_v1_configuration::isFlexInsightsDrilldown() const {
    return m_flex_insights_drilldown;
}
void OAIFlex_v1_configuration::setFlexInsightsDrilldown(const bool &flex_insights_drilldown) {
    m_flex_insights_drilldown = flex_insights_drilldown;
    m_flex_insights_drilldown_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_insights_drilldown_Set() const{
    return m_flex_insights_drilldown_isSet;
}

bool OAIFlex_v1_configuration::is_flex_insights_drilldown_Valid() const{
    return m_flex_insights_drilldown_isValid;
}

QJsonValue OAIFlex_v1_configuration::getFlexInsightsHr() const {
    return m_flex_insights_hr;
}
void OAIFlex_v1_configuration::setFlexInsightsHr(const QJsonValue &flex_insights_hr) {
    m_flex_insights_hr = flex_insights_hr;
    m_flex_insights_hr_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_insights_hr_Set() const{
    return m_flex_insights_hr_isSet;
}

bool OAIFlex_v1_configuration::is_flex_insights_hr_Valid() const{
    return m_flex_insights_hr_isValid;
}

QString OAIFlex_v1_configuration::getFlexInstanceSid() const {
    return m_flex_instance_sid;
}
void OAIFlex_v1_configuration::setFlexInstanceSid(const QString &flex_instance_sid) {
    m_flex_instance_sid = flex_instance_sid;
    m_flex_instance_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_instance_sid_Set() const{
    return m_flex_instance_sid_isSet;
}

bool OAIFlex_v1_configuration::is_flex_instance_sid_Valid() const{
    return m_flex_instance_sid_isValid;
}

QString OAIFlex_v1_configuration::getFlexServiceInstanceSid() const {
    return m_flex_service_instance_sid;
}
void OAIFlex_v1_configuration::setFlexServiceInstanceSid(const QString &flex_service_instance_sid) {
    m_flex_service_instance_sid = flex_service_instance_sid;
    m_flex_service_instance_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_service_instance_sid_Set() const{
    return m_flex_service_instance_sid_isSet;
}

bool OAIFlex_v1_configuration::is_flex_service_instance_sid_Valid() const{
    return m_flex_service_instance_sid_isValid;
}

QJsonValue OAIFlex_v1_configuration::getFlexUiStatusReport() const {
    return m_flex_ui_status_report;
}
void OAIFlex_v1_configuration::setFlexUiStatusReport(const QJsonValue &flex_ui_status_report) {
    m_flex_ui_status_report = flex_ui_status_report;
    m_flex_ui_status_report_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_ui_status_report_Set() const{
    return m_flex_ui_status_report_isSet;
}

bool OAIFlex_v1_configuration::is_flex_ui_status_report_Valid() const{
    return m_flex_ui_status_report_isValid;
}

QString OAIFlex_v1_configuration::getFlexUrl() const {
    return m_flex_url;
}
void OAIFlex_v1_configuration::setFlexUrl(const QString &flex_url) {
    m_flex_url = flex_url;
    m_flex_url_isSet = true;
}

bool OAIFlex_v1_configuration::is_flex_url_Set() const{
    return m_flex_url_isSet;
}

bool OAIFlex_v1_configuration::is_flex_url_Valid() const{
    return m_flex_url_isValid;
}

QList<QJsonValue> OAIFlex_v1_configuration::getIntegrations() const {
    return m_integrations;
}
void OAIFlex_v1_configuration::setIntegrations(const QList<QJsonValue> &integrations) {
    m_integrations = integrations;
    m_integrations_isSet = true;
}

bool OAIFlex_v1_configuration::is_integrations_Set() const{
    return m_integrations_isSet;
}

bool OAIFlex_v1_configuration::is_integrations_Valid() const{
    return m_integrations_isValid;
}

QJsonValue OAIFlex_v1_configuration::getMarkdown() const {
    return m_markdown;
}
void OAIFlex_v1_configuration::setMarkdown(const QJsonValue &markdown) {
    m_markdown = markdown;
    m_markdown_isSet = true;
}

bool OAIFlex_v1_configuration::is_markdown_Set() const{
    return m_markdown_isSet;
}

bool OAIFlex_v1_configuration::is_markdown_Valid() const{
    return m_markdown_isValid;
}

QString OAIFlex_v1_configuration::getMessagingServiceInstanceSid() const {
    return m_messaging_service_instance_sid;
}
void OAIFlex_v1_configuration::setMessagingServiceInstanceSid(const QString &messaging_service_instance_sid) {
    m_messaging_service_instance_sid = messaging_service_instance_sid;
    m_messaging_service_instance_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_messaging_service_instance_sid_Set() const{
    return m_messaging_service_instance_sid_isSet;
}

bool OAIFlex_v1_configuration::is_messaging_service_instance_sid_Valid() const{
    return m_messaging_service_instance_sid_isValid;
}

QJsonValue OAIFlex_v1_configuration::getNotifications() const {
    return m_notifications;
}
void OAIFlex_v1_configuration::setNotifications(const QJsonValue &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIFlex_v1_configuration::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIFlex_v1_configuration::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QJsonValue OAIFlex_v1_configuration::getOfflineConfig() const {
    return m_offline_config;
}
void OAIFlex_v1_configuration::setOfflineConfig(const QJsonValue &offline_config) {
    m_offline_config = offline_config;
    m_offline_config_isSet = true;
}

bool OAIFlex_v1_configuration::is_offline_config_Set() const{
    return m_offline_config_isSet;
}

bool OAIFlex_v1_configuration::is_offline_config_Valid() const{
    return m_offline_config_isValid;
}

QJsonValue OAIFlex_v1_configuration::getOutboundCallFlows() const {
    return m_outbound_call_flows;
}
void OAIFlex_v1_configuration::setOutboundCallFlows(const QJsonValue &outbound_call_flows) {
    m_outbound_call_flows = outbound_call_flows;
    m_outbound_call_flows_isSet = true;
}

bool OAIFlex_v1_configuration::is_outbound_call_flows_Set() const{
    return m_outbound_call_flows_isSet;
}

bool OAIFlex_v1_configuration::is_outbound_call_flows_Valid() const{
    return m_outbound_call_flows_isValid;
}

QJsonValue OAIFlex_v1_configuration::getPluginServiceAttributes() const {
    return m_plugin_service_attributes;
}
void OAIFlex_v1_configuration::setPluginServiceAttributes(const QJsonValue &plugin_service_attributes) {
    m_plugin_service_attributes = plugin_service_attributes;
    m_plugin_service_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_plugin_service_attributes_Set() const{
    return m_plugin_service_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_plugin_service_attributes_Valid() const{
    return m_plugin_service_attributes_isValid;
}

bool OAIFlex_v1_configuration::isPluginServiceEnabled() const {
    return m_plugin_service_enabled;
}
void OAIFlex_v1_configuration::setPluginServiceEnabled(const bool &plugin_service_enabled) {
    m_plugin_service_enabled = plugin_service_enabled;
    m_plugin_service_enabled_isSet = true;
}

bool OAIFlex_v1_configuration::is_plugin_service_enabled_Set() const{
    return m_plugin_service_enabled_isSet;
}

bool OAIFlex_v1_configuration::is_plugin_service_enabled_Valid() const{
    return m_plugin_service_enabled_isValid;
}

QJsonValue OAIFlex_v1_configuration::getPublicAttributes() const {
    return m_public_attributes;
}
void OAIFlex_v1_configuration::setPublicAttributes(const QJsonValue &public_attributes) {
    m_public_attributes = public_attributes;
    m_public_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_public_attributes_Set() const{
    return m_public_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_public_attributes_Valid() const{
    return m_public_attributes_isValid;
}

QJsonValue OAIFlex_v1_configuration::getQueueStatsConfiguration() const {
    return m_queue_stats_configuration;
}
void OAIFlex_v1_configuration::setQueueStatsConfiguration(const QJsonValue &queue_stats_configuration) {
    m_queue_stats_configuration = queue_stats_configuration;
    m_queue_stats_configuration_isSet = true;
}

bool OAIFlex_v1_configuration::is_queue_stats_configuration_Set() const{
    return m_queue_stats_configuration_isSet;
}

bool OAIFlex_v1_configuration::is_queue_stats_configuration_Valid() const{
    return m_queue_stats_configuration_isValid;
}

QString OAIFlex_v1_configuration::getRuntimeDomain() const {
    return m_runtime_domain;
}
void OAIFlex_v1_configuration::setRuntimeDomain(const QString &runtime_domain) {
    m_runtime_domain = runtime_domain;
    m_runtime_domain_isSet = true;
}

bool OAIFlex_v1_configuration::is_runtime_domain_Set() const{
    return m_runtime_domain_isSet;
}

bool OAIFlex_v1_configuration::is_runtime_domain_Valid() const{
    return m_runtime_domain_isValid;
}

QList<QString> OAIFlex_v1_configuration::getServerlessServiceSids() const {
    return m_serverless_service_sids;
}
void OAIFlex_v1_configuration::setServerlessServiceSids(const QList<QString> &serverless_service_sids) {
    m_serverless_service_sids = serverless_service_sids;
    m_serverless_service_sids_isSet = true;
}

bool OAIFlex_v1_configuration::is_serverless_service_sids_Set() const{
    return m_serverless_service_sids_isSet;
}

bool OAIFlex_v1_configuration::is_serverless_service_sids_Valid() const{
    return m_serverless_service_sids_isValid;
}

QString OAIFlex_v1_configuration::getServiceVersion() const {
    return m_service_version;
}
void OAIFlex_v1_configuration::setServiceVersion(const QString &service_version) {
    m_service_version = service_version;
    m_service_version_isSet = true;
}

bool OAIFlex_v1_configuration::is_service_version_Set() const{
    return m_service_version_isSet;
}

bool OAIFlex_v1_configuration::is_service_version_Valid() const{
    return m_service_version_isValid;
}

OAIConfiguration_enum_status OAIFlex_v1_configuration::getStatus() const {
    return m_status;
}
void OAIFlex_v1_configuration::setStatus(const OAIConfiguration_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFlex_v1_configuration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFlex_v1_configuration::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFlex_v1_configuration::getTaskrouterOfflineActivitySid() const {
    return m_taskrouter_offline_activity_sid;
}
void OAIFlex_v1_configuration::setTaskrouterOfflineActivitySid(const QString &taskrouter_offline_activity_sid) {
    m_taskrouter_offline_activity_sid = taskrouter_offline_activity_sid;
    m_taskrouter_offline_activity_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_offline_activity_sid_Set() const{
    return m_taskrouter_offline_activity_sid_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_offline_activity_sid_Valid() const{
    return m_taskrouter_offline_activity_sid_isValid;
}

QList<QJsonValue> OAIFlex_v1_configuration::getTaskrouterSkills() const {
    return m_taskrouter_skills;
}
void OAIFlex_v1_configuration::setTaskrouterSkills(const QList<QJsonValue> &taskrouter_skills) {
    m_taskrouter_skills = taskrouter_skills;
    m_taskrouter_skills_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_skills_Set() const{
    return m_taskrouter_skills_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_skills_Valid() const{
    return m_taskrouter_skills_isValid;
}

QString OAIFlex_v1_configuration::getTaskrouterTargetTaskqueueSid() const {
    return m_taskrouter_target_taskqueue_sid;
}
void OAIFlex_v1_configuration::setTaskrouterTargetTaskqueueSid(const QString &taskrouter_target_taskqueue_sid) {
    m_taskrouter_target_taskqueue_sid = taskrouter_target_taskqueue_sid;
    m_taskrouter_target_taskqueue_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_target_taskqueue_sid_Set() const{
    return m_taskrouter_target_taskqueue_sid_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_target_taskqueue_sid_Valid() const{
    return m_taskrouter_target_taskqueue_sid_isValid;
}

QString OAIFlex_v1_configuration::getTaskrouterTargetWorkflowSid() const {
    return m_taskrouter_target_workflow_sid;
}
void OAIFlex_v1_configuration::setTaskrouterTargetWorkflowSid(const QString &taskrouter_target_workflow_sid) {
    m_taskrouter_target_workflow_sid = taskrouter_target_workflow_sid;
    m_taskrouter_target_workflow_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_target_workflow_sid_Set() const{
    return m_taskrouter_target_workflow_sid_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_target_workflow_sid_Valid() const{
    return m_taskrouter_target_workflow_sid_isValid;
}

QList<QJsonValue> OAIFlex_v1_configuration::getTaskrouterTaskqueues() const {
    return m_taskrouter_taskqueues;
}
void OAIFlex_v1_configuration::setTaskrouterTaskqueues(const QList<QJsonValue> &taskrouter_taskqueues) {
    m_taskrouter_taskqueues = taskrouter_taskqueues;
    m_taskrouter_taskqueues_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_taskqueues_Set() const{
    return m_taskrouter_taskqueues_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_taskqueues_Valid() const{
    return m_taskrouter_taskqueues_isValid;
}

QJsonValue OAIFlex_v1_configuration::getTaskrouterWorkerAttributes() const {
    return m_taskrouter_worker_attributes;
}
void OAIFlex_v1_configuration::setTaskrouterWorkerAttributes(const QJsonValue &taskrouter_worker_attributes) {
    m_taskrouter_worker_attributes = taskrouter_worker_attributes;
    m_taskrouter_worker_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_worker_attributes_Set() const{
    return m_taskrouter_worker_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_worker_attributes_Valid() const{
    return m_taskrouter_worker_attributes_isValid;
}

QJsonValue OAIFlex_v1_configuration::getTaskrouterWorkerChannels() const {
    return m_taskrouter_worker_channels;
}
void OAIFlex_v1_configuration::setTaskrouterWorkerChannels(const QJsonValue &taskrouter_worker_channels) {
    m_taskrouter_worker_channels = taskrouter_worker_channels;
    m_taskrouter_worker_channels_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_worker_channels_Set() const{
    return m_taskrouter_worker_channels_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_worker_channels_Valid() const{
    return m_taskrouter_worker_channels_isValid;
}

QString OAIFlex_v1_configuration::getTaskrouterWorkspaceSid() const {
    return m_taskrouter_workspace_sid;
}
void OAIFlex_v1_configuration::setTaskrouterWorkspaceSid(const QString &taskrouter_workspace_sid) {
    m_taskrouter_workspace_sid = taskrouter_workspace_sid;
    m_taskrouter_workspace_sid_isSet = true;
}

bool OAIFlex_v1_configuration::is_taskrouter_workspace_sid_Set() const{
    return m_taskrouter_workspace_sid_isSet;
}

bool OAIFlex_v1_configuration::is_taskrouter_workspace_sid_Valid() const{
    return m_taskrouter_workspace_sid_isValid;
}

QJsonValue OAIFlex_v1_configuration::getUiAttributes() const {
    return m_ui_attributes;
}
void OAIFlex_v1_configuration::setUiAttributes(const QJsonValue &ui_attributes) {
    m_ui_attributes = ui_attributes;
    m_ui_attributes_isSet = true;
}

bool OAIFlex_v1_configuration::is_ui_attributes_Set() const{
    return m_ui_attributes_isSet;
}

bool OAIFlex_v1_configuration::is_ui_attributes_Valid() const{
    return m_ui_attributes_isValid;
}

QJsonValue OAIFlex_v1_configuration::getUiDependencies() const {
    return m_ui_dependencies;
}
void OAIFlex_v1_configuration::setUiDependencies(const QJsonValue &ui_dependencies) {
    m_ui_dependencies = ui_dependencies;
    m_ui_dependencies_isSet = true;
}

bool OAIFlex_v1_configuration::is_ui_dependencies_Set() const{
    return m_ui_dependencies_isSet;
}

bool OAIFlex_v1_configuration::is_ui_dependencies_Valid() const{
    return m_ui_dependencies_isValid;
}

QString OAIFlex_v1_configuration::getUiLanguage() const {
    return m_ui_language;
}
void OAIFlex_v1_configuration::setUiLanguage(const QString &ui_language) {
    m_ui_language = ui_language;
    m_ui_language_isSet = true;
}

bool OAIFlex_v1_configuration::is_ui_language_Set() const{
    return m_ui_language_isSet;
}

bool OAIFlex_v1_configuration::is_ui_language_Valid() const{
    return m_ui_language_isValid;
}

QString OAIFlex_v1_configuration::getUiVersion() const {
    return m_ui_version;
}
void OAIFlex_v1_configuration::setUiVersion(const QString &ui_version) {
    m_ui_version = ui_version;
    m_ui_version_isSet = true;
}

bool OAIFlex_v1_configuration::is_ui_version_Set() const{
    return m_ui_version_isSet;
}

bool OAIFlex_v1_configuration::is_ui_version_Valid() const{
    return m_ui_version_isValid;
}

QString OAIFlex_v1_configuration::getUrl() const {
    return m_url;
}
void OAIFlex_v1_configuration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFlex_v1_configuration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFlex_v1_configuration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFlex_v1_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_conv_end_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_recording_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_recording_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_service_instance_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citrix_voice_vdi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_fallback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debugger_integration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_insights_drilldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_insights_hr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_instance_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_service_instance_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_ui_status_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flex_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_instance_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_call_flows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_service_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_service_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_stats_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_service_sids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_offline_activity_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_skills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_target_taskqueue_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_target_workflow_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_taskqueues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_worker_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_worker_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taskrouter_workspace_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlex_v1_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
