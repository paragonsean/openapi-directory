/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlexV1InsightsQuestionnairesQuestionApi_H
#define OAI_OAIFlexV1InsightsQuestionnairesQuestionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlex_v1_insights_questionnaires_question.h"
#include "OAIListInsightsQuestionnairesQuestionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlexV1InsightsQuestionnairesQuestionApi : public QObject {
    Q_OBJECT

public:
    OAIFlexV1InsightsQuestionnairesQuestionApi(const int timeOut = 0);
    ~OAIFlexV1InsightsQuestionnairesQuestionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  allow_na bool [required]
    * @param[in]  answer_set_id QString [required]
    * @param[in]  category_sid QString [required]
    * @param[in]  question QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void createInsightsQuestionnairesQuestion(const bool &allow_na, const QString &answer_set_id, const QString &category_sid, const QString &question, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  question_sid QString [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void deleteInsightsQuestionnairesQuestion(const QString &question_sid, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  category_sid QList<QString> [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listInsightsQuestionnairesQuestion(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &category_sid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  question_sid QString [required]
    * @param[in]  allow_na bool [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  answer_set_id QString [optional]
    * @param[in]  category_sid QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  question QString [optional]
    */
    virtual void updateInsightsQuestionnairesQuestion(const QString &question_sid, const bool &allow_na, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &answer_set_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &question = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker);
    void deleteInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker);
    void listInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker);
    void updateInsightsQuestionnairesQuestionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createInsightsQuestionnairesQuestionSignal(OAIFlex_v1_insights_questionnaires_question summary);
    void deleteInsightsQuestionnairesQuestionSignal();
    void listInsightsQuestionnairesQuestionSignal(OAIListInsightsQuestionnairesQuestionResponse summary);
    void updateInsightsQuestionnairesQuestionSignal(OAIFlex_v1_insights_questionnaires_question summary);


    void createInsightsQuestionnairesQuestionSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_questionnaires_question summary);
    void deleteInsightsQuestionnairesQuestionSignalFull(OAIHttpRequestWorker *worker);
    void listInsightsQuestionnairesQuestionSignalFull(OAIHttpRequestWorker *worker, OAIListInsightsQuestionnairesQuestionResponse summary);
    void updateInsightsQuestionnairesQuestionSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_questionnaires_question summary);

    Q_DECL_DEPRECATED_X("Use createInsightsQuestionnairesQuestionSignalError() instead")
    void createInsightsQuestionnairesQuestionSignalE(OAIFlex_v1_insights_questionnaires_question summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsQuestionnairesQuestionSignalError(OAIFlex_v1_insights_questionnaires_question summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInsightsQuestionnairesQuestionSignalError() instead")
    void deleteInsightsQuestionnairesQuestionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInsightsQuestionnairesQuestionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsQuestionnairesQuestionSignalError() instead")
    void listInsightsQuestionnairesQuestionSignalE(OAIListInsightsQuestionnairesQuestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsQuestionnairesQuestionSignalError(OAIListInsightsQuestionnairesQuestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsQuestionnairesQuestionSignalError() instead")
    void updateInsightsQuestionnairesQuestionSignalE(OAIFlex_v1_insights_questionnaires_question summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsQuestionnairesQuestionSignalError(OAIFlex_v1_insights_questionnaires_question summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createInsightsQuestionnairesQuestionSignalErrorFull() instead")
    void createInsightsQuestionnairesQuestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsQuestionnairesQuestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInsightsQuestionnairesQuestionSignalErrorFull() instead")
    void deleteInsightsQuestionnairesQuestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInsightsQuestionnairesQuestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsQuestionnairesQuestionSignalErrorFull() instead")
    void listInsightsQuestionnairesQuestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsQuestionnairesQuestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsQuestionnairesQuestionSignalErrorFull() instead")
    void updateInsightsQuestionnairesQuestionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsQuestionnairesQuestionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
