/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInteraction_channel_enum_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInteraction_channel_enum_type::OAIInteraction_channel_enum_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInteraction_channel_enum_type::OAIInteraction_channel_enum_type() {
    this->initializeModel();
}

OAIInteraction_channel_enum_type::~OAIInteraction_channel_enum_type() {}

void OAIInteraction_channel_enum_type::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInteraction_channel_enum_type::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInteraction_channel_enum_type::fromJson(QString jsonString) {
    
    if ( jsonString.compare("voice", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::VOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sms", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::SMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("email", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("web", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::WEB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("whatsapp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::WHATSAPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("chat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::CHAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("messenger", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::MESSENGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gbm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInteraction_channel_enum_type::GBM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInteraction_channel_enum_type::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInteraction_channel_enum_type::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInteraction_channel_enum_type::VOICE:
            val = "voice";
            break;
        case eOAIInteraction_channel_enum_type::SMS:
            val = "sms";
            break;
        case eOAIInteraction_channel_enum_type::EMAIL:
            val = "email";
            break;
        case eOAIInteraction_channel_enum_type::WEB:
            val = "web";
            break;
        case eOAIInteraction_channel_enum_type::WHATSAPP:
            val = "whatsapp";
            break;
        case eOAIInteraction_channel_enum_type::CHAT:
            val = "chat";
            break;
        case eOAIInteraction_channel_enum_type::MESSENGER:
            val = "messenger";
            break;
        case eOAIInteraction_channel_enum_type::GBM:
            val = "gbm";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInteraction_channel_enum_type::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInteraction_channel_enum_type::eOAIInteraction_channel_enum_type OAIInteraction_channel_enum_type::getValue() const {
    return m_value;
}

void OAIInteraction_channel_enum_type::setValue(const OAIInteraction_channel_enum_type::eOAIInteraction_channel_enum_type& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInteraction_channel_enum_type::isSet() const {
    
    return m_value_isSet;
}

bool OAIInteraction_channel_enum_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
