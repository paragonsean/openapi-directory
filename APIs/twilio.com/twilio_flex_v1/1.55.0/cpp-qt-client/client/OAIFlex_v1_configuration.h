/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFlex_v1_configuration.h
 *
 * 
 */

#ifndef OAIFlex_v1_configuration_H
#define OAIFlex_v1_configuration_H

#include <QJsonObject>

#include "OAIConfiguration_enum_status.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFlex_v1_configuration : public OAIObject {
public:
    OAIFlex_v1_configuration();
    OAIFlex_v1_configuration(QString json);
    ~OAIFlex_v1_configuration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    QJsonValue getAgentConvEndMethods() const;
    void setAgentConvEndMethods(const QJsonValue &agent_conv_end_methods);
    bool is_agent_conv_end_methods_Set() const;
    bool is_agent_conv_end_methods_Valid() const;

    QJsonValue getAttributes() const;
    void setAttributes(const QJsonValue &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    bool isCallRecordingEnabled() const;
    void setCallRecordingEnabled(const bool &call_recording_enabled);
    bool is_call_recording_enabled_Set() const;
    bool is_call_recording_enabled_Valid() const;

    QString getCallRecordingWebhookUrl() const;
    void setCallRecordingWebhookUrl(const QString &call_recording_webhook_url);
    bool is_call_recording_webhook_url_Set() const;
    bool is_call_recording_webhook_url_Valid() const;

    QList<QJsonValue> getChannelConfigs() const;
    void setChannelConfigs(const QList<QJsonValue> &channel_configs);
    bool is_channel_configs_Set() const;
    bool is_channel_configs_Valid() const;

    QString getChatServiceInstanceSid() const;
    void setChatServiceInstanceSid(const QString &chat_service_instance_sid);
    bool is_chat_service_instance_sid_Set() const;
    bool is_chat_service_instance_sid_Valid() const;

    QJsonValue getCitrixVoiceVdi() const;
    void setCitrixVoiceVdi(const QJsonValue &citrix_voice_vdi);
    bool is_citrix_voice_vdi_Set() const;
    bool is_citrix_voice_vdi_Valid() const;

    QJsonValue getCrmAttributes() const;
    void setCrmAttributes(const QJsonValue &crm_attributes);
    bool is_crm_attributes_Set() const;
    bool is_crm_attributes_Valid() const;

    QString getCrmCallbackUrl() const;
    void setCrmCallbackUrl(const QString &crm_callback_url);
    bool is_crm_callback_url_Set() const;
    bool is_crm_callback_url_Valid() const;

    bool isCrmEnabled() const;
    void setCrmEnabled(const bool &crm_enabled);
    bool is_crm_enabled_Set() const;
    bool is_crm_enabled_Valid() const;

    QString getCrmFallbackUrl() const;
    void setCrmFallbackUrl(const QString &crm_fallback_url);
    bool is_crm_fallback_url_Set() const;
    bool is_crm_fallback_url_Valid() const;

    QString getCrmType() const;
    void setCrmType(const QString &crm_type);
    bool is_crm_type_Set() const;
    bool is_crm_type_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QJsonValue getDebuggerIntegration() const;
    void setDebuggerIntegration(const QJsonValue &debugger_integration);
    bool is_debugger_integration_Set() const;
    bool is_debugger_integration_Valid() const;

    bool isFlexInsightsDrilldown() const;
    void setFlexInsightsDrilldown(const bool &flex_insights_drilldown);
    bool is_flex_insights_drilldown_Set() const;
    bool is_flex_insights_drilldown_Valid() const;

    QJsonValue getFlexInsightsHr() const;
    void setFlexInsightsHr(const QJsonValue &flex_insights_hr);
    bool is_flex_insights_hr_Set() const;
    bool is_flex_insights_hr_Valid() const;

    QString getFlexInstanceSid() const;
    void setFlexInstanceSid(const QString &flex_instance_sid);
    bool is_flex_instance_sid_Set() const;
    bool is_flex_instance_sid_Valid() const;

    QString getFlexServiceInstanceSid() const;
    void setFlexServiceInstanceSid(const QString &flex_service_instance_sid);
    bool is_flex_service_instance_sid_Set() const;
    bool is_flex_service_instance_sid_Valid() const;

    QJsonValue getFlexUiStatusReport() const;
    void setFlexUiStatusReport(const QJsonValue &flex_ui_status_report);
    bool is_flex_ui_status_report_Set() const;
    bool is_flex_ui_status_report_Valid() const;

    QString getFlexUrl() const;
    void setFlexUrl(const QString &flex_url);
    bool is_flex_url_Set() const;
    bool is_flex_url_Valid() const;

    QList<QJsonValue> getIntegrations() const;
    void setIntegrations(const QList<QJsonValue> &integrations);
    bool is_integrations_Set() const;
    bool is_integrations_Valid() const;

    QJsonValue getMarkdown() const;
    void setMarkdown(const QJsonValue &markdown);
    bool is_markdown_Set() const;
    bool is_markdown_Valid() const;

    QString getMessagingServiceInstanceSid() const;
    void setMessagingServiceInstanceSid(const QString &messaging_service_instance_sid);
    bool is_messaging_service_instance_sid_Set() const;
    bool is_messaging_service_instance_sid_Valid() const;

    QJsonValue getNotifications() const;
    void setNotifications(const QJsonValue &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    QJsonValue getOfflineConfig() const;
    void setOfflineConfig(const QJsonValue &offline_config);
    bool is_offline_config_Set() const;
    bool is_offline_config_Valid() const;

    QJsonValue getOutboundCallFlows() const;
    void setOutboundCallFlows(const QJsonValue &outbound_call_flows);
    bool is_outbound_call_flows_Set() const;
    bool is_outbound_call_flows_Valid() const;

    QJsonValue getPluginServiceAttributes() const;
    void setPluginServiceAttributes(const QJsonValue &plugin_service_attributes);
    bool is_plugin_service_attributes_Set() const;
    bool is_plugin_service_attributes_Valid() const;

    bool isPluginServiceEnabled() const;
    void setPluginServiceEnabled(const bool &plugin_service_enabled);
    bool is_plugin_service_enabled_Set() const;
    bool is_plugin_service_enabled_Valid() const;

    QJsonValue getPublicAttributes() const;
    void setPublicAttributes(const QJsonValue &public_attributes);
    bool is_public_attributes_Set() const;
    bool is_public_attributes_Valid() const;

    QJsonValue getQueueStatsConfiguration() const;
    void setQueueStatsConfiguration(const QJsonValue &queue_stats_configuration);
    bool is_queue_stats_configuration_Set() const;
    bool is_queue_stats_configuration_Valid() const;

    QString getRuntimeDomain() const;
    void setRuntimeDomain(const QString &runtime_domain);
    bool is_runtime_domain_Set() const;
    bool is_runtime_domain_Valid() const;

    QList<QString> getServerlessServiceSids() const;
    void setServerlessServiceSids(const QList<QString> &serverless_service_sids);
    bool is_serverless_service_sids_Set() const;
    bool is_serverless_service_sids_Valid() const;

    QString getServiceVersion() const;
    void setServiceVersion(const QString &service_version);
    bool is_service_version_Set() const;
    bool is_service_version_Valid() const;

    OAIConfiguration_enum_status getStatus() const;
    void setStatus(const OAIConfiguration_enum_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTaskrouterOfflineActivitySid() const;
    void setTaskrouterOfflineActivitySid(const QString &taskrouter_offline_activity_sid);
    bool is_taskrouter_offline_activity_sid_Set() const;
    bool is_taskrouter_offline_activity_sid_Valid() const;

    QList<QJsonValue> getTaskrouterSkills() const;
    void setTaskrouterSkills(const QList<QJsonValue> &taskrouter_skills);
    bool is_taskrouter_skills_Set() const;
    bool is_taskrouter_skills_Valid() const;

    QString getTaskrouterTargetTaskqueueSid() const;
    void setTaskrouterTargetTaskqueueSid(const QString &taskrouter_target_taskqueue_sid);
    bool is_taskrouter_target_taskqueue_sid_Set() const;
    bool is_taskrouter_target_taskqueue_sid_Valid() const;

    QString getTaskrouterTargetWorkflowSid() const;
    void setTaskrouterTargetWorkflowSid(const QString &taskrouter_target_workflow_sid);
    bool is_taskrouter_target_workflow_sid_Set() const;
    bool is_taskrouter_target_workflow_sid_Valid() const;

    QList<QJsonValue> getTaskrouterTaskqueues() const;
    void setTaskrouterTaskqueues(const QList<QJsonValue> &taskrouter_taskqueues);
    bool is_taskrouter_taskqueues_Set() const;
    bool is_taskrouter_taskqueues_Valid() const;

    QJsonValue getTaskrouterWorkerAttributes() const;
    void setTaskrouterWorkerAttributes(const QJsonValue &taskrouter_worker_attributes);
    bool is_taskrouter_worker_attributes_Set() const;
    bool is_taskrouter_worker_attributes_Valid() const;

    QJsonValue getTaskrouterWorkerChannels() const;
    void setTaskrouterWorkerChannels(const QJsonValue &taskrouter_worker_channels);
    bool is_taskrouter_worker_channels_Set() const;
    bool is_taskrouter_worker_channels_Valid() const;

    QString getTaskrouterWorkspaceSid() const;
    void setTaskrouterWorkspaceSid(const QString &taskrouter_workspace_sid);
    bool is_taskrouter_workspace_sid_Set() const;
    bool is_taskrouter_workspace_sid_Valid() const;

    QJsonValue getUiAttributes() const;
    void setUiAttributes(const QJsonValue &ui_attributes);
    bool is_ui_attributes_Set() const;
    bool is_ui_attributes_Valid() const;

    QJsonValue getUiDependencies() const;
    void setUiDependencies(const QJsonValue &ui_dependencies);
    bool is_ui_dependencies_Set() const;
    bool is_ui_dependencies_Valid() const;

    QString getUiLanguage() const;
    void setUiLanguage(const QString &ui_language);
    bool is_ui_language_Set() const;
    bool is_ui_language_Valid() const;

    QString getUiVersion() const;
    void setUiVersion(const QString &ui_version);
    bool is_ui_version_Set() const;
    bool is_ui_version_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    QJsonValue m_agent_conv_end_methods;
    bool m_agent_conv_end_methods_isSet;
    bool m_agent_conv_end_methods_isValid;

    QJsonValue m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    bool m_call_recording_enabled;
    bool m_call_recording_enabled_isSet;
    bool m_call_recording_enabled_isValid;

    QString m_call_recording_webhook_url;
    bool m_call_recording_webhook_url_isSet;
    bool m_call_recording_webhook_url_isValid;

    QList<QJsonValue> m_channel_configs;
    bool m_channel_configs_isSet;
    bool m_channel_configs_isValid;

    QString m_chat_service_instance_sid;
    bool m_chat_service_instance_sid_isSet;
    bool m_chat_service_instance_sid_isValid;

    QJsonValue m_citrix_voice_vdi;
    bool m_citrix_voice_vdi_isSet;
    bool m_citrix_voice_vdi_isValid;

    QJsonValue m_crm_attributes;
    bool m_crm_attributes_isSet;
    bool m_crm_attributes_isValid;

    QString m_crm_callback_url;
    bool m_crm_callback_url_isSet;
    bool m_crm_callback_url_isValid;

    bool m_crm_enabled;
    bool m_crm_enabled_isSet;
    bool m_crm_enabled_isValid;

    QString m_crm_fallback_url;
    bool m_crm_fallback_url_isSet;
    bool m_crm_fallback_url_isValid;

    QString m_crm_type;
    bool m_crm_type_isSet;
    bool m_crm_type_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QJsonValue m_debugger_integration;
    bool m_debugger_integration_isSet;
    bool m_debugger_integration_isValid;

    bool m_flex_insights_drilldown;
    bool m_flex_insights_drilldown_isSet;
    bool m_flex_insights_drilldown_isValid;

    QJsonValue m_flex_insights_hr;
    bool m_flex_insights_hr_isSet;
    bool m_flex_insights_hr_isValid;

    QString m_flex_instance_sid;
    bool m_flex_instance_sid_isSet;
    bool m_flex_instance_sid_isValid;

    QString m_flex_service_instance_sid;
    bool m_flex_service_instance_sid_isSet;
    bool m_flex_service_instance_sid_isValid;

    QJsonValue m_flex_ui_status_report;
    bool m_flex_ui_status_report_isSet;
    bool m_flex_ui_status_report_isValid;

    QString m_flex_url;
    bool m_flex_url_isSet;
    bool m_flex_url_isValid;

    QList<QJsonValue> m_integrations;
    bool m_integrations_isSet;
    bool m_integrations_isValid;

    QJsonValue m_markdown;
    bool m_markdown_isSet;
    bool m_markdown_isValid;

    QString m_messaging_service_instance_sid;
    bool m_messaging_service_instance_sid_isSet;
    bool m_messaging_service_instance_sid_isValid;

    QJsonValue m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    QJsonValue m_offline_config;
    bool m_offline_config_isSet;
    bool m_offline_config_isValid;

    QJsonValue m_outbound_call_flows;
    bool m_outbound_call_flows_isSet;
    bool m_outbound_call_flows_isValid;

    QJsonValue m_plugin_service_attributes;
    bool m_plugin_service_attributes_isSet;
    bool m_plugin_service_attributes_isValid;

    bool m_plugin_service_enabled;
    bool m_plugin_service_enabled_isSet;
    bool m_plugin_service_enabled_isValid;

    QJsonValue m_public_attributes;
    bool m_public_attributes_isSet;
    bool m_public_attributes_isValid;

    QJsonValue m_queue_stats_configuration;
    bool m_queue_stats_configuration_isSet;
    bool m_queue_stats_configuration_isValid;

    QString m_runtime_domain;
    bool m_runtime_domain_isSet;
    bool m_runtime_domain_isValid;

    QList<QString> m_serverless_service_sids;
    bool m_serverless_service_sids_isSet;
    bool m_serverless_service_sids_isValid;

    QString m_service_version;
    bool m_service_version_isSet;
    bool m_service_version_isValid;

    OAIConfiguration_enum_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_taskrouter_offline_activity_sid;
    bool m_taskrouter_offline_activity_sid_isSet;
    bool m_taskrouter_offline_activity_sid_isValid;

    QList<QJsonValue> m_taskrouter_skills;
    bool m_taskrouter_skills_isSet;
    bool m_taskrouter_skills_isValid;

    QString m_taskrouter_target_taskqueue_sid;
    bool m_taskrouter_target_taskqueue_sid_isSet;
    bool m_taskrouter_target_taskqueue_sid_isValid;

    QString m_taskrouter_target_workflow_sid;
    bool m_taskrouter_target_workflow_sid_isSet;
    bool m_taskrouter_target_workflow_sid_isValid;

    QList<QJsonValue> m_taskrouter_taskqueues;
    bool m_taskrouter_taskqueues_isSet;
    bool m_taskrouter_taskqueues_isValid;

    QJsonValue m_taskrouter_worker_attributes;
    bool m_taskrouter_worker_attributes_isSet;
    bool m_taskrouter_worker_attributes_isValid;

    QJsonValue m_taskrouter_worker_channels;
    bool m_taskrouter_worker_channels_isSet;
    bool m_taskrouter_worker_channels_isValid;

    QString m_taskrouter_workspace_sid;
    bool m_taskrouter_workspace_sid_isSet;
    bool m_taskrouter_workspace_sid_isValid;

    QJsonValue m_ui_attributes;
    bool m_ui_attributes_isSet;
    bool m_ui_attributes_isValid;

    QJsonValue m_ui_dependencies;
    bool m_ui_dependencies_isSet;
    bool m_ui_dependencies_isValid;

    QString m_ui_language;
    bool m_ui_language_isSet;
    bool m_ui_language_isValid;

    QString m_ui_version;
    bool m_ui_version_isSet;
    bool m_ui_version_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFlex_v1_configuration)

#endif // OAIFlex_v1_configuration_H
