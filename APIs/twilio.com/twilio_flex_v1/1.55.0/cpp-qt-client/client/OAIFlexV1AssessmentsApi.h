/**
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlexV1AssessmentsApi_H
#define OAI_OAIFlexV1AssessmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlex_v1_insights_assessments.h"
#include "OAIListInsightsAssessmentsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlexV1AssessmentsApi : public QObject {
    Q_OBJECT

public:
    OAIFlexV1AssessmentsApi(const int timeOut = 0);
    ~OAIFlexV1AssessmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  agent_id QString [required]
    * @param[in]  answer_id QString [required]
    * @param[in]  answer_text QString [required]
    * @param[in]  category_name QString [required]
    * @param[in]  category_sid QString [required]
    * @param[in]  metric_id QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  offset double [required]
    * @param[in]  questionnaire_sid QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void createInsightsAssessments(const QString &agent_id, const QString &answer_id, const QString &answer_text, const QString &category_name, const QString &category_sid, const QString &metric_id, const QString &metric_name, const double &offset, const QString &questionnaire_sid, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  segment_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listInsightsAssessments(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &segment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assessment_sid QString [required]
    * @param[in]  answer_id QString [required]
    * @param[in]  answer_text QString [required]
    * @param[in]  offset double [required]
    * @param[in]  authorization QString [optional]
    */
    virtual void updateInsightsAssessments(const QString &assessment_sid, const QString &answer_id, const QString &answer_text, const double &offset, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createInsightsAssessmentsCallback(OAIHttpRequestWorker *worker);
    void listInsightsAssessmentsCallback(OAIHttpRequestWorker *worker);
    void updateInsightsAssessmentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createInsightsAssessmentsSignal(OAIFlex_v1_insights_assessments summary);
    void listInsightsAssessmentsSignal(OAIListInsightsAssessmentsResponse summary);
    void updateInsightsAssessmentsSignal(OAIFlex_v1_insights_assessments summary);


    void createInsightsAssessmentsSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_assessments summary);
    void listInsightsAssessmentsSignalFull(OAIHttpRequestWorker *worker, OAIListInsightsAssessmentsResponse summary);
    void updateInsightsAssessmentsSignalFull(OAIHttpRequestWorker *worker, OAIFlex_v1_insights_assessments summary);

    Q_DECL_DEPRECATED_X("Use createInsightsAssessmentsSignalError() instead")
    void createInsightsAssessmentsSignalE(OAIFlex_v1_insights_assessments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsAssessmentsSignalError(OAIFlex_v1_insights_assessments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsAssessmentsSignalError() instead")
    void listInsightsAssessmentsSignalE(OAIListInsightsAssessmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsAssessmentsSignalError(OAIListInsightsAssessmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsAssessmentsSignalError() instead")
    void updateInsightsAssessmentsSignalE(OAIFlex_v1_insights_assessments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsAssessmentsSignalError(OAIFlex_v1_insights_assessments summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createInsightsAssessmentsSignalErrorFull() instead")
    void createInsightsAssessmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInsightsAssessmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsAssessmentsSignalErrorFull() instead")
    void listInsightsAssessmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsAssessmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInsightsAssessmentsSignalErrorFull() instead")
    void updateInsightsAssessmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInsightsAssessmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
