/**
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StudioV2FlowTestUser model module.
 * @module model/StudioV2FlowTestUser
 * @version 1.55.0
 */
class StudioV2FlowTestUser {
    /**
     * Constructs a new <code>StudioV2FlowTestUser</code>.
     * @alias module:model/StudioV2FlowTestUser
     */
    constructor() { 
        
        StudioV2FlowTestUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StudioV2FlowTestUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudioV2FlowTestUser} obj Optional instance to populate.
     * @return {module:model/StudioV2FlowTestUser} The populated <code>StudioV2FlowTestUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudioV2FlowTestUser();

            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('test_users')) {
                obj['test_users'] = ApiClient.convertToType(data['test_users'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudioV2FlowTestUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudioV2FlowTestUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['test_users'])) {
            throw new Error("Expected the field `test_users` to be an array in the JSON data but got " + data['test_users']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Unique identifier of the flow.
 * @member {String} sid
 */
StudioV2FlowTestUser.prototype['sid'] = undefined;

/**
 * List of test user identities that can test draft versions of the flow.
 * @member {Array.<String>} test_users
 */
StudioV2FlowTestUser.prototype['test_users'] = undefined;

/**
 * The URL of this resource.
 * @member {String} url
 */
StudioV2FlowTestUser.prototype['url'] = undefined;






export default StudioV2FlowTestUser;

