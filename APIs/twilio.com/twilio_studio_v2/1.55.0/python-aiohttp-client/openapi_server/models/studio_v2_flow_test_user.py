# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StudioV2FlowTestUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sid: str=None, test_users: List[str]=None, url: str=None):
        """StudioV2FlowTestUser - a model defined in OpenAPI

        :param sid: The sid of this StudioV2FlowTestUser.
        :param test_users: The test_users of this StudioV2FlowTestUser.
        :param url: The url of this StudioV2FlowTestUser.
        """
        self.openapi_types = {
            'sid': str,
            'test_users': List[str],
            'url': str
        }

        self.attribute_map = {
            'sid': 'sid',
            'test_users': 'test_users',
            'url': 'url'
        }

        self._sid = sid
        self._test_users = test_users
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StudioV2FlowTestUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The studio.v2.flow.test_user of this StudioV2FlowTestUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sid(self):
        """Gets the sid of this StudioV2FlowTestUser.

        Unique identifier of the flow.

        :return: The sid of this StudioV2FlowTestUser.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this StudioV2FlowTestUser.

        Unique identifier of the flow.

        :param sid: The sid of this StudioV2FlowTestUser.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^FW[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^FW[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def test_users(self):
        """Gets the test_users of this StudioV2FlowTestUser.

        List of test user identities that can test draft versions of the flow.

        :return: The test_users of this StudioV2FlowTestUser.
        :rtype: List[str]
        """
        return self._test_users

    @test_users.setter
    def test_users(self, test_users):
        """Sets the test_users of this StudioV2FlowTestUser.

        List of test user identities that can test draft versions of the flow.

        :param test_users: The test_users of this StudioV2FlowTestUser.
        :type test_users: List[str]
        """

        self._test_users = test_users

    @property
    def url(self):
        """Gets the url of this StudioV2FlowTestUser.

        The URL of this resource.

        :return: The url of this StudioV2FlowTestUser.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StudioV2FlowTestUser.

        The URL of this resource.

        :param url: The url of this StudioV2FlowTestUser.
        :type url: str
        """

        self._url = url
