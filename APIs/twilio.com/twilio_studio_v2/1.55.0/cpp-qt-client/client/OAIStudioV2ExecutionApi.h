/**
 * Twilio - Studio
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStudioV2ExecutionApi_H
#define OAI_OAIStudioV2ExecutionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExecution_enum_status.h"
#include "OAIListExecutionResponse.h"
#include "OAIStudio_v2_flow_execution.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStudioV2ExecutionApi : public QObject {
    Q_OBJECT

public:
    OAIStudioV2ExecutionApi(const int timeOut = 0);
    ~OAIStudioV2ExecutionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  parameters QJsonValue [optional]
    */
    virtual void createExecution(const QString &flow_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QJsonValue> &parameters = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteExecution(const QString &flow_sid, const QString &sid);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchExecution(const QString &flow_sid, const QString &sid);

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  date_created_from QDateTime [optional]
    * @param[in]  date_created_to QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listExecution(const QString &flow_sid, const ::OpenAPI::OptionalParam<QDateTime> &date_created_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  flow_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  status OAIExecution_enum_status [required]
    */
    virtual void updateExecution(const QString &flow_sid, const QString &sid, const OAIExecution_enum_status &status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createExecutionCallback(OAIHttpRequestWorker *worker);
    void deleteExecutionCallback(OAIHttpRequestWorker *worker);
    void fetchExecutionCallback(OAIHttpRequestWorker *worker);
    void listExecutionCallback(OAIHttpRequestWorker *worker);
    void updateExecutionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createExecutionSignal(OAIStudio_v2_flow_execution summary);
    void deleteExecutionSignal();
    void fetchExecutionSignal(OAIStudio_v2_flow_execution summary);
    void listExecutionSignal(OAIListExecutionResponse summary);
    void updateExecutionSignal(OAIStudio_v2_flow_execution summary);


    void createExecutionSignalFull(OAIHttpRequestWorker *worker, OAIStudio_v2_flow_execution summary);
    void deleteExecutionSignalFull(OAIHttpRequestWorker *worker);
    void fetchExecutionSignalFull(OAIHttpRequestWorker *worker, OAIStudio_v2_flow_execution summary);
    void listExecutionSignalFull(OAIHttpRequestWorker *worker, OAIListExecutionResponse summary);
    void updateExecutionSignalFull(OAIHttpRequestWorker *worker, OAIStudio_v2_flow_execution summary);

    Q_DECL_DEPRECATED_X("Use createExecutionSignalError() instead")
    void createExecutionSignalE(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createExecutionSignalError(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteExecutionSignalError() instead")
    void deleteExecutionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteExecutionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchExecutionSignalError() instead")
    void fetchExecutionSignalE(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchExecutionSignalError(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExecutionSignalError() instead")
    void listExecutionSignalE(OAIListExecutionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listExecutionSignalError(OAIListExecutionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExecutionSignalError() instead")
    void updateExecutionSignalE(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExecutionSignalError(OAIStudio_v2_flow_execution summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createExecutionSignalErrorFull() instead")
    void createExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteExecutionSignalErrorFull() instead")
    void deleteExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchExecutionSignalErrorFull() instead")
    void fetchExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExecutionSignalErrorFull() instead")
    void listExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExecutionSignalErrorFull() instead")
    void updateExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
