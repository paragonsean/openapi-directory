# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MicrovisorV1Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, app: object=None, date_created: datetime=None, date_updated: datetime=None, links: object=None, logging: object=None, sid: str=None, unique_name: str=None, url: str=None):
        """MicrovisorV1Device - a model defined in OpenAPI

        :param account_sid: The account_sid of this MicrovisorV1Device.
        :param app: The app of this MicrovisorV1Device.
        :param date_created: The date_created of this MicrovisorV1Device.
        :param date_updated: The date_updated of this MicrovisorV1Device.
        :param links: The links of this MicrovisorV1Device.
        :param logging: The logging of this MicrovisorV1Device.
        :param sid: The sid of this MicrovisorV1Device.
        :param unique_name: The unique_name of this MicrovisorV1Device.
        :param url: The url of this MicrovisorV1Device.
        """
        self.openapi_types = {
            'account_sid': str,
            'app': object,
            'date_created': datetime,
            'date_updated': datetime,
            'links': object,
            'logging': object,
            'sid': str,
            'unique_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'app': 'app',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'links': 'links',
            'logging': 'logging',
            'sid': 'sid',
            'unique_name': 'unique_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._app = app
        self._date_created = date_created
        self._date_updated = date_updated
        self._links = links
        self._logging = logging
        self._sid = sid
        self._unique_name = unique_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MicrovisorV1Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The microvisor.v1.device of this MicrovisorV1Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this MicrovisorV1Device.

        The unique SID identifier of the Account.

        :return: The account_sid of this MicrovisorV1Device.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this MicrovisorV1Device.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this MicrovisorV1Device.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def app(self):
        """Gets the app of this MicrovisorV1Device.

        Information about the target App and the App reported by this Device. Contains the properties `target_sid`, `date_targeted`, `update_status` (one of `up-to-date`, `pending` and `error`), `update_error_code`, `reported_sid` and `date_reported`.

        :return: The app of this MicrovisorV1Device.
        :rtype: object
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this MicrovisorV1Device.

        Information about the target App and the App reported by this Device. Contains the properties `target_sid`, `date_targeted`, `update_status` (one of `up-to-date`, `pending` and `error`), `update_error_code`, `reported_sid` and `date_reported`.

        :param app: The app of this MicrovisorV1Device.
        :type app: object
        """

        self._app = app

    @property
    def date_created(self):
        """Gets the date_created of this MicrovisorV1Device.

        The date that this Device was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this MicrovisorV1Device.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this MicrovisorV1Device.

        The date that this Device was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this MicrovisorV1Device.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this MicrovisorV1Device.

        The date that this Device was last updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this MicrovisorV1Device.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MicrovisorV1Device.

        The date that this Device was last updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this MicrovisorV1Device.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def links(self):
        """Gets the links of this MicrovisorV1Device.

        The absolute URLs of related resources.

        :return: The links of this MicrovisorV1Device.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MicrovisorV1Device.

        The absolute URLs of related resources.

        :param links: The links of this MicrovisorV1Device.
        :type links: object
        """

        self._links = links

    @property
    def logging(self):
        """Gets the logging of this MicrovisorV1Device.

        Object specifying whether application logging is enabled for this Device. Contains the properties `enabled` and `date_expires`.

        :return: The logging of this MicrovisorV1Device.
        :rtype: object
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this MicrovisorV1Device.

        Object specifying whether application logging is enabled for this Device. Contains the properties `enabled` and `date_expires`.

        :param logging: The logging of this MicrovisorV1Device.
        :type logging: object
        """

        self._logging = logging

    @property
    def sid(self):
        """Gets the sid of this MicrovisorV1Device.

        A 34-character string that uniquely identifies this Device.

        :return: The sid of this MicrovisorV1Device.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this MicrovisorV1Device.

        A 34-character string that uniquely identifies this Device.

        :param sid: The sid of this MicrovisorV1Device.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^UV[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^UV[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def unique_name(self):
        """Gets the unique_name of this MicrovisorV1Device.

        A developer-defined string that uniquely identifies the Device. This value must be unique for all Devices on this Account. The `unique_name` value may be used as an alternative to the `sid` in the URL path to address the resource.

        :return: The unique_name of this MicrovisorV1Device.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this MicrovisorV1Device.

        A developer-defined string that uniquely identifies the Device. This value must be unique for all Devices on this Account. The `unique_name` value may be used as an alternative to the `sid` in the URL path to address the resource.

        :param unique_name: The unique_name of this MicrovisorV1Device.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this MicrovisorV1Device.

        The URL of this resource.

        :return: The url of this MicrovisorV1Device.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MicrovisorV1Device.

        The URL of this resource.

        :param url: The url of this MicrovisorV1Device.
        :type url: str
        """

        self._url = url
