# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MicrovisorV1AccountConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_updated: datetime=None, key: str=None, url: str=None, value: str=None):
        """MicrovisorV1AccountConfig - a model defined in OpenAPI

        :param date_updated: The date_updated of this MicrovisorV1AccountConfig.
        :param key: The key of this MicrovisorV1AccountConfig.
        :param url: The url of this MicrovisorV1AccountConfig.
        :param value: The value of this MicrovisorV1AccountConfig.
        """
        self.openapi_types = {
            'date_updated': datetime,
            'key': str,
            'url': str,
            'value': str
        }

        self.attribute_map = {
            'date_updated': 'date_updated',
            'key': 'key',
            'url': 'url',
            'value': 'value'
        }

        self._date_updated = date_updated
        self._key = key
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MicrovisorV1AccountConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The microvisor.v1.account_config of this MicrovisorV1AccountConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_updated(self):
        """Gets the date_updated of this MicrovisorV1AccountConfig.


        :return: The date_updated of this MicrovisorV1AccountConfig.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this MicrovisorV1AccountConfig.


        :param date_updated: The date_updated of this MicrovisorV1AccountConfig.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def key(self):
        """Gets the key of this MicrovisorV1AccountConfig.

        The config key; up to 100 characters.

        :return: The key of this MicrovisorV1AccountConfig.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MicrovisorV1AccountConfig.

        The config key; up to 100 characters.

        :param key: The key of this MicrovisorV1AccountConfig.
        :type key: str
        """

        self._key = key

    @property
    def url(self):
        """Gets the url of this MicrovisorV1AccountConfig.

        The absolute URL of the Config.

        :return: The url of this MicrovisorV1AccountConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MicrovisorV1AccountConfig.

        The absolute URL of the Config.

        :param url: The url of this MicrovisorV1AccountConfig.
        :type url: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this MicrovisorV1AccountConfig.

        The config value; up to 4096 characters.

        :return: The value of this MicrovisorV1AccountConfig.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MicrovisorV1AccountConfig.

        The config value; up to 4096 characters.

        :param value: The value of this MicrovisorV1AccountConfig.
        :type value: str
        """

        self._value = value
