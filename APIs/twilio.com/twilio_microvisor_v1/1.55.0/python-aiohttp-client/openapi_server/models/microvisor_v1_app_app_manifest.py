# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MicrovisorV1AppAppManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_sid: str=None, encoded_bytes: str=None, hash: str=None, url: str=None):
        """MicrovisorV1AppAppManifest - a model defined in OpenAPI

        :param app_sid: The app_sid of this MicrovisorV1AppAppManifest.
        :param encoded_bytes: The encoded_bytes of this MicrovisorV1AppAppManifest.
        :param hash: The hash of this MicrovisorV1AppAppManifest.
        :param url: The url of this MicrovisorV1AppAppManifest.
        """
        self.openapi_types = {
            'app_sid': str,
            'encoded_bytes': str,
            'hash': str,
            'url': str
        }

        self.attribute_map = {
            'app_sid': 'app_sid',
            'encoded_bytes': 'encoded_bytes',
            'hash': 'hash',
            'url': 'url'
        }

        self._app_sid = app_sid
        self._encoded_bytes = encoded_bytes
        self._hash = hash
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MicrovisorV1AppAppManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The microvisor.v1.app.app_manifest of this MicrovisorV1AppAppManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_sid(self):
        """Gets the app_sid of this MicrovisorV1AppAppManifest.

        A 34-character string that uniquely identifies this App.

        :return: The app_sid of this MicrovisorV1AppAppManifest.
        :rtype: str
        """
        return self._app_sid

    @app_sid.setter
    def app_sid(self, app_sid):
        """Sets the app_sid of this MicrovisorV1AppAppManifest.

        A 34-character string that uniquely identifies this App.

        :param app_sid: The app_sid of this MicrovisorV1AppAppManifest.
        :type app_sid: str
        """
        if app_sid is not None and len(app_sid) > 34:
            raise ValueError("Invalid value for `app_sid`, length must be less than or equal to `34`")
        if app_sid is not None and len(app_sid) < 34:
            raise ValueError("Invalid value for `app_sid`, length must be greater than or equal to `34`")
        if app_sid is not None and not re.search(r'^KA[0-9a-fA-F]{32}$', app_sid):
            raise ValueError("Invalid value for `app_sid`, must be a follow pattern or equal to `/^KA[0-9a-fA-F]{32}$/`")

        self._app_sid = app_sid

    @property
    def encoded_bytes(self):
        """Gets the encoded_bytes of this MicrovisorV1AppAppManifest.

        The base-64 encoded manifest

        :return: The encoded_bytes of this MicrovisorV1AppAppManifest.
        :rtype: str
        """
        return self._encoded_bytes

    @encoded_bytes.setter
    def encoded_bytes(self, encoded_bytes):
        """Sets the encoded_bytes of this MicrovisorV1AppAppManifest.

        The base-64 encoded manifest

        :param encoded_bytes: The encoded_bytes of this MicrovisorV1AppAppManifest.
        :type encoded_bytes: str
        """

        self._encoded_bytes = encoded_bytes

    @property
    def hash(self):
        """Gets the hash of this MicrovisorV1AppAppManifest.

        App manifest hash represented as `hash_algorithm:hash_value`.

        :return: The hash of this MicrovisorV1AppAppManifest.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this MicrovisorV1AppAppManifest.

        App manifest hash represented as `hash_algorithm:hash_value`.

        :param hash: The hash of this MicrovisorV1AppAppManifest.
        :type hash: str
        """

        self._hash = hash

    @property
    def url(self):
        """Gets the url of this MicrovisorV1AppAppManifest.

        The absolute URL of this Manifest.

        :return: The url of this MicrovisorV1AppAppManifest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MicrovisorV1AppAppManifest.

        The absolute URL of this Manifest.

        :param url: The url of this MicrovisorV1AppAppManifest.
        :type url: str
        """

        self._url = url
