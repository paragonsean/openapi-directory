/*
 * Twilio - Microvisor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListDeviceSecretResponse;
import org.openapitools.client.model.MicrovisorV1DeviceDeviceSecret;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MicrovisorV1DeviceSecretApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MicrovisorV1DeviceSecretApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MicrovisorV1DeviceSecretApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeviceSecret
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSecretCall(String deviceSid, String key, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://microvisor.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Devices/{DeviceSid}/Secrets"
            .replace("{" + "DeviceSid" + "}", localVarApiClient.escapeString(deviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("Key", key);
        }

        if (value != null) {
            localVarFormParams.put("Value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceSecretValidateBeforeCall(String deviceSid, String key, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceSid' is set
        if (deviceSid == null) {
            throw new ApiException("Missing the required parameter 'deviceSid' when calling createDeviceSecret(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createDeviceSecret(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling createDeviceSecret(Async)");
        }

        return createDeviceSecretCall(deviceSid, key, value, _callback);

    }

    /**
     * 
     * Create a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @return MicrovisorV1DeviceDeviceSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public MicrovisorV1DeviceDeviceSecret createDeviceSecret(String deviceSid, String key, String value) throws ApiException {
        ApiResponse<MicrovisorV1DeviceDeviceSecret> localVarResp = createDeviceSecretWithHttpInfo(deviceSid, key, value);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @return ApiResponse&lt;MicrovisorV1DeviceDeviceSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrovisorV1DeviceDeviceSecret> createDeviceSecretWithHttpInfo(String deviceSid, String key, String value) throws ApiException {
        okhttp3.Call localVarCall = createDeviceSecretValidateBeforeCall(deviceSid, key, value, null);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceSecretAsync(String deviceSid, String key, String value, final ApiCallback<MicrovisorV1DeviceDeviceSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceSecretValidateBeforeCall(deviceSid, key, value, _callback);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeviceSecret
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSecretCall(String deviceSid, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://microvisor.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Devices/{DeviceSid}/Secrets/{Key}"
            .replace("{" + "DeviceSid" + "}", localVarApiClient.escapeString(deviceSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeviceSecretValidateBeforeCall(String deviceSid, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceSid' is set
        if (deviceSid == null) {
            throw new ApiException("Missing the required parameter 'deviceSid' when calling deleteDeviceSecret(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteDeviceSecret(Async)");
        }

        return deleteDeviceSecretCall(deviceSid, key, _callback);

    }

    /**
     * 
     * Delete a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeviceSecret(String deviceSid, String key) throws ApiException {
        deleteDeviceSecretWithHttpInfo(deviceSid, key);
    }

    /**
     * 
     * Delete a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeviceSecretWithHttpInfo(String deviceSid, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteDeviceSecretValidateBeforeCall(deviceSid, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeviceSecretAsync(String deviceSid, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeviceSecretValidateBeforeCall(deviceSid, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchDeviceSecret
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchDeviceSecretCall(String deviceSid, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://microvisor.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Devices/{DeviceSid}/Secrets/{Key}"
            .replace("{" + "DeviceSid" + "}", localVarApiClient.escapeString(deviceSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchDeviceSecretValidateBeforeCall(String deviceSid, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceSid' is set
        if (deviceSid == null) {
            throw new ApiException("Missing the required parameter 'deviceSid' when calling fetchDeviceSecret(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling fetchDeviceSecret(Async)");
        }

        return fetchDeviceSecretCall(deviceSid, key, _callback);

    }

    /**
     * 
     * Retrieve a Secret for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @return MicrovisorV1DeviceDeviceSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MicrovisorV1DeviceDeviceSecret fetchDeviceSecret(String deviceSid, String key) throws ApiException {
        ApiResponse<MicrovisorV1DeviceDeviceSecret> localVarResp = fetchDeviceSecretWithHttpInfo(deviceSid, key);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a Secret for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @return ApiResponse&lt;MicrovisorV1DeviceDeviceSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrovisorV1DeviceDeviceSecret> fetchDeviceSecretWithHttpInfo(String deviceSid, String key) throws ApiException {
        okhttp3.Call localVarCall = fetchDeviceSecretValidateBeforeCall(deviceSid, key, null);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a Secret for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchDeviceSecretAsync(String deviceSid, String key, final ApiCallback<MicrovisorV1DeviceDeviceSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchDeviceSecretValidateBeforeCall(deviceSid, key, _callback);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeviceSecret
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeviceSecretCall(String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://microvisor.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Devices/{DeviceSid}/Secrets"
            .replace("{" + "DeviceSid" + "}", localVarApiClient.escapeString(deviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeviceSecretValidateBeforeCall(String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceSid' is set
        if (deviceSid == null) {
            throw new ApiException("Missing the required parameter 'deviceSid' when calling listDeviceSecret(Async)");
        }

        return listDeviceSecretCall(deviceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Secrets for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListDeviceSecretResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDeviceSecretResponse listDeviceSecret(String deviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListDeviceSecretResponse> localVarResp = listDeviceSecretWithHttpInfo(deviceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Secrets for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListDeviceSecretResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDeviceSecretResponse> listDeviceSecretWithHttpInfo(String deviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listDeviceSecretValidateBeforeCall(deviceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListDeviceSecretResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Secrets for a Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeviceSecretAsync(String deviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListDeviceSecretResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeviceSecretValidateBeforeCall(deviceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListDeviceSecretResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceSecret
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSecretCall(String deviceSid, String key, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://microvisor.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Devices/{DeviceSid}/Secrets/{Key}"
            .replace("{" + "DeviceSid" + "}", localVarApiClient.escapeString(deviceSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (value != null) {
            localVarFormParams.put("Value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceSecretValidateBeforeCall(String deviceSid, String key, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceSid' is set
        if (deviceSid == null) {
            throw new ApiException("Missing the required parameter 'deviceSid' when calling updateDeviceSecret(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateDeviceSecret(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateDeviceSecret(Async)");
        }

        return updateDeviceSecretCall(deviceSid, key, value, _callback);

    }

    /**
     * 
     * Update a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @return MicrovisorV1DeviceDeviceSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MicrovisorV1DeviceDeviceSecret updateDeviceSecret(String deviceSid, String key, String value) throws ApiException {
        ApiResponse<MicrovisorV1DeviceDeviceSecret> localVarResp = updateDeviceSecretWithHttpInfo(deviceSid, key, value);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @return ApiResponse&lt;MicrovisorV1DeviceDeviceSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrovisorV1DeviceDeviceSecret> updateDeviceSecretWithHttpInfo(String deviceSid, String key, String value) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceSecretValidateBeforeCall(deviceSid, key, value, null);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a secret for a Microvisor Device.
     * @param deviceSid A 34-character string that uniquely identifies the Device. (required)
     * @param key The secret key; up to 100 characters. (required)
     * @param value The secret value; up to 4096 characters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceSecretAsync(String deviceSid, String key, String value, final ApiCallback<MicrovisorV1DeviceDeviceSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceSecretValidateBeforeCall(deviceSid, key, value, _callback);
        Type localVarReturnType = new TypeToken<MicrovisorV1DeviceDeviceSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
