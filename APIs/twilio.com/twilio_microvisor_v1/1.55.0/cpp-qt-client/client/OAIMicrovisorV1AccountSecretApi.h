/**
 * Twilio - Microvisor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMicrovisorV1AccountSecretApi_H
#define OAI_OAIMicrovisorV1AccountSecretApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListAccountSecretResponse.h"
#include "OAIMicrovisor_v1_account_secret.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMicrovisorV1AccountSecretApi : public QObject {
    Q_OBJECT

public:
    OAIMicrovisorV1AccountSecretApi(const int timeOut = 0);
    ~OAIMicrovisorV1AccountSecretApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    */
    virtual void createAccountSecret(const QString &key, const QString &value);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteAccountSecret(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void fetchAccountSecret(const QString &key);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listAccountSecret(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    */
    virtual void updateAccountSecret(const QString &key, const QString &value);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccountSecretCallback(OAIHttpRequestWorker *worker);
    void deleteAccountSecretCallback(OAIHttpRequestWorker *worker);
    void fetchAccountSecretCallback(OAIHttpRequestWorker *worker);
    void listAccountSecretCallback(OAIHttpRequestWorker *worker);
    void updateAccountSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccountSecretSignal(OAIMicrovisor_v1_account_secret summary);
    void deleteAccountSecretSignal();
    void fetchAccountSecretSignal(OAIMicrovisor_v1_account_secret summary);
    void listAccountSecretSignal(OAIListAccountSecretResponse summary);
    void updateAccountSecretSignal(OAIMicrovisor_v1_account_secret summary);


    void createAccountSecretSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_account_secret summary);
    void deleteAccountSecretSignalFull(OAIHttpRequestWorker *worker);
    void fetchAccountSecretSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_account_secret summary);
    void listAccountSecretSignalFull(OAIHttpRequestWorker *worker, OAIListAccountSecretResponse summary);
    void updateAccountSecretSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_account_secret summary);

    Q_DECL_DEPRECATED_X("Use createAccountSecretSignalError() instead")
    void createAccountSecretSignalE(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSecretSignalError(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSecretSignalError() instead")
    void deleteAccountSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAccountSecretSignalError() instead")
    void fetchAccountSecretSignalE(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAccountSecretSignalError(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountSecretSignalError() instead")
    void listAccountSecretSignalE(OAIListAccountSecretResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountSecretSignalError(OAIListAccountSecretResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSecretSignalError() instead")
    void updateAccountSecretSignalE(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSecretSignalError(OAIMicrovisor_v1_account_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccountSecretSignalErrorFull() instead")
    void createAccountSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSecretSignalErrorFull() instead")
    void deleteAccountSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAccountSecretSignalErrorFull() instead")
    void fetchAccountSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAccountSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountSecretSignalErrorFull() instead")
    void listAccountSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSecretSignalErrorFull() instead")
    void updateAccountSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
