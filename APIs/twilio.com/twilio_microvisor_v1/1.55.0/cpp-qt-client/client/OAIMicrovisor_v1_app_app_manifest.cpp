/**
 * Twilio - Microvisor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMicrovisor_v1_app_app_manifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMicrovisor_v1_app_app_manifest::OAIMicrovisor_v1_app_app_manifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMicrovisor_v1_app_app_manifest::OAIMicrovisor_v1_app_app_manifest() {
    this->initializeModel();
}

OAIMicrovisor_v1_app_app_manifest::~OAIMicrovisor_v1_app_app_manifest() {}

void OAIMicrovisor_v1_app_app_manifest::initializeModel() {

    m_app_sid_isSet = false;
    m_app_sid_isValid = false;

    m_encoded_bytes_isSet = false;
    m_encoded_bytes_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMicrovisor_v1_app_app_manifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMicrovisor_v1_app_app_manifest::fromJsonObject(QJsonObject json) {

    m_app_sid_isValid = ::OpenAPI::fromJsonValue(m_app_sid, json[QString("app_sid")]);
    m_app_sid_isSet = !json[QString("app_sid")].isNull() && m_app_sid_isValid;

    m_encoded_bytes_isValid = ::OpenAPI::fromJsonValue(m_encoded_bytes, json[QString("encoded_bytes")]);
    m_encoded_bytes_isSet = !json[QString("encoded_bytes")].isNull() && m_encoded_bytes_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMicrovisor_v1_app_app_manifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMicrovisor_v1_app_app_manifest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_sid_isSet) {
        obj.insert(QString("app_sid"), ::OpenAPI::toJsonValue(m_app_sid));
    }
    if (m_encoded_bytes_isSet) {
        obj.insert(QString("encoded_bytes"), ::OpenAPI::toJsonValue(m_encoded_bytes));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMicrovisor_v1_app_app_manifest::getAppSid() const {
    return m_app_sid;
}
void OAIMicrovisor_v1_app_app_manifest::setAppSid(const QString &app_sid) {
    m_app_sid = app_sid;
    m_app_sid_isSet = true;
}

bool OAIMicrovisor_v1_app_app_manifest::is_app_sid_Set() const{
    return m_app_sid_isSet;
}

bool OAIMicrovisor_v1_app_app_manifest::is_app_sid_Valid() const{
    return m_app_sid_isValid;
}

QString OAIMicrovisor_v1_app_app_manifest::getEncodedBytes() const {
    return m_encoded_bytes;
}
void OAIMicrovisor_v1_app_app_manifest::setEncodedBytes(const QString &encoded_bytes) {
    m_encoded_bytes = encoded_bytes;
    m_encoded_bytes_isSet = true;
}

bool OAIMicrovisor_v1_app_app_manifest::is_encoded_bytes_Set() const{
    return m_encoded_bytes_isSet;
}

bool OAIMicrovisor_v1_app_app_manifest::is_encoded_bytes_Valid() const{
    return m_encoded_bytes_isValid;
}

QString OAIMicrovisor_v1_app_app_manifest::getHash() const {
    return m_hash;
}
void OAIMicrovisor_v1_app_app_manifest::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIMicrovisor_v1_app_app_manifest::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIMicrovisor_v1_app_app_manifest::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIMicrovisor_v1_app_app_manifest::getUrl() const {
    return m_url;
}
void OAIMicrovisor_v1_app_app_manifest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMicrovisor_v1_app_app_manifest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMicrovisor_v1_app_app_manifest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMicrovisor_v1_app_app_manifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMicrovisor_v1_app_app_manifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
