/**
 * Twilio - Microvisor
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMicrovisorV1DeviceConfigApi_H
#define OAI_OAIMicrovisorV1DeviceConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListDeviceConfigResponse.h"
#include "OAIMicrovisor_v1_device_device_config.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMicrovisorV1DeviceConfigApi : public QObject {
    Q_OBJECT

public:
    OAIMicrovisorV1DeviceConfigApi(const int timeOut = 0);
    ~OAIMicrovisorV1DeviceConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_sid QString [required]
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    */
    virtual void createDeviceConfig(const QString &device_sid, const QString &key, const QString &value);

    /**
    * @param[in]  device_sid QString [required]
    * @param[in]  key QString [required]
    */
    virtual void deleteDeviceConfig(const QString &device_sid, const QString &key);

    /**
    * @param[in]  device_sid QString [required]
    * @param[in]  key QString [required]
    */
    virtual void fetchDeviceConfig(const QString &device_sid, const QString &key);

    /**
    * @param[in]  device_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listDeviceConfig(const QString &device_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_sid QString [required]
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    */
    virtual void updateDeviceConfig(const QString &device_sid, const QString &key, const QString &value);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeviceConfigCallback(OAIHttpRequestWorker *worker);
    void deleteDeviceConfigCallback(OAIHttpRequestWorker *worker);
    void fetchDeviceConfigCallback(OAIHttpRequestWorker *worker);
    void listDeviceConfigCallback(OAIHttpRequestWorker *worker);
    void updateDeviceConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeviceConfigSignal(OAIMicrovisor_v1_device_device_config summary);
    void deleteDeviceConfigSignal();
    void fetchDeviceConfigSignal(OAIMicrovisor_v1_device_device_config summary);
    void listDeviceConfigSignal(OAIListDeviceConfigResponse summary);
    void updateDeviceConfigSignal(OAIMicrovisor_v1_device_device_config summary);


    void createDeviceConfigSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_device_device_config summary);
    void deleteDeviceConfigSignalFull(OAIHttpRequestWorker *worker);
    void fetchDeviceConfigSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_device_device_config summary);
    void listDeviceConfigSignalFull(OAIHttpRequestWorker *worker, OAIListDeviceConfigResponse summary);
    void updateDeviceConfigSignalFull(OAIHttpRequestWorker *worker, OAIMicrovisor_v1_device_device_config summary);

    Q_DECL_DEPRECATED_X("Use createDeviceConfigSignalError() instead")
    void createDeviceConfigSignalE(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceConfigSignalError(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceConfigSignalError() instead")
    void deleteDeviceConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeviceConfigSignalError() instead")
    void fetchDeviceConfigSignalE(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeviceConfigSignalError(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeviceConfigSignalError() instead")
    void listDeviceConfigSignalE(OAIListDeviceConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeviceConfigSignalError(OAIListDeviceConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceConfigSignalError() instead")
    void updateDeviceConfigSignalE(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceConfigSignalError(OAIMicrovisor_v1_device_device_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeviceConfigSignalErrorFull() instead")
    void createDeviceConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeviceConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeviceConfigSignalErrorFull() instead")
    void deleteDeviceConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeviceConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchDeviceConfigSignalErrorFull() instead")
    void fetchDeviceConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchDeviceConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeviceConfigSignalErrorFull() instead")
    void listDeviceConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeviceConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeviceConfigSignalErrorFull() instead")
    void updateDeviceConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeviceConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
