/*
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BundleEnumEndUserType;
import org.openapitools.client.model.BundleEnumSortBy;
import org.openapitools.client.model.BundleEnumSortDirection;
import org.openapitools.client.model.BundleEnumStatus;
import org.openapitools.client.model.ListBundleResponse;
import org.openapitools.client.model.NumbersV2RegulatoryComplianceBundle;
import java.time.OffsetDateTime;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NumbersV2BundleApi
 */
@Disabled
public class NumbersV2BundleApiTest {

    private final NumbersV2BundleApi api = new NumbersV2BundleApi();

    /**
     * Create a new Bundle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBundleTest() throws ApiException {
        String email = null;
        String friendlyName = null;
        BundleEnumEndUserType endUserType = null;
        String isoCountry = null;
        String numberType = null;
        String regulationSid = null;
        URI statusCallback = null;
        NumbersV2RegulatoryComplianceBundle response = api.createBundle(email, friendlyName, endUserType, isoCountry, numberType, regulationSid, statusCallback);
        // TODO: test validations
    }

    /**
     * Delete a specific Bundle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBundleTest() throws ApiException {
        String sid = null;
        api.deleteBundle(sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific Bundle instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchBundleTest() throws ApiException {
        String sid = null;
        NumbersV2RegulatoryComplianceBundle response = api.fetchBundle(sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Bundles for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBundleTest() throws ApiException {
        BundleEnumStatus status = null;
        String friendlyName = null;
        String regulationSid = null;
        String isoCountry = null;
        String numberType = null;
        Boolean hasValidUntilDate = null;
        BundleEnumSortBy sortBy = null;
        BundleEnumSortDirection sortDirection = null;
        OffsetDateTime validUntilDate = null;
        OffsetDateTime validUntilDateLessThan = null;
        OffsetDateTime validUntilDateGreaterThan = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListBundleResponse response = api.listBundle(status, friendlyName, regulationSid, isoCountry, numberType, hasValidUntilDate, sortBy, sortDirection, validUntilDate, validUntilDateLessThan, validUntilDateGreaterThan, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a Bundle in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBundleTest() throws ApiException {
        String sid = null;
        String email = null;
        String friendlyName = null;
        BundleEnumStatus status = null;
        URI statusCallback = null;
        NumbersV2RegulatoryComplianceBundle response = api.updateBundle(sid, email, friendlyName, status, statusCallback);
        // TODO: test validations
    }

}
