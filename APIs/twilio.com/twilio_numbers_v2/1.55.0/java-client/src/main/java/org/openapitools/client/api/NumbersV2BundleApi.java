/*
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BundleEnumEndUserType;
import org.openapitools.client.model.BundleEnumSortBy;
import org.openapitools.client.model.BundleEnumSortDirection;
import org.openapitools.client.model.BundleEnumStatus;
import org.openapitools.client.model.ListBundleResponse;
import org.openapitools.client.model.NumbersV2RegulatoryComplianceBundle;
import java.time.OffsetDateTime;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumbersV2BundleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NumbersV2BundleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumbersV2BundleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createBundle
     * @param email The email address that will receive updates when the Bundle resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param endUserType  (optional)
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;toll free&#x60;. (optional)
     * @param regulationSid The unique string of a regulation that is associated to the Bundle resource. (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBundleCall(String email, String friendlyName, BundleEnumEndUserType endUserType, String isoCountry, String numberType, String regulationSid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (endUserType != null) {
            localVarFormParams.put("EndUserType", endUserType);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (isoCountry != null) {
            localVarFormParams.put("IsoCountry", isoCountry);
        }

        if (numberType != null) {
            localVarFormParams.put("NumberType", numberType);
        }

        if (regulationSid != null) {
            localVarFormParams.put("RegulationSid", regulationSid);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBundleValidateBeforeCall(String email, String friendlyName, BundleEnumEndUserType endUserType, String isoCountry, String numberType, String regulationSid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createBundle(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createBundle(Async)");
        }

        return createBundleCall(email, friendlyName, endUserType, isoCountry, numberType, regulationSid, statusCallback, _callback);

    }

    /**
     * 
     * Create a new Bundle.
     * @param email The email address that will receive updates when the Bundle resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param endUserType  (optional)
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;toll free&#x60;. (optional)
     * @param regulationSid The unique string of a regulation that is associated to the Bundle resource. (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return NumbersV2RegulatoryComplianceBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public NumbersV2RegulatoryComplianceBundle createBundle(String email, String friendlyName, BundleEnumEndUserType endUserType, String isoCountry, String numberType, String regulationSid, URI statusCallback) throws ApiException {
        ApiResponse<NumbersV2RegulatoryComplianceBundle> localVarResp = createBundleWithHttpInfo(email, friendlyName, endUserType, isoCountry, numberType, regulationSid, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Bundle.
     * @param email The email address that will receive updates when the Bundle resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param endUserType  (optional)
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;toll free&#x60;. (optional)
     * @param regulationSid The unique string of a regulation that is associated to the Bundle resource. (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;NumbersV2RegulatoryComplianceBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumbersV2RegulatoryComplianceBundle> createBundleWithHttpInfo(String email, String friendlyName, BundleEnumEndUserType endUserType, String isoCountry, String numberType, String regulationSid, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = createBundleValidateBeforeCall(email, friendlyName, endUserType, isoCountry, numberType, regulationSid, statusCallback, null);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Bundle.
     * @param email The email address that will receive updates when the Bundle resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param endUserType  (optional)
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;toll free&#x60;. (optional)
     * @param regulationSid The unique string of a regulation that is associated to the Bundle resource. (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBundleAsync(String email, String friendlyName, BundleEnumEndUserType endUserType, String isoCountry, String numberType, String regulationSid, URI statusCallback, final ApiCallback<NumbersV2RegulatoryComplianceBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBundleValidateBeforeCall(email, friendlyName, endUserType, isoCountry, numberType, regulationSid, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBundle
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBundleCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBundleValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteBundle(Async)");
        }

        return deleteBundleCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Bundle.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBundle(String sid) throws ApiException {
        deleteBundleWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Bundle.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBundleWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteBundleValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Bundle.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBundleAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBundleValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchBundle
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchBundleCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchBundleValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchBundle(Async)");
        }

        return fetchBundleCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Bundle instance.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @return NumbersV2RegulatoryComplianceBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NumbersV2RegulatoryComplianceBundle fetchBundle(String sid) throws ApiException {
        ApiResponse<NumbersV2RegulatoryComplianceBundle> localVarResp = fetchBundleWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Bundle instance.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @return ApiResponse&lt;NumbersV2RegulatoryComplianceBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumbersV2RegulatoryComplianceBundle> fetchBundleWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchBundleValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Bundle instance.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchBundleAsync(String sid, final ApiCallback<NumbersV2RegulatoryComplianceBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchBundleValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBundle
     * @param status The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. (optional)
     * @param friendlyName The string that you assigned to describe the resource. The column can contain 255 variable characters. (optional)
     * @param regulationSid The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. (optional)
     * @param isoCountry The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;tollfree&#x60;. (optional)
     * @param hasValidUntilDate Indicates that the Bundle is a valid Bundle until a specified expiration date. (optional)
     * @param sortBy Can be &#x60;valid-until&#x60; or &#x60;date-updated&#x60;. Defaults to &#x60;date-created&#x60;. (optional)
     * @param sortDirection Default is &#x60;DESC&#x60;. Can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     * @param validUntilDate Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateLessThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateGreaterThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBundleCall(BundleEnumStatus status, String friendlyName, String regulationSid, String isoCountry, String numberType, Boolean hasValidUntilDate, BundleEnumSortBy sortBy, BundleEnumSortDirection sortDirection, OffsetDateTime validUntilDate, OffsetDateTime validUntilDateLessThan, OffsetDateTime validUntilDateGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (regulationSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RegulationSid", regulationSid));
        }

        if (isoCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsoCountry", isoCountry));
        }

        if (numberType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumberType", numberType));
        }

        if (hasValidUntilDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HasValidUntilDate", hasValidUntilDate));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SortDirection", sortDirection));
        }

        if (validUntilDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ValidUntilDate", validUntilDate));
        }

        if (validUntilDateLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ValidUntilDate&lt;", validUntilDateLessThan));
        }

        if (validUntilDateGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ValidUntilDate&gt;", validUntilDateGreaterThan));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBundleValidateBeforeCall(BundleEnumStatus status, String friendlyName, String regulationSid, String isoCountry, String numberType, Boolean hasValidUntilDate, BundleEnumSortBy sortBy, BundleEnumSortDirection sortDirection, OffsetDateTime validUntilDate, OffsetDateTime validUntilDateLessThan, OffsetDateTime validUntilDateGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listBundleCall(status, friendlyName, regulationSid, isoCountry, numberType, hasValidUntilDate, sortBy, sortDirection, validUntilDate, validUntilDateLessThan, validUntilDateGreaterThan, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Bundles for an account.
     * @param status The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. (optional)
     * @param friendlyName The string that you assigned to describe the resource. The column can contain 255 variable characters. (optional)
     * @param regulationSid The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. (optional)
     * @param isoCountry The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;tollfree&#x60;. (optional)
     * @param hasValidUntilDate Indicates that the Bundle is a valid Bundle until a specified expiration date. (optional)
     * @param sortBy Can be &#x60;valid-until&#x60; or &#x60;date-updated&#x60;. Defaults to &#x60;date-created&#x60;. (optional)
     * @param sortDirection Default is &#x60;DESC&#x60;. Can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     * @param validUntilDate Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateLessThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateGreaterThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListBundleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBundleResponse listBundle(BundleEnumStatus status, String friendlyName, String regulationSid, String isoCountry, String numberType, Boolean hasValidUntilDate, BundleEnumSortBy sortBy, BundleEnumSortDirection sortDirection, OffsetDateTime validUntilDate, OffsetDateTime validUntilDateLessThan, OffsetDateTime validUntilDateGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListBundleResponse> localVarResp = listBundleWithHttpInfo(status, friendlyName, regulationSid, isoCountry, numberType, hasValidUntilDate, sortBy, sortDirection, validUntilDate, validUntilDateLessThan, validUntilDateGreaterThan, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Bundles for an account.
     * @param status The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. (optional)
     * @param friendlyName The string that you assigned to describe the resource. The column can contain 255 variable characters. (optional)
     * @param regulationSid The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. (optional)
     * @param isoCountry The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;tollfree&#x60;. (optional)
     * @param hasValidUntilDate Indicates that the Bundle is a valid Bundle until a specified expiration date. (optional)
     * @param sortBy Can be &#x60;valid-until&#x60; or &#x60;date-updated&#x60;. Defaults to &#x60;date-created&#x60;. (optional)
     * @param sortDirection Default is &#x60;DESC&#x60;. Can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     * @param validUntilDate Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateLessThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateGreaterThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListBundleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBundleResponse> listBundleWithHttpInfo(BundleEnumStatus status, String friendlyName, String regulationSid, String isoCountry, String numberType, Boolean hasValidUntilDate, BundleEnumSortBy sortBy, BundleEnumSortDirection sortDirection, OffsetDateTime validUntilDate, OffsetDateTime validUntilDateLessThan, OffsetDateTime validUntilDateGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listBundleValidateBeforeCall(status, friendlyName, regulationSid, isoCountry, numberType, hasValidUntilDate, sortBy, sortDirection, validUntilDate, validUntilDateLessThan, validUntilDateGreaterThan, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListBundleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Bundles for an account.
     * @param status The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details. (optional)
     * @param friendlyName The string that you assigned to describe the resource. The column can contain 255 variable characters. (optional)
     * @param regulationSid The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource. (optional)
     * @param isoCountry The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle&#39;s phone number country ownership request. (optional)
     * @param numberType The type of phone number of the Bundle&#39;s ownership request. Can be &#x60;local&#x60;, &#x60;mobile&#x60;, &#x60;national&#x60;, or &#x60;tollfree&#x60;. (optional)
     * @param hasValidUntilDate Indicates that the Bundle is a valid Bundle until a specified expiration date. (optional)
     * @param sortBy Can be &#x60;valid-until&#x60; or &#x60;date-updated&#x60;. Defaults to &#x60;date-created&#x60;. (optional)
     * @param sortDirection Default is &#x60;DESC&#x60;. Can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     * @param validUntilDate Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateLessThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param validUntilDateGreaterThan Date to filter Bundles having their &#x60;valid_until_date&#x60; before or after the specified date. Can be &#x60;ValidUntilDate&gt;&#x3D;&#x60; or &#x60;ValidUntilDate&lt;&#x3D;&#x60;. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBundleAsync(BundleEnumStatus status, String friendlyName, String regulationSid, String isoCountry, String numberType, Boolean hasValidUntilDate, BundleEnumSortBy sortBy, BundleEnumSortDirection sortDirection, OffsetDateTime validUntilDate, OffsetDateTime validUntilDateLessThan, OffsetDateTime validUntilDateGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListBundleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBundleValidateBeforeCall(status, friendlyName, regulationSid, isoCountry, numberType, hasValidUntilDate, sortBy, sortDirection, validUntilDate, validUntilDateLessThan, validUntilDateGreaterThan, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListBundleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBundle
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param email The email address that will receive updates when the Bundle resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBundleCall(String sid, String email, String friendlyName, BundleEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBundleValidateBeforeCall(String sid, String email, String friendlyName, BundleEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateBundle(Async)");
        }

        return updateBundleCall(sid, email, friendlyName, status, statusCallback, _callback);

    }

    /**
     * 
     * Updates a Bundle in an account.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param email The email address that will receive updates when the Bundle resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return NumbersV2RegulatoryComplianceBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NumbersV2RegulatoryComplianceBundle updateBundle(String sid, String email, String friendlyName, BundleEnumStatus status, URI statusCallback) throws ApiException {
        ApiResponse<NumbersV2RegulatoryComplianceBundle> localVarResp = updateBundleWithHttpInfo(sid, email, friendlyName, status, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Bundle in an account.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param email The email address that will receive updates when the Bundle resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;NumbersV2RegulatoryComplianceBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumbersV2RegulatoryComplianceBundle> updateBundleWithHttpInfo(String sid, String email, String friendlyName, BundleEnumStatus status, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = updateBundleValidateBeforeCall(sid, email, friendlyName, status, statusCallback, null);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Bundle in an account.
     * @param sid The unique string that we created to identify the Bundle resource. (required)
     * @param email The email address that will receive updates when the Bundle resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBundleAsync(String sid, String email, String friendlyName, BundleEnumStatus status, URI statusCallback, final ApiCallback<NumbersV2RegulatoryComplianceBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBundleValidateBeforeCall(sid, email, friendlyName, status, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
