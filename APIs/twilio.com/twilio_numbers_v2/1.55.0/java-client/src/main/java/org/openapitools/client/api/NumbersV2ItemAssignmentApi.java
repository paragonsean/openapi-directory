/*
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListItemAssignmentResponse;
import org.openapitools.client.model.NumbersV2RegulatoryComplianceBundleItemAssignment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumbersV2ItemAssignmentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NumbersV2ItemAssignmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumbersV2ItemAssignmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createItemAssignment
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemAssignmentCall(String bundleSid, String objectSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments"
            .replace("{" + "BundleSid" + "}", localVarApiClient.escapeString(bundleSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectSid != null) {
            localVarFormParams.put("ObjectSid", objectSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createItemAssignmentValidateBeforeCall(String bundleSid, String objectSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleSid' is set
        if (bundleSid == null) {
            throw new ApiException("Missing the required parameter 'bundleSid' when calling createItemAssignment(Async)");
        }

        // verify the required parameter 'objectSid' is set
        if (objectSid == null) {
            throw new ApiException("Missing the required parameter 'objectSid' when calling createItemAssignment(Async)");
        }

        return createItemAssignmentCall(bundleSid, objectSid, _callback);

    }

    /**
     * 
     * Create a new Assigned Item.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return NumbersV2RegulatoryComplianceBundleItemAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public NumbersV2RegulatoryComplianceBundleItemAssignment createItemAssignment(String bundleSid, String objectSid) throws ApiException {
        ApiResponse<NumbersV2RegulatoryComplianceBundleItemAssignment> localVarResp = createItemAssignmentWithHttpInfo(bundleSid, objectSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Assigned Item.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return ApiResponse&lt;NumbersV2RegulatoryComplianceBundleItemAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumbersV2RegulatoryComplianceBundleItemAssignment> createItemAssignmentWithHttpInfo(String bundleSid, String objectSid) throws ApiException {
        okhttp3.Call localVarCall = createItemAssignmentValidateBeforeCall(bundleSid, objectSid, null);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundleItemAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Assigned Item.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createItemAssignmentAsync(String bundleSid, String objectSid, final ApiCallback<NumbersV2RegulatoryComplianceBundleItemAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createItemAssignmentValidateBeforeCall(bundleSid, objectSid, _callback);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundleItemAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemAssignment
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAssignmentCall(String bundleSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}"
            .replace("{" + "BundleSid" + "}", localVarApiClient.escapeString(bundleSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemAssignmentValidateBeforeCall(String bundleSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleSid' is set
        if (bundleSid == null) {
            throw new ApiException("Missing the required parameter 'bundleSid' when calling deleteItemAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteItemAssignment(Async)");
        }

        return deleteItemAssignmentCall(bundleSid, sid, _callback);

    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteItemAssignment(String bundleSid, String sid) throws ApiException {
        deleteItemAssignmentWithHttpInfo(bundleSid, sid);
    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteItemAssignmentWithHttpInfo(String bundleSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteItemAssignmentValidateBeforeCall(bundleSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Assignment Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAssignmentAsync(String bundleSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemAssignmentValidateBeforeCall(bundleSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchItemAssignment
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchItemAssignmentCall(String bundleSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments/{Sid}"
            .replace("{" + "BundleSid" + "}", localVarApiClient.escapeString(bundleSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchItemAssignmentValidateBeforeCall(String bundleSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleSid' is set
        if (bundleSid == null) {
            throw new ApiException("Missing the required parameter 'bundleSid' when calling fetchItemAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchItemAssignment(Async)");
        }

        return fetchItemAssignmentCall(bundleSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return NumbersV2RegulatoryComplianceBundleItemAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NumbersV2RegulatoryComplianceBundleItemAssignment fetchItemAssignment(String bundleSid, String sid) throws ApiException {
        ApiResponse<NumbersV2RegulatoryComplianceBundleItemAssignment> localVarResp = fetchItemAssignmentWithHttpInfo(bundleSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;NumbersV2RegulatoryComplianceBundleItemAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumbersV2RegulatoryComplianceBundleItemAssignment> fetchItemAssignmentWithHttpInfo(String bundleSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchItemAssignmentValidateBeforeCall(bundleSid, sid, null);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundleItemAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Assigned Item Instance.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchItemAssignmentAsync(String bundleSid, String sid, final ApiCallback<NumbersV2RegulatoryComplianceBundleItemAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchItemAssignmentValidateBeforeCall(bundleSid, sid, _callback);
        Type localVarReturnType = new TypeToken<NumbersV2RegulatoryComplianceBundleItemAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listItemAssignment
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemAssignmentCall(String bundleSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://numbers.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/RegulatoryCompliance/Bundles/{BundleSid}/ItemAssignments"
            .replace("{" + "BundleSid" + "}", localVarApiClient.escapeString(bundleSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemAssignmentValidateBeforeCall(String bundleSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleSid' is set
        if (bundleSid == null) {
            throw new ApiException("Missing the required parameter 'bundleSid' when calling listItemAssignment(Async)");
        }

        return listItemAssignmentCall(bundleSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListItemAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListItemAssignmentResponse listItemAssignment(String bundleSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListItemAssignmentResponse> localVarResp = listItemAssignmentWithHttpInfo(bundleSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListItemAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListItemAssignmentResponse> listItemAssignmentWithHttpInfo(String bundleSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listItemAssignmentValidateBeforeCall(bundleSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListItemAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Assigned Items for an account.
     * @param bundleSid The unique string that we created to identify the Bundle resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemAssignmentAsync(String bundleSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListItemAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemAssignmentValidateBeforeCall(bundleSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListItemAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
