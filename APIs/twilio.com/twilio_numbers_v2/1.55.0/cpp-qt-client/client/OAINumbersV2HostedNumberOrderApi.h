/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINumbersV2HostedNumberOrderApi_H
#define OAI_OAINumbersV2HostedNumberOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHosted_number_order_enum_status.h"
#include "OAIListHostedNumberOrderResponse.h"
#include "OAINumbers_v2_hosted_number_order.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINumbersV2HostedNumberOrderApi : public QObject {
    Q_OBJECT

public:
    OAINumbersV2HostedNumberOrderApi(const int timeOut = 0);
    ~OAINumbersV2HostedNumberOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address_sid QString [required]
    * @param[in]  contact_phone_number QString [required]
    * @param[in]  email QString [required]
    * @param[in]  phone_number QString [required]
    * @param[in]  account_sid QString [optional]
    * @param[in]  cc_emails QList<QString> [optional]
    * @param[in]  contact_title QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  sms_application_sid QString [optional]
    * @param[in]  sms_capability bool [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  status_callback_url QString [optional]
    */
    virtual void createHostedNumberOrder(const QString &address_sid, const QString &contact_phone_number, const QString &email, const QString &phone_number, const ::OpenAPI::OptionalParam<QString> &account_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cc_emails = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &contact_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sms_capability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteHostedNumberOrder(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchHostedNumberOrder(const QString &sid);

    /**
    * @param[in]  status OAIHosted_number_order_enum_status [optional]
    * @param[in]  sms_capability bool [optional]
    * @param[in]  phone_number QString [optional]
    * @param[in]  incoming_phone_number_sid QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listHostedNumberOrder(const ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status> &status = ::OpenAPI::OptionalParam<OAIHosted_number_order_enum_status>(), const ::OpenAPI::OptionalParam<bool> &sms_capability = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &phone_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &incoming_phone_number_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void deleteHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void fetchHostedNumberOrderCallback(OAIHttpRequestWorker *worker);
    void listHostedNumberOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createHostedNumberOrderSignal(OAINumbers_v2_hosted_number_order summary);
    void deleteHostedNumberOrderSignal();
    void fetchHostedNumberOrderSignal(OAINumbers_v2_hosted_number_order summary);
    void listHostedNumberOrderSignal(OAIListHostedNumberOrderResponse summary);


    void createHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_hosted_number_order summary);
    void deleteHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker);
    void fetchHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_hosted_number_order summary);
    void listHostedNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIListHostedNumberOrderResponse summary);

    Q_DECL_DEPRECATED_X("Use createHostedNumberOrderSignalError() instead")
    void createHostedNumberOrderSignalE(OAINumbers_v2_hosted_number_order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedNumberOrderSignalError(OAINumbers_v2_hosted_number_order summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedNumberOrderSignalError() instead")
    void deleteHostedNumberOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedNumberOrderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchHostedNumberOrderSignalError() instead")
    void fetchHostedNumberOrderSignalE(OAINumbers_v2_hosted_number_order summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchHostedNumberOrderSignalError(OAINumbers_v2_hosted_number_order summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedNumberOrderSignalError() instead")
    void listHostedNumberOrderSignalE(OAIListHostedNumberOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedNumberOrderSignalError(OAIListHostedNumberOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createHostedNumberOrderSignalErrorFull() instead")
    void createHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHostedNumberOrderSignalErrorFull() instead")
    void deleteHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchHostedNumberOrderSignalErrorFull() instead")
    void fetchHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostedNumberOrderSignalErrorFull() instead")
    void listHostedNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostedNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
