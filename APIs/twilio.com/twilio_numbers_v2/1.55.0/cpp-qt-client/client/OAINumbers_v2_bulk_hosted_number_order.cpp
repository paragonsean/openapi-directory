/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v2_bulk_hosted_number_order.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v2_bulk_hosted_number_order::OAINumbers_v2_bulk_hosted_number_order(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v2_bulk_hosted_number_order::OAINumbers_v2_bulk_hosted_number_order() {
    this->initializeModel();
}

OAINumbers_v2_bulk_hosted_number_order::~OAINumbers_v2_bulk_hosted_number_order() {}

void OAINumbers_v2_bulk_hosted_number_order::initializeModel() {

    m_bulk_hosting_sid_isSet = false;
    m_bulk_hosting_sid_isValid = false;

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_request_status_isSet = false;
    m_request_status_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v2_bulk_hosted_number_order::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v2_bulk_hosted_number_order::fromJsonObject(QJsonObject json) {

    m_bulk_hosting_sid_isValid = ::OpenAPI::fromJsonValue(m_bulk_hosting_sid, json[QString("bulk_hosting_sid")]);
    m_bulk_hosting_sid_isSet = !json[QString("bulk_hosting_sid")].isNull() && m_bulk_hosting_sid_isValid;

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("date_completed")]);
    m_date_completed_isSet = !json[QString("date_completed")].isNull() && m_date_completed_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("notification_email")]);
    m_notification_email_isSet = !json[QString("notification_email")].isNull() && m_notification_email_isValid;

    m_request_status_isValid = ::OpenAPI::fromJsonValue(m_request_status, json[QString("request_status")]);
    m_request_status_isSet = !json[QString("request_status")].isNull() && m_request_status_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v2_bulk_hosted_number_order::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v2_bulk_hosted_number_order::asJsonObject() const {
    QJsonObject obj;
    if (m_bulk_hosting_sid_isSet) {
        obj.insert(QString("bulk_hosting_sid"), ::OpenAPI::toJsonValue(m_bulk_hosting_sid));
    }
    if (m_date_completed_isSet) {
        obj.insert(QString("date_completed"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("notification_email"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_request_status.isSet()) {
        obj.insert(QString("request_status"), ::OpenAPI::toJsonValue(m_request_status));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINumbers_v2_bulk_hosted_number_order::getBulkHostingSid() const {
    return m_bulk_hosting_sid;
}
void OAINumbers_v2_bulk_hosted_number_order::setBulkHostingSid(const QString &bulk_hosting_sid) {
    m_bulk_hosting_sid = bulk_hosting_sid;
    m_bulk_hosting_sid_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_bulk_hosting_sid_Set() const{
    return m_bulk_hosting_sid_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_bulk_hosting_sid_Valid() const{
    return m_bulk_hosting_sid_isValid;
}

QDateTime OAINumbers_v2_bulk_hosted_number_order::getDateCompleted() const {
    return m_date_completed;
}
void OAINumbers_v2_bulk_hosted_number_order::setDateCompleted(const QDateTime &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

QDateTime OAINumbers_v2_bulk_hosted_number_order::getDateCreated() const {
    return m_date_created;
}
void OAINumbers_v2_bulk_hosted_number_order::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAINumbers_v2_bulk_hosted_number_order::getFriendlyName() const {
    return m_friendly_name;
}
void OAINumbers_v2_bulk_hosted_number_order::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAINumbers_v2_bulk_hosted_number_order::getNotificationEmail() const {
    return m_notification_email;
}
void OAINumbers_v2_bulk_hosted_number_order::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

OAIBulk_hosted_number_order_enum_request_status OAINumbers_v2_bulk_hosted_number_order::getRequestStatus() const {
    return m_request_status;
}
void OAINumbers_v2_bulk_hosted_number_order::setRequestStatus(const OAIBulk_hosted_number_order_enum_request_status &request_status) {
    m_request_status = request_status;
    m_request_status_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_request_status_Set() const{
    return m_request_status_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_request_status_Valid() const{
    return m_request_status_isValid;
}

QList<QJsonValue> OAINumbers_v2_bulk_hosted_number_order::getResults() const {
    return m_results;
}
void OAINumbers_v2_bulk_hosted_number_order::setResults(const QList<QJsonValue> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_results_Set() const{
    return m_results_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAINumbers_v2_bulk_hosted_number_order::getTotalCount() const {
    return m_total_count;
}
void OAINumbers_v2_bulk_hosted_number_order::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAINumbers_v2_bulk_hosted_number_order::getUrl() const {
    return m_url;
}
void OAINumbers_v2_bulk_hosted_number_order::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v2_bulk_hosted_number_order::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v2_bulk_hosted_number_order::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bulk_hosting_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v2_bulk_hosted_number_order::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
