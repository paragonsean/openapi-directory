/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v2_regulatory_compliance_bundle_evaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v2_regulatory_compliance_bundle_evaluation::OAINumbers_v2_regulatory_compliance_bundle_evaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v2_regulatory_compliance_bundle_evaluation::OAINumbers_v2_regulatory_compliance_bundle_evaluation() {
    this->initializeModel();
}

OAINumbers_v2_regulatory_compliance_bundle_evaluation::~OAINumbers_v2_regulatory_compliance_bundle_evaluation() {}

void OAINumbers_v2_regulatory_compliance_bundle_evaluation::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_bundle_sid_isSet = false;
    m_bundle_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_regulation_sid_isSet = false;
    m_regulation_sid_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v2_regulatory_compliance_bundle_evaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v2_regulatory_compliance_bundle_evaluation::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_bundle_sid_isValid = ::OpenAPI::fromJsonValue(m_bundle_sid, json[QString("bundle_sid")]);
    m_bundle_sid_isSet = !json[QString("bundle_sid")].isNull() && m_bundle_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_regulation_sid_isValid = ::OpenAPI::fromJsonValue(m_regulation_sid, json[QString("regulation_sid")]);
    m_regulation_sid_isSet = !json[QString("regulation_sid")].isNull() && m_regulation_sid_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v2_regulatory_compliance_bundle_evaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_bundle_sid_isSet) {
        obj.insert(QString("bundle_sid"), ::OpenAPI::toJsonValue(m_bundle_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_regulation_sid_isSet) {
        obj.insert(QString("regulation_sid"), ::OpenAPI::toJsonValue(m_regulation_sid));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::getAccountSid() const {
    return m_account_sid;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::getBundleSid() const {
    return m_bundle_sid;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setBundleSid(const QString &bundle_sid) {
    m_bundle_sid = bundle_sid;
    m_bundle_sid_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_bundle_sid_Set() const{
    return m_bundle_sid_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_bundle_sid_Valid() const{
    return m_bundle_sid_isValid;
}

QDateTime OAINumbers_v2_regulatory_compliance_bundle_evaluation::getDateCreated() const {
    return m_date_created;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::getRegulationSid() const {
    return m_regulation_sid;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setRegulationSid(const QString &regulation_sid) {
    m_regulation_sid = regulation_sid;
    m_regulation_sid_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_regulation_sid_Set() const{
    return m_regulation_sid_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_regulation_sid_Valid() const{
    return m_regulation_sid_isValid;
}

QList<QJsonValue> OAINumbers_v2_regulatory_compliance_bundle_evaluation::getResults() const {
    return m_results;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setResults(const QList<QJsonValue> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_results_Set() const{
    return m_results_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_results_Valid() const{
    return m_results_isValid;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::getSid() const {
    return m_sid;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIEvaluation_enum_status OAINumbers_v2_regulatory_compliance_bundle_evaluation::getStatus() const {
    return m_status;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setStatus(const OAIEvaluation_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_status_Set() const{
    return m_status_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINumbers_v2_regulatory_compliance_bundle_evaluation::getUrl() const {
    return m_url;
}
void OAINumbers_v2_regulatory_compliance_bundle_evaluation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulation_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v2_regulatory_compliance_bundle_evaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
