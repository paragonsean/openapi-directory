/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v2_regulatory_compliance_regulation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v2_regulatory_compliance_regulation::OAINumbers_v2_regulatory_compliance_regulation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v2_regulatory_compliance_regulation::OAINumbers_v2_regulatory_compliance_regulation() {
    this->initializeModel();
}

OAINumbers_v2_regulatory_compliance_regulation::~OAINumbers_v2_regulatory_compliance_regulation() {}

void OAINumbers_v2_regulatory_compliance_regulation::initializeModel() {

    m_end_user_type_isSet = false;
    m_end_user_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_iso_country_isSet = false;
    m_iso_country_isValid = false;

    m_number_type_isSet = false;
    m_number_type_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v2_regulatory_compliance_regulation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v2_regulatory_compliance_regulation::fromJsonObject(QJsonObject json) {

    m_end_user_type_isValid = ::OpenAPI::fromJsonValue(m_end_user_type, json[QString("end_user_type")]);
    m_end_user_type_isSet = !json[QString("end_user_type")].isNull() && m_end_user_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_iso_country_isValid = ::OpenAPI::fromJsonValue(m_iso_country, json[QString("iso_country")]);
    m_iso_country_isSet = !json[QString("iso_country")].isNull() && m_iso_country_isValid;

    m_number_type_isValid = ::OpenAPI::fromJsonValue(m_number_type, json[QString("number_type")]);
    m_number_type_isSet = !json[QString("number_type")].isNull() && m_number_type_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v2_regulatory_compliance_regulation::asJsonObject() const {
    QJsonObject obj;
    if (m_end_user_type.isSet()) {
        obj.insert(QString("end_user_type"), ::OpenAPI::toJsonValue(m_end_user_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_iso_country_isSet) {
        obj.insert(QString("iso_country"), ::OpenAPI::toJsonValue(m_iso_country));
    }
    if (m_number_type_isSet) {
        obj.insert(QString("number_type"), ::OpenAPI::toJsonValue(m_number_type));
    }
    if (m_requirements_isSet) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIRegulation_enum_end_user_type OAINumbers_v2_regulatory_compliance_regulation::getEndUserType() const {
    return m_end_user_type;
}
void OAINumbers_v2_regulatory_compliance_regulation::setEndUserType(const OAIRegulation_enum_end_user_type &end_user_type) {
    m_end_user_type = end_user_type;
    m_end_user_type_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_end_user_type_Set() const{
    return m_end_user_type_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_end_user_type_Valid() const{
    return m_end_user_type_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::getFriendlyName() const {
    return m_friendly_name;
}
void OAINumbers_v2_regulatory_compliance_regulation::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::getIsoCountry() const {
    return m_iso_country;
}
void OAINumbers_v2_regulatory_compliance_regulation::setIsoCountry(const QString &iso_country) {
    m_iso_country = iso_country;
    m_iso_country_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_iso_country_Set() const{
    return m_iso_country_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_iso_country_Valid() const{
    return m_iso_country_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::getNumberType() const {
    return m_number_type;
}
void OAINumbers_v2_regulatory_compliance_regulation::setNumberType(const QString &number_type) {
    m_number_type = number_type;
    m_number_type_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_number_type_Set() const{
    return m_number_type_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_number_type_Valid() const{
    return m_number_type_isValid;
}

QJsonValue OAINumbers_v2_regulatory_compliance_regulation::getRequirements() const {
    return m_requirements;
}
void OAINumbers_v2_regulatory_compliance_regulation::setRequirements(const QJsonValue &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::getSid() const {
    return m_sid;
}
void OAINumbers_v2_regulatory_compliance_regulation::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAINumbers_v2_regulatory_compliance_regulation::getUrl() const {
    return m_url;
}
void OAINumbers_v2_regulatory_compliance_regulation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v2_regulatory_compliance_regulation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v2_regulatory_compliance_regulation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_user_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v2_regulatory_compliance_regulation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
