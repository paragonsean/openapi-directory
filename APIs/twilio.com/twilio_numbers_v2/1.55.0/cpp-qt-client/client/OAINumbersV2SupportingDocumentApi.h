/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINumbersV2SupportingDocumentApi_H
#define OAI_OAINumbersV2SupportingDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSupportingDocumentResponse.h"
#include "OAINumbers_v2_regulatory_compliance_supporting_document.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINumbersV2SupportingDocumentApi : public QObject {
    Q_OBJECT

public:
    OAINumbersV2SupportingDocumentApi(const int timeOut = 0);
    ~OAINumbersV2SupportingDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [required]
    * @param[in]  type QString [required]
    * @param[in]  attributes QJsonValue [optional]
    */
    virtual void createSupportingDocument(const QString &friendly_name, const QString &type, const ::OpenAPI::OptionalParam<QJsonValue> &attributes = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteSupportingDocument(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchSupportingDocument(const QString &sid);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSupportingDocument(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  attributes QJsonValue [optional]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void updateSupportingDocument(const QString &sid, const ::OpenAPI::OptionalParam<QJsonValue> &attributes = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSupportingDocumentCallback(OAIHttpRequestWorker *worker);
    void deleteSupportingDocumentCallback(OAIHttpRequestWorker *worker);
    void fetchSupportingDocumentCallback(OAIHttpRequestWorker *worker);
    void listSupportingDocumentCallback(OAIHttpRequestWorker *worker);
    void updateSupportingDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSupportingDocumentSignal(OAINumbers_v2_regulatory_compliance_supporting_document summary);
    void deleteSupportingDocumentSignal();
    void fetchSupportingDocumentSignal(OAINumbers_v2_regulatory_compliance_supporting_document summary);
    void listSupportingDocumentSignal(OAIListSupportingDocumentResponse summary);
    void updateSupportingDocumentSignal(OAINumbers_v2_regulatory_compliance_supporting_document summary);


    void createSupportingDocumentSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_supporting_document summary);
    void deleteSupportingDocumentSignalFull(OAIHttpRequestWorker *worker);
    void fetchSupportingDocumentSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_supporting_document summary);
    void listSupportingDocumentSignalFull(OAIHttpRequestWorker *worker, OAIListSupportingDocumentResponse summary);
    void updateSupportingDocumentSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_supporting_document summary);

    Q_DECL_DEPRECATED_X("Use createSupportingDocumentSignalError() instead")
    void createSupportingDocumentSignalE(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSupportingDocumentSignalError(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSupportingDocumentSignalError() instead")
    void deleteSupportingDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSupportingDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSupportingDocumentSignalError() instead")
    void fetchSupportingDocumentSignalE(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSupportingDocumentSignalError(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSupportingDocumentSignalError() instead")
    void listSupportingDocumentSignalE(OAIListSupportingDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSupportingDocumentSignalError(OAIListSupportingDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSupportingDocumentSignalError() instead")
    void updateSupportingDocumentSignalE(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSupportingDocumentSignalError(OAINumbers_v2_regulatory_compliance_supporting_document summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSupportingDocumentSignalErrorFull() instead")
    void createSupportingDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSupportingDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSupportingDocumentSignalErrorFull() instead")
    void deleteSupportingDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSupportingDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSupportingDocumentSignalErrorFull() instead")
    void fetchSupportingDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSupportingDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSupportingDocumentSignalErrorFull() instead")
    void listSupportingDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSupportingDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSupportingDocumentSignalErrorFull() instead")
    void updateSupportingDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSupportingDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
