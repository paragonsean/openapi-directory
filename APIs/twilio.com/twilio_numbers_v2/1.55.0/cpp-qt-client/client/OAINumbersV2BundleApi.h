/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINumbersV2BundleApi_H
#define OAI_OAINumbersV2BundleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBundle_enum_end_user_type.h"
#include "OAIBundle_enum_sort_by.h"
#include "OAIBundle_enum_sort_direction.h"
#include "OAIBundle_enum_status.h"
#include "OAIListBundleResponse.h"
#include "OAINumbers_v2_regulatory_compliance_bundle.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINumbersV2BundleApi : public QObject {
    Q_OBJECT

public:
    OAINumbersV2BundleApi(const int timeOut = 0);
    ~OAINumbersV2BundleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  end_user_type OAIBundle_enum_end_user_type [optional]
    * @param[in]  iso_country QString [optional]
    * @param[in]  number_type QString [optional]
    * @param[in]  regulation_sid QString [optional]
    * @param[in]  status_callback QString [optional]
    */
    virtual void createBundle(const QString &email, const QString &friendly_name, const ::OpenAPI::OptionalParam<OAIBundle_enum_end_user_type> &end_user_type = ::OpenAPI::OptionalParam<OAIBundle_enum_end_user_type>(), const ::OpenAPI::OptionalParam<QString> &iso_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regulation_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteBundle(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchBundle(const QString &sid);

    /**
    * @param[in]  status OAIBundle_enum_status [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  regulation_sid QString [optional]
    * @param[in]  iso_country QString [optional]
    * @param[in]  number_type QString [optional]
    * @param[in]  has_valid_until_date bool [optional]
    * @param[in]  sort_by OAIBundle_enum_sort_by [optional]
    * @param[in]  sort_direction OAIBundle_enum_sort_direction [optional]
    * @param[in]  valid_until_date QDateTime [optional]
    * @param[in]  valid_until_date2 QDateTime [optional]
    * @param[in]  valid_until_date3 QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listBundle(const ::OpenAPI::OptionalParam<OAIBundle_enum_status> &status = ::OpenAPI::OptionalParam<OAIBundle_enum_status>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regulation_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iso_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_valid_until_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIBundle_enum_sort_by> &sort_by = ::OpenAPI::OptionalParam<OAIBundle_enum_sort_by>(), const ::OpenAPI::OptionalParam<OAIBundle_enum_sort_direction> &sort_direction = ::OpenAPI::OptionalParam<OAIBundle_enum_sort_direction>(), const ::OpenAPI::OptionalParam<QDateTime> &valid_until_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &valid_until_date2 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &valid_until_date3 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  status OAIBundle_enum_status [optional]
    * @param[in]  status_callback QString [optional]
    */
    virtual void updateBundle(const QString &sid, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBundle_enum_status> &status = ::OpenAPI::OptionalParam<OAIBundle_enum_status>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBundleCallback(OAIHttpRequestWorker *worker);
    void deleteBundleCallback(OAIHttpRequestWorker *worker);
    void fetchBundleCallback(OAIHttpRequestWorker *worker);
    void listBundleCallback(OAIHttpRequestWorker *worker);
    void updateBundleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBundleSignal(OAINumbers_v2_regulatory_compliance_bundle summary);
    void deleteBundleSignal();
    void fetchBundleSignal(OAINumbers_v2_regulatory_compliance_bundle summary);
    void listBundleSignal(OAIListBundleResponse summary);
    void updateBundleSignal(OAINumbers_v2_regulatory_compliance_bundle summary);


    void createBundleSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_bundle summary);
    void deleteBundleSignalFull(OAIHttpRequestWorker *worker);
    void fetchBundleSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_bundle summary);
    void listBundleSignalFull(OAIHttpRequestWorker *worker, OAIListBundleResponse summary);
    void updateBundleSignalFull(OAIHttpRequestWorker *worker, OAINumbers_v2_regulatory_compliance_bundle summary);

    Q_DECL_DEPRECATED_X("Use createBundleSignalError() instead")
    void createBundleSignalE(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBundleSignalError(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBundleSignalError() instead")
    void deleteBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBundleSignalError() instead")
    void fetchBundleSignalE(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBundleSignalError(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBundleSignalError() instead")
    void listBundleSignalE(OAIListBundleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBundleSignalError(OAIListBundleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBundleSignalError() instead")
    void updateBundleSignalE(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBundleSignalError(OAINumbers_v2_regulatory_compliance_bundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBundleSignalErrorFull() instead")
    void createBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBundleSignalErrorFull() instead")
    void deleteBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBundleSignalErrorFull() instead")
    void fetchBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBundleSignalErrorFull() instead")
    void listBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBundleSignalErrorFull() instead")
    void updateBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
