/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers_v2_authorization_document.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers_v2_authorization_document::OAINumbers_v2_authorization_document(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers_v2_authorization_document::OAINumbers_v2_authorization_document() {
    this->initializeModel();
}

OAINumbers_v2_authorization_document::~OAINumbers_v2_authorization_document() {}

void OAINumbers_v2_authorization_document::initializeModel() {

    m_address_sid_isSet = false;
    m_address_sid_isValid = false;

    m_cc_emails_isSet = false;
    m_cc_emails_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINumbers_v2_authorization_document::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers_v2_authorization_document::fromJsonObject(QJsonObject json) {

    m_address_sid_isValid = ::OpenAPI::fromJsonValue(m_address_sid, json[QString("address_sid")]);
    m_address_sid_isSet = !json[QString("address_sid")].isNull() && m_address_sid_isValid;

    m_cc_emails_isValid = ::OpenAPI::fromJsonValue(m_cc_emails, json[QString("cc_emails")]);
    m_cc_emails_isSet = !json[QString("cc_emails")].isNull() && m_cc_emails_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINumbers_v2_authorization_document::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers_v2_authorization_document::asJsonObject() const {
    QJsonObject obj;
    if (m_address_sid_isSet) {
        obj.insert(QString("address_sid"), ::OpenAPI::toJsonValue(m_address_sid));
    }
    if (m_cc_emails.size() > 0) {
        obj.insert(QString("cc_emails"), ::OpenAPI::toJsonValue(m_cc_emails));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINumbers_v2_authorization_document::getAddressSid() const {
    return m_address_sid;
}
void OAINumbers_v2_authorization_document::setAddressSid(const QString &address_sid) {
    m_address_sid = address_sid;
    m_address_sid_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_address_sid_Set() const{
    return m_address_sid_isSet;
}

bool OAINumbers_v2_authorization_document::is_address_sid_Valid() const{
    return m_address_sid_isValid;
}

QList<QString> OAINumbers_v2_authorization_document::getCcEmails() const {
    return m_cc_emails;
}
void OAINumbers_v2_authorization_document::setCcEmails(const QList<QString> &cc_emails) {
    m_cc_emails = cc_emails;
    m_cc_emails_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_cc_emails_Set() const{
    return m_cc_emails_isSet;
}

bool OAINumbers_v2_authorization_document::is_cc_emails_Valid() const{
    return m_cc_emails_isValid;
}

QDateTime OAINumbers_v2_authorization_document::getDateCreated() const {
    return m_date_created;
}
void OAINumbers_v2_authorization_document::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAINumbers_v2_authorization_document::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAINumbers_v2_authorization_document::getDateUpdated() const {
    return m_date_updated;
}
void OAINumbers_v2_authorization_document::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAINumbers_v2_authorization_document::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAINumbers_v2_authorization_document::getEmail() const {
    return m_email;
}
void OAINumbers_v2_authorization_document::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_email_Set() const{
    return m_email_isSet;
}

bool OAINumbers_v2_authorization_document::is_email_Valid() const{
    return m_email_isValid;
}

OAIObject OAINumbers_v2_authorization_document::getLinks() const {
    return m_links;
}
void OAINumbers_v2_authorization_document::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_links_Set() const{
    return m_links_isSet;
}

bool OAINumbers_v2_authorization_document::is_links_Valid() const{
    return m_links_isValid;
}

QString OAINumbers_v2_authorization_document::getSid() const {
    return m_sid;
}
void OAINumbers_v2_authorization_document::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINumbers_v2_authorization_document::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIAuthorization_document_enum_status OAINumbers_v2_authorization_document::getStatus() const {
    return m_status;
}
void OAINumbers_v2_authorization_document::setStatus(const OAIAuthorization_document_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_status_Set() const{
    return m_status_isSet;
}

bool OAINumbers_v2_authorization_document::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINumbers_v2_authorization_document::getUrl() const {
    return m_url;
}
void OAINumbers_v2_authorization_document::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINumbers_v2_authorization_document::is_url_Set() const{
    return m_url_isSet;
}

bool OAINumbers_v2_authorization_document::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINumbers_v2_authorization_document::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers_v2_authorization_document::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
