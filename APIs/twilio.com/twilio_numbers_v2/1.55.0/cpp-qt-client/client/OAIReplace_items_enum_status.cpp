/**
 * Twilio - Numbers
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplace_items_enum_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplace_items_enum_status::OAIReplace_items_enum_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplace_items_enum_status::OAIReplace_items_enum_status() {
    this->initializeModel();
}

OAIReplace_items_enum_status::~OAIReplace_items_enum_status() {}

void OAIReplace_items_enum_status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReplace_items_enum_status::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReplace_items_enum_status::fromJson(QString jsonString) {
    
    if ( jsonString.compare("draft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::DRAFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending-review", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::PENDING_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("in-review", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::IN_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("twilio-rejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::TWILIO_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("twilio-approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::TWILIO_APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("provisionally-approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplace_items_enum_status::PROVISIONALLY_APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReplace_items_enum_status::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReplace_items_enum_status::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReplace_items_enum_status::DRAFT:
            val = "draft";
            break;
        case eOAIReplace_items_enum_status::PENDING_REVIEW:
            val = "pending-review";
            break;
        case eOAIReplace_items_enum_status::IN_REVIEW:
            val = "in-review";
            break;
        case eOAIReplace_items_enum_status::TWILIO_REJECTED:
            val = "twilio-rejected";
            break;
        case eOAIReplace_items_enum_status::TWILIO_APPROVED:
            val = "twilio-approved";
            break;
        case eOAIReplace_items_enum_status::PROVISIONALLY_APPROVED:
            val = "provisionally-approved";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReplace_items_enum_status::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReplace_items_enum_status::eOAIReplace_items_enum_status OAIReplace_items_enum_status::getValue() const {
    return m_value;
}

void OAIReplace_items_enum_status::setValue(const OAIReplace_items_enum_status::eOAIReplace_items_enum_status& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReplace_items_enum_status::isSet() const {
    
    return m_value_isSet;
}

bool OAIReplace_items_enum_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
