# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replace_items_enum_status import ReplaceItemsEnumStatus
import re
from openapi_server import util


class NumbersV2RegulatoryComplianceBundleReplaceItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, email: str=None, friendly_name: str=None, regulation_sid: str=None, sid: str=None, status: ReplaceItemsEnumStatus=None, status_callback: str=None, valid_until: datetime=None):
        """NumbersV2RegulatoryComplianceBundleReplaceItems - a model defined in OpenAPI

        :param account_sid: The account_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param date_created: The date_created of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param date_updated: The date_updated of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param email: The email of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param friendly_name: The friendly_name of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param regulation_sid: The regulation_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param sid: The sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param status: The status of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param status_callback: The status_callback of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :param valid_until: The valid_until of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'email': str,
            'friendly_name': str,
            'regulation_sid': str,
            'sid': str,
            'status': ReplaceItemsEnumStatus,
            'status_callback': str,
            'valid_until': datetime
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'email': 'email',
            'friendly_name': 'friendly_name',
            'regulation_sid': 'regulation_sid',
            'sid': 'sid',
            'status': 'status',
            'status_callback': 'status_callback',
            'valid_until': 'valid_until'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._email = email
        self._friendly_name = friendly_name
        self._regulation_sid = regulation_sid
        self._sid = sid
        self._status = status
        self._status_callback = status_callback
        self._valid_until = valid_until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumbersV2RegulatoryComplianceBundleReplaceItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The numbers.v2.regulatory_compliance.bundle.replace_items of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Bundle resource.

        :return: The account_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Bundle resource.

        :param account_sid: The account_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def email(self):
        """Gets the email of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The email address that will receive updates when the Bundle resource changes status.

        :return: The email of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The email address that will receive updates when the Bundle resource changes status.

        :param email: The email of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type email: str
        """

        self._email = email

    @property
    def friendly_name(self):
        """Gets the friendly_name of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def regulation_sid(self):
        """Gets the regulation_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The unique string of a regulation that is associated to the Bundle resource.

        :return: The regulation_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._regulation_sid

    @regulation_sid.setter
    def regulation_sid(self, regulation_sid):
        """Sets the regulation_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The unique string of a regulation that is associated to the Bundle resource.

        :param regulation_sid: The regulation_sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type regulation_sid: str
        """
        if regulation_sid is not None and len(regulation_sid) > 34:
            raise ValueError("Invalid value for `regulation_sid`, length must be less than or equal to `34`")
        if regulation_sid is not None and len(regulation_sid) < 34:
            raise ValueError("Invalid value for `regulation_sid`, length must be greater than or equal to `34`")
        if regulation_sid is not None and not re.search(r'^RN[0-9a-fA-F]{32}$', regulation_sid):
            raise ValueError("Invalid value for `regulation_sid`, must be a follow pattern or equal to `/^RN[0-9a-fA-F]{32}$/`")

        self._regulation_sid = regulation_sid

    @property
    def sid(self):
        """Gets the sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The unique string that we created to identify the Bundle resource.

        :return: The sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The unique string that we created to identify the Bundle resource.

        :param sid: The sid of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^BU[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^BU[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this NumbersV2RegulatoryComplianceBundleReplaceItems.


        :return: The status of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: ReplaceItemsEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NumbersV2RegulatoryComplianceBundleReplaceItems.


        :param status: The status of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type status: ReplaceItemsEnumStatus
        """

        self._status = status

    @property
    def status_callback(self):
        """Gets the status_callback of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The URL we call to inform your application of status changes.

        :return: The status_callback of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The URL we call to inform your application of status changes.

        :param status_callback: The status_callback of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def valid_until(self):
        """Gets the valid_until of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format when the resource will be valid until.

        :return: The valid_until of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this NumbersV2RegulatoryComplianceBundleReplaceItems.

        The date and time in GMT in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format when the resource will be valid until.

        :param valid_until: The valid_until of this NumbersV2RegulatoryComplianceBundleReplaceItems.
        :type valid_until: datetime
        """

        self._valid_until = valid_until
