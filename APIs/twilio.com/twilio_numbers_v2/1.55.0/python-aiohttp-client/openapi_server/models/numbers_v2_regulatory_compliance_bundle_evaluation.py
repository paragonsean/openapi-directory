# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_enum_status import EvaluationEnumStatus
import re
from openapi_server import util


class NumbersV2RegulatoryComplianceBundleEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, bundle_sid: str=None, date_created: datetime=None, regulation_sid: str=None, results: List[object]=None, sid: str=None, status: EvaluationEnumStatus=None, url: str=None):
        """NumbersV2RegulatoryComplianceBundleEvaluation - a model defined in OpenAPI

        :param account_sid: The account_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param bundle_sid: The bundle_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param date_created: The date_created of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param regulation_sid: The regulation_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param results: The results of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param sid: The sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param status: The status of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :param url: The url of this NumbersV2RegulatoryComplianceBundleEvaluation.
        """
        self.openapi_types = {
            'account_sid': str,
            'bundle_sid': str,
            'date_created': datetime,
            'regulation_sid': str,
            'results': List[object],
            'sid': str,
            'status': EvaluationEnumStatus,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'bundle_sid': 'bundle_sid',
            'date_created': 'date_created',
            'regulation_sid': 'regulation_sid',
            'results': 'results',
            'sid': 'sid',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._bundle_sid = bundle_sid
        self._date_created = date_created
        self._regulation_sid = regulation_sid
        self._results = results
        self._sid = sid
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumbersV2RegulatoryComplianceBundleEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The numbers.v2.regulatory_compliance.bundle.evaluation of this NumbersV2RegulatoryComplianceBundleEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Bundle resource.

        :return: The account_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Bundle resource.

        :param account_sid: The account_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def bundle_sid(self):
        """Gets the bundle_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string that we created to identify the Bundle resource.

        :return: The bundle_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: str
        """
        return self._bundle_sid

    @bundle_sid.setter
    def bundle_sid(self, bundle_sid):
        """Sets the bundle_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string that we created to identify the Bundle resource.

        :param bundle_sid: The bundle_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type bundle_sid: str
        """
        if bundle_sid is not None and len(bundle_sid) > 34:
            raise ValueError("Invalid value for `bundle_sid`, length must be less than or equal to `34`")
        if bundle_sid is not None and len(bundle_sid) < 34:
            raise ValueError("Invalid value for `bundle_sid`, length must be greater than or equal to `34`")
        if bundle_sid is not None and not re.search(r'^BU[0-9a-fA-F]{32}$', bundle_sid):
            raise ValueError("Invalid value for `bundle_sid`, must be a follow pattern or equal to `/^BU[0-9a-fA-F]{32}$/`")

        self._bundle_sid = bundle_sid

    @property
    def date_created(self):
        """Gets the date_created of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :return: The date_created of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :param date_created: The date_created of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def regulation_sid(self):
        """Gets the regulation_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string of a regulation that is associated to the Bundle resource.

        :return: The regulation_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: str
        """
        return self._regulation_sid

    @regulation_sid.setter
    def regulation_sid(self, regulation_sid):
        """Sets the regulation_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string of a regulation that is associated to the Bundle resource.

        :param regulation_sid: The regulation_sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type regulation_sid: str
        """
        if regulation_sid is not None and len(regulation_sid) > 34:
            raise ValueError("Invalid value for `regulation_sid`, length must be less than or equal to `34`")
        if regulation_sid is not None and len(regulation_sid) < 34:
            raise ValueError("Invalid value for `regulation_sid`, length must be greater than or equal to `34`")
        if regulation_sid is not None and not re.search(r'^RN[0-9a-fA-F]{32}$', regulation_sid):
            raise ValueError("Invalid value for `regulation_sid`, must be a follow pattern or equal to `/^RN[0-9a-fA-F]{32}$/`")

        self._regulation_sid = regulation_sid

    @property
    def results(self):
        """Gets the results of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The results of the Evaluation which includes the valid and invalid attributes.

        :return: The results of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: List[object]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The results of the Evaluation which includes the valid and invalid attributes.

        :param results: The results of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type results: List[object]
        """

        self._results = results

    @property
    def sid(self):
        """Gets the sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string that identifies the Evaluation resource.

        :return: The sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NumbersV2RegulatoryComplianceBundleEvaluation.

        The unique string that identifies the Evaluation resource.

        :param sid: The sid of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^EL[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^EL[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :return: The status of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: EvaluationEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :param status: The status of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type status: EvaluationEnumStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :return: The url of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NumbersV2RegulatoryComplianceBundleEvaluation.


        :param url: The url of this NumbersV2RegulatoryComplianceBundleEvaluation.
        :type url: str
        """

        self._url = url
