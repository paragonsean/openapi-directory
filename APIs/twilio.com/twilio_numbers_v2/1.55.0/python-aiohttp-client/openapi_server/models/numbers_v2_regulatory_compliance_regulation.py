# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regulation_enum_end_user_type import RegulationEnumEndUserType
import re
from openapi_server import util


class NumbersV2RegulatoryComplianceRegulation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_user_type: RegulationEnumEndUserType=None, friendly_name: str=None, iso_country: str=None, number_type: str=None, requirements: object=None, sid: str=None, url: str=None):
        """NumbersV2RegulatoryComplianceRegulation - a model defined in OpenAPI

        :param end_user_type: The end_user_type of this NumbersV2RegulatoryComplianceRegulation.
        :param friendly_name: The friendly_name of this NumbersV2RegulatoryComplianceRegulation.
        :param iso_country: The iso_country of this NumbersV2RegulatoryComplianceRegulation.
        :param number_type: The number_type of this NumbersV2RegulatoryComplianceRegulation.
        :param requirements: The requirements of this NumbersV2RegulatoryComplianceRegulation.
        :param sid: The sid of this NumbersV2RegulatoryComplianceRegulation.
        :param url: The url of this NumbersV2RegulatoryComplianceRegulation.
        """
        self.openapi_types = {
            'end_user_type': RegulationEnumEndUserType,
            'friendly_name': str,
            'iso_country': str,
            'number_type': str,
            'requirements': object,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'end_user_type': 'end_user_type',
            'friendly_name': 'friendly_name',
            'iso_country': 'iso_country',
            'number_type': 'number_type',
            'requirements': 'requirements',
            'sid': 'sid',
            'url': 'url'
        }

        self._end_user_type = end_user_type
        self._friendly_name = friendly_name
        self._iso_country = iso_country
        self._number_type = number_type
        self._requirements = requirements
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumbersV2RegulatoryComplianceRegulation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The numbers.v2.regulatory_compliance.regulation of this NumbersV2RegulatoryComplianceRegulation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_user_type(self):
        """Gets the end_user_type of this NumbersV2RegulatoryComplianceRegulation.


        :return: The end_user_type of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: RegulationEnumEndUserType
        """
        return self._end_user_type

    @end_user_type.setter
    def end_user_type(self, end_user_type):
        """Sets the end_user_type of this NumbersV2RegulatoryComplianceRegulation.


        :param end_user_type: The end_user_type of this NumbersV2RegulatoryComplianceRegulation.
        :type end_user_type: RegulationEnumEndUserType
        """

        self._end_user_type = end_user_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this NumbersV2RegulatoryComplianceRegulation.

        A human-readable description that is assigned to describe the Regulation resource. Examples can include Germany: Mobile - Business.

        :return: The friendly_name of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this NumbersV2RegulatoryComplianceRegulation.

        A human-readable description that is assigned to describe the Regulation resource. Examples can include Germany: Mobile - Business.

        :param friendly_name: The friendly_name of this NumbersV2RegulatoryComplianceRegulation.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def iso_country(self):
        """Gets the iso_country of this NumbersV2RegulatoryComplianceRegulation.

        The ISO country code of the phone number's country.

        :return: The iso_country of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: str
        """
        return self._iso_country

    @iso_country.setter
    def iso_country(self, iso_country):
        """Sets the iso_country of this NumbersV2RegulatoryComplianceRegulation.

        The ISO country code of the phone number's country.

        :param iso_country: The iso_country of this NumbersV2RegulatoryComplianceRegulation.
        :type iso_country: str
        """

        self._iso_country = iso_country

    @property
    def number_type(self):
        """Gets the number_type of this NumbersV2RegulatoryComplianceRegulation.

        The type of phone number restricted by the regulatory requirement. For example, Germany mobile phone numbers provisioned by businesses require a business name with commercial register proof from the Handelsregisterauszug and a proof of address from Handelsregisterauszug or a trade license by Gewerbeanmeldung.

        :return: The number_type of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this NumbersV2RegulatoryComplianceRegulation.

        The type of phone number restricted by the regulatory requirement. For example, Germany mobile phone numbers provisioned by businesses require a business name with commercial register proof from the Handelsregisterauszug and a proof of address from Handelsregisterauszug or a trade license by Gewerbeanmeldung.

        :param number_type: The number_type of this NumbersV2RegulatoryComplianceRegulation.
        :type number_type: str
        """

        self._number_type = number_type

    @property
    def requirements(self):
        """Gets the requirements of this NumbersV2RegulatoryComplianceRegulation.

        The SID of an object that holds the regulatory information of the phone number country, phone number type, and end user type.

        :return: The requirements of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: object
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this NumbersV2RegulatoryComplianceRegulation.

        The SID of an object that holds the regulatory information of the phone number country, phone number type, and end user type.

        :param requirements: The requirements of this NumbersV2RegulatoryComplianceRegulation.
        :type requirements: object
        """

        self._requirements = requirements

    @property
    def sid(self):
        """Gets the sid of this NumbersV2RegulatoryComplianceRegulation.

        The unique string that identifies the Regulation resource.

        :return: The sid of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NumbersV2RegulatoryComplianceRegulation.

        The unique string that identifies the Regulation resource.

        :param sid: The sid of this NumbersV2RegulatoryComplianceRegulation.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^RN[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^RN[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this NumbersV2RegulatoryComplianceRegulation.

        The absolute URL of the Regulation resource.

        :return: The url of this NumbersV2RegulatoryComplianceRegulation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NumbersV2RegulatoryComplianceRegulation.

        The absolute URL of the Regulation resource.

        :param url: The url of this NumbersV2RegulatoryComplianceRegulation.
        :type url: str
        """

        self._url = url
