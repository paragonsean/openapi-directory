/**
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTrunkingCountryResponse from '../model/ListTrunkingCountryResponse';
import ListVoiceCountryResponse from '../model/ListVoiceCountryResponse';
import PricingV2TrunkingCountryInstance from '../model/PricingV2TrunkingCountryInstance';
import PricingV2VoiceVoiceCountryInstance from '../model/PricingV2VoiceVoiceCountryInstance';

/**
* PricingV2Country service.
* @module api/PricingV2CountryApi
* @version 1.55.0
*/
export default class PricingV2CountryApi {

    /**
    * Constructs a new PricingV2CountryApi. 
    * @alias module:api/PricingV2CountryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchTrunkingCountry operation.
     * @callback module:api/PricingV2CountryApi~fetchTrunkingCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingV2TrunkingCountryInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Country.
     * @param {String} isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the origin-based voice pricing information to fetch.
     * @param {module:api/PricingV2CountryApi~fetchTrunkingCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingV2TrunkingCountryInstance}
     */
    fetchTrunkingCountry(isoCountry, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'isoCountry' is set
      if (isoCountry === undefined || isoCountry === null) {
        throw new Error("Missing the required parameter 'isoCountry' when calling fetchTrunkingCountry");
      }

      let pathParams = {
        'IsoCountry': isoCountry
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingV2TrunkingCountryInstance;
      let basePaths = ['https://pricing.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Trunking/Countries/{IsoCountry}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchVoiceCountry operation.
     * @callback module:api/PricingV2CountryApi~fetchVoiceCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PricingV2VoiceVoiceCountryInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Country.
     * @param {String} isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the origin-based voice pricing information to fetch.
     * @param {module:api/PricingV2CountryApi~fetchVoiceCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PricingV2VoiceVoiceCountryInstance}
     */
    fetchVoiceCountry(isoCountry, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'isoCountry' is set
      if (isoCountry === undefined || isoCountry === null) {
        throw new Error("Missing the required parameter 'isoCountry' when calling fetchVoiceCountry");
      }

      let pathParams = {
        'IsoCountry': isoCountry
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingV2VoiceVoiceCountryInstance;
      let basePaths = ['https://pricing.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Voice/Countries/{IsoCountry}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrunkingCountry operation.
     * @callback module:api/PricingV2CountryApi~listTrunkingCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrunkingCountryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PricingV2CountryApi~listTrunkingCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrunkingCountryResponse}
     */
    listTrunkingCountry(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTrunkingCountryResponse;
      let basePaths = ['https://pricing.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Trunking/Countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listVoiceCountry operation.
     * @callback module:api/PricingV2CountryApi~listVoiceCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVoiceCountryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/PricingV2CountryApi~listVoiceCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVoiceCountryResponse}
     */
    listVoiceCountry(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVoiceCountryResponse;
      let basePaths = ['https://pricing.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Voice/Countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
