/*
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:45.343521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner {
  public static final String SERIALIZED_NAME_BASE_PRICE = "base_price";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private BigDecimal basePrice;

  public static final String SERIALIZED_NAME_CURRENT_PRICE = "current_price";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE)
  private BigDecimal currentPrice;

  public static final String SERIALIZED_NAME_DESTINATION_PREFIXES = "destination_prefixes";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PREFIXES)
  private List<String> destinationPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ORIGINATION_PREFIXES = "origination_prefixes";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_PREFIXES)
  private List<String> originationPrefixes = new ArrayList<>();

  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner() {
  }

  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner basePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * Get basePrice
   * @return basePrice
   */
  @javax.annotation.Nullable
  public BigDecimal getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
  }


  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner currentPrice(BigDecimal currentPrice) {
    this.currentPrice = currentPrice;
    return this;
  }

  /**
   * Get currentPrice
   * @return currentPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentPrice() {
    return currentPrice;
  }

  public void setCurrentPrice(BigDecimal currentPrice) {
    this.currentPrice = currentPrice;
  }


  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner destinationPrefixes(List<String> destinationPrefixes) {
    this.destinationPrefixes = destinationPrefixes;
    return this;
  }

  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner addDestinationPrefixesItem(String destinationPrefixesItem) {
    if (this.destinationPrefixes == null) {
      this.destinationPrefixes = new ArrayList<>();
    }
    this.destinationPrefixes.add(destinationPrefixesItem);
    return this;
  }

  /**
   * Get destinationPrefixes
   * @return destinationPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getDestinationPrefixes() {
    return destinationPrefixes;
  }

  public void setDestinationPrefixes(List<String> destinationPrefixes) {
    this.destinationPrefixes = destinationPrefixes;
  }


  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Get friendlyName
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner originationPrefixes(List<String> originationPrefixes) {
    this.originationPrefixes = originationPrefixes;
    return this;
  }

  public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner addOriginationPrefixesItem(String originationPrefixesItem) {
    if (this.originationPrefixes == null) {
      this.originationPrefixes = new ArrayList<>();
    }
    this.originationPrefixes.add(originationPrefixesItem);
    return this;
  }

  /**
   * Get originationPrefixes
   * @return originationPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getOriginationPrefixes() {
    return originationPrefixes;
  }

  public void setOriginationPrefixes(List<String> originationPrefixes) {
    this.originationPrefixes = originationPrefixes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner = (PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner) o;
    return Objects.equals(this.basePrice, pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.basePrice) &&
        Objects.equals(this.currentPrice, pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.currentPrice) &&
        Objects.equals(this.destinationPrefixes, pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.destinationPrefixes) &&
        Objects.equals(this.friendlyName, pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.friendlyName) &&
        Objects.equals(this.originationPrefixes, pricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.originationPrefixes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePrice, currentPrice, destinationPrefixes, friendlyName, originationPrefixes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner {\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    destinationPrefixes: ").append(toIndentedString(destinationPrefixes)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    originationPrefixes: ").append(toIndentedString(originationPrefixes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_price");
    openapiFields.add("current_price");
    openapiFields.add("destination_prefixes");
    openapiFields.add("friendly_name");
    openapiFields.add("origination_prefixes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner is not found in the empty JSON string", PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("destination_prefixes") != null && !jsonObj.get("destination_prefixes").isJsonNull() && !jsonObj.get("destination_prefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("destination_prefixes").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("origination_prefixes") != null && !jsonObj.get("origination_prefixes").isJsonNull() && !jsonObj.get("origination_prefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origination_prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("origination_prefixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner>() {
           @Override
           public void write(JsonWriter out, PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner
   * @throws IOException if the JSON string is invalid with respect to PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner
   */
  public static PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner.class);
  }

  /**
   * Convert an instance of PricingV2TrunkingCountryInstanceTerminatingPrefixPricesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

