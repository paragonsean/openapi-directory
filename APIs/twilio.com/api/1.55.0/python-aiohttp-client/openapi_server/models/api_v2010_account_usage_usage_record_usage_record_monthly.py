# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_record_monthly_enum_category import UsageRecordMonthlyEnumCategory
import re
from openapi_server import util


class ApiV2010AccountUsageUsageRecordUsageRecordMonthly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, api_version: str=None, as_of: str=None, category: UsageRecordMonthlyEnumCategory=None, count: str=None, count_unit: str=None, description: str=None, end_date: date=None, price: float=None, price_unit: str=None, start_date: date=None, subresource_uris: object=None, uri: str=None, usage: str=None, usage_unit: str=None):
        """ApiV2010AccountUsageUsageRecordUsageRecordMonthly - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param api_version: The api_version of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param as_of: The as_of of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param category: The category of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param count: The count of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param count_unit: The count_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param description: The description of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param end_date: The end_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param price: The price of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param price_unit: The price_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param start_date: The start_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param subresource_uris: The subresource_uris of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param uri: The uri of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param usage: The usage of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :param usage_unit: The usage_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        """
        self.openapi_types = {
            'account_sid': str,
            'api_version': str,
            'as_of': str,
            'category': UsageRecordMonthlyEnumCategory,
            'count': str,
            'count_unit': str,
            'description': str,
            'end_date': date,
            'price': float,
            'price_unit': str,
            'start_date': date,
            'subresource_uris': object,
            'uri': str,
            'usage': str,
            'usage_unit': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'api_version': 'api_version',
            'as_of': 'as_of',
            'category': 'category',
            'count': 'count',
            'count_unit': 'count_unit',
            'description': 'description',
            'end_date': 'end_date',
            'price': 'price',
            'price_unit': 'price_unit',
            'start_date': 'start_date',
            'subresource_uris': 'subresource_uris',
            'uri': 'uri',
            'usage': 'usage',
            'usage_unit': 'usage_unit'
        }

        self._account_sid = account_sid
        self._api_version = api_version
        self._as_of = as_of
        self._category = category
        self._count = count
        self._count_unit = count_unit
        self._description = description
        self._end_date = end_date
        self._price = price
        self._price_unit = price_unit
        self._start_date = start_date
        self._subresource_uris = subresource_uris
        self._uri = uri
        self._usage = usage
        self._usage_unit = usage_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountUsageUsageRecordUsageRecordMonthly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.usage.usage_record.usage_record_monthly of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that accrued the usage.

        :return: The account_sid of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that accrued the usage.

        :param account_sid: The account_sid of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def api_version(self):
        """Gets the api_version of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The API version used to create the resource.

        :return: The api_version of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The API version used to create the resource.

        :param api_version: The api_version of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def as_of(self):
        """Gets the as_of of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        Usage records up to date as of this timestamp, formatted as YYYY-MM-DDTHH:MM:SS+00:00. All timestamps are in GMT

        :return: The as_of of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        Usage records up to date as of this timestamp, formatted as YYYY-MM-DDTHH:MM:SS+00:00. All timestamps are in GMT

        :param as_of: The as_of of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type as_of: str
        """

        self._as_of = as_of

    @property
    def category(self):
        """Gets the category of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.


        :return: The category of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: UsageRecordMonthlyEnumCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.


        :param category: The category of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type category: UsageRecordMonthlyEnumCategory
        """

        self._category = category

    @property
    def count(self):
        """Gets the count of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The number of usage events, such as the number of calls.

        :return: The count of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The number of usage events, such as the number of calls.

        :param count: The count of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type count: str
        """

        self._count = count

    @property
    def count_unit(self):
        """Gets the count_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The units in which `count` is measured, such as `calls` for calls or `messages` for SMS.

        :return: The count_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._count_unit

    @count_unit.setter
    def count_unit(self, count_unit):
        """Sets the count_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The units in which `count` is measured, such as `calls` for calls or `messages` for SMS.

        :param count_unit: The count_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type count_unit: str
        """

        self._count_unit = count_unit

    @property
    def description(self):
        """Gets the description of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        A plain-language description of the usage category.

        :return: The description of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        A plain-language description of the usage category.

        :param description: The description of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The last date for which usage is included in the UsageRecord. The date is specified in GMT and formatted as `YYYY-MM-DD`.

        :return: The end_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The last date for which usage is included in the UsageRecord. The date is specified in GMT and formatted as `YYYY-MM-DD`.

        :param end_date: The end_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def price(self):
        """Gets the price of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The total price of the usage in the currency specified in `price_unit` and associated with the account.

        :return: The price of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The total price of the usage in the currency specified in `price_unit` and associated with the account.

        :param price: The price of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type price: float
        """

        self._price = price

    @property
    def price_unit(self):
        """Gets the price_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The currency in which `price` is measured, in [ISO 4127](https://www.iso.org/iso/home/standards/currency_codes.htm) format, such as `usd`, `eur`, and `jpy`.

        :return: The price_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit):
        """Sets the price_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The currency in which `price` is measured, in [ISO 4127](https://www.iso.org/iso/home/standards/currency_codes.htm) format, such as `usd`, `eur`, and `jpy`.

        :param price_unit: The price_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type price_unit: str
        """

        self._price_unit = price_unit

    @property
    def start_date(self):
        """Gets the start_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The first date for which usage is included in this UsageRecord. The date is specified in GMT and formatted as `YYYY-MM-DD`.

        :return: The start_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The first date for which usage is included in this UsageRecord. The date is specified in GMT and formatted as `YYYY-MM-DD`.

        :param start_date: The start_date of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def subresource_uris(self):
        """Gets the subresource_uris of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        A list of related resources identified by their URIs. For more information, see [List Subresources](https://www.twilio.com/docs/usage/api/usage-record#list-subresources).

        :return: The subresource_uris of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: object
        """
        return self._subresource_uris

    @subresource_uris.setter
    def subresource_uris(self, subresource_uris):
        """Sets the subresource_uris of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        A list of related resources identified by their URIs. For more information, see [List Subresources](https://www.twilio.com/docs/usage/api/usage-record#list-subresources).

        :param subresource_uris: The subresource_uris of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type subresource_uris: object
        """

        self._subresource_uris = subresource_uris

    @property
    def uri(self):
        """Gets the uri of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The URI of the resource, relative to `https://api.twilio.com`.

        :return: The uri of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The URI of the resource, relative to `https://api.twilio.com`.

        :param uri: The uri of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type uri: str
        """

        self._uri = uri

    @property
    def usage(self):
        """Gets the usage of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The amount used to bill usage and measured in units described in `usage_unit`.

        :return: The usage of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The amount used to bill usage and measured in units described in `usage_unit`.

        :param usage: The usage of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type usage: str
        """

        self._usage = usage

    @property
    def usage_unit(self):
        """Gets the usage_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The units in which `usage` is measured, such as `minutes` for calls or `messages` for SMS.

        :return: The usage_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :rtype: str
        """
        return self._usage_unit

    @usage_unit.setter
    def usage_unit(self, usage_unit):
        """Sets the usage_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.

        The units in which `usage` is measured, such as `minutes` for calls or `messages` for SMS.

        :param usage_unit: The usage_unit of this ApiV2010AccountUsageUsageRecordUsageRecordMonthly.
        :type usage_unit: str
        """

        self._usage_unit = usage_unit
