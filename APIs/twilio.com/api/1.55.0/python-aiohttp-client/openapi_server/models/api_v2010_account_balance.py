# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApiV2010AccountBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, balance: str=None, currency: str=None):
        """ApiV2010AccountBalance - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountBalance.
        :param balance: The balance of this ApiV2010AccountBalance.
        :param currency: The currency of this ApiV2010AccountBalance.
        """
        self.openapi_types = {
            'account_sid': str,
            'balance': str,
            'currency': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'balance': 'balance',
            'currency': 'currency'
        }

        self._account_sid = account_sid
        self._balance = balance
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.balance of this ApiV2010AccountBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountBalance.

        The unique SID identifier of the Account.

        :return: The account_sid of this ApiV2010AccountBalance.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountBalance.

        The unique SID identifier of the Account.

        :param account_sid: The account_sid of this ApiV2010AccountBalance.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def balance(self):
        """Gets the balance of this ApiV2010AccountBalance.

        The balance of the Account, in units specified by the unit parameter. Balance changes may not be reflected immediately. Child accounts do not contain balance information

        :return: The balance of this ApiV2010AccountBalance.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ApiV2010AccountBalance.

        The balance of the Account, in units specified by the unit parameter. Balance changes may not be reflected immediately. Child accounts do not contain balance information

        :param balance: The balance of this ApiV2010AccountBalance.
        :type balance: str
        """

        self._balance = balance

    @property
    def currency(self):
        """Gets the currency of this ApiV2010AccountBalance.

        The units of currency for the account balance

        :return: The currency of this ApiV2010AccountBalance.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ApiV2010AccountBalance.

        The units of currency for the account balance

        :param currency: The currency of this ApiV2010AccountBalance.
        :type currency: str
        """

        self._currency = currency
