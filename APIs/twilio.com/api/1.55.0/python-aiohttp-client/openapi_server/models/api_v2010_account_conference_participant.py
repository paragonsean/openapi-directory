# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_enum_status import ParticipantEnumStatus
import re
from openapi_server import util


class ApiV2010AccountConferenceParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, call_sid: str=None, call_sid_to_coach: str=None, coaching: bool=None, conference_sid: str=None, date_created: str=None, date_updated: str=None, end_conference_on_exit: bool=None, hold: bool=None, label: str=None, muted: bool=None, start_conference_on_enter: bool=None, status: ParticipantEnumStatus=None, uri: str=None):
        """ApiV2010AccountConferenceParticipant - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountConferenceParticipant.
        :param call_sid: The call_sid of this ApiV2010AccountConferenceParticipant.
        :param call_sid_to_coach: The call_sid_to_coach of this ApiV2010AccountConferenceParticipant.
        :param coaching: The coaching of this ApiV2010AccountConferenceParticipant.
        :param conference_sid: The conference_sid of this ApiV2010AccountConferenceParticipant.
        :param date_created: The date_created of this ApiV2010AccountConferenceParticipant.
        :param date_updated: The date_updated of this ApiV2010AccountConferenceParticipant.
        :param end_conference_on_exit: The end_conference_on_exit of this ApiV2010AccountConferenceParticipant.
        :param hold: The hold of this ApiV2010AccountConferenceParticipant.
        :param label: The label of this ApiV2010AccountConferenceParticipant.
        :param muted: The muted of this ApiV2010AccountConferenceParticipant.
        :param start_conference_on_enter: The start_conference_on_enter of this ApiV2010AccountConferenceParticipant.
        :param status: The status of this ApiV2010AccountConferenceParticipant.
        :param uri: The uri of this ApiV2010AccountConferenceParticipant.
        """
        self.openapi_types = {
            'account_sid': str,
            'call_sid': str,
            'call_sid_to_coach': str,
            'coaching': bool,
            'conference_sid': str,
            'date_created': str,
            'date_updated': str,
            'end_conference_on_exit': bool,
            'hold': bool,
            'label': str,
            'muted': bool,
            'start_conference_on_enter': bool,
            'status': ParticipantEnumStatus,
            'uri': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'call_sid': 'call_sid',
            'call_sid_to_coach': 'call_sid_to_coach',
            'coaching': 'coaching',
            'conference_sid': 'conference_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'end_conference_on_exit': 'end_conference_on_exit',
            'hold': 'hold',
            'label': 'label',
            'muted': 'muted',
            'start_conference_on_enter': 'start_conference_on_enter',
            'status': 'status',
            'uri': 'uri'
        }

        self._account_sid = account_sid
        self._call_sid = call_sid
        self._call_sid_to_coach = call_sid_to_coach
        self._coaching = coaching
        self._conference_sid = conference_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._end_conference_on_exit = end_conference_on_exit
        self._hold = hold
        self._label = label
        self._muted = muted
        self._start_conference_on_enter = start_conference_on_enter
        self._status = status
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountConferenceParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.conference.participant of this ApiV2010AccountConferenceParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.

        :return: The account_sid of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.

        :param account_sid: The account_sid of this ApiV2010AccountConferenceParticipant.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def call_sid(self):
        """Gets the call_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.

        :return: The call_sid of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._call_sid

    @call_sid.setter
    def call_sid(self, call_sid):
        """Sets the call_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.

        :param call_sid: The call_sid of this ApiV2010AccountConferenceParticipant.
        :type call_sid: str
        """
        if call_sid is not None and len(call_sid) > 34:
            raise ValueError("Invalid value for `call_sid`, length must be less than or equal to `34`")
        if call_sid is not None and len(call_sid) < 34:
            raise ValueError("Invalid value for `call_sid`, length must be greater than or equal to `34`")
        if call_sid is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', call_sid):
            raise ValueError("Invalid value for `call_sid`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._call_sid = call_sid

    @property
    def call_sid_to_coach(self):
        """Gets the call_sid_to_coach of this ApiV2010AccountConferenceParticipant.

        The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.

        :return: The call_sid_to_coach of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._call_sid_to_coach

    @call_sid_to_coach.setter
    def call_sid_to_coach(self, call_sid_to_coach):
        """Sets the call_sid_to_coach of this ApiV2010AccountConferenceParticipant.

        The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.

        :param call_sid_to_coach: The call_sid_to_coach of this ApiV2010AccountConferenceParticipant.
        :type call_sid_to_coach: str
        """
        if call_sid_to_coach is not None and len(call_sid_to_coach) > 34:
            raise ValueError("Invalid value for `call_sid_to_coach`, length must be less than or equal to `34`")
        if call_sid_to_coach is not None and len(call_sid_to_coach) < 34:
            raise ValueError("Invalid value for `call_sid_to_coach`, length must be greater than or equal to `34`")
        if call_sid_to_coach is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', call_sid_to_coach):
            raise ValueError("Invalid value for `call_sid_to_coach`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._call_sid_to_coach = call_sid_to_coach

    @property
    def coaching(self):
        """Gets the coaching of this ApiV2010AccountConferenceParticipant.

        Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.

        :return: The coaching of this ApiV2010AccountConferenceParticipant.
        :rtype: bool
        """
        return self._coaching

    @coaching.setter
    def coaching(self, coaching):
        """Sets the coaching of this ApiV2010AccountConferenceParticipant.

        Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.

        :param coaching: The coaching of this ApiV2010AccountConferenceParticipant.
        :type coaching: bool
        """

        self._coaching = coaching

    @property
    def conference_sid(self):
        """Gets the conference_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the conference the participant is in.

        :return: The conference_sid of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._conference_sid

    @conference_sid.setter
    def conference_sid(self, conference_sid):
        """Sets the conference_sid of this ApiV2010AccountConferenceParticipant.

        The SID of the conference the participant is in.

        :param conference_sid: The conference_sid of this ApiV2010AccountConferenceParticipant.
        :type conference_sid: str
        """
        if conference_sid is not None and len(conference_sid) > 34:
            raise ValueError("Invalid value for `conference_sid`, length must be less than or equal to `34`")
        if conference_sid is not None and len(conference_sid) < 34:
            raise ValueError("Invalid value for `conference_sid`, length must be greater than or equal to `34`")
        if conference_sid is not None and not re.search(r'^CF[0-9a-fA-F]{32}$', conference_sid):
            raise ValueError("Invalid value for `conference_sid`, must be a follow pattern or equal to `/^CF[0-9a-fA-F]{32}$/`")

        self._conference_sid = conference_sid

    @property
    def date_created(self):
        """Gets the date_created of this ApiV2010AccountConferenceParticipant.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiV2010AccountConferenceParticipant.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ApiV2010AccountConferenceParticipant.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiV2010AccountConferenceParticipant.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiV2010AccountConferenceParticipant.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ApiV2010AccountConferenceParticipant.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def end_conference_on_exit(self):
        """Gets the end_conference_on_exit of this ApiV2010AccountConferenceParticipant.

        Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves.

        :return: The end_conference_on_exit of this ApiV2010AccountConferenceParticipant.
        :rtype: bool
        """
        return self._end_conference_on_exit

    @end_conference_on_exit.setter
    def end_conference_on_exit(self, end_conference_on_exit):
        """Sets the end_conference_on_exit of this ApiV2010AccountConferenceParticipant.

        Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves.

        :param end_conference_on_exit: The end_conference_on_exit of this ApiV2010AccountConferenceParticipant.
        :type end_conference_on_exit: bool
        """

        self._end_conference_on_exit = end_conference_on_exit

    @property
    def hold(self):
        """Gets the hold of this ApiV2010AccountConferenceParticipant.

        Whether the participant is on hold. Can be `true` or `false`.

        :return: The hold of this ApiV2010AccountConferenceParticipant.
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this ApiV2010AccountConferenceParticipant.

        Whether the participant is on hold. Can be `true` or `false`.

        :param hold: The hold of this ApiV2010AccountConferenceParticipant.
        :type hold: bool
        """

        self._hold = hold

    @property
    def label(self):
        """Gets the label of this ApiV2010AccountConferenceParticipant.

        The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.

        :return: The label of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ApiV2010AccountConferenceParticipant.

        The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.

        :param label: The label of this ApiV2010AccountConferenceParticipant.
        :type label: str
        """

        self._label = label

    @property
    def muted(self):
        """Gets the muted of this ApiV2010AccountConferenceParticipant.

        Whether the participant is muted. Can be `true` or `false`.

        :return: The muted of this ApiV2010AccountConferenceParticipant.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this ApiV2010AccountConferenceParticipant.

        Whether the participant is muted. Can be `true` or `false`.

        :param muted: The muted of this ApiV2010AccountConferenceParticipant.
        :type muted: bool
        """

        self._muted = muted

    @property
    def start_conference_on_enter(self):
        """Gets the start_conference_on_enter of this ApiV2010AccountConferenceParticipant.

        Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.

        :return: The start_conference_on_enter of this ApiV2010AccountConferenceParticipant.
        :rtype: bool
        """
        return self._start_conference_on_enter

    @start_conference_on_enter.setter
    def start_conference_on_enter(self, start_conference_on_enter):
        """Sets the start_conference_on_enter of this ApiV2010AccountConferenceParticipant.

        Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.

        :param start_conference_on_enter: The start_conference_on_enter of this ApiV2010AccountConferenceParticipant.
        :type start_conference_on_enter: bool
        """

        self._start_conference_on_enter = start_conference_on_enter

    @property
    def status(self):
        """Gets the status of this ApiV2010AccountConferenceParticipant.


        :return: The status of this ApiV2010AccountConferenceParticipant.
        :rtype: ParticipantEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiV2010AccountConferenceParticipant.


        :param status: The status of this ApiV2010AccountConferenceParticipant.
        :type status: ParticipantEnumStatus
        """

        self._status = status

    @property
    def uri(self):
        """Gets the uri of this ApiV2010AccountConferenceParticipant.

        The URI of the resource, relative to `https://api.twilio.com`.

        :return: The uri of this ApiV2010AccountConferenceParticipant.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2010AccountConferenceParticipant.

        The URI of the resource, relative to `https://api.twilio.com`.

        :param uri: The uri of this ApiV2010AccountConferenceParticipant.
        :type uri: str
        """

        self._uri = uri
