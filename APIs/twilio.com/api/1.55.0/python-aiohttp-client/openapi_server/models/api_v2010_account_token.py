# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_v2010_account_token_ice_servers_inner import ApiV2010AccountTokenIceServersInner
import re
from openapi_server import util


class ApiV2010AccountToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: str=None, date_updated: str=None, ice_servers: List[ApiV2010AccountTokenIceServersInner]=None, password: str=None, ttl: str=None, username: str=None):
        """ApiV2010AccountToken - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountToken.
        :param date_created: The date_created of this ApiV2010AccountToken.
        :param date_updated: The date_updated of this ApiV2010AccountToken.
        :param ice_servers: The ice_servers of this ApiV2010AccountToken.
        :param password: The password of this ApiV2010AccountToken.
        :param ttl: The ttl of this ApiV2010AccountToken.
        :param username: The username of this ApiV2010AccountToken.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': str,
            'date_updated': str,
            'ice_servers': List[ApiV2010AccountTokenIceServersInner],
            'password': str,
            'ttl': str,
            'username': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'ice_servers': 'ice_servers',
            'password': 'password',
            'ttl': 'ttl',
            'username': 'username'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._ice_servers = ice_servers
        self._password = password
        self._ttl = ttl
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.token of this ApiV2010AccountToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountToken.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Token resource.

        :return: The account_sid of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountToken.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Token resource.

        :param account_sid: The account_sid of this ApiV2010AccountToken.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this ApiV2010AccountToken.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiV2010AccountToken.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ApiV2010AccountToken.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiV2010AccountToken.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiV2010AccountToken.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ApiV2010AccountToken.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def ice_servers(self):
        """Gets the ice_servers of this ApiV2010AccountToken.

        An array representing the ephemeral credentials and the STUN and TURN server URIs.

        :return: The ice_servers of this ApiV2010AccountToken.
        :rtype: List[ApiV2010AccountTokenIceServersInner]
        """
        return self._ice_servers

    @ice_servers.setter
    def ice_servers(self, ice_servers):
        """Sets the ice_servers of this ApiV2010AccountToken.

        An array representing the ephemeral credentials and the STUN and TURN server URIs.

        :param ice_servers: The ice_servers of this ApiV2010AccountToken.
        :type ice_servers: List[ApiV2010AccountTokenIceServersInner]
        """

        self._ice_servers = ice_servers

    @property
    def password(self):
        """Gets the password of this ApiV2010AccountToken.

        The temporary password that the username will use when authenticating with Twilio.

        :return: The password of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiV2010AccountToken.

        The temporary password that the username will use when authenticating with Twilio.

        :param password: The password of this ApiV2010AccountToken.
        :type password: str
        """

        self._password = password

    @property
    def ttl(self):
        """Gets the ttl of this ApiV2010AccountToken.

        The duration in seconds for which the username and password are valid.

        :return: The ttl of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ApiV2010AccountToken.

        The duration in seconds for which the username and password are valid.

        :param ttl: The ttl of this ApiV2010AccountToken.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def username(self):
        """Gets the username of this ApiV2010AccountToken.

        The temporary username that uniquely identifies a Token.

        :return: The username of this ApiV2010AccountToken.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiV2010AccountToken.

        The temporary username that uniquely identifies a Token.

        :param username: The username of this ApiV2010AccountToken.
        :type username: str
        """

        self._username = username
