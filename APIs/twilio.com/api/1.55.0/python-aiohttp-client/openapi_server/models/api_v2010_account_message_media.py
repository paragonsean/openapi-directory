# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApiV2010AccountMessageMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, content_type: str=None, date_created: str=None, date_updated: str=None, parent_sid: str=None, sid: str=None, uri: str=None):
        """ApiV2010AccountMessageMedia - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountMessageMedia.
        :param content_type: The content_type of this ApiV2010AccountMessageMedia.
        :param date_created: The date_created of this ApiV2010AccountMessageMedia.
        :param date_updated: The date_updated of this ApiV2010AccountMessageMedia.
        :param parent_sid: The parent_sid of this ApiV2010AccountMessageMedia.
        :param sid: The sid of this ApiV2010AccountMessageMedia.
        :param uri: The uri of this ApiV2010AccountMessageMedia.
        """
        self.openapi_types = {
            'account_sid': str,
            'content_type': str,
            'date_created': str,
            'date_updated': str,
            'parent_sid': str,
            'sid': str,
            'uri': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'content_type': 'content_type',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'parent_sid': 'parent_sid',
            'sid': 'sid',
            'uri': 'uri'
        }

        self._account_sid = account_sid
        self._content_type = content_type
        self._date_created = date_created
        self._date_updated = date_updated
        self._parent_sid = parent_sid
        self._sid = sid
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountMessageMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.message.media of this ApiV2010AccountMessageMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountMessageMedia.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with this Media resource.

        :return: The account_sid of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountMessageMedia.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with this Media resource.

        :param account_sid: The account_sid of this ApiV2010AccountMessageMedia.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def content_type(self):
        """Gets the content_type of this ApiV2010AccountMessageMedia.

        The default [MIME type](https://en.wikipedia.org/wiki/Internet_media_type) of the media, for example `image/jpeg`, `image/png`, or `image/gif`.

        :return: The content_type of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ApiV2010AccountMessageMedia.

        The default [MIME type](https://en.wikipedia.org/wiki/Internet_media_type) of the media, for example `image/jpeg`, `image/png`, or `image/gif`.

        :param content_type: The content_type of this ApiV2010AccountMessageMedia.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def date_created(self):
        """Gets the date_created of this ApiV2010AccountMessageMedia.

        The date and time in GMT when this Media resource was created, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiV2010AccountMessageMedia.

        The date and time in GMT when this Media resource was created, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ApiV2010AccountMessageMedia.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiV2010AccountMessageMedia.

        The date and time in GMT when this Media resource was last updated, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiV2010AccountMessageMedia.

        The date and time in GMT when this Media resource was last updated, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ApiV2010AccountMessageMedia.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def parent_sid(self):
        """Gets the parent_sid of this ApiV2010AccountMessageMedia.

        The SID of the Message resource that is associated with this Media resource.

        :return: The parent_sid of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._parent_sid

    @parent_sid.setter
    def parent_sid(self, parent_sid):
        """Sets the parent_sid of this ApiV2010AccountMessageMedia.

        The SID of the Message resource that is associated with this Media resource.

        :param parent_sid: The parent_sid of this ApiV2010AccountMessageMedia.
        :type parent_sid: str
        """
        if parent_sid is not None and len(parent_sid) > 34:
            raise ValueError("Invalid value for `parent_sid`, length must be less than or equal to `34`")
        if parent_sid is not None and len(parent_sid) < 34:
            raise ValueError("Invalid value for `parent_sid`, length must be greater than or equal to `34`")
        if parent_sid is not None and not re.search(r'^(SM|MM)[0-9a-fA-F]{32}$', parent_sid):
            raise ValueError("Invalid value for `parent_sid`, must be a follow pattern or equal to `/^(SM|MM)[0-9a-fA-F]{32}$/`")

        self._parent_sid = parent_sid

    @property
    def sid(self):
        """Gets the sid of this ApiV2010AccountMessageMedia.

        The unique string that identifies this Media resource.

        :return: The sid of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ApiV2010AccountMessageMedia.

        The unique string that identifies this Media resource.

        :param sid: The sid of this ApiV2010AccountMessageMedia.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^ME[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^ME[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def uri(self):
        """Gets the uri of this ApiV2010AccountMessageMedia.

        The URI of this Media resource, relative to `https://api.twilio.com`.

        :return: The uri of this ApiV2010AccountMessageMedia.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2010AccountMessageMedia.

        The URI of this Media resource, relative to `https://api.twilio.com`.

        :param uri: The uri of this ApiV2010AccountMessageMedia.
        :type uri: str
        """

        self._uri = uri
