# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_recording_enum_source import ConferenceRecordingEnumSource
from openapi_server.models.conference_recording_enum_status import ConferenceRecordingEnumStatus
import re
from openapi_server import util


class ApiV2010AccountConferenceConferenceRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, api_version: str=None, call_sid: str=None, channels: int=None, conference_sid: str=None, date_created: str=None, date_updated: str=None, duration: str=None, encryption_details: object=None, error_code: int=None, price: str=None, price_unit: str=None, sid: str=None, source: ConferenceRecordingEnumSource=None, start_time: str=None, status: ConferenceRecordingEnumStatus=None, uri: str=None):
        """ApiV2010AccountConferenceConferenceRecording - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountConferenceConferenceRecording.
        :param api_version: The api_version of this ApiV2010AccountConferenceConferenceRecording.
        :param call_sid: The call_sid of this ApiV2010AccountConferenceConferenceRecording.
        :param channels: The channels of this ApiV2010AccountConferenceConferenceRecording.
        :param conference_sid: The conference_sid of this ApiV2010AccountConferenceConferenceRecording.
        :param date_created: The date_created of this ApiV2010AccountConferenceConferenceRecording.
        :param date_updated: The date_updated of this ApiV2010AccountConferenceConferenceRecording.
        :param duration: The duration of this ApiV2010AccountConferenceConferenceRecording.
        :param encryption_details: The encryption_details of this ApiV2010AccountConferenceConferenceRecording.
        :param error_code: The error_code of this ApiV2010AccountConferenceConferenceRecording.
        :param price: The price of this ApiV2010AccountConferenceConferenceRecording.
        :param price_unit: The price_unit of this ApiV2010AccountConferenceConferenceRecording.
        :param sid: The sid of this ApiV2010AccountConferenceConferenceRecording.
        :param source: The source of this ApiV2010AccountConferenceConferenceRecording.
        :param start_time: The start_time of this ApiV2010AccountConferenceConferenceRecording.
        :param status: The status of this ApiV2010AccountConferenceConferenceRecording.
        :param uri: The uri of this ApiV2010AccountConferenceConferenceRecording.
        """
        self.openapi_types = {
            'account_sid': str,
            'api_version': str,
            'call_sid': str,
            'channels': int,
            'conference_sid': str,
            'date_created': str,
            'date_updated': str,
            'duration': str,
            'encryption_details': object,
            'error_code': int,
            'price': str,
            'price_unit': str,
            'sid': str,
            'source': ConferenceRecordingEnumSource,
            'start_time': str,
            'status': ConferenceRecordingEnumStatus,
            'uri': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'api_version': 'api_version',
            'call_sid': 'call_sid',
            'channels': 'channels',
            'conference_sid': 'conference_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'duration': 'duration',
            'encryption_details': 'encryption_details',
            'error_code': 'error_code',
            'price': 'price',
            'price_unit': 'price_unit',
            'sid': 'sid',
            'source': 'source',
            'start_time': 'start_time',
            'status': 'status',
            'uri': 'uri'
        }

        self._account_sid = account_sid
        self._api_version = api_version
        self._call_sid = call_sid
        self._channels = channels
        self._conference_sid = conference_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._duration = duration
        self._encryption_details = encryption_details
        self._error_code = error_code
        self._price = price
        self._price_unit = price_unit
        self._sid = sid
        self._source = source
        self._start_time = start_time
        self._status = status
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountConferenceConferenceRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.conference.conference_recording of this ApiV2010AccountConferenceConferenceRecording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountConferenceConferenceRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource.

        :return: The account_sid of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountConferenceConferenceRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource.

        :param account_sid: The account_sid of this ApiV2010AccountConferenceConferenceRecording.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def api_version(self):
        """Gets the api_version of this ApiV2010AccountConferenceConferenceRecording.

        The API version used to create the recording.

        :return: The api_version of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApiV2010AccountConferenceConferenceRecording.

        The API version used to create the recording.

        :param api_version: The api_version of this ApiV2010AccountConferenceConferenceRecording.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def call_sid(self):
        """Gets the call_sid of this ApiV2010AccountConferenceConferenceRecording.

        The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Conference Recording resource is associated with.

        :return: The call_sid of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._call_sid

    @call_sid.setter
    def call_sid(self, call_sid):
        """Sets the call_sid of this ApiV2010AccountConferenceConferenceRecording.

        The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Conference Recording resource is associated with.

        :param call_sid: The call_sid of this ApiV2010AccountConferenceConferenceRecording.
        :type call_sid: str
        """
        if call_sid is not None and len(call_sid) > 34:
            raise ValueError("Invalid value for `call_sid`, length must be less than or equal to `34`")
        if call_sid is not None and len(call_sid) < 34:
            raise ValueError("Invalid value for `call_sid`, length must be greater than or equal to `34`")
        if call_sid is not None and not re.search(r'^CA[0-9a-fA-F]{32}$', call_sid):
            raise ValueError("Invalid value for `call_sid`, must be a follow pattern or equal to `/^CA[0-9a-fA-F]{32}$/`")

        self._call_sid = call_sid

    @property
    def channels(self):
        """Gets the channels of this ApiV2010AccountConferenceConferenceRecording.

        The number of channels in the final recording file.  Can be: `1`, or `2`. Separating a two leg call into two separate channels of the recording file is supported in [Dial](https://www.twilio.com/docs/voice/twiml/dial#attributes-record) and [Outbound Rest API](https://www.twilio.com/docs/voice/make-calls) record options.

        :return: The channels of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ApiV2010AccountConferenceConferenceRecording.

        The number of channels in the final recording file.  Can be: `1`, or `2`. Separating a two leg call into two separate channels of the recording file is supported in [Dial](https://www.twilio.com/docs/voice/twiml/dial#attributes-record) and [Outbound Rest API](https://www.twilio.com/docs/voice/make-calls) record options.

        :param channels: The channels of this ApiV2010AccountConferenceConferenceRecording.
        :type channels: int
        """

        self._channels = channels

    @property
    def conference_sid(self):
        """Gets the conference_sid of this ApiV2010AccountConferenceConferenceRecording.

        The Conference SID that identifies the conference associated with the recording.

        :return: The conference_sid of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._conference_sid

    @conference_sid.setter
    def conference_sid(self, conference_sid):
        """Sets the conference_sid of this ApiV2010AccountConferenceConferenceRecording.

        The Conference SID that identifies the conference associated with the recording.

        :param conference_sid: The conference_sid of this ApiV2010AccountConferenceConferenceRecording.
        :type conference_sid: str
        """
        if conference_sid is not None and len(conference_sid) > 34:
            raise ValueError("Invalid value for `conference_sid`, length must be less than or equal to `34`")
        if conference_sid is not None and len(conference_sid) < 34:
            raise ValueError("Invalid value for `conference_sid`, length must be greater than or equal to `34`")
        if conference_sid is not None and not re.search(r'^CF[0-9a-fA-F]{32}$', conference_sid):
            raise ValueError("Invalid value for `conference_sid`, must be a follow pattern or equal to `/^CF[0-9a-fA-F]{32}$/`")

        self._conference_sid = conference_sid

    @property
    def date_created(self):
        """Gets the date_created of this ApiV2010AccountConferenceConferenceRecording.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiV2010AccountConferenceConferenceRecording.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ApiV2010AccountConferenceConferenceRecording.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiV2010AccountConferenceConferenceRecording.

        The date and time in GMT that the resource was last updated, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiV2010AccountConferenceConferenceRecording.

        The date and time in GMT that the resource was last updated, specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ApiV2010AccountConferenceConferenceRecording.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def duration(self):
        """Gets the duration of this ApiV2010AccountConferenceConferenceRecording.

        The length of the recording in seconds.

        :return: The duration of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ApiV2010AccountConferenceConferenceRecording.

        The length of the recording in seconds.

        :param duration: The duration of this ApiV2010AccountConferenceConferenceRecording.
        :type duration: str
        """

        self._duration = duration

    @property
    def encryption_details(self):
        """Gets the encryption_details of this ApiV2010AccountConferenceConferenceRecording.

        How to decrypt the recording if it was encrypted using [Call Recording Encryption](https://www.twilio.com/docs/voice/tutorials/voice-recording-encryption) feature.

        :return: The encryption_details of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: object
        """
        return self._encryption_details

    @encryption_details.setter
    def encryption_details(self, encryption_details):
        """Sets the encryption_details of this ApiV2010AccountConferenceConferenceRecording.

        How to decrypt the recording if it was encrypted using [Call Recording Encryption](https://www.twilio.com/docs/voice/tutorials/voice-recording-encryption) feature.

        :param encryption_details: The encryption_details of this ApiV2010AccountConferenceConferenceRecording.
        :type encryption_details: object
        """

        self._encryption_details = encryption_details

    @property
    def error_code(self):
        """Gets the error_code of this ApiV2010AccountConferenceConferenceRecording.

        The error code that describes why the recording is `absent`. The error code is described in our [Error Dictionary](https://www.twilio.com/docs/api/errors). This value is null if the recording `status` is not `absent`.

        :return: The error_code of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ApiV2010AccountConferenceConferenceRecording.

        The error code that describes why the recording is `absent`. The error code is described in our [Error Dictionary](https://www.twilio.com/docs/api/errors). This value is null if the recording `status` is not `absent`.

        :param error_code: The error_code of this ApiV2010AccountConferenceConferenceRecording.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def price(self):
        """Gets the price of this ApiV2010AccountConferenceConferenceRecording.

        The one-time cost of creating the recording in the `price_unit` currency.

        :return: The price of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ApiV2010AccountConferenceConferenceRecording.

        The one-time cost of creating the recording in the `price_unit` currency.

        :param price: The price of this ApiV2010AccountConferenceConferenceRecording.
        :type price: str
        """

        self._price = price

    @property
    def price_unit(self):
        """Gets the price_unit of this ApiV2010AccountConferenceConferenceRecording.

        The currency used in the `price` property. Example: `USD`.

        :return: The price_unit of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit):
        """Sets the price_unit of this ApiV2010AccountConferenceConferenceRecording.

        The currency used in the `price` property. Example: `USD`.

        :param price_unit: The price_unit of this ApiV2010AccountConferenceConferenceRecording.
        :type price_unit: str
        """

        self._price_unit = price_unit

    @property
    def sid(self):
        """Gets the sid of this ApiV2010AccountConferenceConferenceRecording.

        The unique string that that we created to identify the Conference Recording resource.

        :return: The sid of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ApiV2010AccountConferenceConferenceRecording.

        The unique string that that we created to identify the Conference Recording resource.

        :param sid: The sid of this ApiV2010AccountConferenceConferenceRecording.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^RE[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^RE[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def source(self):
        """Gets the source of this ApiV2010AccountConferenceConferenceRecording.


        :return: The source of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: ConferenceRecordingEnumSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApiV2010AccountConferenceConferenceRecording.


        :param source: The source of this ApiV2010AccountConferenceConferenceRecording.
        :type source: ConferenceRecordingEnumSource
        """

        self._source = source

    @property
    def start_time(self):
        """Gets the start_time of this ApiV2010AccountConferenceConferenceRecording.

        The start time of the recording in GMT and in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.

        :return: The start_time of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ApiV2010AccountConferenceConferenceRecording.

        The start time of the recording in GMT and in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.

        :param start_time: The start_time of this ApiV2010AccountConferenceConferenceRecording.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ApiV2010AccountConferenceConferenceRecording.


        :return: The status of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: ConferenceRecordingEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiV2010AccountConferenceConferenceRecording.


        :param status: The status of this ApiV2010AccountConferenceConferenceRecording.
        :type status: ConferenceRecordingEnumStatus
        """

        self._status = status

    @property
    def uri(self):
        """Gets the uri of this ApiV2010AccountConferenceConferenceRecording.

        The URI of the resource, relative to `https://api.twilio.com`.

        :return: The uri of this ApiV2010AccountConferenceConferenceRecording.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2010AccountConferenceConferenceRecording.

        The URI of the resource, relative to `https://api.twilio.com`.

        :param uri: The uri of this ApiV2010AccountConferenceConferenceRecording.
        :type uri: str
        """

        self._uri = uri
