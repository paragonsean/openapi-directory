# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApiV2010AccountAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, city: str=None, customer_name: str=None, date_created: str=None, date_updated: str=None, emergency_enabled: bool=None, friendly_name: str=None, iso_country: str=None, postal_code: str=None, region: str=None, sid: str=None, street: str=None, street_secondary: str=None, uri: str=None, validated: bool=None, verified: bool=None):
        """ApiV2010AccountAddress - a model defined in OpenAPI

        :param account_sid: The account_sid of this ApiV2010AccountAddress.
        :param city: The city of this ApiV2010AccountAddress.
        :param customer_name: The customer_name of this ApiV2010AccountAddress.
        :param date_created: The date_created of this ApiV2010AccountAddress.
        :param date_updated: The date_updated of this ApiV2010AccountAddress.
        :param emergency_enabled: The emergency_enabled of this ApiV2010AccountAddress.
        :param friendly_name: The friendly_name of this ApiV2010AccountAddress.
        :param iso_country: The iso_country of this ApiV2010AccountAddress.
        :param postal_code: The postal_code of this ApiV2010AccountAddress.
        :param region: The region of this ApiV2010AccountAddress.
        :param sid: The sid of this ApiV2010AccountAddress.
        :param street: The street of this ApiV2010AccountAddress.
        :param street_secondary: The street_secondary of this ApiV2010AccountAddress.
        :param uri: The uri of this ApiV2010AccountAddress.
        :param validated: The validated of this ApiV2010AccountAddress.
        :param verified: The verified of this ApiV2010AccountAddress.
        """
        self.openapi_types = {
            'account_sid': str,
            'city': str,
            'customer_name': str,
            'date_created': str,
            'date_updated': str,
            'emergency_enabled': bool,
            'friendly_name': str,
            'iso_country': str,
            'postal_code': str,
            'region': str,
            'sid': str,
            'street': str,
            'street_secondary': str,
            'uri': str,
            'validated': bool,
            'verified': bool
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'city': 'city',
            'customer_name': 'customer_name',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'emergency_enabled': 'emergency_enabled',
            'friendly_name': 'friendly_name',
            'iso_country': 'iso_country',
            'postal_code': 'postal_code',
            'region': 'region',
            'sid': 'sid',
            'street': 'street',
            'street_secondary': 'street_secondary',
            'uri': 'uri',
            'validated': 'validated',
            'verified': 'verified'
        }

        self._account_sid = account_sid
        self._city = city
        self._customer_name = customer_name
        self._date_created = date_created
        self._date_updated = date_updated
        self._emergency_enabled = emergency_enabled
        self._friendly_name = friendly_name
        self._iso_country = iso_country
        self._postal_code = postal_code
        self._region = region
        self._sid = sid
        self._street = street
        self._street_secondary = street_secondary
        self._uri = uri
        self._validated = validated
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiV2010AccountAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api.v2010.account.address of this ApiV2010AccountAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ApiV2010AccountAddress.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource.

        :return: The account_sid of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ApiV2010AccountAddress.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource.

        :param account_sid: The account_sid of this ApiV2010AccountAddress.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def city(self):
        """Gets the city of this ApiV2010AccountAddress.

        The city in which the address is located.

        :return: The city of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ApiV2010AccountAddress.

        The city in which the address is located.

        :param city: The city of this ApiV2010AccountAddress.
        :type city: str
        """

        self._city = city

    @property
    def customer_name(self):
        """Gets the customer_name of this ApiV2010AccountAddress.

        The name associated with the address.This property has a maximum length of 16 4-byte characters, or 21 3-byte characters.

        :return: The customer_name of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ApiV2010AccountAddress.

        The name associated with the address.This property has a maximum length of 16 4-byte characters, or 21 3-byte characters.

        :param customer_name: The customer_name of this ApiV2010AccountAddress.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def date_created(self):
        """Gets the date_created of this ApiV2010AccountAddress.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiV2010AccountAddress.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ApiV2010AccountAddress.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ApiV2010AccountAddress.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ApiV2010AccountAddress.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ApiV2010AccountAddress.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def emergency_enabled(self):
        """Gets the emergency_enabled of this ApiV2010AccountAddress.

        Whether emergency calling has been enabled on this number.

        :return: The emergency_enabled of this ApiV2010AccountAddress.
        :rtype: bool
        """
        return self._emergency_enabled

    @emergency_enabled.setter
    def emergency_enabled(self, emergency_enabled):
        """Sets the emergency_enabled of this ApiV2010AccountAddress.

        Whether emergency calling has been enabled on this number.

        :param emergency_enabled: The emergency_enabled of this ApiV2010AccountAddress.
        :type emergency_enabled: bool
        """

        self._emergency_enabled = emergency_enabled

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ApiV2010AccountAddress.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ApiV2010AccountAddress.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this ApiV2010AccountAddress.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def iso_country(self):
        """Gets the iso_country of this ApiV2010AccountAddress.

        The ISO country code of the address.

        :return: The iso_country of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._iso_country

    @iso_country.setter
    def iso_country(self, iso_country):
        """Sets the iso_country of this ApiV2010AccountAddress.

        The ISO country code of the address.

        :param iso_country: The iso_country of this ApiV2010AccountAddress.
        :type iso_country: str
        """

        self._iso_country = iso_country

    @property
    def postal_code(self):
        """Gets the postal_code of this ApiV2010AccountAddress.

        The postal code of the address.

        :return: The postal_code of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ApiV2010AccountAddress.

        The postal code of the address.

        :param postal_code: The postal_code of this ApiV2010AccountAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this ApiV2010AccountAddress.

        The state or region of the address.

        :return: The region of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ApiV2010AccountAddress.

        The state or region of the address.

        :param region: The region of this ApiV2010AccountAddress.
        :type region: str
        """

        self._region = region

    @property
    def sid(self):
        """Gets the sid of this ApiV2010AccountAddress.

        The unique string that that we created to identify the Address resource.

        :return: The sid of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ApiV2010AccountAddress.

        The unique string that that we created to identify the Address resource.

        :param sid: The sid of this ApiV2010AccountAddress.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^AD[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^AD[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def street(self):
        """Gets the street of this ApiV2010AccountAddress.

        The number and street address of the address.

        :return: The street of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ApiV2010AccountAddress.

        The number and street address of the address.

        :param street: The street of this ApiV2010AccountAddress.
        :type street: str
        """

        self._street = street

    @property
    def street_secondary(self):
        """Gets the street_secondary of this ApiV2010AccountAddress.

        The additional number and street address of the address.

        :return: The street_secondary of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._street_secondary

    @street_secondary.setter
    def street_secondary(self, street_secondary):
        """Sets the street_secondary of this ApiV2010AccountAddress.

        The additional number and street address of the address.

        :param street_secondary: The street_secondary of this ApiV2010AccountAddress.
        :type street_secondary: str
        """

        self._street_secondary = street_secondary

    @property
    def uri(self):
        """Gets the uri of this ApiV2010AccountAddress.

        The URI of the resource, relative to `https://api.twilio.com`.

        :return: The uri of this ApiV2010AccountAddress.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiV2010AccountAddress.

        The URI of the resource, relative to `https://api.twilio.com`.

        :param uri: The uri of this ApiV2010AccountAddress.
        :type uri: str
        """

        self._uri = uri

    @property
    def validated(self):
        """Gets the validated of this ApiV2010AccountAddress.

        Whether the address has been validated to comply with local regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been validated. `false` indicate the country doesn't require validation or the Address is not valid.

        :return: The validated of this ApiV2010AccountAddress.
        :rtype: bool
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """Sets the validated of this ApiV2010AccountAddress.

        Whether the address has been validated to comply with local regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been validated. `false` indicate the country doesn't require validation or the Address is not valid.

        :param validated: The validated of this ApiV2010AccountAddress.
        :type validated: bool
        """

        self._validated = validated

    @property
    def verified(self):
        """Gets the verified of this ApiV2010AccountAddress.

        Whether the address has been verified to comply with regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been verified. `false` indicate the country doesn't require verified or the Address is not valid.

        :return: The verified of this ApiV2010AccountAddress.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this ApiV2010AccountAddress.

        Whether the address has been verified to comply with regulation. In countries that require valid addresses, an invalid address will not be accepted. `true` indicates the Address has been verified. `false` indicate the country doesn't require verified or the Address is not valid.

        :param verified: The verified of this ApiV2010AccountAddress.
        :type verified: bool
        """

        self._verified = verified
