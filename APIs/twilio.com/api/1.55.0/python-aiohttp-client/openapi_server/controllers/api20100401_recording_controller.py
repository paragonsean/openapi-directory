from typing import List, Dict
from aiohttp import web

from openapi_server.models.api_v2010_account_call_call_recording import ApiV2010AccountCallCallRecording
from openapi_server.models.api_v2010_account_conference_conference_recording import ApiV2010AccountConferenceConferenceRecording
from openapi_server.models.api_v2010_account_recording import ApiV2010AccountRecording
from openapi_server.models.call_recording_enum_status import CallRecordingEnumStatus
from openapi_server.models.conference_recording_enum_status import ConferenceRecordingEnumStatus
from openapi_server.models.list_call_recording_response import ListCallRecordingResponse
from openapi_server.models.list_conference_recording_response import ListConferenceRecordingResponse
from openapi_server.models.list_recording_response import ListRecordingResponse
from openapi_server import util


async def create_call_recording(request: web.Request, account_sid, call_sid, recording_channels=None, recording_status_callback=None, recording_status_callback_event=None, recording_status_callback_method=None, recording_track=None, trim=None) -> web.Response:
    """create_call_recording

    Create a recording for the call

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    :type account_sid: str
    :param call_sid: The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    :type call_sid: str
    :param recording_channels: The number of channels used in the recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. &#x60;mono&#x60; records all parties of the call into one channel. &#x60;dual&#x60; records each party of a 2-party call into separate channels.
    :type recording_channels: str
    :param recording_status_callback: The URL we should call using the &#x60;recording_status_callback_method&#x60; on each recording event specified in  &#x60;recording_status_callback_event&#x60;. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    :type recording_status_callback: str
    :param recording_status_callback_event: The recording status events on which we should call the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60; and the default is &#x60;completed&#x60;. Separate multiple event values with a space.
    :type recording_status_callback_event: List[str]
    :param recording_status_callback_method: The HTTP method we should use to call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    :type recording_status_callback_method: str
    :param recording_track: The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio.
    :type recording_track: str
    :param trim: Whether to trim any leading and trailing silence in the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;do-not-trim&#x60;. &#x60;trim-silence&#x60; trims the silence from the beginning and end of the recording and &#x60;do-not-trim&#x60; does not.
    :type trim: str

    """
    return web.Response(status=200)


async def delete_call_recording(request: web.Request, account_sid, call_sid, sid) -> web.Response:
    """delete_call_recording

    Delete a recording from your account

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    :type account_sid: str
    :param call_sid: The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    :type call_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Recording resource to delete.
    :type sid: str

    """
    return web.Response(status=200)


async def delete_conference_recording(request: web.Request, account_sid, conference_sid, sid) -> web.Response:
    """delete_conference_recording

    Delete a recording from your account

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    :type account_sid: str
    :param conference_sid: The Conference SID that identifies the conference associated with the recording to delete.
    :type conference_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    :type sid: str

    """
    return web.Response(status=200)


async def delete_recording(request: web.Request, account_sid, sid) -> web.Response:
    """delete_recording

    Delete a recording from your account

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    :type account_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Recording resource to delete.
    :type sid: str

    """
    return web.Response(status=200)


async def fetch_call_recording(request: web.Request, account_sid, call_sid, sid) -> web.Response:
    """fetch_call_recording

    Fetch an instance of a recording for a call

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    :type account_sid: str
    :param call_sid: The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    :type call_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    :type sid: str

    """
    return web.Response(status=200)


async def fetch_conference_recording(request: web.Request, account_sid, conference_sid, sid) -> web.Response:
    """fetch_conference_recording

    Fetch an instance of a recording for a call

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    :type account_sid: str
    :param conference_sid: The Conference SID that identifies the conference associated with the recording to fetch.
    :type conference_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    :type sid: str

    """
    return web.Response(status=200)


async def fetch_recording(request: web.Request, account_sid, sid, include_soft_deleted=None) -> web.Response:
    """fetch_recording

    Fetch an instance of a recording

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    :type account_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    :type sid: str
    :param include_soft_deleted: A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    :type include_soft_deleted: bool

    """
    return web.Response(status=200)


async def list_call_recording(request: web.Request, account_sid, call_sid, date_created=None, date_created2=None, date_created3=None, page_size=None, page=None, page_token=None) -> web.Response:
    """list_call_recording

    Retrieve a list of recordings belonging to the call used to make the request

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    :type account_sid: str
    :param call_sid: The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    :type call_sid: str
    :param date_created: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created: str
    :param date_created2: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created2: str
    :param date_created3: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created3: str
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    date_created = util.deserialize_date(date_created)
    date_created2 = util.deserialize_date(date_created2)
    date_created3 = util.deserialize_date(date_created3)
    return web.Response(status=200)


async def list_conference_recording(request: web.Request, account_sid, conference_sid, date_created=None, date_created2=None, date_created3=None, page_size=None, page=None, page_token=None) -> web.Response:
    """list_conference_recording

    Retrieve a list of recordings belonging to the call used to make the request

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    :type account_sid: str
    :param conference_sid: The Conference SID that identifies the conference associated with the recording to read.
    :type conference_sid: str
    :param date_created: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created: str
    :param date_created2: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created2: str
    :param date_created3: The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date.
    :type date_created3: str
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    date_created = util.deserialize_date(date_created)
    date_created2 = util.deserialize_date(date_created2)
    date_created3 = util.deserialize_date(date_created3)
    return web.Response(status=200)


async def list_recording(request: web.Request, account_sid, date_created=None, date_created2=None, date_created3=None, call_sid=None, conference_sid=None, include_soft_deleted=None, page_size=None, page=None, page_token=None) -> web.Response:
    """list_recording

    Retrieve a list of recordings belonging to the account used to make the request

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    :type account_sid: str
    :param date_created: Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date.
    :type date_created: str
    :param date_created2: Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date.
    :type date_created2: str
    :param date_created3: Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date.
    :type date_created3: str
    :param call_sid: The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    :type call_sid: str
    :param conference_sid: The Conference SID that identifies the conference associated with the recording to read.
    :type conference_sid: str
    :param include_soft_deleted: A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    :type include_soft_deleted: bool
    :param page_size: How many resources to return in each list page. The default is 50, and the maximum is 1000.
    :type page_size: int
    :param page: The page index. This value is simply for client state.
    :type page: int
    :param page_token: The page token. This is provided by the API.
    :type page_token: str

    """
    date_created = util.deserialize_datetime(date_created)
    date_created2 = util.deserialize_datetime(date_created2)
    date_created3 = util.deserialize_datetime(date_created3)
    return web.Response(status=200)


async def update_call_recording(request: web.Request, account_sid, call_sid, sid, status, pause_behavior=None) -> web.Response:
    """update_call_recording

    Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    :type account_sid: str
    :param call_sid: The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    :type call_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Recording resource to update.
    :type sid: str
    :param status: 
    :type status: str
    :param pause_behavior: Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;.
    :type pause_behavior: str

    """
    return web.Response(status=200)


async def update_conference_recording(request: web.Request, account_sid, conference_sid, sid, status, pause_behavior=None) -> web.Response:
    """update_conference_recording

    Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.

    :param account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    :type account_sid: str
    :param conference_sid: The Conference SID that identifies the conference associated with the recording to update.
    :type conference_sid: str
    :param sid: The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use &#x60;Twilio.CURRENT&#x60; to reference the current active recording.
    :type sid: str
    :param status: 
    :type status: str
    :param pause_behavior: Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;.
    :type pause_behavior: str

    """
    return web.Response(status=200)
