/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401CredentialListApi_H
#define OAI_OAIApi20100401CredentialListApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_sip_sip_credential_list.h"
#include "OAIListSipCredentialListResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401CredentialListApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401CredentialListApi(const int timeOut = 0);
    ~OAIApi20100401CredentialListApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  friendly_name QString [required]
    */
    virtual void createSipCredentialList(const QString &account_sid, const QString &friendly_name);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSipCredentialList(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSipCredentialList(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSipCredentialList(const QString &account_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [required]
    */
    virtual void updateSipCredentialList(const QString &account_sid, const QString &sid, const QString &friendly_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSipCredentialListCallback(OAIHttpRequestWorker *worker);
    void deleteSipCredentialListCallback(OAIHttpRequestWorker *worker);
    void fetchSipCredentialListCallback(OAIHttpRequestWorker *worker);
    void listSipCredentialListCallback(OAIHttpRequestWorker *worker);
    void updateSipCredentialListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSipCredentialListSignal(OAIApi_v2010_account_sip_sip_credential_list summary);
    void deleteSipCredentialListSignal();
    void fetchSipCredentialListSignal(OAIApi_v2010_account_sip_sip_credential_list summary);
    void listSipCredentialListSignal(OAIListSipCredentialListResponse summary);
    void updateSipCredentialListSignal(OAIApi_v2010_account_sip_sip_credential_list summary);


    void createSipCredentialListSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list summary);
    void deleteSipCredentialListSignalFull(OAIHttpRequestWorker *worker);
    void fetchSipCredentialListSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list summary);
    void listSipCredentialListSignalFull(OAIHttpRequestWorker *worker, OAIListSipCredentialListResponse summary);
    void updateSipCredentialListSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list summary);

    Q_DECL_DEPRECATED_X("Use createSipCredentialListSignalError() instead")
    void createSipCredentialListSignalE(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipCredentialListSignalError(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipCredentialListSignalError() instead")
    void deleteSipCredentialListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipCredentialListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipCredentialListSignalError() instead")
    void fetchSipCredentialListSignalE(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipCredentialListSignalError(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipCredentialListSignalError() instead")
    void listSipCredentialListSignalE(OAIListSipCredentialListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipCredentialListSignalError(OAIListSipCredentialListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipCredentialListSignalError() instead")
    void updateSipCredentialListSignalE(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipCredentialListSignalError(OAIApi_v2010_account_sip_sip_credential_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSipCredentialListSignalErrorFull() instead")
    void createSipCredentialListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipCredentialListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipCredentialListSignalErrorFull() instead")
    void deleteSipCredentialListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipCredentialListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipCredentialListSignalErrorFull() instead")
    void fetchSipCredentialListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipCredentialListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipCredentialListSignalErrorFull() instead")
    void listSipCredentialListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipCredentialListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipCredentialListSignalErrorFull() instead")
    void updateSipCredentialListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipCredentialListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
