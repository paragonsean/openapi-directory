/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi20100401TollFreeApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIApi20100401TollFreeApi::OAIApi20100401TollFreeApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIApi20100401TollFreeApi::~OAIApi20100401TollFreeApi() {
}

void OAIApi20100401TollFreeApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createIncomingPhoneNumberTollFree", serverConf);
    _serverIndices.insert("createIncomingPhoneNumberTollFree", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listAvailablePhoneNumberTollFree", serverConf);
    _serverIndices.insert("listAvailablePhoneNumberTollFree", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listIncomingPhoneNumberTollFree", serverConf);
    _serverIndices.insert("listIncomingPhoneNumberTollFree", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIApi20100401TollFreeApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIApi20100401TollFreeApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIApi20100401TollFreeApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIApi20100401TollFreeApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIApi20100401TollFreeApi::setUsername(const QString &username) {
    _username = username;
}

void OAIApi20100401TollFreeApi::setPassword(const QString &password) {
    _password = password;
}


void OAIApi20100401TollFreeApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIApi20100401TollFreeApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIApi20100401TollFreeApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIApi20100401TollFreeApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401TollFreeApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401TollFreeApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIApi20100401TollFreeApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIApi20100401TollFreeApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIApi20100401TollFreeApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIApi20100401TollFreeApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIApi20100401TollFreeApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIApi20100401TollFreeApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIApi20100401TollFreeApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIApi20100401TollFreeApi::createIncomingPhoneNumberTollFree(const QString &account_sid, const QString &phone_number, const ::OpenAPI::OptionalParam<QString> &address_sid, const ::OpenAPI::OptionalParam<QString> &api_version, const ::OpenAPI::OptionalParam<QString> &bundle_sid, const ::OpenAPI::OptionalParam<QString> &emergency_address_sid, const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_toll_free_enum_emergency_status> &emergency_status, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<QString> &identity_sid, const ::OpenAPI::OptionalParam<QString> &sms_application_sid, const ::OpenAPI::OptionalParam<QString> &sms_fallback_method, const ::OpenAPI::OptionalParam<QString> &sms_fallback_url, const ::OpenAPI::OptionalParam<QString> &sms_method, const ::OpenAPI::OptionalParam<QString> &sms_url, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<QString> &trunk_sid, const ::OpenAPI::OptionalParam<QString> &voice_application_sid, const ::OpenAPI::OptionalParam<bool> &voice_caller_id_lookup, const ::OpenAPI::OptionalParam<QString> &voice_fallback_method, const ::OpenAPI::OptionalParam<QString> &voice_fallback_url, const ::OpenAPI::OptionalParam<QString> &voice_method, const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_toll_free_enum_voice_receive_mode> &voice_receive_mode, const ::OpenAPI::OptionalParam<QString> &voice_url) {
    QString fullPath = QString(_serverConfigs["createIncomingPhoneNumberTollFree"][_serverIndices.value("createIncomingPhoneNumberTollFree")].URL()+"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (address_sid.hasValue())
    {
        input.add_var("AddressSid", ::OpenAPI::toStringValue(address_sid.value()));
    }
    if (api_version.hasValue())
    {
        input.add_var("ApiVersion", ::OpenAPI::toStringValue(api_version.value()));
    }
    if (bundle_sid.hasValue())
    {
        input.add_var("BundleSid", ::OpenAPI::toStringValue(bundle_sid.value()));
    }
    if (emergency_address_sid.hasValue())
    {
        input.add_var("EmergencyAddressSid", ::OpenAPI::toStringValue(emergency_address_sid.value()));
    }
    if (emergency_status.hasValue())
    {
        input.add_var("EmergencyStatus", ::OpenAPI::toStringValue(emergency_status.value()));
    }
    if (friendly_name.hasValue())
    {
        input.add_var("FriendlyName", ::OpenAPI::toStringValue(friendly_name.value()));
    }
    if (identity_sid.hasValue())
    {
        input.add_var("IdentitySid", ::OpenAPI::toStringValue(identity_sid.value()));
    }
    
    {
        input.add_var("PhoneNumber", ::OpenAPI::toStringValue(phone_number));
    }
    if (sms_application_sid.hasValue())
    {
        input.add_var("SmsApplicationSid", ::OpenAPI::toStringValue(sms_application_sid.value()));
    }
    if (sms_fallback_method.hasValue())
    {
        input.add_var("SmsFallbackMethod", ::OpenAPI::toStringValue(sms_fallback_method.value()));
    }
    if (sms_fallback_url.hasValue())
    {
        input.add_var("SmsFallbackUrl", ::OpenAPI::toStringValue(sms_fallback_url.value()));
    }
    if (sms_method.hasValue())
    {
        input.add_var("SmsMethod", ::OpenAPI::toStringValue(sms_method.value()));
    }
    if (sms_url.hasValue())
    {
        input.add_var("SmsUrl", ::OpenAPI::toStringValue(sms_url.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (trunk_sid.hasValue())
    {
        input.add_var("TrunkSid", ::OpenAPI::toStringValue(trunk_sid.value()));
    }
    if (voice_application_sid.hasValue())
    {
        input.add_var("VoiceApplicationSid", ::OpenAPI::toStringValue(voice_application_sid.value()));
    }
    if (voice_caller_id_lookup.hasValue())
    {
        input.add_var("VoiceCallerIdLookup", ::OpenAPI::toStringValue(voice_caller_id_lookup.value()));
    }
    if (voice_fallback_method.hasValue())
    {
        input.add_var("VoiceFallbackMethod", ::OpenAPI::toStringValue(voice_fallback_method.value()));
    }
    if (voice_fallback_url.hasValue())
    {
        input.add_var("VoiceFallbackUrl", ::OpenAPI::toStringValue(voice_fallback_url.value()));
    }
    if (voice_method.hasValue())
    {
        input.add_var("VoiceMethod", ::OpenAPI::toStringValue(voice_method.value()));
    }
    if (voice_receive_mode.hasValue())
    {
        input.add_var("VoiceReceiveMode", ::OpenAPI::toStringValue(voice_receive_mode.value()));
    }
    if (voice_url.hasValue())
    {
        input.add_var("VoiceUrl", ::OpenAPI::toStringValue(voice_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401TollFreeApi::createIncomingPhoneNumberTollFreeCallback);
    connect(this, &OAIApi20100401TollFreeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401TollFreeApi::createIncomingPhoneNumberTollFreeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_incoming_phone_number_incoming_phone_number_toll_free output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createIncomingPhoneNumberTollFreeSignal(output);
        Q_EMIT createIncomingPhoneNumberTollFreeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createIncomingPhoneNumberTollFreeSignalE(output, error_type, error_str);
        Q_EMIT createIncomingPhoneNumberTollFreeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createIncomingPhoneNumberTollFreeSignalError(output, error_type, error_str);
        Q_EMIT createIncomingPhoneNumberTollFreeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401TollFreeApi::listAvailablePhoneNumberTollFree(const QString &account_sid, const QString &country_code, const ::OpenAPI::OptionalParam<qint32> &area_code, const ::OpenAPI::OptionalParam<QString> &contains, const ::OpenAPI::OptionalParam<bool> &sms_enabled, const ::OpenAPI::OptionalParam<bool> &mms_enabled, const ::OpenAPI::OptionalParam<bool> &voice_enabled, const ::OpenAPI::OptionalParam<bool> &exclude_all_address_required, const ::OpenAPI::OptionalParam<bool> &exclude_local_address_required, const ::OpenAPI::OptionalParam<bool> &exclude_foreign_address_required, const ::OpenAPI::OptionalParam<bool> &beta, const ::OpenAPI::OptionalParam<QString> &near_number, const ::OpenAPI::OptionalParam<QString> &near_lat_long, const ::OpenAPI::OptionalParam<qint32> &distance, const ::OpenAPI::OptionalParam<QString> &in_postal_code, const ::OpenAPI::OptionalParam<QString> &in_region, const ::OpenAPI::OptionalParam<QString> &in_rate_center, const ::OpenAPI::OptionalParam<QString> &in_lata, const ::OpenAPI::OptionalParam<QString> &in_locality, const ::OpenAPI::OptionalParam<bool> &fax_enabled, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listAvailablePhoneNumberTollFree"][_serverIndices.value("listAvailablePhoneNumberTollFree")].URL()+"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString country_codePathParam("{");
        country_codePathParam.append("CountryCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CountryCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CountryCode"+pathSuffix : pathPrefix;
        fullPath.replace(country_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(country_code)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area_code.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "AreaCode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("AreaCode")).append(querySuffix).append(QUrl::toPercentEncoding(area_code.stringValue()));
    }
    if (contains.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Contains", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Contains")).append(querySuffix).append(QUrl::toPercentEncoding(contains.stringValue()));
    }
    if (sms_enabled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "SmsEnabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("SmsEnabled")).append(querySuffix).append(QUrl::toPercentEncoding(sms_enabled.stringValue()));
    }
    if (mms_enabled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "MmsEnabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("MmsEnabled")).append(querySuffix).append(QUrl::toPercentEncoding(mms_enabled.stringValue()));
    }
    if (voice_enabled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "VoiceEnabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("VoiceEnabled")).append(querySuffix).append(QUrl::toPercentEncoding(voice_enabled.stringValue()));
    }
    if (exclude_all_address_required.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ExcludeAllAddressRequired", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ExcludeAllAddressRequired")).append(querySuffix).append(QUrl::toPercentEncoding(exclude_all_address_required.stringValue()));
    }
    if (exclude_local_address_required.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ExcludeLocalAddressRequired", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ExcludeLocalAddressRequired")).append(querySuffix).append(QUrl::toPercentEncoding(exclude_local_address_required.stringValue()));
    }
    if (exclude_foreign_address_required.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ExcludeForeignAddressRequired", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ExcludeForeignAddressRequired")).append(querySuffix).append(QUrl::toPercentEncoding(exclude_foreign_address_required.stringValue()));
    }
    if (beta.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Beta", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Beta")).append(querySuffix).append(QUrl::toPercentEncoding(beta.stringValue()));
    }
    if (near_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "NearNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("NearNumber")).append(querySuffix).append(QUrl::toPercentEncoding(near_number.stringValue()));
    }
    if (near_lat_long.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "NearLatLong", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("NearLatLong")).append(querySuffix).append(QUrl::toPercentEncoding(near_lat_long.stringValue()));
    }
    if (distance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Distance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Distance")).append(querySuffix).append(QUrl::toPercentEncoding(distance.stringValue()));
    }
    if (in_postal_code.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "InPostalCode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("InPostalCode")).append(querySuffix).append(QUrl::toPercentEncoding(in_postal_code.stringValue()));
    }
    if (in_region.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "InRegion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("InRegion")).append(querySuffix).append(QUrl::toPercentEncoding(in_region.stringValue()));
    }
    if (in_rate_center.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "InRateCenter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("InRateCenter")).append(querySuffix).append(QUrl::toPercentEncoding(in_rate_center.stringValue()));
    }
    if (in_lata.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "InLata", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("InLata")).append(querySuffix).append(QUrl::toPercentEncoding(in_lata.stringValue()));
    }
    if (in_locality.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "InLocality", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("InLocality")).append(querySuffix).append(QUrl::toPercentEncoding(in_locality.stringValue()));
    }
    if (fax_enabled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "FaxEnabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("FaxEnabled")).append(querySuffix).append(QUrl::toPercentEncoding(fax_enabled.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401TollFreeApi::listAvailablePhoneNumberTollFreeCallback);
    connect(this, &OAIApi20100401TollFreeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401TollFreeApi::listAvailablePhoneNumberTollFreeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListAvailablePhoneNumberTollFreeResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listAvailablePhoneNumberTollFreeSignal(output);
        Q_EMIT listAvailablePhoneNumberTollFreeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listAvailablePhoneNumberTollFreeSignalE(output, error_type, error_str);
        Q_EMIT listAvailablePhoneNumberTollFreeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listAvailablePhoneNumberTollFreeSignalError(output, error_type, error_str);
        Q_EMIT listAvailablePhoneNumberTollFreeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401TollFreeApi::listIncomingPhoneNumberTollFree(const QString &account_sid, const ::OpenAPI::OptionalParam<bool> &beta, const ::OpenAPI::OptionalParam<QString> &friendly_name, const ::OpenAPI::OptionalParam<QString> &phone_number, const ::OpenAPI::OptionalParam<QString> &origin, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listIncomingPhoneNumberTollFree"][_serverIndices.value("listIncomingPhoneNumberTollFree")].URL()+"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (beta.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Beta", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Beta")).append(querySuffix).append(QUrl::toPercentEncoding(beta.stringValue()));
    }
    if (friendly_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "FriendlyName", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("FriendlyName")).append(querySuffix).append(QUrl::toPercentEncoding(friendly_name.stringValue()));
    }
    if (phone_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PhoneNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PhoneNumber")).append(querySuffix).append(QUrl::toPercentEncoding(phone_number.stringValue()));
    }
    if (origin.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Origin", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Origin")).append(querySuffix).append(QUrl::toPercentEncoding(origin.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401TollFreeApi::listIncomingPhoneNumberTollFreeCallback);
    connect(this, &OAIApi20100401TollFreeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401TollFreeApi::listIncomingPhoneNumberTollFreeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListIncomingPhoneNumberTollFreeResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listIncomingPhoneNumberTollFreeSignal(output);
        Q_EMIT listIncomingPhoneNumberTollFreeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listIncomingPhoneNumberTollFreeSignalE(output, error_type, error_str);
        Q_EMIT listIncomingPhoneNumberTollFreeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listIncomingPhoneNumberTollFreeSignalError(output, error_type, error_str);
        Q_EMIT listIncomingPhoneNumberTollFreeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401TollFreeApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
