/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_conference_participant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_conference_participant::OAIApi_v2010_account_conference_participant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_conference_participant::OAIApi_v2010_account_conference_participant() {
    this->initializeModel();
}

OAIApi_v2010_account_conference_participant::~OAIApi_v2010_account_conference_participant() {}

void OAIApi_v2010_account_conference_participant::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_call_sid_isSet = false;
    m_call_sid_isValid = false;

    m_call_sid_to_coach_isSet = false;
    m_call_sid_to_coach_isValid = false;

    m_coaching_isSet = false;
    m_coaching_isValid = false;

    m_conference_sid_isSet = false;
    m_conference_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_end_conference_on_exit_isSet = false;
    m_end_conference_on_exit_isValid = false;

    m_hold_isSet = false;
    m_hold_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_start_conference_on_enter_isSet = false;
    m_start_conference_on_enter_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIApi_v2010_account_conference_participant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_conference_participant::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_call_sid_isValid = ::OpenAPI::fromJsonValue(m_call_sid, json[QString("call_sid")]);
    m_call_sid_isSet = !json[QString("call_sid")].isNull() && m_call_sid_isValid;

    m_call_sid_to_coach_isValid = ::OpenAPI::fromJsonValue(m_call_sid_to_coach, json[QString("call_sid_to_coach")]);
    m_call_sid_to_coach_isSet = !json[QString("call_sid_to_coach")].isNull() && m_call_sid_to_coach_isValid;

    m_coaching_isValid = ::OpenAPI::fromJsonValue(m_coaching, json[QString("coaching")]);
    m_coaching_isSet = !json[QString("coaching")].isNull() && m_coaching_isValid;

    m_conference_sid_isValid = ::OpenAPI::fromJsonValue(m_conference_sid, json[QString("conference_sid")]);
    m_conference_sid_isSet = !json[QString("conference_sid")].isNull() && m_conference_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_end_conference_on_exit_isValid = ::OpenAPI::fromJsonValue(m_end_conference_on_exit, json[QString("end_conference_on_exit")]);
    m_end_conference_on_exit_isSet = !json[QString("end_conference_on_exit")].isNull() && m_end_conference_on_exit_isValid;

    m_hold_isValid = ::OpenAPI::fromJsonValue(m_hold, json[QString("hold")]);
    m_hold_isSet = !json[QString("hold")].isNull() && m_hold_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_start_conference_on_enter_isValid = ::OpenAPI::fromJsonValue(m_start_conference_on_enter, json[QString("start_conference_on_enter")]);
    m_start_conference_on_enter_isSet = !json[QString("start_conference_on_enter")].isNull() && m_start_conference_on_enter_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIApi_v2010_account_conference_participant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_conference_participant::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_call_sid_isSet) {
        obj.insert(QString("call_sid"), ::OpenAPI::toJsonValue(m_call_sid));
    }
    if (m_call_sid_to_coach_isSet) {
        obj.insert(QString("call_sid_to_coach"), ::OpenAPI::toJsonValue(m_call_sid_to_coach));
    }
    if (m_coaching_isSet) {
        obj.insert(QString("coaching"), ::OpenAPI::toJsonValue(m_coaching));
    }
    if (m_conference_sid_isSet) {
        obj.insert(QString("conference_sid"), ::OpenAPI::toJsonValue(m_conference_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_end_conference_on_exit_isSet) {
        obj.insert(QString("end_conference_on_exit"), ::OpenAPI::toJsonValue(m_end_conference_on_exit));
    }
    if (m_hold_isSet) {
        obj.insert(QString("hold"), ::OpenAPI::toJsonValue(m_hold));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_start_conference_on_enter_isSet) {
        obj.insert(QString("start_conference_on_enter"), ::OpenAPI::toJsonValue(m_start_conference_on_enter));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIApi_v2010_account_conference_participant::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_conference_participant::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_conference_participant::getCallSid() const {
    return m_call_sid;
}
void OAIApi_v2010_account_conference_participant::setCallSid(const QString &call_sid) {
    m_call_sid = call_sid;
    m_call_sid_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_call_sid_Set() const{
    return m_call_sid_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_call_sid_Valid() const{
    return m_call_sid_isValid;
}

QString OAIApi_v2010_account_conference_participant::getCallSidToCoach() const {
    return m_call_sid_to_coach;
}
void OAIApi_v2010_account_conference_participant::setCallSidToCoach(const QString &call_sid_to_coach) {
    m_call_sid_to_coach = call_sid_to_coach;
    m_call_sid_to_coach_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_call_sid_to_coach_Set() const{
    return m_call_sid_to_coach_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_call_sid_to_coach_Valid() const{
    return m_call_sid_to_coach_isValid;
}

bool OAIApi_v2010_account_conference_participant::isCoaching() const {
    return m_coaching;
}
void OAIApi_v2010_account_conference_participant::setCoaching(const bool &coaching) {
    m_coaching = coaching;
    m_coaching_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_coaching_Set() const{
    return m_coaching_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_coaching_Valid() const{
    return m_coaching_isValid;
}

QString OAIApi_v2010_account_conference_participant::getConferenceSid() const {
    return m_conference_sid;
}
void OAIApi_v2010_account_conference_participant::setConferenceSid(const QString &conference_sid) {
    m_conference_sid = conference_sid;
    m_conference_sid_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_conference_sid_Set() const{
    return m_conference_sid_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_conference_sid_Valid() const{
    return m_conference_sid_isValid;
}

QString OAIApi_v2010_account_conference_participant::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_conference_participant::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_conference_participant::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_conference_participant::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIApi_v2010_account_conference_participant::isEndConferenceOnExit() const {
    return m_end_conference_on_exit;
}
void OAIApi_v2010_account_conference_participant::setEndConferenceOnExit(const bool &end_conference_on_exit) {
    m_end_conference_on_exit = end_conference_on_exit;
    m_end_conference_on_exit_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_end_conference_on_exit_Set() const{
    return m_end_conference_on_exit_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_end_conference_on_exit_Valid() const{
    return m_end_conference_on_exit_isValid;
}

bool OAIApi_v2010_account_conference_participant::isHold() const {
    return m_hold;
}
void OAIApi_v2010_account_conference_participant::setHold(const bool &hold) {
    m_hold = hold;
    m_hold_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_hold_Set() const{
    return m_hold_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_hold_Valid() const{
    return m_hold_isValid;
}

QString OAIApi_v2010_account_conference_participant::getLabel() const {
    return m_label;
}
void OAIApi_v2010_account_conference_participant::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_label_Set() const{
    return m_label_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIApi_v2010_account_conference_participant::isMuted() const {
    return m_muted;
}
void OAIApi_v2010_account_conference_participant::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_muted_Valid() const{
    return m_muted_isValid;
}

bool OAIApi_v2010_account_conference_participant::isStartConferenceOnEnter() const {
    return m_start_conference_on_enter;
}
void OAIApi_v2010_account_conference_participant::setStartConferenceOnEnter(const bool &start_conference_on_enter) {
    m_start_conference_on_enter = start_conference_on_enter;
    m_start_conference_on_enter_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_start_conference_on_enter_Set() const{
    return m_start_conference_on_enter_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_start_conference_on_enter_Valid() const{
    return m_start_conference_on_enter_isValid;
}

OAIParticipant_enum_status OAIApi_v2010_account_conference_participant::getStatus() const {
    return m_status;
}
void OAIApi_v2010_account_conference_participant::setStatus(const OAIParticipant_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApi_v2010_account_conference_participant::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_conference_participant::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_conference_participant::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_conference_participant::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIApi_v2010_account_conference_participant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_to_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coaching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_conference_on_exit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_conference_on_enter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_conference_participant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
