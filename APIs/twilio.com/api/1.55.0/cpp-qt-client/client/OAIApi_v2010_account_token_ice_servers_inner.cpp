/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_token_ice_servers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_token_ice_servers_inner::OAIApi_v2010_account_token_ice_servers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_token_ice_servers_inner::OAIApi_v2010_account_token_ice_servers_inner() {
    this->initializeModel();
}

OAIApi_v2010_account_token_ice_servers_inner::~OAIApi_v2010_account_token_ice_servers_inner() {}

void OAIApi_v2010_account_token_ice_servers_inner::initializeModel() {

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIApi_v2010_account_token_ice_servers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_token_ice_servers_inner::fromJsonObject(QJsonObject json) {

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIApi_v2010_account_token_ice_servers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_token_ice_servers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_isSet) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_urls_isSet) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIApi_v2010_account_token_ice_servers_inner::getCredential() const {
    return m_credential;
}
void OAIApi_v2010_account_token_ice_servers_inner::setCredential(const QString &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_credential_Valid() const{
    return m_credential_isValid;
}

QString OAIApi_v2010_account_token_ice_servers_inner::getUrl() const {
    return m_url;
}
void OAIApi_v2010_account_token_ice_servers_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIApi_v2010_account_token_ice_servers_inner::getUrls() const {
    return m_urls;
}
void OAIApi_v2010_account_token_ice_servers_inner::setUrls(const QString &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_urls_Valid() const{
    return m_urls_isValid;
}

QString OAIApi_v2010_account_token_ice_servers_inner::getUsername() const {
    return m_username;
}
void OAIApi_v2010_account_token_ice_servers_inner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_username_Set() const{
    return m_username_isSet;
}

bool OAIApi_v2010_account_token_ice_servers_inner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIApi_v2010_account_token_ice_servers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_token_ice_servers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
