/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_enum_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_enum_status::OAIMessage_enum_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_enum_status::OAIMessage_enum_status() {
    this->initializeModel();
}

OAIMessage_enum_status::~OAIMessage_enum_status() {}

void OAIMessage_enum_status::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMessage_enum_status::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMessage_enum_status::fromJson(QString jsonString) {
    
    if ( jsonString.compare("queued", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::QUEUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::SENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::SENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("delivered", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("undelivered", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::UNDELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("receiving", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::RECEIVING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("received", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::RECEIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("scheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("read", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::READ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("partially_delivered", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::PARTIALLY_DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessage_enum_status::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMessage_enum_status::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMessage_enum_status::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMessage_enum_status::QUEUED:
            val = "queued";
            break;
        case eOAIMessage_enum_status::SENDING:
            val = "sending";
            break;
        case eOAIMessage_enum_status::SENT:
            val = "sent";
            break;
        case eOAIMessage_enum_status::FAILED:
            val = "failed";
            break;
        case eOAIMessage_enum_status::DELIVERED:
            val = "delivered";
            break;
        case eOAIMessage_enum_status::UNDELIVERED:
            val = "undelivered";
            break;
        case eOAIMessage_enum_status::RECEIVING:
            val = "receiving";
            break;
        case eOAIMessage_enum_status::RECEIVED:
            val = "received";
            break;
        case eOAIMessage_enum_status::ACCEPTED:
            val = "accepted";
            break;
        case eOAIMessage_enum_status::SCHEDULED:
            val = "scheduled";
            break;
        case eOAIMessage_enum_status::READ:
            val = "read";
            break;
        case eOAIMessage_enum_status::PARTIALLY_DELIVERED:
            val = "partially_delivered";
            break;
        case eOAIMessage_enum_status::CANCELED:
            val = "canceled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMessage_enum_status::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMessage_enum_status::eOAIMessage_enum_status OAIMessage_enum_status::getValue() const {
    return m_value;
}

void OAIMessage_enum_status::setValue(const OAIMessage_enum_status::eOAIMessage_enum_status& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMessage_enum_status::isSet() const {
    
    return m_value_isSet;
}

bool OAIMessage_enum_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
