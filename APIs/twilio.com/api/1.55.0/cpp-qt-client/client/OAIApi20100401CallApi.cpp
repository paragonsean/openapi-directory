/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi20100401CallApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIApi20100401CallApi::OAIApi20100401CallApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIApi20100401CallApi::~OAIApi20100401CallApi() {
}

void OAIApi20100401CallApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createCall", serverConf);
    _serverIndices.insert("createCall", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteCall", serverConf);
    _serverIndices.insert("deleteCall", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchCall", serverConf);
    _serverIndices.insert("fetchCall", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listCall", serverConf);
    _serverIndices.insert("listCall", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateCall", serverConf);
    _serverIndices.insert("updateCall", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIApi20100401CallApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIApi20100401CallApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIApi20100401CallApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIApi20100401CallApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIApi20100401CallApi::setUsername(const QString &username) {
    _username = username;
}

void OAIApi20100401CallApi::setPassword(const QString &password) {
    _password = password;
}


void OAIApi20100401CallApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIApi20100401CallApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIApi20100401CallApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIApi20100401CallApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401CallApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401CallApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIApi20100401CallApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIApi20100401CallApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIApi20100401CallApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIApi20100401CallApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIApi20100401CallApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIApi20100401CallApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIApi20100401CallApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIApi20100401CallApi::createCall(const QString &account_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QString> &application_sid, const ::OpenAPI::OptionalParam<QString> &async_amd, const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback, const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback_method, const ::OpenAPI::OptionalParam<QString> &byoc, const ::OpenAPI::OptionalParam<QString> &call_reason, const ::OpenAPI::OptionalParam<QString> &call_token, const ::OpenAPI::OptionalParam<QString> &caller_id, const ::OpenAPI::OptionalParam<QString> &fallback_method, const ::OpenAPI::OptionalParam<QString> &fallback_url, const ::OpenAPI::OptionalParam<QString> &machine_detection, const ::OpenAPI::OptionalParam<qint32> &machine_detection_silence_timeout, const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_end_threshold, const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_threshold, const ::OpenAPI::OptionalParam<qint32> &machine_detection_timeout, const ::OpenAPI::OptionalParam<QString> &method, const ::OpenAPI::OptionalParam<bool> &record, const ::OpenAPI::OptionalParam<QString> &recording_channels, const ::OpenAPI::OptionalParam<QString> &recording_status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &recording_status_callback_event, const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method, const ::OpenAPI::OptionalParam<QString> &recording_track, const ::OpenAPI::OptionalParam<QString> &send_digits, const ::OpenAPI::OptionalParam<QString> &sip_auth_password, const ::OpenAPI::OptionalParam<QString> &sip_auth_username, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &status_callback_event, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<qint32> &time_limit, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &trim, const ::OpenAPI::OptionalParam<QString> &twiml, const ::OpenAPI::OptionalParam<QString> &url) {
    QString fullPath = QString(_serverConfigs["createCall"][_serverIndices.value("createCall")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (application_sid.hasValue())
    {
        input.add_var("ApplicationSid", ::OpenAPI::toStringValue(application_sid.value()));
    }
    if (async_amd.hasValue())
    {
        input.add_var("AsyncAmd", ::OpenAPI::toStringValue(async_amd.value()));
    }
    if (async_amd_status_callback.hasValue())
    {
        input.add_var("AsyncAmdStatusCallback", ::OpenAPI::toStringValue(async_amd_status_callback.value()));
    }
    if (async_amd_status_callback_method.hasValue())
    {
        input.add_var("AsyncAmdStatusCallbackMethod", ::OpenAPI::toStringValue(async_amd_status_callback_method.value()));
    }
    if (byoc.hasValue())
    {
        input.add_var("Byoc", ::OpenAPI::toStringValue(byoc.value()));
    }
    if (call_reason.hasValue())
    {
        input.add_var("CallReason", ::OpenAPI::toStringValue(call_reason.value()));
    }
    if (call_token.hasValue())
    {
        input.add_var("CallToken", ::OpenAPI::toStringValue(call_token.value()));
    }
    if (caller_id.hasValue())
    {
        input.add_var("CallerId", ::OpenAPI::toStringValue(caller_id.value()));
    }
    if (fallback_method.hasValue())
    {
        input.add_var("FallbackMethod", ::OpenAPI::toStringValue(fallback_method.value()));
    }
    if (fallback_url.hasValue())
    {
        input.add_var("FallbackUrl", ::OpenAPI::toStringValue(fallback_url.value()));
    }
    
    {
        input.add_var("From", ::OpenAPI::toStringValue(from));
    }
    if (machine_detection.hasValue())
    {
        input.add_var("MachineDetection", ::OpenAPI::toStringValue(machine_detection.value()));
    }
    if (machine_detection_silence_timeout.hasValue())
    {
        input.add_var("MachineDetectionSilenceTimeout", ::OpenAPI::toStringValue(machine_detection_silence_timeout.value()));
    }
    if (machine_detection_speech_end_threshold.hasValue())
    {
        input.add_var("MachineDetectionSpeechEndThreshold", ::OpenAPI::toStringValue(machine_detection_speech_end_threshold.value()));
    }
    if (machine_detection_speech_threshold.hasValue())
    {
        input.add_var("MachineDetectionSpeechThreshold", ::OpenAPI::toStringValue(machine_detection_speech_threshold.value()));
    }
    if (machine_detection_timeout.hasValue())
    {
        input.add_var("MachineDetectionTimeout", ::OpenAPI::toStringValue(machine_detection_timeout.value()));
    }
    if (method.hasValue())
    {
        input.add_var("Method", ::OpenAPI::toStringValue(method.value()));
    }
    if (record.hasValue())
    {
        input.add_var("Record", ::OpenAPI::toStringValue(record.value()));
    }
    if (recording_channels.hasValue())
    {
        input.add_var("RecordingChannels", ::OpenAPI::toStringValue(recording_channels.value()));
    }
    if (recording_status_callback.hasValue())
    {
        input.add_var("RecordingStatusCallback", ::OpenAPI::toStringValue(recording_status_callback.value()));
    }
    if (recording_status_callback_event.hasValue())
    {
        input.add_var("RecordingStatusCallbackEvent", ::OpenAPI::toStringValue(recording_status_callback_event.value()));
    }
    if (recording_status_callback_method.hasValue())
    {
        input.add_var("RecordingStatusCallbackMethod", ::OpenAPI::toStringValue(recording_status_callback_method.value()));
    }
    if (recording_track.hasValue())
    {
        input.add_var("RecordingTrack", ::OpenAPI::toStringValue(recording_track.value()));
    }
    if (send_digits.hasValue())
    {
        input.add_var("SendDigits", ::OpenAPI::toStringValue(send_digits.value()));
    }
    if (sip_auth_password.hasValue())
    {
        input.add_var("SipAuthPassword", ::OpenAPI::toStringValue(sip_auth_password.value()));
    }
    if (sip_auth_username.hasValue())
    {
        input.add_var("SipAuthUsername", ::OpenAPI::toStringValue(sip_auth_username.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_event.hasValue())
    {
        input.add_var("StatusCallbackEvent", ::OpenAPI::toStringValue(status_callback_event.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (time_limit.hasValue())
    {
        input.add_var("TimeLimit", ::OpenAPI::toStringValue(time_limit.value()));
    }
    if (timeout.hasValue())
    {
        input.add_var("Timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    
    {
        input.add_var("To", ::OpenAPI::toStringValue(to));
    }
    if (trim.hasValue())
    {
        input.add_var("Trim", ::OpenAPI::toStringValue(trim.value()));
    }
    if (twiml.hasValue())
    {
        input.add_var("Twiml", ::OpenAPI::toStringValue(twiml.value()));
    }
    if (url.hasValue())
    {
        input.add_var("Url", ::OpenAPI::toStringValue(url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401CallApi::createCallCallback);
    connect(this, &OAIApi20100401CallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401CallApi::createCallCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createCallSignal(output);
        Q_EMIT createCallSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createCallSignalE(output, error_type, error_str);
        Q_EMIT createCallSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createCallSignalError(output, error_type, error_str);
        Q_EMIT createCallSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401CallApi::deleteCall(const QString &account_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["deleteCall"][_serverIndices.value("deleteCall")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401CallApi::deleteCallCallback);
    connect(this, &OAIApi20100401CallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401CallApi::deleteCallCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteCallSignal();
        Q_EMIT deleteCallSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteCallSignalE(error_type, error_str);
        Q_EMIT deleteCallSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteCallSignalError(error_type, error_str);
        Q_EMIT deleteCallSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401CallApi::fetchCall(const QString &account_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchCall"][_serverIndices.value("fetchCall")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401CallApi::fetchCallCallback);
    connect(this, &OAIApi20100401CallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401CallApi::fetchCallCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchCallSignal(output);
        Q_EMIT fetchCallSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchCallSignalE(output, error_type, error_str);
        Q_EMIT fetchCallSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchCallSignalError(output, error_type, error_str);
        Q_EMIT fetchCallSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401CallApi::listCall(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &to, const ::OpenAPI::OptionalParam<QString> &from, const ::OpenAPI::OptionalParam<QString> &parent_call_sid, const ::OpenAPI::OptionalParam<OAICall_enum_status> &status, const ::OpenAPI::OptionalParam<QDateTime> &start_time, const ::OpenAPI::OptionalParam<QDateTime> &start_time2, const ::OpenAPI::OptionalParam<QDateTime> &start_time3, const ::OpenAPI::OptionalParam<QDateTime> &end_time, const ::OpenAPI::OptionalParam<QDateTime> &end_time2, const ::OpenAPI::OptionalParam<QDateTime> &end_time3, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listCall"][_serverIndices.value("listCall")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "To", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("To")).append(querySuffix).append(QUrl::toPercentEncoding(to.stringValue()));
    }
    if (from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "From", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("From")).append(querySuffix).append(QUrl::toPercentEncoding(from.stringValue()));
    }
    if (parent_call_sid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ParentCallSid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ParentCallSid")).append(querySuffix).append(QUrl::toPercentEncoding(parent_call_sid.stringValue()));
    }
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Status")).append(querySuffix).append(QUrl::toPercentEncoding(status.stringValue()));
    }
    if (start_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "StartTime", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("StartTime")).append(querySuffix).append(QUrl::toPercentEncoding(start_time.stringValue()));
    }
    if (start_time2.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "StartTime&lt;", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("StartTime&lt;")).append(querySuffix).append(QUrl::toPercentEncoding(start_time2.stringValue()));
    }
    if (start_time3.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "StartTime&gt;", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("StartTime&gt;")).append(querySuffix).append(QUrl::toPercentEncoding(start_time3.stringValue()));
    }
    if (end_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "EndTime", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("EndTime")).append(querySuffix).append(QUrl::toPercentEncoding(end_time.stringValue()));
    }
    if (end_time2.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "EndTime&lt;", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("EndTime&lt;")).append(querySuffix).append(QUrl::toPercentEncoding(end_time2.stringValue()));
    }
    if (end_time3.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "EndTime&gt;", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("EndTime&gt;")).append(querySuffix).append(QUrl::toPercentEncoding(end_time3.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401CallApi::listCallCallback);
    connect(this, &OAIApi20100401CallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401CallApi::listCallCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListCallResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listCallSignal(output);
        Q_EMIT listCallSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listCallSignalE(output, error_type, error_str);
        Q_EMIT listCallSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listCallSignalError(output, error_type, error_str);
        Q_EMIT listCallSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401CallApi::updateCall(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &fallback_method, const ::OpenAPI::OptionalParam<QString> &fallback_url, const ::OpenAPI::OptionalParam<QString> &method, const ::OpenAPI::OptionalParam<OAICall_enum_update_status> &status, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<qint32> &time_limit, const ::OpenAPI::OptionalParam<QString> &twiml, const ::OpenAPI::OptionalParam<QString> &url) {
    QString fullPath = QString(_serverConfigs["updateCall"][_serverIndices.value("updateCall")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (fallback_method.hasValue())
    {
        input.add_var("FallbackMethod", ::OpenAPI::toStringValue(fallback_method.value()));
    }
    if (fallback_url.hasValue())
    {
        input.add_var("FallbackUrl", ::OpenAPI::toStringValue(fallback_url.value()));
    }
    if (method.hasValue())
    {
        input.add_var("Method", ::OpenAPI::toStringValue(method.value()));
    }
    if (status.hasValue())
    {
        input.add_var("Status", ::OpenAPI::toStringValue(status.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (time_limit.hasValue())
    {
        input.add_var("TimeLimit", ::OpenAPI::toStringValue(time_limit.value()));
    }
    if (twiml.hasValue())
    {
        input.add_var("Twiml", ::OpenAPI::toStringValue(twiml.value()));
    }
    if (url.hasValue())
    {
        input.add_var("Url", ::OpenAPI::toStringValue(url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401CallApi::updateCallCallback);
    connect(this, &OAIApi20100401CallApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401CallApi::updateCallCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCallSignal(output);
        Q_EMIT updateCallSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCallSignalE(output, error_type, error_str);
        Q_EMIT updateCallSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCallSignalError(output, error_type, error_str);
        Q_EMIT updateCallSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401CallApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
