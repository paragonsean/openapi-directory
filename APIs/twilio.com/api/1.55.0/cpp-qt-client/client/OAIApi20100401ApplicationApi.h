/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401ApplicationApi_H
#define OAI_OAIApi20100401ApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_application.h"
#include "OAIListApplicationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401ApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401ApplicationApi(const int timeOut = 0);
    ~OAIApi20100401ApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  api_version QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  message_status_callback QString [optional]
    * @param[in]  public_application_connect_enabled bool [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_status_callback QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  voice_caller_id_lookup bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void createApplication(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &public_application_connect_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &voice_caller_id_lookup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteApplication(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchApplication(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listApplication(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  api_version QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  message_status_callback QString [optional]
    * @param[in]  public_application_connect_enabled bool [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_status_callback QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  voice_caller_id_lookup bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void updateApplication(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &public_application_connect_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &voice_caller_id_lookup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createApplicationCallback(OAIHttpRequestWorker *worker);
    void deleteApplicationCallback(OAIHttpRequestWorker *worker);
    void fetchApplicationCallback(OAIHttpRequestWorker *worker);
    void listApplicationCallback(OAIHttpRequestWorker *worker);
    void updateApplicationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createApplicationSignal(OAIApi_v2010_account_application summary);
    void deleteApplicationSignal();
    void fetchApplicationSignal(OAIApi_v2010_account_application summary);
    void listApplicationSignal(OAIListApplicationResponse summary);
    void updateApplicationSignal(OAIApi_v2010_account_application summary);


    void createApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_application summary);
    void deleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void fetchApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_application summary);
    void listApplicationSignalFull(OAIHttpRequestWorker *worker, OAIListApplicationResponse summary);
    void updateApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_application summary);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalError() instead")
    void createApplicationSignalE(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalError(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalError() instead")
    void deleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchApplicationSignalError() instead")
    void fetchApplicationSignalE(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchApplicationSignalError(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationSignalError() instead")
    void listApplicationSignalE(OAIListApplicationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationSignalError(OAIListApplicationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSignalError() instead")
    void updateApplicationSignalE(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSignalError(OAIApi_v2010_account_application summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalErrorFull() instead")
    void createApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalErrorFull() instead")
    void deleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchApplicationSignalErrorFull() instead")
    void fetchApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationSignalErrorFull() instead")
    void listApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSignalErrorFull() instead")
    void updateApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
