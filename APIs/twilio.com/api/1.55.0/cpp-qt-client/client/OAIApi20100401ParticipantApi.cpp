/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi20100401ParticipantApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIApi20100401ParticipantApi::OAIApi20100401ParticipantApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIApi20100401ParticipantApi::~OAIApi20100401ParticipantApi() {
}

void OAIApi20100401ParticipantApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createParticipant", serverConf);
    _serverIndices.insert("createParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteParticipant", serverConf);
    _serverIndices.insert("deleteParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchParticipant", serverConf);
    _serverIndices.insert("fetchParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listParticipant", serverConf);
    _serverIndices.insert("listParticipant", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateParticipant", serverConf);
    _serverIndices.insert("updateParticipant", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIApi20100401ParticipantApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIApi20100401ParticipantApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIApi20100401ParticipantApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIApi20100401ParticipantApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIApi20100401ParticipantApi::setUsername(const QString &username) {
    _username = username;
}

void OAIApi20100401ParticipantApi::setPassword(const QString &password) {
    _password = password;
}


void OAIApi20100401ParticipantApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIApi20100401ParticipantApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIApi20100401ParticipantApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIApi20100401ParticipantApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401ParticipantApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401ParticipantApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIApi20100401ParticipantApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIApi20100401ParticipantApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIApi20100401ParticipantApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIApi20100401ParticipantApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIApi20100401ParticipantApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIApi20100401ParticipantApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIApi20100401ParticipantApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIApi20100401ParticipantApi::createParticipant(const QString &account_sid, const QString &conference_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QString> &amd_status_callback, const ::OpenAPI::OptionalParam<QString> &amd_status_callback_method, const ::OpenAPI::OptionalParam<QString> &beep, const ::OpenAPI::OptionalParam<QString> &byoc, const ::OpenAPI::OptionalParam<QString> &call_reason, const ::OpenAPI::OptionalParam<QString> &call_sid_to_coach, const ::OpenAPI::OptionalParam<QString> &call_token, const ::OpenAPI::OptionalParam<QString> &caller_id, const ::OpenAPI::OptionalParam<bool> &coaching, const ::OpenAPI::OptionalParam<QString> &conference_record, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &conference_recording_status_callback_event, const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &conference_status_callback_event, const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method, const ::OpenAPI::OptionalParam<QString> &conference_trim, const ::OpenAPI::OptionalParam<bool> &early_media, const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit, const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size, const ::OpenAPI::OptionalParam<QString> &label, const ::OpenAPI::OptionalParam<QString> &machine_detection, const ::OpenAPI::OptionalParam<qint32> &machine_detection_silence_timeout, const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_end_threshold, const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_threshold, const ::OpenAPI::OptionalParam<qint32> &machine_detection_timeout, const ::OpenAPI::OptionalParam<qint32> &max_participants, const ::OpenAPI::OptionalParam<bool> &muted, const ::OpenAPI::OptionalParam<bool> &record, const ::OpenAPI::OptionalParam<QString> &recording_channels, const ::OpenAPI::OptionalParam<QString> &recording_status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &recording_status_callback_event, const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method, const ::OpenAPI::OptionalParam<QString> &recording_track, const ::OpenAPI::OptionalParam<QString> &region, const ::OpenAPI::OptionalParam<QString> &sip_auth_password, const ::OpenAPI::OptionalParam<QString> &sip_auth_username, const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QList<QString>> &status_callback_event, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<qint32> &time_limit, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &trim, const ::OpenAPI::OptionalParam<QString> &wait_method, const ::OpenAPI::OptionalParam<QString> &wait_url) {
    QString fullPath = QString(_serverConfigs["createParticipant"][_serverIndices.value("createParticipant")].URL()+"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString conference_sidPathParam("{");
        conference_sidPathParam.append("ConferenceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConferenceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConferenceSid"+pathSuffix : pathPrefix;
        fullPath.replace(conference_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conference_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (amd_status_callback.hasValue())
    {
        input.add_var("AmdStatusCallback", ::OpenAPI::toStringValue(amd_status_callback.value()));
    }
    if (amd_status_callback_method.hasValue())
    {
        input.add_var("AmdStatusCallbackMethod", ::OpenAPI::toStringValue(amd_status_callback_method.value()));
    }
    if (beep.hasValue())
    {
        input.add_var("Beep", ::OpenAPI::toStringValue(beep.value()));
    }
    if (byoc.hasValue())
    {
        input.add_var("Byoc", ::OpenAPI::toStringValue(byoc.value()));
    }
    if (call_reason.hasValue())
    {
        input.add_var("CallReason", ::OpenAPI::toStringValue(call_reason.value()));
    }
    if (call_sid_to_coach.hasValue())
    {
        input.add_var("CallSidToCoach", ::OpenAPI::toStringValue(call_sid_to_coach.value()));
    }
    if (call_token.hasValue())
    {
        input.add_var("CallToken", ::OpenAPI::toStringValue(call_token.value()));
    }
    if (caller_id.hasValue())
    {
        input.add_var("CallerId", ::OpenAPI::toStringValue(caller_id.value()));
    }
    if (coaching.hasValue())
    {
        input.add_var("Coaching", ::OpenAPI::toStringValue(coaching.value()));
    }
    if (conference_record.hasValue())
    {
        input.add_var("ConferenceRecord", ::OpenAPI::toStringValue(conference_record.value()));
    }
    if (conference_recording_status_callback.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallback", ::OpenAPI::toStringValue(conference_recording_status_callback.value()));
    }
    if (conference_recording_status_callback_event.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallbackEvent", ::OpenAPI::toStringValue(conference_recording_status_callback_event.value()));
    }
    if (conference_recording_status_callback_method.hasValue())
    {
        input.add_var("ConferenceRecordingStatusCallbackMethod", ::OpenAPI::toStringValue(conference_recording_status_callback_method.value()));
    }
    if (conference_status_callback.hasValue())
    {
        input.add_var("ConferenceStatusCallback", ::OpenAPI::toStringValue(conference_status_callback.value()));
    }
    if (conference_status_callback_event.hasValue())
    {
        input.add_var("ConferenceStatusCallbackEvent", ::OpenAPI::toStringValue(conference_status_callback_event.value()));
    }
    if (conference_status_callback_method.hasValue())
    {
        input.add_var("ConferenceStatusCallbackMethod", ::OpenAPI::toStringValue(conference_status_callback_method.value()));
    }
    if (conference_trim.hasValue())
    {
        input.add_var("ConferenceTrim", ::OpenAPI::toStringValue(conference_trim.value()));
    }
    if (early_media.hasValue())
    {
        input.add_var("EarlyMedia", ::OpenAPI::toStringValue(early_media.value()));
    }
    if (end_conference_on_exit.hasValue())
    {
        input.add_var("EndConferenceOnExit", ::OpenAPI::toStringValue(end_conference_on_exit.value()));
    }
    
    {
        input.add_var("From", ::OpenAPI::toStringValue(from));
    }
    if (jitter_buffer_size.hasValue())
    {
        input.add_var("JitterBufferSize", ::OpenAPI::toStringValue(jitter_buffer_size.value()));
    }
    if (label.hasValue())
    {
        input.add_var("Label", ::OpenAPI::toStringValue(label.value()));
    }
    if (machine_detection.hasValue())
    {
        input.add_var("MachineDetection", ::OpenAPI::toStringValue(machine_detection.value()));
    }
    if (machine_detection_silence_timeout.hasValue())
    {
        input.add_var("MachineDetectionSilenceTimeout", ::OpenAPI::toStringValue(machine_detection_silence_timeout.value()));
    }
    if (machine_detection_speech_end_threshold.hasValue())
    {
        input.add_var("MachineDetectionSpeechEndThreshold", ::OpenAPI::toStringValue(machine_detection_speech_end_threshold.value()));
    }
    if (machine_detection_speech_threshold.hasValue())
    {
        input.add_var("MachineDetectionSpeechThreshold", ::OpenAPI::toStringValue(machine_detection_speech_threshold.value()));
    }
    if (machine_detection_timeout.hasValue())
    {
        input.add_var("MachineDetectionTimeout", ::OpenAPI::toStringValue(machine_detection_timeout.value()));
    }
    if (max_participants.hasValue())
    {
        input.add_var("MaxParticipants", ::OpenAPI::toStringValue(max_participants.value()));
    }
    if (muted.hasValue())
    {
        input.add_var("Muted", ::OpenAPI::toStringValue(muted.value()));
    }
    if (record.hasValue())
    {
        input.add_var("Record", ::OpenAPI::toStringValue(record.value()));
    }
    if (recording_channels.hasValue())
    {
        input.add_var("RecordingChannels", ::OpenAPI::toStringValue(recording_channels.value()));
    }
    if (recording_status_callback.hasValue())
    {
        input.add_var("RecordingStatusCallback", ::OpenAPI::toStringValue(recording_status_callback.value()));
    }
    if (recording_status_callback_event.hasValue())
    {
        input.add_var("RecordingStatusCallbackEvent", ::OpenAPI::toStringValue(recording_status_callback_event.value()));
    }
    if (recording_status_callback_method.hasValue())
    {
        input.add_var("RecordingStatusCallbackMethod", ::OpenAPI::toStringValue(recording_status_callback_method.value()));
    }
    if (recording_track.hasValue())
    {
        input.add_var("RecordingTrack", ::OpenAPI::toStringValue(recording_track.value()));
    }
    if (region.hasValue())
    {
        input.add_var("Region", ::OpenAPI::toStringValue(region.value()));
    }
    if (sip_auth_password.hasValue())
    {
        input.add_var("SipAuthPassword", ::OpenAPI::toStringValue(sip_auth_password.value()));
    }
    if (sip_auth_username.hasValue())
    {
        input.add_var("SipAuthUsername", ::OpenAPI::toStringValue(sip_auth_username.value()));
    }
    if (start_conference_on_enter.hasValue())
    {
        input.add_var("StartConferenceOnEnter", ::OpenAPI::toStringValue(start_conference_on_enter.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_event.hasValue())
    {
        input.add_var("StatusCallbackEvent", ::OpenAPI::toStringValue(status_callback_event.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (time_limit.hasValue())
    {
        input.add_var("TimeLimit", ::OpenAPI::toStringValue(time_limit.value()));
    }
    if (timeout.hasValue())
    {
        input.add_var("Timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    
    {
        input.add_var("To", ::OpenAPI::toStringValue(to));
    }
    if (trim.hasValue())
    {
        input.add_var("Trim", ::OpenAPI::toStringValue(trim.value()));
    }
    if (wait_method.hasValue())
    {
        input.add_var("WaitMethod", ::OpenAPI::toStringValue(wait_method.value()));
    }
    if (wait_url.hasValue())
    {
        input.add_var("WaitUrl", ::OpenAPI::toStringValue(wait_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401ParticipantApi::createParticipantCallback);
    connect(this, &OAIApi20100401ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401ParticipantApi::createParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_conference_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createParticipantSignal(output);
        Q_EMIT createParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createParticipantSignalE(output, error_type, error_str);
        Q_EMIT createParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createParticipantSignalError(output, error_type, error_str);
        Q_EMIT createParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401ParticipantApi::deleteParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid) {
    QString fullPath = QString(_serverConfigs["deleteParticipant"][_serverIndices.value("deleteParticipant")].URL()+"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString conference_sidPathParam("{");
        conference_sidPathParam.append("ConferenceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConferenceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConferenceSid"+pathSuffix : pathPrefix;
        fullPath.replace(conference_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conference_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401ParticipantApi::deleteParticipantCallback);
    connect(this, &OAIApi20100401ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401ParticipantApi::deleteParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteParticipantSignal();
        Q_EMIT deleteParticipantSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteParticipantSignalE(error_type, error_str);
        Q_EMIT deleteParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteParticipantSignalError(error_type, error_str);
        Q_EMIT deleteParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401ParticipantApi::fetchParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid) {
    QString fullPath = QString(_serverConfigs["fetchParticipant"][_serverIndices.value("fetchParticipant")].URL()+"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString conference_sidPathParam("{");
        conference_sidPathParam.append("ConferenceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConferenceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConferenceSid"+pathSuffix : pathPrefix;
        fullPath.replace(conference_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conference_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401ParticipantApi::fetchParticipantCallback);
    connect(this, &OAIApi20100401ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401ParticipantApi::fetchParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_conference_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchParticipantSignal(output);
        Q_EMIT fetchParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchParticipantSignalE(output, error_type, error_str);
        Q_EMIT fetchParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchParticipantSignalError(output, error_type, error_str);
        Q_EMIT fetchParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401ParticipantApi::listParticipant(const QString &account_sid, const QString &conference_sid, const ::OpenAPI::OptionalParam<bool> &muted, const ::OpenAPI::OptionalParam<bool> &hold, const ::OpenAPI::OptionalParam<bool> &coaching, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listParticipant"][_serverIndices.value("listParticipant")].URL()+"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString conference_sidPathParam("{");
        conference_sidPathParam.append("ConferenceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConferenceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConferenceSid"+pathSuffix : pathPrefix;
        fullPath.replace(conference_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conference_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (muted.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Muted", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Muted")).append(querySuffix).append(QUrl::toPercentEncoding(muted.stringValue()));
    }
    if (hold.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Hold", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Hold")).append(querySuffix).append(QUrl::toPercentEncoding(hold.stringValue()));
    }
    if (coaching.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Coaching", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Coaching")).append(querySuffix).append(QUrl::toPercentEncoding(coaching.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401ParticipantApi::listParticipantCallback);
    connect(this, &OAIApi20100401ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401ParticipantApi::listParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListParticipantResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listParticipantSignal(output);
        Q_EMIT listParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listParticipantSignalE(output, error_type, error_str);
        Q_EMIT listParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listParticipantSignalError(output, error_type, error_str);
        Q_EMIT listParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401ParticipantApi::updateParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid, const ::OpenAPI::OptionalParam<QString> &announce_method, const ::OpenAPI::OptionalParam<QString> &announce_url, const ::OpenAPI::OptionalParam<bool> &beep_on_exit, const ::OpenAPI::OptionalParam<QString> &call_sid_to_coach, const ::OpenAPI::OptionalParam<bool> &coaching, const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit, const ::OpenAPI::OptionalParam<bool> &hold, const ::OpenAPI::OptionalParam<QString> &hold_method, const ::OpenAPI::OptionalParam<QString> &hold_url, const ::OpenAPI::OptionalParam<bool> &muted, const ::OpenAPI::OptionalParam<QString> &wait_method, const ::OpenAPI::OptionalParam<QString> &wait_url) {
    QString fullPath = QString(_serverConfigs["updateParticipant"][_serverIndices.value("updateParticipant")].URL()+"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString conference_sidPathParam("{");
        conference_sidPathParam.append("ConferenceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ConferenceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ConferenceSid"+pathSuffix : pathPrefix;
        fullPath.replace(conference_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(conference_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (announce_method.hasValue())
    {
        input.add_var("AnnounceMethod", ::OpenAPI::toStringValue(announce_method.value()));
    }
    if (announce_url.hasValue())
    {
        input.add_var("AnnounceUrl", ::OpenAPI::toStringValue(announce_url.value()));
    }
    if (beep_on_exit.hasValue())
    {
        input.add_var("BeepOnExit", ::OpenAPI::toStringValue(beep_on_exit.value()));
    }
    if (call_sid_to_coach.hasValue())
    {
        input.add_var("CallSidToCoach", ::OpenAPI::toStringValue(call_sid_to_coach.value()));
    }
    if (coaching.hasValue())
    {
        input.add_var("Coaching", ::OpenAPI::toStringValue(coaching.value()));
    }
    if (end_conference_on_exit.hasValue())
    {
        input.add_var("EndConferenceOnExit", ::OpenAPI::toStringValue(end_conference_on_exit.value()));
    }
    if (hold.hasValue())
    {
        input.add_var("Hold", ::OpenAPI::toStringValue(hold.value()));
    }
    if (hold_method.hasValue())
    {
        input.add_var("HoldMethod", ::OpenAPI::toStringValue(hold_method.value()));
    }
    if (hold_url.hasValue())
    {
        input.add_var("HoldUrl", ::OpenAPI::toStringValue(hold_url.value()));
    }
    if (muted.hasValue())
    {
        input.add_var("Muted", ::OpenAPI::toStringValue(muted.value()));
    }
    if (wait_method.hasValue())
    {
        input.add_var("WaitMethod", ::OpenAPI::toStringValue(wait_method.value()));
    }
    if (wait_url.hasValue())
    {
        input.add_var("WaitUrl", ::OpenAPI::toStringValue(wait_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401ParticipantApi::updateParticipantCallback);
    connect(this, &OAIApi20100401ParticipantApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401ParticipantApi::updateParticipantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_conference_participant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateParticipantSignal(output);
        Q_EMIT updateParticipantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateParticipantSignalE(output, error_type, error_str);
        Q_EMIT updateParticipantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateParticipantSignalError(output, error_type, error_str);
        Q_EMIT updateParticipantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401ParticipantApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
