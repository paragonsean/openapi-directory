/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_usage_usage_record_usage_record_all_time.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_usage_usage_record_usage_record_all_time::OAIApi_v2010_account_usage_usage_record_usage_record_all_time(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_usage_usage_record_usage_record_all_time::OAIApi_v2010_account_usage_usage_record_usage_record_all_time() {
    this->initializeModel();
}

OAIApi_v2010_account_usage_usage_record_usage_record_all_time::~OAIApi_v2010_account_usage_usage_record_usage_record_all_time() {}

void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_as_of_isSet = false;
    m_as_of_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_count_unit_isSet = false;
    m_count_unit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_unit_isSet = false;
    m_price_unit_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_subresource_uris_isSet = false;
    m_subresource_uris_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_usage_unit_isSet = false;
    m_usage_unit_isValid = false;
}

void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_as_of_isValid = ::OpenAPI::fromJsonValue(m_as_of, json[QString("as_of")]);
    m_as_of_isSet = !json[QString("as_of")].isNull() && m_as_of_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_count_unit_isValid = ::OpenAPI::fromJsonValue(m_count_unit, json[QString("count_unit")]);
    m_count_unit_isSet = !json[QString("count_unit")].isNull() && m_count_unit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_unit_isValid = ::OpenAPI::fromJsonValue(m_price_unit, json[QString("price_unit")]);
    m_price_unit_isSet = !json[QString("price_unit")].isNull() && m_price_unit_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_subresource_uris_isValid = ::OpenAPI::fromJsonValue(m_subresource_uris, json[QString("subresource_uris")]);
    m_subresource_uris_isSet = !json[QString("subresource_uris")].isNull() && m_subresource_uris_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_usage_unit_isValid = ::OpenAPI::fromJsonValue(m_usage_unit, json[QString("usage_unit")]);
    m_usage_unit_isSet = !json[QString("usage_unit")].isNull() && m_usage_unit_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_usage_usage_record_usage_record_all_time::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_as_of_isSet) {
        obj.insert(QString("as_of"), ::OpenAPI::toJsonValue(m_as_of));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_count_unit_isSet) {
        obj.insert(QString("count_unit"), ::OpenAPI::toJsonValue(m_count_unit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_unit_isSet) {
        obj.insert(QString("price_unit"), ::OpenAPI::toJsonValue(m_price_unit));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_subresource_uris_isSet) {
        obj.insert(QString("subresource_uris"), ::OpenAPI::toJsonValue(m_subresource_uris));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_usage_unit_isSet) {
        obj.insert(QString("usage_unit"), ::OpenAPI::toJsonValue(m_usage_unit));
    }
    return obj;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getApiVersion() const {
    return m_api_version;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getAsOf() const {
    return m_as_of;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setAsOf(const QString &as_of) {
    m_as_of = as_of;
    m_as_of_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_as_of_Set() const{
    return m_as_of_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_as_of_Valid() const{
    return m_as_of_isValid;
}

OAIUsage_record_all_time_enum_category OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getCategory() const {
    return m_category;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setCategory(const OAIUsage_record_all_time_enum_category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_category_Set() const{
    return m_category_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getCount() const {
    return m_count;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_count_Set() const{
    return m_count_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getCountUnit() const {
    return m_count_unit;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setCountUnit(const QString &count_unit) {
    m_count_unit = count_unit;
    m_count_unit_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_count_unit_Set() const{
    return m_count_unit_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_count_unit_Valid() const{
    return m_count_unit_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getDescription() const {
    return m_description;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getEndDate() const {
    return m_end_date;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getPrice() const {
    return m_price;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_price_Set() const{
    return m_price_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getPriceUnit() const {
    return m_price_unit;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setPriceUnit(const QString &price_unit) {
    m_price_unit = price_unit;
    m_price_unit_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_price_unit_Set() const{
    return m_price_unit_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_price_unit_Valid() const{
    return m_price_unit_isValid;
}

QDate OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getStartDate() const {
    return m_start_date;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIObject OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getSubresourceUris() const {
    return m_subresource_uris;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setSubresourceUris(const OAIObject &subresource_uris) {
    m_subresource_uris = subresource_uris;
    m_subresource_uris_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_subresource_uris_Set() const{
    return m_subresource_uris_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_subresource_uris_Valid() const{
    return m_subresource_uris_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getUsage() const {
    return m_usage;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIApi_v2010_account_usage_usage_record_usage_record_all_time::getUsageUnit() const {
    return m_usage_unit;
}
void OAIApi_v2010_account_usage_usage_record_usage_record_all_time::setUsageUnit(const QString &usage_unit) {
    m_usage_unit = usage_unit;
    m_usage_unit_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_usage_unit_Set() const{
    return m_usage_unit_isSet;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::is_usage_unit_Valid() const{
    return m_usage_unit_isValid;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subresource_uris_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_usage_usage_record_usage_record_all_time::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
