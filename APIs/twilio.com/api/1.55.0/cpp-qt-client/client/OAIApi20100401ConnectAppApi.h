/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401ConnectAppApi_H
#define OAI_OAIApi20100401ConnectAppApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_connect_app.h"
#include "OAIConnect_app_enum_permission.h"
#include "OAIListConnectAppResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401ConnectAppApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401ConnectAppApi(const int timeOut = 0);
    ~OAIApi20100401ConnectAppApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteConnectApp(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConnectApp(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConnectApp(const QString &account_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  authorize_redirect_url QString [optional]
    * @param[in]  company_name QString [optional]
    * @param[in]  deauthorize_callback_method QString [optional]
    * @param[in]  deauthorize_callback_url QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  homepage_url QString [optional]
    * @param[in]  permissions QList<OAIConnect_app_enum_permission> [optional]
    */
    virtual void updateConnectApp(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &authorize_redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deauthorize_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deauthorize_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &homepage_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConnect_app_enum_permission>> &permissions = ::OpenAPI::OptionalParam<QList<OAIConnect_app_enum_permission>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteConnectAppCallback(OAIHttpRequestWorker *worker);
    void fetchConnectAppCallback(OAIHttpRequestWorker *worker);
    void listConnectAppCallback(OAIHttpRequestWorker *worker);
    void updateConnectAppCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteConnectAppSignal();
    void fetchConnectAppSignal(OAIApi_v2010_account_connect_app summary);
    void listConnectAppSignal(OAIListConnectAppResponse summary);
    void updateConnectAppSignal(OAIApi_v2010_account_connect_app summary);


    void deleteConnectAppSignalFull(OAIHttpRequestWorker *worker);
    void fetchConnectAppSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_connect_app summary);
    void listConnectAppSignalFull(OAIHttpRequestWorker *worker, OAIListConnectAppResponse summary);
    void updateConnectAppSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_connect_app summary);

    Q_DECL_DEPRECATED_X("Use deleteConnectAppSignalError() instead")
    void deleteConnectAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectAppSignalError() instead")
    void fetchConnectAppSignalE(OAIApi_v2010_account_connect_app summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectAppSignalError(OAIApi_v2010_account_connect_app summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectAppSignalError() instead")
    void listConnectAppSignalE(OAIListConnectAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectAppSignalError(OAIListConnectAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectAppSignalError() instead")
    void updateConnectAppSignalE(OAIApi_v2010_account_connect_app summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectAppSignalError(OAIApi_v2010_account_connect_app summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteConnectAppSignalErrorFull() instead")
    void deleteConnectAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConnectAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConnectAppSignalErrorFull() instead")
    void fetchConnectAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConnectAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConnectAppSignalErrorFull() instead")
    void listConnectAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConnectAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConnectAppSignalErrorFull() instead")
    void updateConnectAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConnectAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
