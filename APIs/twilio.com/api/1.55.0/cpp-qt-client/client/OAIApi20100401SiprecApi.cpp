/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi20100401SiprecApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIApi20100401SiprecApi::OAIApi20100401SiprecApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIApi20100401SiprecApi::~OAIApi20100401SiprecApi() {
}

void OAIApi20100401SiprecApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createSiprec", serverConf);
    _serverIndices.insert("createSiprec", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateSiprec", serverConf);
    _serverIndices.insert("updateSiprec", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIApi20100401SiprecApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIApi20100401SiprecApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIApi20100401SiprecApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIApi20100401SiprecApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIApi20100401SiprecApi::setUsername(const QString &username) {
    _username = username;
}

void OAIApi20100401SiprecApi::setPassword(const QString &password) {
    _password = password;
}


void OAIApi20100401SiprecApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIApi20100401SiprecApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIApi20100401SiprecApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIApi20100401SiprecApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401SiprecApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401SiprecApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIApi20100401SiprecApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIApi20100401SiprecApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIApi20100401SiprecApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIApi20100401SiprecApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIApi20100401SiprecApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIApi20100401SiprecApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIApi20100401SiprecApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIApi20100401SiprecApi::createSiprec(const QString &account_sid, const QString &call_sid, const ::OpenAPI::OptionalParam<QString> &connector_name, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &parameter1_name, const ::OpenAPI::OptionalParam<QString> &parameter1_value, const ::OpenAPI::OptionalParam<QString> &parameter10_name, const ::OpenAPI::OptionalParam<QString> &parameter10_value, const ::OpenAPI::OptionalParam<QString> &parameter11_name, const ::OpenAPI::OptionalParam<QString> &parameter11_value, const ::OpenAPI::OptionalParam<QString> &parameter12_name, const ::OpenAPI::OptionalParam<QString> &parameter12_value, const ::OpenAPI::OptionalParam<QString> &parameter13_name, const ::OpenAPI::OptionalParam<QString> &parameter13_value, const ::OpenAPI::OptionalParam<QString> &parameter14_name, const ::OpenAPI::OptionalParam<QString> &parameter14_value, const ::OpenAPI::OptionalParam<QString> &parameter15_name, const ::OpenAPI::OptionalParam<QString> &parameter15_value, const ::OpenAPI::OptionalParam<QString> &parameter16_name, const ::OpenAPI::OptionalParam<QString> &parameter16_value, const ::OpenAPI::OptionalParam<QString> &parameter17_name, const ::OpenAPI::OptionalParam<QString> &parameter17_value, const ::OpenAPI::OptionalParam<QString> &parameter18_name, const ::OpenAPI::OptionalParam<QString> &parameter18_value, const ::OpenAPI::OptionalParam<QString> &parameter19_name, const ::OpenAPI::OptionalParam<QString> &parameter19_value, const ::OpenAPI::OptionalParam<QString> &parameter2_name, const ::OpenAPI::OptionalParam<QString> &parameter2_value, const ::OpenAPI::OptionalParam<QString> &parameter20_name, const ::OpenAPI::OptionalParam<QString> &parameter20_value, const ::OpenAPI::OptionalParam<QString> &parameter21_name, const ::OpenAPI::OptionalParam<QString> &parameter21_value, const ::OpenAPI::OptionalParam<QString> &parameter22_name, const ::OpenAPI::OptionalParam<QString> &parameter22_value, const ::OpenAPI::OptionalParam<QString> &parameter23_name, const ::OpenAPI::OptionalParam<QString> &parameter23_value, const ::OpenAPI::OptionalParam<QString> &parameter24_name, const ::OpenAPI::OptionalParam<QString> &parameter24_value, const ::OpenAPI::OptionalParam<QString> &parameter25_name, const ::OpenAPI::OptionalParam<QString> &parameter25_value, const ::OpenAPI::OptionalParam<QString> &parameter26_name, const ::OpenAPI::OptionalParam<QString> &parameter26_value, const ::OpenAPI::OptionalParam<QString> &parameter27_name, const ::OpenAPI::OptionalParam<QString> &parameter27_value, const ::OpenAPI::OptionalParam<QString> &parameter28_name, const ::OpenAPI::OptionalParam<QString> &parameter28_value, const ::OpenAPI::OptionalParam<QString> &parameter29_name, const ::OpenAPI::OptionalParam<QString> &parameter29_value, const ::OpenAPI::OptionalParam<QString> &parameter3_name, const ::OpenAPI::OptionalParam<QString> &parameter3_value, const ::OpenAPI::OptionalParam<QString> &parameter30_name, const ::OpenAPI::OptionalParam<QString> &parameter30_value, const ::OpenAPI::OptionalParam<QString> &parameter31_name, const ::OpenAPI::OptionalParam<QString> &parameter31_value, const ::OpenAPI::OptionalParam<QString> &parameter32_name, const ::OpenAPI::OptionalParam<QString> &parameter32_value, const ::OpenAPI::OptionalParam<QString> &parameter33_name, const ::OpenAPI::OptionalParam<QString> &parameter33_value, const ::OpenAPI::OptionalParam<QString> &parameter34_name, const ::OpenAPI::OptionalParam<QString> &parameter34_value, const ::OpenAPI::OptionalParam<QString> &parameter35_name, const ::OpenAPI::OptionalParam<QString> &parameter35_value, const ::OpenAPI::OptionalParam<QString> &parameter36_name, const ::OpenAPI::OptionalParam<QString> &parameter36_value, const ::OpenAPI::OptionalParam<QString> &parameter37_name, const ::OpenAPI::OptionalParam<QString> &parameter37_value, const ::OpenAPI::OptionalParam<QString> &parameter38_name, const ::OpenAPI::OptionalParam<QString> &parameter38_value, const ::OpenAPI::OptionalParam<QString> &parameter39_name, const ::OpenAPI::OptionalParam<QString> &parameter39_value, const ::OpenAPI::OptionalParam<QString> &parameter4_name, const ::OpenAPI::OptionalParam<QString> &parameter4_value, const ::OpenAPI::OptionalParam<QString> &parameter40_name, const ::OpenAPI::OptionalParam<QString> &parameter40_value, const ::OpenAPI::OptionalParam<QString> &parameter41_name, const ::OpenAPI::OptionalParam<QString> &parameter41_value, const ::OpenAPI::OptionalParam<QString> &parameter42_name, const ::OpenAPI::OptionalParam<QString> &parameter42_value, const ::OpenAPI::OptionalParam<QString> &parameter43_name, const ::OpenAPI::OptionalParam<QString> &parameter43_value, const ::OpenAPI::OptionalParam<QString> &parameter44_name, const ::OpenAPI::OptionalParam<QString> &parameter44_value, const ::OpenAPI::OptionalParam<QString> &parameter45_name, const ::OpenAPI::OptionalParam<QString> &parameter45_value, const ::OpenAPI::OptionalParam<QString> &parameter46_name, const ::OpenAPI::OptionalParam<QString> &parameter46_value, const ::OpenAPI::OptionalParam<QString> &parameter47_name, const ::OpenAPI::OptionalParam<QString> &parameter47_value, const ::OpenAPI::OptionalParam<QString> &parameter48_name, const ::OpenAPI::OptionalParam<QString> &parameter48_value, const ::OpenAPI::OptionalParam<QString> &parameter49_name, const ::OpenAPI::OptionalParam<QString> &parameter49_value, const ::OpenAPI::OptionalParam<QString> &parameter5_name, const ::OpenAPI::OptionalParam<QString> &parameter5_value, const ::OpenAPI::OptionalParam<QString> &parameter50_name, const ::OpenAPI::OptionalParam<QString> &parameter50_value, const ::OpenAPI::OptionalParam<QString> &parameter51_name, const ::OpenAPI::OptionalParam<QString> &parameter51_value, const ::OpenAPI::OptionalParam<QString> &parameter52_name, const ::OpenAPI::OptionalParam<QString> &parameter52_value, const ::OpenAPI::OptionalParam<QString> &parameter53_name, const ::OpenAPI::OptionalParam<QString> &parameter53_value, const ::OpenAPI::OptionalParam<QString> &parameter54_name, const ::OpenAPI::OptionalParam<QString> &parameter54_value, const ::OpenAPI::OptionalParam<QString> &parameter55_name, const ::OpenAPI::OptionalParam<QString> &parameter55_value, const ::OpenAPI::OptionalParam<QString> &parameter56_name, const ::OpenAPI::OptionalParam<QString> &parameter56_value, const ::OpenAPI::OptionalParam<QString> &parameter57_name, const ::OpenAPI::OptionalParam<QString> &parameter57_value, const ::OpenAPI::OptionalParam<QString> &parameter58_name, const ::OpenAPI::OptionalParam<QString> &parameter58_value, const ::OpenAPI::OptionalParam<QString> &parameter59_name, const ::OpenAPI::OptionalParam<QString> &parameter59_value, const ::OpenAPI::OptionalParam<QString> &parameter6_name, const ::OpenAPI::OptionalParam<QString> &parameter6_value, const ::OpenAPI::OptionalParam<QString> &parameter60_name, const ::OpenAPI::OptionalParam<QString> &parameter60_value, const ::OpenAPI::OptionalParam<QString> &parameter61_name, const ::OpenAPI::OptionalParam<QString> &parameter61_value, const ::OpenAPI::OptionalParam<QString> &parameter62_name, const ::OpenAPI::OptionalParam<QString> &parameter62_value, const ::OpenAPI::OptionalParam<QString> &parameter63_name, const ::OpenAPI::OptionalParam<QString> &parameter63_value, const ::OpenAPI::OptionalParam<QString> &parameter64_name, const ::OpenAPI::OptionalParam<QString> &parameter64_value, const ::OpenAPI::OptionalParam<QString> &parameter65_name, const ::OpenAPI::OptionalParam<QString> &parameter65_value, const ::OpenAPI::OptionalParam<QString> &parameter66_name, const ::OpenAPI::OptionalParam<QString> &parameter66_value, const ::OpenAPI::OptionalParam<QString> &parameter67_name, const ::OpenAPI::OptionalParam<QString> &parameter67_value, const ::OpenAPI::OptionalParam<QString> &parameter68_name, const ::OpenAPI::OptionalParam<QString> &parameter68_value, const ::OpenAPI::OptionalParam<QString> &parameter69_name, const ::OpenAPI::OptionalParam<QString> &parameter69_value, const ::OpenAPI::OptionalParam<QString> &parameter7_name, const ::OpenAPI::OptionalParam<QString> &parameter7_value, const ::OpenAPI::OptionalParam<QString> &parameter70_name, const ::OpenAPI::OptionalParam<QString> &parameter70_value, const ::OpenAPI::OptionalParam<QString> &parameter71_name, const ::OpenAPI::OptionalParam<QString> &parameter71_value, const ::OpenAPI::OptionalParam<QString> &parameter72_name, const ::OpenAPI::OptionalParam<QString> &parameter72_value, const ::OpenAPI::OptionalParam<QString> &parameter73_name, const ::OpenAPI::OptionalParam<QString> &parameter73_value, const ::OpenAPI::OptionalParam<QString> &parameter74_name, const ::OpenAPI::OptionalParam<QString> &parameter74_value, const ::OpenAPI::OptionalParam<QString> &parameter75_name, const ::OpenAPI::OptionalParam<QString> &parameter75_value, const ::OpenAPI::OptionalParam<QString> &parameter76_name, const ::OpenAPI::OptionalParam<QString> &parameter76_value, const ::OpenAPI::OptionalParam<QString> &parameter77_name, const ::OpenAPI::OptionalParam<QString> &parameter77_value, const ::OpenAPI::OptionalParam<QString> &parameter78_name, const ::OpenAPI::OptionalParam<QString> &parameter78_value, const ::OpenAPI::OptionalParam<QString> &parameter79_name, const ::OpenAPI::OptionalParam<QString> &parameter79_value, const ::OpenAPI::OptionalParam<QString> &parameter8_name, const ::OpenAPI::OptionalParam<QString> &parameter8_value, const ::OpenAPI::OptionalParam<QString> &parameter80_name, const ::OpenAPI::OptionalParam<QString> &parameter80_value, const ::OpenAPI::OptionalParam<QString> &parameter81_name, const ::OpenAPI::OptionalParam<QString> &parameter81_value, const ::OpenAPI::OptionalParam<QString> &parameter82_name, const ::OpenAPI::OptionalParam<QString> &parameter82_value, const ::OpenAPI::OptionalParam<QString> &parameter83_name, const ::OpenAPI::OptionalParam<QString> &parameter83_value, const ::OpenAPI::OptionalParam<QString> &parameter84_name, const ::OpenAPI::OptionalParam<QString> &parameter84_value, const ::OpenAPI::OptionalParam<QString> &parameter85_name, const ::OpenAPI::OptionalParam<QString> &parameter85_value, const ::OpenAPI::OptionalParam<QString> &parameter86_name, const ::OpenAPI::OptionalParam<QString> &parameter86_value, const ::OpenAPI::OptionalParam<QString> &parameter87_name, const ::OpenAPI::OptionalParam<QString> &parameter87_value, const ::OpenAPI::OptionalParam<QString> &parameter88_name, const ::OpenAPI::OptionalParam<QString> &parameter88_value, const ::OpenAPI::OptionalParam<QString> &parameter89_name, const ::OpenAPI::OptionalParam<QString> &parameter89_value, const ::OpenAPI::OptionalParam<QString> &parameter9_name, const ::OpenAPI::OptionalParam<QString> &parameter9_value, const ::OpenAPI::OptionalParam<QString> &parameter90_name, const ::OpenAPI::OptionalParam<QString> &parameter90_value, const ::OpenAPI::OptionalParam<QString> &parameter91_name, const ::OpenAPI::OptionalParam<QString> &parameter91_value, const ::OpenAPI::OptionalParam<QString> &parameter92_name, const ::OpenAPI::OptionalParam<QString> &parameter92_value, const ::OpenAPI::OptionalParam<QString> &parameter93_name, const ::OpenAPI::OptionalParam<QString> &parameter93_value, const ::OpenAPI::OptionalParam<QString> &parameter94_name, const ::OpenAPI::OptionalParam<QString> &parameter94_value, const ::OpenAPI::OptionalParam<QString> &parameter95_name, const ::OpenAPI::OptionalParam<QString> &parameter95_value, const ::OpenAPI::OptionalParam<QString> &parameter96_name, const ::OpenAPI::OptionalParam<QString> &parameter96_value, const ::OpenAPI::OptionalParam<QString> &parameter97_name, const ::OpenAPI::OptionalParam<QString> &parameter97_value, const ::OpenAPI::OptionalParam<QString> &parameter98_name, const ::OpenAPI::OptionalParam<QString> &parameter98_value, const ::OpenAPI::OptionalParam<QString> &parameter99_name, const ::OpenAPI::OptionalParam<QString> &parameter99_value, const ::OpenAPI::OptionalParam<QString> &status_callback, const ::OpenAPI::OptionalParam<QString> &status_callback_method, const ::OpenAPI::OptionalParam<OAISiprec_enum_track> &track) {
    QString fullPath = QString(_serverConfigs["createSiprec"][_serverIndices.value("createSiprec")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (connector_name.hasValue())
    {
        input.add_var("ConnectorName", ::OpenAPI::toStringValue(connector_name.value()));
    }
    if (name.hasValue())
    {
        input.add_var("Name", ::OpenAPI::toStringValue(name.value()));
    }
    if (parameter1_name.hasValue())
    {
        input.add_var("Parameter1.Name", ::OpenAPI::toStringValue(parameter1_name.value()));
    }
    if (parameter1_value.hasValue())
    {
        input.add_var("Parameter1.Value", ::OpenAPI::toStringValue(parameter1_value.value()));
    }
    if (parameter10_name.hasValue())
    {
        input.add_var("Parameter10.Name", ::OpenAPI::toStringValue(parameter10_name.value()));
    }
    if (parameter10_value.hasValue())
    {
        input.add_var("Parameter10.Value", ::OpenAPI::toStringValue(parameter10_value.value()));
    }
    if (parameter11_name.hasValue())
    {
        input.add_var("Parameter11.Name", ::OpenAPI::toStringValue(parameter11_name.value()));
    }
    if (parameter11_value.hasValue())
    {
        input.add_var("Parameter11.Value", ::OpenAPI::toStringValue(parameter11_value.value()));
    }
    if (parameter12_name.hasValue())
    {
        input.add_var("Parameter12.Name", ::OpenAPI::toStringValue(parameter12_name.value()));
    }
    if (parameter12_value.hasValue())
    {
        input.add_var("Parameter12.Value", ::OpenAPI::toStringValue(parameter12_value.value()));
    }
    if (parameter13_name.hasValue())
    {
        input.add_var("Parameter13.Name", ::OpenAPI::toStringValue(parameter13_name.value()));
    }
    if (parameter13_value.hasValue())
    {
        input.add_var("Parameter13.Value", ::OpenAPI::toStringValue(parameter13_value.value()));
    }
    if (parameter14_name.hasValue())
    {
        input.add_var("Parameter14.Name", ::OpenAPI::toStringValue(parameter14_name.value()));
    }
    if (parameter14_value.hasValue())
    {
        input.add_var("Parameter14.Value", ::OpenAPI::toStringValue(parameter14_value.value()));
    }
    if (parameter15_name.hasValue())
    {
        input.add_var("Parameter15.Name", ::OpenAPI::toStringValue(parameter15_name.value()));
    }
    if (parameter15_value.hasValue())
    {
        input.add_var("Parameter15.Value", ::OpenAPI::toStringValue(parameter15_value.value()));
    }
    if (parameter16_name.hasValue())
    {
        input.add_var("Parameter16.Name", ::OpenAPI::toStringValue(parameter16_name.value()));
    }
    if (parameter16_value.hasValue())
    {
        input.add_var("Parameter16.Value", ::OpenAPI::toStringValue(parameter16_value.value()));
    }
    if (parameter17_name.hasValue())
    {
        input.add_var("Parameter17.Name", ::OpenAPI::toStringValue(parameter17_name.value()));
    }
    if (parameter17_value.hasValue())
    {
        input.add_var("Parameter17.Value", ::OpenAPI::toStringValue(parameter17_value.value()));
    }
    if (parameter18_name.hasValue())
    {
        input.add_var("Parameter18.Name", ::OpenAPI::toStringValue(parameter18_name.value()));
    }
    if (parameter18_value.hasValue())
    {
        input.add_var("Parameter18.Value", ::OpenAPI::toStringValue(parameter18_value.value()));
    }
    if (parameter19_name.hasValue())
    {
        input.add_var("Parameter19.Name", ::OpenAPI::toStringValue(parameter19_name.value()));
    }
    if (parameter19_value.hasValue())
    {
        input.add_var("Parameter19.Value", ::OpenAPI::toStringValue(parameter19_value.value()));
    }
    if (parameter2_name.hasValue())
    {
        input.add_var("Parameter2.Name", ::OpenAPI::toStringValue(parameter2_name.value()));
    }
    if (parameter2_value.hasValue())
    {
        input.add_var("Parameter2.Value", ::OpenAPI::toStringValue(parameter2_value.value()));
    }
    if (parameter20_name.hasValue())
    {
        input.add_var("Parameter20.Name", ::OpenAPI::toStringValue(parameter20_name.value()));
    }
    if (parameter20_value.hasValue())
    {
        input.add_var("Parameter20.Value", ::OpenAPI::toStringValue(parameter20_value.value()));
    }
    if (parameter21_name.hasValue())
    {
        input.add_var("Parameter21.Name", ::OpenAPI::toStringValue(parameter21_name.value()));
    }
    if (parameter21_value.hasValue())
    {
        input.add_var("Parameter21.Value", ::OpenAPI::toStringValue(parameter21_value.value()));
    }
    if (parameter22_name.hasValue())
    {
        input.add_var("Parameter22.Name", ::OpenAPI::toStringValue(parameter22_name.value()));
    }
    if (parameter22_value.hasValue())
    {
        input.add_var("Parameter22.Value", ::OpenAPI::toStringValue(parameter22_value.value()));
    }
    if (parameter23_name.hasValue())
    {
        input.add_var("Parameter23.Name", ::OpenAPI::toStringValue(parameter23_name.value()));
    }
    if (parameter23_value.hasValue())
    {
        input.add_var("Parameter23.Value", ::OpenAPI::toStringValue(parameter23_value.value()));
    }
    if (parameter24_name.hasValue())
    {
        input.add_var("Parameter24.Name", ::OpenAPI::toStringValue(parameter24_name.value()));
    }
    if (parameter24_value.hasValue())
    {
        input.add_var("Parameter24.Value", ::OpenAPI::toStringValue(parameter24_value.value()));
    }
    if (parameter25_name.hasValue())
    {
        input.add_var("Parameter25.Name", ::OpenAPI::toStringValue(parameter25_name.value()));
    }
    if (parameter25_value.hasValue())
    {
        input.add_var("Parameter25.Value", ::OpenAPI::toStringValue(parameter25_value.value()));
    }
    if (parameter26_name.hasValue())
    {
        input.add_var("Parameter26.Name", ::OpenAPI::toStringValue(parameter26_name.value()));
    }
    if (parameter26_value.hasValue())
    {
        input.add_var("Parameter26.Value", ::OpenAPI::toStringValue(parameter26_value.value()));
    }
    if (parameter27_name.hasValue())
    {
        input.add_var("Parameter27.Name", ::OpenAPI::toStringValue(parameter27_name.value()));
    }
    if (parameter27_value.hasValue())
    {
        input.add_var("Parameter27.Value", ::OpenAPI::toStringValue(parameter27_value.value()));
    }
    if (parameter28_name.hasValue())
    {
        input.add_var("Parameter28.Name", ::OpenAPI::toStringValue(parameter28_name.value()));
    }
    if (parameter28_value.hasValue())
    {
        input.add_var("Parameter28.Value", ::OpenAPI::toStringValue(parameter28_value.value()));
    }
    if (parameter29_name.hasValue())
    {
        input.add_var("Parameter29.Name", ::OpenAPI::toStringValue(parameter29_name.value()));
    }
    if (parameter29_value.hasValue())
    {
        input.add_var("Parameter29.Value", ::OpenAPI::toStringValue(parameter29_value.value()));
    }
    if (parameter3_name.hasValue())
    {
        input.add_var("Parameter3.Name", ::OpenAPI::toStringValue(parameter3_name.value()));
    }
    if (parameter3_value.hasValue())
    {
        input.add_var("Parameter3.Value", ::OpenAPI::toStringValue(parameter3_value.value()));
    }
    if (parameter30_name.hasValue())
    {
        input.add_var("Parameter30.Name", ::OpenAPI::toStringValue(parameter30_name.value()));
    }
    if (parameter30_value.hasValue())
    {
        input.add_var("Parameter30.Value", ::OpenAPI::toStringValue(parameter30_value.value()));
    }
    if (parameter31_name.hasValue())
    {
        input.add_var("Parameter31.Name", ::OpenAPI::toStringValue(parameter31_name.value()));
    }
    if (parameter31_value.hasValue())
    {
        input.add_var("Parameter31.Value", ::OpenAPI::toStringValue(parameter31_value.value()));
    }
    if (parameter32_name.hasValue())
    {
        input.add_var("Parameter32.Name", ::OpenAPI::toStringValue(parameter32_name.value()));
    }
    if (parameter32_value.hasValue())
    {
        input.add_var("Parameter32.Value", ::OpenAPI::toStringValue(parameter32_value.value()));
    }
    if (parameter33_name.hasValue())
    {
        input.add_var("Parameter33.Name", ::OpenAPI::toStringValue(parameter33_name.value()));
    }
    if (parameter33_value.hasValue())
    {
        input.add_var("Parameter33.Value", ::OpenAPI::toStringValue(parameter33_value.value()));
    }
    if (parameter34_name.hasValue())
    {
        input.add_var("Parameter34.Name", ::OpenAPI::toStringValue(parameter34_name.value()));
    }
    if (parameter34_value.hasValue())
    {
        input.add_var("Parameter34.Value", ::OpenAPI::toStringValue(parameter34_value.value()));
    }
    if (parameter35_name.hasValue())
    {
        input.add_var("Parameter35.Name", ::OpenAPI::toStringValue(parameter35_name.value()));
    }
    if (parameter35_value.hasValue())
    {
        input.add_var("Parameter35.Value", ::OpenAPI::toStringValue(parameter35_value.value()));
    }
    if (parameter36_name.hasValue())
    {
        input.add_var("Parameter36.Name", ::OpenAPI::toStringValue(parameter36_name.value()));
    }
    if (parameter36_value.hasValue())
    {
        input.add_var("Parameter36.Value", ::OpenAPI::toStringValue(parameter36_value.value()));
    }
    if (parameter37_name.hasValue())
    {
        input.add_var("Parameter37.Name", ::OpenAPI::toStringValue(parameter37_name.value()));
    }
    if (parameter37_value.hasValue())
    {
        input.add_var("Parameter37.Value", ::OpenAPI::toStringValue(parameter37_value.value()));
    }
    if (parameter38_name.hasValue())
    {
        input.add_var("Parameter38.Name", ::OpenAPI::toStringValue(parameter38_name.value()));
    }
    if (parameter38_value.hasValue())
    {
        input.add_var("Parameter38.Value", ::OpenAPI::toStringValue(parameter38_value.value()));
    }
    if (parameter39_name.hasValue())
    {
        input.add_var("Parameter39.Name", ::OpenAPI::toStringValue(parameter39_name.value()));
    }
    if (parameter39_value.hasValue())
    {
        input.add_var("Parameter39.Value", ::OpenAPI::toStringValue(parameter39_value.value()));
    }
    if (parameter4_name.hasValue())
    {
        input.add_var("Parameter4.Name", ::OpenAPI::toStringValue(parameter4_name.value()));
    }
    if (parameter4_value.hasValue())
    {
        input.add_var("Parameter4.Value", ::OpenAPI::toStringValue(parameter4_value.value()));
    }
    if (parameter40_name.hasValue())
    {
        input.add_var("Parameter40.Name", ::OpenAPI::toStringValue(parameter40_name.value()));
    }
    if (parameter40_value.hasValue())
    {
        input.add_var("Parameter40.Value", ::OpenAPI::toStringValue(parameter40_value.value()));
    }
    if (parameter41_name.hasValue())
    {
        input.add_var("Parameter41.Name", ::OpenAPI::toStringValue(parameter41_name.value()));
    }
    if (parameter41_value.hasValue())
    {
        input.add_var("Parameter41.Value", ::OpenAPI::toStringValue(parameter41_value.value()));
    }
    if (parameter42_name.hasValue())
    {
        input.add_var("Parameter42.Name", ::OpenAPI::toStringValue(parameter42_name.value()));
    }
    if (parameter42_value.hasValue())
    {
        input.add_var("Parameter42.Value", ::OpenAPI::toStringValue(parameter42_value.value()));
    }
    if (parameter43_name.hasValue())
    {
        input.add_var("Parameter43.Name", ::OpenAPI::toStringValue(parameter43_name.value()));
    }
    if (parameter43_value.hasValue())
    {
        input.add_var("Parameter43.Value", ::OpenAPI::toStringValue(parameter43_value.value()));
    }
    if (parameter44_name.hasValue())
    {
        input.add_var("Parameter44.Name", ::OpenAPI::toStringValue(parameter44_name.value()));
    }
    if (parameter44_value.hasValue())
    {
        input.add_var("Parameter44.Value", ::OpenAPI::toStringValue(parameter44_value.value()));
    }
    if (parameter45_name.hasValue())
    {
        input.add_var("Parameter45.Name", ::OpenAPI::toStringValue(parameter45_name.value()));
    }
    if (parameter45_value.hasValue())
    {
        input.add_var("Parameter45.Value", ::OpenAPI::toStringValue(parameter45_value.value()));
    }
    if (parameter46_name.hasValue())
    {
        input.add_var("Parameter46.Name", ::OpenAPI::toStringValue(parameter46_name.value()));
    }
    if (parameter46_value.hasValue())
    {
        input.add_var("Parameter46.Value", ::OpenAPI::toStringValue(parameter46_value.value()));
    }
    if (parameter47_name.hasValue())
    {
        input.add_var("Parameter47.Name", ::OpenAPI::toStringValue(parameter47_name.value()));
    }
    if (parameter47_value.hasValue())
    {
        input.add_var("Parameter47.Value", ::OpenAPI::toStringValue(parameter47_value.value()));
    }
    if (parameter48_name.hasValue())
    {
        input.add_var("Parameter48.Name", ::OpenAPI::toStringValue(parameter48_name.value()));
    }
    if (parameter48_value.hasValue())
    {
        input.add_var("Parameter48.Value", ::OpenAPI::toStringValue(parameter48_value.value()));
    }
    if (parameter49_name.hasValue())
    {
        input.add_var("Parameter49.Name", ::OpenAPI::toStringValue(parameter49_name.value()));
    }
    if (parameter49_value.hasValue())
    {
        input.add_var("Parameter49.Value", ::OpenAPI::toStringValue(parameter49_value.value()));
    }
    if (parameter5_name.hasValue())
    {
        input.add_var("Parameter5.Name", ::OpenAPI::toStringValue(parameter5_name.value()));
    }
    if (parameter5_value.hasValue())
    {
        input.add_var("Parameter5.Value", ::OpenAPI::toStringValue(parameter5_value.value()));
    }
    if (parameter50_name.hasValue())
    {
        input.add_var("Parameter50.Name", ::OpenAPI::toStringValue(parameter50_name.value()));
    }
    if (parameter50_value.hasValue())
    {
        input.add_var("Parameter50.Value", ::OpenAPI::toStringValue(parameter50_value.value()));
    }
    if (parameter51_name.hasValue())
    {
        input.add_var("Parameter51.Name", ::OpenAPI::toStringValue(parameter51_name.value()));
    }
    if (parameter51_value.hasValue())
    {
        input.add_var("Parameter51.Value", ::OpenAPI::toStringValue(parameter51_value.value()));
    }
    if (parameter52_name.hasValue())
    {
        input.add_var("Parameter52.Name", ::OpenAPI::toStringValue(parameter52_name.value()));
    }
    if (parameter52_value.hasValue())
    {
        input.add_var("Parameter52.Value", ::OpenAPI::toStringValue(parameter52_value.value()));
    }
    if (parameter53_name.hasValue())
    {
        input.add_var("Parameter53.Name", ::OpenAPI::toStringValue(parameter53_name.value()));
    }
    if (parameter53_value.hasValue())
    {
        input.add_var("Parameter53.Value", ::OpenAPI::toStringValue(parameter53_value.value()));
    }
    if (parameter54_name.hasValue())
    {
        input.add_var("Parameter54.Name", ::OpenAPI::toStringValue(parameter54_name.value()));
    }
    if (parameter54_value.hasValue())
    {
        input.add_var("Parameter54.Value", ::OpenAPI::toStringValue(parameter54_value.value()));
    }
    if (parameter55_name.hasValue())
    {
        input.add_var("Parameter55.Name", ::OpenAPI::toStringValue(parameter55_name.value()));
    }
    if (parameter55_value.hasValue())
    {
        input.add_var("Parameter55.Value", ::OpenAPI::toStringValue(parameter55_value.value()));
    }
    if (parameter56_name.hasValue())
    {
        input.add_var("Parameter56.Name", ::OpenAPI::toStringValue(parameter56_name.value()));
    }
    if (parameter56_value.hasValue())
    {
        input.add_var("Parameter56.Value", ::OpenAPI::toStringValue(parameter56_value.value()));
    }
    if (parameter57_name.hasValue())
    {
        input.add_var("Parameter57.Name", ::OpenAPI::toStringValue(parameter57_name.value()));
    }
    if (parameter57_value.hasValue())
    {
        input.add_var("Parameter57.Value", ::OpenAPI::toStringValue(parameter57_value.value()));
    }
    if (parameter58_name.hasValue())
    {
        input.add_var("Parameter58.Name", ::OpenAPI::toStringValue(parameter58_name.value()));
    }
    if (parameter58_value.hasValue())
    {
        input.add_var("Parameter58.Value", ::OpenAPI::toStringValue(parameter58_value.value()));
    }
    if (parameter59_name.hasValue())
    {
        input.add_var("Parameter59.Name", ::OpenAPI::toStringValue(parameter59_name.value()));
    }
    if (parameter59_value.hasValue())
    {
        input.add_var("Parameter59.Value", ::OpenAPI::toStringValue(parameter59_value.value()));
    }
    if (parameter6_name.hasValue())
    {
        input.add_var("Parameter6.Name", ::OpenAPI::toStringValue(parameter6_name.value()));
    }
    if (parameter6_value.hasValue())
    {
        input.add_var("Parameter6.Value", ::OpenAPI::toStringValue(parameter6_value.value()));
    }
    if (parameter60_name.hasValue())
    {
        input.add_var("Parameter60.Name", ::OpenAPI::toStringValue(parameter60_name.value()));
    }
    if (parameter60_value.hasValue())
    {
        input.add_var("Parameter60.Value", ::OpenAPI::toStringValue(parameter60_value.value()));
    }
    if (parameter61_name.hasValue())
    {
        input.add_var("Parameter61.Name", ::OpenAPI::toStringValue(parameter61_name.value()));
    }
    if (parameter61_value.hasValue())
    {
        input.add_var("Parameter61.Value", ::OpenAPI::toStringValue(parameter61_value.value()));
    }
    if (parameter62_name.hasValue())
    {
        input.add_var("Parameter62.Name", ::OpenAPI::toStringValue(parameter62_name.value()));
    }
    if (parameter62_value.hasValue())
    {
        input.add_var("Parameter62.Value", ::OpenAPI::toStringValue(parameter62_value.value()));
    }
    if (parameter63_name.hasValue())
    {
        input.add_var("Parameter63.Name", ::OpenAPI::toStringValue(parameter63_name.value()));
    }
    if (parameter63_value.hasValue())
    {
        input.add_var("Parameter63.Value", ::OpenAPI::toStringValue(parameter63_value.value()));
    }
    if (parameter64_name.hasValue())
    {
        input.add_var("Parameter64.Name", ::OpenAPI::toStringValue(parameter64_name.value()));
    }
    if (parameter64_value.hasValue())
    {
        input.add_var("Parameter64.Value", ::OpenAPI::toStringValue(parameter64_value.value()));
    }
    if (parameter65_name.hasValue())
    {
        input.add_var("Parameter65.Name", ::OpenAPI::toStringValue(parameter65_name.value()));
    }
    if (parameter65_value.hasValue())
    {
        input.add_var("Parameter65.Value", ::OpenAPI::toStringValue(parameter65_value.value()));
    }
    if (parameter66_name.hasValue())
    {
        input.add_var("Parameter66.Name", ::OpenAPI::toStringValue(parameter66_name.value()));
    }
    if (parameter66_value.hasValue())
    {
        input.add_var("Parameter66.Value", ::OpenAPI::toStringValue(parameter66_value.value()));
    }
    if (parameter67_name.hasValue())
    {
        input.add_var("Parameter67.Name", ::OpenAPI::toStringValue(parameter67_name.value()));
    }
    if (parameter67_value.hasValue())
    {
        input.add_var("Parameter67.Value", ::OpenAPI::toStringValue(parameter67_value.value()));
    }
    if (parameter68_name.hasValue())
    {
        input.add_var("Parameter68.Name", ::OpenAPI::toStringValue(parameter68_name.value()));
    }
    if (parameter68_value.hasValue())
    {
        input.add_var("Parameter68.Value", ::OpenAPI::toStringValue(parameter68_value.value()));
    }
    if (parameter69_name.hasValue())
    {
        input.add_var("Parameter69.Name", ::OpenAPI::toStringValue(parameter69_name.value()));
    }
    if (parameter69_value.hasValue())
    {
        input.add_var("Parameter69.Value", ::OpenAPI::toStringValue(parameter69_value.value()));
    }
    if (parameter7_name.hasValue())
    {
        input.add_var("Parameter7.Name", ::OpenAPI::toStringValue(parameter7_name.value()));
    }
    if (parameter7_value.hasValue())
    {
        input.add_var("Parameter7.Value", ::OpenAPI::toStringValue(parameter7_value.value()));
    }
    if (parameter70_name.hasValue())
    {
        input.add_var("Parameter70.Name", ::OpenAPI::toStringValue(parameter70_name.value()));
    }
    if (parameter70_value.hasValue())
    {
        input.add_var("Parameter70.Value", ::OpenAPI::toStringValue(parameter70_value.value()));
    }
    if (parameter71_name.hasValue())
    {
        input.add_var("Parameter71.Name", ::OpenAPI::toStringValue(parameter71_name.value()));
    }
    if (parameter71_value.hasValue())
    {
        input.add_var("Parameter71.Value", ::OpenAPI::toStringValue(parameter71_value.value()));
    }
    if (parameter72_name.hasValue())
    {
        input.add_var("Parameter72.Name", ::OpenAPI::toStringValue(parameter72_name.value()));
    }
    if (parameter72_value.hasValue())
    {
        input.add_var("Parameter72.Value", ::OpenAPI::toStringValue(parameter72_value.value()));
    }
    if (parameter73_name.hasValue())
    {
        input.add_var("Parameter73.Name", ::OpenAPI::toStringValue(parameter73_name.value()));
    }
    if (parameter73_value.hasValue())
    {
        input.add_var("Parameter73.Value", ::OpenAPI::toStringValue(parameter73_value.value()));
    }
    if (parameter74_name.hasValue())
    {
        input.add_var("Parameter74.Name", ::OpenAPI::toStringValue(parameter74_name.value()));
    }
    if (parameter74_value.hasValue())
    {
        input.add_var("Parameter74.Value", ::OpenAPI::toStringValue(parameter74_value.value()));
    }
    if (parameter75_name.hasValue())
    {
        input.add_var("Parameter75.Name", ::OpenAPI::toStringValue(parameter75_name.value()));
    }
    if (parameter75_value.hasValue())
    {
        input.add_var("Parameter75.Value", ::OpenAPI::toStringValue(parameter75_value.value()));
    }
    if (parameter76_name.hasValue())
    {
        input.add_var("Parameter76.Name", ::OpenAPI::toStringValue(parameter76_name.value()));
    }
    if (parameter76_value.hasValue())
    {
        input.add_var("Parameter76.Value", ::OpenAPI::toStringValue(parameter76_value.value()));
    }
    if (parameter77_name.hasValue())
    {
        input.add_var("Parameter77.Name", ::OpenAPI::toStringValue(parameter77_name.value()));
    }
    if (parameter77_value.hasValue())
    {
        input.add_var("Parameter77.Value", ::OpenAPI::toStringValue(parameter77_value.value()));
    }
    if (parameter78_name.hasValue())
    {
        input.add_var("Parameter78.Name", ::OpenAPI::toStringValue(parameter78_name.value()));
    }
    if (parameter78_value.hasValue())
    {
        input.add_var("Parameter78.Value", ::OpenAPI::toStringValue(parameter78_value.value()));
    }
    if (parameter79_name.hasValue())
    {
        input.add_var("Parameter79.Name", ::OpenAPI::toStringValue(parameter79_name.value()));
    }
    if (parameter79_value.hasValue())
    {
        input.add_var("Parameter79.Value", ::OpenAPI::toStringValue(parameter79_value.value()));
    }
    if (parameter8_name.hasValue())
    {
        input.add_var("Parameter8.Name", ::OpenAPI::toStringValue(parameter8_name.value()));
    }
    if (parameter8_value.hasValue())
    {
        input.add_var("Parameter8.Value", ::OpenAPI::toStringValue(parameter8_value.value()));
    }
    if (parameter80_name.hasValue())
    {
        input.add_var("Parameter80.Name", ::OpenAPI::toStringValue(parameter80_name.value()));
    }
    if (parameter80_value.hasValue())
    {
        input.add_var("Parameter80.Value", ::OpenAPI::toStringValue(parameter80_value.value()));
    }
    if (parameter81_name.hasValue())
    {
        input.add_var("Parameter81.Name", ::OpenAPI::toStringValue(parameter81_name.value()));
    }
    if (parameter81_value.hasValue())
    {
        input.add_var("Parameter81.Value", ::OpenAPI::toStringValue(parameter81_value.value()));
    }
    if (parameter82_name.hasValue())
    {
        input.add_var("Parameter82.Name", ::OpenAPI::toStringValue(parameter82_name.value()));
    }
    if (parameter82_value.hasValue())
    {
        input.add_var("Parameter82.Value", ::OpenAPI::toStringValue(parameter82_value.value()));
    }
    if (parameter83_name.hasValue())
    {
        input.add_var("Parameter83.Name", ::OpenAPI::toStringValue(parameter83_name.value()));
    }
    if (parameter83_value.hasValue())
    {
        input.add_var("Parameter83.Value", ::OpenAPI::toStringValue(parameter83_value.value()));
    }
    if (parameter84_name.hasValue())
    {
        input.add_var("Parameter84.Name", ::OpenAPI::toStringValue(parameter84_name.value()));
    }
    if (parameter84_value.hasValue())
    {
        input.add_var("Parameter84.Value", ::OpenAPI::toStringValue(parameter84_value.value()));
    }
    if (parameter85_name.hasValue())
    {
        input.add_var("Parameter85.Name", ::OpenAPI::toStringValue(parameter85_name.value()));
    }
    if (parameter85_value.hasValue())
    {
        input.add_var("Parameter85.Value", ::OpenAPI::toStringValue(parameter85_value.value()));
    }
    if (parameter86_name.hasValue())
    {
        input.add_var("Parameter86.Name", ::OpenAPI::toStringValue(parameter86_name.value()));
    }
    if (parameter86_value.hasValue())
    {
        input.add_var("Parameter86.Value", ::OpenAPI::toStringValue(parameter86_value.value()));
    }
    if (parameter87_name.hasValue())
    {
        input.add_var("Parameter87.Name", ::OpenAPI::toStringValue(parameter87_name.value()));
    }
    if (parameter87_value.hasValue())
    {
        input.add_var("Parameter87.Value", ::OpenAPI::toStringValue(parameter87_value.value()));
    }
    if (parameter88_name.hasValue())
    {
        input.add_var("Parameter88.Name", ::OpenAPI::toStringValue(parameter88_name.value()));
    }
    if (parameter88_value.hasValue())
    {
        input.add_var("Parameter88.Value", ::OpenAPI::toStringValue(parameter88_value.value()));
    }
    if (parameter89_name.hasValue())
    {
        input.add_var("Parameter89.Name", ::OpenAPI::toStringValue(parameter89_name.value()));
    }
    if (parameter89_value.hasValue())
    {
        input.add_var("Parameter89.Value", ::OpenAPI::toStringValue(parameter89_value.value()));
    }
    if (parameter9_name.hasValue())
    {
        input.add_var("Parameter9.Name", ::OpenAPI::toStringValue(parameter9_name.value()));
    }
    if (parameter9_value.hasValue())
    {
        input.add_var("Parameter9.Value", ::OpenAPI::toStringValue(parameter9_value.value()));
    }
    if (parameter90_name.hasValue())
    {
        input.add_var("Parameter90.Name", ::OpenAPI::toStringValue(parameter90_name.value()));
    }
    if (parameter90_value.hasValue())
    {
        input.add_var("Parameter90.Value", ::OpenAPI::toStringValue(parameter90_value.value()));
    }
    if (parameter91_name.hasValue())
    {
        input.add_var("Parameter91.Name", ::OpenAPI::toStringValue(parameter91_name.value()));
    }
    if (parameter91_value.hasValue())
    {
        input.add_var("Parameter91.Value", ::OpenAPI::toStringValue(parameter91_value.value()));
    }
    if (parameter92_name.hasValue())
    {
        input.add_var("Parameter92.Name", ::OpenAPI::toStringValue(parameter92_name.value()));
    }
    if (parameter92_value.hasValue())
    {
        input.add_var("Parameter92.Value", ::OpenAPI::toStringValue(parameter92_value.value()));
    }
    if (parameter93_name.hasValue())
    {
        input.add_var("Parameter93.Name", ::OpenAPI::toStringValue(parameter93_name.value()));
    }
    if (parameter93_value.hasValue())
    {
        input.add_var("Parameter93.Value", ::OpenAPI::toStringValue(parameter93_value.value()));
    }
    if (parameter94_name.hasValue())
    {
        input.add_var("Parameter94.Name", ::OpenAPI::toStringValue(parameter94_name.value()));
    }
    if (parameter94_value.hasValue())
    {
        input.add_var("Parameter94.Value", ::OpenAPI::toStringValue(parameter94_value.value()));
    }
    if (parameter95_name.hasValue())
    {
        input.add_var("Parameter95.Name", ::OpenAPI::toStringValue(parameter95_name.value()));
    }
    if (parameter95_value.hasValue())
    {
        input.add_var("Parameter95.Value", ::OpenAPI::toStringValue(parameter95_value.value()));
    }
    if (parameter96_name.hasValue())
    {
        input.add_var("Parameter96.Name", ::OpenAPI::toStringValue(parameter96_name.value()));
    }
    if (parameter96_value.hasValue())
    {
        input.add_var("Parameter96.Value", ::OpenAPI::toStringValue(parameter96_value.value()));
    }
    if (parameter97_name.hasValue())
    {
        input.add_var("Parameter97.Name", ::OpenAPI::toStringValue(parameter97_name.value()));
    }
    if (parameter97_value.hasValue())
    {
        input.add_var("Parameter97.Value", ::OpenAPI::toStringValue(parameter97_value.value()));
    }
    if (parameter98_name.hasValue())
    {
        input.add_var("Parameter98.Name", ::OpenAPI::toStringValue(parameter98_name.value()));
    }
    if (parameter98_value.hasValue())
    {
        input.add_var("Parameter98.Value", ::OpenAPI::toStringValue(parameter98_value.value()));
    }
    if (parameter99_name.hasValue())
    {
        input.add_var("Parameter99.Name", ::OpenAPI::toStringValue(parameter99_name.value()));
    }
    if (parameter99_value.hasValue())
    {
        input.add_var("Parameter99.Value", ::OpenAPI::toStringValue(parameter99_value.value()));
    }
    if (status_callback.hasValue())
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback.value()));
    }
    if (status_callback_method.hasValue())
    {
        input.add_var("StatusCallbackMethod", ::OpenAPI::toStringValue(status_callback_method.value()));
    }
    if (track.hasValue())
    {
        input.add_var("Track", ::OpenAPI::toStringValue(track.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401SiprecApi::createSiprecCallback);
    connect(this, &OAIApi20100401SiprecApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401SiprecApi::createSiprecCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call_siprec output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createSiprecSignal(output);
        Q_EMIT createSiprecSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createSiprecSignalE(output, error_type, error_str);
        Q_EMIT createSiprecSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createSiprecSignalError(output, error_type, error_str);
        Q_EMIT createSiprecSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401SiprecApi::updateSiprec(const QString &account_sid, const QString &call_sid, const QString &sid, const OAISiprec_enum_update_status &status) {
    QString fullPath = QString(_serverConfigs["updateSiprec"][_serverIndices.value("updateSiprec")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("Status", ::OpenAPI::toStringValue(status));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401SiprecApi::updateSiprecCallback);
    connect(this, &OAIApi20100401SiprecApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401SiprecApi::updateSiprecCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call_siprec output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateSiprecSignal(output);
        Q_EMIT updateSiprecSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateSiprecSignalE(output, error_type, error_str);
        Q_EMIT updateSiprecSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateSiprecSignalError(output, error_type, error_str);
        Q_EMIT updateSiprecSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401SiprecApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
