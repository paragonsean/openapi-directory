/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401CallApi_H
#define OAI_OAIApi20100401CallApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_call.h"
#include "OAICall_enum_status.h"
#include "OAICall_enum_update_status.h"
#include "OAIListCallResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401CallApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401CallApi(const int timeOut = 0);
    ~OAIApi20100401CallApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  application_sid QString [optional]
    * @param[in]  async_amd QString [optional]
    * @param[in]  async_amd_status_callback QString [optional]
    * @param[in]  async_amd_status_callback_method QString [optional]
    * @param[in]  byoc QString [optional]
    * @param[in]  call_reason QString [optional]
    * @param[in]  call_token QString [optional]
    * @param[in]  caller_id QString [optional]
    * @param[in]  fallback_method QString [optional]
    * @param[in]  fallback_url QString [optional]
    * @param[in]  machine_detection QString [optional]
    * @param[in]  machine_detection_silence_timeout qint32 [optional]
    * @param[in]  machine_detection_speech_end_threshold qint32 [optional]
    * @param[in]  machine_detection_speech_threshold qint32 [optional]
    * @param[in]  machine_detection_timeout qint32 [optional]
    * @param[in]  method QString [optional]
    * @param[in]  record bool [optional]
    * @param[in]  recording_channels QString [optional]
    * @param[in]  recording_status_callback QString [optional]
    * @param[in]  recording_status_callback_event QList<QString> [optional]
    * @param[in]  recording_status_callback_method QString [optional]
    * @param[in]  recording_track QString [optional]
    * @param[in]  send_digits QString [optional]
    * @param[in]  sip_auth_password QString [optional]
    * @param[in]  sip_auth_username QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_event QList<QString> [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  time_limit qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  twiml QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void createCall(const QString &account_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QString> &application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &async_amd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &byoc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &caller_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &machine_detection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_silence_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_end_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &record = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recording_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recording_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_track = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &send_digits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &twiml = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteCall(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchCall(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  to QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  parent_call_sid QString [optional]
    * @param[in]  status OAICall_enum_status [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  start_time2 QDateTime [optional]
    * @param[in]  start_time3 QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  end_time2 QDateTime [optional]
    * @param[in]  end_time3 QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCall(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_call_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICall_enum_status> &status = ::OpenAPI::OptionalParam<OAICall_enum_status>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time2 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time3 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time2 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time3 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  fallback_method QString [optional]
    * @param[in]  fallback_url QString [optional]
    * @param[in]  method QString [optional]
    * @param[in]  status OAICall_enum_update_status [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  time_limit qint32 [optional]
    * @param[in]  twiml QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void updateCall(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICall_enum_update_status> &status = ::OpenAPI::OptionalParam<OAICall_enum_update_status>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &twiml = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCallCallback(OAIHttpRequestWorker *worker);
    void deleteCallCallback(OAIHttpRequestWorker *worker);
    void fetchCallCallback(OAIHttpRequestWorker *worker);
    void listCallCallback(OAIHttpRequestWorker *worker);
    void updateCallCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCallSignal(OAIApi_v2010_account_call summary);
    void deleteCallSignal();
    void fetchCallSignal(OAIApi_v2010_account_call summary);
    void listCallSignal(OAIListCallResponse summary);
    void updateCallSignal(OAIApi_v2010_account_call summary);


    void createCallSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call summary);
    void deleteCallSignalFull(OAIHttpRequestWorker *worker);
    void fetchCallSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call summary);
    void listCallSignalFull(OAIHttpRequestWorker *worker, OAIListCallResponse summary);
    void updateCallSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call summary);

    Q_DECL_DEPRECATED_X("Use createCallSignalError() instead")
    void createCallSignalE(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalError(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCallSignalError() instead")
    void deleteCallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCallSignalError() instead")
    void fetchCallSignalE(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCallSignalError(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallSignalError() instead")
    void listCallSignalE(OAIListCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallSignalError(OAIListCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallSignalError() instead")
    void updateCallSignalE(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallSignalError(OAIApi_v2010_account_call summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCallSignalErrorFull() instead")
    void createCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCallSignalErrorFull() instead")
    void deleteCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCallSignalErrorFull() instead")
    void fetchCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallSignalErrorFull() instead")
    void listCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallSignalErrorFull() instead")
    void updateCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
