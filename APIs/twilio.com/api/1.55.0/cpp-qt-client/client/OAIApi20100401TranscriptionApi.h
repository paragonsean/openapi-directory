/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401TranscriptionApi_H
#define OAI_OAIApi20100401TranscriptionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_recording_recording_transcription.h"
#include "OAIApi_v2010_account_transcription.h"
#include "OAIListRecordingTranscriptionResponse.h"
#include "OAIListTranscriptionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401TranscriptionApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401TranscriptionApi(const int timeOut = 0);
    ~OAIApi20100401TranscriptionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  recording_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteRecordingTranscription(const QString &account_sid, const QString &recording_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteTranscription(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  recording_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchRecordingTranscription(const QString &account_sid, const QString &recording_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchTranscription(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  recording_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRecordingTranscription(const QString &account_sid, const QString &recording_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listTranscription(const QString &account_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteRecordingTranscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteTranscriptionCallback(OAIHttpRequestWorker *worker);
    void fetchRecordingTranscriptionCallback(OAIHttpRequestWorker *worker);
    void fetchTranscriptionCallback(OAIHttpRequestWorker *worker);
    void listRecordingTranscriptionCallback(OAIHttpRequestWorker *worker);
    void listTranscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteRecordingTranscriptionSignal();
    void deleteTranscriptionSignal();
    void fetchRecordingTranscriptionSignal(OAIApi_v2010_account_recording_recording_transcription summary);
    void fetchTranscriptionSignal(OAIApi_v2010_account_transcription summary);
    void listRecordingTranscriptionSignal(OAIListRecordingTranscriptionResponse summary);
    void listTranscriptionSignal(OAIListTranscriptionResponse summary);


    void deleteRecordingTranscriptionSignalFull(OAIHttpRequestWorker *worker);
    void deleteTranscriptionSignalFull(OAIHttpRequestWorker *worker);
    void fetchRecordingTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_recording_recording_transcription summary);
    void fetchTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_transcription summary);
    void listRecordingTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIListRecordingTranscriptionResponse summary);
    void listTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIListTranscriptionResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteRecordingTranscriptionSignalError() instead")
    void deleteRecordingTranscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingTranscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptionSignalError() instead")
    void deleteTranscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingTranscriptionSignalError() instead")
    void fetchRecordingTranscriptionSignalE(OAIApi_v2010_account_recording_recording_transcription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingTranscriptionSignalError(OAIApi_v2010_account_recording_recording_transcription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTranscriptionSignalError() instead")
    void fetchTranscriptionSignalE(OAIApi_v2010_account_transcription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTranscriptionSignalError(OAIApi_v2010_account_transcription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingTranscriptionSignalError() instead")
    void listRecordingTranscriptionSignalE(OAIListRecordingTranscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingTranscriptionSignalError(OAIListRecordingTranscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptionSignalError() instead")
    void listTranscriptionSignalE(OAIListTranscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptionSignalError(OAIListTranscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteRecordingTranscriptionSignalErrorFull() instead")
    void deleteRecordingTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptionSignalErrorFull() instead")
    void deleteTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingTranscriptionSignalErrorFull() instead")
    void fetchRecordingTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchTranscriptionSignalErrorFull() instead")
    void fetchTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingTranscriptionSignalErrorFull() instead")
    void listRecordingTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptionSignalErrorFull() instead")
    void listTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
