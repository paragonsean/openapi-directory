/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_usage_usage_trigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_usage_usage_trigger::OAIApi_v2010_account_usage_usage_trigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_usage_usage_trigger::OAIApi_v2010_account_usage_usage_trigger() {
    this->initializeModel();
}

OAIApi_v2010_account_usage_usage_trigger::~OAIApi_v2010_account_usage_usage_trigger() {}

void OAIApi_v2010_account_usage_usage_trigger::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_callback_method_isSet = false;
    m_callback_method_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_current_value_isSet = false;
    m_current_value_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_fired_isSet = false;
    m_date_fired_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_trigger_by_isSet = false;
    m_trigger_by_isValid = false;

    m_trigger_value_isSet = false;
    m_trigger_value_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_usage_category_isSet = false;
    m_usage_category_isValid = false;

    m_usage_record_uri_isSet = false;
    m_usage_record_uri_isValid = false;
}

void OAIApi_v2010_account_usage_usage_trigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_usage_usage_trigger::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_callback_method_isValid = ::OpenAPI::fromJsonValue(m_callback_method, json[QString("callback_method")]);
    m_callback_method_isSet = !json[QString("callback_method")].isNull() && m_callback_method_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_current_value_isValid = ::OpenAPI::fromJsonValue(m_current_value, json[QString("current_value")]);
    m_current_value_isSet = !json[QString("current_value")].isNull() && m_current_value_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_fired_isValid = ::OpenAPI::fromJsonValue(m_date_fired, json[QString("date_fired")]);
    m_date_fired_isSet = !json[QString("date_fired")].isNull() && m_date_fired_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_trigger_by_isValid = ::OpenAPI::fromJsonValue(m_trigger_by, json[QString("trigger_by")]);
    m_trigger_by_isSet = !json[QString("trigger_by")].isNull() && m_trigger_by_isValid;

    m_trigger_value_isValid = ::OpenAPI::fromJsonValue(m_trigger_value, json[QString("trigger_value")]);
    m_trigger_value_isSet = !json[QString("trigger_value")].isNull() && m_trigger_value_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_usage_category_isValid = ::OpenAPI::fromJsonValue(m_usage_category, json[QString("usage_category")]);
    m_usage_category_isSet = !json[QString("usage_category")].isNull() && m_usage_category_isValid;

    m_usage_record_uri_isValid = ::OpenAPI::fromJsonValue(m_usage_record_uri, json[QString("usage_record_uri")]);
    m_usage_record_uri_isSet = !json[QString("usage_record_uri")].isNull() && m_usage_record_uri_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_usage_usage_trigger::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_callback_method_isSet) {
        obj.insert(QString("callback_method"), ::OpenAPI::toJsonValue(m_callback_method));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_current_value_isSet) {
        obj.insert(QString("current_value"), ::OpenAPI::toJsonValue(m_current_value));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_fired_isSet) {
        obj.insert(QString("date_fired"), ::OpenAPI::toJsonValue(m_date_fired));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_recurring.isSet()) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_trigger_by.isSet()) {
        obj.insert(QString("trigger_by"), ::OpenAPI::toJsonValue(m_trigger_by));
    }
    if (m_trigger_value_isSet) {
        obj.insert(QString("trigger_value"), ::OpenAPI::toJsonValue(m_trigger_value));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_usage_category.isSet()) {
        obj.insert(QString("usage_category"), ::OpenAPI::toJsonValue(m_usage_category));
    }
    if (m_usage_record_uri_isSet) {
        obj.insert(QString("usage_record_uri"), ::OpenAPI::toJsonValue(m_usage_record_uri));
    }
    return obj;
}

QString OAIApi_v2010_account_usage_usage_trigger::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_usage_usage_trigger::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getApiVersion() const {
    return m_api_version;
}
void OAIApi_v2010_account_usage_usage_trigger::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getCallbackMethod() const {
    return m_callback_method;
}
void OAIApi_v2010_account_usage_usage_trigger::setCallbackMethod(const QString &callback_method) {
    m_callback_method = callback_method;
    m_callback_method_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_callback_method_Set() const{
    return m_callback_method_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_callback_method_Valid() const{
    return m_callback_method_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getCallbackUrl() const {
    return m_callback_url;
}
void OAIApi_v2010_account_usage_usage_trigger::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getCurrentValue() const {
    return m_current_value;
}
void OAIApi_v2010_account_usage_usage_trigger::setCurrentValue(const QString &current_value) {
    m_current_value = current_value;
    m_current_value_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_current_value_Set() const{
    return m_current_value_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_current_value_Valid() const{
    return m_current_value_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_usage_usage_trigger::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getDateFired() const {
    return m_date_fired;
}
void OAIApi_v2010_account_usage_usage_trigger::setDateFired(const QString &date_fired) {
    m_date_fired = date_fired;
    m_date_fired_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_fired_Set() const{
    return m_date_fired_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_fired_Valid() const{
    return m_date_fired_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_usage_usage_trigger::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getFriendlyName() const {
    return m_friendly_name;
}
void OAIApi_v2010_account_usage_usage_trigger::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIUsage_trigger_enum_recurring OAIApi_v2010_account_usage_usage_trigger::getRecurring() const {
    return m_recurring;
}
void OAIApi_v2010_account_usage_usage_trigger::setRecurring(const OAIUsage_trigger_enum_recurring &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getSid() const {
    return m_sid;
}
void OAIApi_v2010_account_usage_usage_trigger::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIUsage_trigger_enum_trigger_field OAIApi_v2010_account_usage_usage_trigger::getTriggerBy() const {
    return m_trigger_by;
}
void OAIApi_v2010_account_usage_usage_trigger::setTriggerBy(const OAIUsage_trigger_enum_trigger_field &trigger_by) {
    m_trigger_by = trigger_by;
    m_trigger_by_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_trigger_by_Set() const{
    return m_trigger_by_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_trigger_by_Valid() const{
    return m_trigger_by_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getTriggerValue() const {
    return m_trigger_value;
}
void OAIApi_v2010_account_usage_usage_trigger::setTriggerValue(const QString &trigger_value) {
    m_trigger_value = trigger_value;
    m_trigger_value_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_trigger_value_Set() const{
    return m_trigger_value_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_trigger_value_Valid() const{
    return m_trigger_value_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_usage_usage_trigger::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUsage_trigger_enum_usage_category OAIApi_v2010_account_usage_usage_trigger::getUsageCategory() const {
    return m_usage_category;
}
void OAIApi_v2010_account_usage_usage_trigger::setUsageCategory(const OAIUsage_trigger_enum_usage_category &usage_category) {
    m_usage_category = usage_category;
    m_usage_category_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_usage_category_Set() const{
    return m_usage_category_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_usage_category_Valid() const{
    return m_usage_category_isValid;
}

QString OAIApi_v2010_account_usage_usage_trigger::getUsageRecordUri() const {
    return m_usage_record_uri;
}
void OAIApi_v2010_account_usage_usage_trigger::setUsageRecordUri(const QString &usage_record_uri) {
    m_usage_record_uri = usage_record_uri;
    m_usage_record_uri_isSet = true;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_usage_record_uri_Set() const{
    return m_usage_record_uri_isSet;
}

bool OAIApi_v2010_account_usage_usage_trigger::is_usage_record_uri_Valid() const{
    return m_usage_record_uri_isValid;
}

bool OAIApi_v2010_account_usage_usage_trigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_fired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_record_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_usage_usage_trigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
