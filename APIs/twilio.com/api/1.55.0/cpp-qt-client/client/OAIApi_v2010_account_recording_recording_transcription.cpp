/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_recording_recording_transcription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_recording_recording_transcription::OAIApi_v2010_account_recording_recording_transcription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_recording_recording_transcription::OAIApi_v2010_account_recording_recording_transcription() {
    this->initializeModel();
}

OAIApi_v2010_account_recording_recording_transcription::~OAIApi_v2010_account_recording_recording_transcription() {}

void OAIApi_v2010_account_recording_recording_transcription::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_unit_isSet = false;
    m_price_unit_isValid = false;

    m_recording_sid_isSet = false;
    m_recording_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transcription_text_isSet = false;
    m_transcription_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIApi_v2010_account_recording_recording_transcription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_recording_recording_transcription::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_unit_isValid = ::OpenAPI::fromJsonValue(m_price_unit, json[QString("price_unit")]);
    m_price_unit_isSet = !json[QString("price_unit")].isNull() && m_price_unit_isValid;

    m_recording_sid_isValid = ::OpenAPI::fromJsonValue(m_recording_sid, json[QString("recording_sid")]);
    m_recording_sid_isSet = !json[QString("recording_sid")].isNull() && m_recording_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transcription_text_isValid = ::OpenAPI::fromJsonValue(m_transcription_text, json[QString("transcription_text")]);
    m_transcription_text_isSet = !json[QString("transcription_text")].isNull() && m_transcription_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_recording_recording_transcription::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_unit_isSet) {
        obj.insert(QString("price_unit"), ::OpenAPI::toJsonValue(m_price_unit));
    }
    if (m_recording_sid_isSet) {
        obj.insert(QString("recording_sid"), ::OpenAPI::toJsonValue(m_recording_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transcription_text_isSet) {
        obj.insert(QString("transcription_text"), ::OpenAPI::toJsonValue(m_transcription_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIApi_v2010_account_recording_recording_transcription::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_recording_recording_transcription::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getApiVersion() const {
    return m_api_version;
}
void OAIApi_v2010_account_recording_recording_transcription::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_recording_recording_transcription::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_recording_recording_transcription::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getDuration() const {
    return m_duration;
}
void OAIApi_v2010_account_recording_recording_transcription::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIApi_v2010_account_recording_recording_transcription::getPrice() const {
    return m_price;
}
void OAIApi_v2010_account_recording_recording_transcription::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_price_Set() const{
    return m_price_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getPriceUnit() const {
    return m_price_unit;
}
void OAIApi_v2010_account_recording_recording_transcription::setPriceUnit(const QString &price_unit) {
    m_price_unit = price_unit;
    m_price_unit_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_price_unit_Set() const{
    return m_price_unit_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_price_unit_Valid() const{
    return m_price_unit_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getRecordingSid() const {
    return m_recording_sid;
}
void OAIApi_v2010_account_recording_recording_transcription::setRecordingSid(const QString &recording_sid) {
    m_recording_sid = recording_sid;
    m_recording_sid_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_recording_sid_Set() const{
    return m_recording_sid_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_recording_sid_Valid() const{
    return m_recording_sid_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getSid() const {
    return m_sid;
}
void OAIApi_v2010_account_recording_recording_transcription::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIRecording_transcription_enum_status OAIApi_v2010_account_recording_recording_transcription::getStatus() const {
    return m_status;
}
void OAIApi_v2010_account_recording_recording_transcription::setStatus(const OAIRecording_transcription_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getTranscriptionText() const {
    return m_transcription_text;
}
void OAIApi_v2010_account_recording_recording_transcription::setTranscriptionText(const QString &transcription_text) {
    m_transcription_text = transcription_text;
    m_transcription_text_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_transcription_text_Set() const{
    return m_transcription_text_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_transcription_text_Valid() const{
    return m_transcription_text_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getType() const {
    return m_type;
}
void OAIApi_v2010_account_recording_recording_transcription::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIApi_v2010_account_recording_recording_transcription::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_recording_recording_transcription::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_recording_recording_transcription::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIApi_v2010_account_recording_recording_transcription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_recording_recording_transcription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
