/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401ConferenceApi_H
#define OAI_OAIApi20100401ConferenceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_conference.h"
#include "OAIConference_enum_status.h"
#include "OAIConference_enum_update_status.h"
#include "OAIListConferenceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401ConferenceApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401ConferenceApi(const int timeOut = 0);
    ~OAIApi20100401ConferenceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConference(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  date_created QDate [optional]
    * @param[in]  date_created2 QDate [optional]
    * @param[in]  date_created3 QDate [optional]
    * @param[in]  date_updated QDate [optional]
    * @param[in]  date_updated2 QDate [optional]
    * @param[in]  date_updated3 QDate [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  status OAIConference_enum_status [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConference(const QString &account_sid, const ::OpenAPI::OptionalParam<QDate> &date_created = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created3 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_updated = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_updated2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_updated3 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConference_enum_status> &status = ::OpenAPI::OptionalParam<OAIConference_enum_status>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  announce_method QString [optional]
    * @param[in]  announce_url QString [optional]
    * @param[in]  status OAIConference_enum_update_status [optional]
    */
    virtual void updateConference(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &announce_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &announce_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConference_enum_update_status> &status = ::OpenAPI::OptionalParam<OAIConference_enum_update_status>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchConferenceCallback(OAIHttpRequestWorker *worker);
    void listConferenceCallback(OAIHttpRequestWorker *worker);
    void updateConferenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchConferenceSignal(OAIApi_v2010_account_conference summary);
    void listConferenceSignal(OAIListConferenceResponse summary);
    void updateConferenceSignal(OAIApi_v2010_account_conference summary);


    void fetchConferenceSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference summary);
    void listConferenceSignalFull(OAIHttpRequestWorker *worker, OAIListConferenceResponse summary);
    void updateConferenceSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference summary);

    Q_DECL_DEPRECATED_X("Use fetchConferenceSignalError() instead")
    void fetchConferenceSignalE(OAIApi_v2010_account_conference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConferenceSignalError(OAIApi_v2010_account_conference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConferenceSignalError() instead")
    void listConferenceSignalE(OAIListConferenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConferenceSignalError(OAIListConferenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConferenceSignalError() instead")
    void updateConferenceSignalE(OAIApi_v2010_account_conference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConferenceSignalError(OAIApi_v2010_account_conference summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchConferenceSignalErrorFull() instead")
    void fetchConferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConferenceSignalErrorFull() instead")
    void listConferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConferenceSignalErrorFull() instead")
    void updateConferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
