/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401AuthRegistrationsCredentialListMappingApi_H
#define OAI_OAIApi20100401AuthRegistrationsCredentialListMappingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping.h"
#include "OAIListSipAuthRegistrationsCredentialListMappingResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401AuthRegistrationsCredentialListMappingApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401AuthRegistrationsCredentialListMappingApi(const int timeOut = 0);
    ~OAIApi20100401AuthRegistrationsCredentialListMappingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  domain_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    */
    virtual void createSipAuthRegistrationsCredentialListMapping(const QString &account_sid, const QString &domain_sid, const QString &credential_list_sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  domain_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSipAuthRegistrationsCredentialListMapping(const QString &account_sid, const QString &domain_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  domain_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSipAuthRegistrationsCredentialListMapping(const QString &account_sid, const QString &domain_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  domain_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSipAuthRegistrationsCredentialListMapping(const QString &account_sid, const QString &domain_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSipAuthRegistrationsCredentialListMappingCallback(OAIHttpRequestWorker *worker);
    void deleteSipAuthRegistrationsCredentialListMappingCallback(OAIHttpRequestWorker *worker);
    void fetchSipAuthRegistrationsCredentialListMappingCallback(OAIHttpRequestWorker *worker);
    void listSipAuthRegistrationsCredentialListMappingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSipAuthRegistrationsCredentialListMappingSignal(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary);
    void deleteSipAuthRegistrationsCredentialListMappingSignal();
    void fetchSipAuthRegistrationsCredentialListMappingSignal(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary);
    void listSipAuthRegistrationsCredentialListMappingSignal(OAIListSipAuthRegistrationsCredentialListMappingResponse summary);


    void createSipAuthRegistrationsCredentialListMappingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary);
    void deleteSipAuthRegistrationsCredentialListMappingSignalFull(OAIHttpRequestWorker *worker);
    void fetchSipAuthRegistrationsCredentialListMappingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary);
    void listSipAuthRegistrationsCredentialListMappingSignalFull(OAIHttpRequestWorker *worker, OAIListSipAuthRegistrationsCredentialListMappingResponse summary);

    Q_DECL_DEPRECATED_X("Use createSipAuthRegistrationsCredentialListMappingSignalError() instead")
    void createSipAuthRegistrationsCredentialListMappingSignalE(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipAuthRegistrationsCredentialListMappingSignalError(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipAuthRegistrationsCredentialListMappingSignalError() instead")
    void deleteSipAuthRegistrationsCredentialListMappingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipAuthRegistrationsCredentialListMappingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipAuthRegistrationsCredentialListMappingSignalError() instead")
    void fetchSipAuthRegistrationsCredentialListMappingSignalE(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipAuthRegistrationsCredentialListMappingSignalError(OAIApi_v2010_account_sip_sip_domain_sip_auth_sip_auth_registrations_sip_auth_registrations_credential_list_mapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipAuthRegistrationsCredentialListMappingSignalError() instead")
    void listSipAuthRegistrationsCredentialListMappingSignalE(OAIListSipAuthRegistrationsCredentialListMappingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipAuthRegistrationsCredentialListMappingSignalError(OAIListSipAuthRegistrationsCredentialListMappingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSipAuthRegistrationsCredentialListMappingSignalErrorFull() instead")
    void createSipAuthRegistrationsCredentialListMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipAuthRegistrationsCredentialListMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipAuthRegistrationsCredentialListMappingSignalErrorFull() instead")
    void deleteSipAuthRegistrationsCredentialListMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipAuthRegistrationsCredentialListMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipAuthRegistrationsCredentialListMappingSignalErrorFull() instead")
    void fetchSipAuthRegistrationsCredentialListMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipAuthRegistrationsCredentialListMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipAuthRegistrationsCredentialListMappingSignalErrorFull() instead")
    void listSipAuthRegistrationsCredentialListMappingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipAuthRegistrationsCredentialListMappingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
