/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401DomainApi_H
#define OAI_OAIApi20100401DomainApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_sip_sip_domain.h"
#include "OAIListSipDomainResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401DomainApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401DomainApi(const int timeOut = 0);
    ~OAIApi20100401DomainApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  byoc_trunk_sid QString [optional]
    * @param[in]  emergency_caller_sid QString [optional]
    * @param[in]  emergency_calling_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  secure bool [optional]
    * @param[in]  sip_registration bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_status_callback_method QString [optional]
    * @param[in]  voice_status_callback_url QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void createSipDomain(const QString &account_sid, const QString &domain_name, const ::OpenAPI::OptionalParam<QString> &byoc_trunk_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_caller_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &emergency_calling_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &secure = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sip_registration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSipDomain(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSipDomain(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSipDomain(const QString &account_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  byoc_trunk_sid QString [optional]
    * @param[in]  domain_name QString [optional]
    * @param[in]  emergency_caller_sid QString [optional]
    * @param[in]  emergency_calling_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  secure bool [optional]
    * @param[in]  sip_registration bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_status_callback_method QString [optional]
    * @param[in]  voice_status_callback_url QString [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void updateSipDomain(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &byoc_trunk_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_caller_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &emergency_calling_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &secure = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sip_registration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_status_callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSipDomainCallback(OAIHttpRequestWorker *worker);
    void deleteSipDomainCallback(OAIHttpRequestWorker *worker);
    void fetchSipDomainCallback(OAIHttpRequestWorker *worker);
    void listSipDomainCallback(OAIHttpRequestWorker *worker);
    void updateSipDomainCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSipDomainSignal(OAIApi_v2010_account_sip_sip_domain summary);
    void deleteSipDomainSignal();
    void fetchSipDomainSignal(OAIApi_v2010_account_sip_sip_domain summary);
    void listSipDomainSignal(OAIListSipDomainResponse summary);
    void updateSipDomainSignal(OAIApi_v2010_account_sip_sip_domain summary);


    void createSipDomainSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_domain summary);
    void deleteSipDomainSignalFull(OAIHttpRequestWorker *worker);
    void fetchSipDomainSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_domain summary);
    void listSipDomainSignalFull(OAIHttpRequestWorker *worker, OAIListSipDomainResponse summary);
    void updateSipDomainSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_domain summary);

    Q_DECL_DEPRECATED_X("Use createSipDomainSignalError() instead")
    void createSipDomainSignalE(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipDomainSignalError(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipDomainSignalError() instead")
    void deleteSipDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipDomainSignalError() instead")
    void fetchSipDomainSignalE(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipDomainSignalError(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipDomainSignalError() instead")
    void listSipDomainSignalE(OAIListSipDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipDomainSignalError(OAIListSipDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipDomainSignalError() instead")
    void updateSipDomainSignalE(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipDomainSignalError(OAIApi_v2010_account_sip_sip_domain summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSipDomainSignalErrorFull() instead")
    void createSipDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipDomainSignalErrorFull() instead")
    void deleteSipDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipDomainSignalErrorFull() instead")
    void fetchSipDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipDomainSignalErrorFull() instead")
    void listSipDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipDomainSignalErrorFull() instead")
    void updateSipDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
