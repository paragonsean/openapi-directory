/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi20100401PaymentApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIApi20100401PaymentApi::OAIApi20100401PaymentApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIApi20100401PaymentApi::~OAIApi20100401PaymentApi() {
}

void OAIApi20100401PaymentApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createPayments", serverConf);
    _serverIndices.insert("createPayments", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://api.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updatePayments", serverConf);
    _serverIndices.insert("updatePayments", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIApi20100401PaymentApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIApi20100401PaymentApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIApi20100401PaymentApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIApi20100401PaymentApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIApi20100401PaymentApi::setUsername(const QString &username) {
    _username = username;
}

void OAIApi20100401PaymentApi::setPassword(const QString &password) {
    _password = password;
}


void OAIApi20100401PaymentApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIApi20100401PaymentApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIApi20100401PaymentApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIApi20100401PaymentApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401PaymentApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIApi20100401PaymentApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIApi20100401PaymentApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIApi20100401PaymentApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIApi20100401PaymentApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIApi20100401PaymentApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIApi20100401PaymentApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIApi20100401PaymentApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIApi20100401PaymentApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIApi20100401PaymentApi::createPayments(const QString &account_sid, const QString &call_sid, const QString &idempotency_key, const QString &status_callback, const ::OpenAPI::OptionalParam<OAIPayments_enum_bank_account_type> &bank_account_type, const ::OpenAPI::OptionalParam<double> &charge_amount, const ::OpenAPI::OptionalParam<QString> &currency, const ::OpenAPI::OptionalParam<QString> &description, const ::OpenAPI::OptionalParam<QString> &input, const ::OpenAPI::OptionalParam<qint32> &min_postal_code_length, const ::OpenAPI::OptionalParam<QJsonValue> &parameter, const ::OpenAPI::OptionalParam<QString> &payment_connector, const ::OpenAPI::OptionalParam<OAIPayments_enum_payment_method> &payment_method, const ::OpenAPI::OptionalParam<bool> &postal_code, const ::OpenAPI::OptionalParam<bool> &security_code, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<OAIPayments_enum_token_type> &token_type, const ::OpenAPI::OptionalParam<QString> &valid_card_types) {
    QString fullPath = QString(_serverConfigs["createPayments"][_serverIndices.value("createPayments")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (bank_account_type.hasValue())
    {
        input.add_var("BankAccountType", ::OpenAPI::toStringValue(bank_account_type.value()));
    }
    if (charge_amount.hasValue())
    {
        input.add_var("ChargeAmount", ::OpenAPI::toStringValue(charge_amount.value()));
    }
    if (currency.hasValue())
    {
        input.add_var("Currency", ::OpenAPI::toStringValue(currency.value()));
    }
    if (description.hasValue())
    {
        input.add_var("Description", ::OpenAPI::toStringValue(description.value()));
    }
    
    {
        input.add_var("IdempotencyKey", ::OpenAPI::toStringValue(idempotency_key));
    }
    if (input.hasValue())
    {
        input.add_var("Input", ::OpenAPI::toStringValue(input.value()));
    }
    if (min_postal_code_length.hasValue())
    {
        input.add_var("MinPostalCodeLength", ::OpenAPI::toStringValue(min_postal_code_length.value()));
    }
    if (parameter.hasValue())
    {
        input.add_var("Parameter", ::OpenAPI::toStringValue(parameter.value()));
    }
    if (payment_connector.hasValue())
    {
        input.add_var("PaymentConnector", ::OpenAPI::toStringValue(payment_connector.value()));
    }
    if (payment_method.hasValue())
    {
        input.add_var("PaymentMethod", ::OpenAPI::toStringValue(payment_method.value()));
    }
    if (postal_code.hasValue())
    {
        input.add_var("PostalCode", ::OpenAPI::toStringValue(postal_code.value()));
    }
    if (security_code.hasValue())
    {
        input.add_var("SecurityCode", ::OpenAPI::toStringValue(security_code.value()));
    }
    
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback));
    }
    if (timeout.hasValue())
    {
        input.add_var("Timeout", ::OpenAPI::toStringValue(timeout.value()));
    }
    if (token_type.hasValue())
    {
        input.add_var("TokenType", ::OpenAPI::toStringValue(token_type.value()));
    }
    if (valid_card_types.hasValue())
    {
        input.add_var("ValidCardTypes", ::OpenAPI::toStringValue(valid_card_types.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401PaymentApi::createPaymentsCallback);
    connect(this, &OAIApi20100401PaymentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401PaymentApi::createPaymentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call_payments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createPaymentsSignal(output);
        Q_EMIT createPaymentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createPaymentsSignalE(output, error_type, error_str);
        Q_EMIT createPaymentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createPaymentsSignalError(output, error_type, error_str);
        Q_EMIT createPaymentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401PaymentApi::updatePayments(const QString &account_sid, const QString &call_sid, const QString &sid, const QString &idempotency_key, const QString &status_callback, const ::OpenAPI::OptionalParam<OAIPayments_enum_capture> &capture, const ::OpenAPI::OptionalParam<OAIPayments_enum_status> &status) {
    QString fullPath = QString(_serverConfigs["updatePayments"][_serverIndices.value("updatePayments")].URL()+"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString account_sidPathParam("{");
        account_sidPathParam.append("AccountSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccountSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccountSid"+pathSuffix : pathPrefix;
        fullPath.replace(account_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_sid)));
    }
    
    {
        QString call_sidPathParam("{");
        call_sidPathParam.append("CallSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "CallSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"CallSid"+pathSuffix : pathPrefix;
        fullPath.replace(call_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(call_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (capture.hasValue())
    {
        input.add_var("Capture", ::OpenAPI::toStringValue(capture.value()));
    }
    
    {
        input.add_var("IdempotencyKey", ::OpenAPI::toStringValue(idempotency_key));
    }
    if (status.hasValue())
    {
        input.add_var("Status", ::OpenAPI::toStringValue(status.value()));
    }
    
    {
        input.add_var("StatusCallback", ::OpenAPI::toStringValue(status_callback));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIApi20100401PaymentApi::updatePaymentsCallback);
    connect(this, &OAIApi20100401PaymentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIApi20100401PaymentApi::updatePaymentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApi_v2010_account_call_payments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updatePaymentsSignal(output);
        Q_EMIT updatePaymentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updatePaymentsSignalE(output, error_type, error_str);
        Q_EMIT updatePaymentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updatePaymentsSignalError(output, error_type, error_str);
        Q_EMIT updatePaymentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIApi20100401PaymentApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
