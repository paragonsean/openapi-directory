/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401RecordingApi_H
#define OAI_OAIApi20100401RecordingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_call_call_recording.h"
#include "OAIApi_v2010_account_conference_conference_recording.h"
#include "OAIApi_v2010_account_recording.h"
#include "OAICall_recording_enum_status.h"
#include "OAIConference_recording_enum_status.h"
#include "OAIListCallRecordingResponse.h"
#include "OAIListConferenceRecordingResponse.h"
#include "OAIListRecordingResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401RecordingApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401RecordingApi(const int timeOut = 0);
    ~OAIApi20100401RecordingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  recording_channels QString [optional]
    * @param[in]  recording_status_callback QString [optional]
    * @param[in]  recording_status_callback_event QList<QString> [optional]
    * @param[in]  recording_status_callback_method QString [optional]
    * @param[in]  recording_track QString [optional]
    * @param[in]  trim QString [optional]
    */
    virtual void createCallRecording(const QString &account_sid, const QString &call_sid, const ::OpenAPI::OptionalParam<QString> &recording_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recording_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_track = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteCallRecording(const QString &account_sid, const QString &call_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteConferenceRecording(const QString &account_sid, const QString &conference_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteRecording(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchCallRecording(const QString &account_sid, const QString &call_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchConferenceRecording(const QString &account_sid, const QString &conference_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  include_soft_deleted bool [optional]
    */
    virtual void fetchRecording(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &include_soft_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  date_created QDate [optional]
    * @param[in]  date_created2 QDate [optional]
    * @param[in]  date_created3 QDate [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCallRecording(const QString &account_sid, const QString &call_sid, const ::OpenAPI::OptionalParam<QDate> &date_created = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created3 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  date_created QDate [optional]
    * @param[in]  date_created2 QDate [optional]
    * @param[in]  date_created3 QDate [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listConferenceRecording(const QString &account_sid, const QString &conference_sid, const ::OpenAPI::OptionalParam<QDate> &date_created = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created2 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_created3 = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  date_created QDateTime [optional]
    * @param[in]  date_created2 QDateTime [optional]
    * @param[in]  date_created3 QDateTime [optional]
    * @param[in]  call_sid QString [optional]
    * @param[in]  conference_sid QString [optional]
    * @param[in]  include_soft_deleted bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRecording(const QString &account_sid, const ::OpenAPI::OptionalParam<QDateTime> &date_created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created2 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created3 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &call_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_soft_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  status OAICall_recording_enum_status [required]
    * @param[in]  pause_behavior QString [optional]
    */
    virtual void updateCallRecording(const QString &account_sid, const QString &call_sid, const QString &sid, const OAICall_recording_enum_status &status, const ::OpenAPI::OptionalParam<QString> &pause_behavior = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  status OAIConference_recording_enum_status [required]
    * @param[in]  pause_behavior QString [optional]
    */
    virtual void updateConferenceRecording(const QString &account_sid, const QString &conference_sid, const QString &sid, const OAIConference_recording_enum_status &status, const ::OpenAPI::OptionalParam<QString> &pause_behavior = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCallRecordingCallback(OAIHttpRequestWorker *worker);
    void deleteCallRecordingCallback(OAIHttpRequestWorker *worker);
    void deleteConferenceRecordingCallback(OAIHttpRequestWorker *worker);
    void deleteRecordingCallback(OAIHttpRequestWorker *worker);
    void fetchCallRecordingCallback(OAIHttpRequestWorker *worker);
    void fetchConferenceRecordingCallback(OAIHttpRequestWorker *worker);
    void fetchRecordingCallback(OAIHttpRequestWorker *worker);
    void listCallRecordingCallback(OAIHttpRequestWorker *worker);
    void listConferenceRecordingCallback(OAIHttpRequestWorker *worker);
    void listRecordingCallback(OAIHttpRequestWorker *worker);
    void updateCallRecordingCallback(OAIHttpRequestWorker *worker);
    void updateConferenceRecordingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCallRecordingSignal(OAIApi_v2010_account_call_call_recording summary);
    void deleteCallRecordingSignal();
    void deleteConferenceRecordingSignal();
    void deleteRecordingSignal();
    void fetchCallRecordingSignal(OAIApi_v2010_account_call_call_recording summary);
    void fetchConferenceRecordingSignal(OAIApi_v2010_account_conference_conference_recording summary);
    void fetchRecordingSignal(OAIApi_v2010_account_recording summary);
    void listCallRecordingSignal(OAIListCallRecordingResponse summary);
    void listConferenceRecordingSignal(OAIListConferenceRecordingResponse summary);
    void listRecordingSignal(OAIListRecordingResponse summary);
    void updateCallRecordingSignal(OAIApi_v2010_account_call_call_recording summary);
    void updateConferenceRecordingSignal(OAIApi_v2010_account_conference_conference_recording summary);


    void createCallRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call_call_recording summary);
    void deleteCallRecordingSignalFull(OAIHttpRequestWorker *worker);
    void deleteConferenceRecordingSignalFull(OAIHttpRequestWorker *worker);
    void deleteRecordingSignalFull(OAIHttpRequestWorker *worker);
    void fetchCallRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call_call_recording summary);
    void fetchConferenceRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference_conference_recording summary);
    void fetchRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_recording summary);
    void listCallRecordingSignalFull(OAIHttpRequestWorker *worker, OAIListCallRecordingResponse summary);
    void listConferenceRecordingSignalFull(OAIHttpRequestWorker *worker, OAIListConferenceRecordingResponse summary);
    void listRecordingSignalFull(OAIHttpRequestWorker *worker, OAIListRecordingResponse summary);
    void updateCallRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call_call_recording summary);
    void updateConferenceRecordingSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference_conference_recording summary);

    Q_DECL_DEPRECATED_X("Use createCallRecordingSignalError() instead")
    void createCallRecordingSignalE(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallRecordingSignalError(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCallRecordingSignalError() instead")
    void deleteCallRecordingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCallRecordingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConferenceRecordingSignalError() instead")
    void deleteConferenceRecordingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConferenceRecordingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalError() instead")
    void deleteRecordingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCallRecordingSignalError() instead")
    void fetchCallRecordingSignalE(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCallRecordingSignalError(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConferenceRecordingSignalError() instead")
    void fetchConferenceRecordingSignalE(OAIApi_v2010_account_conference_conference_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConferenceRecordingSignalError(OAIApi_v2010_account_conference_conference_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingSignalError() instead")
    void fetchRecordingSignalE(OAIApi_v2010_account_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingSignalError(OAIApi_v2010_account_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallRecordingSignalError() instead")
    void listCallRecordingSignalE(OAIListCallRecordingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallRecordingSignalError(OAIListCallRecordingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConferenceRecordingSignalError() instead")
    void listConferenceRecordingSignalE(OAIListConferenceRecordingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConferenceRecordingSignalError(OAIListConferenceRecordingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingSignalError() instead")
    void listRecordingSignalE(OAIListRecordingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingSignalError(OAIListRecordingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallRecordingSignalError() instead")
    void updateCallRecordingSignalE(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallRecordingSignalError(OAIApi_v2010_account_call_call_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConferenceRecordingSignalError() instead")
    void updateConferenceRecordingSignalE(OAIApi_v2010_account_conference_conference_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConferenceRecordingSignalError(OAIApi_v2010_account_conference_conference_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCallRecordingSignalErrorFull() instead")
    void createCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCallRecordingSignalErrorFull() instead")
    void deleteCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConferenceRecordingSignalErrorFull() instead")
    void deleteConferenceRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConferenceRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalErrorFull() instead")
    void deleteRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCallRecordingSignalErrorFull() instead")
    void fetchCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchConferenceRecordingSignalErrorFull() instead")
    void fetchConferenceRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchConferenceRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingSignalErrorFull() instead")
    void fetchRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallRecordingSignalErrorFull() instead")
    void listCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listConferenceRecordingSignalErrorFull() instead")
    void listConferenceRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConferenceRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingSignalErrorFull() instead")
    void listRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCallRecordingSignalErrorFull() instead")
    void updateCallRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCallRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConferenceRecordingSignalErrorFull() instead")
    void updateConferenceRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConferenceRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
