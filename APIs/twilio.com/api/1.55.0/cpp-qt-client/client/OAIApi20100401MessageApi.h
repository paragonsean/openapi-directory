/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401MessageApi_H
#define OAI_OAIApi20100401MessageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_message.h"
#include "OAIListMessageResponse.h"
#include "OAIMessage_enum_address_retention.h"
#include "OAIMessage_enum_content_retention.h"
#include "OAIMessage_enum_risk_check.h"
#include "OAIMessage_enum_schedule_type.h"
#include "OAIMessage_enum_update_status.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401MessageApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401MessageApi(const int timeOut = 0);
    ~OAIApi20100401MessageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  to QString [required]
    * @param[in]  address_retention OAIMessage_enum_address_retention [optional]
    * @param[in]  application_sid QString [optional]
    * @param[in]  attempt qint32 [optional]
    * @param[in]  body QString [optional]
    * @param[in]  content_retention OAIMessage_enum_content_retention [optional]
    * @param[in]  content_sid QString [optional]
    * @param[in]  content_variables QString [optional]
    * @param[in]  force_delivery bool [optional]
    * @param[in]  from QString [optional]
    * @param[in]  max_price double [optional]
    * @param[in]  media_url QList<QString> [optional]
    * @param[in]  messaging_service_sid QString [optional]
    * @param[in]  persistent_action QList<QString> [optional]
    * @param[in]  provide_feedback bool [optional]
    * @param[in]  risk_check OAIMessage_enum_risk_check [optional]
    * @param[in]  schedule_type OAIMessage_enum_schedule_type [optional]
    * @param[in]  send_as_mms bool [optional]
    * @param[in]  send_at QDateTime [optional]
    * @param[in]  shorten_urls bool [optional]
    * @param[in]  smart_encoded bool [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  validity_period qint32 [optional]
    */
    virtual void createMessage(const QString &account_sid, const QString &to, const ::OpenAPI::OptionalParam<OAIMessage_enum_address_retention> &address_retention = ::OpenAPI::OptionalParam<OAIMessage_enum_address_retention>(), const ::OpenAPI::OptionalParam<QString> &application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &attempt = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessage_enum_content_retention> &content_retention = ::OpenAPI::OptionalParam<OAIMessage_enum_content_retention>(), const ::OpenAPI::OptionalParam<QString> &content_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_variables = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force_delivery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &max_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<QString>> &media_url = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &messaging_service_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &persistent_action = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &provide_feedback = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIMessage_enum_risk_check> &risk_check = ::OpenAPI::OptionalParam<OAIMessage_enum_risk_check>(), const ::OpenAPI::OptionalParam<OAIMessage_enum_schedule_type> &schedule_type = ::OpenAPI::OptionalParam<OAIMessage_enum_schedule_type>(), const ::OpenAPI::OptionalParam<bool> &send_as_mms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &send_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &shorten_urls = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &smart_encoded = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &validity_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteMessage(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchMessage(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  to QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  date_sent QDateTime [optional]
    * @param[in]  date_sent2 QDateTime [optional]
    * @param[in]  date_sent3 QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listMessage(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_sent = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_sent2 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_sent3 = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  body QString [optional]
    * @param[in]  status OAIMessage_enum_update_status [optional]
    */
    virtual void updateMessage(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessage_enum_update_status> &status = ::OpenAPI::OptionalParam<OAIMessage_enum_update_status>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMessageCallback(OAIHttpRequestWorker *worker);
    void deleteMessageCallback(OAIHttpRequestWorker *worker);
    void fetchMessageCallback(OAIHttpRequestWorker *worker);
    void listMessageCallback(OAIHttpRequestWorker *worker);
    void updateMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMessageSignal(OAIApi_v2010_account_message summary);
    void deleteMessageSignal();
    void fetchMessageSignal(OAIApi_v2010_account_message summary);
    void listMessageSignal(OAIListMessageResponse summary);
    void updateMessageSignal(OAIApi_v2010_account_message summary);


    void createMessageSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_message summary);
    void deleteMessageSignalFull(OAIHttpRequestWorker *worker);
    void fetchMessageSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_message summary);
    void listMessageSignalFull(OAIHttpRequestWorker *worker, OAIListMessageResponse summary);
    void updateMessageSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_message summary);

    Q_DECL_DEPRECATED_X("Use createMessageSignalError() instead")
    void createMessageSignalE(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMessageSignalError(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessageSignalError() instead")
    void deleteMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchMessageSignalError() instead")
    void fetchMessageSignalE(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMessageSignalError(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMessageSignalError() instead")
    void listMessageSignalE(OAIListMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMessageSignalError(OAIListMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessageSignalError() instead")
    void updateMessageSignalE(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalError(OAIApi_v2010_account_message summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMessageSignalErrorFull() instead")
    void createMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessageSignalErrorFull() instead")
    void deleteMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchMessageSignalErrorFull() instead")
    void fetchMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMessageSignalErrorFull() instead")
    void listMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessageSignalErrorFull() instead")
    void updateMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
