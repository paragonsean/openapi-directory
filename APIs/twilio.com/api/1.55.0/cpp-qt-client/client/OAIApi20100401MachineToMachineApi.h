/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401MachineToMachineApi_H
#define OAI_OAIApi20100401MachineToMachineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListAvailablePhoneNumberMachineToMachineResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401MachineToMachineApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401MachineToMachineApi(const int timeOut = 0);
    ~OAIApi20100401MachineToMachineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  area_code qint32 [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  sms_enabled bool [optional]
    * @param[in]  mms_enabled bool [optional]
    * @param[in]  voice_enabled bool [optional]
    * @param[in]  exclude_all_address_required bool [optional]
    * @param[in]  exclude_local_address_required bool [optional]
    * @param[in]  exclude_foreign_address_required bool [optional]
    * @param[in]  beta bool [optional]
    * @param[in]  near_number QString [optional]
    * @param[in]  near_lat_long QString [optional]
    * @param[in]  distance qint32 [optional]
    * @param[in]  in_postal_code QString [optional]
    * @param[in]  in_region QString [optional]
    * @param[in]  in_rate_center QString [optional]
    * @param[in]  in_lata QString [optional]
    * @param[in]  in_locality QString [optional]
    * @param[in]  fax_enabled bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listAvailablePhoneNumberMachineToMachine(const QString &account_sid, const QString &country_code, const ::OpenAPI::OptionalParam<qint32> &area_code = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sms_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mms_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &voice_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_all_address_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_local_address_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_foreign_address_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &beta = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &near_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &near_lat_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &in_postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &in_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &in_rate_center = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &in_lata = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &in_locality = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &fax_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listAvailablePhoneNumberMachineToMachineCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listAvailablePhoneNumberMachineToMachineSignal(OAIListAvailablePhoneNumberMachineToMachineResponse summary);


    void listAvailablePhoneNumberMachineToMachineSignalFull(OAIHttpRequestWorker *worker, OAIListAvailablePhoneNumberMachineToMachineResponse summary);

    Q_DECL_DEPRECATED_X("Use listAvailablePhoneNumberMachineToMachineSignalError() instead")
    void listAvailablePhoneNumberMachineToMachineSignalE(OAIListAvailablePhoneNumberMachineToMachineResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAvailablePhoneNumberMachineToMachineSignalError(OAIListAvailablePhoneNumberMachineToMachineResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listAvailablePhoneNumberMachineToMachineSignalErrorFull() instead")
    void listAvailablePhoneNumberMachineToMachineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAvailablePhoneNumberMachineToMachineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
