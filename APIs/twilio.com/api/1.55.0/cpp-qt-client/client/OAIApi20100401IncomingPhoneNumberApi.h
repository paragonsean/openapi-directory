/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401IncomingPhoneNumberApi_H
#define OAI_OAIApi20100401IncomingPhoneNumberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_incoming_phone_number.h"
#include "OAIIncoming_phone_number_enum_emergency_status.h"
#include "OAIIncoming_phone_number_enum_voice_receive_mode.h"
#include "OAIListIncomingPhoneNumberResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401IncomingPhoneNumberApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401IncomingPhoneNumberApi(const int timeOut = 0);
    ~OAIApi20100401IncomingPhoneNumberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  address_sid QString [optional]
    * @param[in]  api_version QString [optional]
    * @param[in]  area_code QString [optional]
    * @param[in]  bundle_sid QString [optional]
    * @param[in]  emergency_address_sid QString [optional]
    * @param[in]  emergency_status OAIIncoming_phone_number_enum_emergency_status [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  identity_sid QString [optional]
    * @param[in]  phone_number QString [optional]
    * @param[in]  sms_application_sid QString [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  trunk_sid QString [optional]
    * @param[in]  voice_application_sid QString [optional]
    * @param[in]  voice_caller_id_lookup bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_receive_mode OAIIncoming_phone_number_enum_voice_receive_mode [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void createIncomingPhoneNumber(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &address_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &area_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bundle_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_emergency_status> &emergency_status = ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_emergency_status>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trunk_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &voice_caller_id_lookup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_voice_receive_mode> &voice_receive_mode = ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_voice_receive_mode>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteIncomingPhoneNumber(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchIncomingPhoneNumber(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  beta bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  phone_number QString [optional]
    * @param[in]  origin QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listIncomingPhoneNumber(const QString &account_sid, const ::OpenAPI::OptionalParam<bool> &beta = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &origin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  account_sid2 QString [optional]
    * @param[in]  address_sid QString [optional]
    * @param[in]  api_version QString [optional]
    * @param[in]  bundle_sid QString [optional]
    * @param[in]  emergency_address_sid QString [optional]
    * @param[in]  emergency_status OAIIncoming_phone_number_enum_emergency_status [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  identity_sid QString [optional]
    * @param[in]  sms_application_sid QString [optional]
    * @param[in]  sms_fallback_method QString [optional]
    * @param[in]  sms_fallback_url QString [optional]
    * @param[in]  sms_method QString [optional]
    * @param[in]  sms_url QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  trunk_sid QString [optional]
    * @param[in]  voice_application_sid QString [optional]
    * @param[in]  voice_caller_id_lookup bool [optional]
    * @param[in]  voice_fallback_method QString [optional]
    * @param[in]  voice_fallback_url QString [optional]
    * @param[in]  voice_method QString [optional]
    * @param[in]  voice_receive_mode OAIIncoming_phone_number_enum_voice_receive_mode [optional]
    * @param[in]  voice_url QString [optional]
    */
    virtual void updateIncomingPhoneNumber(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &account_sid2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bundle_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emergency_address_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_emergency_status> &emergency_status = ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_emergency_status>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sms_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trunk_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_application_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &voice_caller_id_lookup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_fallback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voice_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_voice_receive_mode> &voice_receive_mode = ::OpenAPI::OptionalParam<OAIIncoming_phone_number_enum_voice_receive_mode>(), const ::OpenAPI::OptionalParam<QString> &voice_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIncomingPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void deleteIncomingPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void fetchIncomingPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void listIncomingPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void updateIncomingPhoneNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIncomingPhoneNumberSignal(OAIApi_v2010_account_incoming_phone_number summary);
    void deleteIncomingPhoneNumberSignal();
    void fetchIncomingPhoneNumberSignal(OAIApi_v2010_account_incoming_phone_number summary);
    void listIncomingPhoneNumberSignal(OAIListIncomingPhoneNumberResponse summary);
    void updateIncomingPhoneNumberSignal(OAIApi_v2010_account_incoming_phone_number summary);


    void createIncomingPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_incoming_phone_number summary);
    void deleteIncomingPhoneNumberSignalFull(OAIHttpRequestWorker *worker);
    void fetchIncomingPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_incoming_phone_number summary);
    void listIncomingPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIListIncomingPhoneNumberResponse summary);
    void updateIncomingPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_incoming_phone_number summary);

    Q_DECL_DEPRECATED_X("Use createIncomingPhoneNumberSignalError() instead")
    void createIncomingPhoneNumberSignalE(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIncomingPhoneNumberSignalError(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIncomingPhoneNumberSignalError() instead")
    void deleteIncomingPhoneNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIncomingPhoneNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchIncomingPhoneNumberSignalError() instead")
    void fetchIncomingPhoneNumberSignalE(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchIncomingPhoneNumberSignalError(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIncomingPhoneNumberSignalError() instead")
    void listIncomingPhoneNumberSignalE(OAIListIncomingPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIncomingPhoneNumberSignalError(OAIListIncomingPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIncomingPhoneNumberSignalError() instead")
    void updateIncomingPhoneNumberSignalE(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIncomingPhoneNumberSignalError(OAIApi_v2010_account_incoming_phone_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIncomingPhoneNumberSignalErrorFull() instead")
    void createIncomingPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIncomingPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIncomingPhoneNumberSignalErrorFull() instead")
    void deleteIncomingPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIncomingPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchIncomingPhoneNumberSignalErrorFull() instead")
    void fetchIncomingPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchIncomingPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIncomingPhoneNumberSignalErrorFull() instead")
    void listIncomingPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIncomingPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIncomingPhoneNumberSignalErrorFull() instead")
    void updateIncomingPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIncomingPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
