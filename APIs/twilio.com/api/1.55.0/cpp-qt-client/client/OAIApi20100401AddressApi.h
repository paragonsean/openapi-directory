/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401AddressApi_H
#define OAI_OAIApi20100401AddressApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_address.h"
#include "OAIListAddressResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401AddressApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401AddressApi(const int timeOut = 0);
    ~OAIApi20100401AddressApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  city QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  iso_country QString [required]
    * @param[in]  postal_code QString [required]
    * @param[in]  region QString [required]
    * @param[in]  street QString [required]
    * @param[in]  auto_correct_address bool [optional]
    * @param[in]  emergency_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  street_secondary QString [optional]
    */
    virtual void createAddress(const QString &account_sid, const QString &city, const QString &customer_name, const QString &iso_country, const QString &postal_code, const QString &region, const QString &street, const ::OpenAPI::OptionalParam<bool> &auto_correct_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &emergency_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_secondary = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteAddress(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchAddress(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  customer_name QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  iso_country QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listAddress(const QString &account_sid, const ::OpenAPI::OptionalParam<QString> &customer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iso_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  auto_correct_address bool [optional]
    * @param[in]  city QString [optional]
    * @param[in]  customer_name QString [optional]
    * @param[in]  emergency_enabled bool [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  street QString [optional]
    * @param[in]  street_secondary QString [optional]
    */
    virtual void updateAddress(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<bool> &auto_correct_address = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &emergency_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_secondary = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAddressCallback(OAIHttpRequestWorker *worker);
    void deleteAddressCallback(OAIHttpRequestWorker *worker);
    void fetchAddressCallback(OAIHttpRequestWorker *worker);
    void listAddressCallback(OAIHttpRequestWorker *worker);
    void updateAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAddressSignal(OAIApi_v2010_account_address summary);
    void deleteAddressSignal();
    void fetchAddressSignal(OAIApi_v2010_account_address summary);
    void listAddressSignal(OAIListAddressResponse summary);
    void updateAddressSignal(OAIApi_v2010_account_address summary);


    void createAddressSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_address summary);
    void deleteAddressSignalFull(OAIHttpRequestWorker *worker);
    void fetchAddressSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_address summary);
    void listAddressSignalFull(OAIHttpRequestWorker *worker, OAIListAddressResponse summary);
    void updateAddressSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_address summary);

    Q_DECL_DEPRECATED_X("Use createAddressSignalError() instead")
    void createAddressSignalE(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAddressSignalError(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAddressSignalError() instead")
    void deleteAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAddressSignalError() instead")
    void fetchAddressSignalE(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAddressSignalError(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddressSignalError() instead")
    void listAddressSignalE(OAIListAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddressSignalError(OAIListAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAddressSignalError() instead")
    void updateAddressSignalE(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAddressSignalError(OAIApi_v2010_account_address summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAddressSignalErrorFull() instead")
    void createAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAddressSignalErrorFull() instead")
    void deleteAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAddressSignalErrorFull() instead")
    void fetchAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddressSignalErrorFull() instead")
    void listAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAddressSignalErrorFull() instead")
    void updateAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
