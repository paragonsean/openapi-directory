/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401ParticipantApi_H
#define OAI_OAIApi20100401ParticipantApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_conference_participant.h"
#include "OAIListParticipantResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401ParticipantApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401ParticipantApi(const int timeOut = 0);
    ~OAIApi20100401ParticipantApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  amd_status_callback QString [optional]
    * @param[in]  amd_status_callback_method QString [optional]
    * @param[in]  beep QString [optional]
    * @param[in]  byoc QString [optional]
    * @param[in]  call_reason QString [optional]
    * @param[in]  call_sid_to_coach QString [optional]
    * @param[in]  call_token QString [optional]
    * @param[in]  caller_id QString [optional]
    * @param[in]  coaching bool [optional]
    * @param[in]  conference_record QString [optional]
    * @param[in]  conference_recording_status_callback QString [optional]
    * @param[in]  conference_recording_status_callback_event QList<QString> [optional]
    * @param[in]  conference_recording_status_callback_method QString [optional]
    * @param[in]  conference_status_callback QString [optional]
    * @param[in]  conference_status_callback_event QList<QString> [optional]
    * @param[in]  conference_status_callback_method QString [optional]
    * @param[in]  conference_trim QString [optional]
    * @param[in]  early_media bool [optional]
    * @param[in]  end_conference_on_exit bool [optional]
    * @param[in]  jitter_buffer_size QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  machine_detection QString [optional]
    * @param[in]  machine_detection_silence_timeout qint32 [optional]
    * @param[in]  machine_detection_speech_end_threshold qint32 [optional]
    * @param[in]  machine_detection_speech_threshold qint32 [optional]
    * @param[in]  machine_detection_timeout qint32 [optional]
    * @param[in]  max_participants qint32 [optional]
    * @param[in]  muted bool [optional]
    * @param[in]  record bool [optional]
    * @param[in]  recording_channels QString [optional]
    * @param[in]  recording_status_callback QString [optional]
    * @param[in]  recording_status_callback_event QList<QString> [optional]
    * @param[in]  recording_status_callback_method QString [optional]
    * @param[in]  recording_track QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  sip_auth_password QString [optional]
    * @param[in]  sip_auth_username QString [optional]
    * @param[in]  start_conference_on_enter bool [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_event QList<QString> [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  time_limit qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  trim QString [optional]
    * @param[in]  wait_method QString [optional]
    * @param[in]  wait_url QString [optional]
    */
    virtual void createParticipant(const QString &account_sid, const QString &conference_sid, const QString &from, const QString &to, const ::OpenAPI::OptionalParam<QString> &amd_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amd_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &beep = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &byoc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_sid_to_coach = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &caller_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &coaching = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &conference_record = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conference_recording_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &conference_recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conference_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &conference_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference_trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &early_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jitter_buffer_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &machine_detection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_silence_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_end_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_participants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &record = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recording_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recording_status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &recording_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recording_track = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_auth_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &start_conference_on_enter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_callback_event = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &trim = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  call_sid QString [required]
    */
    virtual void deleteParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  call_sid QString [required]
    */
    virtual void fetchParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  muted bool [optional]
    * @param[in]  hold bool [optional]
    * @param[in]  coaching bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listParticipant(const QString &account_sid, const QString &conference_sid, const ::OpenAPI::OptionalParam<bool> &muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hold = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &coaching = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  conference_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  announce_method QString [optional]
    * @param[in]  announce_url QString [optional]
    * @param[in]  beep_on_exit bool [optional]
    * @param[in]  call_sid_to_coach QString [optional]
    * @param[in]  coaching bool [optional]
    * @param[in]  end_conference_on_exit bool [optional]
    * @param[in]  hold bool [optional]
    * @param[in]  hold_method QString [optional]
    * @param[in]  hold_url QString [optional]
    * @param[in]  muted bool [optional]
    * @param[in]  wait_method QString [optional]
    * @param[in]  wait_url QString [optional]
    */
    virtual void updateParticipant(const QString &account_sid, const QString &conference_sid, const QString &call_sid, const ::OpenAPI::OptionalParam<QString> &announce_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &announce_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &beep_on_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &call_sid_to_coach = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &coaching = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &end_conference_on_exit = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hold = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &hold_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hold_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &muted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &wait_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wait_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createParticipantCallback(OAIHttpRequestWorker *worker);
    void deleteParticipantCallback(OAIHttpRequestWorker *worker);
    void fetchParticipantCallback(OAIHttpRequestWorker *worker);
    void listParticipantCallback(OAIHttpRequestWorker *worker);
    void updateParticipantCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createParticipantSignal(OAIApi_v2010_account_conference_participant summary);
    void deleteParticipantSignal();
    void fetchParticipantSignal(OAIApi_v2010_account_conference_participant summary);
    void listParticipantSignal(OAIListParticipantResponse summary);
    void updateParticipantSignal(OAIApi_v2010_account_conference_participant summary);


    void createParticipantSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference_participant summary);
    void deleteParticipantSignalFull(OAIHttpRequestWorker *worker);
    void fetchParticipantSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference_participant summary);
    void listParticipantSignalFull(OAIHttpRequestWorker *worker, OAIListParticipantResponse summary);
    void updateParticipantSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_conference_participant summary);

    Q_DECL_DEPRECATED_X("Use createParticipantSignalError() instead")
    void createParticipantSignalE(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createParticipantSignalError(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteParticipantSignalError() instead")
    void deleteParticipantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteParticipantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchParticipantSignalError() instead")
    void fetchParticipantSignalE(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchParticipantSignalError(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listParticipantSignalError() instead")
    void listParticipantSignalE(OAIListParticipantResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listParticipantSignalError(OAIListParticipantResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateParticipantSignalError() instead")
    void updateParticipantSignalE(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateParticipantSignalError(OAIApi_v2010_account_conference_participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createParticipantSignalErrorFull() instead")
    void createParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteParticipantSignalErrorFull() instead")
    void deleteParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchParticipantSignalErrorFull() instead")
    void fetchParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listParticipantSignalErrorFull() instead")
    void listParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateParticipantSignalErrorFull() instead")
    void updateParticipantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateParticipantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
