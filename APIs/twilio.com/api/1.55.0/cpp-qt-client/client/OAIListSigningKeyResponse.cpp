/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSigningKeyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSigningKeyResponse::OAIListSigningKeyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSigningKeyResponse::OAIListSigningKeyResponse() {
    this->initializeModel();
}

OAIListSigningKeyResponse::~OAIListSigningKeyResponse() {}

void OAIListSigningKeyResponse::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_first_page_uri_isSet = false;
    m_first_page_uri_isValid = false;

    m_next_page_uri_isSet = false;
    m_next_page_uri_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_previous_page_uri_isSet = false;
    m_previous_page_uri_isValid = false;

    m_signing_keys_isSet = false;
    m_signing_keys_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIListSigningKeyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSigningKeyResponse::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_first_page_uri_isValid = ::OpenAPI::fromJsonValue(m_first_page_uri, json[QString("first_page_uri")]);
    m_first_page_uri_isSet = !json[QString("first_page_uri")].isNull() && m_first_page_uri_isValid;

    m_next_page_uri_isValid = ::OpenAPI::fromJsonValue(m_next_page_uri, json[QString("next_page_uri")]);
    m_next_page_uri_isSet = !json[QString("next_page_uri")].isNull() && m_next_page_uri_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_previous_page_uri_isValid = ::OpenAPI::fromJsonValue(m_previous_page_uri, json[QString("previous_page_uri")]);
    m_previous_page_uri_isSet = !json[QString("previous_page_uri")].isNull() && m_previous_page_uri_isValid;

    m_signing_keys_isValid = ::OpenAPI::fromJsonValue(m_signing_keys, json[QString("signing_keys")]);
    m_signing_keys_isSet = !json[QString("signing_keys")].isNull() && m_signing_keys_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIListSigningKeyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSigningKeyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_first_page_uri_isSet) {
        obj.insert(QString("first_page_uri"), ::OpenAPI::toJsonValue(m_first_page_uri));
    }
    if (m_next_page_uri_isSet) {
        obj.insert(QString("next_page_uri"), ::OpenAPI::toJsonValue(m_next_page_uri));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_previous_page_uri_isSet) {
        obj.insert(QString("previous_page_uri"), ::OpenAPI::toJsonValue(m_previous_page_uri));
    }
    if (m_signing_keys.size() > 0) {
        obj.insert(QString("signing_keys"), ::OpenAPI::toJsonValue(m_signing_keys));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

qint32 OAIListSigningKeyResponse::getEnd() const {
    return m_end;
}
void OAIListSigningKeyResponse::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIListSigningKeyResponse::is_end_Set() const{
    return m_end_isSet;
}

bool OAIListSigningKeyResponse::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIListSigningKeyResponse::getFirstPageUri() const {
    return m_first_page_uri;
}
void OAIListSigningKeyResponse::setFirstPageUri(const QString &first_page_uri) {
    m_first_page_uri = first_page_uri;
    m_first_page_uri_isSet = true;
}

bool OAIListSigningKeyResponse::is_first_page_uri_Set() const{
    return m_first_page_uri_isSet;
}

bool OAIListSigningKeyResponse::is_first_page_uri_Valid() const{
    return m_first_page_uri_isValid;
}

QString OAIListSigningKeyResponse::getNextPageUri() const {
    return m_next_page_uri;
}
void OAIListSigningKeyResponse::setNextPageUri(const QString &next_page_uri) {
    m_next_page_uri = next_page_uri;
    m_next_page_uri_isSet = true;
}

bool OAIListSigningKeyResponse::is_next_page_uri_Set() const{
    return m_next_page_uri_isSet;
}

bool OAIListSigningKeyResponse::is_next_page_uri_Valid() const{
    return m_next_page_uri_isValid;
}

qint32 OAIListSigningKeyResponse::getPage() const {
    return m_page;
}
void OAIListSigningKeyResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIListSigningKeyResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAIListSigningKeyResponse::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIListSigningKeyResponse::getPageSize() const {
    return m_page_size;
}
void OAIListSigningKeyResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListSigningKeyResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListSigningKeyResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListSigningKeyResponse::getPreviousPageUri() const {
    return m_previous_page_uri;
}
void OAIListSigningKeyResponse::setPreviousPageUri(const QString &previous_page_uri) {
    m_previous_page_uri = previous_page_uri;
    m_previous_page_uri_isSet = true;
}

bool OAIListSigningKeyResponse::is_previous_page_uri_Set() const{
    return m_previous_page_uri_isSet;
}

bool OAIListSigningKeyResponse::is_previous_page_uri_Valid() const{
    return m_previous_page_uri_isValid;
}

QList<OAIApi_v2010_account_signing_key> OAIListSigningKeyResponse::getSigningKeys() const {
    return m_signing_keys;
}
void OAIListSigningKeyResponse::setSigningKeys(const QList<OAIApi_v2010_account_signing_key> &signing_keys) {
    m_signing_keys = signing_keys;
    m_signing_keys_isSet = true;
}

bool OAIListSigningKeyResponse::is_signing_keys_Set() const{
    return m_signing_keys_isSet;
}

bool OAIListSigningKeyResponse::is_signing_keys_Valid() const{
    return m_signing_keys_isValid;
}

qint32 OAIListSigningKeyResponse::getStart() const {
    return m_start;
}
void OAIListSigningKeyResponse::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIListSigningKeyResponse::is_start_Set() const{
    return m_start_isSet;
}

bool OAIListSigningKeyResponse::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIListSigningKeyResponse::getUri() const {
    return m_uri;
}
void OAIListSigningKeyResponse::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIListSigningKeyResponse::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIListSigningKeyResponse::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIListSigningKeyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSigningKeyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
