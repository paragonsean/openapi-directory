/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference_enum_reason_conference_ended.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference_enum_reason_conference_ended::OAIConference_enum_reason_conference_ended(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference_enum_reason_conference_ended::OAIConference_enum_reason_conference_ended() {
    this->initializeModel();
}

OAIConference_enum_reason_conference_ended::~OAIConference_enum_reason_conference_ended() {}

void OAIConference_enum_reason_conference_ended::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIConference_enum_reason_conference_ended::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIConference_enum_reason_conference_ended::fromJson(QString jsonString) {
    
    if ( jsonString.compare("conference-ended-via-api", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_reason_conference_ended::CONFERENCE_ENDED_VIA_API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("participant-with-end-conference-on-exit-left", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_reason_conference_ended::PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("participant-with-end-conference-on-exit-kicked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_reason_conference_ended::PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_KICKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("last-participant-kicked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_reason_conference_ended::LAST_PARTICIPANT_KICKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("last-participant-left", Qt::CaseInsensitive) == 0) {
        m_value = eOAIConference_enum_reason_conference_ended::LAST_PARTICIPANT_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIConference_enum_reason_conference_ended::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIConference_enum_reason_conference_ended::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIConference_enum_reason_conference_ended::CONFERENCE_ENDED_VIA_API:
            val = "conference-ended-via-api";
            break;
        case eOAIConference_enum_reason_conference_ended::PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_LEFT:
            val = "participant-with-end-conference-on-exit-left";
            break;
        case eOAIConference_enum_reason_conference_ended::PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_KICKED:
            val = "participant-with-end-conference-on-exit-kicked";
            break;
        case eOAIConference_enum_reason_conference_ended::LAST_PARTICIPANT_KICKED:
            val = "last-participant-kicked";
            break;
        case eOAIConference_enum_reason_conference_ended::LAST_PARTICIPANT_LEFT:
            val = "last-participant-left";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIConference_enum_reason_conference_ended::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIConference_enum_reason_conference_ended::eOAIConference_enum_reason_conference_ended OAIConference_enum_reason_conference_ended::getValue() const {
    return m_value;
}

void OAIConference_enum_reason_conference_ended::setValue(const OAIConference_enum_reason_conference_ended::eOAIConference_enum_reason_conference_ended& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIConference_enum_reason_conference_ended::isSet() const {
    
    return m_value_isSet;
}

bool OAIConference_enum_reason_conference_ended::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
