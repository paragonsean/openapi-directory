/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401CredentialApi_H
#define OAI_OAIApi20100401CredentialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_sip_sip_credential_list_sip_credential.h"
#include "OAIListSipCredentialResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401CredentialApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401CredentialApi(const int timeOut = 0);
    ~OAIApi20100401CredentialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    * @param[in]  password QString [required]
    * @param[in]  username QString [required]
    */
    virtual void createSipCredential(const QString &account_sid, const QString &credential_list_sid, const QString &password, const QString &username);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteSipCredential(const QString &account_sid, const QString &credential_list_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchSipCredential(const QString &account_sid, const QString &credential_list_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSipCredential(const QString &account_sid, const QString &credential_list_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  credential_list_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  password QString [optional]
    */
    virtual void updateSipCredential(const QString &account_sid, const QString &credential_list_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSipCredentialCallback(OAIHttpRequestWorker *worker);
    void deleteSipCredentialCallback(OAIHttpRequestWorker *worker);
    void fetchSipCredentialCallback(OAIHttpRequestWorker *worker);
    void listSipCredentialCallback(OAIHttpRequestWorker *worker);
    void updateSipCredentialCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSipCredentialSignal(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);
    void deleteSipCredentialSignal();
    void fetchSipCredentialSignal(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);
    void listSipCredentialSignal(OAIListSipCredentialResponse summary);
    void updateSipCredentialSignal(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);


    void createSipCredentialSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);
    void deleteSipCredentialSignalFull(OAIHttpRequestWorker *worker);
    void fetchSipCredentialSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);
    void listSipCredentialSignalFull(OAIHttpRequestWorker *worker, OAIListSipCredentialResponse summary);
    void updateSipCredentialSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary);

    Q_DECL_DEPRECATED_X("Use createSipCredentialSignalError() instead")
    void createSipCredentialSignalE(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipCredentialSignalError(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipCredentialSignalError() instead")
    void deleteSipCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipCredentialSignalError() instead")
    void fetchSipCredentialSignalE(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipCredentialSignalError(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipCredentialSignalError() instead")
    void listSipCredentialSignalE(OAIListSipCredentialResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipCredentialSignalError(OAIListSipCredentialResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipCredentialSignalError() instead")
    void updateSipCredentialSignalE(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipCredentialSignalError(OAIApi_v2010_account_sip_sip_credential_list_sip_credential summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSipCredentialSignalErrorFull() instead")
    void createSipCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipCredentialSignalErrorFull() instead")
    void deleteSipCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSipCredentialSignalErrorFull() instead")
    void fetchSipCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSipCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipCredentialSignalErrorFull() instead")
    void listSipCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipCredentialSignalErrorFull() instead")
    void updateSipCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
