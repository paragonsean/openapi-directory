/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUsageTriggerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUsageTriggerResponse::OAIListUsageTriggerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUsageTriggerResponse::OAIListUsageTriggerResponse() {
    this->initializeModel();
}

OAIListUsageTriggerResponse::~OAIListUsageTriggerResponse() {}

void OAIListUsageTriggerResponse::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_first_page_uri_isSet = false;
    m_first_page_uri_isValid = false;

    m_next_page_uri_isSet = false;
    m_next_page_uri_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_previous_page_uri_isSet = false;
    m_previous_page_uri_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_usage_triggers_isSet = false;
    m_usage_triggers_isValid = false;
}

void OAIListUsageTriggerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUsageTriggerResponse::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_first_page_uri_isValid = ::OpenAPI::fromJsonValue(m_first_page_uri, json[QString("first_page_uri")]);
    m_first_page_uri_isSet = !json[QString("first_page_uri")].isNull() && m_first_page_uri_isValid;

    m_next_page_uri_isValid = ::OpenAPI::fromJsonValue(m_next_page_uri, json[QString("next_page_uri")]);
    m_next_page_uri_isSet = !json[QString("next_page_uri")].isNull() && m_next_page_uri_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_previous_page_uri_isValid = ::OpenAPI::fromJsonValue(m_previous_page_uri, json[QString("previous_page_uri")]);
    m_previous_page_uri_isSet = !json[QString("previous_page_uri")].isNull() && m_previous_page_uri_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_usage_triggers_isValid = ::OpenAPI::fromJsonValue(m_usage_triggers, json[QString("usage_triggers")]);
    m_usage_triggers_isSet = !json[QString("usage_triggers")].isNull() && m_usage_triggers_isValid;
}

QString OAIListUsageTriggerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUsageTriggerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_first_page_uri_isSet) {
        obj.insert(QString("first_page_uri"), ::OpenAPI::toJsonValue(m_first_page_uri));
    }
    if (m_next_page_uri_isSet) {
        obj.insert(QString("next_page_uri"), ::OpenAPI::toJsonValue(m_next_page_uri));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_previous_page_uri_isSet) {
        obj.insert(QString("previous_page_uri"), ::OpenAPI::toJsonValue(m_previous_page_uri));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_usage_triggers.size() > 0) {
        obj.insert(QString("usage_triggers"), ::OpenAPI::toJsonValue(m_usage_triggers));
    }
    return obj;
}

qint32 OAIListUsageTriggerResponse::getEnd() const {
    return m_end;
}
void OAIListUsageTriggerResponse::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIListUsageTriggerResponse::is_end_Set() const{
    return m_end_isSet;
}

bool OAIListUsageTriggerResponse::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIListUsageTriggerResponse::getFirstPageUri() const {
    return m_first_page_uri;
}
void OAIListUsageTriggerResponse::setFirstPageUri(const QString &first_page_uri) {
    m_first_page_uri = first_page_uri;
    m_first_page_uri_isSet = true;
}

bool OAIListUsageTriggerResponse::is_first_page_uri_Set() const{
    return m_first_page_uri_isSet;
}

bool OAIListUsageTriggerResponse::is_first_page_uri_Valid() const{
    return m_first_page_uri_isValid;
}

QString OAIListUsageTriggerResponse::getNextPageUri() const {
    return m_next_page_uri;
}
void OAIListUsageTriggerResponse::setNextPageUri(const QString &next_page_uri) {
    m_next_page_uri = next_page_uri;
    m_next_page_uri_isSet = true;
}

bool OAIListUsageTriggerResponse::is_next_page_uri_Set() const{
    return m_next_page_uri_isSet;
}

bool OAIListUsageTriggerResponse::is_next_page_uri_Valid() const{
    return m_next_page_uri_isValid;
}

qint32 OAIListUsageTriggerResponse::getPage() const {
    return m_page;
}
void OAIListUsageTriggerResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIListUsageTriggerResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAIListUsageTriggerResponse::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIListUsageTriggerResponse::getPageSize() const {
    return m_page_size;
}
void OAIListUsageTriggerResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListUsageTriggerResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListUsageTriggerResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListUsageTriggerResponse::getPreviousPageUri() const {
    return m_previous_page_uri;
}
void OAIListUsageTriggerResponse::setPreviousPageUri(const QString &previous_page_uri) {
    m_previous_page_uri = previous_page_uri;
    m_previous_page_uri_isSet = true;
}

bool OAIListUsageTriggerResponse::is_previous_page_uri_Set() const{
    return m_previous_page_uri_isSet;
}

bool OAIListUsageTriggerResponse::is_previous_page_uri_Valid() const{
    return m_previous_page_uri_isValid;
}

qint32 OAIListUsageTriggerResponse::getStart() const {
    return m_start;
}
void OAIListUsageTriggerResponse::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIListUsageTriggerResponse::is_start_Set() const{
    return m_start_isSet;
}

bool OAIListUsageTriggerResponse::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIListUsageTriggerResponse::getUri() const {
    return m_uri;
}
void OAIListUsageTriggerResponse::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIListUsageTriggerResponse::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIListUsageTriggerResponse::is_uri_Valid() const{
    return m_uri_isValid;
}

QList<OAIApi_v2010_account_usage_usage_trigger> OAIListUsageTriggerResponse::getUsageTriggers() const {
    return m_usage_triggers;
}
void OAIListUsageTriggerResponse::setUsageTriggers(const QList<OAIApi_v2010_account_usage_usage_trigger> &usage_triggers) {
    m_usage_triggers = usage_triggers;
    m_usage_triggers_isSet = true;
}

bool OAIListUsageTriggerResponse::is_usage_triggers_Set() const{
    return m_usage_triggers_isSet;
}

bool OAIListUsageTriggerResponse::is_usage_triggers_Valid() const{
    return m_usage_triggers_isValid;
}

bool OAIListUsageTriggerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUsageTriggerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
