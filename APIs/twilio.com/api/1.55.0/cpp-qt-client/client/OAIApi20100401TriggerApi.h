/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401TriggerApi_H
#define OAI_OAIApi20100401TriggerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_usage_usage_trigger.h"
#include "OAIListUsageTriggerResponse.h"
#include "OAIUsage_trigger_enum_recurring.h"
#include "OAIUsage_trigger_enum_trigger_field.h"
#include "OAIUsage_trigger_enum_usage_category.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401TriggerApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401TriggerApi(const int timeOut = 0);
    ~OAIApi20100401TriggerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  callback_url QString [required]
    * @param[in]  trigger_value QString [required]
    * @param[in]  usage_category OAIUsage_trigger_enum_usage_category [required]
    * @param[in]  callback_method QString [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  recurring OAIUsage_trigger_enum_recurring [optional]
    * @param[in]  trigger_by OAIUsage_trigger_enum_trigger_field [optional]
    */
    virtual void createUsageTrigger(const QString &account_sid, const QString &callback_url, const QString &trigger_value, const OAIUsage_trigger_enum_usage_category &usage_category, const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_recurring> &recurring = ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_recurring>(), const ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_trigger_field> &trigger_by = ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_trigger_field>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteUsageTrigger(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchUsageTrigger(const QString &account_sid, const QString &sid);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  recurring OAIUsage_trigger_enum_recurring [optional]
    * @param[in]  trigger_by OAIUsage_trigger_enum_trigger_field [optional]
    * @param[in]  usage_category OAIUsage_trigger_enum_usage_category [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listUsageTrigger(const QString &account_sid, const ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_recurring> &recurring = ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_recurring>(), const ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_trigger_field> &trigger_by = ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_trigger_field>(), const ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_usage_category> &usage_category = ::OpenAPI::OptionalParam<OAIUsage_trigger_enum_usage_category>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  callback_method QString [optional]
    * @param[in]  callback_url QString [optional]
    * @param[in]  friendly_name QString [optional]
    */
    virtual void updateUsageTrigger(const QString &account_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUsageTriggerCallback(OAIHttpRequestWorker *worker);
    void deleteUsageTriggerCallback(OAIHttpRequestWorker *worker);
    void fetchUsageTriggerCallback(OAIHttpRequestWorker *worker);
    void listUsageTriggerCallback(OAIHttpRequestWorker *worker);
    void updateUsageTriggerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUsageTriggerSignal(OAIApi_v2010_account_usage_usage_trigger summary);
    void deleteUsageTriggerSignal();
    void fetchUsageTriggerSignal(OAIApi_v2010_account_usage_usage_trigger summary);
    void listUsageTriggerSignal(OAIListUsageTriggerResponse summary);
    void updateUsageTriggerSignal(OAIApi_v2010_account_usage_usage_trigger summary);


    void createUsageTriggerSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_usage_usage_trigger summary);
    void deleteUsageTriggerSignalFull(OAIHttpRequestWorker *worker);
    void fetchUsageTriggerSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_usage_usage_trigger summary);
    void listUsageTriggerSignalFull(OAIHttpRequestWorker *worker, OAIListUsageTriggerResponse summary);
    void updateUsageTriggerSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_usage_usage_trigger summary);

    Q_DECL_DEPRECATED_X("Use createUsageTriggerSignalError() instead")
    void createUsageTriggerSignalE(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsageTriggerSignalError(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsageTriggerSignalError() instead")
    void deleteUsageTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsageTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUsageTriggerSignalError() instead")
    void fetchUsageTriggerSignalE(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUsageTriggerSignalError(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsageTriggerSignalError() instead")
    void listUsageTriggerSignalE(OAIListUsageTriggerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsageTriggerSignalError(OAIListUsageTriggerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsageTriggerSignalError() instead")
    void updateUsageTriggerSignalE(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsageTriggerSignalError(OAIApi_v2010_account_usage_usage_trigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUsageTriggerSignalErrorFull() instead")
    void createUsageTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUsageTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsageTriggerSignalErrorFull() instead")
    void deleteUsageTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsageTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUsageTriggerSignalErrorFull() instead")
    void fetchUsageTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUsageTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsageTriggerSignalErrorFull() instead")
    void listUsageTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsageTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsageTriggerSignalErrorFull() instead")
    void updateUsageTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsageTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
