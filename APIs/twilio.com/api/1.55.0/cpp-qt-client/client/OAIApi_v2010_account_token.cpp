/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_token::OAIApi_v2010_account_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_token::OAIApi_v2010_account_token() {
    this->initializeModel();
}

OAIApi_v2010_account_token::~OAIApi_v2010_account_token() {}

void OAIApi_v2010_account_token::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_ice_servers_isSet = false;
    m_ice_servers_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIApi_v2010_account_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_token::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_ice_servers_isValid = ::OpenAPI::fromJsonValue(m_ice_servers, json[QString("ice_servers")]);
    m_ice_servers_isSet = !json[QString("ice_servers")].isNull() && m_ice_servers_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIApi_v2010_account_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_token::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_ice_servers.size() > 0) {
        obj.insert(QString("ice_servers"), ::OpenAPI::toJsonValue(m_ice_servers));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIApi_v2010_account_token::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_token::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_token::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_token::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_token::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_token::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_token::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_token::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_token::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_token::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_token::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_token::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QList<OAIApi_v2010_account_token_ice_servers_inner> OAIApi_v2010_account_token::getIceServers() const {
    return m_ice_servers;
}
void OAIApi_v2010_account_token::setIceServers(const QList<OAIApi_v2010_account_token_ice_servers_inner> &ice_servers) {
    m_ice_servers = ice_servers;
    m_ice_servers_isSet = true;
}

bool OAIApi_v2010_account_token::is_ice_servers_Set() const{
    return m_ice_servers_isSet;
}

bool OAIApi_v2010_account_token::is_ice_servers_Valid() const{
    return m_ice_servers_isValid;
}

QString OAIApi_v2010_account_token::getPassword() const {
    return m_password;
}
void OAIApi_v2010_account_token::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIApi_v2010_account_token::is_password_Set() const{
    return m_password_isSet;
}

bool OAIApi_v2010_account_token::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIApi_v2010_account_token::getTtl() const {
    return m_ttl;
}
void OAIApi_v2010_account_token::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIApi_v2010_account_token::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIApi_v2010_account_token::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIApi_v2010_account_token::getUsername() const {
    return m_username;
}
void OAIApi_v2010_account_token::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIApi_v2010_account_token::is_username_Set() const{
    return m_username_isSet;
}

bool OAIApi_v2010_account_token::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIApi_v2010_account_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ice_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
