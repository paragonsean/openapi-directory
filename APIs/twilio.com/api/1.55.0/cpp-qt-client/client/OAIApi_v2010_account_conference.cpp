/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_conference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_conference::OAIApi_v2010_account_conference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_conference::OAIApi_v2010_account_conference() {
    this->initializeModel();
}

OAIApi_v2010_account_conference::~OAIApi_v2010_account_conference() {}

void OAIApi_v2010_account_conference::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_call_sid_ending_conference_isSet = false;
    m_call_sid_ending_conference_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_reason_conference_ended_isSet = false;
    m_reason_conference_ended_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subresource_uris_isSet = false;
    m_subresource_uris_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIApi_v2010_account_conference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_conference::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_call_sid_ending_conference_isValid = ::OpenAPI::fromJsonValue(m_call_sid_ending_conference, json[QString("call_sid_ending_conference")]);
    m_call_sid_ending_conference_isSet = !json[QString("call_sid_ending_conference")].isNull() && m_call_sid_ending_conference_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_reason_conference_ended_isValid = ::OpenAPI::fromJsonValue(m_reason_conference_ended, json[QString("reason_conference_ended")]);
    m_reason_conference_ended_isSet = !json[QString("reason_conference_ended")].isNull() && m_reason_conference_ended_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subresource_uris_isValid = ::OpenAPI::fromJsonValue(m_subresource_uris, json[QString("subresource_uris")]);
    m_subresource_uris_isSet = !json[QString("subresource_uris")].isNull() && m_subresource_uris_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIApi_v2010_account_conference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_conference::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_call_sid_ending_conference_isSet) {
        obj.insert(QString("call_sid_ending_conference"), ::OpenAPI::toJsonValue(m_call_sid_ending_conference));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_reason_conference_ended.isSet()) {
        obj.insert(QString("reason_conference_ended"), ::OpenAPI::toJsonValue(m_reason_conference_ended));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subresource_uris_isSet) {
        obj.insert(QString("subresource_uris"), ::OpenAPI::toJsonValue(m_subresource_uris));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIApi_v2010_account_conference::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_conference::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_conference::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_conference::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_conference::getApiVersion() const {
    return m_api_version;
}
void OAIApi_v2010_account_conference::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApi_v2010_account_conference::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApi_v2010_account_conference::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApi_v2010_account_conference::getCallSidEndingConference() const {
    return m_call_sid_ending_conference;
}
void OAIApi_v2010_account_conference::setCallSidEndingConference(const QString &call_sid_ending_conference) {
    m_call_sid_ending_conference = call_sid_ending_conference;
    m_call_sid_ending_conference_isSet = true;
}

bool OAIApi_v2010_account_conference::is_call_sid_ending_conference_Set() const{
    return m_call_sid_ending_conference_isSet;
}

bool OAIApi_v2010_account_conference::is_call_sid_ending_conference_Valid() const{
    return m_call_sid_ending_conference_isValid;
}

QString OAIApi_v2010_account_conference::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_conference::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_conference::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_conference::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_conference::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_conference::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_conference::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_conference::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIApi_v2010_account_conference::getFriendlyName() const {
    return m_friendly_name;
}
void OAIApi_v2010_account_conference::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIApi_v2010_account_conference::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIApi_v2010_account_conference::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIConference_enum_reason_conference_ended OAIApi_v2010_account_conference::getReasonConferenceEnded() const {
    return m_reason_conference_ended;
}
void OAIApi_v2010_account_conference::setReasonConferenceEnded(const OAIConference_enum_reason_conference_ended &reason_conference_ended) {
    m_reason_conference_ended = reason_conference_ended;
    m_reason_conference_ended_isSet = true;
}

bool OAIApi_v2010_account_conference::is_reason_conference_ended_Set() const{
    return m_reason_conference_ended_isSet;
}

bool OAIApi_v2010_account_conference::is_reason_conference_ended_Valid() const{
    return m_reason_conference_ended_isValid;
}

QString OAIApi_v2010_account_conference::getRegion() const {
    return m_region;
}
void OAIApi_v2010_account_conference::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIApi_v2010_account_conference::is_region_Set() const{
    return m_region_isSet;
}

bool OAIApi_v2010_account_conference::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIApi_v2010_account_conference::getSid() const {
    return m_sid;
}
void OAIApi_v2010_account_conference::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIApi_v2010_account_conference::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIApi_v2010_account_conference::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIConference_enum_status OAIApi_v2010_account_conference::getStatus() const {
    return m_status;
}
void OAIApi_v2010_account_conference::setStatus(const OAIConference_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_v2010_account_conference::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_v2010_account_conference::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIApi_v2010_account_conference::getSubresourceUris() const {
    return m_subresource_uris;
}
void OAIApi_v2010_account_conference::setSubresourceUris(const OAIObject &subresource_uris) {
    m_subresource_uris = subresource_uris;
    m_subresource_uris_isSet = true;
}

bool OAIApi_v2010_account_conference::is_subresource_uris_Set() const{
    return m_subresource_uris_isSet;
}

bool OAIApi_v2010_account_conference::is_subresource_uris_Valid() const{
    return m_subresource_uris_isValid;
}

QString OAIApi_v2010_account_conference::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_conference::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_conference::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_conference::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIApi_v2010_account_conference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sid_ending_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_conference_ended.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subresource_uris_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_conference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
