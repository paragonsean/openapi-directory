/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_v2010_account_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_v2010_account_message::OAIApi_v2010_account_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_v2010_account_message::OAIApi_v2010_account_message() {
    this->initializeModel();
}

OAIApi_v2010_account_message::~OAIApi_v2010_account_message() {}

void OAIApi_v2010_account_message::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_sent_isSet = false;
    m_date_sent_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_messaging_service_sid_isSet = false;
    m_messaging_service_sid_isValid = false;

    m_num_media_isSet = false;
    m_num_media_isValid = false;

    m_num_segments_isSet = false;
    m_num_segments_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_unit_isSet = false;
    m_price_unit_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subresource_uris_isSet = false;
    m_subresource_uris_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIApi_v2010_account_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_v2010_account_message::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_sent_isValid = ::OpenAPI::fromJsonValue(m_date_sent, json[QString("date_sent")]);
    m_date_sent_isSet = !json[QString("date_sent")].isNull() && m_date_sent_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_messaging_service_sid_isValid = ::OpenAPI::fromJsonValue(m_messaging_service_sid, json[QString("messaging_service_sid")]);
    m_messaging_service_sid_isSet = !json[QString("messaging_service_sid")].isNull() && m_messaging_service_sid_isValid;

    m_num_media_isValid = ::OpenAPI::fromJsonValue(m_num_media, json[QString("num_media")]);
    m_num_media_isSet = !json[QString("num_media")].isNull() && m_num_media_isValid;

    m_num_segments_isValid = ::OpenAPI::fromJsonValue(m_num_segments, json[QString("num_segments")]);
    m_num_segments_isSet = !json[QString("num_segments")].isNull() && m_num_segments_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_unit_isValid = ::OpenAPI::fromJsonValue(m_price_unit, json[QString("price_unit")]);
    m_price_unit_isSet = !json[QString("price_unit")].isNull() && m_price_unit_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subresource_uris_isValid = ::OpenAPI::fromJsonValue(m_subresource_uris, json[QString("subresource_uris")]);
    m_subresource_uris_isSet = !json[QString("subresource_uris")].isNull() && m_subresource_uris_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIApi_v2010_account_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_v2010_account_message::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_sent_isSet) {
        obj.insert(QString("date_sent"), ::OpenAPI::toJsonValue(m_date_sent));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_messaging_service_sid_isSet) {
        obj.insert(QString("messaging_service_sid"), ::OpenAPI::toJsonValue(m_messaging_service_sid));
    }
    if (m_num_media_isSet) {
        obj.insert(QString("num_media"), ::OpenAPI::toJsonValue(m_num_media));
    }
    if (m_num_segments_isSet) {
        obj.insert(QString("num_segments"), ::OpenAPI::toJsonValue(m_num_segments));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_unit_isSet) {
        obj.insert(QString("price_unit"), ::OpenAPI::toJsonValue(m_price_unit));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subresource_uris_isSet) {
        obj.insert(QString("subresource_uris"), ::OpenAPI::toJsonValue(m_subresource_uris));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIApi_v2010_account_message::getAccountSid() const {
    return m_account_sid;
}
void OAIApi_v2010_account_message::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIApi_v2010_account_message::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIApi_v2010_account_message::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIApi_v2010_account_message::getApiVersion() const {
    return m_api_version;
}
void OAIApi_v2010_account_message::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApi_v2010_account_message::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApi_v2010_account_message::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApi_v2010_account_message::getBody() const {
    return m_body;
}
void OAIApi_v2010_account_message::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIApi_v2010_account_message::is_body_Set() const{
    return m_body_isSet;
}

bool OAIApi_v2010_account_message::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIApi_v2010_account_message::getDateCreated() const {
    return m_date_created;
}
void OAIApi_v2010_account_message::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIApi_v2010_account_message::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIApi_v2010_account_message::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIApi_v2010_account_message::getDateSent() const {
    return m_date_sent;
}
void OAIApi_v2010_account_message::setDateSent(const QString &date_sent) {
    m_date_sent = date_sent;
    m_date_sent_isSet = true;
}

bool OAIApi_v2010_account_message::is_date_sent_Set() const{
    return m_date_sent_isSet;
}

bool OAIApi_v2010_account_message::is_date_sent_Valid() const{
    return m_date_sent_isValid;
}

QString OAIApi_v2010_account_message::getDateUpdated() const {
    return m_date_updated;
}
void OAIApi_v2010_account_message::setDateUpdated(const QString &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIApi_v2010_account_message::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIApi_v2010_account_message::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

OAIMessage_enum_direction OAIApi_v2010_account_message::getDirection() const {
    return m_direction;
}
void OAIApi_v2010_account_message::setDirection(const OAIMessage_enum_direction &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIApi_v2010_account_message::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIApi_v2010_account_message::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAIApi_v2010_account_message::getErrorCode() const {
    return m_error_code;
}
void OAIApi_v2010_account_message::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIApi_v2010_account_message::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIApi_v2010_account_message::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIApi_v2010_account_message::getErrorMessage() const {
    return m_error_message;
}
void OAIApi_v2010_account_message::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIApi_v2010_account_message::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIApi_v2010_account_message::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIApi_v2010_account_message::getFrom() const {
    return m_from;
}
void OAIApi_v2010_account_message::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIApi_v2010_account_message::is_from_Set() const{
    return m_from_isSet;
}

bool OAIApi_v2010_account_message::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIApi_v2010_account_message::getMessagingServiceSid() const {
    return m_messaging_service_sid;
}
void OAIApi_v2010_account_message::setMessagingServiceSid(const QString &messaging_service_sid) {
    m_messaging_service_sid = messaging_service_sid;
    m_messaging_service_sid_isSet = true;
}

bool OAIApi_v2010_account_message::is_messaging_service_sid_Set() const{
    return m_messaging_service_sid_isSet;
}

bool OAIApi_v2010_account_message::is_messaging_service_sid_Valid() const{
    return m_messaging_service_sid_isValid;
}

QString OAIApi_v2010_account_message::getNumMedia() const {
    return m_num_media;
}
void OAIApi_v2010_account_message::setNumMedia(const QString &num_media) {
    m_num_media = num_media;
    m_num_media_isSet = true;
}

bool OAIApi_v2010_account_message::is_num_media_Set() const{
    return m_num_media_isSet;
}

bool OAIApi_v2010_account_message::is_num_media_Valid() const{
    return m_num_media_isValid;
}

QString OAIApi_v2010_account_message::getNumSegments() const {
    return m_num_segments;
}
void OAIApi_v2010_account_message::setNumSegments(const QString &num_segments) {
    m_num_segments = num_segments;
    m_num_segments_isSet = true;
}

bool OAIApi_v2010_account_message::is_num_segments_Set() const{
    return m_num_segments_isSet;
}

bool OAIApi_v2010_account_message::is_num_segments_Valid() const{
    return m_num_segments_isValid;
}

QString OAIApi_v2010_account_message::getPrice() const {
    return m_price;
}
void OAIApi_v2010_account_message::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIApi_v2010_account_message::is_price_Set() const{
    return m_price_isSet;
}

bool OAIApi_v2010_account_message::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIApi_v2010_account_message::getPriceUnit() const {
    return m_price_unit;
}
void OAIApi_v2010_account_message::setPriceUnit(const QString &price_unit) {
    m_price_unit = price_unit;
    m_price_unit_isSet = true;
}

bool OAIApi_v2010_account_message::is_price_unit_Set() const{
    return m_price_unit_isSet;
}

bool OAIApi_v2010_account_message::is_price_unit_Valid() const{
    return m_price_unit_isValid;
}

QString OAIApi_v2010_account_message::getSid() const {
    return m_sid;
}
void OAIApi_v2010_account_message::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIApi_v2010_account_message::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIApi_v2010_account_message::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIMessage_enum_status OAIApi_v2010_account_message::getStatus() const {
    return m_status;
}
void OAIApi_v2010_account_message::setStatus(const OAIMessage_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_v2010_account_message::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_v2010_account_message::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIApi_v2010_account_message::getSubresourceUris() const {
    return m_subresource_uris;
}
void OAIApi_v2010_account_message::setSubresourceUris(const OAIObject &subresource_uris) {
    m_subresource_uris = subresource_uris;
    m_subresource_uris_isSet = true;
}

bool OAIApi_v2010_account_message::is_subresource_uris_Set() const{
    return m_subresource_uris_isSet;
}

bool OAIApi_v2010_account_message::is_subresource_uris_Valid() const{
    return m_subresource_uris_isValid;
}

QString OAIApi_v2010_account_message::getTo() const {
    return m_to;
}
void OAIApi_v2010_account_message::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIApi_v2010_account_message::is_to_Set() const{
    return m_to_isSet;
}

bool OAIApi_v2010_account_message::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIApi_v2010_account_message::getUri() const {
    return m_uri;
}
void OAIApi_v2010_account_message::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIApi_v2010_account_message::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIApi_v2010_account_message::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIApi_v2010_account_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subresource_uris_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_v2010_account_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
