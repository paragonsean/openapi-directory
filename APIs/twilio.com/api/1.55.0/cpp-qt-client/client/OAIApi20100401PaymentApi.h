/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApi20100401PaymentApi_H
#define OAI_OAIApi20100401PaymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_v2010_account_call_payments.h"
#include "OAIPayments_enum_bank_account_type.h"
#include "OAIPayments_enum_capture.h"
#include "OAIPayments_enum_payment_method.h"
#include "OAIPayments_enum_status.h"
#include "OAIPayments_enum_token_type.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApi20100401PaymentApi : public QObject {
    Q_OBJECT

public:
    OAIApi20100401PaymentApi(const int timeOut = 0);
    ~OAIApi20100401PaymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  idempotency_key QString [required]
    * @param[in]  status_callback QString [required]
    * @param[in]  bank_account_type OAIPayments_enum_bank_account_type [optional]
    * @param[in]  charge_amount double [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  input QString [optional]
    * @param[in]  min_postal_code_length qint32 [optional]
    * @param[in]  parameter QJsonValue [optional]
    * @param[in]  payment_connector QString [optional]
    * @param[in]  payment_method OAIPayments_enum_payment_method [optional]
    * @param[in]  postal_code bool [optional]
    * @param[in]  security_code bool [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  token_type OAIPayments_enum_token_type [optional]
    * @param[in]  valid_card_types QString [optional]
    */
    virtual void createPayments(const QString &account_sid, const QString &call_sid, const QString &idempotency_key, const QString &status_callback, const ::OpenAPI::OptionalParam<OAIPayments_enum_bank_account_type> &bank_account_type = ::OpenAPI::OptionalParam<OAIPayments_enum_bank_account_type>(), const ::OpenAPI::OptionalParam<double> &charge_amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &input = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_postal_code_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QJsonValue> &parameter = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &payment_connector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPayments_enum_payment_method> &payment_method = ::OpenAPI::OptionalParam<OAIPayments_enum_payment_method>(), const ::OpenAPI::OptionalParam<bool> &postal_code = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &security_code = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIPayments_enum_token_type> &token_type = ::OpenAPI::OptionalParam<OAIPayments_enum_token_type>(), const ::OpenAPI::OptionalParam<QString> &valid_card_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_sid QString [required]
    * @param[in]  call_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  idempotency_key QString [required]
    * @param[in]  status_callback QString [required]
    * @param[in]  capture OAIPayments_enum_capture [optional]
    * @param[in]  status OAIPayments_enum_status [optional]
    */
    virtual void updatePayments(const QString &account_sid, const QString &call_sid, const QString &sid, const QString &idempotency_key, const QString &status_callback, const ::OpenAPI::OptionalParam<OAIPayments_enum_capture> &capture = ::OpenAPI::OptionalParam<OAIPayments_enum_capture>(), const ::OpenAPI::OptionalParam<OAIPayments_enum_status> &status = ::OpenAPI::OptionalParam<OAIPayments_enum_status>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPaymentsCallback(OAIHttpRequestWorker *worker);
    void updatePaymentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPaymentsSignal(OAIApi_v2010_account_call_payments summary);
    void updatePaymentsSignal(OAIApi_v2010_account_call_payments summary);


    void createPaymentsSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call_payments summary);
    void updatePaymentsSignalFull(OAIHttpRequestWorker *worker, OAIApi_v2010_account_call_payments summary);

    Q_DECL_DEPRECATED_X("Use createPaymentsSignalError() instead")
    void createPaymentsSignalE(OAIApi_v2010_account_call_payments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentsSignalError(OAIApi_v2010_account_call_payments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentsSignalError() instead")
    void updatePaymentsSignalE(OAIApi_v2010_account_call_payments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentsSignalError(OAIApi_v2010_account_call_payments summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPaymentsSignalErrorFull() instead")
    void createPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentsSignalErrorFull() instead")
    void updatePaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
