/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountQueueMember from '../model/ApiV2010AccountQueueMember';
import ListMemberResponse from '../model/ListMemberResponse';

/**
* Api20100401Member service.
* @module api/Api20100401MemberApi
* @version 1.55.0
*/
export default class Api20100401MemberApi {

    /**
    * Constructs a new Api20100401MemberApi. 
    * @alias module:api/Api20100401MemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchMember operation.
     * @callback module:api/Api20100401MemberApi~fetchMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountQueueMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific member from the queue
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
     * @param {String} queueSid The SID of the Queue in which to find the members to fetch.
     * @param {String} callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
     * @param {module:api/Api20100401MemberApi~fetchMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountQueueMember}
     */
    fetchMember(accountSid, queueSid, callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchMember");
      }
      // verify the required parameter 'queueSid' is set
      if (queueSid === undefined || queueSid === null) {
        throw new Error("Missing the required parameter 'queueSid' when calling fetchMember");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling fetchMember");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'QueueSid': queueSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountQueueMember;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMember operation.
     * @callback module:api/Api20100401MemberApi~listMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the members of the queue
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
     * @param {String} queueSid The SID of the Queue in which to find the members
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401MemberApi~listMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMemberResponse}
     */
    listMember(accountSid, queueSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listMember");
      }
      // verify the required parameter 'queueSid' is set
      if (queueSid === undefined || queueSid === null) {
        throw new Error("Missing the required parameter 'queueSid' when calling listMember");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'QueueSid': queueSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMemberResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMember operation.
     * @callback module:api/Api20100401MemberApi~updateMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountQueueMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
     * @param {String} queueSid The SID of the Queue in which to find the members to update.
     * @param {String} callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
     * @param {String} url The absolute URL of the Queue resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [method] How to pass the update request data. Can be `GET` or `POST` and the default is `POST`. `POST` sends the data as encoded form data and `GET` sends the data as query parameters.
     * @param {module:api/Api20100401MemberApi~updateMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountQueueMember}
     */
    updateMember(accountSid, queueSid, callSid, url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateMember");
      }
      // verify the required parameter 'queueSid' is set
      if (queueSid === undefined || queueSid === null) {
        throw new Error("Missing the required parameter 'queueSid' when calling updateMember");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling updateMember");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling updateMember");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'QueueSid': queueSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Method': opts['method'],
        'Url': url
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountQueueMember;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
