/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountConferenceParticipant from '../model/ApiV2010AccountConferenceParticipant';
import ListParticipantResponse from '../model/ListParticipantResponse';

/**
* Api20100401Participant service.
* @module api/Api20100401ParticipantApi
* @version 1.55.0
*/
export default class Api20100401ParticipantApi {

    /**
    * Constructs a new Api20100401ParticipantApi. 
    * @alias module:api/Api20100401ParticipantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createParticipant operation.
     * @callback module:api/Api20100401ParticipantApi~createParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountConferenceParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
     * @param {String} conferenceSid The SID of the participant's conference.
     * @param {String} from The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
     * @param {String} to The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
     * @param {Object} opts Optional parameters
     * @param {String} [amdStatusCallback] The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
     * @param {module:model/String} [amdStatusCallbackMethod] The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
     * @param {String} [beep] Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     * @param {String} [byoc] The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
     * @param {String} [callReason] The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
     * @param {String} [callSidToCoach] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     * @param {String} [callToken] A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
     * @param {String} [callerId] The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
     * @param {Boolean} [coaching] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     * @param {String} [conferenceRecord] Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     * @param {String} [conferenceRecordingStatusCallback] The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     * @param {Array.<String>} [conferenceRecordingStatusCallbackEvent] The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
     * @param {module:model/String} [conferenceRecordingStatusCallbackMethod] The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceStatusCallback] The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     * @param {Array.<String>} [conferenceStatusCallbackEvent] The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
     * @param {module:model/String} [conferenceStatusCallbackMethod] The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [conferenceTrim] Whether to trim leading and trailing silence from the conference recording. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     * @param {Boolean} [earlyMedia] Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
     * @param {Boolean} [endConferenceOnExit] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     * @param {String} [jitterBufferSize] Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
     * @param {String} [label] A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
     * @param {String} [machineDetection] Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
     * @param {Number} [machineDetectionSilenceTimeout] The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
     * @param {Number} [machineDetectionSpeechEndThreshold] The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
     * @param {Number} [machineDetectionSpeechThreshold] The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
     * @param {Number} [machineDetectionTimeout] The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
     * @param {Number} [maxParticipants] The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     * @param {Boolean} [muted] Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
     * @param {Boolean} [record] Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     * @param {String} [recordingChannels] The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     * @param {String} [recordingStatusCallback] The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     * @param {Array.<String>} [recordingStatusCallbackEvent] The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
     * @param {module:model/String} [recordingStatusCallbackMethod] The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [recordingTrack] The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
     * @param {String} [region] The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     * @param {String} [sipAuthPassword] The SIP password for authentication.
     * @param {String} [sipAuthUsername] The SIP username used for authentication.
     * @param {Boolean} [startConferenceOnEnter] Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application.
     * @param {Array.<String>} [statusCallbackEvent] The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
     * @param {Number} [timeLimit] The maximum duration of the call in seconds. Constraints depend on account and configuration.
     * @param {Number} [timeout] The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
     * @param {String} [trim] Whether to trim any leading and trailing silence from the participant recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
     * @param {module:model/String} [waitMethod] The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * @param {String} [waitUrl] The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * @param {module:api/Api20100401ParticipantApi~createParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountConferenceParticipant}
     */
    createParticipant(accountSid, conferenceSid, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createParticipant");
      }
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling createParticipant");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling createParticipant");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling createParticipant");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'ConferenceSid': conferenceSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AmdStatusCallback': opts['amdStatusCallback'],
        'AmdStatusCallbackMethod': opts['amdStatusCallbackMethod'],
        'Beep': opts['beep'],
        'Byoc': opts['byoc'],
        'CallReason': opts['callReason'],
        'CallSidToCoach': opts['callSidToCoach'],
        'CallToken': opts['callToken'],
        'CallerId': opts['callerId'],
        'Coaching': opts['coaching'],
        'ConferenceRecord': opts['conferenceRecord'],
        'ConferenceRecordingStatusCallback': opts['conferenceRecordingStatusCallback'],
        'ConferenceRecordingStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['conferenceRecordingStatusCallbackEvent'], 'csv'),
        'ConferenceRecordingStatusCallbackMethod': opts['conferenceRecordingStatusCallbackMethod'],
        'ConferenceStatusCallback': opts['conferenceStatusCallback'],
        'ConferenceStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['conferenceStatusCallbackEvent'], 'csv'),
        'ConferenceStatusCallbackMethod': opts['conferenceStatusCallbackMethod'],
        'ConferenceTrim': opts['conferenceTrim'],
        'EarlyMedia': opts['earlyMedia'],
        'EndConferenceOnExit': opts['endConferenceOnExit'],
        'From': from,
        'JitterBufferSize': opts['jitterBufferSize'],
        'Label': opts['label'],
        'MachineDetection': opts['machineDetection'],
        'MachineDetectionSilenceTimeout': opts['machineDetectionSilenceTimeout'],
        'MachineDetectionSpeechEndThreshold': opts['machineDetectionSpeechEndThreshold'],
        'MachineDetectionSpeechThreshold': opts['machineDetectionSpeechThreshold'],
        'MachineDetectionTimeout': opts['machineDetectionTimeout'],
        'MaxParticipants': opts['maxParticipants'],
        'Muted': opts['muted'],
        'Record': opts['record'],
        'RecordingChannels': opts['recordingChannels'],
        'RecordingStatusCallback': opts['recordingStatusCallback'],
        'RecordingStatusCallbackEvent': this.apiClient.buildCollectionParam(opts['recordingStatusCallbackEvent'], 'csv'),
        'RecordingStatusCallbackMethod': opts['recordingStatusCallbackMethod'],
        'RecordingTrack': opts['recordingTrack'],
        'Region': opts['region'],
        'SipAuthPassword': opts['sipAuthPassword'],
        'SipAuthUsername': opts['sipAuthUsername'],
        'StartConferenceOnEnter': opts['startConferenceOnEnter'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackEvent': this.apiClient.buildCollectionParam(opts['statusCallbackEvent'], 'csv'),
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'TimeLimit': opts['timeLimit'],
        'Timeout': opts['timeout'],
        'To': to,
        'Trim': opts['trim'],
        'WaitMethod': opts['waitMethod'],
        'WaitUrl': opts['waitUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountConferenceParticipant;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParticipant operation.
     * @callback module:api/Api20100401ParticipantApi~deleteParticipantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kick a participant from a given conference
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
     * @param {String} conferenceSid The SID of the conference with the participants to delete.
     * @param {String} callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
     * @param {module:api/Api20100401ParticipantApi~deleteParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteParticipant(accountSid, conferenceSid, callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteParticipant");
      }
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling deleteParticipant");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling deleteParticipant");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'ConferenceSid': conferenceSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchParticipant operation.
     * @callback module:api/Api20100401ParticipantApi~fetchParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountConferenceParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an instance of a participant
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
     * @param {String} conferenceSid The SID of the conference with the participant to fetch.
     * @param {String} callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
     * @param {module:api/Api20100401ParticipantApi~fetchParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountConferenceParticipant}
     */
    fetchParticipant(accountSid, conferenceSid, callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchParticipant");
      }
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling fetchParticipant");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling fetchParticipant");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'ConferenceSid': conferenceSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountConferenceParticipant;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listParticipant operation.
     * @callback module:api/Api20100401ParticipantApi~listParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListParticipantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of participants belonging to the account used to make the request
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
     * @param {String} conferenceSid The SID of the conference with the participants to read.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [muted] Whether to return only participants that are muted. Can be: `true` or `false`.
     * @param {Boolean} [hold] Whether to return only participants that are on hold. Can be: `true` or `false`.
     * @param {Boolean} [coaching] Whether to return only participants who are coaching another call. Can be: `true` or `false`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401ParticipantApi~listParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListParticipantResponse}
     */
    listParticipant(accountSid, conferenceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listParticipant");
      }
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling listParticipant");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'ConferenceSid': conferenceSid
      };
      let queryParams = {
        'Muted': opts['muted'],
        'Hold': opts['hold'],
        'Coaching': opts['coaching'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListParticipantResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParticipant operation.
     * @callback module:api/Api20100401ParticipantApi~updateParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountConferenceParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the properties of the participant
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
     * @param {String} conferenceSid The SID of the conference with the participant to update.
     * @param {String} callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [announceMethod] The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
     * @param {String} [announceUrl] The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
     * @param {Boolean} [beepOnExit] Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
     * @param {String} [callSidToCoach] The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     * @param {Boolean} [coaching] Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     * @param {Boolean} [endConferenceOnExit] Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     * @param {Boolean} [hold] Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
     * @param {module:model/String} [holdMethod] The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
     * @param {String} [holdUrl] The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
     * @param {Boolean} [muted] Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
     * @param {module:model/String} [waitMethod] The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * @param {String} [waitUrl] The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * @param {module:api/Api20100401ParticipantApi~updateParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountConferenceParticipant}
     */
    updateParticipant(accountSid, conferenceSid, callSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateParticipant");
      }
      // verify the required parameter 'conferenceSid' is set
      if (conferenceSid === undefined || conferenceSid === null) {
        throw new Error("Missing the required parameter 'conferenceSid' when calling updateParticipant");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling updateParticipant");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'ConferenceSid': conferenceSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnnounceMethod': opts['announceMethod'],
        'AnnounceUrl': opts['announceUrl'],
        'BeepOnExit': opts['beepOnExit'],
        'CallSidToCoach': opts['callSidToCoach'],
        'Coaching': opts['coaching'],
        'EndConferenceOnExit': opts['endConferenceOnExit'],
        'Hold': opts['hold'],
        'HoldMethod': opts['holdMethod'],
        'HoldUrl': opts['holdUrl'],
        'Muted': opts['muted'],
        'WaitMethod': opts['waitMethod'],
        'WaitUrl': opts['waitUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountConferenceParticipant;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
