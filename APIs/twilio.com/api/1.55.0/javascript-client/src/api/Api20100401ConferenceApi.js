/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountConference from '../model/ApiV2010AccountConference';
import ConferenceEnumStatus from '../model/ConferenceEnumStatus';
import ConferenceEnumUpdateStatus from '../model/ConferenceEnumUpdateStatus';
import ListConferenceResponse from '../model/ListConferenceResponse';

/**
* Api20100401Conference service.
* @module api/Api20100401ConferenceApi
* @version 1.55.0
*/
export default class Api20100401ConferenceApi {

    /**
    * Constructs a new Api20100401ConferenceApi. 
    * @alias module:api/Api20100401ConferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchConference operation.
     * @callback module:api/Api20100401ConferenceApi~fetchConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountConference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an instance of a conference
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Conference resource to fetch
     * @param {module:api/Api20100401ConferenceApi~fetchConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountConference}
     */
    fetchConference(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchConference");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchConference");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountConference;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listConference operation.
     * @callback module:api/Api20100401ConferenceApi~listConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConferenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conferences belonging to the account used to make the request
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
     * @param {Object} opts Optional parameters
     * @param {Date} [dateCreated] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
     * @param {Date} [dateCreated2] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
     * @param {Date} [dateCreated3] The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
     * @param {Date} [dateUpdated] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
     * @param {Date} [dateUpdated2] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
     * @param {Date} [dateUpdated3] The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
     * @param {String} [friendlyName] The string that identifies the Conference resources to read.
     * @param {module:model/ConferenceEnumStatus} [status] The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401ConferenceApi~listConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConferenceResponse}
     */
    listConference(accountSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listConference");
      }

      let pathParams = {
        'AccountSid': accountSid
      };
      let queryParams = {
        'DateCreated': opts['dateCreated'],
        'DateCreated&lt;': opts['dateCreated2'],
        'DateCreated&gt;': opts['dateCreated3'],
        'DateUpdated': opts['dateUpdated'],
        'DateUpdated&lt;': opts['dateUpdated2'],
        'DateUpdated&gt;': opts['dateUpdated3'],
        'FriendlyName': opts['friendlyName'],
        'Status': opts['status'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConferenceResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConference operation.
     * @callback module:api/Api20100401ConferenceApi~updateConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountConference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Conference resource to update
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [announceMethod] The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`
     * @param {String} [announceUrl] The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
     * @param {module:model/ConferenceEnumUpdateStatus} [status] 
     * @param {module:api/Api20100401ConferenceApi~updateConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountConference}
     */
    updateConference(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateConference");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateConference");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnnounceMethod': opts['announceMethod'],
        'AnnounceUrl': opts['announceUrl'],
        'Status': opts['status']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountConference;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
