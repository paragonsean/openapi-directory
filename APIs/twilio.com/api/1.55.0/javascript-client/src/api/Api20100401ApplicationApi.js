/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountApplication from '../model/ApiV2010AccountApplication';
import ListApplicationResponse from '../model/ListApplicationResponse';

/**
* Api20100401Application service.
* @module api/Api20100401ApplicationApi
* @version 1.55.0
*/
export default class Api20100401ApplicationApi {

    /**
    * Constructs a new Api20100401ApplicationApi. 
    * @alias module:api/Api20100401ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/Api20100401ApplicationApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new application within your account
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [apiVersion] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
     * @param {String} [friendlyName] A descriptive string that you create to describe the new application. It can be up to 64 characters long.
     * @param {String} [messageStatusCallback] The URL we should call using a POST method to send message status information to your application.
     * @param {Boolean} [publicApplicationConnectEnabled] Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.
     * @param {module:model/String} [smsFallbackMethod] The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
     * @param {String} [smsFallbackUrl] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
     * @param {module:model/String} [smsMethod] The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
     * @param {String} [smsStatusCallback] The URL we should call using a POST method to send status information about SMS messages sent by the application.
     * @param {String} [smsUrl] The URL we should call when the phone number receives an incoming SMS message.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
     * @param {Boolean} [voiceCallerIdLookup] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
     * @param {module:model/String} [voiceFallbackMethod] The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     * @param {String} [voiceFallbackUrl] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
     * @param {module:model/String} [voiceMethod] The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
     * @param {String} [voiceUrl] The URL we should call when the phone number assigned to this application receives a call.
     * @param {module:api/Api20100401ApplicationApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountApplication}
     */
    createApplication(accountSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createApplication");
      }

      let pathParams = {
        'AccountSid': accountSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ApiVersion': opts['apiVersion'],
        'FriendlyName': opts['friendlyName'],
        'MessageStatusCallback': opts['messageStatusCallback'],
        'PublicApplicationConnectEnabled': opts['publicApplicationConnectEnabled'],
        'SmsFallbackMethod': opts['smsFallbackMethod'],
        'SmsFallbackUrl': opts['smsFallbackUrl'],
        'SmsMethod': opts['smsMethod'],
        'SmsStatusCallback': opts['smsStatusCallback'],
        'SmsUrl': opts['smsUrl'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'VoiceCallerIdLookup': opts['voiceCallerIdLookup'],
        'VoiceFallbackMethod': opts['voiceFallbackMethod'],
        'VoiceFallbackUrl': opts['voiceFallbackUrl'],
        'VoiceMethod': opts['voiceMethod'],
        'VoiceUrl': opts['voiceUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountApplication;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Applications.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/Api20100401ApplicationApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the application by the specified application sid
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Application resource to delete.
     * @param {module:api/Api20100401ApplicationApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplication(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteApplication");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteApplication");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchApplication operation.
     * @callback module:api/Api20100401ApplicationApi~fetchApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the application specified by the provided sid
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Application resource to fetch.
     * @param {module:api/Api20100401ApplicationApi~fetchApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountApplication}
     */
    fetchApplication(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchApplication");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchApplication");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountApplication;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplication operation.
     * @callback module:api/Api20100401ApplicationApi~listApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of applications representing an application within the requesting account
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
     * @param {Object} opts Optional parameters
     * @param {String} [friendlyName] The string that identifies the Application resources to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401ApplicationApi~listApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationResponse}
     */
    listApplication(accountSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listApplication");
      }

      let pathParams = {
        'AccountSid': accountSid
      };
      let queryParams = {
        'FriendlyName': opts['friendlyName'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Applications.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/Api20100401ApplicationApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the application's properties
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Application resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [apiVersion] The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * @param {String} [messageStatusCallback] The URL we should call using a POST method to send message status information to your application.
     * @param {Boolean} [publicApplicationConnectEnabled] Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.
     * @param {module:model/String} [smsFallbackMethod] The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
     * @param {String} [smsFallbackUrl] The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
     * @param {module:model/String} [smsMethod] The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
     * @param {String} [smsStatusCallback] Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
     * @param {String} [smsUrl] The URL we should call when the phone number receives an incoming SMS message.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
     * @param {Boolean} [voiceCallerIdLookup] Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
     * @param {module:model/String} [voiceFallbackMethod] The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
     * @param {String} [voiceFallbackUrl] The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
     * @param {module:model/String} [voiceMethod] The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
     * @param {String} [voiceUrl] The URL we should call when the phone number assigned to this application receives a call.
     * @param {module:api/Api20100401ApplicationApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountApplication}
     */
    updateApplication(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateApplication");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateApplication");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ApiVersion': opts['apiVersion'],
        'FriendlyName': opts['friendlyName'],
        'MessageStatusCallback': opts['messageStatusCallback'],
        'PublicApplicationConnectEnabled': opts['publicApplicationConnectEnabled'],
        'SmsFallbackMethod': opts['smsFallbackMethod'],
        'SmsFallbackUrl': opts['smsFallbackUrl'],
        'SmsMethod': opts['smsMethod'],
        'SmsStatusCallback': opts['smsStatusCallback'],
        'SmsUrl': opts['smsUrl'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'VoiceCallerIdLookup': opts['voiceCallerIdLookup'],
        'VoiceFallbackMethod': opts['voiceFallbackMethod'],
        'VoiceFallbackUrl': opts['voiceFallbackUrl'],
        'VoiceMethod': opts['voiceMethod'],
        'VoiceUrl': opts['voiceUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountApplication;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
