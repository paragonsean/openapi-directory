/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountSipSipIpAccessControlListSipIpAddress from '../model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress';
import ListSipIpAddressResponse from '../model/ListSipIpAddressResponse';

/**
* Api20100401IpAddress service.
* @module api/Api20100401IpAddressApi
* @version 1.55.0
*/
export default class Api20100401IpAddressApi {

    /**
    * Constructs a new Api20100401IpAddressApi. 
    * @alias module:api/Api20100401IpAddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSipIpAddress operation.
     * @callback module:api/Api20100401IpAddressApi~createSipIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new IpAddress resource.
     * @param {String} accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
     * @param {String} ipAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource.
     * @param {String} friendlyName A human readable descriptive text for this resource, up to 255 characters long.
     * @param {String} ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
     * @param {Object} opts Optional parameters
     * @param {Number} [cidrPrefixLength] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
     * @param {module:api/Api20100401IpAddressApi~createSipIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress}
     */
    createSipIpAddress(accountSid, ipAccessControlListSid, friendlyName, ipAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createSipIpAddress");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling createSipIpAddress");
      }
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createSipIpAddress");
      }
      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling createSipIpAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'IpAccessControlListSid': ipAccessControlListSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CidrPrefixLength': opts['cidrPrefixLength'],
        'FriendlyName': friendlyName,
        'IpAddress': ipAddress
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipIpAccessControlListSipIpAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSipIpAddress operation.
     * @callback module:api/Api20100401IpAddressApi~deleteSipIpAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an IpAddress resource.
     * @param {String} accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
     * @param {String} ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete.
     * @param {String} sid A 34 character string that uniquely identifies the resource to delete.
     * @param {module:api/Api20100401IpAddressApi~deleteSipIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSipIpAddress(accountSid, ipAccessControlListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteSipIpAddress");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling deleteSipIpAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSipIpAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'IpAccessControlListSid': ipAccessControlListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSipIpAddress operation.
     * @callback module:api/Api20100401IpAddressApi~fetchSipIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read one IpAddress resource.
     * @param {String} accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
     * @param {String} ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
     * @param {String} sid A 34 character string that uniquely identifies the IpAddress resource to fetch.
     * @param {module:api/Api20100401IpAddressApi~fetchSipIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress}
     */
    fetchSipIpAddress(accountSid, ipAccessControlListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchSipIpAddress");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling fetchSipIpAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSipIpAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'IpAccessControlListSid': ipAccessControlListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipIpAccessControlListSipIpAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSipIpAddress operation.
     * @callback module:api/Api20100401IpAddressApi~listSipIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSipIpAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read multiple IpAddress resources.
     * @param {String} accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
     * @param {String} ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401IpAddressApi~listSipIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSipIpAddressResponse}
     */
    listSipIpAddress(accountSid, ipAccessControlListSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listSipIpAddress");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling listSipIpAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'IpAccessControlListSid': ipAccessControlListSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSipIpAddressResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSipIpAddress operation.
     * @callback module:api/Api20100401IpAddressApi~updateSipIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an IpAddress resource.
     * @param {String} accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
     * @param {String} ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update.
     * @param {String} sid A 34 character string that identifies the IpAddress resource to update.
     * @param {Object} opts Optional parameters
     * @param {Number} [cidrPrefixLength] An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
     * @param {String} [friendlyName] A human readable descriptive text for this resource, up to 255 characters long.
     * @param {String} [ipAddress] An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
     * @param {module:api/Api20100401IpAddressApi~updateSipIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipIpAccessControlListSipIpAddress}
     */
    updateSipIpAddress(accountSid, ipAccessControlListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateSipIpAddress");
      }
      // verify the required parameter 'ipAccessControlListSid' is set
      if (ipAccessControlListSid === undefined || ipAccessControlListSid === null) {
        throw new Error("Missing the required parameter 'ipAccessControlListSid' when calling updateSipIpAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSipIpAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'IpAccessControlListSid': ipAccessControlListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CidrPrefixLength': opts['cidrPrefixLength'],
        'FriendlyName': opts['friendlyName'],
        'IpAddress': opts['ipAddress']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipIpAccessControlListSipIpAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
