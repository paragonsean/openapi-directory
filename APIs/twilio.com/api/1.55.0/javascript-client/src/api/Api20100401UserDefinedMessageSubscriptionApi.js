/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountCallUserDefinedMessageSubscription from '../model/ApiV2010AccountCallUserDefinedMessageSubscription';

/**
* Api20100401UserDefinedMessageSubscription service.
* @module api/Api20100401UserDefinedMessageSubscriptionApi
* @version 1.55.0
*/
export default class Api20100401UserDefinedMessageSubscriptionApi {

    /**
    * Constructs a new Api20100401UserDefinedMessageSubscriptionApi. 
    * @alias module:api/Api20100401UserDefinedMessageSubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUserDefinedMessageSubscription operation.
     * @callback module:api/Api20100401UserDefinedMessageSubscriptionApi~createUserDefinedMessageSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountCallUserDefinedMessageSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to User Defined Messages for a given Call SID.
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
     * @param {String} callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
     * @param {String} callback The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
     * @param {module:model/String} [method] The HTTP method Twilio will use when requesting the above `Url`. Either `GET` or `POST`. Default is `POST`.
     * @param {module:api/Api20100401UserDefinedMessageSubscriptionApi~createUserDefinedMessageSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountCallUserDefinedMessageSubscription}
     */
    createUserDefinedMessageSubscription(accountSid, callSid, callback, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createUserDefinedMessageSubscription");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling createUserDefinedMessageSubscription");
      }
      // verify the required parameter 'callback' is set
      if (callback === undefined || callback === null) {
        throw new Error("Missing the required parameter 'callback' when calling createUserDefinedMessageSubscription");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CallSid': callSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Callback': callback,
        'IdempotencyKey': opts['idempotencyKey'],
        'Method': opts['method']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountCallUserDefinedMessageSubscription;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserDefinedMessageSubscription operation.
     * @callback module:api/Api20100401UserDefinedMessageSubscriptionApi~deleteUserDefinedMessageSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific User Defined Message Subscription.
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
     * @param {String} callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
     * @param {String} sid The SID that uniquely identifies this User Defined Message Subscription.
     * @param {module:api/Api20100401UserDefinedMessageSubscriptionApi~deleteUserDefinedMessageSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserDefinedMessageSubscription(accountSid, callSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteUserDefinedMessageSubscription");
      }
      // verify the required parameter 'callSid' is set
      if (callSid === undefined || callSid === null) {
        throw new Error("Missing the required parameter 'callSid' when calling deleteUserDefinedMessageSubscription");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteUserDefinedMessageSubscription");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CallSid': callSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
