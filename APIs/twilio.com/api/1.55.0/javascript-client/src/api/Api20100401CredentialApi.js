/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountSipSipCredentialListSipCredential from '../model/ApiV2010AccountSipSipCredentialListSipCredential';
import ListSipCredentialResponse from '../model/ListSipCredentialResponse';

/**
* Api20100401Credential service.
* @module api/Api20100401CredentialApi
* @version 1.55.0
*/
export default class Api20100401CredentialApi {

    /**
    * Constructs a new Api20100401CredentialApi. 
    * @alias module:api/Api20100401CredentialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSipCredential operation.
     * @callback module:api/Api20100401CredentialApi~createSipCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipCredentialListSipCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new credential resource.
     * @param {String} accountSid The unique id of the Account that is responsible for this resource.
     * @param {String} credentialListSid The unique id that identifies the credential list to include the created credential.
     * @param {String} password The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
     * @param {String} username The username that will be passed when authenticating SIP requests. The username should be sent in response to Twilio's challenge of the initial INVITE. It can be up to 32 characters long.
     * @param {module:api/Api20100401CredentialApi~createSipCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipCredentialListSipCredential}
     */
    createSipCredential(accountSid, credentialListSid, password, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createSipCredential");
      }
      // verify the required parameter 'credentialListSid' is set
      if (credentialListSid === undefined || credentialListSid === null) {
        throw new Error("Missing the required parameter 'credentialListSid' when calling createSipCredential");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createSipCredential");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createSipCredential");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CredentialListSid': credentialListSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Password': password,
        'Username': username
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipCredentialListSipCredential;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSipCredential operation.
     * @callback module:api/Api20100401CredentialApi~deleteSipCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a credential resource.
     * @param {String} accountSid The unique id of the Account that is responsible for this resource.
     * @param {String} credentialListSid The unique id that identifies the credential list that contains the desired credentials.
     * @param {String} sid The unique id that identifies the resource to delete.
     * @param {module:api/Api20100401CredentialApi~deleteSipCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSipCredential(accountSid, credentialListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteSipCredential");
      }
      // verify the required parameter 'credentialListSid' is set
      if (credentialListSid === undefined || credentialListSid === null) {
        throw new Error("Missing the required parameter 'credentialListSid' when calling deleteSipCredential");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSipCredential");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CredentialListSid': credentialListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSipCredential operation.
     * @callback module:api/Api20100401CredentialApi~fetchSipCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipCredentialListSipCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a single credential.
     * @param {String} accountSid The unique id of the Account that is responsible for this resource.
     * @param {String} credentialListSid The unique id that identifies the credential list that contains the desired credential.
     * @param {String} sid The unique id that identifies the resource to fetch.
     * @param {module:api/Api20100401CredentialApi~fetchSipCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipCredentialListSipCredential}
     */
    fetchSipCredential(accountSid, credentialListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchSipCredential");
      }
      // verify the required parameter 'credentialListSid' is set
      if (credentialListSid === undefined || credentialListSid === null) {
        throw new Error("Missing the required parameter 'credentialListSid' when calling fetchSipCredential");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSipCredential");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CredentialListSid': credentialListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipCredentialListSipCredential;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSipCredential operation.
     * @callback module:api/Api20100401CredentialApi~listSipCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSipCredentialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of credentials.
     * @param {String} accountSid The unique id of the Account that is responsible for this resource.
     * @param {String} credentialListSid The unique id that identifies the credential list that contains the desired credentials.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401CredentialApi~listSipCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSipCredentialResponse}
     */
    listSipCredential(accountSid, credentialListSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listSipCredential");
      }
      // verify the required parameter 'credentialListSid' is set
      if (credentialListSid === undefined || credentialListSid === null) {
        throw new Error("Missing the required parameter 'credentialListSid' when calling listSipCredential");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CredentialListSid': credentialListSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSipCredentialResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSipCredential operation.
     * @callback module:api/Api20100401CredentialApi~updateSipCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountSipSipCredentialListSipCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a credential resource.
     * @param {String} accountSid The unique id of the Account that is responsible for this resource.
     * @param {String} credentialListSid The unique id that identifies the credential list that includes this credential.
     * @param {String} sid The unique id that identifies the resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [password] The password that the username will use when authenticating SIP requests. The password must be a minimum of 12 characters, contain at least 1 digit, and have mixed case. (eg `IWasAtSignal2018`)
     * @param {module:api/Api20100401CredentialApi~updateSipCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountSipSipCredentialListSipCredential}
     */
    updateSipCredential(accountSid, credentialListSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateSipCredential");
      }
      // verify the required parameter 'credentialListSid' is set
      if (credentialListSid === undefined || credentialListSid === null) {
        throw new Error("Missing the required parameter 'credentialListSid' when calling updateSipCredential");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSipCredential");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'CredentialListSid': credentialListSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Password': opts['password']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountSipSipCredentialListSipCredential;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
