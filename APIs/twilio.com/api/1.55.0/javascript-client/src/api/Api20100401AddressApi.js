/**
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV2010AccountAddress from '../model/ApiV2010AccountAddress';
import ListAddressResponse from '../model/ListAddressResponse';

/**
* Api20100401Address service.
* @module api/Api20100401AddressApi
* @version 1.55.0
*/
export default class Api20100401AddressApi {

    /**
    * Constructs a new Api20100401AddressApi. 
    * @alias module:api/Api20100401AddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAddress operation.
     * @callback module:api/Api20100401AddressApi~createAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
     * @param {String} city The city of the new address.
     * @param {String} customerName The name to associate with the new address.
     * @param {String} isoCountry The ISO country code of the new address.
     * @param {String} postalCode The postal code of the new address.
     * @param {String} region The state or region of the new address.
     * @param {String} street The number and street address of the new address.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoCorrectAddress] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
     * @param {Boolean} [emergencyEnabled] Whether to enable emergency calling on the new address. Can be: `true` or `false`.
     * @param {String} [friendlyName] A descriptive string that you create to describe the new address. It can be up to 64 characters long.
     * @param {String} [streetSecondary] The additional number and street address of the address.
     * @param {module:api/Api20100401AddressApi~createAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountAddress}
     */
    createAddress(accountSid, city, customerName, isoCountry, postalCode, region, street, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling createAddress");
      }
      // verify the required parameter 'city' is set
      if (city === undefined || city === null) {
        throw new Error("Missing the required parameter 'city' when calling createAddress");
      }
      // verify the required parameter 'customerName' is set
      if (customerName === undefined || customerName === null) {
        throw new Error("Missing the required parameter 'customerName' when calling createAddress");
      }
      // verify the required parameter 'isoCountry' is set
      if (isoCountry === undefined || isoCountry === null) {
        throw new Error("Missing the required parameter 'isoCountry' when calling createAddress");
      }
      // verify the required parameter 'postalCode' is set
      if (postalCode === undefined || postalCode === null) {
        throw new Error("Missing the required parameter 'postalCode' when calling createAddress");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling createAddress");
      }
      // verify the required parameter 'street' is set
      if (street === undefined || street === null) {
        throw new Error("Missing the required parameter 'street' when calling createAddress");
      }

      let pathParams = {
        'AccountSid': accountSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AutoCorrectAddress': opts['autoCorrectAddress'],
        'City': city,
        'CustomerName': customerName,
        'EmergencyEnabled': opts['emergencyEnabled'],
        'FriendlyName': opts['friendlyName'],
        'IsoCountry': isoCountry,
        'PostalCode': postalCode,
        'Region': region,
        'Street': street,
        'StreetSecondary': opts['streetSecondary']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Addresses.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAddress operation.
     * @callback module:api/Api20100401AddressApi~deleteAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Address resource to delete.
     * @param {module:api/Api20100401AddressApi~deleteAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAddress(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling deleteAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchAddress operation.
     * @callback module:api/Api20100401AddressApi~fetchAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Address resource to fetch.
     * @param {module:api/Api20100401AddressApi~fetchAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountAddress}
     */
    fetchAddress(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling fetchAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listAddress operation.
     * @callback module:api/Api20100401AddressApi~listAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
     * @param {Object} opts Optional parameters
     * @param {String} [customerName] The `customer_name` of the Address resources to read.
     * @param {String} [friendlyName] The string that identifies the Address resources to read.
     * @param {String} [isoCountry] The ISO country code of the Address resources to read.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/Api20100401AddressApi~listAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAddressResponse}
     */
    listAddress(accountSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling listAddress");
      }

      let pathParams = {
        'AccountSid': accountSid
      };
      let queryParams = {
        'CustomerName': opts['customerName'],
        'FriendlyName': opts['friendlyName'],
        'IsoCountry': opts['isoCountry'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAddressResponse;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Addresses.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAddress operation.
     * @callback module:api/Api20100401AddressApi~updateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2010AccountAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Address resource to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoCorrectAddress] Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
     * @param {String} [city] The city of the address.
     * @param {String} [customerName] The name to associate with the address.
     * @param {Boolean} [emergencyEnabled] Whether to enable emergency calling on the address. Can be: `true` or `false`.
     * @param {String} [friendlyName] A descriptive string that you create to describe the address. It can be up to 64 characters long.
     * @param {String} [postalCode] The postal code of the address.
     * @param {String} [region] The state or region of the address.
     * @param {String} [street] The number and street address of the address.
     * @param {String} [streetSecondary] The additional number and street address of the address.
     * @param {module:api/Api20100401AddressApi~updateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2010AccountAddress}
     */
    updateAddress(accountSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSid' is set
      if (accountSid === undefined || accountSid === null) {
        throw new Error("Missing the required parameter 'accountSid' when calling updateAddress");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateAddress");
      }

      let pathParams = {
        'AccountSid': accountSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AutoCorrectAddress': opts['autoCorrectAddress'],
        'City': opts['city'],
        'CustomerName': opts['customerName'],
        'EmergencyEnabled': opts['emergencyEnabled'],
        'FriendlyName': opts['friendlyName'],
        'PostalCode': opts['postalCode'],
        'Region': opts['region'],
        'Street': opts['street'],
        'StreetSecondary': opts['streetSecondary']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV2010AccountAddress;
      let basePaths = ['https://api.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
