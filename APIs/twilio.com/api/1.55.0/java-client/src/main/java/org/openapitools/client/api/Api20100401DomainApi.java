/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountSipSipDomain;
import org.openapitools.client.model.ListSipDomainResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401DomainApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401DomainApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401DomainApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSipDomain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should when the domain receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSipDomainCall(String accountSid, String domainName, String byocTrunkSid, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (byocTrunkSid != null) {
            localVarFormParams.put("ByocTrunkSid", byocTrunkSid);
        }

        if (domainName != null) {
            localVarFormParams.put("DomainName", domainName);
        }

        if (emergencyCallerSid != null) {
            localVarFormParams.put("EmergencyCallerSid", emergencyCallerSid);
        }

        if (emergencyCallingEnabled != null) {
            localVarFormParams.put("EmergencyCallingEnabled", emergencyCallingEnabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (secure != null) {
            localVarFormParams.put("Secure", secure);
        }

        if (sipRegistration != null) {
            localVarFormParams.put("SipRegistration", sipRegistration);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceStatusCallbackMethod != null) {
            localVarFormParams.put("VoiceStatusCallbackMethod", voiceStatusCallbackMethod);
        }

        if (voiceStatusCallbackUrl != null) {
            localVarFormParams.put("VoiceStatusCallbackUrl", voiceStatusCallbackUrl);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSipDomainValidateBeforeCall(String accountSid, String domainName, String byocTrunkSid, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createSipDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling createSipDomain(Async)");
        }

        return createSipDomainCall(accountSid, domainName, byocTrunkSid, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, _callback);

    }

    /**
     * 
     * Create a new Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should when the domain receives a call. (optional)
     * @return ApiV2010AccountSipSipDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipDomain createSipDomain(String accountSid, String domainName, String byocTrunkSid, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipDomain> localVarResp = createSipDomainWithHttpInfo(accountSid, domainName, byocTrunkSid, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should when the domain receives a call. (optional)
     * @return ApiResponse&lt;ApiV2010AccountSipSipDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipDomain> createSipDomainWithHttpInfo(String accountSid, String domainName, String byocTrunkSid, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = createSipDomainValidateBeforeCall(accountSid, domainName, byocTrunkSid, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should when the domain receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSipDomainAsync(String accountSid, String domainName, String byocTrunkSid, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback<ApiV2010AccountSipSipDomain> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSipDomainValidateBeforeCall(accountSid, domainName, byocTrunkSid, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSipDomain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSipDomainCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSipDomainValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteSipDomain(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSipDomain(Async)");
        }

        return deleteSipDomainCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Delete an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSipDomain(String accountSid, String sid) throws ApiException {
        deleteSipDomainWithHttpInfo(accountSid, sid);
    }

    /**
     * 
     * Delete an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSipDomainWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteSipDomainValidateBeforeCall(accountSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSipDomainAsync(String accountSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSipDomainValidateBeforeCall(accountSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSipDomain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSipDomainCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSipDomainValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchSipDomain(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSipDomain(Async)");
        }

        return fetchSipDomainCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Fetch an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. (required)
     * @return ApiV2010AccountSipSipDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipDomain fetchSipDomain(String accountSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipDomain> localVarResp = fetchSipDomainWithHttpInfo(accountSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountSipSipDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipDomain> fetchSipDomainWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSipDomainValidateBeforeCall(accountSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of a Domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSipDomainAsync(String accountSid, String sid, final ApiCallback<ApiV2010AccountSipSipDomain> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSipDomainValidateBeforeCall(accountSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSipDomain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSipDomainCall(String accountSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSipDomainValidateBeforeCall(String accountSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listSipDomain(Async)");
        }

        return listSipDomainCall(accountSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of domains belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSipDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSipDomainResponse listSipDomain(String accountSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSipDomainResponse> localVarResp = listSipDomainWithHttpInfo(accountSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of domains belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSipDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSipDomainResponse> listSipDomainWithHttpInfo(String accountSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSipDomainValidateBeforeCall(accountSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSipDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of domains belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSipDomainAsync(String accountSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSipDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSipDomainValidateBeforeCall(accountSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSipDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSipDomain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to update. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should call when the domain receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSipDomainCall(String accountSid, String sid, String byocTrunkSid, String domainName, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (byocTrunkSid != null) {
            localVarFormParams.put("ByocTrunkSid", byocTrunkSid);
        }

        if (domainName != null) {
            localVarFormParams.put("DomainName", domainName);
        }

        if (emergencyCallerSid != null) {
            localVarFormParams.put("EmergencyCallerSid", emergencyCallerSid);
        }

        if (emergencyCallingEnabled != null) {
            localVarFormParams.put("EmergencyCallingEnabled", emergencyCallingEnabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (secure != null) {
            localVarFormParams.put("Secure", secure);
        }

        if (sipRegistration != null) {
            localVarFormParams.put("SipRegistration", sipRegistration);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceStatusCallbackMethod != null) {
            localVarFormParams.put("VoiceStatusCallbackMethod", voiceStatusCallbackMethod);
        }

        if (voiceStatusCallbackUrl != null) {
            localVarFormParams.put("VoiceStatusCallbackUrl", voiceStatusCallbackUrl);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSipDomainValidateBeforeCall(String accountSid, String sid, String byocTrunkSid, String domainName, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateSipDomain(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSipDomain(Async)");
        }

        return updateSipDomainCall(accountSid, sid, byocTrunkSid, domainName, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, _callback);

    }

    /**
     * 
     * Update the attributes of a domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to update. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should call when the domain receives a call. (optional)
     * @return ApiV2010AccountSipSipDomain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipDomain updateSipDomain(String accountSid, String sid, String byocTrunkSid, String domainName, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipDomain> localVarResp = updateSipDomainWithHttpInfo(accountSid, sid, byocTrunkSid, domainName, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the attributes of a domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to update. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should call when the domain receives a call. (optional)
     * @return ApiResponse&lt;ApiV2010AccountSipSipDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipDomain> updateSipDomainWithHttpInfo(String accountSid, String sid, String byocTrunkSid, String domainName, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateSipDomainValidateBeforeCall(accountSid, sid, byocTrunkSid, domainName, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the attributes of a domain
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the SipDomain resource to update. (required)
     * @param byocTrunkSid The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with. (optional)
     * @param domainName The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\&quot;-\\\&quot; and must end with &#x60;sip.twilio.com&#x60;. (optional)
     * @param emergencyCallerSid Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call. (optional)
     * @param emergencyCallingEnabled Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses. (optional)
     * @param friendlyName A descriptive string that you created to describe the resource. It can be up to 64 characters long. (optional)
     * @param secure Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain. (optional)
     * @param sipRegistration Whether to allow SIP Endpoints to register with the domain to receive calls. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; allows SIP Endpoints to register with the domain to receive calls, &#x60;false&#x60; does not. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML requested by &#x60;voice_url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60; (optional)
     * @param voiceStatusCallbackMethod The HTTP method we should use to call &#x60;voice_status_callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceStatusCallbackUrl The URL that we should call to pass status parameters (such as call ended) to your application. (optional)
     * @param voiceUrl The URL we should call when the domain receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSipDomainAsync(String accountSid, String sid, String byocTrunkSid, String domainName, String emergencyCallerSid, Boolean emergencyCallingEnabled, String friendlyName, Boolean secure, Boolean sipRegistration, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, String voiceStatusCallbackMethod, URI voiceStatusCallbackUrl, URI voiceUrl, final ApiCallback<ApiV2010AccountSipSipDomain> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSipDomainValidateBeforeCall(accountSid, sid, byocTrunkSid, domainName, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipDomain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
