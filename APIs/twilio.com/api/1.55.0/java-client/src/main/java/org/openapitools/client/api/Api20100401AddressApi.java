/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountAddress;
import org.openapitools.client.model.ListAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401AddressApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401AddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401AddressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAddress
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource. (required)
     * @param city The city of the new address. (required)
     * @param customerName The name to associate with the new address. (required)
     * @param isoCountry The ISO country code of the new address. (required)
     * @param postalCode The postal code of the new address. (required)
     * @param region The state or region of the new address. (required)
     * @param street The number and street address of the new address. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the new address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the new address. It can be up to 64 characters long. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAddressCall(String accountSid, String city, String customerName, String isoCountry, String postalCode, String region, String street, Boolean autoCorrectAddress, Boolean emergencyEnabled, String friendlyName, String streetSecondary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Addresses.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoCorrectAddress != null) {
            localVarFormParams.put("AutoCorrectAddress", autoCorrectAddress);
        }

        if (city != null) {
            localVarFormParams.put("City", city);
        }

        if (customerName != null) {
            localVarFormParams.put("CustomerName", customerName);
        }

        if (emergencyEnabled != null) {
            localVarFormParams.put("EmergencyEnabled", emergencyEnabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (isoCountry != null) {
            localVarFormParams.put("IsoCountry", isoCountry);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (street != null) {
            localVarFormParams.put("Street", street);
        }

        if (streetSecondary != null) {
            localVarFormParams.put("StreetSecondary", streetSecondary);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAddressValidateBeforeCall(String accountSid, String city, String customerName, String isoCountry, String postalCode, String region, String street, Boolean autoCorrectAddress, Boolean emergencyEnabled, String friendlyName, String streetSecondary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createAddress(Async)");
        }

        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling createAddress(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling createAddress(Async)");
        }

        // verify the required parameter 'isoCountry' is set
        if (isoCountry == null) {
            throw new ApiException("Missing the required parameter 'isoCountry' when calling createAddress(Async)");
        }

        // verify the required parameter 'postalCode' is set
        if (postalCode == null) {
            throw new ApiException("Missing the required parameter 'postalCode' when calling createAddress(Async)");
        }

        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling createAddress(Async)");
        }

        // verify the required parameter 'street' is set
        if (street == null) {
            throw new ApiException("Missing the required parameter 'street' when calling createAddress(Async)");
        }

        return createAddressCall(accountSid, city, customerName, isoCountry, postalCode, region, street, autoCorrectAddress, emergencyEnabled, friendlyName, streetSecondary, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource. (required)
     * @param city The city of the new address. (required)
     * @param customerName The name to associate with the new address. (required)
     * @param isoCountry The ISO country code of the new address. (required)
     * @param postalCode The postal code of the new address. (required)
     * @param region The state or region of the new address. (required)
     * @param street The number and street address of the new address. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the new address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the new address. It can be up to 64 characters long. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @return ApiV2010AccountAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountAddress createAddress(String accountSid, String city, String customerName, String isoCountry, String postalCode, String region, String street, Boolean autoCorrectAddress, Boolean emergencyEnabled, String friendlyName, String streetSecondary) throws ApiException {
        ApiResponse<ApiV2010AccountAddress> localVarResp = createAddressWithHttpInfo(accountSid, city, customerName, isoCountry, postalCode, region, street, autoCorrectAddress, emergencyEnabled, friendlyName, streetSecondary);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource. (required)
     * @param city The city of the new address. (required)
     * @param customerName The name to associate with the new address. (required)
     * @param isoCountry The ISO country code of the new address. (required)
     * @param postalCode The postal code of the new address. (required)
     * @param region The state or region of the new address. (required)
     * @param street The number and street address of the new address. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the new address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the new address. It can be up to 64 characters long. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @return ApiResponse&lt;ApiV2010AccountAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountAddress> createAddressWithHttpInfo(String accountSid, String city, String customerName, String isoCountry, String postalCode, String region, String street, Boolean autoCorrectAddress, Boolean emergencyEnabled, String friendlyName, String streetSecondary) throws ApiException {
        okhttp3.Call localVarCall = createAddressValidateBeforeCall(accountSid, city, customerName, isoCountry, postalCode, region, street, autoCorrectAddress, emergencyEnabled, friendlyName, streetSecondary, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource. (required)
     * @param city The city of the new address. (required)
     * @param customerName The name to associate with the new address. (required)
     * @param isoCountry The ISO country code of the new address. (required)
     * @param postalCode The postal code of the new address. (required)
     * @param region The state or region of the new address. (required)
     * @param street The number and street address of the new address. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the new address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the new address. It can be up to 64 characters long. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAddressAsync(String accountSid, String city, String customerName, String isoCountry, String postalCode, String region, String street, Boolean autoCorrectAddress, Boolean emergencyEnabled, String friendlyName, String streetSecondary, final ApiCallback<ApiV2010AccountAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAddressValidateBeforeCall(accountSid, city, customerName, isoCountry, postalCode, region, street, autoCorrectAddress, emergencyEnabled, friendlyName, streetSecondary, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAddress
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddressCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAddressValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteAddress(Async)");
        }

        return deleteAddressCall(accountSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAddress(String accountSid, String sid) throws ApiException {
        deleteAddressWithHttpInfo(accountSid, sid);
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAddressWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteAddressValidateBeforeCall(accountSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddressAsync(String accountSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAddressValidateBeforeCall(accountSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchAddress
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAddressCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAddressValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchAddress(Async)");
        }

        return fetchAddressCall(accountSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to fetch. (required)
     * @return ApiV2010AccountAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountAddress fetchAddress(String accountSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountAddress> localVarResp = fetchAddressWithHttpInfo(accountSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountAddress> fetchAddressWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchAddressValidateBeforeCall(accountSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAddressAsync(String accountSid, String sid, final ApiCallback<ApiV2010AccountAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchAddressValidateBeforeCall(accountSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAddress
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read. (required)
     * @param customerName The &#x60;customer_name&#x60; of the Address resources to read. (optional)
     * @param friendlyName The string that identifies the Address resources to read. (optional)
     * @param isoCountry The ISO country code of the Address resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAddressCall(String accountSid, String customerName, String friendlyName, String isoCountry, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Addresses.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CustomerName", customerName));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (isoCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsoCountry", isoCountry));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAddressValidateBeforeCall(String accountSid, String customerName, String friendlyName, String isoCountry, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listAddress(Async)");
        }

        return listAddressCall(accountSid, customerName, friendlyName, isoCountry, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read. (required)
     * @param customerName The &#x60;customer_name&#x60; of the Address resources to read. (optional)
     * @param friendlyName The string that identifies the Address resources to read. (optional)
     * @param isoCountry The ISO country code of the Address resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAddressResponse listAddress(String accountSid, String customerName, String friendlyName, String isoCountry, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListAddressResponse> localVarResp = listAddressWithHttpInfo(accountSid, customerName, friendlyName, isoCountry, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read. (required)
     * @param customerName The &#x60;customer_name&#x60; of the Address resources to read. (optional)
     * @param friendlyName The string that identifies the Address resources to read. (optional)
     * @param isoCountry The ISO country code of the Address resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAddressResponse> listAddressWithHttpInfo(String accountSid, String customerName, String friendlyName, String isoCountry, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listAddressValidateBeforeCall(accountSid, customerName, friendlyName, isoCountry, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read. (required)
     * @param customerName The &#x60;customer_name&#x60; of the Address resources to read. (optional)
     * @param friendlyName The string that identifies the Address resources to read. (optional)
     * @param isoCountry The ISO country code of the Address resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAddressAsync(String accountSid, String customerName, String friendlyName, String isoCountry, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAddressValidateBeforeCall(accountSid, customerName, friendlyName, isoCountry, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAddress
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to update. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param city The city of the address. (optional)
     * @param customerName The name to associate with the address. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the address. It can be up to 64 characters long. (optional)
     * @param postalCode The postal code of the address. (optional)
     * @param region The state or region of the address. (optional)
     * @param street The number and street address of the address. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAddressCall(String accountSid, String sid, Boolean autoCorrectAddress, String city, String customerName, Boolean emergencyEnabled, String friendlyName, String postalCode, String region, String street, String streetSecondary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoCorrectAddress != null) {
            localVarFormParams.put("AutoCorrectAddress", autoCorrectAddress);
        }

        if (city != null) {
            localVarFormParams.put("City", city);
        }

        if (customerName != null) {
            localVarFormParams.put("CustomerName", customerName);
        }

        if (emergencyEnabled != null) {
            localVarFormParams.put("EmergencyEnabled", emergencyEnabled);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (street != null) {
            localVarFormParams.put("Street", street);
        }

        if (streetSecondary != null) {
            localVarFormParams.put("StreetSecondary", streetSecondary);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAddressValidateBeforeCall(String accountSid, String sid, Boolean autoCorrectAddress, String city, String customerName, Boolean emergencyEnabled, String friendlyName, String postalCode, String region, String street, String streetSecondary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateAddress(Async)");
        }

        return updateAddressCall(accountSid, sid, autoCorrectAddress, city, customerName, emergencyEnabled, friendlyName, postalCode, region, street, streetSecondary, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to update. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param city The city of the address. (optional)
     * @param customerName The name to associate with the address. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the address. It can be up to 64 characters long. (optional)
     * @param postalCode The postal code of the address. (optional)
     * @param region The state or region of the address. (optional)
     * @param street The number and street address of the address. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @return ApiV2010AccountAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountAddress updateAddress(String accountSid, String sid, Boolean autoCorrectAddress, String city, String customerName, Boolean emergencyEnabled, String friendlyName, String postalCode, String region, String street, String streetSecondary) throws ApiException {
        ApiResponse<ApiV2010AccountAddress> localVarResp = updateAddressWithHttpInfo(accountSid, sid, autoCorrectAddress, city, customerName, emergencyEnabled, friendlyName, postalCode, region, street, streetSecondary);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to update. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param city The city of the address. (optional)
     * @param customerName The name to associate with the address. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the address. It can be up to 64 characters long. (optional)
     * @param postalCode The postal code of the address. (optional)
     * @param region The state or region of the address. (optional)
     * @param street The number and street address of the address. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @return ApiResponse&lt;ApiV2010AccountAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountAddress> updateAddressWithHttpInfo(String accountSid, String sid, Boolean autoCorrectAddress, String city, String customerName, Boolean emergencyEnabled, String friendlyName, String postalCode, String region, String street, String streetSecondary) throws ApiException {
        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(accountSid, sid, autoCorrectAddress, city, customerName, emergencyEnabled, friendlyName, postalCode, region, street, streetSecondary, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Address resource to update. (required)
     * @param autoCorrectAddress Whether we should automatically correct the address. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If empty or &#x60;true&#x60;, we will correct the address you provide if necessary. If &#x60;false&#x60;, we won&#39;t alter the address you provide. (optional)
     * @param city The city of the address. (optional)
     * @param customerName The name to associate with the address. (optional)
     * @param emergencyEnabled Whether to enable emergency calling on the address. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param friendlyName A descriptive string that you create to describe the address. It can be up to 64 characters long. (optional)
     * @param postalCode The postal code of the address. (optional)
     * @param region The state or region of the address. (optional)
     * @param street The number and street address of the address. (optional)
     * @param streetSecondary The additional number and street address of the address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAddressAsync(String accountSid, String sid, Boolean autoCorrectAddress, String city, String customerName, Boolean emergencyEnabled, String friendlyName, String postalCode, String region, String street, String streetSecondary, final ApiCallback<ApiV2010AccountAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(accountSid, sid, autoCorrectAddress, city, customerName, emergencyEnabled, friendlyName, postalCode, region, street, streetSecondary, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
