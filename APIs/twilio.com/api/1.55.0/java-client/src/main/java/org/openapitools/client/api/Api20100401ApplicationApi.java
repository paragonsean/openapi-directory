/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountApplication;
import org.openapitools.client.model.ListApplicationResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401ApplicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401ApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApplication
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is the account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the new application. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback The URL we should call using a POST method to send status information about SMS messages sent by the application. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationCall(String accountSid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Applications.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarFormParams.put("ApiVersion", apiVersion);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messageStatusCallback != null) {
            localVarFormParams.put("MessageStatusCallback", messageStatusCallback);
        }

        if (publicApplicationConnectEnabled != null) {
            localVarFormParams.put("PublicApplicationConnectEnabled", publicApplicationConnectEnabled);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsStatusCallback != null) {
            localVarFormParams.put("SmsStatusCallback", smsStatusCallback);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (voiceCallerIdLookup != null) {
            localVarFormParams.put("VoiceCallerIdLookup", voiceCallerIdLookup);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicationValidateBeforeCall(String accountSid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createApplication(Async)");
        }

        return createApplicationCall(accountSid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * Create a new application within your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is the account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the new application. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback The URL we should call using a POST method to send status information about SMS messages sent by the application. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @return ApiV2010AccountApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountApplication createApplication(String accountSid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountApplication> localVarResp = createApplicationWithHttpInfo(accountSid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new application within your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is the account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the new application. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback The URL we should call using a POST method to send status information about SMS messages sent by the application. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @return ApiResponse&lt;ApiV2010AccountApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountApplication> createApplicationWithHttpInfo(String accountSid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(accountSid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new application within your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is the account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the new application. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback The URL we should call using a POST method to send status information about SMS messages sent by the application. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationAsync(String accountSid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<ApiV2010AccountApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(accountSid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApplication
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApplicationValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteApplication(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteApplication(Async)");
        }

        return deleteApplicationCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Delete the application by the specified application sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApplication(String accountSid, String sid) throws ApiException {
        deleteApplicationWithHttpInfo(accountSid, sid);
    }

    /**
     * 
     * Delete the application by the specified application sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApplicationWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteApplicationValidateBeforeCall(accountSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the application by the specified application sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationAsync(String accountSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApplicationValidateBeforeCall(accountSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchApplication
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchApplicationCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchApplicationValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchApplication(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchApplication(Async)");
        }

        return fetchApplicationCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Fetch the application specified by the provided sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to fetch. (required)
     * @return ApiV2010AccountApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountApplication fetchApplication(String accountSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountApplication> localVarResp = fetchApplicationWithHttpInfo(accountSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the application specified by the provided sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountApplication> fetchApplicationWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchApplicationValidateBeforeCall(accountSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the application specified by the provided sid
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchApplicationAsync(String accountSid, String sid, final ApiCallback<ApiV2010AccountApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchApplicationValidateBeforeCall(accountSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApplication
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. (required)
     * @param friendlyName The string that identifies the Application resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApplicationCall(String accountSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Applications.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApplicationValidateBeforeCall(String accountSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listApplication(Async)");
        }

        return listApplicationCall(accountSid, friendlyName, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of applications representing an application within the requesting account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. (required)
     * @param friendlyName The string that identifies the Application resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListApplicationResponse listApplication(String accountSid, String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListApplicationResponse> localVarResp = listApplicationWithHttpInfo(accountSid, friendlyName, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of applications representing an application within the requesting account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. (required)
     * @param friendlyName The string that identifies the Application resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApplicationResponse> listApplicationWithHttpInfo(String accountSid, String friendlyName, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listApplicationValidateBeforeCall(accountSid, friendlyName, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of applications representing an application within the requesting account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read. (required)
     * @param friendlyName The string that identifies the Application resources to read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApplicationAsync(String accountSid, String friendlyName, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApplicationValidateBeforeCall(accountSid, friendlyName, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApplication
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to update. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is your account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationCall(String accountSid, String sid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarFormParams.put("ApiVersion", apiVersion);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (messageStatusCallback != null) {
            localVarFormParams.put("MessageStatusCallback", messageStatusCallback);
        }

        if (publicApplicationConnectEnabled != null) {
            localVarFormParams.put("PublicApplicationConnectEnabled", publicApplicationConnectEnabled);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsStatusCallback != null) {
            localVarFormParams.put("SmsStatusCallback", smsStatusCallback);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (voiceCallerIdLookup != null) {
            localVarFormParams.put("VoiceCallerIdLookup", voiceCallerIdLookup);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicationValidateBeforeCall(String accountSid, String sid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateApplication(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateApplication(Async)");
        }

        return updateApplicationCall(accountSid, sid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);

    }

    /**
     * 
     * Updates the application&#39;s properties
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to update. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is your account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @return ApiV2010AccountApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountApplication updateApplication(String accountSid, String sid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountApplication> localVarResp = updateApplicationWithHttpInfo(accountSid, sid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the application&#39;s properties
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to update. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is your account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @return ApiResponse&lt;ApiV2010AccountApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountApplication> updateApplicationWithHttpInfo(String accountSid, String sid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(accountSid, sid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the application&#39;s properties
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Application resource to update. (required)
     * @param apiVersion The API version to use to start a new TwiML session. Can be: &#x60;2010-04-01&#x60; or &#x60;2008-08-01&#x60;. The default value is your account&#39;s default API version. (optional)
     * @param friendlyName A descriptive string that you create to describe the resource. It can be up to 64 characters long. (optional)
     * @param messageStatusCallback The URL we should call using a POST method to send message status information to your application. (optional)
     * @param publicApplicationConnectEnabled Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param smsFallbackMethod The HTTP method we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while retrieving or executing the TwiML from &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param smsStatusCallback Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceCallerIdLookup Whether we should look up the caller&#39;s caller-ID name from the CNAM database (additional charges apply). Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60;. (optional)
     * @param voiceUrl The URL we should call when the phone number assigned to this application receives a call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationAsync(String accountSid, String sid, String apiVersion, String friendlyName, URI messageStatusCallback, Boolean publicApplicationConnectEnabled, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsStatusCallback, URI smsUrl, URI statusCallback, String statusCallbackMethod, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, URI voiceUrl, final ApiCallback<ApiV2010AccountApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(accountSid, sid, apiVersion, friendlyName, messageStatusCallback, publicApplicationConnectEnabled, smsFallbackMethod, smsFallbackUrl, smsMethod, smsStatusCallback, smsUrl, statusCallback, statusCallbackMethod, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
