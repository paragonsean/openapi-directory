/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountCallCallRecording;
import org.openapitools.client.model.ApiV2010AccountConferenceConferenceRecording;
import org.openapitools.client.model.ApiV2010AccountRecording;
import org.openapitools.client.model.CallRecordingEnumStatus;
import org.openapitools.client.model.ConferenceRecordingEnumStatus;
import org.openapitools.client.model.ListCallRecordingResponse;
import org.openapitools.client.model.ListConferenceRecordingResponse;
import org.openapitools.client.model.ListRecordingResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401RecordingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401RecordingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401RecordingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCallRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with. (required)
     * @param recordingChannels The number of channels used in the recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. &#x60;mono&#x60; records all parties of the call into one channel. &#x60;dual&#x60; records each party of a 2-party call into separate channels. (optional)
     * @param recordingStatusCallback The URL we should call using the &#x60;recording_status_callback_method&#x60; on each recording event specified in  &#x60;recording_status_callback_event&#x60;. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback). (optional)
     * @param recordingStatusCallbackEvent The recording status events on which we should call the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60; and the default is &#x60;completed&#x60;. Separate multiple event values with a space. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use to call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio. (optional)
     * @param trim Whether to trim any leading and trailing silence in the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;do-not-trim&#x60;. &#x60;trim-silence&#x60; trims the silence from the beginning and end of the recording and &#x60;do-not-trim&#x60; does not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallRecordingCall(String accountSid, String callSid, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String trim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordingChannels != null) {
            localVarFormParams.put("RecordingChannels", recordingChannels);
        }

        if (recordingStatusCallback != null) {
            localVarFormParams.put("RecordingStatusCallback", recordingStatusCallback);
        }

        if (recordingStatusCallbackEvent != null) {
            localVarFormParams.put("RecordingStatusCallbackEvent", recordingStatusCallbackEvent);
        }

        if (recordingStatusCallbackMethod != null) {
            localVarFormParams.put("RecordingStatusCallbackMethod", recordingStatusCallbackMethod);
        }

        if (recordingTrack != null) {
            localVarFormParams.put("RecordingTrack", recordingTrack);
        }

        if (trim != null) {
            localVarFormParams.put("Trim", trim);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCallRecordingValidateBeforeCall(String accountSid, String callSid, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String trim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createCallRecording(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling createCallRecording(Async)");
        }

        return createCallRecordingCall(accountSid, callSid, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, trim, _callback);

    }

    /**
     * 
     * Create a recording for the call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with. (required)
     * @param recordingChannels The number of channels used in the recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. &#x60;mono&#x60; records all parties of the call into one channel. &#x60;dual&#x60; records each party of a 2-party call into separate channels. (optional)
     * @param recordingStatusCallback The URL we should call using the &#x60;recording_status_callback_method&#x60; on each recording event specified in  &#x60;recording_status_callback_event&#x60;. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback). (optional)
     * @param recordingStatusCallbackEvent The recording status events on which we should call the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60; and the default is &#x60;completed&#x60;. Separate multiple event values with a space. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use to call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio. (optional)
     * @param trim Whether to trim any leading and trailing silence in the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;do-not-trim&#x60;. &#x60;trim-silence&#x60; trims the silence from the beginning and end of the recording and &#x60;do-not-trim&#x60; does not. (optional)
     * @return ApiV2010AccountCallCallRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountCallCallRecording createCallRecording(String accountSid, String callSid, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String trim) throws ApiException {
        ApiResponse<ApiV2010AccountCallCallRecording> localVarResp = createCallRecordingWithHttpInfo(accountSid, callSid, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, trim);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a recording for the call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with. (required)
     * @param recordingChannels The number of channels used in the recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. &#x60;mono&#x60; records all parties of the call into one channel. &#x60;dual&#x60; records each party of a 2-party call into separate channels. (optional)
     * @param recordingStatusCallback The URL we should call using the &#x60;recording_status_callback_method&#x60; on each recording event specified in  &#x60;recording_status_callback_event&#x60;. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback). (optional)
     * @param recordingStatusCallbackEvent The recording status events on which we should call the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60; and the default is &#x60;completed&#x60;. Separate multiple event values with a space. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use to call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio. (optional)
     * @param trim Whether to trim any leading and trailing silence in the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;do-not-trim&#x60;. &#x60;trim-silence&#x60; trims the silence from the beginning and end of the recording and &#x60;do-not-trim&#x60; does not. (optional)
     * @return ApiResponse&lt;ApiV2010AccountCallCallRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountCallCallRecording> createCallRecordingWithHttpInfo(String accountSid, String callSid, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String trim) throws ApiException {
        okhttp3.Call localVarCall = createCallRecordingValidateBeforeCall(accountSid, callSid, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, trim, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a recording for the call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with. (required)
     * @param recordingChannels The number of channels used in the recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. &#x60;mono&#x60; records all parties of the call into one channel. &#x60;dual&#x60; records each party of a 2-party call into separate channels. (optional)
     * @param recordingStatusCallback The URL we should call using the &#x60;recording_status_callback_method&#x60; on each recording event specified in  &#x60;recording_status_callback_event&#x60;. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback). (optional)
     * @param recordingStatusCallbackEvent The recording status events on which we should call the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60; and the default is &#x60;completed&#x60;. Separate multiple event values with a space. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use to call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio. (optional)
     * @param trim Whether to trim any leading and trailing silence in the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;do-not-trim&#x60;. &#x60;trim-silence&#x60; trims the silence from the beginning and end of the recording and &#x60;do-not-trim&#x60; does not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCallRecordingAsync(String accountSid, String callSid, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String trim, final ApiCallback<ApiV2010AccountCallCallRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCallRecordingValidateBeforeCall(accountSid, callSid, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, trim, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCallRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallRecordingCall(String accountSid, String callSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCallRecordingValidateBeforeCall(String accountSid, String callSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteCallRecording(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling deleteCallRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCallRecording(Async)");
        }

        return deleteCallRecordingCall(accountSid, callSid, sid, _callback);

    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCallRecording(String accountSid, String callSid, String sid) throws ApiException {
        deleteCallRecordingWithHttpInfo(accountSid, callSid, sid);
    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCallRecordingWithHttpInfo(String accountSid, String callSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCallRecordingValidateBeforeCall(accountSid, callSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCallRecordingAsync(String accountSid, String callSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCallRecordingValidateBeforeCall(accountSid, callSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConferenceRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConferenceRecordingCall(String accountSid, String conferenceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConferenceRecordingValidateBeforeCall(String accountSid, String conferenceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteConferenceRecording(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling deleteConferenceRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteConferenceRecording(Async)");
        }

        return deleteConferenceRecordingCall(accountSid, conferenceSid, sid, _callback);

    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConferenceRecording(String accountSid, String conferenceSid, String sid) throws ApiException {
        deleteConferenceRecordingWithHttpInfo(accountSid, conferenceSid, sid);
    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConferenceRecordingWithHttpInfo(String accountSid, String conferenceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConferenceRecordingAsync(String accountSid, String conferenceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordingCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordingValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteRecording(Async)");
        }

        return deleteRecordingCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRecording(String accountSid, String sid) throws ApiException {
        deleteRecordingWithHttpInfo(accountSid, sid);
    }

    /**
     * 
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRecordingWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordingValidateBeforeCall(accountSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a recording from your account
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordingAsync(String accountSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordingValidateBeforeCall(accountSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCallRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCallRecordingCall(String accountSid, String callSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCallRecordingValidateBeforeCall(String accountSid, String callSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchCallRecording(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling fetchCallRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCallRecording(Async)");
        }

        return fetchCallRecordingCall(accountSid, callSid, sid, _callback);

    }

    /**
     * 
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @return ApiV2010AccountCallCallRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountCallCallRecording fetchCallRecording(String accountSid, String callSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountCallCallRecording> localVarResp = fetchCallRecordingWithHttpInfo(accountSid, callSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountCallCallRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountCallCallRecording> fetchCallRecordingWithHttpInfo(String accountSid, String callSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCallRecordingValidateBeforeCall(accountSid, callSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCallRecordingAsync(String accountSid, String callSid, String sid, final ApiCallback<ApiV2010AccountCallCallRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCallRecordingValidateBeforeCall(accountSid, callSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchConferenceRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConferenceRecordingCall(String accountSid, String conferenceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchConferenceRecordingValidateBeforeCall(String accountSid, String conferenceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchConferenceRecording(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling fetchConferenceRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchConferenceRecording(Async)");
        }

        return fetchConferenceRecordingCall(accountSid, conferenceSid, sid, _callback);

    }

    /**
     * 
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch. (required)
     * @return ApiV2010AccountConferenceConferenceRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountConferenceConferenceRecording fetchConferenceRecording(String accountSid, String conferenceSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountConferenceConferenceRecording> localVarResp = fetchConferenceRecordingWithHttpInfo(accountSid, conferenceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountConferenceConferenceRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountConferenceConferenceRecording> fetchConferenceRecordingWithHttpInfo(String accountSid, String conferenceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceConferenceRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of a recording for a call
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchConferenceRecordingAsync(String accountSid, String conferenceSid, String sid, final ApiCallback<ApiV2010AccountConferenceConferenceRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceConferenceRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRecordingCall(String accountSid, String sid, Boolean includeSoftDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSoftDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeSoftDeleted", includeSoftDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRecordingValidateBeforeCall(String accountSid, String sid, Boolean includeSoftDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchRecording(Async)");
        }

        return fetchRecordingCall(accountSid, sid, includeSoftDeleted, _callback);

    }

    /**
     * 
     * Fetch an instance of a recording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @return ApiV2010AccountRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountRecording fetchRecording(String accountSid, String sid, Boolean includeSoftDeleted) throws ApiException {
        ApiResponse<ApiV2010AccountRecording> localVarResp = fetchRecordingWithHttpInfo(accountSid, sid, includeSoftDeleted);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of a recording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @return ApiResponse&lt;ApiV2010AccountRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountRecording> fetchRecordingWithHttpInfo(String accountSid, String sid, Boolean includeSoftDeleted) throws ApiException {
        okhttp3.Call localVarCall = fetchRecordingValidateBeforeCall(accountSid, sid, includeSoftDeleted, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of a recording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to fetch. (required)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRecordingAsync(String accountSid, String sid, Boolean includeSoftDeleted, final ApiCallback<ApiV2010AccountRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRecordingValidateBeforeCall(accountSid, sid, includeSoftDeleted, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCallRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallRecordingCall(String accountSid, String callSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated", dateCreated));
        }

        if (dateCreatedLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&lt;", dateCreatedLessThan));
        }

        if (dateCreatedGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&gt;", dateCreatedGreaterThan));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCallRecordingValidateBeforeCall(String accountSid, String callSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listCallRecording(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling listCallRecording(Async)");
        }

        return listCallRecordingCall(accountSid, callSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCallRecordingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCallRecordingResponse listCallRecording(String accountSid, String callSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCallRecordingResponse> localVarResp = listCallRecordingWithHttpInfo(accountSid, callSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCallRecordingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCallRecordingResponse> listCallRecordingWithHttpInfo(String accountSid, String callSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCallRecordingValidateBeforeCall(accountSid, callSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCallRecordingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCallRecordingAsync(String accountSid, String callSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCallRecordingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCallRecordingValidateBeforeCall(accountSid, callSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCallRecordingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConferenceRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferenceRecordingCall(String accountSid, String conferenceSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated", dateCreated));
        }

        if (dateCreatedLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&lt;", dateCreatedLessThan));
        }

        if (dateCreatedGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&gt;", dateCreatedGreaterThan));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConferenceRecordingValidateBeforeCall(String accountSid, String conferenceSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listConferenceRecording(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling listConferenceRecording(Async)");
        }

        return listConferenceRecordingCall(accountSid, conferenceSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListConferenceRecordingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListConferenceRecordingResponse listConferenceRecording(String accountSid, String conferenceSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListConferenceRecordingResponse> localVarResp = listConferenceRecordingWithHttpInfo(accountSid, conferenceSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListConferenceRecordingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListConferenceRecordingResponse> listConferenceRecordingWithHttpInfo(String accountSid, String conferenceSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListConferenceRecordingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (required)
     * @param dateCreated The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedLessThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param dateCreatedGreaterThan The &#x60;date_created&#x60; value, specified as &#x60;YYYY-MM-DD&#x60;, of the resources to read. You can also specify inequality: &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60; will return recordings generated at or before midnight on a given date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; returns recordings generated at or after midnight on a date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConferenceRecordingAsync(String accountSid, String conferenceSid, LocalDate dateCreated, LocalDate dateCreatedLessThan, LocalDate dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListConferenceRecordingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListConferenceRecordingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param dateCreated Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (optional)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (optional)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRecordingCall(String accountSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, String callSid, String conferenceSid, Boolean includeSoftDeleted, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Recordings.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated", dateCreated));
        }

        if (dateCreatedLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&lt;", dateCreatedLessThan));
        }

        if (dateCreatedGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&gt;", dateCreatedGreaterThan));
        }

        if (callSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallSid", callSid));
        }

        if (conferenceSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConferenceSid", conferenceSid));
        }

        if (includeSoftDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeSoftDeleted", includeSoftDeleted));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecordingValidateBeforeCall(String accountSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, String callSid, String conferenceSid, Boolean includeSoftDeleted, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listRecording(Async)");
        }

        return listRecordingCall(accountSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, callSid, conferenceSid, includeSoftDeleted, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of recordings belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param dateCreated Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (optional)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (optional)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListRecordingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRecordingResponse listRecording(String accountSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, String callSid, String conferenceSid, Boolean includeSoftDeleted, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListRecordingResponse> localVarResp = listRecordingWithHttpInfo(accountSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, callSid, conferenceSid, includeSoftDeleted, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of recordings belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param dateCreated Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (optional)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (optional)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListRecordingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRecordingResponse> listRecordingWithHttpInfo(String accountSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, String callSid, String conferenceSid, Boolean includeSoftDeleted, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listRecordingValidateBeforeCall(accountSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, callSid, conferenceSid, includeSoftDeleted, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListRecordingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of recordings belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read. (required)
     * @param dateCreated Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include recordings that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read recordings that were created on this date. You can also specify an inequality, such as &#x60;DateCreated&lt;&#x3D;YYYY-MM-DD&#x60;, to read recordings that were created on or before midnight of this date, and &#x60;DateCreated&gt;&#x3D;YYYY-MM-DD&#x60; to read recordings that were created on or after midnight of this date. (optional)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read. (optional)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to read. (optional)
     * @param includeSoftDeleted A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRecordingAsync(String accountSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, String callSid, String conferenceSid, Boolean includeSoftDeleted, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListRecordingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecordingValidateBeforeCall(accountSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, callSid, conferenceSid, includeSoftDeleted, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListRecordingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCallRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to update. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallRecordingCall(String accountSid, String callSid, String sid, CallRecordingEnumStatus status, String pauseBehavior, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pauseBehavior != null) {
            localVarFormParams.put("PauseBehavior", pauseBehavior);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallRecordingValidateBeforeCall(String accountSid, String callSid, String sid, CallRecordingEnumStatus status, String pauseBehavior, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateCallRecording(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling updateCallRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateCallRecording(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateCallRecording(Async)");
        }

        return updateCallRecordingCall(accountSid, callSid, sid, status, pauseBehavior, _callback);

    }

    /**
     * 
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to update. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @return ApiV2010AccountCallCallRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountCallCallRecording updateCallRecording(String accountSid, String callSid, String sid, CallRecordingEnumStatus status, String pauseBehavior) throws ApiException {
        ApiResponse<ApiV2010AccountCallCallRecording> localVarResp = updateCallRecordingWithHttpInfo(accountSid, callSid, sid, status, pauseBehavior);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to update. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @return ApiResponse&lt;ApiV2010AccountCallCallRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountCallCallRecording> updateCallRecordingWithHttpInfo(String accountSid, String callSid, String sid, CallRecordingEnumStatus status, String pauseBehavior) throws ApiException {
        okhttp3.Call localVarCall = updateCallRecordingValidateBeforeCall(accountSid, callSid, sid, status, pauseBehavior, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Recording resource to update. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallRecordingAsync(String accountSid, String callSid, String sid, CallRecordingEnumStatus status, String pauseBehavior, final ApiCallback<ApiV2010AccountCallCallRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallRecordingValidateBeforeCall(accountSid, callSid, sid, status, pauseBehavior, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallCallRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConferenceRecording
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use &#x60;Twilio.CURRENT&#x60; to reference the current active recording. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConferenceRecordingCall(String accountSid, String conferenceSid, String sid, ConferenceRecordingEnumStatus status, String pauseBehavior, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pauseBehavior != null) {
            localVarFormParams.put("PauseBehavior", pauseBehavior);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConferenceRecordingValidateBeforeCall(String accountSid, String conferenceSid, String sid, ConferenceRecordingEnumStatus status, String pauseBehavior, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateConferenceRecording(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling updateConferenceRecording(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateConferenceRecording(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateConferenceRecording(Async)");
        }

        return updateConferenceRecordingCall(accountSid, conferenceSid, sid, status, pauseBehavior, _callback);

    }

    /**
     * 
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use &#x60;Twilio.CURRENT&#x60; to reference the current active recording. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @return ApiV2010AccountConferenceConferenceRecording
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountConferenceConferenceRecording updateConferenceRecording(String accountSid, String conferenceSid, String sid, ConferenceRecordingEnumStatus status, String pauseBehavior) throws ApiException {
        ApiResponse<ApiV2010AccountConferenceConferenceRecording> localVarResp = updateConferenceRecordingWithHttpInfo(accountSid, conferenceSid, sid, status, pauseBehavior);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use &#x60;Twilio.CURRENT&#x60; to reference the current active recording. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @return ApiResponse&lt;ApiV2010AccountConferenceConferenceRecording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountConferenceConferenceRecording> updateConferenceRecordingWithHttpInfo(String accountSid, String conferenceSid, String sid, ConferenceRecordingEnumStatus status, String pauseBehavior) throws ApiException {
        okhttp3.Call localVarCall = updateConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, status, pauseBehavior, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceConferenceRecording>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update. (required)
     * @param conferenceSid The Conference SID that identifies the conference associated with the recording to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use &#x60;Twilio.CURRENT&#x60; to reference the current active recording. (required)
     * @param status  (required)
     * @param pauseBehavior Whether to record during a pause. Can be: &#x60;skip&#x60; or &#x60;silence&#x60; and the default is &#x60;silence&#x60;. &#x60;skip&#x60; does not record during the pause period, while &#x60;silence&#x60; will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting &#x60;status&#x60; is set to &#x60;paused&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConferenceRecordingAsync(String accountSid, String conferenceSid, String sid, ConferenceRecordingEnumStatus status, String pauseBehavior, final ApiCallback<ApiV2010AccountConferenceConferenceRecording> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConferenceRecordingValidateBeforeCall(accountSid, conferenceSid, sid, status, pauseBehavior, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceConferenceRecording>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
