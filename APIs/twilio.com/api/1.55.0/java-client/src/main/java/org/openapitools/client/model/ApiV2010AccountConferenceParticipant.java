/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ParticipantEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV2010AccountConferenceParticipant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:00.794253-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV2010AccountConferenceParticipant {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CALL_SID = "call_sid";
  @SerializedName(SERIALIZED_NAME_CALL_SID)
  private String callSid;

  public static final String SERIALIZED_NAME_CALL_SID_TO_COACH = "call_sid_to_coach";
  @SerializedName(SERIALIZED_NAME_CALL_SID_TO_COACH)
  private String callSidToCoach;

  public static final String SERIALIZED_NAME_COACHING = "coaching";
  @SerializedName(SERIALIZED_NAME_COACHING)
  private Boolean coaching;

  public static final String SERIALIZED_NAME_CONFERENCE_SID = "conference_sid";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_SID)
  private String conferenceSid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private String dateUpdated;

  public static final String SERIALIZED_NAME_END_CONFERENCE_ON_EXIT = "end_conference_on_exit";
  @SerializedName(SERIALIZED_NAME_END_CONFERENCE_ON_EXIT)
  private Boolean endConferenceOnExit;

  public static final String SERIALIZED_NAME_HOLD = "hold";
  @SerializedName(SERIALIZED_NAME_HOLD)
  private Boolean hold;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MUTED = "muted";
  @SerializedName(SERIALIZED_NAME_MUTED)
  private Boolean muted;

  public static final String SERIALIZED_NAME_START_CONFERENCE_ON_ENTER = "start_conference_on_enter";
  @SerializedName(SERIALIZED_NAME_START_CONFERENCE_ON_ENTER)
  private Boolean startConferenceOnEnter;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ParticipantEnumStatus status;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ApiV2010AccountConferenceParticipant() {
  }

  public ApiV2010AccountConferenceParticipant accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ApiV2010AccountConferenceParticipant callSid(String callSid) {
    this.callSid = callSid;
    return this;
  }

  /**
   * The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.
   * @return callSid
   */
  @javax.annotation.Nullable
  public String getCallSid() {
    return callSid;
  }

  public void setCallSid(String callSid) {
    this.callSid = callSid;
  }


  public ApiV2010AccountConferenceParticipant callSidToCoach(String callSidToCoach) {
    this.callSidToCoach = callSidToCoach;
    return this;
  }

  /**
   * The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;.
   * @return callSidToCoach
   */
  @javax.annotation.Nullable
  public String getCallSidToCoach() {
    return callSidToCoach;
  }

  public void setCallSidToCoach(String callSidToCoach) {
    this.callSidToCoach = callSidToCoach;
  }


  public ApiV2010AccountConferenceParticipant coaching(Boolean coaching) {
    this.coaching = coaching;
    return this;
  }

  /**
   * Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined.
   * @return coaching
   */
  @javax.annotation.Nullable
  public Boolean getCoaching() {
    return coaching;
  }

  public void setCoaching(Boolean coaching) {
    this.coaching = coaching;
  }


  public ApiV2010AccountConferenceParticipant conferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
    return this;
  }

  /**
   * The SID of the conference the participant is in.
   * @return conferenceSid
   */
  @javax.annotation.Nullable
  public String getConferenceSid() {
    return conferenceSid;
  }

  public void setConferenceSid(String conferenceSid) {
    this.conferenceSid = conferenceSid;
  }


  public ApiV2010AccountConferenceParticipant dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ApiV2010AccountConferenceParticipant dateUpdated(String dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public String getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(String dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ApiV2010AccountConferenceParticipant endConferenceOnExit(Boolean endConferenceOnExit) {
    this.endConferenceOnExit = endConferenceOnExit;
    return this;
  }

  /**
   * Whether the conference ends when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. If &#x60;true&#x60;, the conference ends and all other participants drop out when the participant leaves.
   * @return endConferenceOnExit
   */
  @javax.annotation.Nullable
  public Boolean getEndConferenceOnExit() {
    return endConferenceOnExit;
  }

  public void setEndConferenceOnExit(Boolean endConferenceOnExit) {
    this.endConferenceOnExit = endConferenceOnExit;
  }


  public ApiV2010AccountConferenceParticipant hold(Boolean hold) {
    this.hold = hold;
    return this;
  }

  /**
   * Whether the participant is on hold. Can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return hold
   */
  @javax.annotation.Nullable
  public Boolean getHold() {
    return hold;
  }

  public void setHold(Boolean hold) {
    this.hold = hold;
  }


  public ApiV2010AccountConferenceParticipant label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ApiV2010AccountConferenceParticipant muted(Boolean muted) {
    this.muted = muted;
    return this;
  }

  /**
   * Whether the participant is muted. Can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return muted
   */
  @javax.annotation.Nullable
  public Boolean getMuted() {
    return muted;
  }

  public void setMuted(Boolean muted) {
    this.muted = muted;
  }


  public ApiV2010AccountConferenceParticipant startConferenceOnEnter(Boolean startConferenceOnEnter) {
    this.startConferenceOnEnter = startConferenceOnEnter;
    return this;
  }

  /**
   * Whether the conference starts when the participant joins the conference, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
   * @return startConferenceOnEnter
   */
  @javax.annotation.Nullable
  public Boolean getStartConferenceOnEnter() {
    return startConferenceOnEnter;
  }

  public void setStartConferenceOnEnter(Boolean startConferenceOnEnter) {
    this.startConferenceOnEnter = startConferenceOnEnter;
  }


  public ApiV2010AccountConferenceParticipant status(ParticipantEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ParticipantEnumStatus getStatus() {
    return status;
  }

  public void setStatus(ParticipantEnumStatus status) {
    this.status = status;
  }


  public ApiV2010AccountConferenceParticipant uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the resource, relative to &#x60;https://api.twilio.com&#x60;.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV2010AccountConferenceParticipant apiV2010AccountConferenceParticipant = (ApiV2010AccountConferenceParticipant) o;
    return Objects.equals(this.accountSid, apiV2010AccountConferenceParticipant.accountSid) &&
        Objects.equals(this.callSid, apiV2010AccountConferenceParticipant.callSid) &&
        Objects.equals(this.callSidToCoach, apiV2010AccountConferenceParticipant.callSidToCoach) &&
        Objects.equals(this.coaching, apiV2010AccountConferenceParticipant.coaching) &&
        Objects.equals(this.conferenceSid, apiV2010AccountConferenceParticipant.conferenceSid) &&
        Objects.equals(this.dateCreated, apiV2010AccountConferenceParticipant.dateCreated) &&
        Objects.equals(this.dateUpdated, apiV2010AccountConferenceParticipant.dateUpdated) &&
        Objects.equals(this.endConferenceOnExit, apiV2010AccountConferenceParticipant.endConferenceOnExit) &&
        Objects.equals(this.hold, apiV2010AccountConferenceParticipant.hold) &&
        Objects.equals(this.label, apiV2010AccountConferenceParticipant.label) &&
        Objects.equals(this.muted, apiV2010AccountConferenceParticipant.muted) &&
        Objects.equals(this.startConferenceOnEnter, apiV2010AccountConferenceParticipant.startConferenceOnEnter) &&
        Objects.equals(this.status, apiV2010AccountConferenceParticipant.status) &&
        Objects.equals(this.uri, apiV2010AccountConferenceParticipant.uri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, callSid, callSidToCoach, coaching, conferenceSid, dateCreated, dateUpdated, endConferenceOnExit, hold, label, muted, startConferenceOnEnter, status, uri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV2010AccountConferenceParticipant {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    callSid: ").append(toIndentedString(callSid)).append("\n");
    sb.append("    callSidToCoach: ").append(toIndentedString(callSidToCoach)).append("\n");
    sb.append("    coaching: ").append(toIndentedString(coaching)).append("\n");
    sb.append("    conferenceSid: ").append(toIndentedString(conferenceSid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    endConferenceOnExit: ").append(toIndentedString(endConferenceOnExit)).append("\n");
    sb.append("    hold: ").append(toIndentedString(hold)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    startConferenceOnEnter: ").append(toIndentedString(startConferenceOnEnter)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("call_sid");
    openapiFields.add("call_sid_to_coach");
    openapiFields.add("coaching");
    openapiFields.add("conference_sid");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("end_conference_on_exit");
    openapiFields.add("hold");
    openapiFields.add("label");
    openapiFields.add("muted");
    openapiFields.add("start_conference_on_enter");
    openapiFields.add("status");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV2010AccountConferenceParticipant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV2010AccountConferenceParticipant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV2010AccountConferenceParticipant is not found in the empty JSON string", ApiV2010AccountConferenceParticipant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV2010AccountConferenceParticipant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV2010AccountConferenceParticipant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("call_sid") != null && !jsonObj.get("call_sid").isJsonNull()) && !jsonObj.get("call_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_sid").toString()));
      }
      if ((jsonObj.get("call_sid_to_coach") != null && !jsonObj.get("call_sid_to_coach").isJsonNull()) && !jsonObj.get("call_sid_to_coach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_sid_to_coach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_sid_to_coach").toString()));
      }
      if ((jsonObj.get("conference_sid") != null && !jsonObj.get("conference_sid").isJsonNull()) && !jsonObj.get("conference_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference_sid").toString()));
      }
      if ((jsonObj.get("date_created") != null && !jsonObj.get("date_created").isJsonNull()) && !jsonObj.get("date_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_created").toString()));
      }
      if ((jsonObj.get("date_updated") != null && !jsonObj.get("date_updated").isJsonNull()) && !jsonObj.get("date_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_updated").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ParticipantEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV2010AccountConferenceParticipant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV2010AccountConferenceParticipant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV2010AccountConferenceParticipant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV2010AccountConferenceParticipant.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV2010AccountConferenceParticipant>() {
           @Override
           public void write(JsonWriter out, ApiV2010AccountConferenceParticipant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV2010AccountConferenceParticipant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV2010AccountConferenceParticipant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV2010AccountConferenceParticipant
   * @throws IOException if the JSON string is invalid with respect to ApiV2010AccountConferenceParticipant
   */
  public static ApiV2010AccountConferenceParticipant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV2010AccountConferenceParticipant.class);
  }

  /**
   * Convert an instance of ApiV2010AccountConferenceParticipant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

