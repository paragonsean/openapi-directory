/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:00.794253-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost {
  public static final String SERIALIZED_NAME_ADDRESS_REQUIREMENTS = "address_requirements";
  @SerializedName(SERIALIZED_NAME_ADDRESS_REQUIREMENTS)
  private String addressRequirements;

  public static final String SERIALIZED_NAME_BETA = "beta";
  @SerializedName(SERIALIZED_NAME_BETA)
  private Boolean beta;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities capabilities;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ISO_COUNTRY = "iso_country";
  @SerializedName(SERIALIZED_NAME_ISO_COUNTRY)
  private String isoCountry;

  public static final String SERIALIZED_NAME_LATA = "lata";
  @SerializedName(SERIALIZED_NAME_LATA)
  private String lata;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_RATE_CENTER = "rate_center";
  @SerializedName(SERIALIZED_NAME_RATE_CENTER)
  private String rateCenter;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost() {
  }

  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost addressRequirements(String addressRequirements) {
    this.addressRequirements = addressRequirements;
    return this;
  }

  /**
   * The type of [Address](https://www.twilio.com/docs/usage/api/address) resource the phone number requires. Can be: &#x60;none&#x60;, &#x60;any&#x60;, &#x60;local&#x60;, or &#x60;foreign&#x60;. &#x60;none&#x60; means no address is required. &#x60;any&#x60; means an address is required, but it can be anywhere in the world. &#x60;local&#x60; means an address in the phone number&#39;s country is required. &#x60;foreign&#x60; means an address outside of the phone number&#39;s country is required.
   * @return addressRequirements
   */
  @javax.annotation.Nullable
  public String getAddressRequirements() {
    return addressRequirements;
  }

  public void setAddressRequirements(String addressRequirements) {
    this.addressRequirements = addressRequirements;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost beta(Boolean beta) {
    this.beta = beta;
    return this;
  }

  /**
   * Whether the phone number is new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
   * @return beta
   */
  @javax.annotation.Nullable
  public Boolean getBeta() {
    return beta;
  }

  public void setBeta(Boolean beta) {
    this.beta = beta;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost capabilities(ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * A formatted version of the phone number.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost isoCountry(String isoCountry) {
    this.isoCountry = isoCountry;
    return this;
  }

  /**
   * The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of this phone number.
   * @return isoCountry
   */
  @javax.annotation.Nullable
  public String getIsoCountry() {
    return isoCountry;
  }

  public void setIsoCountry(String isoCountry) {
    this.isoCountry = isoCountry;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost lata(String lata) {
    this.lata = lata;
    return this;
  }

  /**
   * The [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) of this phone number. Available for only phone numbers from the US and Canada.
   * @return lata
   */
  @javax.annotation.Nullable
  public String getLata() {
    return lata;
  }

  public void setLata(String lata) {
    this.lata = lata;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of this phone number&#39;s location. Available for only phone numbers from the US and Canada.
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost locality(String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * The locality or city of this phone number&#39;s location.
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(String locality) {
    this.locality = locality;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of this phone number&#39;s location. Available for only phone numbers from the US and Canada.
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The postal or ZIP code of this phone number&#39;s location. Available for only phone numbers from the US and Canada.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost rateCenter(String rateCenter) {
    this.rateCenter = rateCenter;
    return this;
  }

  /**
   * The [rate center](https://en.wikipedia.org/wiki/Telephone_exchange) of this phone number. Available for only phone numbers from the US and Canada.
   * @return rateCenter
   */
  @javax.annotation.Nullable
  public String getRateCenter() {
    return rateCenter;
  }

  public void setRateCenter(String rateCenter) {
    this.rateCenter = rateCenter;
  }


  public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The two-letter state or province abbreviation of this phone number&#39;s location. Available for only phone numbers from the US and Canada.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost = (ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost) o;
    return Objects.equals(this.addressRequirements, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.addressRequirements) &&
        Objects.equals(this.beta, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.beta) &&
        Objects.equals(this.capabilities, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.capabilities) &&
        Objects.equals(this.friendlyName, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.friendlyName) &&
        Objects.equals(this.isoCountry, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.isoCountry) &&
        Objects.equals(this.lata, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.lata) &&
        Objects.equals(this.latitude, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.latitude) &&
        Objects.equals(this.locality, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.locality) &&
        Objects.equals(this.longitude, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.longitude) &&
        Objects.equals(this.phoneNumber, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.phoneNumber) &&
        Objects.equals(this.postalCode, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.postalCode) &&
        Objects.equals(this.rateCenter, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.rateCenter) &&
        Objects.equals(this.region, apiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.region);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressRequirements, beta, capabilities, friendlyName, isoCountry, lata, latitude, locality, longitude, phoneNumber, postalCode, rateCenter, region);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost {\n");
    sb.append("    addressRequirements: ").append(toIndentedString(addressRequirements)).append("\n");
    sb.append("    beta: ").append(toIndentedString(beta)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    isoCountry: ").append(toIndentedString(isoCountry)).append("\n");
    sb.append("    lata: ").append(toIndentedString(lata)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    rateCenter: ").append(toIndentedString(rateCenter)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_requirements");
    openapiFields.add("beta");
    openapiFields.add("capabilities");
    openapiFields.add("friendly_name");
    openapiFields.add("iso_country");
    openapiFields.add("lata");
    openapiFields.add("latitude");
    openapiFields.add("locality");
    openapiFields.add("longitude");
    openapiFields.add("phone_number");
    openapiFields.add("postal_code");
    openapiFields.add("rate_center");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost is not found in the empty JSON string", ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_requirements") != null && !jsonObj.get("address_requirements").isJsonNull()) && !jsonObj.get("address_requirements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_requirements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_requirements").toString()));
      }
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocalCapabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("iso_country") != null && !jsonObj.get("iso_country").isJsonNull()) && !jsonObj.get("iso_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_country").toString()));
      }
      if ((jsonObj.get("lata") != null && !jsonObj.get("lata").isJsonNull()) && !jsonObj.get("lata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lata").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("rate_center") != null && !jsonObj.get("rate_center").isJsonNull()) && !jsonObj.get("rate_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_center").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost>() {
           @Override
           public void write(JsonWriter out, ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost
   * @throws IOException if the JSON string is invalid with respect to ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost
   */
  public static ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost.class);
  }

  /**
   * Convert an instance of ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

