/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.UsageRecordThisMonthEnumCategory;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:00.794253-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV2010AccountUsageUsageRecordUsageRecordThisMonth {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_AS_OF = "as_of";
  @SerializedName(SERIALIZED_NAME_AS_OF)
  private String asOf;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private UsageRecordThisMonthEnumCategory category;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_COUNT_UNIT = "count_unit";
  @SerializedName(SERIALIZED_NAME_COUNT_UNIT)
  private String countUnit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_UNIT = "price_unit";
  @SerializedName(SERIALIZED_NAME_PRICE_UNIT)
  private String priceUnit;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_SUBRESOURCE_URIS = "subresource_uris";
  @SerializedName(SERIALIZED_NAME_SUBRESOURCE_URIS)
  private Object subresourceUris;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private String usage;

  public static final String SERIALIZED_NAME_USAGE_UNIT = "usage_unit";
  @SerializedName(SERIALIZED_NAME_USAGE_UNIT)
  private String usageUnit;

  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth() {
  }

  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that accrued the usage.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * The API version used to create the resource.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth asOf(String asOf) {
    this.asOf = asOf;
    return this;
  }

  /**
   * Usage records up to date as of this timestamp, formatted as YYYY-MM-DDTHH:MM:SS+00:00. All timestamps are in GMT
   * @return asOf
   */
  @javax.annotation.Nullable
  public String getAsOf() {
    return asOf;
  }

  public void setAsOf(String asOf) {
    this.asOf = asOf;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth category(UsageRecordThisMonthEnumCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public UsageRecordThisMonthEnumCategory getCategory() {
    return category;
  }

  public void setCategory(UsageRecordThisMonthEnumCategory category) {
    this.category = category;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth count(String count) {
    this.count = count;
    return this;
  }

  /**
   * The number of usage events, such as the number of calls.
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth countUnit(String countUnit) {
    this.countUnit = countUnit;
    return this;
  }

  /**
   * The units in which &#x60;count&#x60; is measured, such as &#x60;calls&#x60; for calls or &#x60;messages&#x60; for SMS.
   * @return countUnit
   */
  @javax.annotation.Nullable
  public String getCountUnit() {
    return countUnit;
  }

  public void setCountUnit(String countUnit) {
    this.countUnit = countUnit;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A plain-language description of the usage category.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The last date for which usage is included in the UsageRecord. The date is specified in GMT and formatted as &#x60;YYYY-MM-DD&#x60;.
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The total price of the usage in the currency specified in &#x60;price_unit&#x60; and associated with the account.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth priceUnit(String priceUnit) {
    this.priceUnit = priceUnit;
    return this;
  }

  /**
   * The currency in which &#x60;price&#x60; is measured, in [ISO 4127](https://www.iso.org/iso/home/standards/currency_codes.htm) format, such as &#x60;usd&#x60;, &#x60;eur&#x60;, and &#x60;jpy&#x60;.
   * @return priceUnit
   */
  @javax.annotation.Nullable
  public String getPriceUnit() {
    return priceUnit;
  }

  public void setPriceUnit(String priceUnit) {
    this.priceUnit = priceUnit;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The first date for which usage is included in this UsageRecord. The date is specified in GMT and formatted as &#x60;YYYY-MM-DD&#x60;.
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth subresourceUris(Object subresourceUris) {
    this.subresourceUris = subresourceUris;
    return this;
  }

  /**
   * A list of related resources identified by their URIs. For more information, see [List Subresources](https://www.twilio.com/docs/usage/api/usage-record#list-subresources).
   * @return subresourceUris
   */
  @javax.annotation.Nullable
  public Object getSubresourceUris() {
    return subresourceUris;
  }

  public void setSubresourceUris(Object subresourceUris) {
    this.subresourceUris = subresourceUris;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the resource, relative to &#x60;https://api.twilio.com&#x60;.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth usage(String usage) {
    this.usage = usage;
    return this;
  }

  /**
   * The amount used to bill usage and measured in units described in &#x60;usage_unit&#x60;.
   * @return usage
   */
  @javax.annotation.Nullable
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }


  public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth usageUnit(String usageUnit) {
    this.usageUnit = usageUnit;
    return this;
  }

  /**
   * The units in which &#x60;usage&#x60; is measured, such as &#x60;minutes&#x60; for calls or &#x60;messages&#x60; for SMS.
   * @return usageUnit
   */
  @javax.annotation.Nullable
  public String getUsageUnit() {
    return usageUnit;
  }

  public void setUsageUnit(String usageUnit) {
    this.usageUnit = usageUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV2010AccountUsageUsageRecordUsageRecordThisMonth apiV2010AccountUsageUsageRecordUsageRecordThisMonth = (ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) o;
    return Objects.equals(this.accountSid, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.accountSid) &&
        Objects.equals(this.apiVersion, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.apiVersion) &&
        Objects.equals(this.asOf, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.asOf) &&
        Objects.equals(this.category, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.category) &&
        Objects.equals(this.count, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.count) &&
        Objects.equals(this.countUnit, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.countUnit) &&
        Objects.equals(this.description, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.description) &&
        Objects.equals(this.endDate, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.endDate) &&
        Objects.equals(this.price, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.price) &&
        Objects.equals(this.priceUnit, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.priceUnit) &&
        Objects.equals(this.startDate, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.startDate) &&
        Objects.equals(this.subresourceUris, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.subresourceUris) &&
        Objects.equals(this.uri, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.uri) &&
        Objects.equals(this.usage, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.usage) &&
        Objects.equals(this.usageUnit, apiV2010AccountUsageUsageRecordUsageRecordThisMonth.usageUnit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, apiVersion, asOf, category, count, countUnit, description, endDate, price, priceUnit, startDate, subresourceUris, uri, usage, usageUnit);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV2010AccountUsageUsageRecordUsageRecordThisMonth {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    asOf: ").append(toIndentedString(asOf)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    countUnit: ").append(toIndentedString(countUnit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceUnit: ").append(toIndentedString(priceUnit)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    subresourceUris: ").append(toIndentedString(subresourceUris)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    usageUnit: ").append(toIndentedString(usageUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("api_version");
    openapiFields.add("as_of");
    openapiFields.add("category");
    openapiFields.add("count");
    openapiFields.add("count_unit");
    openapiFields.add("description");
    openapiFields.add("end_date");
    openapiFields.add("price");
    openapiFields.add("price_unit");
    openapiFields.add("start_date");
    openapiFields.add("subresource_uris");
    openapiFields.add("uri");
    openapiFields.add("usage");
    openapiFields.add("usage_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV2010AccountUsageUsageRecordUsageRecordThisMonth is not found in the empty JSON string", ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV2010AccountUsageUsageRecordUsageRecordThisMonth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("api_version") != null && !jsonObj.get("api_version").isJsonNull()) && !jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      if ((jsonObj.get("as_of") != null && !jsonObj.get("as_of").isJsonNull()) && !jsonObj.get("as_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as_of").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        UsageRecordThisMonthEnumCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("count_unit") != null && !jsonObj.get("count_unit").isJsonNull()) && !jsonObj.get("count_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count_unit").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("price_unit") != null && !jsonObj.get("price_unit").isJsonNull()) && !jsonObj.get("price_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_unit").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) && !jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
      if ((jsonObj.get("usage_unit") != null && !jsonObj.get("usage_unit").isJsonNull()) && !jsonObj.get("usage_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV2010AccountUsageUsageRecordUsageRecordThisMonth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV2010AccountUsageUsageRecordUsageRecordThisMonth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV2010AccountUsageUsageRecordUsageRecordThisMonth>() {
           @Override
           public void write(JsonWriter out, ApiV2010AccountUsageUsageRecordUsageRecordThisMonth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV2010AccountUsageUsageRecordUsageRecordThisMonth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV2010AccountUsageUsageRecordUsageRecordThisMonth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
   * @throws IOException if the JSON string is invalid with respect to ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
   */
  public static ApiV2010AccountUsageUsageRecordUsageRecordThisMonth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV2010AccountUsageUsageRecordUsageRecordThisMonth.class);
  }

  /**
   * Convert an instance of ApiV2010AccountUsageUsageRecordUsageRecordThisMonth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

