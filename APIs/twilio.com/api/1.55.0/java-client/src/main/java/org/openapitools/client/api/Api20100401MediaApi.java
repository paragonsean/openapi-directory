/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountMessageMedia;
import org.openapitools.client.model.ListMediaResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401MediaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401MediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401MediaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMedia
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The unique identifier of the to-be-deleted Media resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMediaCall(String accountSid, String messageSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "MessageSid" + "}", localVarApiClient.escapeString(messageSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMediaValidateBeforeCall(String accountSid, String messageSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteMedia(Async)");
        }

        // verify the required parameter 'messageSid' is set
        if (messageSid == null) {
            throw new ApiException("Missing the required parameter 'messageSid' when calling deleteMedia(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteMedia(Async)");
        }

        return deleteMediaCall(accountSid, messageSid, sid, _callback);

    }

    /**
     * 
     * Delete the Media resource.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The unique identifier of the to-be-deleted Media resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMedia(String accountSid, String messageSid, String sid) throws ApiException {
        deleteMediaWithHttpInfo(accountSid, messageSid, sid);
    }

    /**
     * 
     * Delete the Media resource.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The unique identifier of the to-be-deleted Media resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMediaWithHttpInfo(String accountSid, String messageSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteMediaValidateBeforeCall(accountSid, messageSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the Media resource.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The unique identifier of the to-be-deleted Media resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMediaAsync(String accountSid, String messageSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMediaValidateBeforeCall(accountSid, messageSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMedia
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Media resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMediaCall(String accountSid, String messageSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "MessageSid" + "}", localVarApiClient.escapeString(messageSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMediaValidateBeforeCall(String accountSid, String messageSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchMedia(Async)");
        }

        // verify the required parameter 'messageSid' is set
        if (messageSid == null) {
            throw new ApiException("Missing the required parameter 'messageSid' when calling fetchMedia(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchMedia(Async)");
        }

        return fetchMediaCall(accountSid, messageSid, sid, _callback);

    }

    /**
     * 
     * Fetch a single Media resource associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Media resource to fetch. (required)
     * @return ApiV2010AccountMessageMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountMessageMedia fetchMedia(String accountSid, String messageSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountMessageMedia> localVarResp = fetchMediaWithHttpInfo(accountSid, messageSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a single Media resource associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Media resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountMessageMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountMessageMedia> fetchMediaWithHttpInfo(String accountSid, String messageSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchMediaValidateBeforeCall(accountSid, messageSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountMessageMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a single Media resource associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Media resource. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resource. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Media resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMediaAsync(String accountSid, String messageSid, String sid, final ApiCallback<ApiV2010AccountMessageMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMediaValidateBeforeCall(accountSid, messageSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountMessageMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMedia
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resources. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resources. (required)
     * @param dateCreated Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMediaCall(String accountSid, String messageSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "MessageSid" + "}", localVarApiClient.escapeString(messageSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated", dateCreated));
        }

        if (dateCreatedLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&lt;", dateCreatedLessThan));
        }

        if (dateCreatedGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreated&gt;", dateCreatedGreaterThan));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMediaValidateBeforeCall(String accountSid, String messageSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listMedia(Async)");
        }

        // verify the required parameter 'messageSid' is set
        if (messageSid == null) {
            throw new ApiException("Missing the required parameter 'messageSid' when calling listMedia(Async)");
        }

        return listMediaCall(accountSid, messageSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Read a list of Media resources associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resources. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resources. (required)
     * @param dateCreated Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListMediaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMediaResponse listMedia(String accountSid, String messageSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListMediaResponse> localVarResp = listMediaWithHttpInfo(accountSid, messageSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Read a list of Media resources associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resources. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resources. (required)
     * @param dateCreated Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListMediaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMediaResponse> listMediaWithHttpInfo(String accountSid, String messageSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listMediaValidateBeforeCall(accountSid, messageSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListMediaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read a list of Media resources associated with a specific Message resource
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is associated with the Media resources. (required)
     * @param messageSid The SID of the Message resource that is associated with the Media resources. (required)
     * @param dateCreated Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedLessThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param dateCreatedGreaterThan Only include Media resources that were created on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read Media that were created on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read Media that were created on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read Media that were created on or after midnight of this date. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMediaAsync(String accountSid, String messageSid, OffsetDateTime dateCreated, OffsetDateTime dateCreatedLessThan, OffsetDateTime dateCreatedGreaterThan, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListMediaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMediaValidateBeforeCall(accountSid, messageSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListMediaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
