/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal;
import org.openapitools.client.model.IncomingPhoneNumberLocalEnumEmergencyStatus;
import org.openapitools.client.model.IncomingPhoneNumberLocalEnumVoiceReceiveMode;
import org.openapitools.client.model.ListAvailablePhoneNumberLocalResponse;
import org.openapitools.client.model.ListIncomingPhoneNumberLocalResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401LocalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401LocalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401LocalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createIncomingPhoneNumberLocal
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingPhoneNumberLocalCall(String accountSid, String phoneNumber, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberLocalEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberLocalEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (apiVersion != null) {
            localVarFormParams.put("ApiVersion", apiVersion);
        }

        if (bundleSid != null) {
            localVarFormParams.put("BundleSid", bundleSid);
        }

        if (emergencyAddressSid != null) {
            localVarFormParams.put("EmergencyAddressSid", emergencyAddressSid);
        }

        if (emergencyStatus != null) {
            localVarFormParams.put("EmergencyStatus", emergencyStatus);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (identitySid != null) {
            localVarFormParams.put("IdentitySid", identitySid);
        }

        if (phoneNumber != null) {
            localVarFormParams.put("PhoneNumber", phoneNumber);
        }

        if (smsApplicationSid != null) {
            localVarFormParams.put("SmsApplicationSid", smsApplicationSid);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (trunkSid != null) {
            localVarFormParams.put("TrunkSid", trunkSid);
        }

        if (voiceApplicationSid != null) {
            localVarFormParams.put("VoiceApplicationSid", voiceApplicationSid);
        }

        if (voiceCallerIdLookup != null) {
            localVarFormParams.put("VoiceCallerIdLookup", voiceCallerIdLookup);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceReceiveMode != null) {
            localVarFormParams.put("VoiceReceiveMode", voiceReceiveMode);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIncomingPhoneNumberLocalValidateBeforeCall(String accountSid, String phoneNumber, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberLocalEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberLocalEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createIncomingPhoneNumberLocal(Async)");
        }

        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling createIncomingPhoneNumberLocal(Async)");
        }

        return createIncomingPhoneNumberLocalCall(accountSid, phoneNumber, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal createIncomingPhoneNumberLocal(String accountSid, String phoneNumber, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberLocalEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberLocalEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal> localVarResp = createIncomingPhoneNumberLocalWithHttpInfo(accountSid, phoneNumber, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiResponse&lt;ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal> createIncomingPhoneNumberLocalWithHttpInfo(String accountSid, String phoneNumber, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberLocalEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberLocalEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = createIncomingPhoneNumberLocalValidateBeforeCall(accountSid, phoneNumber, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingPhoneNumberLocalAsync(String accountSid, String phoneNumber, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberLocalEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberLocalEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback<ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIncomingPhoneNumberLocalValidateBeforeCall(accountSid, phoneNumber, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAvailablePhoneNumberLocal
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources. (required)
     * @param countryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers. (required)
     * @param areaCode The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada. (optional)
     * @param contains The pattern on which to match phone numbers. Valid characters are &#x60;*&#x60;, &#x60;0-9&#x60;, &#x60;a-z&#x60;, and &#x60;A-Z&#x60;. The &#x60;*&#x60; character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters. (optional)
     * @param smsEnabled Whether the phone numbers can receive text messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param mmsEnabled Whether the phone numbers can receive MMS messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceEnabled Whether the phone numbers can receive calls. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param excludeAllAddressRequired Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeLocalAddressRequired Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeForeignAddressRequired Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param beta Whether to read phone numbers that are new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param nearNumber Given a phone number, find a geographically close number within &#x60;distance&#x60; miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param nearLatLong Given a latitude/longitude pair &#x60;lat,long&#x60; find geographically close numbers within &#x60;distance&#x60; miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param distance The search radius, in miles, for a &#x60;near_&#x60; query.  Can be up to &#x60;500&#x60; and the default is &#x60;25&#x60;. Applies to only phone numbers in the US and Canada. (optional)
     * @param inPostalCode Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRegion Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRateCenter Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires &#x60;in_lata&#x60; to be set as well. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLata Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLocality Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number. (optional)
     * @param faxEnabled Whether the phone numbers can receive faxes. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAvailablePhoneNumberLocalCall(String accountSid, String countryCode, Integer areaCode, String contains, Boolean smsEnabled, Boolean mmsEnabled, Boolean voiceEnabled, Boolean excludeAllAddressRequired, Boolean excludeLocalAddressRequired, Boolean excludeForeignAddressRequired, Boolean beta, String nearNumber, String nearLatLong, Integer distance, String inPostalCode, String inRegion, String inRateCenter, String inLata, String inLocality, Boolean faxEnabled, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CountryCode" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (areaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AreaCode", areaCode));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Contains", contains));
        }

        if (smsEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SmsEnabled", smsEnabled));
        }

        if (mmsEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MmsEnabled", mmsEnabled));
        }

        if (voiceEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VoiceEnabled", voiceEnabled));
        }

        if (excludeAllAddressRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAllAddressRequired", excludeAllAddressRequired));
        }

        if (excludeLocalAddressRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeLocalAddressRequired", excludeLocalAddressRequired));
        }

        if (excludeForeignAddressRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeForeignAddressRequired", excludeForeignAddressRequired));
        }

        if (beta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Beta", beta));
        }

        if (nearNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NearNumber", nearNumber));
        }

        if (nearLatLong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NearLatLong", nearLatLong));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Distance", distance));
        }

        if (inPostalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InPostalCode", inPostalCode));
        }

        if (inRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InRegion", inRegion));
        }

        if (inRateCenter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InRateCenter", inRateCenter));
        }

        if (inLata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InLata", inLata));
        }

        if (inLocality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InLocality", inLocality));
        }

        if (faxEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FaxEnabled", faxEnabled));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailablePhoneNumberLocalValidateBeforeCall(String accountSid, String countryCode, Integer areaCode, String contains, Boolean smsEnabled, Boolean mmsEnabled, Boolean voiceEnabled, Boolean excludeAllAddressRequired, Boolean excludeLocalAddressRequired, Boolean excludeForeignAddressRequired, Boolean beta, String nearNumber, String nearLatLong, Integer distance, String inPostalCode, String inRegion, String inRateCenter, String inLata, String inLocality, Boolean faxEnabled, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listAvailablePhoneNumberLocal(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling listAvailablePhoneNumberLocal(Async)");
        }

        return listAvailablePhoneNumberLocalCall(accountSid, countryCode, areaCode, contains, smsEnabled, mmsEnabled, voiceEnabled, excludeAllAddressRequired, excludeLocalAddressRequired, excludeForeignAddressRequired, beta, nearNumber, nearLatLong, distance, inPostalCode, inRegion, inRateCenter, inLata, inLocality, faxEnabled, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources. (required)
     * @param countryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers. (required)
     * @param areaCode The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada. (optional)
     * @param contains The pattern on which to match phone numbers. Valid characters are &#x60;*&#x60;, &#x60;0-9&#x60;, &#x60;a-z&#x60;, and &#x60;A-Z&#x60;. The &#x60;*&#x60; character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters. (optional)
     * @param smsEnabled Whether the phone numbers can receive text messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param mmsEnabled Whether the phone numbers can receive MMS messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceEnabled Whether the phone numbers can receive calls. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param excludeAllAddressRequired Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeLocalAddressRequired Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeForeignAddressRequired Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param beta Whether to read phone numbers that are new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param nearNumber Given a phone number, find a geographically close number within &#x60;distance&#x60; miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param nearLatLong Given a latitude/longitude pair &#x60;lat,long&#x60; find geographically close numbers within &#x60;distance&#x60; miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param distance The search radius, in miles, for a &#x60;near_&#x60; query.  Can be up to &#x60;500&#x60; and the default is &#x60;25&#x60;. Applies to only phone numbers in the US and Canada. (optional)
     * @param inPostalCode Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRegion Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRateCenter Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires &#x60;in_lata&#x60; to be set as well. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLata Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLocality Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number. (optional)
     * @param faxEnabled Whether the phone numbers can receive faxes. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListAvailablePhoneNumberLocalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailablePhoneNumberLocalResponse listAvailablePhoneNumberLocal(String accountSid, String countryCode, Integer areaCode, String contains, Boolean smsEnabled, Boolean mmsEnabled, Boolean voiceEnabled, Boolean excludeAllAddressRequired, Boolean excludeLocalAddressRequired, Boolean excludeForeignAddressRequired, Boolean beta, String nearNumber, String nearLatLong, Integer distance, String inPostalCode, String inRegion, String inRateCenter, String inLata, String inLocality, Boolean faxEnabled, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListAvailablePhoneNumberLocalResponse> localVarResp = listAvailablePhoneNumberLocalWithHttpInfo(accountSid, countryCode, areaCode, contains, smsEnabled, mmsEnabled, voiceEnabled, excludeAllAddressRequired, excludeLocalAddressRequired, excludeForeignAddressRequired, beta, nearNumber, nearLatLong, distance, inPostalCode, inRegion, inRateCenter, inLata, inLocality, faxEnabled, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources. (required)
     * @param countryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers. (required)
     * @param areaCode The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada. (optional)
     * @param contains The pattern on which to match phone numbers. Valid characters are &#x60;*&#x60;, &#x60;0-9&#x60;, &#x60;a-z&#x60;, and &#x60;A-Z&#x60;. The &#x60;*&#x60; character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters. (optional)
     * @param smsEnabled Whether the phone numbers can receive text messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param mmsEnabled Whether the phone numbers can receive MMS messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceEnabled Whether the phone numbers can receive calls. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param excludeAllAddressRequired Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeLocalAddressRequired Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeForeignAddressRequired Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param beta Whether to read phone numbers that are new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param nearNumber Given a phone number, find a geographically close number within &#x60;distance&#x60; miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param nearLatLong Given a latitude/longitude pair &#x60;lat,long&#x60; find geographically close numbers within &#x60;distance&#x60; miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param distance The search radius, in miles, for a &#x60;near_&#x60; query.  Can be up to &#x60;500&#x60; and the default is &#x60;25&#x60;. Applies to only phone numbers in the US and Canada. (optional)
     * @param inPostalCode Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRegion Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRateCenter Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires &#x60;in_lata&#x60; to be set as well. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLata Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLocality Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number. (optional)
     * @param faxEnabled Whether the phone numbers can receive faxes. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListAvailablePhoneNumberLocalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAvailablePhoneNumberLocalResponse> listAvailablePhoneNumberLocalWithHttpInfo(String accountSid, String countryCode, Integer areaCode, String contains, Boolean smsEnabled, Boolean mmsEnabled, Boolean voiceEnabled, Boolean excludeAllAddressRequired, Boolean excludeLocalAddressRequired, Boolean excludeForeignAddressRequired, Boolean beta, String nearNumber, String nearLatLong, Integer distance, String inPostalCode, String inRegion, String inRateCenter, String inLata, String inLocality, Boolean faxEnabled, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listAvailablePhoneNumberLocalValidateBeforeCall(accountSid, countryCode, areaCode, contains, smsEnabled, mmsEnabled, voiceEnabled, excludeAllAddressRequired, excludeLocalAddressRequired, excludeForeignAddressRequired, beta, nearNumber, nearLatLong, distance, inPostalCode, inRegion, inRateCenter, inLata, inLocality, faxEnabled, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumberLocalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources. (required)
     * @param countryCode The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers. (required)
     * @param areaCode The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada. (optional)
     * @param contains The pattern on which to match phone numbers. Valid characters are &#x60;*&#x60;, &#x60;0-9&#x60;, &#x60;a-z&#x60;, and &#x60;A-Z&#x60;. The &#x60;*&#x60; character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample&#x3D;code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters. (optional)
     * @param smsEnabled Whether the phone numbers can receive text messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param mmsEnabled Whether the phone numbers can receive MMS messages. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param voiceEnabled Whether the phone numbers can receive calls. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param excludeAllAddressRequired Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeLocalAddressRequired Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param excludeForeignAddressRequired Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param beta Whether to read phone numbers that are new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param nearNumber Given a phone number, find a geographically close number within &#x60;distance&#x60; miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param nearLatLong Given a latitude/longitude pair &#x60;lat,long&#x60; find geographically close numbers within &#x60;distance&#x60; miles. Applies to only phone numbers in the US and Canada. (optional)
     * @param distance The search radius, in miles, for a &#x60;near_&#x60; query.  Can be up to &#x60;500&#x60; and the default is &#x60;25&#x60;. Applies to only phone numbers in the US and Canada. (optional)
     * @param inPostalCode Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRegion Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inRateCenter Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires &#x60;in_lata&#x60; to be set as well. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLata Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada. (optional)
     * @param inLocality Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number. (optional)
     * @param faxEnabled Whether the phone numbers can receive faxes. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAvailablePhoneNumberLocalAsync(String accountSid, String countryCode, Integer areaCode, String contains, Boolean smsEnabled, Boolean mmsEnabled, Boolean voiceEnabled, Boolean excludeAllAddressRequired, Boolean excludeLocalAddressRequired, Boolean excludeForeignAddressRequired, Boolean beta, String nearNumber, String nearLatLong, Integer distance, String inPostalCode, String inRegion, String inRateCenter, String inLata, String inLocality, Boolean faxEnabled, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListAvailablePhoneNumberLocalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailablePhoneNumberLocalValidateBeforeCall(accountSid, countryCode, areaCode, contains, smsEnabled, mmsEnabled, voiceEnabled, excludeAllAddressRequired, excludeLocalAddressRequired, excludeForeignAddressRequired, beta, nearNumber, nearLatLong, distance, inPostalCode, inRegion, inRateCenter, inLata, inLocality, faxEnabled, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListAvailablePhoneNumberLocalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIncomingPhoneNumberLocal
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingPhoneNumberLocalCall(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Beta", beta));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Origin", origin));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIncomingPhoneNumberLocalValidateBeforeCall(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listIncomingPhoneNumberLocal(Async)");
        }

        return listIncomingPhoneNumberLocalCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListIncomingPhoneNumberLocalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListIncomingPhoneNumberLocalResponse listIncomingPhoneNumberLocal(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListIncomingPhoneNumberLocalResponse> localVarResp = listIncomingPhoneNumberLocalWithHttpInfo(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListIncomingPhoneNumberLocalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIncomingPhoneNumberLocalResponse> listIncomingPhoneNumberLocalWithHttpInfo(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listIncomingPhoneNumberLocalValidateBeforeCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListIncomingPhoneNumberLocalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingPhoneNumberLocalAsync(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListIncomingPhoneNumberLocalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIncomingPhoneNumberLocalValidateBeforeCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListIncomingPhoneNumberLocalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
