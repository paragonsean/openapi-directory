/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountIncomingPhoneNumber;
import org.openapitools.client.model.IncomingPhoneNumberEnumEmergencyStatus;
import org.openapitools.client.model.IncomingPhoneNumberEnumVoiceReceiveMode;
import org.openapitools.client.model.ListIncomingPhoneNumberResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401IncomingPhoneNumberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401IncomingPhoneNumberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401IncomingPhoneNumberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createIncomingPhoneNumber
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param areaCode The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an &#x60;area_code&#x60; or a &#x60;phone_number&#x60;.** (US and Canada only). (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingPhoneNumberCall(String accountSid, String addressSid, String apiVersion, String areaCode, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String phoneNumber, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (apiVersion != null) {
            localVarFormParams.put("ApiVersion", apiVersion);
        }

        if (areaCode != null) {
            localVarFormParams.put("AreaCode", areaCode);
        }

        if (bundleSid != null) {
            localVarFormParams.put("BundleSid", bundleSid);
        }

        if (emergencyAddressSid != null) {
            localVarFormParams.put("EmergencyAddressSid", emergencyAddressSid);
        }

        if (emergencyStatus != null) {
            localVarFormParams.put("EmergencyStatus", emergencyStatus);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (identitySid != null) {
            localVarFormParams.put("IdentitySid", identitySid);
        }

        if (phoneNumber != null) {
            localVarFormParams.put("PhoneNumber", phoneNumber);
        }

        if (smsApplicationSid != null) {
            localVarFormParams.put("SmsApplicationSid", smsApplicationSid);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (trunkSid != null) {
            localVarFormParams.put("TrunkSid", trunkSid);
        }

        if (voiceApplicationSid != null) {
            localVarFormParams.put("VoiceApplicationSid", voiceApplicationSid);
        }

        if (voiceCallerIdLookup != null) {
            localVarFormParams.put("VoiceCallerIdLookup", voiceCallerIdLookup);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceReceiveMode != null) {
            localVarFormParams.put("VoiceReceiveMode", voiceReceiveMode);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIncomingPhoneNumberValidateBeforeCall(String accountSid, String addressSid, String apiVersion, String areaCode, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String phoneNumber, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createIncomingPhoneNumber(Async)");
        }

        return createIncomingPhoneNumberCall(accountSid, addressSid, apiVersion, areaCode, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, phoneNumber, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);

    }

    /**
     * 
     * Purchase a phone-number for the account.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param areaCode The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an &#x60;area_code&#x60; or a &#x60;phone_number&#x60;.** (US and Canada only). (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiV2010AccountIncomingPhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountIncomingPhoneNumber createIncomingPhoneNumber(String accountSid, String addressSid, String apiVersion, String areaCode, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String phoneNumber, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountIncomingPhoneNumber> localVarResp = createIncomingPhoneNumberWithHttpInfo(accountSid, addressSid, apiVersion, areaCode, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, phoneNumber, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Purchase a phone-number for the account.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param areaCode The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an &#x60;area_code&#x60; or a &#x60;phone_number&#x60;.** (US and Canada only). (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiResponse&lt;ApiV2010AccountIncomingPhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountIncomingPhoneNumber> createIncomingPhoneNumberWithHttpInfo(String accountSid, String addressSid, String apiVersion, String areaCode, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String phoneNumber, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = createIncomingPhoneNumberValidateBeforeCall(accountSid, addressSid, apiVersion, areaCode, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, phoneNumber, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Purchase a phone-number for the account.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param addressSid The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the new phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param areaCode The desired area code for your new incoming phone number. Can be any three-digit, US or Canada area code. We will provision an available phone number within this area code for you. **You must provide an &#x60;area_code&#x60; or a &#x60;phone_number&#x60;.** (US and Canada only). (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from the new phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the new phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations. (optional)
     * @param phoneNumber The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the new phone number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the new phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle calls to the new phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle calls to the new phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the new phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingPhoneNumberAsync(String accountSid, String addressSid, String apiVersion, String areaCode, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String phoneNumber, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback<ApiV2010AccountIncomingPhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIncomingPhoneNumberValidateBeforeCall(accountSid, addressSid, apiVersion, areaCode, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, phoneNumber, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIncomingPhoneNumber
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncomingPhoneNumberCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIncomingPhoneNumberValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteIncomingPhoneNumber(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteIncomingPhoneNumber(Async)");
        }

        return deleteIncomingPhoneNumberCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Delete a phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIncomingPhoneNumber(String accountSid, String sid) throws ApiException {
        deleteIncomingPhoneNumberWithHttpInfo(accountSid, sid);
    }

    /**
     * 
     * Delete a phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIncomingPhoneNumberWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteIncomingPhoneNumberValidateBeforeCall(accountSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncomingPhoneNumberAsync(String accountSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIncomingPhoneNumberValidateBeforeCall(accountSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchIncomingPhoneNumber
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIncomingPhoneNumberCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchIncomingPhoneNumberValidateBeforeCall(String accountSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchIncomingPhoneNumber(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchIncomingPhoneNumber(Async)");
        }

        return fetchIncomingPhoneNumberCall(accountSid, sid, _callback);

    }

    /**
     * 
     * Fetch an incoming-phone-number belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch. (required)
     * @return ApiV2010AccountIncomingPhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountIncomingPhoneNumber fetchIncomingPhoneNumber(String accountSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountIncomingPhoneNumber> localVarResp = fetchIncomingPhoneNumberWithHttpInfo(accountSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an incoming-phone-number belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountIncomingPhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountIncomingPhoneNumber> fetchIncomingPhoneNumberWithHttpInfo(String accountSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchIncomingPhoneNumberValidateBeforeCall(accountSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an incoming-phone-number belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIncomingPhoneNumberAsync(String accountSid, String sid, final ApiCallback<ApiV2010AccountIncomingPhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchIncomingPhoneNumberValidateBeforeCall(accountSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIncomingPhoneNumber
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the IncomingPhoneNumber resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingPhoneNumberCall(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Beta", beta));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Origin", origin));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIncomingPhoneNumberValidateBeforeCall(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listIncomingPhoneNumber(Async)");
        }

        return listIncomingPhoneNumberCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the IncomingPhoneNumber resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListIncomingPhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListIncomingPhoneNumberResponse listIncomingPhoneNumber(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListIncomingPhoneNumberResponse> localVarResp = listIncomingPhoneNumberWithHttpInfo(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the IncomingPhoneNumber resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListIncomingPhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIncomingPhoneNumberResponse> listIncomingPhoneNumberWithHttpInfo(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listIncomingPhoneNumberValidateBeforeCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListIncomingPhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resources to read. (required)
     * @param beta Whether to include phone numbers new to the Twilio platform. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. (optional)
     * @param friendlyName A string that identifies the IncomingPhoneNumber resources to read. (optional)
     * @param phoneNumber The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use &#39;*&#39; as a wildcard for any digit. (optional)
     * @param origin Whether to include phone numbers based on their origin. Can be: &#x60;twilio&#x60; or &#x60;hosted&#x60;. By default, phone numbers of all origin are included. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingPhoneNumberAsync(String accountSid, Boolean beta, String friendlyName, String phoneNumber, String origin, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListIncomingPhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIncomingPhoneNumberValidateBeforeCall(accountSid, beta, friendlyName, phoneNumber, origin, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListIncomingPhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIncomingPhoneNumber
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update. (required)
     * @param accountSid2 The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (optional)
     * @param addressSid The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from this phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle phone calls to the phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle phone calls to the phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIncomingPhoneNumberCall(String accountSid, String sid, String accountSid2, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid2 != null) {
            localVarFormParams.put("AccountSid", accountSid2);
        }

        if (addressSid != null) {
            localVarFormParams.put("AddressSid", addressSid);
        }

        if (apiVersion != null) {
            localVarFormParams.put("ApiVersion", apiVersion);
        }

        if (bundleSid != null) {
            localVarFormParams.put("BundleSid", bundleSid);
        }

        if (emergencyAddressSid != null) {
            localVarFormParams.put("EmergencyAddressSid", emergencyAddressSid);
        }

        if (emergencyStatus != null) {
            localVarFormParams.put("EmergencyStatus", emergencyStatus);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (identitySid != null) {
            localVarFormParams.put("IdentitySid", identitySid);
        }

        if (smsApplicationSid != null) {
            localVarFormParams.put("SmsApplicationSid", smsApplicationSid);
        }

        if (smsFallbackMethod != null) {
            localVarFormParams.put("SmsFallbackMethod", smsFallbackMethod);
        }

        if (smsFallbackUrl != null) {
            localVarFormParams.put("SmsFallbackUrl", smsFallbackUrl);
        }

        if (smsMethod != null) {
            localVarFormParams.put("SmsMethod", smsMethod);
        }

        if (smsUrl != null) {
            localVarFormParams.put("SmsUrl", smsUrl);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (trunkSid != null) {
            localVarFormParams.put("TrunkSid", trunkSid);
        }

        if (voiceApplicationSid != null) {
            localVarFormParams.put("VoiceApplicationSid", voiceApplicationSid);
        }

        if (voiceCallerIdLookup != null) {
            localVarFormParams.put("VoiceCallerIdLookup", voiceCallerIdLookup);
        }

        if (voiceFallbackMethod != null) {
            localVarFormParams.put("VoiceFallbackMethod", voiceFallbackMethod);
        }

        if (voiceFallbackUrl != null) {
            localVarFormParams.put("VoiceFallbackUrl", voiceFallbackUrl);
        }

        if (voiceMethod != null) {
            localVarFormParams.put("VoiceMethod", voiceMethod);
        }

        if (voiceReceiveMode != null) {
            localVarFormParams.put("VoiceReceiveMode", voiceReceiveMode);
        }

        if (voiceUrl != null) {
            localVarFormParams.put("VoiceUrl", voiceUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIncomingPhoneNumberValidateBeforeCall(String accountSid, String sid, String accountSid2, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateIncomingPhoneNumber(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateIncomingPhoneNumber(Async)");
        }

        return updateIncomingPhoneNumberCall(accountSid, sid, accountSid2, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);

    }

    /**
     * 
     * Update an incoming-phone-number instance.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update. (required)
     * @param accountSid2 The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (optional)
     * @param addressSid The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from this phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle phone calls to the phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle phone calls to the phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiV2010AccountIncomingPhoneNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountIncomingPhoneNumber updateIncomingPhoneNumber(String accountSid, String sid, String accountSid2, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        ApiResponse<ApiV2010AccountIncomingPhoneNumber> localVarResp = updateIncomingPhoneNumberWithHttpInfo(accountSid, sid, accountSid2, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an incoming-phone-number instance.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update. (required)
     * @param accountSid2 The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (optional)
     * @param addressSid The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from this phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle phone calls to the phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle phone calls to the phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @return ApiResponse&lt;ApiV2010AccountIncomingPhoneNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountIncomingPhoneNumber> updateIncomingPhoneNumberWithHttpInfo(String accountSid, String sid, String accountSid2, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl) throws ApiException {
        okhttp3.Call localVarCall = updateIncomingPhoneNumberValidateBeforeCall(accountSid, sid, accountSid2, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an incoming-phone-number instance.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (required)
     * @param sid The Twilio-provided string that uniquely identifies the IncomingPhoneNumber resource to update. (required)
     * @param accountSid2 The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the IncomingPhoneNumber resource to update.  For more information, see [Exchanging Numbers Between Subaccounts](https://www.twilio.com/docs/iam/api/subaccounts#exchanging-numbers). (optional)
     * @param addressSid The SID of the Address resource we should associate with the phone number. Some regions require addresses to meet local regulations. (optional)
     * @param apiVersion The API version to use for incoming calls made to the phone number. The default is &#x60;2010-04-01&#x60;. (optional)
     * @param bundleSid The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations. (optional)
     * @param emergencyAddressSid The SID of the emergency address configuration to use for emergency calling from this phone number. (optional)
     * @param emergencyStatus  (optional)
     * @param friendlyName A descriptive string that you created to describe this phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number. (optional)
     * @param identitySid The SID of the Identity resource that we should associate with the phone number. Some regions require an identity to meet local regulations. (optional)
     * @param smsApplicationSid The SID of the application that should handle SMS messages sent to the number. If an &#x60;sms_application_sid&#x60; is present, we ignore all of the &#x60;sms_*_url&#x60; urls and use those set on the application. (optional)
     * @param smsFallbackMethod The HTTP method that we should use to call &#x60;sms_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsFallbackUrl The URL that we should call when an error occurs while requesting or executing the TwiML defined by &#x60;sms_url&#x60;. (optional)
     * @param smsMethod The HTTP method that we should use to call &#x60;sms_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param smsUrl The URL we should call when the phone number receives an incoming SMS message. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param trunkSid The SID of the Trunk we should use to handle phone calls to the phone number. If a &#x60;trunk_sid&#x60; is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a &#x60;trunk_sid&#x60; will automatically delete your &#x60;voice_application_sid&#x60; and vice versa. (optional)
     * @param voiceApplicationSid The SID of the application we should use to handle phone calls to the phone number. If a &#x60;voice_application_sid&#x60; is present, we ignore all of the voice urls and use only those set on the application. Setting a &#x60;voice_application_sid&#x60; will automatically delete your &#x60;trunk_sid&#x60; and vice versa. (optional)
     * @param voiceCallerIdLookup Whether to lookup the caller&#39;s name from the CNAM database and post it to your app. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param voiceFallbackMethod The HTTP method that we should use to call &#x60;voice_fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceFallbackUrl The URL that we should call when an error occurs retrieving or executing the TwiML requested by &#x60;url&#x60;. (optional)
     * @param voiceMethod The HTTP method that we should use to call &#x60;voice_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param voiceReceiveMode  (optional)
     * @param voiceUrl The URL that we should call to answer a call to the phone number. The &#x60;voice_url&#x60; will not be called if a &#x60;voice_application_sid&#x60; or a &#x60;trunk_sid&#x60; is set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIncomingPhoneNumberAsync(String accountSid, String sid, String accountSid2, String addressSid, String apiVersion, String bundleSid, String emergencyAddressSid, IncomingPhoneNumberEnumEmergencyStatus emergencyStatus, String friendlyName, String identitySid, String smsApplicationSid, String smsFallbackMethod, URI smsFallbackUrl, String smsMethod, URI smsUrl, URI statusCallback, String statusCallbackMethod, String trunkSid, String voiceApplicationSid, Boolean voiceCallerIdLookup, String voiceFallbackMethod, URI voiceFallbackUrl, String voiceMethod, IncomingPhoneNumberEnumVoiceReceiveMode voiceReceiveMode, URI voiceUrl, final ApiCallback<ApiV2010AccountIncomingPhoneNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIncomingPhoneNumberValidateBeforeCall(accountSid, sid, accountSid2, addressSid, apiVersion, bundleSid, emergencyAddressSid, emergencyStatus, friendlyName, identitySid, smsApplicationSid, smsFallbackMethod, smsFallbackUrl, smsMethod, smsUrl, statusCallback, statusCallbackMethod, trunkSid, voiceApplicationSid, voiceCallerIdLookup, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceReceiveMode, voiceUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountIncomingPhoneNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
