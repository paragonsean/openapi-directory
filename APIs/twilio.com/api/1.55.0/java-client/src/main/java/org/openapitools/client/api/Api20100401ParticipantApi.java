/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountConferenceParticipant;
import org.openapitools.client.model.ListParticipantResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401ParticipantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401ParticipantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401ParticipantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createParticipant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param conferenceSid The SID of the participant&#39;s conference. (required)
     * @param from The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;from&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;from&#x60; should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. (required)
     * @param to The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as &#x60;sip:name@company.com&#x60;. Client identifiers are formatted &#x60;client:name&#x60;. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. (required)
     * @param amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. (optional)
     * @param amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) (optional)
     * @param callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. (optional)
     * @param callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60; (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from the conference recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;. (optional)
     * @param label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. (optional)
     * @param machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). (optional)
     * @param machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. (optional)
     * @param machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. (optional)
     * @param machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. (optional)
     * @param machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. (optional)
     * @param timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. (optional)
     * @param trim Whether to trim any leading and trailing silence from the participant recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParticipantCall(String accountSid, String conferenceSid, String from, String to, URI amdStatusCallback, String amdStatusCallbackMethod, String beep, String byoc, String callReason, String callSidToCoach, String callToken, String callerId, Boolean coaching, String conferenceRecord, URI conferenceRecordingStatusCallback, List<String> conferenceRecordingStatusCallbackEvent, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<String> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, Boolean earlyMedia, Boolean endConferenceOnExit, String jitterBufferSize, String label, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, Integer maxParticipants, Boolean muted, Boolean record, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String region, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<String> statusCallbackEvent, String statusCallbackMethod, Integer timeLimit, Integer timeout, String trim, String waitMethod, URI waitUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amdStatusCallback != null) {
            localVarFormParams.put("AmdStatusCallback", amdStatusCallback);
        }

        if (amdStatusCallbackMethod != null) {
            localVarFormParams.put("AmdStatusCallbackMethod", amdStatusCallbackMethod);
        }

        if (beep != null) {
            localVarFormParams.put("Beep", beep);
        }

        if (byoc != null) {
            localVarFormParams.put("Byoc", byoc);
        }

        if (callReason != null) {
            localVarFormParams.put("CallReason", callReason);
        }

        if (callSidToCoach != null) {
            localVarFormParams.put("CallSidToCoach", callSidToCoach);
        }

        if (callToken != null) {
            localVarFormParams.put("CallToken", callToken);
        }

        if (callerId != null) {
            localVarFormParams.put("CallerId", callerId);
        }

        if (coaching != null) {
            localVarFormParams.put("Coaching", coaching);
        }

        if (conferenceRecord != null) {
            localVarFormParams.put("ConferenceRecord", conferenceRecord);
        }

        if (conferenceRecordingStatusCallback != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallback", conferenceRecordingStatusCallback);
        }

        if (conferenceRecordingStatusCallbackEvent != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallbackEvent", conferenceRecordingStatusCallbackEvent);
        }

        if (conferenceRecordingStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceRecordingStatusCallbackMethod", conferenceRecordingStatusCallbackMethod);
        }

        if (conferenceStatusCallback != null) {
            localVarFormParams.put("ConferenceStatusCallback", conferenceStatusCallback);
        }

        if (conferenceStatusCallbackEvent != null) {
            localVarFormParams.put("ConferenceStatusCallbackEvent", conferenceStatusCallbackEvent);
        }

        if (conferenceStatusCallbackMethod != null) {
            localVarFormParams.put("ConferenceStatusCallbackMethod", conferenceStatusCallbackMethod);
        }

        if (conferenceTrim != null) {
            localVarFormParams.put("ConferenceTrim", conferenceTrim);
        }

        if (earlyMedia != null) {
            localVarFormParams.put("EarlyMedia", earlyMedia);
        }

        if (endConferenceOnExit != null) {
            localVarFormParams.put("EndConferenceOnExit", endConferenceOnExit);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (jitterBufferSize != null) {
            localVarFormParams.put("JitterBufferSize", jitterBufferSize);
        }

        if (label != null) {
            localVarFormParams.put("Label", label);
        }

        if (machineDetection != null) {
            localVarFormParams.put("MachineDetection", machineDetection);
        }

        if (machineDetectionSilenceTimeout != null) {
            localVarFormParams.put("MachineDetectionSilenceTimeout", machineDetectionSilenceTimeout);
        }

        if (machineDetectionSpeechEndThreshold != null) {
            localVarFormParams.put("MachineDetectionSpeechEndThreshold", machineDetectionSpeechEndThreshold);
        }

        if (machineDetectionSpeechThreshold != null) {
            localVarFormParams.put("MachineDetectionSpeechThreshold", machineDetectionSpeechThreshold);
        }

        if (machineDetectionTimeout != null) {
            localVarFormParams.put("MachineDetectionTimeout", machineDetectionTimeout);
        }

        if (maxParticipants != null) {
            localVarFormParams.put("MaxParticipants", maxParticipants);
        }

        if (muted != null) {
            localVarFormParams.put("Muted", muted);
        }

        if (record != null) {
            localVarFormParams.put("Record", record);
        }

        if (recordingChannels != null) {
            localVarFormParams.put("RecordingChannels", recordingChannels);
        }

        if (recordingStatusCallback != null) {
            localVarFormParams.put("RecordingStatusCallback", recordingStatusCallback);
        }

        if (recordingStatusCallbackEvent != null) {
            localVarFormParams.put("RecordingStatusCallbackEvent", recordingStatusCallbackEvent);
        }

        if (recordingStatusCallbackMethod != null) {
            localVarFormParams.put("RecordingStatusCallbackMethod", recordingStatusCallbackMethod);
        }

        if (recordingTrack != null) {
            localVarFormParams.put("RecordingTrack", recordingTrack);
        }

        if (region != null) {
            localVarFormParams.put("Region", region);
        }

        if (sipAuthPassword != null) {
            localVarFormParams.put("SipAuthPassword", sipAuthPassword);
        }

        if (sipAuthUsername != null) {
            localVarFormParams.put("SipAuthUsername", sipAuthUsername);
        }

        if (startConferenceOnEnter != null) {
            localVarFormParams.put("StartConferenceOnEnter", startConferenceOnEnter);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackEvent != null) {
            localVarFormParams.put("StatusCallbackEvent", statusCallbackEvent);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (timeLimit != null) {
            localVarFormParams.put("TimeLimit", timeLimit);
        }

        if (timeout != null) {
            localVarFormParams.put("Timeout", timeout);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        if (trim != null) {
            localVarFormParams.put("Trim", trim);
        }

        if (waitMethod != null) {
            localVarFormParams.put("WaitMethod", waitMethod);
        }

        if (waitUrl != null) {
            localVarFormParams.put("WaitUrl", waitUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createParticipantValidateBeforeCall(String accountSid, String conferenceSid, String from, String to, URI amdStatusCallback, String amdStatusCallbackMethod, String beep, String byoc, String callReason, String callSidToCoach, String callToken, String callerId, Boolean coaching, String conferenceRecord, URI conferenceRecordingStatusCallback, List<String> conferenceRecordingStatusCallbackEvent, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<String> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, Boolean earlyMedia, Boolean endConferenceOnExit, String jitterBufferSize, String label, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, Integer maxParticipants, Boolean muted, Boolean record, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String region, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<String> statusCallbackEvent, String statusCallbackMethod, Integer timeLimit, Integer timeout, String trim, String waitMethod, URI waitUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createParticipant(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling createParticipant(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling createParticipant(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling createParticipant(Async)");
        }

        return createParticipantCall(accountSid, conferenceSid, from, to, amdStatusCallback, amdStatusCallbackMethod, beep, byoc, callReason, callSidToCoach, callToken, callerId, coaching, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackEvent, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, earlyMedia, endConferenceOnExit, jitterBufferSize, label, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, maxParticipants, muted, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, region, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, waitMethod, waitUrl, _callback);

    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param conferenceSid The SID of the participant&#39;s conference. (required)
     * @param from The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;from&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;from&#x60; should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. (required)
     * @param to The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as &#x60;sip:name@company.com&#x60;. Client identifiers are formatted &#x60;client:name&#x60;. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. (required)
     * @param amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. (optional)
     * @param amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) (optional)
     * @param callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. (optional)
     * @param callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60; (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from the conference recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;. (optional)
     * @param label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. (optional)
     * @param machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). (optional)
     * @param machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. (optional)
     * @param machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. (optional)
     * @param machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. (optional)
     * @param machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. (optional)
     * @param timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. (optional)
     * @param trim Whether to trim any leading and trailing silence from the participant recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @return ApiV2010AccountConferenceParticipant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountConferenceParticipant createParticipant(String accountSid, String conferenceSid, String from, String to, URI amdStatusCallback, String amdStatusCallbackMethod, String beep, String byoc, String callReason, String callSidToCoach, String callToken, String callerId, Boolean coaching, String conferenceRecord, URI conferenceRecordingStatusCallback, List<String> conferenceRecordingStatusCallbackEvent, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<String> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, Boolean earlyMedia, Boolean endConferenceOnExit, String jitterBufferSize, String label, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, Integer maxParticipants, Boolean muted, Boolean record, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String region, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<String> statusCallbackEvent, String statusCallbackMethod, Integer timeLimit, Integer timeout, String trim, String waitMethod, URI waitUrl) throws ApiException {
        ApiResponse<ApiV2010AccountConferenceParticipant> localVarResp = createParticipantWithHttpInfo(accountSid, conferenceSid, from, to, amdStatusCallback, amdStatusCallbackMethod, beep, byoc, callReason, callSidToCoach, callToken, callerId, coaching, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackEvent, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, earlyMedia, endConferenceOnExit, jitterBufferSize, label, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, maxParticipants, muted, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, region, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, waitMethod, waitUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param conferenceSid The SID of the participant&#39;s conference. (required)
     * @param from The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;from&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;from&#x60; should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. (required)
     * @param to The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as &#x60;sip:name@company.com&#x60;. Client identifiers are formatted &#x60;client:name&#x60;. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. (required)
     * @param amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. (optional)
     * @param amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) (optional)
     * @param callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. (optional)
     * @param callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60; (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from the conference recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;. (optional)
     * @param label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. (optional)
     * @param machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). (optional)
     * @param machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. (optional)
     * @param machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. (optional)
     * @param machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. (optional)
     * @param machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. (optional)
     * @param timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. (optional)
     * @param trim Whether to trim any leading and trailing silence from the participant recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @return ApiResponse&lt;ApiV2010AccountConferenceParticipant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountConferenceParticipant> createParticipantWithHttpInfo(String accountSid, String conferenceSid, String from, String to, URI amdStatusCallback, String amdStatusCallbackMethod, String beep, String byoc, String callReason, String callSidToCoach, String callToken, String callerId, Boolean coaching, String conferenceRecord, URI conferenceRecordingStatusCallback, List<String> conferenceRecordingStatusCallbackEvent, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<String> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, Boolean earlyMedia, Boolean endConferenceOnExit, String jitterBufferSize, String label, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, Integer maxParticipants, Boolean muted, Boolean record, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String region, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<String> statusCallbackEvent, String statusCallbackMethod, Integer timeLimit, Integer timeout, String trim, String waitMethod, URI waitUrl) throws ApiException {
        okhttp3.Call localVarCall = createParticipantValidateBeforeCall(accountSid, conferenceSid, from, to, amdStatusCallback, amdStatusCallbackMethod, beep, byoc, callReason, callSidToCoach, callToken, callerId, coaching, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackEvent, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, earlyMedia, endConferenceOnExit, jitterBufferSize, label, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, maxParticipants, muted, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, region, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, waitMethod, waitUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param conferenceSid The SID of the participant&#39;s conference. (required)
     * @param from The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;from&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;from&#x60; should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint. (required)
     * @param to The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as &#x60;sip:name@company.com&#x60;. Client identifiers are formatted &#x60;client:name&#x60;. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified. (required)
     * @param amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. (optional)
     * @param amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. (optional)
     * @param beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. (optional)
     * @param byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) (optional)
     * @param callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. (optional)
     * @param callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. (optional)
     * @param conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. (optional)
     * @param conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60; (optional)
     * @param conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. (optional)
     * @param conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;. (optional)
     * @param conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param conferenceTrim Whether to trim leading and trailing silence from the conference recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. (optional)
     * @param earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;. (optional)
     * @param label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. (optional)
     * @param machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). (optional)
     * @param machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. (optional)
     * @param machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. (optional)
     * @param machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. (optional)
     * @param machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. (optional)
     * @param maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. (optional)
     * @param muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. (optional)
     * @param recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. (optional)
     * @param recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. (optional)
     * @param recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;. (optional)
     * @param recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio. (optional)
     * @param region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. (optional)
     * @param sipAuthPassword The SIP password for authentication. (optional)
     * @param sipAuthUsername The SIP username used for authentication. (optional)
     * @param startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. (optional)
     * @param statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. (optional)
     * @param timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. (optional)
     * @param trim Whether to trim any leading and trailing silence from the participant recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParticipantAsync(String accountSid, String conferenceSid, String from, String to, URI amdStatusCallback, String amdStatusCallbackMethod, String beep, String byoc, String callReason, String callSidToCoach, String callToken, String callerId, Boolean coaching, String conferenceRecord, URI conferenceRecordingStatusCallback, List<String> conferenceRecordingStatusCallbackEvent, String conferenceRecordingStatusCallbackMethod, URI conferenceStatusCallback, List<String> conferenceStatusCallbackEvent, String conferenceStatusCallbackMethod, String conferenceTrim, Boolean earlyMedia, Boolean endConferenceOnExit, String jitterBufferSize, String label, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, Integer maxParticipants, Boolean muted, Boolean record, String recordingChannels, URI recordingStatusCallback, List<String> recordingStatusCallbackEvent, String recordingStatusCallbackMethod, String recordingTrack, String region, String sipAuthPassword, String sipAuthUsername, Boolean startConferenceOnEnter, URI statusCallback, List<String> statusCallbackEvent, String statusCallbackMethod, Integer timeLimit, Integer timeout, String trim, String waitMethod, URI waitUrl, final ApiCallback<ApiV2010AccountConferenceParticipant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createParticipantValidateBeforeCall(accountSid, conferenceSid, from, to, amdStatusCallback, amdStatusCallbackMethod, beep, byoc, callReason, callSidToCoach, callToken, callerId, coaching, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackEvent, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, earlyMedia, endConferenceOnExit, jitterBufferSize, label, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, maxParticipants, muted, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, region, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, waitMethod, waitUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteParticipant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. (required)
     * @param conferenceSid The SID of the conference with the participants to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantCall(String accountSid, String conferenceSid, String callSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteParticipantValidateBeforeCall(String accountSid, String conferenceSid, String callSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteParticipant(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling deleteParticipant(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling deleteParticipant(Async)");
        }

        return deleteParticipantCall(accountSid, conferenceSid, callSid, _callback);

    }

    /**
     * 
     * Kick a participant from a given conference
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. (required)
     * @param conferenceSid The SID of the conference with the participants to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteParticipant(String accountSid, String conferenceSid, String callSid) throws ApiException {
        deleteParticipantWithHttpInfo(accountSid, conferenceSid, callSid);
    }

    /**
     * 
     * Kick a participant from a given conference
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. (required)
     * @param conferenceSid The SID of the conference with the participants to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteParticipantWithHttpInfo(String accountSid, String conferenceSid, String callSid) throws ApiException {
        okhttp3.Call localVarCall = deleteParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Kick a participant from a given conference
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete. (required)
     * @param conferenceSid The SID of the conference with the participants to delete. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantAsync(String accountSid, String conferenceSid, String callSid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchParticipant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. (required)
     * @param conferenceSid The SID of the conference with the participant to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchParticipantCall(String accountSid, String conferenceSid, String callSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchParticipantValidateBeforeCall(String accountSid, String conferenceSid, String callSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchParticipant(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling fetchParticipant(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling fetchParticipant(Async)");
        }

        return fetchParticipantCall(accountSid, conferenceSid, callSid, _callback);

    }

    /**
     * 
     * Fetch an instance of a participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. (required)
     * @param conferenceSid The SID of the conference with the participant to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @return ApiV2010AccountConferenceParticipant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountConferenceParticipant fetchParticipant(String accountSid, String conferenceSid, String callSid) throws ApiException {
        ApiResponse<ApiV2010AccountConferenceParticipant> localVarResp = fetchParticipantWithHttpInfo(accountSid, conferenceSid, callSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an instance of a participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. (required)
     * @param conferenceSid The SID of the conference with the participant to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @return ApiResponse&lt;ApiV2010AccountConferenceParticipant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountConferenceParticipant> fetchParticipantWithHttpInfo(String accountSid, String conferenceSid, String callSid) throws ApiException {
        okhttp3.Call localVarCall = fetchParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an instance of a participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch. (required)
     * @param conferenceSid The SID of the conference with the participant to fetch. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchParticipantAsync(String accountSid, String conferenceSid, String callSid, final ApiCallback<ApiV2010AccountConferenceParticipant> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listParticipant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. (required)
     * @param conferenceSid The SID of the conference with the participants to read. (required)
     * @param muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listParticipantCall(String accountSid, String conferenceSid, Boolean muted, Boolean hold, Boolean coaching, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (muted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Muted", muted));
        }

        if (hold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Hold", hold));
        }

        if (coaching != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Coaching", coaching));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listParticipantValidateBeforeCall(String accountSid, String conferenceSid, Boolean muted, Boolean hold, Boolean coaching, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listParticipant(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling listParticipant(Async)");
        }

        return listParticipantCall(accountSid, conferenceSid, muted, hold, coaching, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of participants belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. (required)
     * @param conferenceSid The SID of the conference with the participants to read. (required)
     * @param muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListParticipantResponse listParticipant(String accountSid, String conferenceSid, Boolean muted, Boolean hold, Boolean coaching, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListParticipantResponse> localVarResp = listParticipantWithHttpInfo(accountSid, conferenceSid, muted, hold, coaching, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of participants belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. (required)
     * @param conferenceSid The SID of the conference with the participants to read. (required)
     * @param muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListParticipantResponse> listParticipantWithHttpInfo(String accountSid, String conferenceSid, Boolean muted, Boolean hold, Boolean coaching, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listParticipantValidateBeforeCall(accountSid, conferenceSid, muted, hold, coaching, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of participants belonging to the account used to make the request
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read. (required)
     * @param conferenceSid The SID of the conference with the participants to read. (required)
     * @param muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listParticipantAsync(String accountSid, String conferenceSid, Boolean muted, Boolean hold, Boolean coaching, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listParticipantValidateBeforeCall(accountSid, conferenceSid, muted, hold, coaching, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateParticipant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. (required)
     * @param conferenceSid The SID of the conference with the participant to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference. (optional)
     * @param holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;. (optional)
     * @param holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParticipantCall(String accountSid, String conferenceSid, String callSid, String announceMethod, URI announceUrl, Boolean beepOnExit, String callSidToCoach, Boolean coaching, Boolean endConferenceOnExit, Boolean hold, String holdMethod, URI holdUrl, Boolean muted, String waitMethod, URI waitUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "ConferenceSid" + "}", localVarApiClient.escapeString(conferenceSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (announceMethod != null) {
            localVarFormParams.put("AnnounceMethod", announceMethod);
        }

        if (announceUrl != null) {
            localVarFormParams.put("AnnounceUrl", announceUrl);
        }

        if (beepOnExit != null) {
            localVarFormParams.put("BeepOnExit", beepOnExit);
        }

        if (callSidToCoach != null) {
            localVarFormParams.put("CallSidToCoach", callSidToCoach);
        }

        if (coaching != null) {
            localVarFormParams.put("Coaching", coaching);
        }

        if (endConferenceOnExit != null) {
            localVarFormParams.put("EndConferenceOnExit", endConferenceOnExit);
        }

        if (hold != null) {
            localVarFormParams.put("Hold", hold);
        }

        if (holdMethod != null) {
            localVarFormParams.put("HoldMethod", holdMethod);
        }

        if (holdUrl != null) {
            localVarFormParams.put("HoldUrl", holdUrl);
        }

        if (muted != null) {
            localVarFormParams.put("Muted", muted);
        }

        if (waitMethod != null) {
            localVarFormParams.put("WaitMethod", waitMethod);
        }

        if (waitUrl != null) {
            localVarFormParams.put("WaitUrl", waitUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateParticipantValidateBeforeCall(String accountSid, String conferenceSid, String callSid, String announceMethod, URI announceUrl, Boolean beepOnExit, String callSidToCoach, Boolean coaching, Boolean endConferenceOnExit, Boolean hold, String holdMethod, URI holdUrl, Boolean muted, String waitMethod, URI waitUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateParticipant(Async)");
        }

        // verify the required parameter 'conferenceSid' is set
        if (conferenceSid == null) {
            throw new ApiException("Missing the required parameter 'conferenceSid' when calling updateParticipant(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling updateParticipant(Async)");
        }

        return updateParticipantCall(accountSid, conferenceSid, callSid, announceMethod, announceUrl, beepOnExit, callSidToCoach, coaching, endConferenceOnExit, hold, holdMethod, holdUrl, muted, waitMethod, waitUrl, _callback);

    }

    /**
     * 
     * Update the properties of the participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. (required)
     * @param conferenceSid The SID of the conference with the participant to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference. (optional)
     * @param holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;. (optional)
     * @param holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @return ApiV2010AccountConferenceParticipant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountConferenceParticipant updateParticipant(String accountSid, String conferenceSid, String callSid, String announceMethod, URI announceUrl, Boolean beepOnExit, String callSidToCoach, Boolean coaching, Boolean endConferenceOnExit, Boolean hold, String holdMethod, URI holdUrl, Boolean muted, String waitMethod, URI waitUrl) throws ApiException {
        ApiResponse<ApiV2010AccountConferenceParticipant> localVarResp = updateParticipantWithHttpInfo(accountSid, conferenceSid, callSid, announceMethod, announceUrl, beepOnExit, callSidToCoach, coaching, endConferenceOnExit, hold, holdMethod, holdUrl, muted, waitMethod, waitUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the properties of the participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. (required)
     * @param conferenceSid The SID of the conference with the participant to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference. (optional)
     * @param holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;. (optional)
     * @param holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @return ApiResponse&lt;ApiV2010AccountConferenceParticipant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountConferenceParticipant> updateParticipantWithHttpInfo(String accountSid, String conferenceSid, String callSid, String announceMethod, URI announceUrl, Boolean beepOnExit, String callSidToCoach, Boolean coaching, Boolean endConferenceOnExit, Boolean hold, String holdMethod, URI holdUrl, Boolean muted, String waitMethod, URI waitUrl) throws ApiException {
        okhttp3.Call localVarCall = updateParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, announceMethod, announceUrl, beepOnExit, callSidToCoach, coaching, endConferenceOnExit, hold, holdMethod, holdUrl, muted, waitMethod, waitUrl, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the properties of the participant
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update. (required)
     * @param conferenceSid The SID of the conference with the participant to update. (required)
     * @param callSid The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20. (required)
     * @param announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. (optional)
     * @param announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. (optional)
     * @param coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. (optional)
     * @param endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. (optional)
     * @param hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference. (optional)
     * @param holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;. (optional)
     * @param holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. (optional)
     * @param muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;. (optional)
     * @param waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. (optional)
     * @param waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParticipantAsync(String accountSid, String conferenceSid, String callSid, String announceMethod, URI announceUrl, Boolean beepOnExit, String callSidToCoach, Boolean coaching, Boolean endConferenceOnExit, Boolean hold, String holdMethod, URI holdUrl, Boolean muted, String waitMethod, URI waitUrl, final ApiCallback<ApiV2010AccountConferenceParticipant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateParticipantValidateBeforeCall(accountSid, conferenceSid, callSid, announceMethod, announceUrl, beepOnExit, callSidToCoach, coaching, endConferenceOnExit, hold, holdMethod, holdUrl, muted, waitMethod, waitUrl, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountConferenceParticipant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
