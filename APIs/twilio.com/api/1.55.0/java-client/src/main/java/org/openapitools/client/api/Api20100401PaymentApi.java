/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountCallPayments;
import java.math.BigDecimal;
import org.openapitools.client.model.PaymentsEnumBankAccountType;
import org.openapitools.client.model.PaymentsEnumCapture;
import org.openapitools.client.model.PaymentsEnumPaymentMethod;
import org.openapitools.client.model.PaymentsEnumStatus;
import org.openapitools.client.model.PaymentsEnumTokenType;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401PaymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401PaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPayments
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback) (required)
     * @param bankAccountType  (optional)
     * @param chargeAmount A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with &#x60;currency&#x60; field. Leave blank or set to 0 to tokenize. (optional)
     * @param currency The currency of the &#x60;charge_amount&#x60;, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is &#x60;USD&#x60; and all values allowed from the Pay Connector are accepted. (optional)
     * @param description The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions. (optional)
     * @param input A list of inputs that should be accepted. Currently only &#x60;dtmf&#x60; is supported. All digits captured during a pay session are redacted from the logs. (optional)
     * @param minPostalCodeLength A positive integer that is used to validate the length of the &#x60;PostalCode&#x60; inputted by the user. User must enter this many digits. (optional)
     * @param parameter A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the &lt;Pay&gt; Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors). (optional)
     * @param paymentConnector This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [&lt;Pay&gt; Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is &#x60;Default&#x60;. (optional)
     * @param paymentMethod  (optional)
     * @param postalCode Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param securityCode Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param timeout The number of seconds that &lt;Pay&gt; should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is &#x60;5&#x60;, maximum is &#x60;600&#x60;. (optional)
     * @param tokenType  (optional)
     * @param validCardTypes Credit card types separated by space that Pay should accept. The default value is &#x60;visa mastercard amex&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentsCall(String accountSid, String callSid, String idempotencyKey, URI statusCallback, PaymentsEnumBankAccountType bankAccountType, BigDecimal chargeAmount, String currency, String description, String input, Integer minPostalCodeLength, Object parameter, String paymentConnector, PaymentsEnumPaymentMethod paymentMethod, Boolean postalCode, Boolean securityCode, Integer timeout, PaymentsEnumTokenType tokenType, String validCardTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bankAccountType != null) {
            localVarFormParams.put("BankAccountType", bankAccountType);
        }

        if (chargeAmount != null) {
            localVarFormParams.put("ChargeAmount", chargeAmount);
        }

        if (currency != null) {
            localVarFormParams.put("Currency", currency);
        }

        if (description != null) {
            localVarFormParams.put("Description", description);
        }

        if (idempotencyKey != null) {
            localVarFormParams.put("IdempotencyKey", idempotencyKey);
        }

        if (input != null) {
            localVarFormParams.put("Input", input);
        }

        if (minPostalCodeLength != null) {
            localVarFormParams.put("MinPostalCodeLength", minPostalCodeLength);
        }

        if (parameter != null) {
            localVarFormParams.put("Parameter", parameter);
        }

        if (paymentConnector != null) {
            localVarFormParams.put("PaymentConnector", paymentConnector);
        }

        if (paymentMethod != null) {
            localVarFormParams.put("PaymentMethod", paymentMethod);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (securityCode != null) {
            localVarFormParams.put("SecurityCode", securityCode);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (timeout != null) {
            localVarFormParams.put("Timeout", timeout);
        }

        if (tokenType != null) {
            localVarFormParams.put("TokenType", tokenType);
        }

        if (validCardTypes != null) {
            localVarFormParams.put("ValidCardTypes", validCardTypes);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentsValidateBeforeCall(String accountSid, String callSid, String idempotencyKey, URI statusCallback, PaymentsEnumBankAccountType bankAccountType, BigDecimal chargeAmount, String currency, String description, String input, Integer minPostalCodeLength, Object parameter, String paymentConnector, PaymentsEnumPaymentMethod paymentMethod, Boolean postalCode, Boolean securityCode, Integer timeout, PaymentsEnumTokenType tokenType, String validCardTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createPayments(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling createPayments(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createPayments(Async)");
        }

        // verify the required parameter 'statusCallback' is set
        if (statusCallback == null) {
            throw new ApiException("Missing the required parameter 'statusCallback' when calling createPayments(Async)");
        }

        return createPaymentsCall(accountSid, callSid, idempotencyKey, statusCallback, bankAccountType, chargeAmount, currency, description, input, minPostalCodeLength, parameter, paymentConnector, paymentMethod, postalCode, securityCode, timeout, tokenType, validCardTypes, _callback);

    }

    /**
     * 
     * create an instance of payments. This will start a new payments session
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback) (required)
     * @param bankAccountType  (optional)
     * @param chargeAmount A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with &#x60;currency&#x60; field. Leave blank or set to 0 to tokenize. (optional)
     * @param currency The currency of the &#x60;charge_amount&#x60;, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is &#x60;USD&#x60; and all values allowed from the Pay Connector are accepted. (optional)
     * @param description The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions. (optional)
     * @param input A list of inputs that should be accepted. Currently only &#x60;dtmf&#x60; is supported. All digits captured during a pay session are redacted from the logs. (optional)
     * @param minPostalCodeLength A positive integer that is used to validate the length of the &#x60;PostalCode&#x60; inputted by the user. User must enter this many digits. (optional)
     * @param parameter A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the &lt;Pay&gt; Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors). (optional)
     * @param paymentConnector This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [&lt;Pay&gt; Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is &#x60;Default&#x60;. (optional)
     * @param paymentMethod  (optional)
     * @param postalCode Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param securityCode Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param timeout The number of seconds that &lt;Pay&gt; should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is &#x60;5&#x60;, maximum is &#x60;600&#x60;. (optional)
     * @param tokenType  (optional)
     * @param validCardTypes Credit card types separated by space that Pay should accept. The default value is &#x60;visa mastercard amex&#x60; (optional)
     * @return ApiV2010AccountCallPayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountCallPayments createPayments(String accountSid, String callSid, String idempotencyKey, URI statusCallback, PaymentsEnumBankAccountType bankAccountType, BigDecimal chargeAmount, String currency, String description, String input, Integer minPostalCodeLength, Object parameter, String paymentConnector, PaymentsEnumPaymentMethod paymentMethod, Boolean postalCode, Boolean securityCode, Integer timeout, PaymentsEnumTokenType tokenType, String validCardTypes) throws ApiException {
        ApiResponse<ApiV2010AccountCallPayments> localVarResp = createPaymentsWithHttpInfo(accountSid, callSid, idempotencyKey, statusCallback, bankAccountType, chargeAmount, currency, description, input, minPostalCodeLength, parameter, paymentConnector, paymentMethod, postalCode, securityCode, timeout, tokenType, validCardTypes);
        return localVarResp.getData();
    }

    /**
     * 
     * create an instance of payments. This will start a new payments session
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback) (required)
     * @param bankAccountType  (optional)
     * @param chargeAmount A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with &#x60;currency&#x60; field. Leave blank or set to 0 to tokenize. (optional)
     * @param currency The currency of the &#x60;charge_amount&#x60;, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is &#x60;USD&#x60; and all values allowed from the Pay Connector are accepted. (optional)
     * @param description The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions. (optional)
     * @param input A list of inputs that should be accepted. Currently only &#x60;dtmf&#x60; is supported. All digits captured during a pay session are redacted from the logs. (optional)
     * @param minPostalCodeLength A positive integer that is used to validate the length of the &#x60;PostalCode&#x60; inputted by the user. User must enter this many digits. (optional)
     * @param parameter A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the &lt;Pay&gt; Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors). (optional)
     * @param paymentConnector This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [&lt;Pay&gt; Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is &#x60;Default&#x60;. (optional)
     * @param paymentMethod  (optional)
     * @param postalCode Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param securityCode Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param timeout The number of seconds that &lt;Pay&gt; should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is &#x60;5&#x60;, maximum is &#x60;600&#x60;. (optional)
     * @param tokenType  (optional)
     * @param validCardTypes Credit card types separated by space that Pay should accept. The default value is &#x60;visa mastercard amex&#x60; (optional)
     * @return ApiResponse&lt;ApiV2010AccountCallPayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountCallPayments> createPaymentsWithHttpInfo(String accountSid, String callSid, String idempotencyKey, URI statusCallback, PaymentsEnumBankAccountType bankAccountType, BigDecimal chargeAmount, String currency, String description, String input, Integer minPostalCodeLength, Object parameter, String paymentConnector, PaymentsEnumPaymentMethod paymentMethod, Boolean postalCode, Boolean securityCode, Integer timeout, PaymentsEnumTokenType tokenType, String validCardTypes) throws ApiException {
        okhttp3.Call localVarCall = createPaymentsValidateBeforeCall(accountSid, callSid, idempotencyKey, statusCallback, bankAccountType, chargeAmount, currency, description, input, minPostalCodeLength, parameter, paymentConnector, paymentMethod, postalCode, securityCode, timeout, tokenType, validCardTypes, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallPayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create an instance of payments. This will start a new payments session
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource. (required)
     * @param callSid The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback) (required)
     * @param bankAccountType  (optional)
     * @param chargeAmount A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with &#x60;currency&#x60; field. Leave blank or set to 0 to tokenize. (optional)
     * @param currency The currency of the &#x60;charge_amount&#x60;, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is &#x60;USD&#x60; and all values allowed from the Pay Connector are accepted. (optional)
     * @param description The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions. (optional)
     * @param input A list of inputs that should be accepted. Currently only &#x60;dtmf&#x60; is supported. All digits captured during a pay session are redacted from the logs. (optional)
     * @param minPostalCodeLength A positive integer that is used to validate the length of the &#x60;PostalCode&#x60; inputted by the user. User must enter this many digits. (optional)
     * @param parameter A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the &lt;Pay&gt; Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors). (optional)
     * @param paymentConnector This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [&lt;Pay&gt; Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is &#x60;Default&#x60;. (optional)
     * @param paymentMethod  (optional)
     * @param postalCode Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param securityCode Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is &#x60;true&#x60;. (optional)
     * @param timeout The number of seconds that &lt;Pay&gt; should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is &#x60;5&#x60;, maximum is &#x60;600&#x60;. (optional)
     * @param tokenType  (optional)
     * @param validCardTypes Credit card types separated by space that Pay should accept. The default value is &#x60;visa mastercard amex&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentsAsync(String accountSid, String callSid, String idempotencyKey, URI statusCallback, PaymentsEnumBankAccountType bankAccountType, BigDecimal chargeAmount, String currency, String description, String input, Integer minPostalCodeLength, Object parameter, String paymentConnector, PaymentsEnumPaymentMethod paymentMethod, Boolean postalCode, Boolean securityCode, Integer timeout, PaymentsEnumTokenType tokenType, String validCardTypes, final ApiCallback<ApiV2010AccountCallPayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentsValidateBeforeCall(accountSid, callSid, idempotencyKey, statusCallback, bankAccountType, chargeAmount, currency, description, input, minPostalCodeLength, parameter, paymentConnector, paymentMethod, postalCode, securityCode, timeout, tokenType, validCardTypes, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallPayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayments
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource. (required)
     * @param callSid The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource. (required)
     * @param sid The SID of Payments session that needs to be updated. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests. (required)
     * @param capture  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentsCall(String accountSid, String callSid, String sid, String idempotencyKey, URI statusCallback, PaymentsEnumCapture capture, PaymentsEnumStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "CallSid" + "}", localVarApiClient.escapeString(callSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (capture != null) {
            localVarFormParams.put("Capture", capture);
        }

        if (idempotencyKey != null) {
            localVarFormParams.put("IdempotencyKey", idempotencyKey);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentsValidateBeforeCall(String accountSid, String callSid, String sid, String idempotencyKey, URI statusCallback, PaymentsEnumCapture capture, PaymentsEnumStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updatePayments(Async)");
        }

        // verify the required parameter 'callSid' is set
        if (callSid == null) {
            throw new ApiException("Missing the required parameter 'callSid' when calling updatePayments(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updatePayments(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling updatePayments(Async)");
        }

        // verify the required parameter 'statusCallback' is set
        if (statusCallback == null) {
            throw new ApiException("Missing the required parameter 'statusCallback' when calling updatePayments(Async)");
        }

        return updatePaymentsCall(accountSid, callSid, sid, idempotencyKey, statusCallback, capture, status, _callback);

    }

    /**
     * 
     * update an instance of payments with different phases of payment flows.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource. (required)
     * @param callSid The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource. (required)
     * @param sid The SID of Payments session that needs to be updated. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests. (required)
     * @param capture  (optional)
     * @param status  (optional)
     * @return ApiV2010AccountCallPayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountCallPayments updatePayments(String accountSid, String callSid, String sid, String idempotencyKey, URI statusCallback, PaymentsEnumCapture capture, PaymentsEnumStatus status) throws ApiException {
        ApiResponse<ApiV2010AccountCallPayments> localVarResp = updatePaymentsWithHttpInfo(accountSid, callSid, sid, idempotencyKey, statusCallback, capture, status);
        return localVarResp.getData();
    }

    /**
     * 
     * update an instance of payments with different phases of payment flows.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource. (required)
     * @param callSid The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource. (required)
     * @param sid The SID of Payments session that needs to be updated. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests. (required)
     * @param capture  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ApiV2010AccountCallPayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountCallPayments> updatePaymentsWithHttpInfo(String accountSid, String callSid, String sid, String idempotencyKey, URI statusCallback, PaymentsEnumCapture capture, PaymentsEnumStatus status) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentsValidateBeforeCall(accountSid, callSid, sid, idempotencyKey, statusCallback, capture, status, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallPayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update an instance of payments with different phases of payment flows.
     * @param accountSid The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource. (required)
     * @param callSid The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource. (required)
     * @param sid The SID of Payments session that needs to be updated. (required)
     * @param idempotencyKey A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated. (required)
     * @param statusCallback Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests. (required)
     * @param capture  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentsAsync(String accountSid, String callSid, String sid, String idempotencyKey, URI statusCallback, PaymentsEnumCapture capture, PaymentsEnumStatus status, final ApiCallback<ApiV2010AccountCallPayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentsValidateBeforeCall(accountSid, callSid, sid, idempotencyKey, statusCallback, capture, status, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountCallPayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
