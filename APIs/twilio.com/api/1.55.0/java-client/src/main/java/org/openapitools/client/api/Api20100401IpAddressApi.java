/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiV2010AccountSipSipIpAccessControlListSipIpAddress;
import org.openapitools.client.model.ListSipIpAddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Api20100401IpAddressApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Api20100401IpAddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Api20100401IpAddressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSipIpAddress
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource. (required)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (required)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSipIpAddressCall(String accountSid, String ipAccessControlListSid, String friendlyName, String ipAddress, Integer cidrPrefixLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "IpAccessControlListSid" + "}", localVarApiClient.escapeString(ipAccessControlListSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cidrPrefixLength != null) {
            localVarFormParams.put("CidrPrefixLength", cidrPrefixLength);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (ipAddress != null) {
            localVarFormParams.put("IpAddress", ipAddress);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSipIpAddressValidateBeforeCall(String accountSid, String ipAccessControlListSid, String friendlyName, String ipAddress, Integer cidrPrefixLength, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling createSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAccessControlListSid' is set
        if (ipAccessControlListSid == null) {
            throw new ApiException("Missing the required parameter 'ipAccessControlListSid' when calling createSipIpAddress(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling createSipIpAddress(Async)");
        }

        return createSipIpAddressCall(accountSid, ipAccessControlListSid, friendlyName, ipAddress, cidrPrefixLength, _callback);

    }

    /**
     * 
     * Create a new IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource. (required)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (required)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @return ApiV2010AccountSipSipIpAccessControlListSipIpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipIpAccessControlListSipIpAddress createSipIpAddress(String accountSid, String ipAccessControlListSid, String friendlyName, String ipAddress, Integer cidrPrefixLength) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> localVarResp = createSipIpAddressWithHttpInfo(accountSid, ipAccessControlListSid, friendlyName, ipAddress, cidrPrefixLength);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource. (required)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (required)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @return ApiResponse&lt;ApiV2010AccountSipSipIpAccessControlListSipIpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> createSipIpAddressWithHttpInfo(String accountSid, String ipAccessControlListSid, String friendlyName, String ipAddress, Integer cidrPrefixLength) throws ApiException {
        okhttp3.Call localVarCall = createSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, friendlyName, ipAddress, cidrPrefixLength, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid with which to associate the created IpAddress resource. (required)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (required)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSipIpAddressAsync(String accountSid, String ipAccessControlListSid, String friendlyName, String ipAddress, Integer cidrPrefixLength, final ApiCallback<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, friendlyName, ipAddress, cidrPrefixLength, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSipIpAddress
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete. (required)
     * @param sid A 34 character string that uniquely identifies the resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSipIpAddressCall(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "IpAccessControlListSid" + "}", localVarApiClient.escapeString(ipAccessControlListSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSipIpAddressValidateBeforeCall(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling deleteSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAccessControlListSid' is set
        if (ipAccessControlListSid == null) {
            throw new ApiException("Missing the required parameter 'ipAccessControlListSid' when calling deleteSipIpAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSipIpAddress(Async)");
        }

        return deleteSipIpAddressCall(accountSid, ipAccessControlListSid, sid, _callback);

    }

    /**
     * 
     * Delete an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete. (required)
     * @param sid A 34 character string that uniquely identifies the resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSipIpAddress(String accountSid, String ipAccessControlListSid, String sid) throws ApiException {
        deleteSipIpAddressWithHttpInfo(accountSid, ipAccessControlListSid, sid);
    }

    /**
     * 
     * Delete an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete. (required)
     * @param sid A 34 character string that uniquely identifies the resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSipIpAddressWithHttpInfo(String accountSid, String ipAccessControlListSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to delete. (required)
     * @param sid A 34 character string that uniquely identifies the resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSipIpAddressAsync(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSipIpAddress
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch. (required)
     * @param sid A 34 character string that uniquely identifies the IpAddress resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSipIpAddressCall(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "IpAccessControlListSid" + "}", localVarApiClient.escapeString(ipAccessControlListSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSipIpAddressValidateBeforeCall(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling fetchSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAccessControlListSid' is set
        if (ipAccessControlListSid == null) {
            throw new ApiException("Missing the required parameter 'ipAccessControlListSid' when calling fetchSipIpAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSipIpAddress(Async)");
        }

        return fetchSipIpAddressCall(accountSid, ipAccessControlListSid, sid, _callback);

    }

    /**
     * 
     * Read one IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch. (required)
     * @param sid A 34 character string that uniquely identifies the IpAddress resource to fetch. (required)
     * @return ApiV2010AccountSipSipIpAccessControlListSipIpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipIpAccessControlListSipIpAddress fetchSipIpAddress(String accountSid, String ipAccessControlListSid, String sid) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> localVarResp = fetchSipIpAddressWithHttpInfo(accountSid, ipAccessControlListSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Read one IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch. (required)
     * @param sid A 34 character string that uniquely identifies the IpAddress resource to fetch. (required)
     * @return ApiResponse&lt;ApiV2010AccountSipSipIpAccessControlListSipIpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> fetchSipIpAddressWithHttpInfo(String accountSid, String ipAccessControlListSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read one IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to fetch. (required)
     * @param sid A 34 character string that uniquely identifies the IpAddress resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSipIpAddressAsync(String accountSid, String ipAccessControlListSid, String sid, final ApiCallback<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSipIpAddress
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSipIpAddressCall(String accountSid, String ipAccessControlListSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "IpAccessControlListSid" + "}", localVarApiClient.escapeString(ipAccessControlListSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSipIpAddressValidateBeforeCall(String accountSid, String ipAccessControlListSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling listSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAccessControlListSid' is set
        if (ipAccessControlListSid == null) {
            throw new ApiException("Missing the required parameter 'ipAccessControlListSid' when calling listSipIpAddress(Async)");
        }

        return listSipIpAddressCall(accountSid, ipAccessControlListSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Read multiple IpAddress resources.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSipIpAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSipIpAddressResponse listSipIpAddress(String accountSid, String ipAccessControlListSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSipIpAddressResponse> localVarResp = listSipIpAddressWithHttpInfo(accountSid, ipAccessControlListSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Read multiple IpAddress resources.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSipIpAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSipIpAddressResponse> listSipIpAddressWithHttpInfo(String accountSid, String ipAccessControlListSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSipIpAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read multiple IpAddress resources.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSipIpAddressAsync(String accountSid, String ipAccessControlListSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSipIpAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSipIpAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSipIpAddress
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update. (required)
     * @param sid A 34 character string that identifies the IpAddress resource to update. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (optional)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSipIpAddressCall(String accountSid, String ipAccessControlListSid, String sid, Integer cidrPrefixLength, String friendlyName, String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json"
            .replace("{" + "AccountSid" + "}", localVarApiClient.escapeString(accountSid.toString()))
            .replace("{" + "IpAccessControlListSid" + "}", localVarApiClient.escapeString(ipAccessControlListSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cidrPrefixLength != null) {
            localVarFormParams.put("CidrPrefixLength", cidrPrefixLength);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (ipAddress != null) {
            localVarFormParams.put("IpAddress", ipAddress);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSipIpAddressValidateBeforeCall(String accountSid, String ipAccessControlListSid, String sid, Integer cidrPrefixLength, String friendlyName, String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSid' is set
        if (accountSid == null) {
            throw new ApiException("Missing the required parameter 'accountSid' when calling updateSipIpAddress(Async)");
        }

        // verify the required parameter 'ipAccessControlListSid' is set
        if (ipAccessControlListSid == null) {
            throw new ApiException("Missing the required parameter 'ipAccessControlListSid' when calling updateSipIpAddress(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSipIpAddress(Async)");
        }

        return updateSipIpAddressCall(accountSid, ipAccessControlListSid, sid, cidrPrefixLength, friendlyName, ipAddress, _callback);

    }

    /**
     * 
     * Update an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update. (required)
     * @param sid A 34 character string that identifies the IpAddress resource to update. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (optional)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (optional)
     * @return ApiV2010AccountSipSipIpAccessControlListSipIpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2010AccountSipSipIpAccessControlListSipIpAddress updateSipIpAddress(String accountSid, String ipAccessControlListSid, String sid, Integer cidrPrefixLength, String friendlyName, String ipAddress) throws ApiException {
        ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> localVarResp = updateSipIpAddressWithHttpInfo(accountSid, ipAccessControlListSid, sid, cidrPrefixLength, friendlyName, ipAddress);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update. (required)
     * @param sid A 34 character string that identifies the IpAddress resource to update. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (optional)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (optional)
     * @return ApiResponse&lt;ApiV2010AccountSipSipIpAccessControlListSipIpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> updateSipIpAddressWithHttpInfo(String accountSid, String ipAccessControlListSid, String sid, Integer cidrPrefixLength, String friendlyName, String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = updateSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, cidrPrefixLength, friendlyName, ipAddress, null);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an IpAddress resource.
     * @param accountSid The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource. (required)
     * @param ipAccessControlListSid The IpAccessControlList Sid that identifies the IpAddress resources to update. (required)
     * @param sid A 34 character string that identifies the IpAddress resource to update. (required)
     * @param cidrPrefixLength An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used. (optional)
     * @param friendlyName A human readable descriptive text for this resource, up to 255 characters long. (optional)
     * @param ipAddress An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSipIpAddressAsync(String accountSid, String ipAccessControlListSid, String sid, Integer cidrPrefixLength, String friendlyName, String ipAddress, final ApiCallback<ApiV2010AccountSipSipIpAccessControlListSipIpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSipIpAddressValidateBeforeCall(accountSid, ipAccessControlListSid, sid, cidrPrefixLength, friendlyName, ipAddress, _callback);
        Type localVarReturnType = new TypeToken<ApiV2010AccountSipSipIpAccessControlListSipIpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
