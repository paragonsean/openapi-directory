/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountUsageUsageTrigger;
import org.openapitools.client.model.ListUsageTriggerResponse;
import java.net.URI;
import org.openapitools.client.model.UsageTriggerEnumRecurring;
import org.openapitools.client.model.UsageTriggerEnumTriggerField;
import org.openapitools.client.model.UsageTriggerEnumUsageCategory;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401TriggerApi
 */
@Disabled
public class Api20100401TriggerApiTest {

    private final Api20100401TriggerApi api = new Api20100401TriggerApi();

    /**
     * Create a new UsageTrigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsageTriggerTest() throws ApiException {
        String accountSid = null;
        URI callbackUrl = null;
        String triggerValue = null;
        UsageTriggerEnumUsageCategory usageCategory = null;
        String callbackMethod = null;
        String friendlyName = null;
        UsageTriggerEnumRecurring recurring = null;
        UsageTriggerEnumTriggerField triggerBy = null;
        ApiV2010AccountUsageUsageTrigger response = api.createUsageTrigger(accountSid, callbackUrl, triggerValue, usageCategory, callbackMethod, friendlyName, recurring, triggerBy);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsageTriggerTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteUsageTrigger(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch and instance of a usage-trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchUsageTriggerTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        ApiV2010AccountUsageUsageTrigger response = api.fetchUsageTrigger(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of usage-triggers belonging to the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsageTriggerTest() throws ApiException {
        String accountSid = null;
        UsageTriggerEnumRecurring recurring = null;
        UsageTriggerEnumTriggerField triggerBy = null;
        UsageTriggerEnumUsageCategory usageCategory = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUsageTriggerResponse response = api.listUsageTrigger(accountSid, recurring, triggerBy, usageCategory, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update an instance of a usage trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsageTriggerTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        String callbackMethod = null;
        URI callbackUrl = null;
        String friendlyName = null;
        ApiV2010AccountUsageUsageTrigger response = api.updateUsageTrigger(accountSid, sid, callbackMethod, callbackUrl, friendlyName);
        // TODO: test validations
    }

}
