/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountSipSipDomain;
import org.openapitools.client.model.ListSipDomainResponse;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401DomainApi
 */
@Disabled
public class Api20100401DomainApiTest {

    private final Api20100401DomainApi api = new Api20100401DomainApi();

    /**
     * Create a new Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSipDomainTest() throws ApiException {
        String accountSid = null;
        String domainName = null;
        String byocTrunkSid = null;
        String emergencyCallerSid = null;
        Boolean emergencyCallingEnabled = null;
        String friendlyName = null;
        Boolean secure = null;
        Boolean sipRegistration = null;
        String voiceFallbackMethod = null;
        URI voiceFallbackUrl = null;
        String voiceMethod = null;
        String voiceStatusCallbackMethod = null;
        URI voiceStatusCallbackUrl = null;
        URI voiceUrl = null;
        ApiV2010AccountSipSipDomain response = api.createSipDomain(accountSid, domainName, byocTrunkSid, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl);
        // TODO: test validations
    }

    /**
     * Delete an instance of a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSipDomainTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteSipDomain(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchSipDomainTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        ApiV2010AccountSipSipDomain response = api.fetchSipDomain(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of domains belonging to the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSipDomainTest() throws ApiException {
        String accountSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSipDomainResponse response = api.listSipDomain(accountSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update the attributes of a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSipDomainTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        String byocTrunkSid = null;
        String domainName = null;
        String emergencyCallerSid = null;
        Boolean emergencyCallingEnabled = null;
        String friendlyName = null;
        Boolean secure = null;
        Boolean sipRegistration = null;
        String voiceFallbackMethod = null;
        URI voiceFallbackUrl = null;
        String voiceMethod = null;
        String voiceStatusCallbackMethod = null;
        URI voiceStatusCallbackUrl = null;
        URI voiceUrl = null;
        ApiV2010AccountSipSipDomain response = api.updateSipDomain(accountSid, sid, byocTrunkSid, domainName, emergencyCallerSid, emergencyCallingEnabled, friendlyName, secure, sipRegistration, voiceFallbackMethod, voiceFallbackUrl, voiceMethod, voiceStatusCallbackMethod, voiceStatusCallbackUrl, voiceUrl);
        // TODO: test validations
    }

}
