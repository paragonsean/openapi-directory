/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountConferenceParticipant;
import org.openapitools.client.model.ListParticipantResponse;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401ParticipantApi
 */
@Disabled
public class Api20100401ParticipantApiTest {

    private final Api20100401ParticipantApi api = new Api20100401ParticipantApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createParticipantTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String from = null;
        String to = null;
        URI amdStatusCallback = null;
        String amdStatusCallbackMethod = null;
        String beep = null;
        String byoc = null;
        String callReason = null;
        String callSidToCoach = null;
        String callToken = null;
        String callerId = null;
        Boolean coaching = null;
        String conferenceRecord = null;
        URI conferenceRecordingStatusCallback = null;
        List<String> conferenceRecordingStatusCallbackEvent = null;
        String conferenceRecordingStatusCallbackMethod = null;
        URI conferenceStatusCallback = null;
        List<String> conferenceStatusCallbackEvent = null;
        String conferenceStatusCallbackMethod = null;
        String conferenceTrim = null;
        Boolean earlyMedia = null;
        Boolean endConferenceOnExit = null;
        String jitterBufferSize = null;
        String label = null;
        String machineDetection = null;
        Integer machineDetectionSilenceTimeout = null;
        Integer machineDetectionSpeechEndThreshold = null;
        Integer machineDetectionSpeechThreshold = null;
        Integer machineDetectionTimeout = null;
        Integer maxParticipants = null;
        Boolean muted = null;
        Boolean record = null;
        String recordingChannels = null;
        URI recordingStatusCallback = null;
        List<String> recordingStatusCallbackEvent = null;
        String recordingStatusCallbackMethod = null;
        String recordingTrack = null;
        String region = null;
        String sipAuthPassword = null;
        String sipAuthUsername = null;
        Boolean startConferenceOnEnter = null;
        URI statusCallback = null;
        List<String> statusCallbackEvent = null;
        String statusCallbackMethod = null;
        Integer timeLimit = null;
        Integer timeout = null;
        String trim = null;
        String waitMethod = null;
        URI waitUrl = null;
        ApiV2010AccountConferenceParticipant response = api.createParticipant(accountSid, conferenceSid, from, to, amdStatusCallback, amdStatusCallbackMethod, beep, byoc, callReason, callSidToCoach, callToken, callerId, coaching, conferenceRecord, conferenceRecordingStatusCallback, conferenceRecordingStatusCallbackEvent, conferenceRecordingStatusCallbackMethod, conferenceStatusCallback, conferenceStatusCallbackEvent, conferenceStatusCallbackMethod, conferenceTrim, earlyMedia, endConferenceOnExit, jitterBufferSize, label, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, maxParticipants, muted, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, region, sipAuthPassword, sipAuthUsername, startConferenceOnEnter, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, waitMethod, waitUrl);
        // TODO: test validations
    }

    /**
     * Kick a participant from a given conference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteParticipantTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String callSid = null;
        api.deleteParticipant(accountSid, conferenceSid, callSid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a participant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchParticipantTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String callSid = null;
        ApiV2010AccountConferenceParticipant response = api.fetchParticipant(accountSid, conferenceSid, callSid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of participants belonging to the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listParticipantTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        Boolean muted = null;
        Boolean hold = null;
        Boolean coaching = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListParticipantResponse response = api.listParticipant(accountSid, conferenceSid, muted, hold, coaching, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Update the properties of the participant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipantTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String callSid = null;
        String announceMethod = null;
        URI announceUrl = null;
        Boolean beepOnExit = null;
        String callSidToCoach = null;
        Boolean coaching = null;
        Boolean endConferenceOnExit = null;
        Boolean hold = null;
        String holdMethod = null;
        URI holdUrl = null;
        Boolean muted = null;
        String waitMethod = null;
        URI waitUrl = null;
        ApiV2010AccountConferenceParticipant response = api.updateParticipant(accountSid, conferenceSid, callSid, announceMethod, announceUrl, beepOnExit, callSidToCoach, coaching, endConferenceOnExit, hold, holdMethod, holdUrl, muted, waitMethod, waitUrl);
        // TODO: test validations
    }

}
