/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountRecordingRecordingTranscription;
import org.openapitools.client.model.ApiV2010AccountTranscription;
import org.openapitools.client.model.ListRecordingTranscriptionResponse;
import org.openapitools.client.model.ListTranscriptionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401TranscriptionApi
 */
@Disabled
public class Api20100401TranscriptionApiTest {

    private final Api20100401TranscriptionApi api = new Api20100401TranscriptionApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordingTranscriptionTest() throws ApiException {
        String accountSid = null;
        String recordingSid = null;
        String sid = null;
        api.deleteRecordingTranscription(accountSid, recordingSid, sid);
        // TODO: test validations
    }

    /**
     * Delete a transcription from the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTranscriptionTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteTranscription(accountSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchRecordingTranscriptionTest() throws ApiException {
        String accountSid = null;
        String recordingSid = null;
        String sid = null;
        ApiV2010AccountRecordingRecordingTranscription response = api.fetchRecordingTranscription(accountSid, recordingSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a Transcription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTranscriptionTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        ApiV2010AccountTranscription response = api.fetchTranscription(accountSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordingTranscriptionTest() throws ApiException {
        String accountSid = null;
        String recordingSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListRecordingTranscriptionResponse response = api.listRecordingTranscription(accountSid, recordingSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of transcriptions belonging to the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTranscriptionTest() throws ApiException {
        String accountSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTranscriptionResponse response = api.listTranscription(accountSid, pageSize, page, pageToken);
        // TODO: test validations
    }

}
