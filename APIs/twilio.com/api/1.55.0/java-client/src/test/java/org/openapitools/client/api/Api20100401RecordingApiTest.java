/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountCallCallRecording;
import org.openapitools.client.model.ApiV2010AccountConferenceConferenceRecording;
import org.openapitools.client.model.ApiV2010AccountRecording;
import org.openapitools.client.model.CallRecordingEnumStatus;
import org.openapitools.client.model.ConferenceRecordingEnumStatus;
import org.openapitools.client.model.ListCallRecordingResponse;
import org.openapitools.client.model.ListConferenceRecordingResponse;
import org.openapitools.client.model.ListRecordingResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401RecordingApi
 */
@Disabled
public class Api20100401RecordingApiTest {

    private final Api20100401RecordingApi api = new Api20100401RecordingApi();

    /**
     * Create a recording for the call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCallRecordingTest() throws ApiException {
        String accountSid = null;
        String callSid = null;
        String recordingChannels = null;
        URI recordingStatusCallback = null;
        List<String> recordingStatusCallbackEvent = null;
        String recordingStatusCallbackMethod = null;
        String recordingTrack = null;
        String trim = null;
        ApiV2010AccountCallCallRecording response = api.createCallRecording(accountSid, callSid, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, trim);
        // TODO: test validations
    }

    /**
     * Delete a recording from your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCallRecordingTest() throws ApiException {
        String accountSid = null;
        String callSid = null;
        String sid = null;
        api.deleteCallRecording(accountSid, callSid, sid);
        // TODO: test validations
    }

    /**
     * Delete a recording from your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConferenceRecordingTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String sid = null;
        api.deleteConferenceRecording(accountSid, conferenceSid, sid);
        // TODO: test validations
    }

    /**
     * Delete a recording from your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordingTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteRecording(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a recording for a call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCallRecordingTest() throws ApiException {
        String accountSid = null;
        String callSid = null;
        String sid = null;
        ApiV2010AccountCallCallRecording response = api.fetchCallRecording(accountSid, callSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a recording for a call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchConferenceRecordingTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String sid = null;
        ApiV2010AccountConferenceConferenceRecording response = api.fetchConferenceRecording(accountSid, conferenceSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an instance of a recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchRecordingTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        Boolean includeSoftDeleted = null;
        ApiV2010AccountRecording response = api.fetchRecording(accountSid, sid, includeSoftDeleted);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallRecordingTest() throws ApiException {
        String accountSid = null;
        String callSid = null;
        LocalDate dateCreated = null;
        LocalDate dateCreatedLessThan = null;
        LocalDate dateCreatedGreaterThan = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCallRecordingResponse response = api.listCallRecording(accountSid, callSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConferenceRecordingTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        LocalDate dateCreated = null;
        LocalDate dateCreatedLessThan = null;
        LocalDate dateCreatedGreaterThan = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListConferenceRecordingResponse response = api.listConferenceRecording(accountSid, conferenceSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recordings belonging to the account used to make the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordingTest() throws ApiException {
        String accountSid = null;
        OffsetDateTime dateCreated = null;
        OffsetDateTime dateCreatedLessThan = null;
        OffsetDateTime dateCreatedGreaterThan = null;
        String callSid = null;
        String conferenceSid = null;
        Boolean includeSoftDeleted = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListRecordingResponse response = api.listRecording(accountSid, dateCreated, dateCreatedLessThan, dateCreatedGreaterThan, callSid, conferenceSid, includeSoftDeleted, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass &#x60;Twilio.CURRENT&#x60; instead of recording sid to reference current active recording.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallRecordingTest() throws ApiException {
        String accountSid = null;
        String callSid = null;
        String sid = null;
        CallRecordingEnumStatus status = null;
        String pauseBehavior = null;
        ApiV2010AccountCallCallRecording response = api.updateCallRecording(accountSid, callSid, sid, status, pauseBehavior);
        // TODO: test validations
    }

    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use &#x60;Twilio.CURRENT&#x60;, pass it as recording sid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConferenceRecordingTest() throws ApiException {
        String accountSid = null;
        String conferenceSid = null;
        String sid = null;
        ConferenceRecordingEnumStatus status = null;
        String pauseBehavior = null;
        ApiV2010AccountConferenceConferenceRecording response = api.updateConferenceRecording(accountSid, conferenceSid, sid, status, pauseBehavior);
        // TODO: test validations
    }

}
