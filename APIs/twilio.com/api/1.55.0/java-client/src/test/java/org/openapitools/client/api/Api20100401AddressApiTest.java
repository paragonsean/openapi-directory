/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountAddress;
import org.openapitools.client.model.ListAddressResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401AddressApi
 */
@Disabled
public class Api20100401AddressApiTest {

    private final Api20100401AddressApi api = new Api20100401AddressApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAddressTest() throws ApiException {
        String accountSid = null;
        String city = null;
        String customerName = null;
        String isoCountry = null;
        String postalCode = null;
        String region = null;
        String street = null;
        Boolean autoCorrectAddress = null;
        Boolean emergencyEnabled = null;
        String friendlyName = null;
        String streetSecondary = null;
        ApiV2010AccountAddress response = api.createAddress(accountSid, city, customerName, isoCountry, postalCode, region, street, autoCorrectAddress, emergencyEnabled, friendlyName, streetSecondary);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAddressTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteAddress(accountSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchAddressTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        ApiV2010AccountAddress response = api.fetchAddress(accountSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAddressTest() throws ApiException {
        String accountSid = null;
        String customerName = null;
        String friendlyName = null;
        String isoCountry = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListAddressResponse response = api.listAddress(accountSid, customerName, friendlyName, isoCountry, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddressTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        Boolean autoCorrectAddress = null;
        String city = null;
        String customerName = null;
        Boolean emergencyEnabled = null;
        String friendlyName = null;
        String postalCode = null;
        String region = null;
        String street = null;
        String streetSecondary = null;
        ApiV2010AccountAddress response = api.updateAddress(accountSid, sid, autoCorrectAddress, city, customerName, emergencyEnabled, friendlyName, postalCode, region, street, streetSecondary);
        // TODO: test validations
    }

}
