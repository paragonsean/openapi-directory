/*
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiV2010AccountCall;
import org.openapitools.client.model.CallEnumStatus;
import org.openapitools.client.model.CallEnumUpdateStatus;
import org.openapitools.client.model.ListCallResponse;
import java.time.OffsetDateTime;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Api20100401CallApi
 */
@Disabled
public class Api20100401CallApiTest {

    private final Api20100401CallApi api = new Api20100401CallApi();

    /**
     * Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCallTest() throws ApiException {
        String accountSid = null;
        String from = null;
        String to = null;
        String applicationSid = null;
        String asyncAmd = null;
        URI asyncAmdStatusCallback = null;
        String asyncAmdStatusCallbackMethod = null;
        String byoc = null;
        String callReason = null;
        String callToken = null;
        String callerId = null;
        String fallbackMethod = null;
        URI fallbackUrl = null;
        String machineDetection = null;
        Integer machineDetectionSilenceTimeout = null;
        Integer machineDetectionSpeechEndThreshold = null;
        Integer machineDetectionSpeechThreshold = null;
        Integer machineDetectionTimeout = null;
        String method = null;
        Boolean record = null;
        String recordingChannels = null;
        String recordingStatusCallback = null;
        List<String> recordingStatusCallbackEvent = null;
        String recordingStatusCallbackMethod = null;
        String recordingTrack = null;
        String sendDigits = null;
        String sipAuthPassword = null;
        String sipAuthUsername = null;
        URI statusCallback = null;
        List<String> statusCallbackEvent = null;
        String statusCallbackMethod = null;
        Integer timeLimit = null;
        Integer timeout = null;
        String trim = null;
        String twiml = null;
        URI url = null;
        ApiV2010AccountCall response = api.createCall(accountSid, from, to, applicationSid, asyncAmd, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, byoc, callReason, callToken, callerId, fallbackMethod, fallbackUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, method, record, recordingChannels, recordingStatusCallback, recordingStatusCallbackEvent, recordingStatusCallbackMethod, recordingTrack, sendDigits, sipAuthPassword, sipAuthUsername, statusCallback, statusCallbackEvent, statusCallbackMethod, timeLimit, timeout, trim, twiml, url);
        // TODO: test validations
    }

    /**
     * Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCallTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        api.deleteCall(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch the call specified by the provided Call SID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCallTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        ApiV2010AccountCall response = api.fetchCall(accountSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieves a collection of calls made to and from your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCallTest() throws ApiException {
        String accountSid = null;
        String to = null;
        String from = null;
        String parentCallSid = null;
        CallEnumStatus status = null;
        OffsetDateTime startTime = null;
        OffsetDateTime startTimeLessThan = null;
        OffsetDateTime startTimeGreaterThan = null;
        OffsetDateTime endTime = null;
        OffsetDateTime endTimeLessThan = null;
        OffsetDateTime endTimeGreaterThan = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCallResponse response = api.listCall(accountSid, to, from, parentCallSid, status, startTime, startTimeLessThan, startTimeGreaterThan, endTime, endTimeLessThan, endTimeGreaterThan, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Initiates a call redirect or terminates a call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCallTest() throws ApiException {
        String accountSid = null;
        String sid = null;
        String fallbackMethod = null;
        URI fallbackUrl = null;
        String method = null;
        CallEnumUpdateStatus status = null;
        URI statusCallback = null;
        String statusCallbackMethod = null;
        Integer timeLimit = null;
        String twiml = null;
        URI url = null;
        ApiV2010AccountCall response = api.updateCall(accountSid, sid, fallbackMethod, fallbackUrl, method, status, statusCallback, statusCallbackMethod, timeLimit, twiml, url);
        // TODO: test validations
    }

}
