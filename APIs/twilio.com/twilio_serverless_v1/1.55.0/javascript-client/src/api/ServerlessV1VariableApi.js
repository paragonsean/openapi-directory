/**
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListVariableResponse from '../model/ListVariableResponse';
import ServerlessV1ServiceEnvironmentVariable from '../model/ServerlessV1ServiceEnvironmentVariable';

/**
* ServerlessV1Variable service.
* @module api/ServerlessV1VariableApi
* @version 1.55.0
*/
export default class ServerlessV1VariableApi {

    /**
    * Constructs a new ServerlessV1VariableApi. 
    * @alias module:api/ServerlessV1VariableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVariable operation.
     * @callback module:api/ServerlessV1VariableApi~createVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerlessV1ServiceEnvironmentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Variable.
     * @param {String} serviceSid The SID of the Service to create the Variable resource under.
     * @param {String} environmentSid The SID of the Environment in which the Variable resource exists.
     * @param {String} key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters.
     * @param {String} value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size.
     * @param {module:api/ServerlessV1VariableApi~createVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerlessV1ServiceEnvironmentVariable}
     */
    createVariable(serviceSid, environmentSid, key, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createVariable");
      }
      // verify the required parameter 'environmentSid' is set
      if (environmentSid === undefined || environmentSid === null) {
        throw new Error("Missing the required parameter 'environmentSid' when calling createVariable");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createVariable");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling createVariable");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'EnvironmentSid': environmentSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Key': key,
        'Value': value
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ServerlessV1ServiceEnvironmentVariable;
      let basePaths = ['https://serverless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/ServerlessV1VariableApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Variable.
     * @param {String} serviceSid The SID of the Service to delete the Variable resource from.
     * @param {String} environmentSid The SID of the Environment with the Variables to delete.
     * @param {String} sid The SID of the Variable resource to delete.
     * @param {module:api/ServerlessV1VariableApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariable(serviceSid, environmentSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteVariable");
      }
      // verify the required parameter 'environmentSid' is set
      if (environmentSid === undefined || environmentSid === null) {
        throw new Error("Missing the required parameter 'environmentSid' when calling deleteVariable");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteVariable");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'EnvironmentSid': environmentSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://serverless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchVariable operation.
     * @callback module:api/ServerlessV1VariableApi~fetchVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerlessV1ServiceEnvironmentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific Variable.
     * @param {String} serviceSid The SID of the Service to fetch the Variable resource from.
     * @param {String} environmentSid The SID of the Environment with the Variable resource to fetch.
     * @param {String} sid The SID of the Variable resource to fetch.
     * @param {module:api/ServerlessV1VariableApi~fetchVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerlessV1ServiceEnvironmentVariable}
     */
    fetchVariable(serviceSid, environmentSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchVariable");
      }
      // verify the required parameter 'environmentSid' is set
      if (environmentSid === undefined || environmentSid === null) {
        throw new Error("Missing the required parameter 'environmentSid' when calling fetchVariable");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchVariable");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'EnvironmentSid': environmentSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerlessV1ServiceEnvironmentVariable;
      let basePaths = ['https://serverless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariable operation.
     * @callback module:api/ServerlessV1VariableApi~listVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVariableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Variables.
     * @param {String} serviceSid The SID of the Service to read the Variable resources from.
     * @param {String} environmentSid The SID of the Environment with the Variable resources to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ServerlessV1VariableApi~listVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVariableResponse}
     */
    listVariable(serviceSid, environmentSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listVariable");
      }
      // verify the required parameter 'environmentSid' is set
      if (environmentSid === undefined || environmentSid === null) {
        throw new Error("Missing the required parameter 'environmentSid' when calling listVariable");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'EnvironmentSid': environmentSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVariableResponse;
      let basePaths = ['https://serverless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariable operation.
     * @callback module:api/ServerlessV1VariableApi~updateVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerlessV1ServiceEnvironmentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Variable.
     * @param {String} serviceSid The SID of the Service to update the Variable resource under.
     * @param {String} environmentSid The SID of the Environment with the Variable resource to update.
     * @param {String} sid The SID of the Variable resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [key] A string by which the Variable resource can be referenced. It can be a maximum of 128 characters.
     * @param {String} [value] A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size.
     * @param {module:api/ServerlessV1VariableApi~updateVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerlessV1ServiceEnvironmentVariable}
     */
    updateVariable(serviceSid, environmentSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateVariable");
      }
      // verify the required parameter 'environmentSid' is set
      if (environmentSid === undefined || environmentSid === null) {
        throw new Error("Missing the required parameter 'environmentSid' when calling updateVariable");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateVariable");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'EnvironmentSid': environmentSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Key': opts['key'],
        'Value': opts['value']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ServerlessV1ServiceEnvironmentVariable;
      let basePaths = ['https://serverless.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
