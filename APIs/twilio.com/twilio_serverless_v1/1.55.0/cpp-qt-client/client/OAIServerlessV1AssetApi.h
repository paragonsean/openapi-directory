/**
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerlessV1AssetApi_H
#define OAI_OAIServerlessV1AssetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListAssetResponse.h"
#include "OAIServerless_v1_service_asset.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerlessV1AssetApi : public QObject {
    Q_OBJECT

public:
    OAIServerlessV1AssetApi(const int timeOut = 0);
    ~OAIServerlessV1AssetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  friendly_name QString [required]
    */
    virtual void createAsset(const QString &service_sid, const QString &friendly_name);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteAsset(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchAsset(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listAsset(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [required]
    */
    virtual void updateAsset(const QString &service_sid, const QString &sid, const QString &friendly_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAssetCallback(OAIHttpRequestWorker *worker);
    void deleteAssetCallback(OAIHttpRequestWorker *worker);
    void fetchAssetCallback(OAIHttpRequestWorker *worker);
    void listAssetCallback(OAIHttpRequestWorker *worker);
    void updateAssetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAssetSignal(OAIServerless_v1_service_asset summary);
    void deleteAssetSignal();
    void fetchAssetSignal(OAIServerless_v1_service_asset summary);
    void listAssetSignal(OAIListAssetResponse summary);
    void updateAssetSignal(OAIServerless_v1_service_asset summary);


    void createAssetSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_asset summary);
    void deleteAssetSignalFull(OAIHttpRequestWorker *worker);
    void fetchAssetSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_asset summary);
    void listAssetSignalFull(OAIHttpRequestWorker *worker, OAIListAssetResponse summary);
    void updateAssetSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_asset summary);

    Q_DECL_DEPRECATED_X("Use createAssetSignalError() instead")
    void createAssetSignalE(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalError(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetSignalError() instead")
    void deleteAssetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAssetSignalError() instead")
    void fetchAssetSignalE(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAssetSignalError(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetSignalError() instead")
    void listAssetSignalE(OAIListAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetSignalError(OAIListAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetSignalError() instead")
    void updateAssetSignalE(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetSignalError(OAIServerless_v1_service_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAssetSignalErrorFull() instead")
    void createAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetSignalErrorFull() instead")
    void deleteAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchAssetSignalErrorFull() instead")
    void fetchAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetSignalErrorFull() instead")
    void listAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetSignalErrorFull() instead")
    void updateAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
