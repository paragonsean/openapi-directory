/**
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerlessV1VariableApi_H
#define OAI_OAIServerlessV1VariableApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListVariableResponse.h"
#include "OAIServerless_v1_service_environment_variable.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerlessV1VariableApi : public QObject {
    Q_OBJECT

public:
    OAIServerlessV1VariableApi(const int timeOut = 0);
    ~OAIServerlessV1VariableApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  environment_sid QString [required]
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    */
    virtual void createVariable(const QString &service_sid, const QString &environment_sid, const QString &key, const QString &value);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  environment_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteVariable(const QString &service_sid, const QString &environment_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  environment_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchVariable(const QString &service_sid, const QString &environment_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  environment_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listVariable(const QString &service_sid, const QString &environment_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  environment_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  key QString [optional]
    * @param[in]  value QString [optional]
    */
    virtual void updateVariable(const QString &service_sid, const QString &environment_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVariableCallback(OAIHttpRequestWorker *worker);
    void deleteVariableCallback(OAIHttpRequestWorker *worker);
    void fetchVariableCallback(OAIHttpRequestWorker *worker);
    void listVariableCallback(OAIHttpRequestWorker *worker);
    void updateVariableCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVariableSignal(OAIServerless_v1_service_environment_variable summary);
    void deleteVariableSignal();
    void fetchVariableSignal(OAIServerless_v1_service_environment_variable summary);
    void listVariableSignal(OAIListVariableResponse summary);
    void updateVariableSignal(OAIServerless_v1_service_environment_variable summary);


    void createVariableSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_environment_variable summary);
    void deleteVariableSignalFull(OAIHttpRequestWorker *worker);
    void fetchVariableSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_environment_variable summary);
    void listVariableSignalFull(OAIHttpRequestWorker *worker, OAIListVariableResponse summary);
    void updateVariableSignalFull(OAIHttpRequestWorker *worker, OAIServerless_v1_service_environment_variable summary);

    Q_DECL_DEPRECATED_X("Use createVariableSignalError() instead")
    void createVariableSignalE(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVariableSignalError(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVariableSignalError() instead")
    void deleteVariableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVariableSignalError() instead")
    void fetchVariableSignalE(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVariableSignalError(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVariableSignalError() instead")
    void listVariableSignalE(OAIListVariableResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVariableSignalError(OAIListVariableResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVariableSignalError() instead")
    void updateVariableSignalE(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVariableSignalError(OAIServerless_v1_service_environment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVariableSignalErrorFull() instead")
    void createVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVariableSignalErrorFull() instead")
    void deleteVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVariableSignalErrorFull() instead")
    void fetchVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVariableSignalErrorFull() instead")
    void listVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVariableSignalErrorFull() instead")
    void updateVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
