/**
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerless_v1_service_build.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerless_v1_service_build::OAIServerless_v1_service_build(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerless_v1_service_build::OAIServerless_v1_service_build() {
    this->initializeModel();
}

OAIServerless_v1_service_build::~OAIServerless_v1_service_build() {}

void OAIServerless_v1_service_build::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_asset_versions_isSet = false;
    m_asset_versions_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_function_versions_isSet = false;
    m_function_versions_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIServerless_v1_service_build::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerless_v1_service_build::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_asset_versions_isValid = ::OpenAPI::fromJsonValue(m_asset_versions, json[QString("asset_versions")]);
    m_asset_versions_isSet = !json[QString("asset_versions")].isNull() && m_asset_versions_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_function_versions_isValid = ::OpenAPI::fromJsonValue(m_function_versions, json[QString("function_versions")]);
    m_function_versions_isSet = !json[QString("function_versions")].isNull() && m_function_versions_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIServerless_v1_service_build::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerless_v1_service_build::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_asset_versions.size() > 0) {
        obj.insert(QString("asset_versions"), ::OpenAPI::toJsonValue(m_asset_versions));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_dependencies.size() > 0) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_function_versions.size() > 0) {
        obj.insert(QString("function_versions"), ::OpenAPI::toJsonValue(m_function_versions));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_runtime.isSet()) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIServerless_v1_service_build::getAccountSid() const {
    return m_account_sid;
}
void OAIServerless_v1_service_build::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIServerless_v1_service_build::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIServerless_v1_service_build::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QJsonValue> OAIServerless_v1_service_build::getAssetVersions() const {
    return m_asset_versions;
}
void OAIServerless_v1_service_build::setAssetVersions(const QList<QJsonValue> &asset_versions) {
    m_asset_versions = asset_versions;
    m_asset_versions_isSet = true;
}

bool OAIServerless_v1_service_build::is_asset_versions_Set() const{
    return m_asset_versions_isSet;
}

bool OAIServerless_v1_service_build::is_asset_versions_Valid() const{
    return m_asset_versions_isValid;
}

QDateTime OAIServerless_v1_service_build::getDateCreated() const {
    return m_date_created;
}
void OAIServerless_v1_service_build::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIServerless_v1_service_build::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIServerless_v1_service_build::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIServerless_v1_service_build::getDateUpdated() const {
    return m_date_updated;
}
void OAIServerless_v1_service_build::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIServerless_v1_service_build::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIServerless_v1_service_build::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QList<QJsonValue> OAIServerless_v1_service_build::getDependencies() const {
    return m_dependencies;
}
void OAIServerless_v1_service_build::setDependencies(const QList<QJsonValue> &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAIServerless_v1_service_build::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAIServerless_v1_service_build::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

QList<QJsonValue> OAIServerless_v1_service_build::getFunctionVersions() const {
    return m_function_versions;
}
void OAIServerless_v1_service_build::setFunctionVersions(const QList<QJsonValue> &function_versions) {
    m_function_versions = function_versions;
    m_function_versions_isSet = true;
}

bool OAIServerless_v1_service_build::is_function_versions_Set() const{
    return m_function_versions_isSet;
}

bool OAIServerless_v1_service_build::is_function_versions_Valid() const{
    return m_function_versions_isValid;
}

OAIObject OAIServerless_v1_service_build::getLinks() const {
    return m_links;
}
void OAIServerless_v1_service_build::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIServerless_v1_service_build::is_links_Set() const{
    return m_links_isSet;
}

bool OAIServerless_v1_service_build::is_links_Valid() const{
    return m_links_isValid;
}

OAIBuild_enum_runtime OAIServerless_v1_service_build::getRuntime() const {
    return m_runtime;
}
void OAIServerless_v1_service_build::setRuntime(const OAIBuild_enum_runtime &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIServerless_v1_service_build::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIServerless_v1_service_build::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAIServerless_v1_service_build::getServiceSid() const {
    return m_service_sid;
}
void OAIServerless_v1_service_build::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIServerless_v1_service_build::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIServerless_v1_service_build::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIServerless_v1_service_build::getSid() const {
    return m_sid;
}
void OAIServerless_v1_service_build::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIServerless_v1_service_build::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIServerless_v1_service_build::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIBuild_enum_status OAIServerless_v1_service_build::getStatus() const {
    return m_status;
}
void OAIServerless_v1_service_build::setStatus(const OAIBuild_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServerless_v1_service_build::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServerless_v1_service_build::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServerless_v1_service_build::getUrl() const {
    return m_url;
}
void OAIServerless_v1_service_build::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIServerless_v1_service_build::is_url_Set() const{
    return m_url_isSet;
}

bool OAIServerless_v1_service_build::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIServerless_v1_service_build::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerless_v1_service_build::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
