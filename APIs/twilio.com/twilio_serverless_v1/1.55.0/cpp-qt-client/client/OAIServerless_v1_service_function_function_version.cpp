/**
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerless_v1_service_function_function_version.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerless_v1_service_function_function_version::OAIServerless_v1_service_function_function_version(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerless_v1_service_function_function_version::OAIServerless_v1_service_function_function_version() {
    this->initializeModel();
}

OAIServerless_v1_service_function_function_version::~OAIServerless_v1_service_function_function_version() {}

void OAIServerless_v1_service_function_function_version::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_function_sid_isSet = false;
    m_function_sid_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIServerless_v1_service_function_function_version::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerless_v1_service_function_function_version::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_function_sid_isValid = ::OpenAPI::fromJsonValue(m_function_sid, json[QString("function_sid")]);
    m_function_sid_isSet = !json[QString("function_sid")].isNull() && m_function_sid_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIServerless_v1_service_function_function_version::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerless_v1_service_function_function_version::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_function_sid_isSet) {
        obj.insert(QString("function_sid"), ::OpenAPI::toJsonValue(m_function_sid));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIServerless_v1_service_function_function_version::getAccountSid() const {
    return m_account_sid;
}
void OAIServerless_v1_service_function_function_version::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIServerless_v1_service_function_function_version::getDateCreated() const {
    return m_date_created;
}
void OAIServerless_v1_service_function_function_version::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIServerless_v1_service_function_function_version::getFunctionSid() const {
    return m_function_sid;
}
void OAIServerless_v1_service_function_function_version::setFunctionSid(const QString &function_sid) {
    m_function_sid = function_sid;
    m_function_sid_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_function_sid_Set() const{
    return m_function_sid_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_function_sid_Valid() const{
    return m_function_sid_isValid;
}

OAIObject OAIServerless_v1_service_function_function_version::getLinks() const {
    return m_links;
}
void OAIServerless_v1_service_function_function_version::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_links_Set() const{
    return m_links_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIServerless_v1_service_function_function_version::getPath() const {
    return m_path;
}
void OAIServerless_v1_service_function_function_version::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_path_Set() const{
    return m_path_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIServerless_v1_service_function_function_version::getServiceSid() const {
    return m_service_sid;
}
void OAIServerless_v1_service_function_function_version::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIServerless_v1_service_function_function_version::getSid() const {
    return m_sid;
}
void OAIServerless_v1_service_function_function_version::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIServerless_v1_service_function_function_version::getUrl() const {
    return m_url;
}
void OAIServerless_v1_service_function_function_version::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_url_Set() const{
    return m_url_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_url_Valid() const{
    return m_url_isValid;
}

OAIFunction_version_enum_visibility OAIServerless_v1_service_function_function_version::getVisibility() const {
    return m_visibility;
}
void OAIServerless_v1_service_function_function_version::setVisibility(const OAIFunction_version_enum_visibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIServerless_v1_service_function_function_version::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIServerless_v1_service_function_function_version::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIServerless_v1_service_function_function_version::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerless_v1_service_function_function_version::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
