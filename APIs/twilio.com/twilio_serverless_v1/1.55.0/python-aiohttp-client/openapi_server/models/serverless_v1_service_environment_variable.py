# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ServerlessV1ServiceEnvironmentVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, environment_sid: str=None, key: str=None, service_sid: str=None, sid: str=None, url: str=None, value: str=None):
        """ServerlessV1ServiceEnvironmentVariable - a model defined in OpenAPI

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentVariable.
        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentVariable.
        :param date_updated: The date_updated of this ServerlessV1ServiceEnvironmentVariable.
        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentVariable.
        :param key: The key of this ServerlessV1ServiceEnvironmentVariable.
        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentVariable.
        :param sid: The sid of this ServerlessV1ServiceEnvironmentVariable.
        :param url: The url of this ServerlessV1ServiceEnvironmentVariable.
        :param value: The value of this ServerlessV1ServiceEnvironmentVariable.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'environment_sid': str,
            'key': str,
            'service_sid': str,
            'sid': str,
            'url': str,
            'value': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'environment_sid': 'environment_sid',
            'key': 'key',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url',
            'value': 'value'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._environment_sid = environment_sid
        self._key = key
        self._service_sid = service_sid
        self._sid = sid
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerlessV1ServiceEnvironmentVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serverless.v1.service.environment.variable of this ServerlessV1ServiceEnvironmentVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Variable resource.

        :return: The account_sid of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Variable resource.

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentVariable.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this ServerlessV1ServiceEnvironmentVariable.

        The date and time in GMT when the Variable resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ServerlessV1ServiceEnvironmentVariable.

        The date and time in GMT when the Variable resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentVariable.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ServerlessV1ServiceEnvironmentVariable.

        The date and time in GMT when the Variable resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ServerlessV1ServiceEnvironmentVariable.

        The date and time in GMT when the Variable resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this ServerlessV1ServiceEnvironmentVariable.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def environment_sid(self):
        """Gets the environment_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the Environment in which the Variable exists.

        :return: The environment_sid of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._environment_sid

    @environment_sid.setter
    def environment_sid(self, environment_sid):
        """Sets the environment_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the Environment in which the Variable exists.

        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentVariable.
        :type environment_sid: str
        """
        if environment_sid is not None and len(environment_sid) > 34:
            raise ValueError("Invalid value for `environment_sid`, length must be less than or equal to `34`")
        if environment_sid is not None and len(environment_sid) < 34:
            raise ValueError("Invalid value for `environment_sid`, length must be greater than or equal to `34`")
        if environment_sid is not None and not re.search(r'^ZE[0-9a-fA-F]{32}$', environment_sid):
            raise ValueError("Invalid value for `environment_sid`, must be a follow pattern or equal to `/^ZE[0-9a-fA-F]{32}$/`")

        self._environment_sid = environment_sid

    @property
    def key(self):
        """Gets the key of this ServerlessV1ServiceEnvironmentVariable.

        A string by which the Variable resource can be referenced.

        :return: The key of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ServerlessV1ServiceEnvironmentVariable.

        A string by which the Variable resource can be referenced.

        :param key: The key of this ServerlessV1ServiceEnvironmentVariable.
        :type key: str
        """

        self._key = key

    @property
    def service_sid(self):
        """Gets the service_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the Service that the Variable resource is associated with.

        :return: The service_sid of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ServerlessV1ServiceEnvironmentVariable.

        The SID of the Service that the Variable resource is associated with.

        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentVariable.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^ZS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^ZS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ServerlessV1ServiceEnvironmentVariable.

        The unique string that we created to identify the Variable resource.

        :return: The sid of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ServerlessV1ServiceEnvironmentVariable.

        The unique string that we created to identify the Variable resource.

        :param sid: The sid of this ServerlessV1ServiceEnvironmentVariable.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^ZV[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^ZV[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ServerlessV1ServiceEnvironmentVariable.

        The absolute URL of the Variable resource.

        :return: The url of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServerlessV1ServiceEnvironmentVariable.

        The absolute URL of the Variable resource.

        :param url: The url of this ServerlessV1ServiceEnvironmentVariable.
        :type url: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this ServerlessV1ServiceEnvironmentVariable.

        A string that contains the actual value of the Variable.

        :return: The value of this ServerlessV1ServiceEnvironmentVariable.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ServerlessV1ServiceEnvironmentVariable.

        A string that contains the actual value of the Variable.

        :param value: The value of this ServerlessV1ServiceEnvironmentVariable.
        :type value: str
        """

        self._value = value
