# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_enum_level import LogEnumLevel
import re
from openapi_server import util


class ServerlessV1ServiceEnvironmentLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, build_sid: str=None, date_created: datetime=None, deployment_sid: str=None, environment_sid: str=None, function_sid: str=None, level: LogEnumLevel=None, message: str=None, request_sid: str=None, service_sid: str=None, sid: str=None, url: str=None):
        """ServerlessV1ServiceEnvironmentLog - a model defined in OpenAPI

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentLog.
        :param build_sid: The build_sid of this ServerlessV1ServiceEnvironmentLog.
        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentLog.
        :param deployment_sid: The deployment_sid of this ServerlessV1ServiceEnvironmentLog.
        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentLog.
        :param function_sid: The function_sid of this ServerlessV1ServiceEnvironmentLog.
        :param level: The level of this ServerlessV1ServiceEnvironmentLog.
        :param message: The message of this ServerlessV1ServiceEnvironmentLog.
        :param request_sid: The request_sid of this ServerlessV1ServiceEnvironmentLog.
        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentLog.
        :param sid: The sid of this ServerlessV1ServiceEnvironmentLog.
        :param url: The url of this ServerlessV1ServiceEnvironmentLog.
        """
        self.openapi_types = {
            'account_sid': str,
            'build_sid': str,
            'date_created': datetime,
            'deployment_sid': str,
            'environment_sid': str,
            'function_sid': str,
            'level': LogEnumLevel,
            'message': str,
            'request_sid': str,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'build_sid': 'build_sid',
            'date_created': 'date_created',
            'deployment_sid': 'deployment_sid',
            'environment_sid': 'environment_sid',
            'function_sid': 'function_sid',
            'level': 'level',
            'message': 'message',
            'request_sid': 'request_sid',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._build_sid = build_sid
        self._date_created = date_created
        self._deployment_sid = deployment_sid
        self._environment_sid = environment_sid
        self._function_sid = function_sid
        self._level = level
        self._message = message
        self._request_sid = request_sid
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerlessV1ServiceEnvironmentLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serverless.v1.service.environment.log of this ServerlessV1ServiceEnvironmentLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Log resource.

        :return: The account_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Log resource.

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentLog.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def build_sid(self):
        """Gets the build_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the build that corresponds to the log.

        :return: The build_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._build_sid

    @build_sid.setter
    def build_sid(self, build_sid):
        """Sets the build_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the build that corresponds to the log.

        :param build_sid: The build_sid of this ServerlessV1ServiceEnvironmentLog.
        :type build_sid: str
        """
        if build_sid is not None and len(build_sid) > 34:
            raise ValueError("Invalid value for `build_sid`, length must be less than or equal to `34`")
        if build_sid is not None and len(build_sid) < 34:
            raise ValueError("Invalid value for `build_sid`, length must be greater than or equal to `34`")
        if build_sid is not None and not re.search(r'^ZB[0-9a-fA-F]{32}$', build_sid):
            raise ValueError("Invalid value for `build_sid`, must be a follow pattern or equal to `/^ZB[0-9a-fA-F]{32}$/`")

        self._build_sid = build_sid

    @property
    def date_created(self):
        """Gets the date_created of this ServerlessV1ServiceEnvironmentLog.

        The date and time in GMT when the Log resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this ServerlessV1ServiceEnvironmentLog.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ServerlessV1ServiceEnvironmentLog.

        The date and time in GMT when the Log resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentLog.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def deployment_sid(self):
        """Gets the deployment_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the deployment that corresponds to the log.

        :return: The deployment_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._deployment_sid

    @deployment_sid.setter
    def deployment_sid(self, deployment_sid):
        """Sets the deployment_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the deployment that corresponds to the log.

        :param deployment_sid: The deployment_sid of this ServerlessV1ServiceEnvironmentLog.
        :type deployment_sid: str
        """
        if deployment_sid is not None and len(deployment_sid) > 34:
            raise ValueError("Invalid value for `deployment_sid`, length must be less than or equal to `34`")
        if deployment_sid is not None and len(deployment_sid) < 34:
            raise ValueError("Invalid value for `deployment_sid`, length must be greater than or equal to `34`")
        if deployment_sid is not None and not re.search(r'^ZD[0-9a-fA-F]{32}$', deployment_sid):
            raise ValueError("Invalid value for `deployment_sid`, must be a follow pattern or equal to `/^ZD[0-9a-fA-F]{32}$/`")

        self._deployment_sid = deployment_sid

    @property
    def environment_sid(self):
        """Gets the environment_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the environment in which the log occurred.

        :return: The environment_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._environment_sid

    @environment_sid.setter
    def environment_sid(self, environment_sid):
        """Sets the environment_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the environment in which the log occurred.

        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentLog.
        :type environment_sid: str
        """
        if environment_sid is not None and len(environment_sid) > 34:
            raise ValueError("Invalid value for `environment_sid`, length must be less than or equal to `34`")
        if environment_sid is not None and len(environment_sid) < 34:
            raise ValueError("Invalid value for `environment_sid`, length must be greater than or equal to `34`")
        if environment_sid is not None and not re.search(r'^ZE[0-9a-fA-F]{32}$', environment_sid):
            raise ValueError("Invalid value for `environment_sid`, must be a follow pattern or equal to `/^ZE[0-9a-fA-F]{32}$/`")

        self._environment_sid = environment_sid

    @property
    def function_sid(self):
        """Gets the function_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the function whose invocation produced the log.

        :return: The function_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._function_sid

    @function_sid.setter
    def function_sid(self, function_sid):
        """Sets the function_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the function whose invocation produced the log.

        :param function_sid: The function_sid of this ServerlessV1ServiceEnvironmentLog.
        :type function_sid: str
        """
        if function_sid is not None and len(function_sid) > 34:
            raise ValueError("Invalid value for `function_sid`, length must be less than or equal to `34`")
        if function_sid is not None and len(function_sid) < 34:
            raise ValueError("Invalid value for `function_sid`, length must be greater than or equal to `34`")
        if function_sid is not None and not re.search(r'^ZH[0-9a-fA-F]{32}$', function_sid):
            raise ValueError("Invalid value for `function_sid`, must be a follow pattern or equal to `/^ZH[0-9a-fA-F]{32}$/`")

        self._function_sid = function_sid

    @property
    def level(self):
        """Gets the level of this ServerlessV1ServiceEnvironmentLog.


        :return: The level of this ServerlessV1ServiceEnvironmentLog.
        :rtype: LogEnumLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ServerlessV1ServiceEnvironmentLog.


        :param level: The level of this ServerlessV1ServiceEnvironmentLog.
        :type level: LogEnumLevel
        """

        self._level = level

    @property
    def message(self):
        """Gets the message of this ServerlessV1ServiceEnvironmentLog.

        The log message.

        :return: The message of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServerlessV1ServiceEnvironmentLog.

        The log message.

        :param message: The message of this ServerlessV1ServiceEnvironmentLog.
        :type message: str
        """

        self._message = message

    @property
    def request_sid(self):
        """Gets the request_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the request associated with the log.

        :return: The request_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._request_sid

    @request_sid.setter
    def request_sid(self, request_sid):
        """Sets the request_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the request associated with the log.

        :param request_sid: The request_sid of this ServerlessV1ServiceEnvironmentLog.
        :type request_sid: str
        """
        if request_sid is not None and len(request_sid) > 34:
            raise ValueError("Invalid value for `request_sid`, length must be less than or equal to `34`")
        if request_sid is not None and len(request_sid) < 34:
            raise ValueError("Invalid value for `request_sid`, length must be greater than or equal to `34`")
        if request_sid is not None and not re.search(r'^RQ[0-9a-fA-F]{32}$', request_sid):
            raise ValueError("Invalid value for `request_sid`, must be a follow pattern or equal to `/^RQ[0-9a-fA-F]{32}$/`")

        self._request_sid = request_sid

    @property
    def service_sid(self):
        """Gets the service_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the Service that the Log resource is associated with.

        :return: The service_sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ServerlessV1ServiceEnvironmentLog.

        The SID of the Service that the Log resource is associated with.

        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentLog.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^ZS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^ZS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ServerlessV1ServiceEnvironmentLog.

        The unique string that we created to identify the Log resource.

        :return: The sid of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ServerlessV1ServiceEnvironmentLog.

        The unique string that we created to identify the Log resource.

        :param sid: The sid of this ServerlessV1ServiceEnvironmentLog.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^NO[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^NO[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ServerlessV1ServiceEnvironmentLog.

        The absolute URL of the Log resource.

        :return: The url of this ServerlessV1ServiceEnvironmentLog.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServerlessV1ServiceEnvironmentLog.

        The absolute URL of the Log resource.

        :param url: The url of this ServerlessV1ServiceEnvironmentLog.
        :type url: str
        """

        self._url = url
