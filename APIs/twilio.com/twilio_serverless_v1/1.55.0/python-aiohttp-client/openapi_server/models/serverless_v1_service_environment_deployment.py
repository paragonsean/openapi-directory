# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ServerlessV1ServiceEnvironmentDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, build_sid: str=None, date_created: datetime=None, date_updated: datetime=None, environment_sid: str=None, service_sid: str=None, sid: str=None, url: str=None):
        """ServerlessV1ServiceEnvironmentDeployment - a model defined in OpenAPI

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :param build_sid: The build_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentDeployment.
        :param date_updated: The date_updated of this ServerlessV1ServiceEnvironmentDeployment.
        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :param sid: The sid of this ServerlessV1ServiceEnvironmentDeployment.
        :param url: The url of this ServerlessV1ServiceEnvironmentDeployment.
        """
        self.openapi_types = {
            'account_sid': str,
            'build_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'environment_sid': str,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'build_sid': 'build_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'environment_sid': 'environment_sid',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._build_sid = build_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._environment_sid = environment_sid
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerlessV1ServiceEnvironmentDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serverless.v1.service.environment.deployment of this ServerlessV1ServiceEnvironmentDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Deployment resource.

        :return: The account_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Deployment resource.

        :param account_sid: The account_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def build_sid(self):
        """Gets the build_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Build for the deployment.

        :return: The build_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._build_sid

    @build_sid.setter
    def build_sid(self, build_sid):
        """Sets the build_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Build for the deployment.

        :param build_sid: The build_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :type build_sid: str
        """
        if build_sid is not None and len(build_sid) > 34:
            raise ValueError("Invalid value for `build_sid`, length must be less than or equal to `34`")
        if build_sid is not None and len(build_sid) < 34:
            raise ValueError("Invalid value for `build_sid`, length must be greater than or equal to `34`")
        if build_sid is not None and not re.search(r'^ZB[0-9a-fA-F]{32}$', build_sid):
            raise ValueError("Invalid value for `build_sid`, must be a follow pattern or equal to `/^ZB[0-9a-fA-F]{32}$/`")

        self._build_sid = build_sid

    @property
    def date_created(self):
        """Gets the date_created of this ServerlessV1ServiceEnvironmentDeployment.

        The date and time in GMT when the Deployment resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ServerlessV1ServiceEnvironmentDeployment.

        The date and time in GMT when the Deployment resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this ServerlessV1ServiceEnvironmentDeployment.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ServerlessV1ServiceEnvironmentDeployment.

        The date and time in GMT when the Deployment resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ServerlessV1ServiceEnvironmentDeployment.

        The date and time in GMT when the Deployment resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this ServerlessV1ServiceEnvironmentDeployment.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def environment_sid(self):
        """Gets the environment_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Environment for the Deployment.

        :return: The environment_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._environment_sid

    @environment_sid.setter
    def environment_sid(self, environment_sid):
        """Sets the environment_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Environment for the Deployment.

        :param environment_sid: The environment_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :type environment_sid: str
        """
        if environment_sid is not None and len(environment_sid) > 34:
            raise ValueError("Invalid value for `environment_sid`, length must be less than or equal to `34`")
        if environment_sid is not None and len(environment_sid) < 34:
            raise ValueError("Invalid value for `environment_sid`, length must be greater than or equal to `34`")
        if environment_sid is not None and not re.search(r'^ZE[0-9a-fA-F]{32}$', environment_sid):
            raise ValueError("Invalid value for `environment_sid`, must be a follow pattern or equal to `/^ZE[0-9a-fA-F]{32}$/`")

        self._environment_sid = environment_sid

    @property
    def service_sid(self):
        """Gets the service_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Service that the Deployment resource is associated with.

        :return: The service_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ServerlessV1ServiceEnvironmentDeployment.

        The SID of the Service that the Deployment resource is associated with.

        :param service_sid: The service_sid of this ServerlessV1ServiceEnvironmentDeployment.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^ZS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^ZS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ServerlessV1ServiceEnvironmentDeployment.

        The unique string that we created to identify the Deployment resource.

        :return: The sid of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ServerlessV1ServiceEnvironmentDeployment.

        The unique string that we created to identify the Deployment resource.

        :param sid: The sid of this ServerlessV1ServiceEnvironmentDeployment.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^ZD[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^ZD[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ServerlessV1ServiceEnvironmentDeployment.

        The absolute URL of the Deployment resource.

        :return: The url of this ServerlessV1ServiceEnvironmentDeployment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServerlessV1ServiceEnvironmentDeployment.

        The absolute URL of the Deployment resource.

        :param url: The url of this ServerlessV1ServiceEnvironmentDeployment.
        :type url: str
        """

        self._url = url
