# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, content: str=None, function_sid: str=None, service_sid: str=None, sid: str=None, url: str=None):
        """ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent - a model defined in OpenAPI

        :param account_sid: The account_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :param content: The content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :param function_sid: The function_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :param service_sid: The service_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :param sid: The sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :param url: The url of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        """
        self.openapi_types = {
            'account_sid': str,
            'content': str,
            'function_sid': str,
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'content': 'content',
            'function_sid': 'function_sid',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._content = content
        self._function_sid = function_sid
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serverless.v1.service.function.function_version.function_version_content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Function Version resource.

        :return: The account_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Function Version resource.

        :param account_sid: The account_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def content(self):
        """Gets the content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The content of the Function Version resource.

        :return: The content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The content of the Function Version resource.

        :param content: The content of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type content: str
        """

        self._content = content

    @property
    def function_sid(self):
        """Gets the function_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the Function that is the parent of the Function Version.

        :return: The function_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._function_sid

    @function_sid.setter
    def function_sid(self, function_sid):
        """Sets the function_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the Function that is the parent of the Function Version.

        :param function_sid: The function_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type function_sid: str
        """
        if function_sid is not None and len(function_sid) > 34:
            raise ValueError("Invalid value for `function_sid`, length must be less than or equal to `34`")
        if function_sid is not None and len(function_sid) < 34:
            raise ValueError("Invalid value for `function_sid`, length must be greater than or equal to `34`")
        if function_sid is not None and not re.search(r'^ZH[0-9a-fA-F]{32}$', function_sid):
            raise ValueError("Invalid value for `function_sid`, must be a follow pattern or equal to `/^ZH[0-9a-fA-F]{32}$/`")

        self._function_sid = function_sid

    @property
    def service_sid(self):
        """Gets the service_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the Service that the Function Version resource is associated with.

        :return: The service_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The SID of the Service that the Function Version resource is associated with.

        :param service_sid: The service_sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^ZS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^ZS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The unique string that we created to identify the Function Version resource.

        :return: The sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.

        The unique string that we created to identify the Function Version resource.

        :param sid: The sid of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^ZN[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^ZN[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.


        :return: The url of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.


        :param url: The url of this ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent.
        :type url: str
        """

        self._url = url
