/*
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListVariableResponse;
import org.openapitools.client.model.ServerlessV1ServiceEnvironmentVariable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerlessV1VariableApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServerlessV1VariableApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerlessV1VariableApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVariable
     * @param serviceSid The SID of the Service to create the Variable resource under. (required)
     * @param environmentSid The SID of the Environment in which the Variable resource exists. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (required)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVariableCall(String serviceSid, String environmentSid, String key, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://serverless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "EnvironmentSid" + "}", localVarApiClient.escapeString(environmentSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("Key", key);
        }

        if (value != null) {
            localVarFormParams.put("Value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVariableValidateBeforeCall(String serviceSid, String environmentSid, String key, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createVariable(Async)");
        }

        // verify the required parameter 'environmentSid' is set
        if (environmentSid == null) {
            throw new ApiException("Missing the required parameter 'environmentSid' when calling createVariable(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createVariable(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling createVariable(Async)");
        }

        return createVariableCall(serviceSid, environmentSid, key, value, _callback);

    }

    /**
     * 
     * Create a new Variable.
     * @param serviceSid The SID of the Service to create the Variable resource under. (required)
     * @param environmentSid The SID of the Environment in which the Variable resource exists. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (required)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (required)
     * @return ServerlessV1ServiceEnvironmentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ServerlessV1ServiceEnvironmentVariable createVariable(String serviceSid, String environmentSid, String key, String value) throws ApiException {
        ApiResponse<ServerlessV1ServiceEnvironmentVariable> localVarResp = createVariableWithHttpInfo(serviceSid, environmentSid, key, value);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Variable.
     * @param serviceSid The SID of the Service to create the Variable resource under. (required)
     * @param environmentSid The SID of the Environment in which the Variable resource exists. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (required)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (required)
     * @return ApiResponse&lt;ServerlessV1ServiceEnvironmentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerlessV1ServiceEnvironmentVariable> createVariableWithHttpInfo(String serviceSid, String environmentSid, String key, String value) throws ApiException {
        okhttp3.Call localVarCall = createVariableValidateBeforeCall(serviceSid, environmentSid, key, value, null);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Variable.
     * @param serviceSid The SID of the Service to create the Variable resource under. (required)
     * @param environmentSid The SID of the Environment in which the Variable resource exists. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (required)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVariableAsync(String serviceSid, String environmentSid, String key, String value, final ApiCallback<ServerlessV1ServiceEnvironmentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVariableValidateBeforeCall(serviceSid, environmentSid, key, value, _callback);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVariable
     * @param serviceSid The SID of the Service to delete the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variables to delete. (required)
     * @param sid The SID of the Variable resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariableCall(String serviceSid, String environmentSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://serverless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "EnvironmentSid" + "}", localVarApiClient.escapeString(environmentSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVariableValidateBeforeCall(String serviceSid, String environmentSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteVariable(Async)");
        }

        // verify the required parameter 'environmentSid' is set
        if (environmentSid == null) {
            throw new ApiException("Missing the required parameter 'environmentSid' when calling deleteVariable(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteVariable(Async)");
        }

        return deleteVariableCall(serviceSid, environmentSid, sid, _callback);

    }

    /**
     * 
     * Delete a specific Variable.
     * @param serviceSid The SID of the Service to delete the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variables to delete. (required)
     * @param sid The SID of the Variable resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVariable(String serviceSid, String environmentSid, String sid) throws ApiException {
        deleteVariableWithHttpInfo(serviceSid, environmentSid, sid);
    }

    /**
     * 
     * Delete a specific Variable.
     * @param serviceSid The SID of the Service to delete the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variables to delete. (required)
     * @param sid The SID of the Variable resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVariableWithHttpInfo(String serviceSid, String environmentSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteVariableValidateBeforeCall(serviceSid, environmentSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Variable.
     * @param serviceSid The SID of the Service to delete the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variables to delete. (required)
     * @param sid The SID of the Variable resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariableAsync(String serviceSid, String environmentSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVariableValidateBeforeCall(serviceSid, environmentSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariable
     * @param serviceSid The SID of the Service to fetch the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to fetch. (required)
     * @param sid The SID of the Variable resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariableCall(String serviceSid, String environmentSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://serverless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "EnvironmentSid" + "}", localVarApiClient.escapeString(environmentSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariableValidateBeforeCall(String serviceSid, String environmentSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchVariable(Async)");
        }

        // verify the required parameter 'environmentSid' is set
        if (environmentSid == null) {
            throw new ApiException("Missing the required parameter 'environmentSid' when calling fetchVariable(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchVariable(Async)");
        }

        return fetchVariableCall(serviceSid, environmentSid, sid, _callback);

    }

    /**
     * 
     * Retrieve a specific Variable.
     * @param serviceSid The SID of the Service to fetch the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to fetch. (required)
     * @param sid The SID of the Variable resource to fetch. (required)
     * @return ServerlessV1ServiceEnvironmentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerlessV1ServiceEnvironmentVariable fetchVariable(String serviceSid, String environmentSid, String sid) throws ApiException {
        ApiResponse<ServerlessV1ServiceEnvironmentVariable> localVarResp = fetchVariableWithHttpInfo(serviceSid, environmentSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a specific Variable.
     * @param serviceSid The SID of the Service to fetch the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to fetch. (required)
     * @param sid The SID of the Variable resource to fetch. (required)
     * @return ApiResponse&lt;ServerlessV1ServiceEnvironmentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerlessV1ServiceEnvironmentVariable> fetchVariableWithHttpInfo(String serviceSid, String environmentSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchVariableValidateBeforeCall(serviceSid, environmentSid, sid, null);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a specific Variable.
     * @param serviceSid The SID of the Service to fetch the Variable resource from. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to fetch. (required)
     * @param sid The SID of the Variable resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariableAsync(String serviceSid, String environmentSid, String sid, final ApiCallback<ServerlessV1ServiceEnvironmentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariableValidateBeforeCall(serviceSid, environmentSid, sid, _callback);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVariable
     * @param serviceSid The SID of the Service to read the Variable resources from. (required)
     * @param environmentSid The SID of the Environment with the Variable resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVariableCall(String serviceSid, String environmentSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://serverless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "EnvironmentSid" + "}", localVarApiClient.escapeString(environmentSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVariableValidateBeforeCall(String serviceSid, String environmentSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listVariable(Async)");
        }

        // verify the required parameter 'environmentSid' is set
        if (environmentSid == null) {
            throw new ApiException("Missing the required parameter 'environmentSid' when calling listVariable(Async)");
        }

        return listVariableCall(serviceSid, environmentSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Variables.
     * @param serviceSid The SID of the Service to read the Variable resources from. (required)
     * @param environmentSid The SID of the Environment with the Variable resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListVariableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVariableResponse listVariable(String serviceSid, String environmentSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListVariableResponse> localVarResp = listVariableWithHttpInfo(serviceSid, environmentSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Variables.
     * @param serviceSid The SID of the Service to read the Variable resources from. (required)
     * @param environmentSid The SID of the Environment with the Variable resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListVariableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVariableResponse> listVariableWithHttpInfo(String serviceSid, String environmentSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listVariableValidateBeforeCall(serviceSid, environmentSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListVariableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Variables.
     * @param serviceSid The SID of the Service to read the Variable resources from. (required)
     * @param environmentSid The SID of the Environment with the Variable resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVariableAsync(String serviceSid, String environmentSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListVariableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVariableValidateBeforeCall(serviceSid, environmentSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListVariableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVariable
     * @param serviceSid The SID of the Service to update the Variable resource under. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to update. (required)
     * @param sid The SID of the Variable resource to update. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (optional)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVariableCall(String serviceSid, String environmentSid, String sid, String key, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://serverless.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "EnvironmentSid" + "}", localVarApiClient.escapeString(environmentSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("Key", key);
        }

        if (value != null) {
            localVarFormParams.put("Value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVariableValidateBeforeCall(String serviceSid, String environmentSid, String sid, String key, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateVariable(Async)");
        }

        // verify the required parameter 'environmentSid' is set
        if (environmentSid == null) {
            throw new ApiException("Missing the required parameter 'environmentSid' when calling updateVariable(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateVariable(Async)");
        }

        return updateVariableCall(serviceSid, environmentSid, sid, key, value, _callback);

    }

    /**
     * 
     * Update a specific Variable.
     * @param serviceSid The SID of the Service to update the Variable resource under. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to update. (required)
     * @param sid The SID of the Variable resource to update. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (optional)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (optional)
     * @return ServerlessV1ServiceEnvironmentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerlessV1ServiceEnvironmentVariable updateVariable(String serviceSid, String environmentSid, String sid, String key, String value) throws ApiException {
        ApiResponse<ServerlessV1ServiceEnvironmentVariable> localVarResp = updateVariableWithHttpInfo(serviceSid, environmentSid, sid, key, value);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a specific Variable.
     * @param serviceSid The SID of the Service to update the Variable resource under. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to update. (required)
     * @param sid The SID of the Variable resource to update. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (optional)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (optional)
     * @return ApiResponse&lt;ServerlessV1ServiceEnvironmentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerlessV1ServiceEnvironmentVariable> updateVariableWithHttpInfo(String serviceSid, String environmentSid, String sid, String key, String value) throws ApiException {
        okhttp3.Call localVarCall = updateVariableValidateBeforeCall(serviceSid, environmentSid, sid, key, value, null);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a specific Variable.
     * @param serviceSid The SID of the Service to update the Variable resource under. (required)
     * @param environmentSid The SID of the Environment with the Variable resource to update. (required)
     * @param sid The SID of the Variable resource to update. (required)
     * @param key A string by which the Variable resource can be referenced. It can be a maximum of 128 characters. (optional)
     * @param value A string that contains the actual value of the Variable. It can be a maximum of 450 bytes in size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVariableAsync(String serviceSid, String environmentSid, String sid, String key, String value, final ApiCallback<ServerlessV1ServiceEnvironmentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVariableValidateBeforeCall(serviceSid, environmentSid, sid, key, value, _callback);
        Type localVarReturnType = new TypeToken<ServerlessV1ServiceEnvironmentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
