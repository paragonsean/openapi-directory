/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Vault model module.
 * @module model/Vault
 * @version 1.5.7
 */
class Vault {
    /**
     * Constructs a new <code>Vault</code>.
     * @alias module:model/Vault
     */
    constructor() { 
        
        Vault.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vault</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vault} obj Optional instance to populate.
     * @return {module:model/Vault} The populated <code>Vault</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vault();

            if (data.hasOwnProperty('attributeVersion')) {
                obj['attributeVersion'] = ApiClient.convertToType(data['attributeVersion'], 'Number');
            }
            if (data.hasOwnProperty('contentVersion')) {
                obj['contentVersion'] = ApiClient.convertToType(data['contentVersion'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vault</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vault</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The vault version
 * @member {Number} attributeVersion
 */
Vault.prototype['attributeVersion'] = undefined;

/**
 * The version of the vault contents
 * @member {Number} contentVersion
 */
Vault.prototype['contentVersion'] = undefined;

/**
 * @member {Date} createdAt
 */
Vault.prototype['createdAt'] = undefined;

/**
 * @member {String} description
 */
Vault.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Vault.prototype['id'] = undefined;

/**
 * Number of active items in the vault
 * @member {Number} items
 */
Vault.prototype['items'] = undefined;

/**
 * @member {String} name
 */
Vault.prototype['name'] = undefined;

/**
 * @member {module:model/Vault.TypeEnum} type
 */
Vault.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
Vault.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Vault['TypeEnum'] = {

    /**
     * value: "USER_CREATED"
     * @const
     */
    "USER_CREATED": "USER_CREATED",

    /**
     * value: "PERSONAL"
     * @const
     */
    "PERSONAL": "PERSONAL",

    /**
     * value: "EVERYONE"
     * @const
     */
    "EVERYONE": "EVERYONE",

    /**
     * value: "TRANSFER"
     * @const
     */
    "TRANSFER": "TRANSFER"
};



export default Vault;

