/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeneratorRecipe model module.
 * @module model/GeneratorRecipe
 * @version 1.5.7
 */
class GeneratorRecipe {
    /**
     * Constructs a new <code>GeneratorRecipe</code>.
     * The recipe is used in conjunction with the \&quot;generate\&quot; property to set the character set used to generate a new secure value
     * @alias module:model/GeneratorRecipe
     */
    constructor() { 
        
        GeneratorRecipe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['length'] = 32;
    }

    /**
     * Constructs a <code>GeneratorRecipe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeneratorRecipe} obj Optional instance to populate.
     * @return {module:model/GeneratorRecipe} The populated <code>GeneratorRecipe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeneratorRecipe();

            if (data.hasOwnProperty('characterSets')) {
                obj['characterSets'] = ApiClient.convertToType(data['characterSets'], ['String']);
            }
            if (data.hasOwnProperty('excludeCharacters')) {
                obj['excludeCharacters'] = ApiClient.convertToType(data['excludeCharacters'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeneratorRecipe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeneratorRecipe</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['characterSets'])) {
            throw new Error("Expected the field `characterSets` to be an array in the JSON data but got " + data['characterSets']);
        }
        // ensure the json data is a string
        if (data['excludeCharacters'] && !(typeof data['excludeCharacters'] === 'string' || data['excludeCharacters'] instanceof String)) {
            throw new Error("Expected the field `excludeCharacters` to be a primitive type in the JSON string but got " + data['excludeCharacters']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/GeneratorRecipe.CharacterSetsEnum>} characterSets
 */
GeneratorRecipe.prototype['characterSets'] = undefined;

/**
 * List of all characters that should be excluded from generated passwords.
 * @member {String} excludeCharacters
 */
GeneratorRecipe.prototype['excludeCharacters'] = undefined;

/**
 * Length of the generated value
 * @member {Number} length
 * @default 32
 */
GeneratorRecipe.prototype['length'] = 32;





/**
 * Allowed values for the <code>characterSets</code> property.
 * @enum {String}
 * @readonly
 */
GeneratorRecipe['CharacterSetsEnum'] = {

    /**
     * value: "LETTERS"
     * @const
     */
    "LETTERS": "LETTERS",

    /**
     * value: "DIGITS"
     * @const
     */
    "DIGITS": "DIGITS",

    /**
     * value: "SYMBOLS"
     * @const
     */
    "SYMBOLS": "SYMBOLS"
};



export default GeneratorRecipe;

