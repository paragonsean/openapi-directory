/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemUrlsInner from './ItemUrlsInner';
import ItemVault from './ItemVault';

/**
 * The Item model module.
 * @module model/Item
 * @version 1.5.7
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     * @param category {module:model/Item.CategoryEnum} 
     * @param vault {module:model/ItemVault} 
     */
    constructor(category, vault) { 
        
        Item.initialize(this, category, vault);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, vault) { 
        obj['category'] = category;
        obj['favorite'] = false;
        obj['vault'] = vault;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('favorite')) {
                obj['favorite'] = ApiClient.convertToType(data['favorite'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastEditedBy')) {
                obj['lastEditedBy'] = ApiClient.convertToType(data['lastEditedBy'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [ItemUrlsInner]);
            }
            if (data.hasOwnProperty('vault')) {
                obj['vault'] = ItemVault.constructFromObject(data['vault']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastEditedBy'] && !(typeof data['lastEditedBy'] === 'string' || data['lastEditedBy'] instanceof String)) {
            throw new Error("Expected the field `lastEditedBy` to be a primitive type in the JSON string but got " + data['lastEditedBy']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                ItemUrlsInner.validateJSON(item);
            };
        }
        // validate the optional field `vault`
        if (data['vault']) { // data not null
          ItemVault.validateJSON(data['vault']);
        }

        return true;
    }


}

Item.RequiredProperties = ["category", "vault"];

/**
 * @member {module:model/Item.CategoryEnum} category
 */
Item.prototype['category'] = undefined;

/**
 * @member {Date} createdAt
 */
Item.prototype['createdAt'] = undefined;

/**
 * @member {Boolean} favorite
 * @default false
 */
Item.prototype['favorite'] = false;

/**
 * @member {String} id
 */
Item.prototype['id'] = undefined;

/**
 * @member {String} lastEditedBy
 */
Item.prototype['lastEditedBy'] = undefined;

/**
 * @member {module:model/Item.StateEnum} state
 */
Item.prototype['state'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Item.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
Item.prototype['title'] = undefined;

/**
 * @member {Date} updatedAt
 */
Item.prototype['updatedAt'] = undefined;

/**
 * @member {Array.<module:model/ItemUrlsInner>} urls
 */
Item.prototype['urls'] = undefined;

/**
 * @member {module:model/ItemVault} vault
 */
Item.prototype['vault'] = undefined;

/**
 * @member {Number} version
 */
Item.prototype['version'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Item['CategoryEnum'] = {

    /**
     * value: "LOGIN"
     * @const
     */
    "LOGIN": "LOGIN",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "API_CREDENTIAL"
     * @const
     */
    "API_CREDENTIAL": "API_CREDENTIAL",

    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",

    /**
     * value: "DATABASE"
     * @const
     */
    "DATABASE": "DATABASE",

    /**
     * value: "CREDIT_CARD"
     * @const
     */
    "CREDIT_CARD": "CREDIT_CARD",

    /**
     * value: "MEMBERSHIP"
     * @const
     */
    "MEMBERSHIP": "MEMBERSHIP",

    /**
     * value: "PASSPORT"
     * @const
     */
    "PASSPORT": "PASSPORT",

    /**
     * value: "SOFTWARE_LICENSE"
     * @const
     */
    "SOFTWARE_LICENSE": "SOFTWARE_LICENSE",

    /**
     * value: "OUTDOOR_LICENSE"
     * @const
     */
    "OUTDOOR_LICENSE": "OUTDOOR_LICENSE",

    /**
     * value: "SECURE_NOTE"
     * @const
     */
    "SECURE_NOTE": "SECURE_NOTE",

    /**
     * value: "WIRELESS_ROUTER"
     * @const
     */
    "WIRELESS_ROUTER": "WIRELESS_ROUTER",

    /**
     * value: "BANK_ACCOUNT"
     * @const
     */
    "BANK_ACCOUNT": "BANK_ACCOUNT",

    /**
     * value: "DRIVER_LICENSE"
     * @const
     */
    "DRIVER_LICENSE": "DRIVER_LICENSE",

    /**
     * value: "IDENTITY"
     * @const
     */
    "IDENTITY": "IDENTITY",

    /**
     * value: "REWARD_PROGRAM"
     * @const
     */
    "REWARD_PROGRAM": "REWARD_PROGRAM",

    /**
     * value: "DOCUMENT"
     * @const
     */
    "DOCUMENT": "DOCUMENT",

    /**
     * value: "EMAIL_ACCOUNT"
     * @const
     */
    "EMAIL_ACCOUNT": "EMAIL_ACCOUNT",

    /**
     * value: "SOCIAL_SECURITY_NUMBER"
     * @const
     */
    "SOCIAL_SECURITY_NUMBER": "SOCIAL_SECURITY_NUMBER",

    /**
     * value: "MEDICAL_RECORD"
     * @const
     */
    "MEDICAL_RECORD": "MEDICAL_RECORD",

    /**
     * value: "SSH_KEY"
     * @const
     */
    "SSH_KEY": "SSH_KEY",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Item['StateEnum'] = {

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default Item;

