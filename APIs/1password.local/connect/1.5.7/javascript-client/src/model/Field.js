/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldSection from './FieldSection';
import GeneratorRecipe from './GeneratorRecipe';

/**
 * The Field model module.
 * @module model/Field
 * @version 1.5.7
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * @alias module:model/Field
     * @param id {String} 
     * @param type {module:model/Field.TypeEnum} 
     */
    constructor(id, type) { 
        
        Field.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['generate'] = false;
        obj['id'] = id;
        obj['type'] = type || 'STRING';
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('entropy')) {
                obj['entropy'] = ApiClient.convertToType(data['entropy'], 'Number');
            }
            if (data.hasOwnProperty('generate')) {
                obj['generate'] = ApiClient.convertToType(data['generate'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('recipe')) {
                obj['recipe'] = GeneratorRecipe.constructFromObject(data['recipe']);
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = FieldSection.constructFromObject(data['section']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Field.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // validate the optional field `recipe`
        if (data['recipe']) { // data not null
          GeneratorRecipe.validateJSON(data['recipe']);
        }
        // validate the optional field `section`
        if (data['section']) { // data not null
          FieldSection.validateJSON(data['section']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Field.RequiredProperties = ["id", "type"];

/**
 * For fields with a purpose of `PASSWORD` this is the entropy of the value
 * @member {Number} entropy
 */
Field.prototype['entropy'] = undefined;

/**
 * If value is not present then a new value should be generated for this field
 * @member {Boolean} generate
 * @default false
 */
Field.prototype['generate'] = false;

/**
 * @member {String} id
 */
Field.prototype['id'] = undefined;

/**
 * @member {String} label
 */
Field.prototype['label'] = undefined;

/**
 * Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
 * @member {module:model/Field.PurposeEnum} purpose
 */
Field.prototype['purpose'] = undefined;

/**
 * @member {module:model/GeneratorRecipe} recipe
 */
Field.prototype['recipe'] = undefined;

/**
 * @member {module:model/FieldSection} section
 */
Field.prototype['section'] = undefined;

/**
 * @member {module:model/Field.TypeEnum} type
 * @default 'STRING'
 */
Field.prototype['type'] = 'STRING';

/**
 * @member {String} value
 */
Field.prototype['value'] = undefined;





/**
 * Allowed values for the <code>purpose</code> property.
 * @enum {String}
 * @readonly
 */
Field['PurposeEnum'] = {

    /**
     * value: ""
     * @const
     */
    "empty": "",

    /**
     * value: "USERNAME"
     * @const
     */
    "USERNAME": "USERNAME",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "NOTES"
     * @const
     */
    "NOTES": "NOTES"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Field['TypeEnum'] = {

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",

    /**
     * value: "CONCEALED"
     * @const
     */
    "CONCEALED": "CONCEALED",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "TOTP"
     * @const
     */
    "TOTP": "TOTP",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "MONTH_YEAR"
     * @const
     */
    "MONTH_YEAR": "MONTH_YEAR",

    /**
     * value: "MENU"
     * @const
     */
    "MENU": "MENU"
};



export default Field;

