/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FullItem from '../model/FullItem';
import Item from '../model/Item';
import PatchInner from '../model/PatchInner';

/**
* Items service.
* @module api/ItemsApi
* @version 1.5.7
*/
export default class ItemsApi {

    /**
    * Constructs a new ItemsApi. 
    * @alias module:api/ItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVaultItem operation.
     * @callback module:api/ItemsApi~createVaultItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Item
     * @param {String} vaultUuid The UUID of the Vault to create an Item in
     * @param {Object} opts Optional parameters
     * @param {module:model/FullItem} [fullItem] 
     * @param {module:api/ItemsApi~createVaultItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullItem}
     */
    createVaultItem(vaultUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['fullItem'];
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling createVaultItem");
      }

      let pathParams = {
        'vaultUuid': vaultUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullItem;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVaultItem operation.
     * @callback module:api/ItemsApi~deleteVaultItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Item
     * @param {String} vaultUuid The UUID of the Vault the item is in
     * @param {String} itemUuid The UUID of the Item to update
     * @param {module:api/ItemsApi~deleteVaultItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVaultItem(vaultUuid, itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling deleteVaultItem");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling deleteVaultItem");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVaultItemById operation.
     * @callback module:api/ItemsApi~getVaultItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of an Item
     * @param {String} vaultUuid The UUID of the Vault to fetch Item from
     * @param {String} itemUuid The UUID of the Item to fetch
     * @param {module:api/ItemsApi~getVaultItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullItem}
     */
    getVaultItemById(vaultUuid, itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling getVaultItemById");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling getVaultItemById");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullItem;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVaultItems operation.
     * @callback module:api/ItemsApi~getVaultItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Item>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all items for inside a Vault
     * @param {String} vaultUuid The UUID of the Vault to fetch Items from
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter the Item collection based on Item name using SCIM eq filter
     * @param {module:api/ItemsApi~getVaultItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Item>}
     */
    getVaultItems(vaultUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling getVaultItems");
      }

      let pathParams = {
        'vaultUuid': vaultUuid
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Item];
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVaultItem operation.
     * @callback module:api/ItemsApi~patchVaultItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a subset of Item attributes
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}` 
     * @param {String} vaultUuid The UUID of the Vault the item is in
     * @param {String} itemUuid The UUID of the Item to update
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/PatchInner>} [patchInner] 
     * @param {module:api/ItemsApi~patchVaultItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullItem}
     */
    patchVaultItem(vaultUuid, itemUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchInner'];
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling patchVaultItem");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling patchVaultItem");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullItem;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVaultItem operation.
     * @callback module:api/ItemsApi~updateVaultItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Item
     * @param {String} vaultUuid The UUID of the Item's Vault
     * @param {String} itemUuid The UUID of the Item to update
     * @param {Object} opts Optional parameters
     * @param {module:model/FullItem} [fullItem] 
     * @param {module:api/ItemsApi~updateVaultItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullItem}
     */
    updateVaultItem(vaultUuid, itemUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['fullItem'];
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling updateVaultItem");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling updateVaultItem");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullItem;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
