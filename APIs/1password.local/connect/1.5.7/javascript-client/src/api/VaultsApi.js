/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Vault from '../model/Vault';

/**
* Vaults service.
* @module api/VaultsApi
* @version 1.5.7
*/
export default class VaultsApi {

    /**
    * Constructs a new VaultsApi. 
    * @alias module:api/VaultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getVaultById operation.
     * @callback module:api/VaultsApi~getVaultByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vault details and metadata
     * @param {String} vaultUuid The UUID of the Vault to fetch Items from
     * @param {module:api/VaultsApi~getVaultByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    getVaultById(vaultUuid, callback) {
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling getVaultById");
      }

      let pathParams = {
        'vaultUuid': vaultUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVaults operation.
     * @callback module:api/VaultsApi~getVaultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vault>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Vaults
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter the Vault collection based on Vault name using SCIM eq filter
     * @param {module:api/VaultsApi~getVaultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vault>}
     */
    getVaults(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vault];
      return this.apiClient.callApi(
        '/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
