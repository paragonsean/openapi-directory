/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';

/**
* Files service.
* @module api/FilesApi
* @version 1.5.7
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadFileByID operation.
     * @callback module:api/FilesApi~downloadFileByIDCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of a File
     * @param {String} vaultUuid The UUID of the Vault the item is in
     * @param {String} itemUuid The UUID of the Item the File is in
     * @param {String} fileUuid UUID of the file to get content from
     * @param {module:api/FilesApi~downloadFileByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFileByID(vaultUuid, itemUuid, fileUuid, callback) {
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling downloadFileByID");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling downloadFileByID");
      }
      // verify the required parameter 'fileUuid' is set
      if (fileUuid === undefined || fileUuid === null) {
        throw new Error("Missing the required parameter 'fileUuid' when calling downloadFileByID");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid,
        'fileUuid': fileUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailsOfFileById operation.
     * @callback module:api/FilesApi~getDetailsOfFileByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a File
     * @param {String} vaultUuid The UUID of the Vault to fetch Item from
     * @param {String} itemUuid The UUID of the Item to fetch File from
     * @param {String} fileUuid The UUID of the File to fetch
     * @param {Object} opts Optional parameters
     * @param {Boolean} [inlineFiles] Tells server to return the base64-encoded file contents in the response.
     * @param {module:api/FilesApi~getDetailsOfFileByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getDetailsOfFileById(vaultUuid, itemUuid, fileUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling getDetailsOfFileById");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling getDetailsOfFileById");
      }
      // verify the required parameter 'fileUuid' is set
      if (fileUuid === undefined || fileUuid === null) {
        throw new Error("Missing the required parameter 'fileUuid' when calling getDetailsOfFileById");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid,
        'fileUuid': fileUuid
      };
      let queryParams = {
        'inline_files': opts['inlineFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemFiles operation.
     * @callback module:api/FilesApi~getItemFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<File>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the files inside an Item
     * @param {String} vaultUuid The UUID of the Vault to fetch Items from
     * @param {String} itemUuid The UUID of the Item to fetch files from
     * @param {Object} opts Optional parameters
     * @param {Boolean} [inlineFiles] Tells server to return the base64-encoded file contents in the response.
     * @param {module:api/FilesApi~getItemFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<File>}
     */
    getItemFiles(vaultUuid, itemUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultUuid' is set
      if (vaultUuid === undefined || vaultUuid === null) {
        throw new Error("Missing the required parameter 'vaultUuid' when calling getItemFiles");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling getItemFiles");
      }

      let pathParams = {
        'vaultUuid': vaultUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
        'inline_files': opts['inlineFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ConnectToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [File];
      return this.apiClient.callApi(
        '/vaults/{vaultUuid}/items/{itemUuid}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
