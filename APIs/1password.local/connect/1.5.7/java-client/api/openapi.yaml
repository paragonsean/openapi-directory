openapi: 3.0.2
info:
  contact:
    email: support@1password.com
    name: 1Password Integrations
    url: https://support.1password.com/
  description: REST API interface for 1Password Connect.
  title: 1Password Connect
  version: 1.5.7
  x-apisguru-categories:
  - security
  x-logo:
    url: https://1password.com/img/meta-og-image.png
  x-origin:
  - format: openapi
    url: https://i.1password.com/media/1password-connect/1password-connect-api.yaml
    version: "3.0"
  x-providerName: 1password.local
  x-serviceName: connect
servers:
- url: http://1password.local
- url: http://localhost:8080/v1
tags:
- description: Access and manage items inside 1Password Vaults
  name: Items
- description: Access 1Password Vaults
  name: Vaults
- description: Access API Request Activity
  name: Activity
paths:
  /activity:
    get:
      operationId: GetApiActivity
      parameters:
      - description: How many API Events should be retrieved in a single request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          example: 10
          type: integer
        style: form
      - description: How far into the collection of API Events should the response
          start
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          example: 50
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIRequest'
                type: array
          description: OK
          headers:
            Content-Range:
              description: An decription of what part of the collection has been returned
                as well as the total size.
              explode: false
              schema:
                example: 1-50/1134
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
      security:
      - ConnectToken: []
      summary: Retrieve a list of API Requests that have been made.
      tags:
      - Activity
      x-accepts:
      - application/json
  /health:
    get:
      operationId: GetServerHealth
      responses:
        "200":
          content:
            application/json:
              examples:
                WaitingForAPIRequest:
                  summary: API server waiting for first authenticated request
                  value:
                    dependencies:
                    - service: sync
                      status: TOKEN_NEEDED
                    - message: Connected to./1password.sqlite
                      service: sqlite
                      status: ACTIVE
                    name: 1Password Connect API
                    version: 1.2.1
              schema:
                $ref: '#/components/schemas/GetServerHealth_200_response'
          description: OK
      servers:
      - url: http://localhost:8080
      summary: Get state of the server and its dependencies.
      tags:
      - Health
      x-accepts:
      - application/json
  /heartbeat:
    get:
      operationId: GetHeartbeat
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: "."
                type: string
          description: OK
      servers:
      - url: http://localhost:8080
      summary: Ping the server for liveness
      tags:
      - Health
      x-accepts:
      - text/plain
  /metrics:
    get:
      description: See Prometheus documentation for a complete data model.
      operationId: GetPrometheusMetrics
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: |
                  # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
                  # TYPE go_gc_duration_seconds summary
                  go_gc_duration_seconds{quantile="0"} 2.9153e-05
                  go_gc_duration_seconds{quantile="0.25"} 6.2832e-05
                  go_gc_duration_seconds{quantile="0.5"} 9.7187e-05
                  go_gc_duration_seconds{quantile="0.75"} 0.000112967
                  go_gc_duration_seconds{quantile="1"} 0.000215819
                  go_gc_duration_seconds_sum 0.001376862
                  go_gc_duration_seconds_count 14
                type: string
          description: Successfully returned Prometheus metrics
      servers:
      - url: http://localhost:8080
      summary: Query server for exposed Prometheus metrics
      tags:
      - Metrics
      x-accepts:
      - text/plain
  /vaults:
    get:
      operationId: GetVaults
      parameters:
      - description: Filter the Vault collection based on Vault name using SCIM eq
          filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: name eq "Some Vault Name"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vault'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
      security:
      - ConnectToken: []
      summary: Get all Vaults
      tags:
      - Vaults
      x-accepts:
      - application/json
  /vaults/{vaultUuid}:
    get:
      operationId: GetVaultById
      parameters:
      - description: The UUID of the Vault to fetch Items from
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              example:
                message: "vault {itemUuid} not found"
                status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Vault not found
      security:
      - ConnectToken: []
      summary: Get Vault details and metadata
      tags:
      - Vaults
      x-accepts:
      - application/json
  /vaults/{vaultUuid}/items:
    get:
      operationId: GetVaultItems
      parameters:
      - description: The UUID of the Vault to fetch Items from
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      - description: Filter the Item collection based on Item name using SCIM eq filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          example: title eq "Some Item Name"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "404":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} not found"
                status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Vault not found
      security:
      - ConnectToken: []
      summary: Get all items for inside a Vault
      tags:
      - Items
      x-accepts:
      - application/json
    post:
      operationId: CreateVaultItem
      parameters:
      - description: The UUID of the Vault to create an Item in
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullItem'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullItem'
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Invalid item category
                status: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unable to create item due to invalid input
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
      - ConnectToken: []
      summary: Create a new Item
      tags:
      - Items
      x-content-type: application/json
      x-accepts:
      - application/json
  /vaults/{vaultUuid}/items/{itemUuid}:
    delete:
      operationId: DeleteVaultItem
      parameters:
      - description: The UUID of the Vault the item is in
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      - description: The UUID of the Item to update
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      responses:
        "204":
          description: Successfully deleted an item
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
      - ConnectToken: []
      summary: Delete an Item
      tags:
      - Items
      x-accepts:
      - application/json
    get:
      operationId: GetVaultItemById
      parameters:
      - description: The UUID of the Vault to fetch Item from
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      - description: The UUID of the Item to fetch
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullItem'
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
      - ConnectToken: []
      summary: Get the details of an Item
      tags:
      - Items
      x-accepts:
      - application/json
    patch:
      description: |
        Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.

        When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`
      operationId: PatchVaultItem
      parameters:
      - description: The UUID of the Vault the item is in
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      - description: The UUID of the Item to update
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              PatchItemAttr:
                summary: Update specific Item attributes
                value:
                - op: replace
                  path: /favorite
                  value: true
                - op: remove
                  path: /tags/1
              PatchItemField:
                summary: Add a new ItemField to the Item
                value:
                - op: add
                  path: /fields
                  value:
                    label: New Field
                    type: string
                    value: hunter2
              PatchItemFieldAttr:
                summary: Modify a specific ItemField attribute.
                value:
                - op: add
                  path: /fields/s2ju540zlna8bdj4uro7sj64rk/label
                  value: New field name
                - op: remove
                  path: /fields/s2ju540zlna8bdj4uro7sj64rk/value
              PatchItemFieldWithID:
                summary: Modify or remove an ItemField.
                value:
                - op: replace
                  path: /fields/r9qxq7xnhfhukoxsc8ymqr0y11
                  value:
                    label: Replacement Title
                    type: string
                    value: new value
                - op: remove
                  path: /fields/h2nl155dshi043yse7wa3u1hs7
              ReplaceAllAttributes:
                summary: Replace an entire Item with new fields. Equivalent to a PUT
                  request.
                value:
                - op: replace
                  path: /
                  value:
                    "...": Any attr from FullItem schema
                    favorite: true
                    tags:
                    - tag1
                    - tag2
                    title: New Title
            schema:
              $ref: '#/components/schemas/Patch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullItem'
          description: "OK - Item updated. If no Patch operations were provided, Item\
            \ is unmodified."
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
      - ConnectToken: []
      summary: Update a subset of Item attributes
      tags:
      - Items
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      operationId: UpdateVaultItem
      parameters:
      - description: The UUID of the Item's Vault
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      - description: The UUID of the Item to update
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          pattern: "^[\\da-z]{26}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullItem'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullItem'
          description: OK
        "400":
          content:
            application/json:
              example:
                message: "The item doesn't have a {example field name} field."
                status: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unable to create item due to invalid input
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
      - ConnectToken: []
      summary: Update an Item
      tags:
      - Items
      x-content-type: application/json
      x-accepts:
      - application/json
  /vaults/{vaultUuid}/items/{itemUuid}/files:
    get:
      operationId: GetItemFiles
      parameters:
      - description: The UUID of the Vault to fetch Items from
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The UUID of the Item to fetch files from
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Tells server to return the base64-encoded file contents in the
          response.
        explode: true
        in: query
        name: inline_files
        required: false
        schema:
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/File'
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
        "413":
          content:
            application/json:
              examples:
                fileTooLarge:
                  summary: File too large
                  value:
                    message: "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content\
                      \ endpoint instead."
                    status: 413
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: File content too large to display
      security:
      - ConnectToken: []
      summary: Get all the files inside an Item
      tags:
      - Files
      x-accepts:
      - application/json
  /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}:
    get:
      operationId: GetDetailsOfFileById
      parameters:
      - description: The UUID of the Vault to fetch Item from
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The UUID of the Item to fetch File from
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The UUID of the File to fetch
        explode: false
        in: path
        name: fileUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Tells server to return the base64-encoded file contents in the
          response.
        explode: true
        in: query
        name: inline_files
        required: false
        schema:
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: "vault {vaultUuid} is not in scope"
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                fileNotFound:
                  summary: File not found
                  value:
                    message: "file {fileUuid} not found"
                    status: 404
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: File not found
        "413":
          content:
            application/json:
              examples:
                fileTooLarge:
                  summary: File too large
                  value:
                    message: "File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content\
                      \ endpoint instead."
                    status: 413
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: File content too large to display
      security:
      - ConnectToken: []
      summary: Get the details of a File
      tags:
      - Files
      x-accepts:
      - application/json
  /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content:
    get:
      operationId: DownloadFileByID
      parameters:
      - description: The UUID of the Vault the item is in
        explode: false
        in: path
        name: vaultUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: The UUID of the Item the File is in
        explode: false
        in: path
        name: itemUuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: UUID of the file to get content from
        explode: false
        in: path
        name: fileUuid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Success
          headers:
            Content-Disposition:
              explode: false
              schema:
                example: attachment; filename="privkey.pem"
                type: string
              style: simple
            Content-Length:
              explode: false
              schema:
                example: "6432"
                type: string
              style: simple
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        "404":
          content:
            application/json:
              examples:
                fileNotFound:
                  summary: File not found
                  value:
                    message: "file {fileUuid} not found"
                    status: 404
                itemNotFound:
                  summary: Item not found
                  value:
                    message: "item {itemUuid} not found"
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: "vault {vaultUuid} not found"
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: File not found
      security:
      - ConnectToken: []
      summary: Get the content of a File
      tags:
      - Files
      x-accepts:
      - application/json
      - application/octet-stream
components:
  schemas:
    APIRequest:
      description: Represents a request that was made to the API. Including what Token
        was used and what resource was accessed.
      example:
        actor:
          requestIp: requestIp
          userAgent: userAgent
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          account: account
          jti: jti
        result: SUCCESS
        resource:
          item:
            id: id
          itemVersion: 0
          type: ITEM
          vault:
            id: id
        requestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        action: READ
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        action:
          enum:
          - READ
          - CREATE
          - UPDATE
          - DELETE
          type: string
        actor:
          $ref: '#/components/schemas/APIRequest_actor'
        requestId:
          description: The unique id used to identify a single request.
          format: uuid
          type: string
        resource:
          $ref: '#/components/schemas/APIRequest_resource'
        result:
          enum:
          - SUCCESS
          - DENY
          type: string
        timestamp:
          description: The time at which the request was processed by the server.
          format: date-time
          readOnly: true
          type: string
      type: object
    ErrorResponse:
      example:
        message: message
        status: 6
      properties:
        message:
          description: A message detailing the error
          type: string
        status:
          description: HTTP Status Code
          type: integer
      type: object
    Field:
      example:
        entropy: 6.027456183070403
        purpose: ""
        recipe:
          characterSets:
          - LETTERS
          - LETTERS
          length: 10
          excludeCharacters: abc1
        section:
          id: id
        id: id
        label: label
        type: STRING
        generate: false
        value: value
      properties:
        entropy:
          description: For fields with a purpose of `PASSWORD` this is the entropy
            of the value
          readOnly: true
          type: number
        generate:
          default: false
          description: If value is not present then a new value should be generated
            for this field
          type: boolean
        id:
          type: string
        label:
          type: string
        purpose:
          description: "Some item types, Login and Password, have fields used for\
            \ autofill. This property indicates that purpose and is required for some\
            \ item types."
          enum:
          - ""
          - USERNAME
          - PASSWORD
          - NOTES
          type: string
        recipe:
          $ref: '#/components/schemas/GeneratorRecipe'
        section:
          $ref: '#/components/schemas/Field_section'
        type:
          default: STRING
          enum:
          - STRING
          - EMAIL
          - CONCEALED
          - URL
          - TOTP
          - DATE
          - MONTH_YEAR
          - MENU
          type: string
        value:
          type: string
      required:
      - id
      - type
      type: object
    File:
      example:
        content: VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=
        content_path: v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content
        id: 6r65pjq33banznomn7q22sj44e
        name: foo.txt
        size: 35
      properties:
        content:
          description: Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB
            kb and `inline_files` is set to `true`.
          format: byte
          type: string
        content_path:
          description: Path of the Connect API that can be used to download the contents
            of this file.
          readOnly: true
          type: string
        id:
          description: ID of the file
          type: string
        name:
          description: Name of the file
          type: string
        section:
          $ref: '#/components/schemas/File_section'
        size:
          description: Size in bytes of the file
          type: integer
      type: object
    FullItem:
      allOf:
      - $ref: '#/components/schemas/Item'
      - properties:
          fields:
            items:
              $ref: '#/components/schemas/Field'
            type: array
          files:
            items:
              $ref: '#/components/schemas/File'
            type: array
          sections:
            items:
              $ref: '#/components/schemas/FullItem_allOf_sections'
            type: array
        type: object
      example:
        title: title
        version: 0
        lastEditedBy: lastEditedBy
        sections:
        - id: id
          label: label
        - id: id
          label: label
        tags:
        - tags
        - tags
        createdAt: 2000-01-23T04:56:07.000+00:00
        urls:
        - href: https://example.com
          primary: true
        - href: https://example.org
        files:
        - content: VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=
          content_path: v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content
          id: 6r65pjq33banznomn7q22sj44e
          name: foo.txt
          size: 35
        - content: VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=
          content_path: v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content
          id: 6r65pjq33banznomn7q22sj44e
          name: foo.txt
          size: 35
        id: id
        state: ARCHIVED
        category: LOGIN
        fields:
        - entropy: 6.027456183070403
          purpose: ""
          recipe:
            characterSets:
            - LETTERS
            - LETTERS
            length: 10
            excludeCharacters: abc1
          section:
            id: id
          id: id
          label: label
          type: STRING
          generate: false
          value: value
        - entropy: 6.027456183070403
          purpose: ""
          recipe:
            characterSets:
            - LETTERS
            - LETTERS
            length: 10
            excludeCharacters: abc1
          section:
            id: id
          id: id
          label: label
          type: STRING
          generate: false
          value: value
        favorite: false
        vault:
          id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
    GeneratorRecipe:
      description: The recipe is used in conjunction with the "generate" property
        to set the character set used to generate a new secure value
      example:
        characterSets:
        - LETTERS
        - LETTERS
        length: 10
        excludeCharacters: abc1
      properties:
        characterSets:
          items:
            enum:
            - LETTERS
            - DIGITS
            - SYMBOLS
            type: string
          maximum: 3
          minimum: 0
          type: array
          uniqueItems: true
        excludeCharacters:
          description: List of all characters that should be excluded from generated
            passwords.
          example: abc1
          type: string
        length:
          default: 32
          description: Length of the generated value
          maximum: 64
          minimum: 1
          type: integer
      type: object
    Item:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        urls:
        - href: https://example.com
          primary: true
        - href: https://example.org
        id: id
        state: ARCHIVED
        category: LOGIN
        title: title
        favorite: false
        version: 0
        lastEditedBy: lastEditedBy
        vault:
          id: id
        tags:
        - tags
        - tags
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        category:
          enum:
          - LOGIN
          - PASSWORD
          - API_CREDENTIAL
          - SERVER
          - DATABASE
          - CREDIT_CARD
          - MEMBERSHIP
          - PASSPORT
          - SOFTWARE_LICENSE
          - OUTDOOR_LICENSE
          - SECURE_NOTE
          - WIRELESS_ROUTER
          - BANK_ACCOUNT
          - DRIVER_LICENSE
          - IDENTITY
          - REWARD_PROGRAM
          - DOCUMENT
          - EMAIL_ACCOUNT
          - SOCIAL_SECURITY_NUMBER
          - MEDICAL_RECORD
          - SSH_KEY
          - CUSTOM
          type: string
        createdAt:
          format: date-time
          readOnly: true
          type: string
        favorite:
          default: false
          type: boolean
        id:
          pattern: "^[\\da-z]{26}$"
          type: string
        lastEditedBy:
          readOnly: true
          type: string
        state:
          enum:
          - ARCHIVED
          - DELETED
          readOnly: true
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
        urls:
          example:
          - href: https://example.com
            primary: true
          - href: https://example.org
          items:
            $ref: '#/components/schemas/Item_urls_inner'
          type: array
        vault:
          $ref: '#/components/schemas/Item_vault'
        version:
          type: integer
      required:
      - category
      - vault
      type: object
    Patch:
      items:
        $ref: '#/components/schemas/Patch_inner'
      type: array
    ServiceDependency:
      description: The state of a registered server dependency.
      example:
        service: service
        message: message
        status: status
      properties:
        message:
          description: Human-readable message for explaining the current state.
          type: string
        service:
          type: string
        status:
          type: string
      type: object
    Vault:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        attributeVersion: 0
        name: name
        description: description
        id: id
        type: USER_CREATED
        contentVersion: 6
        items: 1
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        attributeVersion:
          description: The vault version
          type: integer
        contentVersion:
          description: The version of the vault contents
          type: integer
        createdAt:
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        id:
          pattern: "^[\\da-z]{26}$"
          type: string
        items:
          description: Number of active items in the vault
          type: integer
        name:
          type: string
        type:
          enum:
          - USER_CREATED
          - PERSONAL
          - EVERYONE
          - TRANSFER
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
      type: object
    GetServerHealth_200_response:
      example:
        name: name
        version: version
        dependencies:
        - service: service
          message: message
          status: status
        - service: service
          message: message
          status: status
      properties:
        dependencies:
          items:
            $ref: '#/components/schemas/ServiceDependency'
          type: array
        name:
          type: string
        version:
          description: The Connect server's version
          type: string
      required:
      - name
      - version
      type: object
    APIRequest_actor:
      example:
        requestIp: requestIp
        userAgent: userAgent
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        account: account
        jti: jti
      properties:
        account:
          type: string
        id:
          format: uuid
          type: string
        jti:
          type: string
        requestIp:
          type: string
        userAgent:
          type: string
      type: object
    APIRequest_resource_item:
      example:
        id: id
      properties:
        id:
          pattern: "^[\\da-z]{26}$"
          type: string
      type: object
    APIRequest_resource:
      example:
        item:
          id: id
        itemVersion: 0
        type: ITEM
        vault:
          id: id
      properties:
        item:
          $ref: '#/components/schemas/APIRequest_resource_item'
        itemVersion:
          type: integer
        type:
          enum:
          - ITEM
          - VAULT
          type: string
        vault:
          $ref: '#/components/schemas/APIRequest_resource_item'
      type: object
    Field_section:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    File_section:
      description: "For files that are in a section, this field describes the section."
      properties:
        id:
          type: string
      type: object
    FullItem_allOf_sections:
      example:
        id: id
        label: label
      properties:
        id:
          type: string
        label:
          type: string
      type: object
    Item_urls_inner:
      properties:
        href:
          format: url
          type: string
        label:
          type: string
        primary:
          type: boolean
      required:
      - href
      type: object
    Item_vault:
      example:
        id: id
      properties:
        id:
          pattern: "^[\\da-z]{26}$"
          type: string
      required:
      - id
      type: object
    Patch_inner:
      properties:
        op:
          enum:
          - add
          - remove
          - replace
          type: string
        path:
          description: "An RFC6901 JSON Pointer pointing to the Item document, an\
            \ Item Attribute, and Item Field by Field ID, or an Item Field Attribute"
          example: /fields/06gnn2b95example10q91512p5/label
          type: string
        value:
          type: object
      required:
      - op
      - path
      type: object
  securitySchemes:
    ConnectToken:
      bearerFormat: JWT
      scheme: bearer
      type: http

