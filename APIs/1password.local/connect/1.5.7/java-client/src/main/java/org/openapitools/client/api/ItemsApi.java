/*
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FullItem;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.PatchInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVaultItem
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @param fullItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVaultItemCall(String vaultUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullItem;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVaultItemValidateBeforeCall(String vaultUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling createVaultItem(Async)");
        }

        return createVaultItemCall(vaultUuid, fullItem, _callback);

    }

    /**
     * Create a new Item
     * 
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @param fullItem  (optional)
     * @return FullItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public FullItem createVaultItem(String vaultUuid, FullItem fullItem) throws ApiException {
        ApiResponse<FullItem> localVarResp = createVaultItemWithHttpInfo(vaultUuid, fullItem);
        return localVarResp.getData();
    }

    /**
     * Create a new Item
     * 
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @param fullItem  (optional)
     * @return ApiResponse&lt;FullItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullItem> createVaultItemWithHttpInfo(String vaultUuid, FullItem fullItem) throws ApiException {
        okhttp3.Call localVarCall = createVaultItemValidateBeforeCall(vaultUuid, fullItem, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Item (asynchronously)
     * 
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @param fullItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVaultItemAsync(String vaultUuid, FullItem fullItem, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVaultItemValidateBeforeCall(vaultUuid, fullItem, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVaultItem
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVaultItemCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVaultItemValidateBeforeCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling deleteVaultItem(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling deleteVaultItem(Async)");
        }

        return deleteVaultItemCall(vaultUuid, itemUuid, _callback);

    }

    /**
     * Delete an Item
     * 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVaultItem(String vaultUuid, String itemUuid) throws ApiException {
        deleteVaultItemWithHttpInfo(vaultUuid, itemUuid);
    }

    /**
     * Delete an Item
     * 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVaultItemWithHttpInfo(String vaultUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteVaultItemValidateBeforeCall(vaultUuid, itemUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Item (asynchronously)
     * 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVaultItemAsync(String vaultUuid, String itemUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVaultItemValidateBeforeCall(vaultUuid, itemUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVaultItemById
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultItemByIdCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVaultItemByIdValidateBeforeCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getVaultItemById(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling getVaultItemById(Async)");
        }

        return getVaultItemByIdCall(vaultUuid, itemUuid, _callback);

    }

    /**
     * Get the details of an Item
     * 
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @return FullItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public FullItem getVaultItemById(String vaultUuid, String itemUuid) throws ApiException {
        ApiResponse<FullItem> localVarResp = getVaultItemByIdWithHttpInfo(vaultUuid, itemUuid);
        return localVarResp.getData();
    }

    /**
     * Get the details of an Item
     * 
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @return ApiResponse&lt;FullItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullItem> getVaultItemByIdWithHttpInfo(String vaultUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = getVaultItemByIdValidateBeforeCall(vaultUuid, itemUuid, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of an Item (asynchronously)
     * 
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultItemByIdAsync(String vaultUuid, String itemUuid, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVaultItemByIdValidateBeforeCall(vaultUuid, itemUuid, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVaultItems
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vault not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultItemsCall(String vaultUuid, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVaultItemsValidateBeforeCall(String vaultUuid, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getVaultItems(Async)");
        }

        return getVaultItemsCall(vaultUuid, filter, _callback);

    }

    /**
     * Get all items for inside a Vault
     * 
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vault not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Item> getVaultItems(String vaultUuid, String filter) throws ApiException {
        ApiResponse<List<Item>> localVarResp = getVaultItemsWithHttpInfo(vaultUuid, filter);
        return localVarResp.getData();
    }

    /**
     * Get all items for inside a Vault
     * 
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vault not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Item>> getVaultItemsWithHttpInfo(String vaultUuid, String filter) throws ApiException {
        okhttp3.Call localVarCall = getVaultItemsValidateBeforeCall(vaultUuid, filter, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all items for inside a Vault (asynchronously)
     * 
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Vault not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVaultItemsAsync(String vaultUuid, String filter, final ApiCallback<List<Item>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVaultItemsValidateBeforeCall(vaultUuid, filter, _callback);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchVaultItem
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param patchInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVaultItemCall(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchInner;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchVaultItemValidateBeforeCall(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling patchVaultItem(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling patchVaultItem(Async)");
        }

        return patchVaultItemCall(vaultUuid, itemUuid, patchInner, _callback);

    }

    /**
     * Update a subset of Item attributes
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports &#x60;add&#x60;, &#x60;remove&#x60; and &#x60;replace&#x60; operations.  When modifying a specific ItemField, the ItemField&#39;s ID in the &#x60;path&#x60; attribute of the operation object: &#x60;/fields/{fieldId}&#x60; 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param patchInner  (optional)
     * @return FullItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public FullItem patchVaultItem(String vaultUuid, String itemUuid, List<PatchInner> patchInner) throws ApiException {
        ApiResponse<FullItem> localVarResp = patchVaultItemWithHttpInfo(vaultUuid, itemUuid, patchInner);
        return localVarResp.getData();
    }

    /**
     * Update a subset of Item attributes
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports &#x60;add&#x60;, &#x60;remove&#x60; and &#x60;replace&#x60; operations.  When modifying a specific ItemField, the ItemField&#39;s ID in the &#x60;path&#x60; attribute of the operation object: &#x60;/fields/{fieldId}&#x60; 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param patchInner  (optional)
     * @return ApiResponse&lt;FullItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullItem> patchVaultItemWithHttpInfo(String vaultUuid, String itemUuid, List<PatchInner> patchInner) throws ApiException {
        okhttp3.Call localVarCall = patchVaultItemValidateBeforeCall(vaultUuid, itemUuid, patchInner, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a subset of Item attributes (asynchronously)
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports &#x60;add&#x60;, &#x60;remove&#x60; and &#x60;replace&#x60; operations.  When modifying a specific ItemField, the ItemField&#39;s ID in the &#x60;path&#x60; attribute of the operation object: &#x60;/fields/{fieldId}&#x60; 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param patchInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVaultItemAsync(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchVaultItemValidateBeforeCall(vaultUuid, itemUuid, patchInner, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVaultItem
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param fullItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVaultItemCall(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullItem;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVaultItemValidateBeforeCall(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling updateVaultItem(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling updateVaultItem(Async)");
        }

        return updateVaultItemCall(vaultUuid, itemUuid, fullItem, _callback);

    }

    /**
     * Update an Item
     * 
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param fullItem  (optional)
     * @return FullItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public FullItem updateVaultItem(String vaultUuid, String itemUuid, FullItem fullItem) throws ApiException {
        ApiResponse<FullItem> localVarResp = updateVaultItemWithHttpInfo(vaultUuid, itemUuid, fullItem);
        return localVarResp.getData();
    }

    /**
     * Update an Item
     * 
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param fullItem  (optional)
     * @return ApiResponse&lt;FullItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FullItem> updateVaultItemWithHttpInfo(String vaultUuid, String itemUuid, FullItem fullItem) throws ApiException {
        okhttp3.Call localVarCall = updateVaultItemValidateBeforeCall(vaultUuid, itemUuid, fullItem, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Item (asynchronously)
     * 
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param fullItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create item due to invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVaultItemAsync(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVaultItemValidateBeforeCall(vaultUuid, itemUuid, fullItem, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
