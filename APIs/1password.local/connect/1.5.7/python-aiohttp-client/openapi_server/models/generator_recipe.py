# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeneratorRecipe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_sets: list[str]=None, exclude_characters: str=None, length: int=32):
        """GeneratorRecipe - a model defined in OpenAPI

        :param character_sets: The character_sets of this GeneratorRecipe.
        :param exclude_characters: The exclude_characters of this GeneratorRecipe.
        :param length: The length of this GeneratorRecipe.
        """
        self.openapi_types = {
            'character_sets': list[str],
            'exclude_characters': str,
            'length': int
        }

        self.attribute_map = {
            'character_sets': 'characterSets',
            'exclude_characters': 'excludeCharacters',
            'length': 'length'
        }

        self._character_sets = character_sets
        self._exclude_characters = exclude_characters
        self._length = length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeneratorRecipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeneratorRecipe of this GeneratorRecipe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_sets(self):
        """Gets the character_sets of this GeneratorRecipe.


        :return: The character_sets of this GeneratorRecipe.
        :rtype: list[str]
        """
        return self._character_sets

    @character_sets.setter
    def character_sets(self, character_sets):
        """Sets the character_sets of this GeneratorRecipe.


        :param character_sets: The character_sets of this GeneratorRecipe.
        :type character_sets: list[str]
        """
        allowed_values = ["LETTERS", "DIGITS", "SYMBOLS"]  # noqa: E501
        if not set(character_sets).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `character_sets` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(character_sets) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._character_sets = character_sets

    @property
    def exclude_characters(self):
        """Gets the exclude_characters of this GeneratorRecipe.

        List of all characters that should be excluded from generated passwords.

        :return: The exclude_characters of this GeneratorRecipe.
        :rtype: str
        """
        return self._exclude_characters

    @exclude_characters.setter
    def exclude_characters(self, exclude_characters):
        """Sets the exclude_characters of this GeneratorRecipe.

        List of all characters that should be excluded from generated passwords.

        :param exclude_characters: The exclude_characters of this GeneratorRecipe.
        :type exclude_characters: str
        """

        self._exclude_characters = exclude_characters

    @property
    def length(self):
        """Gets the length of this GeneratorRecipe.

        Length of the generated value

        :return: The length of this GeneratorRecipe.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this GeneratorRecipe.

        Length of the generated value

        :param length: The length of this GeneratorRecipe.
        :type length: int
        """
        if length is not None and length > 64:
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `64`")
        if length is not None and length < 1:
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `1`")

        self._length = length
