# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server.models.full_item_all_of_sections import FullItemAllOfSections
from openapi_server.models.item_urls_inner import ItemUrlsInner
from openapi_server.models.item_vault import ItemVault
from openapi_server.models.model_field import ModelField
import re
from openapi_server import util


class FullItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, created_at: datetime=None, favorite: bool=False, id: str=None, last_edited_by: str=None, state: str=None, tags: List[str]=None, title: str=None, updated_at: datetime=None, urls: List[ItemUrlsInner]=None, vault: ItemVault=None, version: int=None, fields: List[ModelField]=None, files: List[File]=None, sections: List[FullItemAllOfSections]=None):
        """FullItem - a model defined in OpenAPI

        :param category: The category of this FullItem.
        :param created_at: The created_at of this FullItem.
        :param favorite: The favorite of this FullItem.
        :param id: The id of this FullItem.
        :param last_edited_by: The last_edited_by of this FullItem.
        :param state: The state of this FullItem.
        :param tags: The tags of this FullItem.
        :param title: The title of this FullItem.
        :param updated_at: The updated_at of this FullItem.
        :param urls: The urls of this FullItem.
        :param vault: The vault of this FullItem.
        :param version: The version of this FullItem.
        :param fields: The fields of this FullItem.
        :param files: The files of this FullItem.
        :param sections: The sections of this FullItem.
        """
        self.openapi_types = {
            'category': str,
            'created_at': datetime,
            'favorite': bool,
            'id': str,
            'last_edited_by': str,
            'state': str,
            'tags': List[str],
            'title': str,
            'updated_at': datetime,
            'urls': List[ItemUrlsInner],
            'vault': ItemVault,
            'version': int,
            'fields': List[ModelField],
            'files': List[File],
            'sections': List[FullItemAllOfSections]
        }

        self.attribute_map = {
            'category': 'category',
            'created_at': 'createdAt',
            'favorite': 'favorite',
            'id': 'id',
            'last_edited_by': 'lastEditedBy',
            'state': 'state',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updatedAt',
            'urls': 'urls',
            'vault': 'vault',
            'version': 'version',
            'fields': 'fields',
            'files': 'files',
            'sections': 'sections'
        }

        self._category = category
        self._created_at = created_at
        self._favorite = favorite
        self._id = id
        self._last_edited_by = last_edited_by
        self._state = state
        self._tags = tags
        self._title = title
        self._updated_at = updated_at
        self._urls = urls
        self._vault = vault
        self._version = version
        self._fields = fields
        self._files = files
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullItem of this FullItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this FullItem.


        :return: The category of this FullItem.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FullItem.


        :param category: The category of this FullItem.
        :type category: str
        """
        allowed_values = ["LOGIN", "PASSWORD", "API_CREDENTIAL", "SERVER", "DATABASE", "CREDIT_CARD", "MEMBERSHIP", "PASSPORT", "SOFTWARE_LICENSE", "OUTDOOR_LICENSE", "SECURE_NOTE", "WIRELESS_ROUTER", "BANK_ACCOUNT", "DRIVER_LICENSE", "IDENTITY", "REWARD_PROGRAM", "DOCUMENT", "EMAIL_ACCOUNT", "SOCIAL_SECURITY_NUMBER", "MEDICAL_RECORD", "SSH_KEY", "CUSTOM"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this FullItem.


        :return: The created_at of this FullItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FullItem.


        :param created_at: The created_at of this FullItem.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def favorite(self):
        """Gets the favorite of this FullItem.


        :return: The favorite of this FullItem.
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this FullItem.


        :param favorite: The favorite of this FullItem.
        :type favorite: bool
        """

        self._favorite = favorite

    @property
    def id(self):
        """Gets the id of this FullItem.


        :return: The id of this FullItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FullItem.


        :param id: The id of this FullItem.
        :type id: str
        """
        if id is not None and not re.search(r'^[\da-z]{26}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[\da-z]{26}$/`")

        self._id = id

    @property
    def last_edited_by(self):
        """Gets the last_edited_by of this FullItem.


        :return: The last_edited_by of this FullItem.
        :rtype: str
        """
        return self._last_edited_by

    @last_edited_by.setter
    def last_edited_by(self, last_edited_by):
        """Sets the last_edited_by of this FullItem.


        :param last_edited_by: The last_edited_by of this FullItem.
        :type last_edited_by: str
        """

        self._last_edited_by = last_edited_by

    @property
    def state(self):
        """Gets the state of this FullItem.


        :return: The state of this FullItem.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FullItem.


        :param state: The state of this FullItem.
        :type state: str
        """
        allowed_values = ["ARCHIVED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this FullItem.


        :return: The tags of this FullItem.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FullItem.


        :param tags: The tags of this FullItem.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this FullItem.


        :return: The title of this FullItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FullItem.


        :param title: The title of this FullItem.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this FullItem.


        :return: The updated_at of this FullItem.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FullItem.


        :param updated_at: The updated_at of this FullItem.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def urls(self):
        """Gets the urls of this FullItem.


        :return: The urls of this FullItem.
        :rtype: List[ItemUrlsInner]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this FullItem.


        :param urls: The urls of this FullItem.
        :type urls: List[ItemUrlsInner]
        """

        self._urls = urls

    @property
    def vault(self):
        """Gets the vault of this FullItem.


        :return: The vault of this FullItem.
        :rtype: ItemVault
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """Sets the vault of this FullItem.


        :param vault: The vault of this FullItem.
        :type vault: ItemVault
        """
        if vault is None:
            raise ValueError("Invalid value for `vault`, must not be `None`")

        self._vault = vault

    @property
    def version(self):
        """Gets the version of this FullItem.


        :return: The version of this FullItem.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FullItem.


        :param version: The version of this FullItem.
        :type version: int
        """

        self._version = version

    @property
    def fields(self):
        """Gets the fields of this FullItem.


        :return: The fields of this FullItem.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FullItem.


        :param fields: The fields of this FullItem.
        :type fields: List[ModelField]
        """

        self._fields = fields

    @property
    def files(self):
        """Gets the files of this FullItem.


        :return: The files of this FullItem.
        :rtype: List[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FullItem.


        :param files: The files of this FullItem.
        :type files: List[File]
        """

        self._files = files

    @property
    def sections(self):
        """Gets the sections of this FullItem.


        :return: The sections of this FullItem.
        :rtype: List[FullItemAllOfSections]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this FullItem.


        :param sections: The sections of this FullItem.
        :type sections: List[FullItemAllOfSections]
        """

        self._sections = sections
