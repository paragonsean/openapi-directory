# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_section import FieldSection
from openapi_server.models.generator_recipe import GeneratorRecipe
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entropy: float=None, generate: bool=False, id: str=None, label: str=None, purpose: str=None, recipe: GeneratorRecipe=None, section: FieldSection=None, type: str='STRING', value: str=None):
        """ModelField - a model defined in OpenAPI

        :param entropy: The entropy of this ModelField.
        :param generate: The generate of this ModelField.
        :param id: The id of this ModelField.
        :param label: The label of this ModelField.
        :param purpose: The purpose of this ModelField.
        :param recipe: The recipe of this ModelField.
        :param section: The section of this ModelField.
        :param type: The type of this ModelField.
        :param value: The value of this ModelField.
        """
        self.openapi_types = {
            'entropy': float,
            'generate': bool,
            'id': str,
            'label': str,
            'purpose': str,
            'recipe': GeneratorRecipe,
            'section': FieldSection,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'entropy': 'entropy',
            'generate': 'generate',
            'id': 'id',
            'label': 'label',
            'purpose': 'purpose',
            'recipe': 'recipe',
            'section': 'section',
            'type': 'type',
            'value': 'value'
        }

        self._entropy = entropy
        self._generate = generate
        self._id = id
        self._label = label
        self._purpose = purpose
        self._recipe = recipe
        self._section = section
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entropy(self):
        """Gets the entropy of this ModelField.

        For fields with a purpose of `PASSWORD` this is the entropy of the value

        :return: The entropy of this ModelField.
        :rtype: float
        """
        return self._entropy

    @entropy.setter
    def entropy(self, entropy):
        """Sets the entropy of this ModelField.

        For fields with a purpose of `PASSWORD` this is the entropy of the value

        :param entropy: The entropy of this ModelField.
        :type entropy: float
        """

        self._entropy = entropy

    @property
    def generate(self):
        """Gets the generate of this ModelField.

        If value is not present then a new value should be generated for this field

        :return: The generate of this ModelField.
        :rtype: bool
        """
        return self._generate

    @generate.setter
    def generate(self, generate):
        """Sets the generate of this ModelField.

        If value is not present then a new value should be generated for this field

        :param generate: The generate of this ModelField.
        :type generate: bool
        """

        self._generate = generate

    @property
    def id(self):
        """Gets the id of this ModelField.


        :return: The id of this ModelField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelField.


        :param id: The id of this ModelField.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this ModelField.


        :return: The label of this ModelField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelField.


        :param label: The label of this ModelField.
        :type label: str
        """

        self._label = label

    @property
    def purpose(self):
        """Gets the purpose of this ModelField.

        Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.

        :return: The purpose of this ModelField.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ModelField.

        Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.

        :param purpose: The purpose of this ModelField.
        :type purpose: str
        """
        allowed_values = ["", "USERNAME", "PASSWORD", "NOTES"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def recipe(self):
        """Gets the recipe of this ModelField.


        :return: The recipe of this ModelField.
        :rtype: GeneratorRecipe
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this ModelField.


        :param recipe: The recipe of this ModelField.
        :type recipe: GeneratorRecipe
        """

        self._recipe = recipe

    @property
    def section(self):
        """Gets the section of this ModelField.


        :return: The section of this ModelField.
        :rtype: FieldSection
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this ModelField.


        :param section: The section of this ModelField.
        :type section: FieldSection
        """

        self._section = section

    @property
    def type(self):
        """Gets the type of this ModelField.


        :return: The type of this ModelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.


        :param type: The type of this ModelField.
        :type type: str
        """
        allowed_values = ["STRING", "EMAIL", "CONCEALED", "URL", "TOTP", "DATE", "MONTH_YEAR", "MENU"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ModelField.


        :return: The value of this ModelField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ModelField.


        :param value: The value of this ModelField.
        :type value: str
        """

        self._value = value
