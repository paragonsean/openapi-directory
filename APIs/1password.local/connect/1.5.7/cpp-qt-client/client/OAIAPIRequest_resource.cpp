/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIRequest_resource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIRequest_resource::OAIAPIRequest_resource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIRequest_resource::OAIAPIRequest_resource() {
    this->initializeModel();
}

OAIAPIRequest_resource::~OAIAPIRequest_resource() {}

void OAIAPIRequest_resource::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_item_version_isSet = false;
    m_item_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vault_isSet = false;
    m_vault_isValid = false;
}

void OAIAPIRequest_resource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIRequest_resource::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_item_version_isValid = ::OpenAPI::fromJsonValue(m_item_version, json[QString("itemVersion")]);
    m_item_version_isSet = !json[QString("itemVersion")].isNull() && m_item_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vault_isValid = ::OpenAPI::fromJsonValue(m_vault, json[QString("vault")]);
    m_vault_isSet = !json[QString("vault")].isNull() && m_vault_isValid;
}

QString OAIAPIRequest_resource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIRequest_resource::asJsonObject() const {
    QJsonObject obj;
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_item_version_isSet) {
        obj.insert(QString("itemVersion"), ::OpenAPI::toJsonValue(m_item_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vault.isSet()) {
        obj.insert(QString("vault"), ::OpenAPI::toJsonValue(m_vault));
    }
    return obj;
}

OAIAPIRequest_resource_item OAIAPIRequest_resource::getItem() const {
    return m_item;
}
void OAIAPIRequest_resource::setItem(const OAIAPIRequest_resource_item &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIAPIRequest_resource::is_item_Set() const{
    return m_item_isSet;
}

bool OAIAPIRequest_resource::is_item_Valid() const{
    return m_item_isValid;
}

qint32 OAIAPIRequest_resource::getItemVersion() const {
    return m_item_version;
}
void OAIAPIRequest_resource::setItemVersion(const qint32 &item_version) {
    m_item_version = item_version;
    m_item_version_isSet = true;
}

bool OAIAPIRequest_resource::is_item_version_Set() const{
    return m_item_version_isSet;
}

bool OAIAPIRequest_resource::is_item_version_Valid() const{
    return m_item_version_isValid;
}

QString OAIAPIRequest_resource::getType() const {
    return m_type;
}
void OAIAPIRequest_resource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAPIRequest_resource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAPIRequest_resource::is_type_Valid() const{
    return m_type_isValid;
}

OAIAPIRequest_resource_item OAIAPIRequest_resource::getVault() const {
    return m_vault;
}
void OAIAPIRequest_resource::setVault(const OAIAPIRequest_resource_item &vault) {
    m_vault = vault;
    m_vault_isSet = true;
}

bool OAIAPIRequest_resource::is_vault_Set() const{
    return m_vault_isSet;
}

bool OAIAPIRequest_resource::is_vault_Valid() const{
    return m_vault_isValid;
}

bool OAIAPIRequest_resource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIRequest_resource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
