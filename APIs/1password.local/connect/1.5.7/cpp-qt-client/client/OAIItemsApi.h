/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIItemsApi_H
#define OAI_OAIItemsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIFullItem.h"
#include "OAIItem.h"
#include "OAIPatch_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIItemsApi : public QObject {
    Q_OBJECT

public:
    OAIItemsApi(const int timeOut = 0);
    ~OAIItemsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  oai_full_item OAIFullItem [optional]
    */
    virtual void createVaultItem(const QString &vault_uuid, const ::OpenAPI::OptionalParam<OAIFullItem> &oai_full_item = ::OpenAPI::OptionalParam<OAIFullItem>());

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    */
    virtual void deleteVaultItem(const QString &vault_uuid, const QString &item_uuid);

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    */
    virtual void getVaultItemById(const QString &vault_uuid, const QString &item_uuid);

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void getVaultItems(const QString &vault_uuid, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    * @param[in]  oai_patch_inner QList<OAIPatch_inner> [optional]
    */
    virtual void patchVaultItem(const QString &vault_uuid, const QString &item_uuid, const ::OpenAPI::OptionalParam<QList<OAIPatch_inner>> &oai_patch_inner = ::OpenAPI::OptionalParam<QList<OAIPatch_inner>>());

    /**
    * @param[in]  vault_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    * @param[in]  oai_full_item OAIFullItem [optional]
    */
    virtual void updateVaultItem(const QString &vault_uuid, const QString &item_uuid, const ::OpenAPI::OptionalParam<OAIFullItem> &oai_full_item = ::OpenAPI::OptionalParam<OAIFullItem>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVaultItemCallback(OAIHttpRequestWorker *worker);
    void deleteVaultItemCallback(OAIHttpRequestWorker *worker);
    void getVaultItemByIdCallback(OAIHttpRequestWorker *worker);
    void getVaultItemsCallback(OAIHttpRequestWorker *worker);
    void patchVaultItemCallback(OAIHttpRequestWorker *worker);
    void updateVaultItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVaultItemSignal(OAIFullItem summary);
    void deleteVaultItemSignal();
    void getVaultItemByIdSignal(OAIFullItem summary);
    void getVaultItemsSignal(QList<OAIItem> summary);
    void patchVaultItemSignal(OAIFullItem summary);
    void updateVaultItemSignal(OAIFullItem summary);


    void createVaultItemSignalFull(OAIHttpRequestWorker *worker, OAIFullItem summary);
    void deleteVaultItemSignalFull(OAIHttpRequestWorker *worker);
    void getVaultItemByIdSignalFull(OAIHttpRequestWorker *worker, OAIFullItem summary);
    void getVaultItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIItem> summary);
    void patchVaultItemSignalFull(OAIHttpRequestWorker *worker, OAIFullItem summary);
    void updateVaultItemSignalFull(OAIHttpRequestWorker *worker, OAIFullItem summary);

    Q_DECL_DEPRECATED_X("Use createVaultItemSignalError() instead")
    void createVaultItemSignalE(OAIFullItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVaultItemSignalError(OAIFullItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVaultItemSignalError() instead")
    void deleteVaultItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVaultItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVaultItemByIdSignalError() instead")
    void getVaultItemByIdSignalE(OAIFullItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVaultItemByIdSignalError(OAIFullItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVaultItemsSignalError() instead")
    void getVaultItemsSignalE(QList<OAIItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVaultItemsSignalError(QList<OAIItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVaultItemSignalError() instead")
    void patchVaultItemSignalE(OAIFullItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVaultItemSignalError(OAIFullItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVaultItemSignalError() instead")
    void updateVaultItemSignalE(OAIFullItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVaultItemSignalError(OAIFullItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVaultItemSignalErrorFull() instead")
    void createVaultItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVaultItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVaultItemSignalErrorFull() instead")
    void deleteVaultItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVaultItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVaultItemByIdSignalErrorFull() instead")
    void getVaultItemByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVaultItemByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVaultItemsSignalErrorFull() instead")
    void getVaultItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVaultItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVaultItemSignalErrorFull() instead")
    void patchVaultItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVaultItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVaultItemSignalErrorFull() instead")
    void updateVaultItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVaultItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
