/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIRequest::OAIAPIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIRequest::OAIAPIRequest() {
    this->initializeModel();
}

OAIAPIRequest::~OAIAPIRequest() {}

void OAIAPIRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIAPIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIAPIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIAPIRequest::getAction() const {
    return m_action;
}
void OAIAPIRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAPIRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAPIRequest::is_action_Valid() const{
    return m_action_isValid;
}

OAIAPIRequest_actor OAIAPIRequest::getActor() const {
    return m_actor;
}
void OAIAPIRequest::setActor(const OAIAPIRequest_actor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIAPIRequest::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIAPIRequest::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIAPIRequest::getRequestId() const {
    return m_request_id;
}
void OAIAPIRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIAPIRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIAPIRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIAPIRequest_resource OAIAPIRequest::getResource() const {
    return m_resource;
}
void OAIAPIRequest::setResource(const OAIAPIRequest_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAPIRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAPIRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIAPIRequest::getResult() const {
    return m_result;
}
void OAIAPIRequest::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIAPIRequest::is_result_Set() const{
    return m_result_isSet;
}

bool OAIAPIRequest::is_result_Valid() const{
    return m_result_isValid;
}

QDateTime OAIAPIRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIAPIRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAPIRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAPIRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIAPIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
