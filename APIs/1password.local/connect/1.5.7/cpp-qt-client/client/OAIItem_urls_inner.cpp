/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem_urls_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem_urls_inner::OAIItem_urls_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem_urls_inner::OAIItem_urls_inner() {
    this->initializeModel();
}

OAIItem_urls_inner::~OAIItem_urls_inner() {}

void OAIItem_urls_inner::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;
}

void OAIItem_urls_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem_urls_inner::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;
}

QString OAIItem_urls_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem_urls_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    return obj;
}

QString OAIItem_urls_inner::getHref() const {
    return m_href;
}
void OAIItem_urls_inner::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIItem_urls_inner::is_href_Set() const{
    return m_href_isSet;
}

bool OAIItem_urls_inner::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIItem_urls_inner::getLabel() const {
    return m_label;
}
void OAIItem_urls_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIItem_urls_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIItem_urls_inner::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIItem_urls_inner::isPrimary() const {
    return m_primary;
}
void OAIItem_urls_inner::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIItem_urls_inner::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIItem_urls_inner::is_primary_Valid() const{
    return m_primary_isValid;
}

bool OAIItem_urls_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem_urls_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && true;
}

} // namespace OpenAPI
