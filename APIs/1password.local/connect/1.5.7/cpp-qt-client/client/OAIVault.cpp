/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVault.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVault::OAIVault(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVault::OAIVault() {
    this->initializeModel();
}

OAIVault::~OAIVault() {}

void OAIVault::initializeModel() {

    m_attribute_version_isSet = false;
    m_attribute_version_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIVault::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVault::fromJsonObject(QJsonObject json) {

    m_attribute_version_isValid = ::OpenAPI::fromJsonValue(m_attribute_version, json[QString("attributeVersion")]);
    m_attribute_version_isSet = !json[QString("attributeVersion")].isNull() && m_attribute_version_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIVault::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVault::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_version_isSet) {
        obj.insert(QString("attributeVersion"), ::OpenAPI::toJsonValue(m_attribute_version));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items_isSet) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAIVault::getAttributeVersion() const {
    return m_attribute_version;
}
void OAIVault::setAttributeVersion(const qint32 &attribute_version) {
    m_attribute_version = attribute_version;
    m_attribute_version_isSet = true;
}

bool OAIVault::is_attribute_version_Set() const{
    return m_attribute_version_isSet;
}

bool OAIVault::is_attribute_version_Valid() const{
    return m_attribute_version_isValid;
}

qint32 OAIVault::getContentVersion() const {
    return m_content_version;
}
void OAIVault::setContentVersion(const qint32 &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAIVault::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAIVault::is_content_version_Valid() const{
    return m_content_version_isValid;
}

QDateTime OAIVault::getCreatedAt() const {
    return m_created_at;
}
void OAIVault::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIVault::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIVault::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIVault::getDescription() const {
    return m_description;
}
void OAIVault::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVault::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVault::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVault::getId() const {
    return m_id;
}
void OAIVault::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVault::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVault::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIVault::getItems() const {
    return m_items;
}
void OAIVault::setItems(const qint32 &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIVault::is_items_Set() const{
    return m_items_isSet;
}

bool OAIVault::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIVault::getName() const {
    return m_name;
}
void OAIVault::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVault::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVault::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVault::getType() const {
    return m_type;
}
void OAIVault::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVault::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVault::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIVault::getUpdatedAt() const {
    return m_updated_at;
}
void OAIVault::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIVault::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIVault::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIVault::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVault::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
