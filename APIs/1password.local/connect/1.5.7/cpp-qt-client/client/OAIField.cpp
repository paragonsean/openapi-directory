/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_entropy_isSet = false;
    m_entropy_isValid = false;

    m_generate_isSet = false;
    m_generate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_recipe_isSet = false;
    m_recipe_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_entropy_isValid = ::OpenAPI::fromJsonValue(m_entropy, json[QString("entropy")]);
    m_entropy_isSet = !json[QString("entropy")].isNull() && m_entropy_isValid;

    m_generate_isValid = ::OpenAPI::fromJsonValue(m_generate, json[QString("generate")]);
    m_generate_isSet = !json[QString("generate")].isNull() && m_generate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_recipe_isValid = ::OpenAPI::fromJsonValue(m_recipe, json[QString("recipe")]);
    m_recipe_isSet = !json[QString("recipe")].isNull() && m_recipe_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_entropy_isSet) {
        obj.insert(QString("entropy"), ::OpenAPI::toJsonValue(m_entropy));
    }
    if (m_generate_isSet) {
        obj.insert(QString("generate"), ::OpenAPI::toJsonValue(m_generate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_recipe.isSet()) {
        obj.insert(QString("recipe"), ::OpenAPI::toJsonValue(m_recipe));
    }
    if (m_section.isSet()) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIField::getEntropy() const {
    return m_entropy;
}
void OAIField::setEntropy(const double &entropy) {
    m_entropy = entropy;
    m_entropy_isSet = true;
}

bool OAIField::is_entropy_Set() const{
    return m_entropy_isSet;
}

bool OAIField::is_entropy_Valid() const{
    return m_entropy_isValid;
}

bool OAIField::isGenerate() const {
    return m_generate;
}
void OAIField::setGenerate(const bool &generate) {
    m_generate = generate;
    m_generate_isSet = true;
}

bool OAIField::is_generate_Set() const{
    return m_generate_isSet;
}

bool OAIField::is_generate_Valid() const{
    return m_generate_isValid;
}

QString OAIField::getId() const {
    return m_id;
}
void OAIField::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIField::is_id_Set() const{
    return m_id_isSet;
}

bool OAIField::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIField::getLabel() const {
    return m_label;
}
void OAIField::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIField::is_label_Set() const{
    return m_label_isSet;
}

bool OAIField::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIField::getPurpose() const {
    return m_purpose;
}
void OAIField::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIField::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIField::is_purpose_Valid() const{
    return m_purpose_isValid;
}

OAIGeneratorRecipe OAIField::getRecipe() const {
    return m_recipe;
}
void OAIField::setRecipe(const OAIGeneratorRecipe &recipe) {
    m_recipe = recipe;
    m_recipe_isSet = true;
}

bool OAIField::is_recipe_Set() const{
    return m_recipe_isSet;
}

bool OAIField::is_recipe_Valid() const{
    return m_recipe_isValid;
}

OAIField_section OAIField::getSection() const {
    return m_section;
}
void OAIField::setSection(const OAIField_section &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIField::is_section_Set() const{
    return m_section_isSet;
}

bool OAIField::is_section_Valid() const{
    return m_section_isValid;
}

QString OAIField::getType() const {
    return m_type;
}
void OAIField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIField::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIField::getValue() const {
    return m_value;
}
void OAIField::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIField::is_value_Set() const{
    return m_value_isSet;
}

bool OAIField::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entropy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
