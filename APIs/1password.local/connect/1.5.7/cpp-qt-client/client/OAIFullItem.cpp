/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFullItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFullItem::OAIFullItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFullItem::OAIFullItem() {
    this->initializeModel();
}

OAIFullItem::~OAIFullItem() {}

void OAIFullItem::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_favorite_isSet = false;
    m_favorite_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_edited_by_isSet = false;
    m_last_edited_by_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_vault_isSet = false;
    m_vault_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;
}

void OAIFullItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFullItem::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_favorite_isValid = ::OpenAPI::fromJsonValue(m_favorite, json[QString("favorite")]);
    m_favorite_isSet = !json[QString("favorite")].isNull() && m_favorite_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_edited_by_isValid = ::OpenAPI::fromJsonValue(m_last_edited_by, json[QString("lastEditedBy")]);
    m_last_edited_by_isSet = !json[QString("lastEditedBy")].isNull() && m_last_edited_by_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_vault_isValid = ::OpenAPI::fromJsonValue(m_vault, json[QString("vault")]);
    m_vault_isSet = !json[QString("vault")].isNull() && m_vault_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;
}

QString OAIFullItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFullItem::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_favorite_isSet) {
        obj.insert(QString("favorite"), ::OpenAPI::toJsonValue(m_favorite));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_edited_by_isSet) {
        obj.insert(QString("lastEditedBy"), ::OpenAPI::toJsonValue(m_last_edited_by));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_vault.isSet()) {
        obj.insert(QString("vault"), ::OpenAPI::toJsonValue(m_vault));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    return obj;
}

QString OAIFullItem::getCategory() const {
    return m_category;
}
void OAIFullItem::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFullItem::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFullItem::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIFullItem::getCreatedAt() const {
    return m_created_at;
}
void OAIFullItem::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFullItem::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFullItem::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIFullItem::isFavorite() const {
    return m_favorite;
}
void OAIFullItem::setFavorite(const bool &favorite) {
    m_favorite = favorite;
    m_favorite_isSet = true;
}

bool OAIFullItem::is_favorite_Set() const{
    return m_favorite_isSet;
}

bool OAIFullItem::is_favorite_Valid() const{
    return m_favorite_isValid;
}

QString OAIFullItem::getId() const {
    return m_id;
}
void OAIFullItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFullItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFullItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFullItem::getLastEditedBy() const {
    return m_last_edited_by;
}
void OAIFullItem::setLastEditedBy(const QString &last_edited_by) {
    m_last_edited_by = last_edited_by;
    m_last_edited_by_isSet = true;
}

bool OAIFullItem::is_last_edited_by_Set() const{
    return m_last_edited_by_isSet;
}

bool OAIFullItem::is_last_edited_by_Valid() const{
    return m_last_edited_by_isValid;
}

QString OAIFullItem::getState() const {
    return m_state;
}
void OAIFullItem::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFullItem::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFullItem::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIFullItem::getTags() const {
    return m_tags;
}
void OAIFullItem::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFullItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFullItem::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIFullItem::getTitle() const {
    return m_title;
}
void OAIFullItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFullItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFullItem::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIFullItem::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFullItem::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFullItem::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFullItem::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIItem_urls_inner> OAIFullItem::getUrls() const {
    return m_urls;
}
void OAIFullItem::setUrls(const QList<OAIItem_urls_inner> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIFullItem::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIFullItem::is_urls_Valid() const{
    return m_urls_isValid;
}

OAIItem_vault OAIFullItem::getVault() const {
    return m_vault;
}
void OAIFullItem::setVault(const OAIItem_vault &vault) {
    m_vault = vault;
    m_vault_isSet = true;
}

bool OAIFullItem::is_vault_Set() const{
    return m_vault_isSet;
}

bool OAIFullItem::is_vault_Valid() const{
    return m_vault_isValid;
}

qint32 OAIFullItem::getVersion() const {
    return m_version;
}
void OAIFullItem::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFullItem::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFullItem::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIField> OAIFullItem::getFields() const {
    return m_fields;
}
void OAIFullItem::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIFullItem::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIFullItem::is_fields_Valid() const{
    return m_fields_isValid;
}

QList<OAIFile> OAIFullItem::getFiles() const {
    return m_files;
}
void OAIFullItem::setFiles(const QList<OAIFile> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIFullItem::is_files_Set() const{
    return m_files_isSet;
}

bool OAIFullItem::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIFullItem_allOf_sections> OAIFullItem::getSections() const {
    return m_sections;
}
void OAIFullItem::setSections(const QList<OAIFullItem_allOf_sections> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIFullItem::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIFullItem::is_sections_Valid() const{
    return m_sections_isValid;
}

bool OAIFullItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edited_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFullItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_vault_isValid && true;
}

} // namespace OpenAPI
