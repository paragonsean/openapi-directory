/**
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIRequest_actor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIRequest_actor::OAIAPIRequest_actor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIRequest_actor::OAIAPIRequest_actor() {
    this->initializeModel();
}

OAIAPIRequest_actor::~OAIAPIRequest_actor() {}

void OAIAPIRequest_actor::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jti_isSet = false;
    m_jti_isValid = false;

    m_request_ip_isSet = false;
    m_request_ip_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIAPIRequest_actor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIRequest_actor::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jti_isValid = ::OpenAPI::fromJsonValue(m_jti, json[QString("jti")]);
    m_jti_isSet = !json[QString("jti")].isNull() && m_jti_isValid;

    m_request_ip_isValid = ::OpenAPI::fromJsonValue(m_request_ip, json[QString("requestIp")]);
    m_request_ip_isSet = !json[QString("requestIp")].isNull() && m_request_ip_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;
}

QString OAIAPIRequest_actor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIRequest_actor::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jti_isSet) {
        obj.insert(QString("jti"), ::OpenAPI::toJsonValue(m_jti));
    }
    if (m_request_ip_isSet) {
        obj.insert(QString("requestIp"), ::OpenAPI::toJsonValue(m_request_ip));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIAPIRequest_actor::getAccount() const {
    return m_account;
}
void OAIAPIRequest_actor::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAPIRequest_actor::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAPIRequest_actor::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIAPIRequest_actor::getId() const {
    return m_id;
}
void OAIAPIRequest_actor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAPIRequest_actor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAPIRequest_actor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAPIRequest_actor::getJti() const {
    return m_jti;
}
void OAIAPIRequest_actor::setJti(const QString &jti) {
    m_jti = jti;
    m_jti_isSet = true;
}

bool OAIAPIRequest_actor::is_jti_Set() const{
    return m_jti_isSet;
}

bool OAIAPIRequest_actor::is_jti_Valid() const{
    return m_jti_isValid;
}

QString OAIAPIRequest_actor::getRequestIp() const {
    return m_request_ip;
}
void OAIAPIRequest_actor::setRequestIp(const QString &request_ip) {
    m_request_ip = request_ip;
    m_request_ip_isSet = true;
}

bool OAIAPIRequest_actor::is_request_ip_Set() const{
    return m_request_ip_isSet;
}

bool OAIAPIRequest_actor::is_request_ip_Valid() const{
    return m_request_ip_isValid;
}

QString OAIAPIRequest_actor::getUserAgent() const {
    return m_user_agent;
}
void OAIAPIRequest_actor::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIAPIRequest_actor::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIAPIRequest_actor::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIAPIRequest_actor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jti_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIRequest_actor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
